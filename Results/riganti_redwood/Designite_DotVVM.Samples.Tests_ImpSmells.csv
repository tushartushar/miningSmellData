Implementation smell,Namespace,Class,File,Method,Description
Long Method,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The method has 102 lines of code.
Long Statement,DotVVM.Samples.Tests.Base,AppSeleniumTest,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Base\AppSeleniumTest.cs,RunInAllBrowsers,The length of the statement  "            AssertApiSeleniumTestExecutorExtensions.RunInAllBrowsers(this' testBody' callerMemberName' callerFilePath' callerLineNumber); " is 125.
Long Statement,DotVVM.Samples.Tests.Complex,ServerRenderingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ServerRenderingTests.cs,Complex_ServerRendering_ControlUsageSample,The length of the statement  "            //As I am writing this' test should fail because on postback there will be two <!-- ko with: EditedArticle --/> elements inside each other instead of one. " is 154.
Long Statement,DotVVM.Samples.Tests.Complex,ServerRenderingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ServerRenderingTests.cs,Complex_ServerRendering_ControlUsageSampleRewriting,The length of the statement  "            //As I am writing this' test should work because RenderSettings.Mode' PostBack.Update are on div that is inside div with DataContext. " is 133.
Long Statement,DotVVM.Samples.Tests.Complex,ServerRenderingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ServerRenderingTests.cs,Complex_ServerRendering_ControlUsageSampleRewriting,The length of the statement  "                AssertUI.Attribute(browser.First("div[data-ui='context-1']").First("input[data-ui=textbox]")' "value"' v => v.Contains("a")); " is 125.
Long Statement,DotVVM.Samples.Tests.Complex,ServerRenderingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ServerRenderingTests.cs,Complex_ServerRendering_ControlUsageSampleRewriting,The length of the statement  "                AssertUI.Attribute(browser.First("div[data-ui='context-2']").First("input[data-ui=textbox]")' "value"' v => v.Contains("b")); " is 125.
Long Statement,DotVVM.Samples.Tests.Complex,ServerRenderingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ServerRenderingTests.cs,Complex_ServerRendering_AddingIntoEmptyRepeater,The length of the statement  "                var neArticlesPostAdd = browser.Single("div[data-ui='nonempty-repeater']").FindElements("article[data-ui='test-article']"); " is 123.
Long Statement,DotVVM.Samples.Tests.Complex,ServerRenderingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ServerRenderingTests.cs,CheckArticleCount,The length of the statement  "                throw new UnexpectedElementStateException($"There should be only 2 article in the repeater. There are {articles.Count}"); " is 121.
Long Statement,DotVVM.Samples.Tests.Complex,SPAErrorReportingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPAErrorReportingTests.cs,Complex_SPAErrorReporting_NavigationAndPostbacks,The length of the statement  "                    // try to submit command in offline mode (we don't have CSRF token in Lazy CSRF mode yet' so we should fail in fetchCsrfToken) " is 126.
Long Statement,DotVVM.Samples.Tests.Complex,SPAViewModelReapplicationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPAViewModelReapplicationTests.cs,Complex_SPAViewModelReapplication,The length of the statement  "                AssertUI.InnerText(browser.Single("#first")' s => s.Contains("Entry 1") && s.Contains("Entry 2") && s.Contains("Entry 3")); " is 123.
Long Statement,DotVVM.Samples.Tests.Complex,SPAViewModelReapplicationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPAViewModelReapplicationTests.cs,Complex_SPAViewModelReapplication,The length of the statement  "                AssertUI.InnerText(browser.Single("#first")' s => s.Contains("Entry 1") && s.Contains("Entry 2") && s.Contains("Entry 3")); " is 123.
Long Statement,DotVVM.Samples.Tests.Complex,TaskListTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\TaskListTests.cs,Complex_TaskList_TaskListAsyncCommands,The length of the statement  "                AssertUI.ClassAttribute(browser.Last(".table tr")' a => a.Contains("completed")' "Last task is not marked as completed."); " is 122.
Long Statement,DotVVM.Samples.Tests.Control,ButtonTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ButtonTests.cs,Control_Button_InputTypeButton_HtmlContentInside,The length of the statement  "                          t.Trim().Contains("The <dot:Button> control cannot have inner HTML connect unless the 'ButtonTagName' property is set to 'button'!") " is 132.
Long Statement,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_InRepeater,The length of the statement  "                AssertUI.InnerText(browser.Single("span[data-ui='selectedColors']")' s => s.Contains("orange") && s.Contains("red") && s.Contains("black")); " is 140.
Long Statement,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ItemBinding_ItemValueBinding_Complex_Error,The length of the statement  "                    AssertUI.InnerText(browser.First(".exceptionMessage")' s => s.Contains("Return type") && s.Contains("ItemValueBinding") && s.Contains("primitive type")); " is 153.
Long Statement,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ItemBinding_ItemValueBinding_Complex_Error,The length of the statement  "                    AssertUI.InnerText(browser.First("p.summary")' s => s.Contains("DotVVM.Framework.Compilation.DotvvmCompilationException")); " is 123.
Long Statement,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ItemBinding_ItemValueBinding_SelectedValue_Complex_Error,The length of the statement  "                browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_ItemBinding_ItemValueBinding_SelectedValue_ComplexToInt_Error); " is 126.
Long Statement,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ItemBinding_ItemValueBinding_SelectedValue_Complex_Error,The length of the statement  "                    AssertUI.InnerText(browser.First(".exceptionMessage")' s => s.Contains("DotVVM.Samples.Common.ViewModels.ControlSamples.ComboBox.ComboxItemBindingViewModel+ComplexType") && s.Contains("not assignable") && s.Contains("System.Int32")); " is 233.
Long Statement,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ItemBinding_ItemValueBinding_SelectedValue_Complex_Error,The length of the statement  "                    AssertUI.InnerText(browser.First("p.summary")' s => s.Contains("DotVVM.Framework.Compilation.DotvvmCompilationException")); " is 123.
Long Statement,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ItemBinding_ItemValueBinding_SelectedValue_StringToInt_Error,The length of the statement  "                browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_ItemBinding_ItemValueBinding_SelectedValue_StringToInt_Error); " is 125.
Long Statement,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ItemBinding_ItemValueBinding_SelectedValue_StringToInt_Error,The length of the statement  "                    AssertUI.InnerText(browser.First(".exceptionMessage")' s => s.Contains("System.String") && s.Contains("not assignable") && s.Contains("System.Int32")); " is 151.
Long Statement,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ItemBinding_ItemValueBinding_SelectedValue_StringToInt_Error,The length of the statement  "                    AssertUI.InnerText(browser.First("p.summary")' s => s.Contains("DotVVM.Framework.Compilation.DotvvmCompilationException")); " is 123.
Long Statement,DotVVM.Samples.Tests.Control,ContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ContentPlaceHolderTests.cs,Control_ContentPlaceHolder_ContentPlaceHolderPage,The length of the statement  "                AssertUI.JsPropertyInnerHtml(browser.First("#innerHtmlTest")' html => string.IsNullOrWhiteSpace(System.Net.WebUtility.HtmlDecode(html))' "Inner html has to be empty."); " is 168.
Long Statement,DotVVM.Samples.Tests.Control,ContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ContentPlaceHolderTests.cs,Control_ContentPlaceHolder_ContentPlaceHolderPage_ContentTest,The length of the statement  "                AssertUI.JsPropertyInnerHtml(browser.First("#innerHtmlTest")' html => !string.IsNullOrWhiteSpace(System.Net.WebUtility.HtmlDecode(html))' "Inner html has to contain specified content."); " is 186.
Long Statement,DotVVM.Samples.Tests.Control,ContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ContentPlaceHolderTests.cs,Control_ContentPlaceHolder_DoubleContentPlaceHolderPage_ContentTest,The length of the statement  "                AssertUI.InnerTextEquals(browser.First("title"' SelectByDataUi)' "Title"' failureMessage: "Inner html has to contain specified content."); " is 138.
Long Statement,DotVVM.Samples.Tests.Control,ContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ContentPlaceHolderTests.cs,Control_ContentPlaceHolder_DoubleContentPlaceHolderPage_ContentTest,The length of the statement  "                AssertUI.InnerTextEquals(browser.First("content"' SelectByDataUi)' "Content"' failureMessage: "Inner html has to contain specified content."); " is 142.
Long Statement,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledControlClick,The length of the statement  "                browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 2).ScrollTo().Click(); " is 121.
Long Statement,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledControlClick,The length of the statement  "                browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 1).ScrollTo().Click(); " is 121.
Long Statement,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledControlClick,The length of the statement  "                browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 1).ScrollTo().Click(); " is 121.
Long Statement,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledByBindingControlClick,The length of the statement  "                browser.Single("#pager4").ElementAt("li a"' browser.Single("#pager4").FindElements("li a").Count - 2).ScrollTo().Click().Wait(); " is 128.
Long Statement,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledByBindingControlClick,The length of the statement  "                browser.Single("#pager4").ElementAt("li a"' browser.Single("#pager4").FindElements("li a").Count - 1).ScrollTo().Click(); " is 121.
Long Statement,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledByBindingControlClick,The length of the statement  "                browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 1).ScrollTo().Click(); " is 121.
Long Statement,DotVVM.Samples.Tests.Control,EnvironmentViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\EnvironmentViewTests.cs,Control_EnvironmentView_EnvironmentViewTest,The length of the statement  "                AssertUI.InnerTextEquals(browser.FindElements(".result1").ThrowIfDifferentCountThan(1).First()' "Development or Production environment!"); " is 138.
Long Statement,DotVVM.Samples.Tests.Control,EnvironmentViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\EnvironmentViewTests.cs,Control_EnvironmentView_EnvironmentViewTest,The length of the statement  "                AssertUI.InnerTextEquals(browser.FindElements(".result2").ThrowIfDifferentCountThan(1).First()' "Not Staging environment!"); " is 124.
Long Statement,DotVVM.Samples.Tests.Control,FileUploadInRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadInRepeaterTests.cs,Complex_FileUploadInRepeater_FileUploadInRepeater,The length of the statement  "                browser.WaitFor(() => browser.ElementAt(".files-count"' 0).GetInnerText() == "1"' 10000' "FileCount is not updated to '1'."); " is 125.
Long Statement,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewPagingSortingBase,The length of the statement  "                    AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' 2).ElementAt("td"' 0)' s => s.Equals("alternate")); " is 121.
Long Statement,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The length of the statement  "                AssertUI.HyperLinkEquals(browser.ElementAt("a"' 0)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery); " is 133.
Long Statement,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The length of the statement  "                AssertUI.HyperLinkEquals(browser.ElementAt("a"' 1)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery); " is 133.
Long Statement,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The length of the statement  "                AssertUI.HyperLinkEquals(browser.ElementAt("a"' 2)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery); " is 133.
Long Statement,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The length of the statement  "                AssertUI.HyperLinkEquals(browser.ElementAt("a"' 3)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery); " is 133.
Long Statement,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The length of the statement  "                AssertUI.HyperLinkEquals(browser.ElementAt("a"' 4)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery); " is 133.
Long Statement,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The length of the statement  "                AssertUI.HyperLinkEquals(browser.ElementAt("a"' 5)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery); " is 133.
Long Statement,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The length of the statement  "                AssertUI.HyperLinkEquals(browser.ElementAt("a"' 6)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment); " is 175.
Long Statement,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The length of the statement  "                AssertUI.HyperLinkEquals(browser.ElementAt("a"' 7)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment); " is 175.
Long Statement,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The length of the statement  "                AssertUI.HyperLinkEquals(browser.ElementAt("a"' 8)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment); " is 175.
Long Statement,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The length of the statement  "                AssertUI.HyperLinkEquals(browser.ElementAt("a"' 9)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment); " is 175.
Long Statement,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The length of the statement  "                AssertUI.HyperLinkEquals(browser.ElementAt("a"' 10)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment); " is 176.
Long Statement,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The length of the statement  "                AssertUI.HyperLinkEquals(browser.ElementAt("a"' 11)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment); " is 176.
Long Statement,DotVVM.Samples.Tests.Control,RouteLinkTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RouteLinkTests.cs,CheckUrlGenerationMethod,The length of the statement  "            checkNavigatedUrl("a[data-ui='optional-prefixed-parameter-at-start-client']"' "/id-1/ControlSamples/Repeater/RouteLink"); " is 121.
Long Statement,DotVVM.Samples.Tests.Control,RouteLinkTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RouteLinkTests.cs,CheckUrlGenerationMethod,The length of the statement  "            checkNavigatedUrl("a[data-ui='optional-prefixed-parameter-at-start-client']"' "/id-1/ControlSamples/Repeater/RouteLink"); " is 121.
Long Statement,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder,The length of the statement  "                AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB); " is 179.
Long Statement,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder,The length of the statement  "                AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16"); " is 187.
Long Statement,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder,The length of the statement  "                AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB); " is 179.
Long Statement,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder,The length of the statement  "                AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16"); " is 187.
Long Statement,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder,The length of the statement  "                AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/15"); " is 187.
Long Statement,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder_EnteredFromPageB,The length of the statement  "                AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB); " is 177.
Long Statement,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder_EnteredFromPageB,The length of the statement  "                AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16"); " is 185.
Long Statement,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder_EnteredFromPageB,The length of the statement  "                AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB); " is 177.
Long Statement,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder_EnteredFromPageB,The length of the statement  "                AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16"); " is 185.
Long Statement,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder_EnteredFromPageB,The length of the statement  "                AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/15"); " is 185.
Long Statement,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_PrefixRouteName_EnteredFromPageB,The length of the statement  "                AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB); " is 211.
Long Statement,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_PrefixRouteName_EnteredFromPageB,The length of the statement  "                AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/16"); " is 219.
Long Statement,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_PrefixRouteName_EnteredFromPageB,The length of the statement  "                AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB); " is 211.
Long Statement,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_PrefixRouteName_EnteredFromPageB,The length of the statement  "                AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/16"); " is 219.
Long Statement,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_PrefixRouteName_EnteredFromPageB,The length of the statement  "                AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/15"); " is 219.
Long Statement,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,CheckSelectAllOnFocus,The length of the statement  "            var selectedText = (string)browser.GetJavaScriptExecutor().ExecuteScript($"return window.getSelectionText('{textBoxDataUi}');"); " is 128.
Long Statement,DotVVM.Samples.Tests,ErrorsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\ErrorsTests.cs,Error_BindingInvalidCommand,The length of the statement  "                AssertUI.InnerText(browser.First(".exceptionMessage")' s => s.Contains("Could not resolve identifier") && s.Contains("NonExistingCommand")); " is 140.
Long Statement,DotVVM.Samples.Tests,ErrorsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\ErrorsTests.cs,Error_MasterPageRequiresDifferentViewModel,The length of the statement  "                //browser.First("[class='errorUnderline']")'s => s.Contains("DotVVM.Samples.BasicSamples.ViewModels.EmptyViewModel' DotVVM.Samples.Common")); " is 141.
Long Statement,DotVVM.Samples.Tests,ErrorsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\ErrorsTests.cs,Error_ControlUsageValidation,The length of the statement  "                AssertUI.InnerText(browser.First("p.summary")' s => s.Contains("Text property and inner content") && s.Contains("cannot be set at the same time")); " is 147.
Long Statement,DotVVM.Samples.Tests,ErrorsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\ErrorsTests.cs,Error_ExceptionWindow_DotNetReferenceSourceRedirect,The length of the statement  "                           .First(s => s.Children.Any(c => c.GetTagName() == "img" && ((c.GetAttribute("src")?.IndexOf("referencesource.microsoft.com"' StringComparison.OrdinalIgnoreCase) ?? -1) > -1))) " is 175.
Long Statement,DotVVM.Samples.Tests,ErrorsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\ErrorsTests.cs,Error_UnknownInnerControl,The length of the statement  "                AssertUI.InnerText(browser.First("p.summary")' s => s.Contains("does not inherit from DotvvmControl and thus cannot be used in content")); " is 138.
Long Statement,DotVVM.Samples.Tests,ErrorsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\ErrorsTests.cs,Error_UnknownInnerControl,The length of the statement  "                AssertUI.InnerText(browser.First("[class='errorUnderline']")' s => s.Contains("<dot:ConfirmPostBackHandler Message=\"Confirmation 1\" />")); " is 140.
Long Statement,DotVVM.Samples.Tests,ErrorsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\ErrorsTests.cs,Error_ExceptionWindow_GitHubRedirect,The length of the statement  "                    .First(s => s.Children.Any(c => c.GetTagName() == "img" && ((c.GetAttribute("src")?.IndexOf("github"' StringComparison.OrdinalIgnoreCase) ?? -1) > -1))) " is 152.
Long Statement,DotVVM.Samples.Tests,ErrorsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\ErrorsTests.cs,Error_ConfigurableHtmlControlValidation,The length of the statement  "                        s.Contains("The WrapperTagName property cannot be set when RenderWrapperTag is false!"' StringComparison.OrdinalIgnoreCase) " is 123.
Long Statement,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_AzureFunctionsApiTable,The length of the statement  "                foreach (var r in browser.FindElements(".form-grid tr").Skip(1).Where(r => r.ElementAt("td"' 0).GetText() == "UI Test")) " is 120.
Long Statement,DotVVM.Samples.Tests.Feature,BindingsWithGlobalizeTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\BindingsWithGlobalizeTests.cs,Feature_BindingsWithGlobalizeTests_ZeroValue,The length of the statement  "            // When dotvvm_globalize was edited there was a bug that caused that zero was not rendered. The zero value was resolved as a false value and formatting of the value was stopped. " is 177.
Long Statement,DotVVM.Samples.Tests.Feature,LocalizationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\LocalizationTests.cs,Feature_Localization_Localization_FormatString,The length of the statement  "                AssertUI.InnerText(cultureElement' s => !string.IsNullOrWhiteSpace(s)' "Text is empty and should not be! (Missing current culture code!)"); " is 139.
Long Statement,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_ControlControlCommandInvokeAction,The length of the statement  "                        var value = parent.First("[data-id='Column2']").GetText().Trim() + "|" + parent.First("[data-id=Row2]").GetText().Trim() + "|" + parent.First("[data-id='Row']").GetText().Trim() + "|" + parent.First("[data-id=Column]").GetText().Trim(); " is 236.
Long Statement,DotVVM.Samples.Tests.Feature,ParameterBindingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ParameterBindingTests.cs,ValidateDefaultRouteLinkState,The length of the statement  "            AssertUI.HyperLinkEquals(browser.First("#opt1_empty")' "FeatureSamples/ParameterBinding/OptionalParameterBinding" + suffix' UrlKind.Relative' UriComponents.PathAndQuery); " is 170.
Long Statement,DotVVM.Samples.Tests.Feature,ParameterBindingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ParameterBindingTests.cs,ValidateDefaultRouteLinkState,The length of the statement  "            AssertUI.HyperLinkEquals(browser.First("#opt1_param_empty")' "FeatureSamples/ParameterBinding/OptionalParameterBinding" + suffix' UrlKind.Relative' UriComponents.PathAndQuery); " is 176.
Long Statement,DotVVM.Samples.Tests.Feature,ParameterBindingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ParameterBindingTests.cs,ValidateDefaultRouteLinkState,The length of the statement  "            AssertUI.HyperLinkEquals(browser.First("#opt1_param_A2")' "FeatureSamples/ParameterBinding/OptionalParameterBinding" + suffix' UrlKind.Relative' UriComponents.PathAndQuery); " is 173.
Long Statement,DotVVM.Samples.Tests.Feature,ParameterBindingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ParameterBindingTests.cs,ValidateDefaultRouteLinkState,The length of the statement  "            AssertUI.HyperLinkEquals(browser.First("#opt1_param_ID2")' "FeatureSamples/ParameterBinding/OptionalParameterBinding/4"' UrlKind.Relative' UriComponents.PathAndQuery); " is 167.
Long Statement,DotVVM.Samples.Tests.Feature,ParameterBindingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ParameterBindingTests.cs,ValidateDefaultRouteLinkState,The length of the statement  "            AssertUI.HyperLinkEquals(browser.First("#opt1_param_ID2A2")' "FeatureSamples/ParameterBinding/OptionalParameterBinding/5"' UrlKind.Relative' UriComponents.PathAndQuery); " is 169.
Long Statement,DotVVM.Samples.Tests.Feature,ParameterBindingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ParameterBindingTests.cs,ValidateDefaultRouteLinkState,The length of the statement  "            AssertUI.HyperLinkEquals(browser.First("#opt2_empty")' "FeatureSamples/ParameterBinding/OptionalParameterBinding2" + suffixWithDefaultValue' UrlKind.Relative' UriComponents.PathAndQuery); " is 187.
Long Statement,DotVVM.Samples.Tests.Feature,ParameterBindingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ParameterBindingTests.cs,ValidateDefaultRouteLinkState,The length of the statement  "            AssertUI.HyperLinkEquals(browser.First("#opt2_param_A")' "FeatureSamples/ParameterBinding/OptionalParameterBinding2" + suffixWithDefaultValue' UrlKind.Relative' UriComponents.PathAndQuery); " is 189.
Long Statement,DotVVM.Samples.Tests.Feature,ParameterBindingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ParameterBindingTests.cs,ValidateDefaultRouteLinkState,The length of the statement  "            AssertUI.HyperLinkEquals(browser.First("#opt2_param_2")' "FeatureSamples/ParameterBinding/OptionalParameterBinding2/3"' UrlKind.Relative' UriComponents.PathAndQuery); " is 166.
Long Statement,DotVVM.Samples.Tests.Feature,ParameterBindingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ParameterBindingTests.cs,ValidateDefaultRouteLinkState,The length of the statement  "            AssertUI.HyperLinkEquals(browser.First("#opt2_param_ID2A2")' "FeatureSamples/ParameterBinding/OptionalParameterBinding2/4"' UrlKind.Relative' UriComponents.PathAndQuery); " is 170.
Long Statement,DotVVM.Samples.Tests.Feature,ServerSideStylesTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ServerSideStylesTests.cs,Feature_ServerSideStyles_HtmlControlWithAttributes,The length of the statement  "                AssertUI.Attribute(browser.First("customTagName[id=htmlControlWithAttr]")' "append"' "Default attribute;Attribute appended"); " is 125.
Long Statement,DotVVM.Samples.Tests.Feature,ServerSideStylesTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ServerSideStylesTests.cs,Feature_ServerSideStyles_DataContexts,The length of the statement  "                AssertUI.Attribute(browser.First("customDataContextTag[id=matchingDataContextAndRoot]")' "dataContextCheck"' "matching"); " is 121.
Long Statement,DotVVM.Samples.Tests.Feature,ServerSideStylesTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ServerSideStylesTests.cs,Feature_ServerSideStyles_DataContexts,The length of the statement  "                AssertUI.Attribute(browser.First("customDataContextTag[id=matchingDataContextAndRoot]")' "rootDataContextCheck"' "matching"); " is 125.
Long Statement,DotVVM.Samples.Tests.Feature,ServerSideStylesTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ServerSideStylesTests.cs,Feature_ServerSideStyles_DataContexts,The length of the statement  "                AssertUI.HasNotAttribute(browser.First("customDataContextTag[id=nonMatchingDataContextAndRoot]")' "rootDataContextCheck"); " is 122.
Long Statement,DotVVM.Samples.Tests.Feature,StaticCommandTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\StaticCommandTests.cs,Feature_StaticCommand_ComboBoxSelectionChangedViewModel_Core,The length of the statement  "            // click the first button - the second value should be selected in the first select' the second select should not change " is 120.
Long Statement,DotVVM.Samples.Tests.Feature,StaticCommandTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\StaticCommandTests.cs,Feature_StaticCommand_ComboBoxSelectionChangedViewModel_Core,The length of the statement  "            // click the second button - the third value should be selected in the second select' the first select should not change " is 120.
Long Statement,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_ClientSideObservableUpdate,The length of the statement  "                    AssertUI.TextEquals(browser.Single("*[data-id=validator1]")' "The Text field is required. The Text field is not a valid e-mail address."); " is 138.
Long Statement,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_ClientSideObservableUpdate,The length of the statement  "                    AssertUI.TextEquals(browser.Single("*[data-id=validator2]")' "The Text field is required. The Text field is not a valid e-mail address."); " is 138.
Long Statement,DotVVM.Samples.Tests.Feature,ViewModelNestingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelNestingTests.cs,CheckTableRow,The length of the statement  "            // server binding renders True with capital T' knockout binding renders true with lower case t -> comparison is case insensitive " is 128.
Long Statement,DotVVM.Samples.Tests.Feature,ViewModelProtectionTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelProtectionTests.cs,Feature_ViewModelProtection_NestedSignatures,The length of the statement  "                browser.GetJavaScriptExecutor().ExecuteScript("dotvvm.viewModels.root.viewModel.$encryptedValues(dotvvm.viewModels.root.viewModel.$encryptedValues()[1] + dotvvm.viewModels.root.viewModel.$encryptedValues()[0] + dotvvm.viewModels.root.viewModel.$encryptedValues().substring(2));"); " is 280.
Empty Catch Block,DotVVM.Samples.Tests.Control,EnabledPropertyTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\EnabledPropertyTests.cs,Control_EnabledProperty_EnabledProperty,The method has an empty catch block.
Empty Catch Block,DotVVM.Samples.Tests.Control,FileUploadInRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadInRepeaterTests.cs,Complex_FileUploadInRepeater_FileUploadInRepeater,The method has an empty catch block.
Magic Number,DotVVM.Samples.Tests.Complex,AuthTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\AuthTests.cs,Complex_Auth_Login,The following statement contains a magic number: RunInAllBrowsers(browser => {                  // try to visit the secured page and verify we are redirected                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_Auth_SecuredPage);                  AssertUI.Url(browser' u => u.Contains(SamplesRouteUrls.ComplexSamples_Auth_Login));                    // use the login page                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_Auth_Login);                    browser.SendKeys("input[type=text]"' "user");                  browser.First("input[type=button]").Click().Wait(500);                  browser.Refresh();                  browser.Wait(2000);                  browser.Last("a").Click();                  browser.Wait(2000);                    browser.SendKeys("input[type=text]"' "message");                  browser.First("input[type=button]").Click().Wait(500);                    AssertUI.InnerText(browser.ElementAt("h1"' 1)'                          s =>                              s.Contains("DotVVM Debugger: Error 403: Forbidden")'                              "User is not in admin role"                          );                    browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_Auth_Login);                    browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "ADMIN");                  browser.First("input[type=checkbox]").Click();                  browser.First("input[type=button]").Click().Wait(500);                  browser.Last("a").Click();                    browser.SendKeys("input[type=text]"' "message");                  browser.First("input[type=button]").Click().Wait(500);                    AssertUI.InnerText(browser.First("span")' s => s.Contains("ADMIN: message")' "User can't send message");              });
Magic Number,DotVVM.Samples.Tests.Complex,AuthTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\AuthTests.cs,Complex_Auth_Login,The following statement contains a magic number: RunInAllBrowsers(browser => {                  // try to visit the secured page and verify we are redirected                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_Auth_SecuredPage);                  AssertUI.Url(browser' u => u.Contains(SamplesRouteUrls.ComplexSamples_Auth_Login));                    // use the login page                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_Auth_Login);                    browser.SendKeys("input[type=text]"' "user");                  browser.First("input[type=button]").Click().Wait(500);                  browser.Refresh();                  browser.Wait(2000);                  browser.Last("a").Click();                  browser.Wait(2000);                    browser.SendKeys("input[type=text]"' "message");                  browser.First("input[type=button]").Click().Wait(500);                    AssertUI.InnerText(browser.ElementAt("h1"' 1)'                          s =>                              s.Contains("DotVVM Debugger: Error 403: Forbidden")'                              "User is not in admin role"                          );                    browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_Auth_Login);                    browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "ADMIN");                  browser.First("input[type=checkbox]").Click();                  browser.First("input[type=button]").Click().Wait(500);                  browser.Last("a").Click();                    browser.SendKeys("input[type=text]"' "message");                  browser.First("input[type=button]").Click().Wait(500);                    AssertUI.InnerText(browser.First("span")' s => s.Contains("ADMIN: message")' "User can't send message");              });
Magic Number,DotVVM.Samples.Tests.Complex,AuthTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\AuthTests.cs,Complex_Auth_Login,The following statement contains a magic number: RunInAllBrowsers(browser => {                  // try to visit the secured page and verify we are redirected                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_Auth_SecuredPage);                  AssertUI.Url(browser' u => u.Contains(SamplesRouteUrls.ComplexSamples_Auth_Login));                    // use the login page                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_Auth_Login);                    browser.SendKeys("input[type=text]"' "user");                  browser.First("input[type=button]").Click().Wait(500);                  browser.Refresh();                  browser.Wait(2000);                  browser.Last("a").Click();                  browser.Wait(2000);                    browser.SendKeys("input[type=text]"' "message");                  browser.First("input[type=button]").Click().Wait(500);                    AssertUI.InnerText(browser.ElementAt("h1"' 1)'                          s =>                              s.Contains("DotVVM Debugger: Error 403: Forbidden")'                              "User is not in admin role"                          );                    browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_Auth_Login);                    browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "ADMIN");                  browser.First("input[type=checkbox]").Click();                  browser.First("input[type=button]").Click().Wait(500);                  browser.Last("a").Click();                    browser.SendKeys("input[type=text]"' "message");                  browser.First("input[type=button]").Click().Wait(500);                    AssertUI.InnerText(browser.First("span")' s => s.Contains("ADMIN: message")' "User can't send message");              });
Magic Number,DotVVM.Samples.Tests.Complex,AuthTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\AuthTests.cs,Complex_Auth_Login,The following statement contains a magic number: RunInAllBrowsers(browser => {                  // try to visit the secured page and verify we are redirected                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_Auth_SecuredPage);                  AssertUI.Url(browser' u => u.Contains(SamplesRouteUrls.ComplexSamples_Auth_Login));                    // use the login page                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_Auth_Login);                    browser.SendKeys("input[type=text]"' "user");                  browser.First("input[type=button]").Click().Wait(500);                  browser.Refresh();                  browser.Wait(2000);                  browser.Last("a").Click();                  browser.Wait(2000);                    browser.SendKeys("input[type=text]"' "message");                  browser.First("input[type=button]").Click().Wait(500);                    AssertUI.InnerText(browser.ElementAt("h1"' 1)'                          s =>                              s.Contains("DotVVM Debugger: Error 403: Forbidden")'                              "User is not in admin role"                          );                    browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_Auth_Login);                    browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "ADMIN");                  browser.First("input[type=checkbox]").Click();                  browser.First("input[type=button]").Click().Wait(500);                  browser.Last("a").Click();                    browser.SendKeys("input[type=text]"' "message");                  browser.First("input[type=button]").Click().Wait(500);                    AssertUI.InnerText(browser.First("span")' s => s.Contains("ADMIN: message")' "User can't send message");              });
Magic Number,DotVVM.Samples.Tests.Complex,AuthTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\AuthTests.cs,Complex_Auth_Login,The following statement contains a magic number: RunInAllBrowsers(browser => {                  // try to visit the secured page and verify we are redirected                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_Auth_SecuredPage);                  AssertUI.Url(browser' u => u.Contains(SamplesRouteUrls.ComplexSamples_Auth_Login));                    // use the login page                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_Auth_Login);                    browser.SendKeys("input[type=text]"' "user");                  browser.First("input[type=button]").Click().Wait(500);                  browser.Refresh();                  browser.Wait(2000);                  browser.Last("a").Click();                  browser.Wait(2000);                    browser.SendKeys("input[type=text]"' "message");                  browser.First("input[type=button]").Click().Wait(500);                    AssertUI.InnerText(browser.ElementAt("h1"' 1)'                          s =>                              s.Contains("DotVVM Debugger: Error 403: Forbidden")'                              "User is not in admin role"                          );                    browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_Auth_Login);                    browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "ADMIN");                  browser.First("input[type=checkbox]").Click();                  browser.First("input[type=button]").Click().Wait(500);                  browser.Last("a").Click();                    browser.SendKeys("input[type=text]"' "message");                  browser.First("input[type=button]").Click().Wait(500);                    AssertUI.InnerText(browser.First("span")' s => s.Contains("ADMIN: message")' "User can't send message");              });
Magic Number,DotVVM.Samples.Tests.Complex,AuthTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\AuthTests.cs,Complex_Auth_Login,The following statement contains a magic number: RunInAllBrowsers(browser => {                  // try to visit the secured page and verify we are redirected                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_Auth_SecuredPage);                  AssertUI.Url(browser' u => u.Contains(SamplesRouteUrls.ComplexSamples_Auth_Login));                    // use the login page                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_Auth_Login);                    browser.SendKeys("input[type=text]"' "user");                  browser.First("input[type=button]").Click().Wait(500);                  browser.Refresh();                  browser.Wait(2000);                  browser.Last("a").Click();                  browser.Wait(2000);                    browser.SendKeys("input[type=text]"' "message");                  browser.First("input[type=button]").Click().Wait(500);                    AssertUI.InnerText(browser.ElementAt("h1"' 1)'                          s =>                              s.Contains("DotVVM Debugger: Error 403: Forbidden")'                              "User is not in admin role"                          );                    browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_Auth_Login);                    browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "ADMIN");                  browser.First("input[type=checkbox]").Click();                  browser.First("input[type=button]").Click().Wait(500);                  browser.Last("a").Click();                    browser.SendKeys("input[type=text]"' "message");                  browser.First("input[type=button]").Click().Wait(500);                    AssertUI.InnerText(browser.First("span")' s => s.Contains("ADMIN: message")' "User can't send message");              });
Magic Number,DotVVM.Samples.Tests.Complex,ButtonInMarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ButtonInMarkupControlTests.cs,Complex_ButtonInMarkupControl_Enabled,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ButtonInMarkupControl_Enabled);                  browser.WaitUntilDotvvmInited();                    var enabled = browser.Single("enabled"' SelectByDataUi);                  AssertUI.TextEquals(enabled' "false");                  browser.Single("btn-off"' SelectByDataUi).Click();                  browser.WaitFor(() => AssertUI.TextEquals(enabled' "true")' 1000);                  browser.Single("btn-on"' SelectByDataUi).Click();                  browser.WaitFor(() => AssertUI.TextEquals(enabled' "false")' 1000);              });
Magic Number,DotVVM.Samples.Tests.Complex,ButtonInMarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ButtonInMarkupControlTests.cs,Complex_ButtonInMarkupControl_Enabled,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ButtonInMarkupControl_Enabled);                  browser.WaitUntilDotvvmInited();                    var enabled = browser.Single("enabled"' SelectByDataUi);                  AssertUI.TextEquals(enabled' "false");                  browser.Single("btn-off"' SelectByDataUi).Click();                  browser.WaitFor(() => AssertUI.TextEquals(enabled' "true")' 1000);                  browser.Single("btn-on"' SelectByDataUi).Click();                  browser.WaitFor(() => AssertUI.TextEquals(enabled' "false")' 1000);              });
Magic Number,DotVVM.Samples.Tests.Complex,CascadeSelectorsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\CascadeSelectorsTests.cs,Complex_CascadeSelectors_TripleComboBoxes,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_CascadeSelectors_TripleComboBoxes);                  browser.ElementAt("input[type=button]"' 0).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "North America: 1");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "USA: 11");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "New York: 111");                    browser.ElementAt("input[type=button]"' 2).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "North America: 1");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "Canada: 12");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Toronto: 121");                    browser.ElementAt("input[type=button]"' 5).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "Europe: 2");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "Germany: 21");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Munich: 212");                    browser.ElementAt("input[type=button]"' 8).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "Asia: 3");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "China: 31");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Beijing: 311");              });
Magic Number,DotVVM.Samples.Tests.Complex,CascadeSelectorsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\CascadeSelectorsTests.cs,Complex_CascadeSelectors_TripleComboBoxes,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_CascadeSelectors_TripleComboBoxes);                  browser.ElementAt("input[type=button]"' 0).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "North America: 1");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "USA: 11");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "New York: 111");                    browser.ElementAt("input[type=button]"' 2).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "North America: 1");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "Canada: 12");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Toronto: 121");                    browser.ElementAt("input[type=button]"' 5).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "Europe: 2");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "Germany: 21");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Munich: 212");                    browser.ElementAt("input[type=button]"' 8).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "Asia: 3");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "China: 31");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Beijing: 311");              });
Magic Number,DotVVM.Samples.Tests.Complex,CascadeSelectorsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\CascadeSelectorsTests.cs,Complex_CascadeSelectors_TripleComboBoxes,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_CascadeSelectors_TripleComboBoxes);                  browser.ElementAt("input[type=button]"' 0).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "North America: 1");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "USA: 11");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "New York: 111");                    browser.ElementAt("input[type=button]"' 2).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "North America: 1");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "Canada: 12");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Toronto: 121");                    browser.ElementAt("input[type=button]"' 5).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "Europe: 2");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "Germany: 21");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Munich: 212");                    browser.ElementAt("input[type=button]"' 8).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "Asia: 3");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "China: 31");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Beijing: 311");              });
Magic Number,DotVVM.Samples.Tests.Complex,CascadeSelectorsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\CascadeSelectorsTests.cs,Complex_CascadeSelectors_TripleComboBoxes,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_CascadeSelectors_TripleComboBoxes);                  browser.ElementAt("input[type=button]"' 0).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "North America: 1");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "USA: 11");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "New York: 111");                    browser.ElementAt("input[type=button]"' 2).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "North America: 1");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "Canada: 12");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Toronto: 121");                    browser.ElementAt("input[type=button]"' 5).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "Europe: 2");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "Germany: 21");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Munich: 212");                    browser.ElementAt("input[type=button]"' 8).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "Asia: 3");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "China: 31");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Beijing: 311");              });
Magic Number,DotVVM.Samples.Tests.Complex,CascadeSelectorsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\CascadeSelectorsTests.cs,Complex_CascadeSelectors_TripleComboBoxes,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_CascadeSelectors_TripleComboBoxes);                  browser.ElementAt("input[type=button]"' 0).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "North America: 1");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "USA: 11");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "New York: 111");                    browser.ElementAt("input[type=button]"' 2).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "North America: 1");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "Canada: 12");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Toronto: 121");                    browser.ElementAt("input[type=button]"' 5).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "Europe: 2");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "Germany: 21");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Munich: 212");                    browser.ElementAt("input[type=button]"' 8).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "Asia: 3");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "China: 31");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Beijing: 311");              });
Magic Number,DotVVM.Samples.Tests.Complex,CascadeSelectorsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\CascadeSelectorsTests.cs,Complex_CascadeSelectors_TripleComboBoxes,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_CascadeSelectors_TripleComboBoxes);                  browser.ElementAt("input[type=button]"' 0).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "North America: 1");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "USA: 11");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "New York: 111");                    browser.ElementAt("input[type=button]"' 2).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "North America: 1");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "Canada: 12");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Toronto: 121");                    browser.ElementAt("input[type=button]"' 5).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "Europe: 2");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "Germany: 21");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Munich: 212");                    browser.ElementAt("input[type=button]"' 8).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "Asia: 3");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "China: 31");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Beijing: 311");              });
Magic Number,DotVVM.Samples.Tests.Complex,CascadeSelectorsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\CascadeSelectorsTests.cs,Complex_CascadeSelectors_TripleComboBoxes,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_CascadeSelectors_TripleComboBoxes);                  browser.ElementAt("input[type=button]"' 0).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "North America: 1");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "USA: 11");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "New York: 111");                    browser.ElementAt("input[type=button]"' 2).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "North America: 1");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "Canada: 12");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Toronto: 121");                    browser.ElementAt("input[type=button]"' 5).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "Europe: 2");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "Germany: 21");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Munich: 212");                    browser.ElementAt("input[type=button]"' 8).Click().Wait();                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 0)' "Asia: 3");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 1)' "China: 31");                  AssertUI.InnerTextEquals(browser.ElementAt(".active"' 2)' "Beijing: 311");              });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ChangedEventTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ChangedEventTests.cs,Complex_ChangedEvent_ChangedEvent,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ChangedEvent_ChangedEvent);                    var totalChanges = browser.First("*[data-id='total-changes']");                  AssertUI.InnerTextEquals(totalChanges' "0");                    // first textbox with update mode on key press                  var textBox1 = browser.First("input[type=text]");                  textBox1.SetFocus();                    new Actions(browser.Driver).SendKeys("test").Perform();                  AssertUI.InnerTextEquals(totalChanges' "0");                    var firstTextbox = browser.First("*[data-id='first-textbox']");                  browser.WaitFor(() =>                  {                      AssertUI.InnerText(firstTextbox' s=> s.Contains("Valuetes"));                  }' 1000' 100);                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(firstTextbox' "Valuetest");                  }' 1000' 100);                  AssertUI.InnerTextEquals(totalChanges' "1");                    // second textbox                  var textBox2 = browser.ElementAt("input[type=text]"' 1);                  browser.FireJsBlur();                  textBox2.SetFocus();                  new Actions(browser.Driver).SendKeys("test").Perform();                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "1");                  }' 1000' 100);                  var secondTextbox = browser.First("*[data-id='second-textbox']");                  AssertUI.InnerTextEquals(secondTextbox' "Value");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(secondTextbox' "Valuetest");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "2");                    // third textbox                  var textBox3 = browser.ElementAt("input[type=text]"' 2);                  browser.FireJsBlur();                  textBox3.SetFocus();                  new Actions(browser.Driver).SendKeys("a").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("b").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys("c").Perform();                  browser.Wait(100);                  new Actions(browser.Driver).SendKeys(Keys.Backspace).Perform();                  browser.Wait(100);                    browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "6");                  }' 1000' 100);                  var thirdTextBox = browser.First("*[data-id='third-textbox']");                  AssertUI.InnerTextEquals(thirdTextBox' "ab");                    new Actions(browser.Driver).SendKeys(Keys.Enter).SendKeys(Keys.Tab).Perform();                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(thirdTextBox' "ab");                  }' 1000' 100);                    AssertUI.InnerTextEquals(totalChanges' "6");                    // click on checkbox                  browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "7");                  }' 1000' 100);                    browser.Click("input[type=checkbox]");                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "8");                  }' 1000' 100);                    // click on radio button                  browser.ElementAt("input[type=radio]"' 0).Click();                  AssertUI.InnerTextEquals(totalChanges' "9");                    browser.ElementAt("input[type=radio]"' 1).Click();                  AssertUI.InnerTextEquals(totalChanges' "10");                    browser.ElementAt("input[type=radio]"' 2).Click();                  AssertUI.InnerTextEquals(totalChanges' "11");                    browser.ElementAt("input[type=radio]"' 3).Click();                  AssertUI.InnerTextEquals(totalChanges' "12");                    browser.ElementAt("input[type=radio]"' 4).Click();                  AssertUI.InnerTextEquals(totalChanges' "13");                    // combo box                  browser.First("select").Select(1);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "14");                  }' 1000' 100);                  browser.First("select").Select(2);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "15");                  }' 1000' 100);                    browser.First("select").Select(0);                  browser.WaitFor(() =>                  {                      AssertUI.InnerTextEquals(totalChanges' "16");                  }' 1000' 100);                });
Magic Number,DotVVM.Samples.Tests.Complex,ClassBindingsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ClassBindingsTests.cs,Complex_ClassBindings_AttributeAndPropertyGroup,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ClassBindings_ClassBindings);                  browser.WaitUntilDotvvmInited();                    var target = browser.Single("target"' SelectByDataUi);                  var textBox = browser.Single("classes"' SelectByDataUi);                  textBox.SendKeys("orange");                  textBox.SendEnterKey();                  browser.WaitFor(() => AssertUI.HasClass(target' "orange")' 1000);                    browser.Single("inverted"' SelectByDataUi).Click();                  browser.Single("border"' SelectByDataUi).Click();                  browser.WaitFor(() => {                      AssertUI.HasClass(target' "orange");                      AssertUI.HasClass(target' "inverted");                      AssertUI.HasClass(target' "border");                  }' 1000);              });
Magic Number,DotVVM.Samples.Tests.Complex,ClassBindingsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ClassBindingsTests.cs,Complex_ClassBindings_AttributeAndPropertyGroup,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ClassBindings_ClassBindings);                  browser.WaitUntilDotvvmInited();                    var target = browser.Single("target"' SelectByDataUi);                  var textBox = browser.Single("classes"' SelectByDataUi);                  textBox.SendKeys("orange");                  textBox.SendEnterKey();                  browser.WaitFor(() => AssertUI.HasClass(target' "orange")' 1000);                    browser.Single("inverted"' SelectByDataUi).Click();                  browser.Single("border"' SelectByDataUi).Click();                  browser.WaitFor(() => {                      AssertUI.HasClass(target' "orange");                      AssertUI.HasClass(target' "inverted");                      AssertUI.HasClass(target' "border");                  }' 1000);              });
Magic Number,DotVVM.Samples.Tests.Complex,GridViewDataSetTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\GridViewDataSetTests.cs,Complex_GridViewDataSet_GridViewDataSet,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_GridViewDataSet_GridViewDataSet);                  browser.First(".GridView");                    var buttonsInGridView = browser.FindElements(SelectByDataUiId("button-with-html-content"));                    foreach (var button in buttonsInGridView)                  {                      AssertUI.ContainsElement(button' "h4");                      AssertUI.InnerTextEquals(button' "Choose");                  }                    Assert.Equal(3' buttonsInGridView.Count);              });
Magic Number,DotVVM.Samples.Tests.Complex,GridViewDataSetTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\GridViewDataSetTests.cs,Complex_GridViewDataSet_ControlWithITemplateInColumn,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_GridViewDataSet_GridViewDataSet);                  browser.First(".GridView");                    var templateContents = browser.FindElements(SelectByDataUiId("template-content"));                    foreach (var content in templateContents)                  {                      AssertUI.InnerTextEquals(content' "Not Authenticated");                  }                  Assert.Equal(3' templateContents.Count);              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,InvoiceCalculatorTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\InvoiceCalculatorTests.cs,Complex_InvoiceCalculator_InvoiceCalculator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_InvoiceCalculator_InvoiceCalculator);                    var table = browser.First(".table");                  var addButton = browser.ElementAt("a"' 1);                  var recalculateButton = browser.ElementAt("a"' 2);                    // add lines                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                  addButton.Click();                  browser.Wait();                    // fill second line                  var cells = table.ElementAt("tr"' 2).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("111");                  cells.ElementAt(1).First("select").Select(1).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Bread");                  cells.ElementAt(3).First("input").Clear().SendKeys("12");                  cells.ElementAt(4).First("input").Clear().SendKeys("10");                    // fill third line                  cells = table.ElementAt("tr"' 3).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("222");                  cells.ElementAt(1).First("select").Select(2).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Ham");                  cells.ElementAt(3).First("input").Clear().SendKeys("1");                  cells.ElementAt(4).First("input").Clear().SendKeys("5");                    // fill fourth line                  cells = table.ElementAt("tr"' 4).FindElements("td");                  cells.ElementAt(0).First("input").Clear().SendKeys("333");                  cells.ElementAt(1).First("select").Select(3).Wait();                  cells.ElementAt(2).First("input").Clear().SendKeys("Cheese");                  cells.ElementAt(3).First("input").Clear().SendKeys("10");                  cells.ElementAt(4).First("input").Clear().SendKeys("15");                    // verify line totals                  browser.First("input[type=text]").Click();                    AssertUI.InnerTextEquals(table.ElementAt("tr"' 2).ElementAt("td"' 5)' "126");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 3).ElementAt("td"' 5)' "5.5");                  AssertUI.InnerTextEquals(table.ElementAt("tr"' 4).ElementAt("td"' 5)' "180");                    // recalculate                  recalculateButton.Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "407.5");                    // remove second line                  table.ElementAt("tr"' 2).Last("td").First("a").Click().Wait();                    // verify total price                  AssertUI.InnerTextEquals(table.Last("tr").ElementAt("th"' 1)' "281.5");              });
Magic Number,DotVVM.Samples.Tests.Complex,NestedComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\NestedComboBoxTests.cs,Complex_NestedComboBox_HeavilyNested,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_NestedComboBox_HeavilyNested);                  browser.WaitUntilDotvvmInited();                    var selectedValue = browser.Single("selected-value"' SelectByDataUi);                  AssertUI.TextEquals(selectedValue' "");                    var combobox = browser.Single("combobox"' SelectByDataUi);                  combobox.Select(1);                  browser.WaitFor(() => AssertUI.TextEquals(selectedValue' "2")' 1000);                    combobox.Select(0);                  browser.WaitFor(() => AssertUI.TextEquals(selectedValue' "")' 1000);              });
Magic Number,DotVVM.Samples.Tests.Complex,NestedComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\NestedComboBoxTests.cs,Complex_NestedComboBox_HeavilyNested,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_NestedComboBox_HeavilyNested);                  browser.WaitUntilDotvvmInited();                    var selectedValue = browser.Single("selected-value"' SelectByDataUi);                  AssertUI.TextEquals(selectedValue' "");                    var combobox = browser.Single("combobox"' SelectByDataUi);                  combobox.Select(1);                  browser.WaitFor(() => AssertUI.TextEquals(selectedValue' "2")' 1000);                    combobox.Select(0);                  browser.WaitFor(() => AssertUI.TextEquals(selectedValue' "")' 1000);              });
Magic Number,DotVVM.Samples.Tests.Complex,RedirectAndUrlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\RedirectAndUrlTests.cs,Complex_RedirectAndUrl_PostbackInteruption,The following statement contains a magic number: RunInAllBrowsers(browser => {                  //Postback with no redirect sets message                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_RedirectAndUrl_ScrollingPage);                  browser.First("a[data-ui=test-link]").Click();                  browser.Wait(200);                  AssertUI.InnerTextEquals(browser.First("span[data-ui='message1']")' "TestMessage");                    //used RedirectToUrl to redirect to page with Id' however the redirect made page reload and discarted the viewmodel                  //therefore  message1 should be blank                  //view should scroll to #paragraph2                  browser.First("a[data-ui='go-to-2-url-link']").Click();                  browser.Wait(1200);                  // message 2 should be scrolled to message 1 should not' both should be blank                  var message2element = browser.First("span[data-ui='message2']");                  message2element.IsDisplayed();                  message2element.CheckIfIsElementInView();           // TODO: Doesn't work in IE                    var message1element = browser.First("span[data-ui='message1']");                  message1element.IsDisplayed();                  message1element.CheckIfIsElementNotInView();                    AssertUI.InnerTextEquals(message1element' "TestMessage");                  AssertUI.InnerTextEquals(message2element' "TestMessage");              });
Magic Number,DotVVM.Samples.Tests.Complex,RedirectAndUrlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\RedirectAndUrlTests.cs,Complex_RedirectAndUrl_PostbackInteruption,The following statement contains a magic number: RunInAllBrowsers(browser => {                  //Postback with no redirect sets message                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_RedirectAndUrl_ScrollingPage);                  browser.First("a[data-ui=test-link]").Click();                  browser.Wait(200);                  AssertUI.InnerTextEquals(browser.First("span[data-ui='message1']")' "TestMessage");                    //used RedirectToUrl to redirect to page with Id' however the redirect made page reload and discarted the viewmodel                  //therefore  message1 should be blank                  //view should scroll to #paragraph2                  browser.First("a[data-ui='go-to-2-url-link']").Click();                  browser.Wait(1200);                  // message 2 should be scrolled to message 1 should not' both should be blank                  var message2element = browser.First("span[data-ui='message2']");                  message2element.IsDisplayed();                  message2element.CheckIfIsElementInView();           // TODO: Doesn't work in IE                    var message1element = browser.First("span[data-ui='message1']");                  message1element.IsDisplayed();                  message1element.CheckIfIsElementNotInView();                    AssertUI.InnerTextEquals(message1element' "TestMessage");                  AssertUI.InnerTextEquals(message2element' "TestMessage");              });
Magic Number,DotVVM.Samples.Tests.Complex,RedirectAndUrlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\RedirectAndUrlTests.cs,Complex_RedirectAndUrl_ScrollingPage,The following statement contains a magic number: RunInAllBrowsers(browser => {                  //Postback with no redirect sets message to 'TestMessage'                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_RedirectAndUrl_ScrollingPage);                  browser.First("a[data-ui=test-link]").Click();                  browser.Wait(200);                  AssertUI.InnerText(browser.First("span[data-ui='message1']")' s => s.Equals("TestMessage"));                    //Postback sould run and view should scroll' page should not reload therefore messeges remain.                  browser.First("a[data-ui='go-to-2-link']").Click();                  browser.Wait(200);                    var message2element = browser.First("span[data-ui='message2']");                  var message1element = browser.First("span[data-ui='message1']");                    //Message 2 should be scrolled to while message 1 snhould not' and both should have their texts set from the postback.                  message1element.IsDisplayed();                  message2element.IsDisplayed();                    message1element.CheckIfIsElementNotInView();                  message2element.CheckIfIsElementInView();                    AssertUI.InnerText(message1element' s => s.Equals("ToParagraph2"));                  AssertUI.InnerText(message2element' s => s.Equals("ToParagraph2"));                    //basicly the same just clicking on link to do postback and scroll back to paragraph1 after                  browser.First("a[data-ui='go-to-1-link']").Click();                  browser.Wait(200);                  // message 2 should be scrolled to message 1 should not' both should be blank                    message2element.IsDisplayed();                  message1element.IsDisplayed();                    message1element.CheckIfIsElementInView();                  message2element.CheckIfIsElementNotInView();                    AssertUI.InnerText(message1element' s => s.Equals("ToParagraph1"));                  AssertUI.InnerText(message2element' s => s.Equals("ToParagraph1"));                    //Now test that the scrolling works 2 times in row with same link                  var goTo1Link = browser.First("a[data-ui='go-to-1-link']");                  goTo1Link.ScrollTo();                  goTo1Link.CheckIfIsElementInView();                  message1element.CheckIfIsElementNotInView();                  message2element.CheckIfIsElementInView();                    goTo1Link.Click();                  message1element.CheckIfIsElementInView();                  message2element.CheckIfIsElementNotInView();              });
Magic Number,DotVVM.Samples.Tests.Complex,RedirectAndUrlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\RedirectAndUrlTests.cs,Complex_RedirectAndUrl_ScrollingPage,The following statement contains a magic number: RunInAllBrowsers(browser => {                  //Postback with no redirect sets message to 'TestMessage'                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_RedirectAndUrl_ScrollingPage);                  browser.First("a[data-ui=test-link]").Click();                  browser.Wait(200);                  AssertUI.InnerText(browser.First("span[data-ui='message1']")' s => s.Equals("TestMessage"));                    //Postback sould run and view should scroll' page should not reload therefore messeges remain.                  browser.First("a[data-ui='go-to-2-link']").Click();                  browser.Wait(200);                    var message2element = browser.First("span[data-ui='message2']");                  var message1element = browser.First("span[data-ui='message1']");                    //Message 2 should be scrolled to while message 1 snhould not' and both should have their texts set from the postback.                  message1element.IsDisplayed();                  message2element.IsDisplayed();                    message1element.CheckIfIsElementNotInView();                  message2element.CheckIfIsElementInView();                    AssertUI.InnerText(message1element' s => s.Equals("ToParagraph2"));                  AssertUI.InnerText(message2element' s => s.Equals("ToParagraph2"));                    //basicly the same just clicking on link to do postback and scroll back to paragraph1 after                  browser.First("a[data-ui='go-to-1-link']").Click();                  browser.Wait(200);                  // message 2 should be scrolled to message 1 should not' both should be blank                    message2element.IsDisplayed();                  message1element.IsDisplayed();                    message1element.CheckIfIsElementInView();                  message2element.CheckIfIsElementNotInView();                    AssertUI.InnerText(message1element' s => s.Equals("ToParagraph1"));                  AssertUI.InnerText(message2element' s => s.Equals("ToParagraph1"));                    //Now test that the scrolling works 2 times in row with same link                  var goTo1Link = browser.First("a[data-ui='go-to-1-link']");                  goTo1Link.ScrollTo();                  goTo1Link.CheckIfIsElementInView();                  message1element.CheckIfIsElementNotInView();                  message2element.CheckIfIsElementInView();                    goTo1Link.Click();                  message1element.CheckIfIsElementInView();                  message2element.CheckIfIsElementNotInView();              });
Magic Number,DotVVM.Samples.Tests.Complex,RedirectAndUrlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\RedirectAndUrlTests.cs,Complex_RedirectAndUrl_ScrollingPage,The following statement contains a magic number: RunInAllBrowsers(browser => {                  //Postback with no redirect sets message to 'TestMessage'                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_RedirectAndUrl_ScrollingPage);                  browser.First("a[data-ui=test-link]").Click();                  browser.Wait(200);                  AssertUI.InnerText(browser.First("span[data-ui='message1']")' s => s.Equals("TestMessage"));                    //Postback sould run and view should scroll' page should not reload therefore messeges remain.                  browser.First("a[data-ui='go-to-2-link']").Click();                  browser.Wait(200);                    var message2element = browser.First("span[data-ui='message2']");                  var message1element = browser.First("span[data-ui='message1']");                    //Message 2 should be scrolled to while message 1 snhould not' and both should have their texts set from the postback.                  message1element.IsDisplayed();                  message2element.IsDisplayed();                    message1element.CheckIfIsElementNotInView();                  message2element.CheckIfIsElementInView();                    AssertUI.InnerText(message1element' s => s.Equals("ToParagraph2"));                  AssertUI.InnerText(message2element' s => s.Equals("ToParagraph2"));                    //basicly the same just clicking on link to do postback and scroll back to paragraph1 after                  browser.First("a[data-ui='go-to-1-link']").Click();                  browser.Wait(200);                  // message 2 should be scrolled to message 1 should not' both should be blank                    message2element.IsDisplayed();                  message1element.IsDisplayed();                    message1element.CheckIfIsElementInView();                  message2element.CheckIfIsElementNotInView();                    AssertUI.InnerText(message1element' s => s.Equals("ToParagraph1"));                  AssertUI.InnerText(message2element' s => s.Equals("ToParagraph1"));                    //Now test that the scrolling works 2 times in row with same link                  var goTo1Link = browser.First("a[data-ui='go-to-1-link']");                  goTo1Link.ScrollTo();                  goTo1Link.CheckIfIsElementInView();                  message1element.CheckIfIsElementNotInView();                  message2element.CheckIfIsElementInView();                    goTo1Link.Click();                  message1element.CheckIfIsElementInView();                  message2element.CheckIfIsElementNotInView();              });
Magic Number,DotVVM.Samples.Tests.Complex,ServerRenderingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ServerRenderingTests.cs,Complex_ServerRendering_ControlUsageSample,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ServerRendering_ControlUsageSample);                  browser.First("a[data-ui=show-link]").Click();                  browser.Wait(500);                  AssertUI.Attribute(browser.First("input[data-ui=textbox]")' "value"' v => v.Contains("a"));              });
Magic Number,DotVVM.Samples.Tests.Complex,ServerRenderingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ServerRenderingTests.cs,Complex_ServerRendering_ControlUsageSampleRewriting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ServerRendering_ControlUsageSampleRewriting);                  browser.First("a[data-ui=show-link]").Click();                  browser.Wait(500);                  AssertUI.Attribute(browser.First("div[data-ui='context-1']").First("input[data-ui=textbox]")' "value"' v => v.Contains("a"));                  browser.First("a[data-ui=rewrite-link]").Click();                  browser.Wait(500);                  AssertUI.Attribute(browser.First("div[data-ui='context-2']").First("input[data-ui=textbox]")' "value"' v => v.Contains("b"));              });
Magic Number,DotVVM.Samples.Tests.Complex,ServerRenderingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ServerRenderingTests.cs,Complex_ServerRendering_ControlUsageSampleRewriting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ServerRendering_ControlUsageSampleRewriting);                  browser.First("a[data-ui=show-link]").Click();                  browser.Wait(500);                  AssertUI.Attribute(browser.First("div[data-ui='context-1']").First("input[data-ui=textbox]")' "value"' v => v.Contains("a"));                  browser.First("a[data-ui=rewrite-link]").Click();                  browser.Wait(500);                  AssertUI.Attribute(browser.First("div[data-ui='context-2']").First("input[data-ui=textbox]")' "value"' v => v.Contains("b"));              });
Magic Number,DotVVM.Samples.Tests.Complex,ServerRenderingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ServerRenderingTests.cs,Complex_ServerRendering_AddingIntoEmptyRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ServerRendering_AddingIntoEmptyRepeater);                    //Is the item on nonempty repeater displayed?                  var articles = browser.Single("div[data-ui='nonempty-repeater']").FindElements("article[data-ui='test-article']");                  CheckArticleCount(browser' "nonempty-repeater"' 1);                  AssertUI.InnerTextEquals(articles.SingleOrDefault().Single("span[data-ui='detail-text']")' "NonEmptyArticles 1");                    //Add element and see                  browser.First("a[data-ui='add-link']").Click();                  browser.Wait(500);                    //Has nonempty repeater been updated?                  var neArticlesPostAdd = browser.Single("div[data-ui='nonempty-repeater']").FindElements("article[data-ui='test-article']");                  CheckArticleCount(browser' "nonempty-repeater"' 2);                  AssertUI.InnerTextEquals(neArticlesPostAdd[1].Single("span[data-ui='detail-text']")' "NonEmptyArticles 2");                    //Has the empty one?                  var eArticlesPostAdd = browser.Single("div[data-ui='empty-repeater']").FindElements("article[data-ui='test-article']");                  CheckArticleCount(browser' "empty-repeater"' 1);                  AssertUI.InnerTextEquals(eArticlesPostAdd.SingleOrDefault().Single("span[data-ui='detail-text']")' "EmptyArticles 1");              });
Magic Number,DotVVM.Samples.Tests.Complex,ServerRenderingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ServerRenderingTests.cs,Complex_ServerRendering_AddingIntoEmptyRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ServerRendering_AddingIntoEmptyRepeater);                    //Is the item on nonempty repeater displayed?                  var articles = browser.Single("div[data-ui='nonempty-repeater']").FindElements("article[data-ui='test-article']");                  CheckArticleCount(browser' "nonempty-repeater"' 1);                  AssertUI.InnerTextEquals(articles.SingleOrDefault().Single("span[data-ui='detail-text']")' "NonEmptyArticles 1");                    //Add element and see                  browser.First("a[data-ui='add-link']").Click();                  browser.Wait(500);                    //Has nonempty repeater been updated?                  var neArticlesPostAdd = browser.Single("div[data-ui='nonempty-repeater']").FindElements("article[data-ui='test-article']");                  CheckArticleCount(browser' "nonempty-repeater"' 2);                  AssertUI.InnerTextEquals(neArticlesPostAdd[1].Single("span[data-ui='detail-text']")' "NonEmptyArticles 2");                    //Has the empty one?                  var eArticlesPostAdd = browser.Single("div[data-ui='empty-repeater']").FindElements("article[data-ui='test-article']");                  CheckArticleCount(browser' "empty-repeater"' 1);                  AssertUI.InnerTextEquals(eArticlesPostAdd.SingleOrDefault().Single("span[data-ui='detail-text']")' "EmptyArticles 1");              });
Magic Number,DotVVM.Samples.Tests.Complex,ServerRenderingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ServerRenderingTests.cs,Complex_ServerRendering_MarkupControlInRepeaterEditing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ServerRendering_MarkupControlInRepeaterEditing);                    // Does the repeater display the correct number of articles?                  var repeater = browser.Single("div[data-ui='repeater']");                  CheckArticleCount(browser' "repeater"' 4);                    // Get message from an article                  var articleDetail = repeater.ElementAt("div"' 0);                  var message = articleDetail.Single("span[data-ui='detail-text']").GetText();                    // Click 'Edit'                  articleDetail.Single("a").Click();                  browser.Wait(500);                    // Check if the textbox contains the same message                  repeater = browser.Single("div[data-ui='repeater']");                  var articleEditor = repeater.ElementAt("div"' 1);                  AssertUI.TextEquals(articleEditor.Single("input[data-ui='textbox']")' message);              });
Magic Number,DotVVM.Samples.Tests.Complex,ServerRenderingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\ServerRenderingTests.cs,Complex_ServerRendering_MarkupControlInRepeaterEditing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_ServerRendering_MarkupControlInRepeaterEditing);                    // Does the repeater display the correct number of articles?                  var repeater = browser.Single("div[data-ui='repeater']");                  CheckArticleCount(browser' "repeater"' 4);                    // Get message from an article                  var articleDetail = repeater.ElementAt("div"' 0);                  var message = articleDetail.Single("span[data-ui='detail-text']").GetText();                    // Click 'Edit'                  articleDetail.Single("a").Click();                  browser.Wait(500);                    // Check if the textbox contains the same message                  repeater = browser.Single("div[data-ui='repeater']");                  var articleEditor = repeater.ElementAt("div"' 1);                  AssertUI.TextEquals(articleEditor.Single("input[data-ui='textbox']")' message);              });
Magic Number,DotVVM.Samples.Tests.Complex,SPAErrorReportingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPAErrorReportingTests.cs,Complex_SPAErrorReporting_NavigationAndPostbacks,The following statement contains a magic number: RunInAllBrowsers(browser => {                    void SetOfflineMode(bool offline)                  {                      ((ChromeDriver)browser.Driver).NetworkConditions = new ChromeNetworkConditions() {                          IsOffline = offline'                          Latency = TimeSpan.FromMilliseconds(5)'                          DownloadThroughput = 500 * 1024'                          UploadThroughput = 500 * 1024                      };                  }                    try                  {                      browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPAErrorReporting_default);                        // go to Test page and verify the success                      browser.ElementAt("a"' 1).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Test");                        SetOfflineMode(true);                        // try to submit command in offline mode (we don't have CSRF token in Lazy CSRF mode yet' so we should fail in fetchCsrfToken)                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 0).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "1");                        // try to submit static command in offline mode                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 1).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "2");                        // try to go back in offline mode                      browser.ElementAt("a"' 0).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Test");                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                        SetOfflineMode(false);                        // go back to online mode and retry (we should now obtain the CSRF token in lazy CSRF mode)                      browser.ElementAt("input[type=button]"' 0).Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                      AssertUI.TextEquals(browser.Single("*[data-ui=sample-text]")' "Sample Text");                        browser.ElementAt("input[type=button]"' 1).Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                      AssertUI.TextEquals(browser.Single("*[data-ui=sample-text]")' "Sample Static Text");                        browser.ElementAt("a"' 0).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Default");                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                        browser.ElementAt("a"' 1).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Test");                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                        SetOfflineMode(true);                        // try to submit command in offline mode again (now we have valid CSRF token so we should fail on the postback itself)                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 0).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "4");                        // try to submit static command in offline mode                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 1).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "5");                  }                  finally                  {                      SetOfflineMode(false);                  }              });
Magic Number,DotVVM.Samples.Tests.Complex,SPAErrorReportingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPAErrorReportingTests.cs,Complex_SPAErrorReporting_NavigationAndPostbacks,The following statement contains a magic number: RunInAllBrowsers(browser => {                    void SetOfflineMode(bool offline)                  {                      ((ChromeDriver)browser.Driver).NetworkConditions = new ChromeNetworkConditions() {                          IsOffline = offline'                          Latency = TimeSpan.FromMilliseconds(5)'                          DownloadThroughput = 500 * 1024'                          UploadThroughput = 500 * 1024                      };                  }                    try                  {                      browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPAErrorReporting_default);                        // go to Test page and verify the success                      browser.ElementAt("a"' 1).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Test");                        SetOfflineMode(true);                        // try to submit command in offline mode (we don't have CSRF token in Lazy CSRF mode yet' so we should fail in fetchCsrfToken)                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 0).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "1");                        // try to submit static command in offline mode                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 1).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "2");                        // try to go back in offline mode                      browser.ElementAt("a"' 0).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Test");                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                        SetOfflineMode(false);                        // go back to online mode and retry (we should now obtain the CSRF token in lazy CSRF mode)                      browser.ElementAt("input[type=button]"' 0).Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                      AssertUI.TextEquals(browser.Single("*[data-ui=sample-text]")' "Sample Text");                        browser.ElementAt("input[type=button]"' 1).Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                      AssertUI.TextEquals(browser.Single("*[data-ui=sample-text]")' "Sample Static Text");                        browser.ElementAt("a"' 0).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Default");                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                        browser.ElementAt("a"' 1).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Test");                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                        SetOfflineMode(true);                        // try to submit command in offline mode again (now we have valid CSRF token so we should fail on the postback itself)                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 0).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "4");                        // try to submit static command in offline mode                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 1).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "5");                  }                  finally                  {                      SetOfflineMode(false);                  }              });
Magic Number,DotVVM.Samples.Tests.Complex,SPAErrorReportingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPAErrorReportingTests.cs,Complex_SPAErrorReporting_NavigationAndPostbacks,The following statement contains a magic number: RunInAllBrowsers(browser => {                    void SetOfflineMode(bool offline)                  {                      ((ChromeDriver)browser.Driver).NetworkConditions = new ChromeNetworkConditions() {                          IsOffline = offline'                          Latency = TimeSpan.FromMilliseconds(5)'                          DownloadThroughput = 500 * 1024'                          UploadThroughput = 500 * 1024                      };                  }                    try                  {                      browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPAErrorReporting_default);                        // go to Test page and verify the success                      browser.ElementAt("a"' 1).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Test");                        SetOfflineMode(true);                        // try to submit command in offline mode (we don't have CSRF token in Lazy CSRF mode yet' so we should fail in fetchCsrfToken)                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 0).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "1");                        // try to submit static command in offline mode                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 1).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "2");                        // try to go back in offline mode                      browser.ElementAt("a"' 0).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Test");                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                        SetOfflineMode(false);                        // go back to online mode and retry (we should now obtain the CSRF token in lazy CSRF mode)                      browser.ElementAt("input[type=button]"' 0).Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                      AssertUI.TextEquals(browser.Single("*[data-ui=sample-text]")' "Sample Text");                        browser.ElementAt("input[type=button]"' 1).Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                      AssertUI.TextEquals(browser.Single("*[data-ui=sample-text]")' "Sample Static Text");                        browser.ElementAt("a"' 0).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Default");                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                        browser.ElementAt("a"' 1).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Test");                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                        SetOfflineMode(true);                        // try to submit command in offline mode again (now we have valid CSRF token so we should fail on the postback itself)                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 0).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "4");                        // try to submit static command in offline mode                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 1).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "5");                  }                  finally                  {                      SetOfflineMode(false);                  }              });
Magic Number,DotVVM.Samples.Tests.Complex,SPAErrorReportingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPAErrorReportingTests.cs,Complex_SPAErrorReporting_NavigationAndPostbacks,The following statement contains a magic number: RunInAllBrowsers(browser => {                    void SetOfflineMode(bool offline)                  {                      ((ChromeDriver)browser.Driver).NetworkConditions = new ChromeNetworkConditions() {                          IsOffline = offline'                          Latency = TimeSpan.FromMilliseconds(5)'                          DownloadThroughput = 500 * 1024'                          UploadThroughput = 500 * 1024                      };                  }                    try                  {                      browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPAErrorReporting_default);                        // go to Test page and verify the success                      browser.ElementAt("a"' 1).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Test");                        SetOfflineMode(true);                        // try to submit command in offline mode (we don't have CSRF token in Lazy CSRF mode yet' so we should fail in fetchCsrfToken)                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 0).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "1");                        // try to submit static command in offline mode                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 1).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "2");                        // try to go back in offline mode                      browser.ElementAt("a"' 0).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Test");                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                        SetOfflineMode(false);                        // go back to online mode and retry (we should now obtain the CSRF token in lazy CSRF mode)                      browser.ElementAt("input[type=button]"' 0).Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                      AssertUI.TextEquals(browser.Single("*[data-ui=sample-text]")' "Sample Text");                        browser.ElementAt("input[type=button]"' 1).Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                      AssertUI.TextEquals(browser.Single("*[data-ui=sample-text]")' "Sample Static Text");                        browser.ElementAt("a"' 0).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Default");                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                        browser.ElementAt("a"' 1).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Test");                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                        SetOfflineMode(true);                        // try to submit command in offline mode again (now we have valid CSRF token so we should fail on the postback itself)                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 0).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "4");                        // try to submit static command in offline mode                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 1).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "5");                  }                  finally                  {                      SetOfflineMode(false);                  }              });
Magic Number,DotVVM.Samples.Tests.Complex,SPAErrorReportingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPAErrorReportingTests.cs,Complex_SPAErrorReporting_NavigationAndPostbacks,The following statement contains a magic number: RunInAllBrowsers(browser => {                    void SetOfflineMode(bool offline)                  {                      ((ChromeDriver)browser.Driver).NetworkConditions = new ChromeNetworkConditions() {                          IsOffline = offline'                          Latency = TimeSpan.FromMilliseconds(5)'                          DownloadThroughput = 500 * 1024'                          UploadThroughput = 500 * 1024                      };                  }                    try                  {                      browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPAErrorReporting_default);                        // go to Test page and verify the success                      browser.ElementAt("a"' 1).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Test");                        SetOfflineMode(true);                        // try to submit command in offline mode (we don't have CSRF token in Lazy CSRF mode yet' so we should fail in fetchCsrfToken)                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 0).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "1");                        // try to submit static command in offline mode                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 1).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "2");                        // try to go back in offline mode                      browser.ElementAt("a"' 0).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Test");                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                        SetOfflineMode(false);                        // go back to online mode and retry (we should now obtain the CSRF token in lazy CSRF mode)                      browser.ElementAt("input[type=button]"' 0).Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                      AssertUI.TextEquals(browser.Single("*[data-ui=sample-text]")' "Sample Text");                        browser.ElementAt("input[type=button]"' 1).Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                      AssertUI.TextEquals(browser.Single("*[data-ui=sample-text]")' "Sample Static Text");                        browser.ElementAt("a"' 0).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Default");                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                        browser.ElementAt("a"' 1).Click();                      AssertUI.TextEquals(browser.Single("h2")' "Test");                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "3");                        SetOfflineMode(true);                        // try to submit command in offline mode again (now we have valid CSRF token so we should fail on the postback itself)                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 0).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "4");                        // try to submit static command in offline mode                      browser.Single("input[type=text]").SendKeys("aaa");                      browser.ElementAt("input[type=button]"' 1).Click();                      browser.Single("#debugWindow button").Click();                      AssertUI.TextEquals(browser.Single("#numberOfErrors")' "5");                  }                  finally                  {                      SetOfflineMode(false);                  }              });
Magic Number,DotVVM.Samples.Tests.Complex,SPARedirectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPARedirectTests.cs,Complex_SPARedirect_RedirectToLoginPage,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl("ComplexSamples/SPARedirect");                  browser.Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("/ComplexSamples/SPARedirect/login?ReturnUrl=%2FComplexSamples%2FSPARedirect"));                    // login to the app                  IElementWrapper getLoginElement() => browser.First("input[type=button]");                  AssertUI.Attribute(getLoginElement()' "value"' "Login");                  getLoginElement().Click().Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPARedirect"));                    // sign out                  AssertUI.Attribute(getLoginElement()' "value"' "Sign Out");                  getLoginElement().Click().Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("/ComplexSamples/SPARedirect/login?ReturnUrl=%2FComplexSamples%2FSPARedirect"));                    // login to the app                  AssertUI.Attribute(getLoginElement()' "value"' "Login");                  getLoginElement().Click().Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPARedirect"));                    // sign out                  AssertUI.Attribute(getLoginElement()' "value"' "Sign Out");                  getLoginElement().Click().Wait(1000);              });
Magic Number,DotVVM.Samples.Tests.Complex,SPARedirectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPARedirectTests.cs,Complex_SPARedirect_RedirectToLoginPage,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl("ComplexSamples/SPARedirect");                  browser.Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("/ComplexSamples/SPARedirect/login?ReturnUrl=%2FComplexSamples%2FSPARedirect"));                    // login to the app                  IElementWrapper getLoginElement() => browser.First("input[type=button]");                  AssertUI.Attribute(getLoginElement()' "value"' "Login");                  getLoginElement().Click().Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPARedirect"));                    // sign out                  AssertUI.Attribute(getLoginElement()' "value"' "Sign Out");                  getLoginElement().Click().Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("/ComplexSamples/SPARedirect/login?ReturnUrl=%2FComplexSamples%2FSPARedirect"));                    // login to the app                  AssertUI.Attribute(getLoginElement()' "value"' "Login");                  getLoginElement().Click().Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPARedirect"));                    // sign out                  AssertUI.Attribute(getLoginElement()' "value"' "Sign Out");                  getLoginElement().Click().Wait(1000);              });
Magic Number,DotVVM.Samples.Tests.Complex,SPARedirectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPARedirectTests.cs,Complex_SPARedirect_RedirectToLoginPage,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl("ComplexSamples/SPARedirect");                  browser.Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("/ComplexSamples/SPARedirect/login?ReturnUrl=%2FComplexSamples%2FSPARedirect"));                    // login to the app                  IElementWrapper getLoginElement() => browser.First("input[type=button]");                  AssertUI.Attribute(getLoginElement()' "value"' "Login");                  getLoginElement().Click().Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPARedirect"));                    // sign out                  AssertUI.Attribute(getLoginElement()' "value"' "Sign Out");                  getLoginElement().Click().Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("/ComplexSamples/SPARedirect/login?ReturnUrl=%2FComplexSamples%2FSPARedirect"));                    // login to the app                  AssertUI.Attribute(getLoginElement()' "value"' "Login");                  getLoginElement().Click().Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPARedirect"));                    // sign out                  AssertUI.Attribute(getLoginElement()' "value"' "Sign Out");                  getLoginElement().Click().Wait(1000);              });
Magic Number,DotVVM.Samples.Tests.Complex,SPARedirectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPARedirectTests.cs,Complex_SPARedirect_RedirectToLoginPage,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl("ComplexSamples/SPARedirect");                  browser.Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("/ComplexSamples/SPARedirect/login?ReturnUrl=%2FComplexSamples%2FSPARedirect"));                    // login to the app                  IElementWrapper getLoginElement() => browser.First("input[type=button]");                  AssertUI.Attribute(getLoginElement()' "value"' "Login");                  getLoginElement().Click().Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPARedirect"));                    // sign out                  AssertUI.Attribute(getLoginElement()' "value"' "Sign Out");                  getLoginElement().Click().Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("/ComplexSamples/SPARedirect/login?ReturnUrl=%2FComplexSamples%2FSPARedirect"));                    // login to the app                  AssertUI.Attribute(getLoginElement()' "value"' "Login");                  getLoginElement().Click().Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPARedirect"));                    // sign out                  AssertUI.Attribute(getLoginElement()' "value"' "Sign Out");                  getLoginElement().Click().Wait(1000);              });
Magic Number,DotVVM.Samples.Tests.Complex,SPARedirectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPARedirectTests.cs,Complex_SPARedirect_RedirectToLoginPage,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl("ComplexSamples/SPARedirect");                  browser.Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("/ComplexSamples/SPARedirect/login?ReturnUrl=%2FComplexSamples%2FSPARedirect"));                    // login to the app                  IElementWrapper getLoginElement() => browser.First("input[type=button]");                  AssertUI.Attribute(getLoginElement()' "value"' "Login");                  getLoginElement().Click().Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPARedirect"));                    // sign out                  AssertUI.Attribute(getLoginElement()' "value"' "Sign Out");                  getLoginElement().Click().Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("/ComplexSamples/SPARedirect/login?ReturnUrl=%2FComplexSamples%2FSPARedirect"));                    // login to the app                  AssertUI.Attribute(getLoginElement()' "value"' "Login");                  getLoginElement().Click().Wait(1000);                    //check url                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPARedirect"));                    // sign out                  AssertUI.Attribute(getLoginElement()' "value"' "Sign Out");                  getLoginElement().Click().Wait(1000);              });
Magic Number,DotVVM.Samples.Tests.Complex,SPATests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPATests.cs,Complex_SPA_NavigationAndBackButtons,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl("/");                  browser.Wait(1000);                    browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPA_default);                  browser.Wait(1000);                    // go to test page                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  browser.ElementAt("a"' 1).Click().Wait();                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // use the back button                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // exit SPA using the back button                  browser.NavigateBack();                  browser.Wait(1000);                    // reenter SPA                  browser.NavigateForward();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // go forward to the test page                  browser.NavigateForward();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // open the default page                  browser.ElementAt("a"' 0).Click().Wait();                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // go back to the test page                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // go back to the default page                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));              });
Magic Number,DotVVM.Samples.Tests.Complex,SPATests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPATests.cs,Complex_SPA_NavigationAndBackButtons,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl("/");                  browser.Wait(1000);                    browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPA_default);                  browser.Wait(1000);                    // go to test page                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  browser.ElementAt("a"' 1).Click().Wait();                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // use the back button                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // exit SPA using the back button                  browser.NavigateBack();                  browser.Wait(1000);                    // reenter SPA                  browser.NavigateForward();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // go forward to the test page                  browser.NavigateForward();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // open the default page                  browser.ElementAt("a"' 0).Click().Wait();                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // go back to the test page                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // go back to the default page                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));              });
Magic Number,DotVVM.Samples.Tests.Complex,SPATests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPATests.cs,Complex_SPA_NavigationAndBackButtons,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl("/");                  browser.Wait(1000);                    browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPA_default);                  browser.Wait(1000);                    // go to test page                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  browser.ElementAt("a"' 1).Click().Wait();                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // use the back button                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // exit SPA using the back button                  browser.NavigateBack();                  browser.Wait(1000);                    // reenter SPA                  browser.NavigateForward();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // go forward to the test page                  browser.NavigateForward();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // open the default page                  browser.ElementAt("a"' 0).Click().Wait();                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // go back to the test page                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // go back to the default page                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));              });
Magic Number,DotVVM.Samples.Tests.Complex,SPATests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPATests.cs,Complex_SPA_NavigationAndBackButtons,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl("/");                  browser.Wait(1000);                    browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPA_default);                  browser.Wait(1000);                    // go to test page                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  browser.ElementAt("a"' 1).Click().Wait();                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // use the back button                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // exit SPA using the back button                  browser.NavigateBack();                  browser.Wait(1000);                    // reenter SPA                  browser.NavigateForward();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // go forward to the test page                  browser.NavigateForward();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // open the default page                  browser.ElementAt("a"' 0).Click().Wait();                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // go back to the test page                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // go back to the default page                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));              });
Magic Number,DotVVM.Samples.Tests.Complex,SPATests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPATests.cs,Complex_SPA_NavigationAndBackButtons,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl("/");                  browser.Wait(1000);                    browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPA_default);                  browser.Wait(1000);                    // go to test page                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  browser.ElementAt("a"' 1).Click().Wait();                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // use the back button                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // exit SPA using the back button                  browser.NavigateBack();                  browser.Wait(1000);                    // reenter SPA                  browser.NavigateForward();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // go forward to the test page                  browser.NavigateForward();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // open the default page                  browser.ElementAt("a"' 0).Click().Wait();                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // go back to the test page                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // go back to the default page                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));              });
Magic Number,DotVVM.Samples.Tests.Complex,SPATests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPATests.cs,Complex_SPA_NavigationAndBackButtons,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl("/");                  browser.Wait(1000);                    browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPA_default);                  browser.Wait(1000);                    // go to test page                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  browser.ElementAt("a"' 1).Click().Wait();                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // use the back button                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // exit SPA using the back button                  browser.NavigateBack();                  browser.Wait(1000);                    // reenter SPA                  browser.NavigateForward();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // go forward to the test page                  browser.NavigateForward();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // open the default page                  browser.ElementAt("a"' 0).Click().Wait();                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // go back to the test page                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // go back to the default page                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));              });
Magic Number,DotVVM.Samples.Tests.Complex,SPATests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPATests.cs,Complex_SPA_NavigationAndBackButtons,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl("/");                  browser.Wait(1000);                    browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPA_default);                  browser.Wait(1000);                    // go to test page                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  browser.ElementAt("a"' 1).Click().Wait();                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // use the back button                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // exit SPA using the back button                  browser.NavigateBack();                  browser.Wait(1000);                    // reenter SPA                  browser.NavigateForward();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // go forward to the test page                  browser.NavigateForward();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // open the default page                  browser.ElementAt("a"' 0).Click().Wait();                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // go back to the test page                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // go back to the default page                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));              });
Magic Number,DotVVM.Samples.Tests.Complex,SPATests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPATests.cs,Complex_SPA_NavigationAndBackButtons,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl("/");                  browser.Wait(1000);                    browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPA_default);                  browser.Wait(1000);                    // go to test page                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  browser.ElementAt("a"' 1).Click().Wait();                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // use the back button                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // exit SPA using the back button                  browser.NavigateBack();                  browser.Wait(1000);                    // reenter SPA                  browser.NavigateForward();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // go forward to the test page                  browser.NavigateForward();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // open the default page                  browser.ElementAt("a"' 0).Click().Wait();                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));                    // go back to the test page                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Test");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/test"));                    // go back to the default page                  browser.NavigateBack();                  browser.Wait(1000);                    // check url and page contents                  AssertUI.TextEquals(browser.Single("h2")' "Default");                  AssertUI.Url(browser' s => s.Contains("ComplexSamples/SPA/default"));              });
Magic Number,DotVVM.Samples.Tests.Complex,SPATests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPATests.cs,Complex_SPA_ValidationAndNavigation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl("/");                  browser.Wait(1000);                    browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPA_test);                  browser.Wait(1000);                    // click to generate validation error                  browser.Single("input[type=button]").Click();                    // check if validation error is displayed                  browser.Wait(500);                  AssertUI.InnerTextEquals(browser.Single("span[data-ui='sample-text']")' string.Empty);                    // go to default page                  browser.ElementAt("a"' 0).Click().Wait();                  browser.Wait(1000);                    // click to check if validation error disapeared                  browser.Single("input[type=button]").Click();                  browser.Wait(500);                  AssertUI.InnerTextEquals(browser.Single("span[data-ui='sample-text']")' "Sample Text");              });
Magic Number,DotVVM.Samples.Tests.Complex,SPATests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPATests.cs,Complex_SPA_ValidationAndNavigation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl("/");                  browser.Wait(1000);                    browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPA_test);                  browser.Wait(1000);                    // click to generate validation error                  browser.Single("input[type=button]").Click();                    // check if validation error is displayed                  browser.Wait(500);                  AssertUI.InnerTextEquals(browser.Single("span[data-ui='sample-text']")' string.Empty);                    // go to default page                  browser.ElementAt("a"' 0).Click().Wait();                  browser.Wait(1000);                    // click to check if validation error disapeared                  browser.Single("input[type=button]").Click();                  browser.Wait(500);                  AssertUI.InnerTextEquals(browser.Single("span[data-ui='sample-text']")' "Sample Text");              });
Magic Number,DotVVM.Samples.Tests.Complex,SPATests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPATests.cs,Complex_SPA_ValidationAndNavigation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl("/");                  browser.Wait(1000);                    browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPA_test);                  browser.Wait(1000);                    // click to generate validation error                  browser.Single("input[type=button]").Click();                    // check if validation error is displayed                  browser.Wait(500);                  AssertUI.InnerTextEquals(browser.Single("span[data-ui='sample-text']")' string.Empty);                    // go to default page                  browser.ElementAt("a"' 0).Click().Wait();                  browser.Wait(1000);                    // click to check if validation error disapeared                  browser.Single("input[type=button]").Click();                  browser.Wait(500);                  AssertUI.InnerTextEquals(browser.Single("span[data-ui='sample-text']")' "Sample Text");              });
Magic Number,DotVVM.Samples.Tests.Complex,SPATests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPATests.cs,Complex_SPA_ValidationAndNavigation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl("/");                  browser.Wait(1000);                    browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPA_test);                  browser.Wait(1000);                    // click to generate validation error                  browser.Single("input[type=button]").Click();                    // check if validation error is displayed                  browser.Wait(500);                  AssertUI.InnerTextEquals(browser.Single("span[data-ui='sample-text']")' string.Empty);                    // go to default page                  browser.ElementAt("a"' 0).Click().Wait();                  browser.Wait(1000);                    // click to check if validation error disapeared                  browser.Single("input[type=button]").Click();                  browser.Wait(500);                  AssertUI.InnerTextEquals(browser.Single("span[data-ui='sample-text']")' "Sample Text");              });
Magic Number,DotVVM.Samples.Tests.Complex,SPATests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPATests.cs,Complex_SPA_ValidationAndNavigation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl("/");                  browser.Wait(1000);                    browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPA_test);                  browser.Wait(1000);                    // click to generate validation error                  browser.Single("input[type=button]").Click();                    // check if validation error is displayed                  browser.Wait(500);                  AssertUI.InnerTextEquals(browser.Single("span[data-ui='sample-text']")' string.Empty);                    // go to default page                  browser.ElementAt("a"' 0).Click().Wait();                  browser.Wait(1000);                    // click to check if validation error disapeared                  browser.Single("input[type=button]").Click();                  browser.Wait(500);                  AssertUI.InnerTextEquals(browser.Single("span[data-ui='sample-text']")' "Sample Text");              });
Magic Number,DotVVM.Samples.Tests.Complex,SPAViewModelReapplicationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPAViewModelReapplicationTests.cs,Complex_SPAViewModelReapplication,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPAViewModelReapplication_pageA);                  browser.Wait(1000);                    // verify items count                  browser.FindElements("ul#first li").ThrowIfDifferentCountThan(3);                  AssertUI.InnerText(browser.Single("#first")' s => s.Contains("Entry 1") && s.Contains("Entry 2") && s.Contains("Entry 3"));                    AssertUI.InnerTextEquals(browser.First("#test2")' "A");                    // verify first page values                  browser.First("input[type=text]").GetAttribute("value").Contains("Hello");                  browser.Last("input[type=text]").GetAttribute("value").Contains("1");                    //check url                  AssertUI.Url(browser' s => s.Contains("SPAViewModelReapplication/page"));                    // try the postback                  browser.First("input[type=button]").Click();                  browser.Wait();                  AssertUI.InnerTextEquals(browser.First("#testResult")' "Hello1");                    // go to the second page                  browser.Single("#pageB").Click();                  browser.Wait();                    // verify items count and                  browser.FindElements("ul#first li").ThrowIfDifferentCountThan(3);                  AssertUI.InnerText(browser.Single("#first")' s => s.Contains("Entry 1") && s.Contains("Entry 2") && s.Contains("Entry 3"));                    // verify second page values                  browser.First("input[type=text]").GetAttribute("value").Contains("World");                  browser.Last("input[type=text]").GetAttribute("value").Contains("2");                  AssertUI.InnerTextEquals(browser.First("#test2")' "B");                    // try the postback                  browser.First("input[type=button]").Click();                  browser.Wait();                  AssertUI.InnerTextEquals(browser.First("#testResult")' "World2");                    // go to first page                  browser.Single("#pageA").Click();                  browser.Wait();                    // verify items count                  browser.FindElements("ul#first li").ThrowIfDifferentCountThan(3);                    // verify first page values                  browser.First("input[type=text]").GetAttribute("value").Contains("Hello");                  browser.Last("input[type=text]").GetAttribute("value").Contains("1");                  AssertUI.InnerTextEquals(browser.First("#test2")' "A");              });
Magic Number,DotVVM.Samples.Tests.Complex,SPAViewModelReapplicationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPAViewModelReapplicationTests.cs,Complex_SPAViewModelReapplication,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPAViewModelReapplication_pageA);                  browser.Wait(1000);                    // verify items count                  browser.FindElements("ul#first li").ThrowIfDifferentCountThan(3);                  AssertUI.InnerText(browser.Single("#first")' s => s.Contains("Entry 1") && s.Contains("Entry 2") && s.Contains("Entry 3"));                    AssertUI.InnerTextEquals(browser.First("#test2")' "A");                    // verify first page values                  browser.First("input[type=text]").GetAttribute("value").Contains("Hello");                  browser.Last("input[type=text]").GetAttribute("value").Contains("1");                    //check url                  AssertUI.Url(browser' s => s.Contains("SPAViewModelReapplication/page"));                    // try the postback                  browser.First("input[type=button]").Click();                  browser.Wait();                  AssertUI.InnerTextEquals(browser.First("#testResult")' "Hello1");                    // go to the second page                  browser.Single("#pageB").Click();                  browser.Wait();                    // verify items count and                  browser.FindElements("ul#first li").ThrowIfDifferentCountThan(3);                  AssertUI.InnerText(browser.Single("#first")' s => s.Contains("Entry 1") && s.Contains("Entry 2") && s.Contains("Entry 3"));                    // verify second page values                  browser.First("input[type=text]").GetAttribute("value").Contains("World");                  browser.Last("input[type=text]").GetAttribute("value").Contains("2");                  AssertUI.InnerTextEquals(browser.First("#test2")' "B");                    // try the postback                  browser.First("input[type=button]").Click();                  browser.Wait();                  AssertUI.InnerTextEquals(browser.First("#testResult")' "World2");                    // go to first page                  browser.Single("#pageA").Click();                  browser.Wait();                    // verify items count                  browser.FindElements("ul#first li").ThrowIfDifferentCountThan(3);                    // verify first page values                  browser.First("input[type=text]").GetAttribute("value").Contains("Hello");                  browser.Last("input[type=text]").GetAttribute("value").Contains("1");                  AssertUI.InnerTextEquals(browser.First("#test2")' "A");              });
Magic Number,DotVVM.Samples.Tests.Complex,SPAViewModelReapplicationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPAViewModelReapplicationTests.cs,Complex_SPAViewModelReapplication,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPAViewModelReapplication_pageA);                  browser.Wait(1000);                    // verify items count                  browser.FindElements("ul#first li").ThrowIfDifferentCountThan(3);                  AssertUI.InnerText(browser.Single("#first")' s => s.Contains("Entry 1") && s.Contains("Entry 2") && s.Contains("Entry 3"));                    AssertUI.InnerTextEquals(browser.First("#test2")' "A");                    // verify first page values                  browser.First("input[type=text]").GetAttribute("value").Contains("Hello");                  browser.Last("input[type=text]").GetAttribute("value").Contains("1");                    //check url                  AssertUI.Url(browser' s => s.Contains("SPAViewModelReapplication/page"));                    // try the postback                  browser.First("input[type=button]").Click();                  browser.Wait();                  AssertUI.InnerTextEquals(browser.First("#testResult")' "Hello1");                    // go to the second page                  browser.Single("#pageB").Click();                  browser.Wait();                    // verify items count and                  browser.FindElements("ul#first li").ThrowIfDifferentCountThan(3);                  AssertUI.InnerText(browser.Single("#first")' s => s.Contains("Entry 1") && s.Contains("Entry 2") && s.Contains("Entry 3"));                    // verify second page values                  browser.First("input[type=text]").GetAttribute("value").Contains("World");                  browser.Last("input[type=text]").GetAttribute("value").Contains("2");                  AssertUI.InnerTextEquals(browser.First("#test2")' "B");                    // try the postback                  browser.First("input[type=button]").Click();                  browser.Wait();                  AssertUI.InnerTextEquals(browser.First("#testResult")' "World2");                    // go to first page                  browser.Single("#pageA").Click();                  browser.Wait();                    // verify items count                  browser.FindElements("ul#first li").ThrowIfDifferentCountThan(3);                    // verify first page values                  browser.First("input[type=text]").GetAttribute("value").Contains("Hello");                  browser.Last("input[type=text]").GetAttribute("value").Contains("1");                  AssertUI.InnerTextEquals(browser.First("#test2")' "A");              });
Magic Number,DotVVM.Samples.Tests.Complex,SPAViewModelReapplicationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\SPAViewModelReapplicationTests.cs,Complex_SPAViewModelReapplication,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_SPAViewModelReapplication_pageA);                  browser.Wait(1000);                    // verify items count                  browser.FindElements("ul#first li").ThrowIfDifferentCountThan(3);                  AssertUI.InnerText(browser.Single("#first")' s => s.Contains("Entry 1") && s.Contains("Entry 2") && s.Contains("Entry 3"));                    AssertUI.InnerTextEquals(browser.First("#test2")' "A");                    // verify first page values                  browser.First("input[type=text]").GetAttribute("value").Contains("Hello");                  browser.Last("input[type=text]").GetAttribute("value").Contains("1");                    //check url                  AssertUI.Url(browser' s => s.Contains("SPAViewModelReapplication/page"));                    // try the postback                  browser.First("input[type=button]").Click();                  browser.Wait();                  AssertUI.InnerTextEquals(browser.First("#testResult")' "Hello1");                    // go to the second page                  browser.Single("#pageB").Click();                  browser.Wait();                    // verify items count and                  browser.FindElements("ul#first li").ThrowIfDifferentCountThan(3);                  AssertUI.InnerText(browser.Single("#first")' s => s.Contains("Entry 1") && s.Contains("Entry 2") && s.Contains("Entry 3"));                    // verify second page values                  browser.First("input[type=text]").GetAttribute("value").Contains("World");                  browser.Last("input[type=text]").GetAttribute("value").Contains("2");                  AssertUI.InnerTextEquals(browser.First("#test2")' "B");                    // try the postback                  browser.First("input[type=button]").Click();                  browser.Wait();                  AssertUI.InnerTextEquals(browser.First("#testResult")' "World2");                    // go to first page                  browser.Single("#pageA").Click();                  browser.Wait();                    // verify items count                  browser.FindElements("ul#first li").ThrowIfDifferentCountThan(3);                    // verify first page values                  browser.First("input[type=text]").GetAttribute("value").Contains("Hello");                  browser.Last("input[type=text]").GetAttribute("value").Contains("1");                  AssertUI.InnerTextEquals(browser.First("#test2")' "A");              });
Magic Number,DotVVM.Samples.Tests.Complex,TaskListTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\TaskListTests.cs,Complex_TaskList_TaskListAsyncCommands,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_TaskList_TaskListAsyncCommands);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                    //add task                  browser.SendKeys("input[type=text]"' "DotVVM");                  browser.ElementAt("input[type=button]"'0).Click();                  browser.Wait(500);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                    //mark last task as completed                  browser.Last("a").Click();                  browser.Wait(500);                    AssertUI.ClassAttribute(browser.Last(".table tr")' a => a.Contains("completed")' "Last task is not marked as completed.");                    browser.ElementAt("input[type=button]"' 1).Click().Wait(1000);                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(5);              });
Magic Number,DotVVM.Samples.Tests.Complex,TaskListTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\TaskListTests.cs,Complex_TaskList_TaskListAsyncCommands,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_TaskList_TaskListAsyncCommands);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                    //add task                  browser.SendKeys("input[type=text]"' "DotVVM");                  browser.ElementAt("input[type=button]"'0).Click();                  browser.Wait(500);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                    //mark last task as completed                  browser.Last("a").Click();                  browser.Wait(500);                    AssertUI.ClassAttribute(browser.Last(".table tr")' a => a.Contains("completed")' "Last task is not marked as completed.");                    browser.ElementAt("input[type=button]"' 1).Click().Wait(1000);                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(5);              });
Magic Number,DotVVM.Samples.Tests.Complex,TaskListTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\TaskListTests.cs,Complex_TaskList_TaskListAsyncCommands,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_TaskList_TaskListAsyncCommands);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                    //add task                  browser.SendKeys("input[type=text]"' "DotVVM");                  browser.ElementAt("input[type=button]"'0).Click();                  browser.Wait(500);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                    //mark last task as completed                  browser.Last("a").Click();                  browser.Wait(500);                    AssertUI.ClassAttribute(browser.Last(".table tr")' a => a.Contains("completed")' "Last task is not marked as completed.");                    browser.ElementAt("input[type=button]"' 1).Click().Wait(1000);                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(5);              });
Magic Number,DotVVM.Samples.Tests.Complex,TaskListTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\TaskListTests.cs,Complex_TaskList_TaskListAsyncCommands,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_TaskList_TaskListAsyncCommands);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                    //add task                  browser.SendKeys("input[type=text]"' "DotVVM");                  browser.ElementAt("input[type=button]"'0).Click();                  browser.Wait(500);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                    //mark last task as completed                  browser.Last("a").Click();                  browser.Wait(500);                    AssertUI.ClassAttribute(browser.Last(".table tr")' a => a.Contains("completed")' "Last task is not marked as completed.");                    browser.ElementAt("input[type=button]"' 1).Click().Wait(1000);                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(5);              });
Magic Number,DotVVM.Samples.Tests.Complex,TaskListTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\TaskListTests.cs,Complex_TaskList_TaskListAsyncCommands,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_TaskList_TaskListAsyncCommands);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                    //add task                  browser.SendKeys("input[type=text]"' "DotVVM");                  browser.ElementAt("input[type=button]"'0).Click();                  browser.Wait(500);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                    //mark last task as completed                  browser.Last("a").Click();                  browser.Wait(500);                    AssertUI.ClassAttribute(browser.Last(".table tr")' a => a.Contains("completed")' "Last task is not marked as completed.");                    browser.ElementAt("input[type=button]"' 1).Click().Wait(1000);                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(5);              });
Magic Number,DotVVM.Samples.Tests.Complex,TaskListTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\TaskListTests.cs,Complex_TaskList_TaskListAsyncCommands,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_TaskList_TaskListAsyncCommands);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                    //add task                  browser.SendKeys("input[type=text]"' "DotVVM");                  browser.ElementAt("input[type=button]"'0).Click();                  browser.Wait(500);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                    //mark last task as completed                  browser.Last("a").Click();                  browser.Wait(500);                    AssertUI.ClassAttribute(browser.Last(".table tr")' a => a.Contains("completed")' "Last task is not marked as completed.");                    browser.ElementAt("input[type=button]"' 1).Click().Wait(1000);                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(5);              });
Magic Number,DotVVM.Samples.Tests.Complex,TaskListTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\TaskListTests.cs,Complex_TaskList_ServerRenderedTaskList,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                    //add task                  browser.SendKeys("input[type=text]"' "DotVVM");                  browser.Click("input[type=button]");                  browser.Wait(500);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                    //mark last task as completed                  browser.Last("a").Click();                  browser.Wait(500);                    AssertUI.ClassAttribute(browser.Last(".table tr")' a => a.Contains("completed")'                      "Last task is not marked as completed.");              });
Magic Number,DotVVM.Samples.Tests.Complex,TaskListTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\TaskListTests.cs,Complex_TaskList_ServerRenderedTaskList,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                    //add task                  browser.SendKeys("input[type=text]"' "DotVVM");                  browser.Click("input[type=button]");                  browser.Wait(500);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                    //mark last task as completed                  browser.Last("a").Click();                  browser.Wait(500);                    AssertUI.ClassAttribute(browser.Last(".table tr")' a => a.Contains("completed")'                      "Last task is not marked as completed.");              });
Magic Number,DotVVM.Samples.Tests.Complex,TaskListTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\TaskListTests.cs,Complex_TaskList_ServerRenderedTaskList,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                    //add task                  browser.SendKeys("input[type=text]"' "DotVVM");                  browser.Click("input[type=button]");                  browser.Wait(500);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                    //mark last task as completed                  browser.Last("a").Click();                  browser.Wait(500);                    AssertUI.ClassAttribute(browser.Last(".table tr")' a => a.Contains("completed")'                      "Last task is not marked as completed.");              });
Magic Number,DotVVM.Samples.Tests.Complex,TaskListTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Complex\TaskListTests.cs,Complex_TaskList_ServerRenderedTaskList,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                    //add task                  browser.SendKeys("input[type=text]"' "DotVVM");                  browser.Click("input[type=button]");                  browser.Wait(500);                    browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                    //mark last task as completed                  browser.Last("a").Click();                  browser.Wait(500);                    AssertUI.ClassAttribute(browser.Last(".table tr")' a => a.Contains("completed")'                      "Last task is not marked as completed.");              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_CheckBox,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_CheckBox);                    var boxes = browser.FindElements("fieldset");                    // single check box                  boxes.ElementAt(0).First("input[type=checkbox]").Click();                  boxes.ElementAt(0).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(0).First("span.result")                      ' "True");                    // check box list                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 1).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' b");                    boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 0).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' r");                    // checked changed                  boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "1");                  AssertUI.IsChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "2");                  AssertUI.IsNotChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    // checked visible                  var v = boxes.ElementAt(4);                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    boxes.ElementAt(4).Single("input[data-ui=switch]").Click();                    AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    // dataContext change                  boxes.ElementAt(5).First("input[type=checkbox]").Click();                  AssertUI.InnerTextEquals(boxes.ElementAt(5).First("span.result")                      ' "true");              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_CheckBox,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_CheckBox);                    var boxes = browser.FindElements("fieldset");                    // single check box                  boxes.ElementAt(0).First("input[type=checkbox]").Click();                  boxes.ElementAt(0).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(0).First("span.result")                      ' "True");                    // check box list                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 1).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' b");                    boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 0).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' r");                    // checked changed                  boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "1");                  AssertUI.IsChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "2");                  AssertUI.IsNotChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    // checked visible                  var v = boxes.ElementAt(4);                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    boxes.ElementAt(4).Single("input[data-ui=switch]").Click();                    AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    // dataContext change                  boxes.ElementAt(5).First("input[type=checkbox]").Click();                  AssertUI.InnerTextEquals(boxes.ElementAt(5).First("span.result")                      ' "true");              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_CheckBox,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_CheckBox);                    var boxes = browser.FindElements("fieldset");                    // single check box                  boxes.ElementAt(0).First("input[type=checkbox]").Click();                  boxes.ElementAt(0).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(0).First("span.result")                      ' "True");                    // check box list                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 1).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' b");                    boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 0).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' r");                    // checked changed                  boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "1");                  AssertUI.IsChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "2");                  AssertUI.IsNotChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    // checked visible                  var v = boxes.ElementAt(4);                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    boxes.ElementAt(4).Single("input[data-ui=switch]").Click();                    AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    // dataContext change                  boxes.ElementAt(5).First("input[type=checkbox]").Click();                  AssertUI.InnerTextEquals(boxes.ElementAt(5).First("span.result")                      ' "true");              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_CheckBox,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_CheckBox);                    var boxes = browser.FindElements("fieldset");                    // single check box                  boxes.ElementAt(0).First("input[type=checkbox]").Click();                  boxes.ElementAt(0).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(0).First("span.result")                      ' "True");                    // check box list                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 1).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' b");                    boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 0).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' r");                    // checked changed                  boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "1");                  AssertUI.IsChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "2");                  AssertUI.IsNotChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    // checked visible                  var v = boxes.ElementAt(4);                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    boxes.ElementAt(4).Single("input[data-ui=switch]").Click();                    AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    // dataContext change                  boxes.ElementAt(5).First("input[type=checkbox]").Click();                  AssertUI.InnerTextEquals(boxes.ElementAt(5).First("span.result")                      ' "true");              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_CheckBox,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_CheckBox);                    var boxes = browser.FindElements("fieldset");                    // single check box                  boxes.ElementAt(0).First("input[type=checkbox]").Click();                  boxes.ElementAt(0).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(0).First("span.result")                      ' "True");                    // check box list                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 1).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' b");                    boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 0).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' r");                    // checked changed                  boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "1");                  AssertUI.IsChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "2");                  AssertUI.IsNotChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    // checked visible                  var v = boxes.ElementAt(4);                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    boxes.ElementAt(4).Single("input[data-ui=switch]").Click();                    AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    // dataContext change                  boxes.ElementAt(5).First("input[type=checkbox]").Click();                  AssertUI.InnerTextEquals(boxes.ElementAt(5).First("span.result")                      ' "true");              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_CheckBox,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_CheckBox);                    var boxes = browser.FindElements("fieldset");                    // single check box                  boxes.ElementAt(0).First("input[type=checkbox]").Click();                  boxes.ElementAt(0).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(0).First("span.result")                      ' "True");                    // check box list                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 1).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' b");                    boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 0).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' r");                    // checked changed                  boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "1");                  AssertUI.IsChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "2");                  AssertUI.IsNotChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    // checked visible                  var v = boxes.ElementAt(4);                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    boxes.ElementAt(4).Single("input[data-ui=switch]").Click();                    AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    // dataContext change                  boxes.ElementAt(5).First("input[type=checkbox]").Click();                  AssertUI.InnerTextEquals(boxes.ElementAt(5).First("span.result")                      ' "true");              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_CheckBox,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_CheckBox);                    var boxes = browser.FindElements("fieldset");                    // single check box                  boxes.ElementAt(0).First("input[type=checkbox]").Click();                  boxes.ElementAt(0).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(0).First("span.result")                      ' "True");                    // check box list                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 1).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' b");                    boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 0).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' r");                    // checked changed                  boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "1");                  AssertUI.IsChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "2");                  AssertUI.IsNotChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    // checked visible                  var v = boxes.ElementAt(4);                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    boxes.ElementAt(4).Single("input[data-ui=switch]").Click();                    AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    // dataContext change                  boxes.ElementAt(5).First("input[type=checkbox]").Click();                  AssertUI.InnerTextEquals(boxes.ElementAt(5).First("span.result")                      ' "true");              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_CheckBox,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_CheckBox);                    var boxes = browser.FindElements("fieldset");                    // single check box                  boxes.ElementAt(0).First("input[type=checkbox]").Click();                  boxes.ElementAt(0).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(0).First("span.result")                      ' "True");                    // check box list                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 1).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' b");                    boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 0).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' r");                    // checked changed                  boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "1");                  AssertUI.IsChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "2");                  AssertUI.IsNotChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    // checked visible                  var v = boxes.ElementAt(4);                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    boxes.ElementAt(4).Single("input[data-ui=switch]").Click();                    AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    // dataContext change                  boxes.ElementAt(5).First("input[type=checkbox]").Click();                  AssertUI.InnerTextEquals(boxes.ElementAt(5).First("span.result")                      ' "true");              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_CheckBox,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_CheckBox);                    var boxes = browser.FindElements("fieldset");                    // single check box                  boxes.ElementAt(0).First("input[type=checkbox]").Click();                  boxes.ElementAt(0).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(0).First("span.result")                      ' "True");                    // check box list                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 1).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' b");                    boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 0).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' r");                    // checked changed                  boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "1");                  AssertUI.IsChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "2");                  AssertUI.IsNotChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    // checked visible                  var v = boxes.ElementAt(4);                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    boxes.ElementAt(4).Single("input[data-ui=switch]").Click();                    AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    // dataContext change                  boxes.ElementAt(5).First("input[type=checkbox]").Click();                  AssertUI.InnerTextEquals(boxes.ElementAt(5).First("span.result")                      ' "true");              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_CheckBox,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_CheckBox);                    var boxes = browser.FindElements("fieldset");                    // single check box                  boxes.ElementAt(0).First("input[type=checkbox]").Click();                  boxes.ElementAt(0).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(0).First("span.result")                      ' "True");                    // check box list                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 1).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' b");                    boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 0).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' r");                    // checked changed                  boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "1");                  AssertUI.IsChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "2");                  AssertUI.IsNotChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    // checked visible                  var v = boxes.ElementAt(4);                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    boxes.ElementAt(4).Single("input[data-ui=switch]").Click();                    AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    // dataContext change                  boxes.ElementAt(5).First("input[type=checkbox]").Click();                  AssertUI.InnerTextEquals(boxes.ElementAt(5).First("span.result")                      ' "true");              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_CheckBox,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_CheckBox);                    var boxes = browser.FindElements("fieldset");                    // single check box                  boxes.ElementAt(0).First("input[type=checkbox]").Click();                  boxes.ElementAt(0).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(0).First("span.result")                      ' "True");                    // check box list                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 1).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' b");                    boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 0).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' r");                    // checked changed                  boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "1");                  AssertUI.IsChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "2");                  AssertUI.IsNotChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    // checked visible                  var v = boxes.ElementAt(4);                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    boxes.ElementAt(4).Single("input[data-ui=switch]").Click();                    AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    // dataContext change                  boxes.ElementAt(5).First("input[type=checkbox]").Click();                  AssertUI.InnerTextEquals(boxes.ElementAt(5).First("span.result")                      ' "true");              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_CheckBox,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_CheckBox);                    var boxes = browser.FindElements("fieldset");                    // single check box                  boxes.ElementAt(0).First("input[type=checkbox]").Click();                  boxes.ElementAt(0).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(0).First("span.result")                      ' "True");                    // check box list                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 1).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' b");                    boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 0).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' r");                    // checked changed                  boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "1");                  AssertUI.IsChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "2");                  AssertUI.IsNotChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    // checked visible                  var v = boxes.ElementAt(4);                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    boxes.ElementAt(4).Single("input[data-ui=switch]").Click();                    AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    // dataContext change                  boxes.ElementAt(5).First("input[type=checkbox]").Click();                  AssertUI.InnerTextEquals(boxes.ElementAt(5).First("span.result")                      ' "true");              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_CheckBox,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_CheckBox);                    var boxes = browser.FindElements("fieldset");                    // single check box                  boxes.ElementAt(0).First("input[type=checkbox]").Click();                  boxes.ElementAt(0).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(0).First("span.result")                      ' "True");                    // check box list                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 1).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' b");                    boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 0).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' r");                    // checked changed                  boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "1");                  AssertUI.IsChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "2");                  AssertUI.IsNotChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    // checked visible                  var v = boxes.ElementAt(4);                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    boxes.ElementAt(4).Single("input[data-ui=switch]").Click();                    AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    // dataContext change                  boxes.ElementAt(5).First("input[type=checkbox]").Click();                  AssertUI.InnerTextEquals(boxes.ElementAt(5).First("span.result")                      ' "true");              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_CheckBox,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_CheckBox);                    var boxes = browser.FindElements("fieldset");                    // single check box                  boxes.ElementAt(0).First("input[type=checkbox]").Click();                  boxes.ElementAt(0).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(0).First("span.result")                      ' "True");                    // check box list                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 1).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' b");                    boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 0).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' r");                    // checked changed                  boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "1");                  AssertUI.IsChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "2");                  AssertUI.IsNotChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    // checked visible                  var v = boxes.ElementAt(4);                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    boxes.ElementAt(4).Single("input[data-ui=switch]").Click();                    AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    // dataContext change                  boxes.ElementAt(5).First("input[type=checkbox]").Click();                  AssertUI.InnerTextEquals(boxes.ElementAt(5).First("span.result")                      ' "true");              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_CheckBox,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_CheckBox);                    var boxes = browser.FindElements("fieldset");                    // single check box                  boxes.ElementAt(0).First("input[type=checkbox]").Click();                  boxes.ElementAt(0).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(0).First("span.result")                      ' "True");                    // check box list                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 1).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' b");                    boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 0).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' r");                    // checked changed                  boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "1");                  AssertUI.IsChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "2");                  AssertUI.IsNotChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    // checked visible                  var v = boxes.ElementAt(4);                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    boxes.ElementAt(4).Single("input[data-ui=switch]").Click();                    AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    // dataContext change                  boxes.ElementAt(5).First("input[type=checkbox]").Click();                  AssertUI.InnerTextEquals(boxes.ElementAt(5).First("span.result")                      ' "true");              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_CheckBox,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_CheckBox);                    var boxes = browser.FindElements("fieldset");                    // single check box                  boxes.ElementAt(0).First("input[type=checkbox]").Click();                  boxes.ElementAt(0).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(0).First("span.result")                      ' "True");                    // check box list                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 1).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' b");                    boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 2).Click();                  boxes.ElementAt(1).ElementAt("input[type=checkbox]"' 0).Click();                  boxes.ElementAt(1).First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(1).First("span.result")                      ' "g' r");                    // checked changed                  boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "1");                  AssertUI.IsChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    boxes.ElementAt(2).ElementAt("input[type=checkbox]"' 0).Click();                  browser.Wait();                    AssertUI.InnerTextEquals(boxes.ElementAt(2).Last("span.result")                      ' "2");                  AssertUI.IsNotChecked(boxes.ElementAt(2).First("input[type=checkbox]"));                    // checked visible                  var v = boxes.ElementAt(4);                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    boxes.ElementAt(4).Single("input[data-ui=switch]").Click();                    AssertUI.IsNotDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 0));                  AssertUI.IsDisplayed(boxes.ElementAt(4).ElementAt("input[type=checkbox]"' 1));                    // dataContext change                  boxes.ElementAt(5).First("input[type=checkbox]").Click();                  AssertUI.InnerTextEquals(boxes.ElementAt(5).First("span.result")                      ' "true");              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_InRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_InRepeater);                    var repeater = browser.Single("div[data-ui='repeater']");                  var checkBoxes = browser.FindElements("label[data-ui='checkBox']");                    var checkBox = checkBoxes.ElementAt(0).Single("input");                  checkBox.Click();                  AssertUI.IsChecked(checkBox);                  AssertUI.InnerText(browser.Single("span[data-ui='selectedColors']")' s => s.Contains("orange"));                    checkBox = checkBoxes.ElementAt(1).Single("input");                  checkBox.Click();                  AssertUI.IsChecked(checkBox);                  AssertUI.InnerText(browser.Single("span[data-ui='selectedColors']")' s => s.Contains("orange") && s.Contains("red"));                    checkBox = checkBoxes.ElementAt(2).Single("input");                  checkBox.Click();                  AssertUI.IsChecked(checkBox);                  AssertUI.InnerText(browser.Single("span[data-ui='selectedColors']")' s => s.Contains("orange") && s.Contains("red") && s.Contains("black"));                    checkBoxes = browser.FindElements("label[data-ui='checkBox']");                    browser.First("[data-ui='set-server-values']").Click();                  AssertUI.IsChecked(checkBoxes.ElementAt(0).Single("input"));                  AssertUI.IsChecked(checkBoxes.ElementAt(2).Single("input"));                  AssertUI.InnerText(browser.Single("span[data-ui='selectedColors']")' s => s.Contains("orange") && s.Contains("black"));              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_InRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_InRepeater);                    var repeater = browser.Single("div[data-ui='repeater']");                  var checkBoxes = browser.FindElements("label[data-ui='checkBox']");                    var checkBox = checkBoxes.ElementAt(0).Single("input");                  checkBox.Click();                  AssertUI.IsChecked(checkBox);                  AssertUI.InnerText(browser.Single("span[data-ui='selectedColors']")' s => s.Contains("orange"));                    checkBox = checkBoxes.ElementAt(1).Single("input");                  checkBox.Click();                  AssertUI.IsChecked(checkBox);                  AssertUI.InnerText(browser.Single("span[data-ui='selectedColors']")' s => s.Contains("orange") && s.Contains("red"));                    checkBox = checkBoxes.ElementAt(2).Single("input");                  checkBox.Click();                  AssertUI.IsChecked(checkBox);                  AssertUI.InnerText(browser.Single("span[data-ui='selectedColors']")' s => s.Contains("orange") && s.Contains("red") && s.Contains("black"));                    checkBoxes = browser.FindElements("label[data-ui='checkBox']");                    browser.First("[data-ui='set-server-values']").Click();                  AssertUI.IsChecked(checkBoxes.ElementAt(0).Single("input"));                  AssertUI.IsChecked(checkBoxes.ElementAt(2).Single("input"));                  AssertUI.InnerText(browser.Single("span[data-ui='selectedColors']")' s => s.Contains("orange") && s.Contains("black"));              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_CheckedItemsEmpty,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_CheckedItemsRepeater);                  browser.WaitUntilDotvvmInited();                    var checkBoxes = browser.FindElements("checkbox"' SelectByDataUi);                  Assert.Equal(0' checkBoxes.Count);                  void UpdateData() => browser.WaitFor(() => {                      var button = browser.First("btn-update"' SelectByDataUi).Click();                      var repeater = browser.Single("repeater"' SelectByDataUi);                      checkBoxes = repeater.FindElements("input"' SelectBy.TagName);                      Assert.Equal(2' checkBoxes.Count);                      AssertUI.IsChecked(checkBoxes[0]);                      AssertUI.IsNotChecked(checkBoxes[1]);                  }' 1000);                  UpdateData();                  checkBoxes[0].Click();                  checkBoxes[1].Click();                  UpdateData();              });
Magic Number,DotVVM.Samples.Tests.Control,CheckBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\CheckBoxTests.cs,Control_CheckBox_CheckedItemsEmpty,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_CheckBox_CheckedItemsRepeater);                  browser.WaitUntilDotvvmInited();                    var checkBoxes = browser.FindElements("checkbox"' SelectByDataUi);                  Assert.Equal(0' checkBoxes.Count);                  void UpdateData() => browser.WaitFor(() => {                      var button = browser.First("btn-update"' SelectByDataUi).Click();                      var repeater = browser.Single("repeater"' SelectByDataUi);                      checkBoxes = repeater.FindElements("input"' SelectBy.TagName);                      Assert.Equal(2' checkBoxes.Count);                      AssertUI.IsChecked(checkBoxes[0]);                      AssertUI.IsNotChecked(checkBoxes[1]);                  }' 1000);                  UpdateData();                  checkBoxes[0].Click();                  checkBoxes[1].Click();                  UpdateData();              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_Default,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("hardcoded-combobox"' SelectByDataUi);                  var selectedValue = browser.First("selected-value"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "1")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "2")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "3")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "4")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_Default,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("hardcoded-combobox"' SelectByDataUi);                  var selectedValue = browser.First("selected-value"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "1")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "2")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "3")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "4")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_Default,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("hardcoded-combobox"' SelectByDataUi);                  var selectedValue = browser.First("selected-value"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "1")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "2")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "3")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "4")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_Default,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("hardcoded-combobox"' SelectByDataUi);                  var selectedValue = browser.First("selected-value"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "1")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "2")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "3")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "4")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_Default,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("hardcoded-combobox"' SelectByDataUi);                  var selectedValue = browser.First("selected-value"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "1")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "2")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "3")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "4")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_Default,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("hardcoded-combobox"' SelectByDataUi);                  var selectedValue = browser.First("selected-value"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "1")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "2")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "3")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "4")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_Default,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("hardcoded-combobox"' SelectByDataUi);                  var selectedValue = browser.First("selected-value"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "1")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "2")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "3")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "4")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_Default,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("hardcoded-combobox"' SelectByDataUi);                  var selectedValue = browser.First("selected-value"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "1")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "2")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "3")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "4")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_Default,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("hardcoded-combobox"' SelectByDataUi);                  var selectedValue = browser.First("selected-value"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "1")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "2")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "3")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "4")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_Default,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("hardcoded-combobox"' SelectByDataUi);                  var selectedValue = browser.First("selected-value"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "1")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "2")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "3")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValue' "4")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ComboBoxBinded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("binded-combobox"' SelectByDataUi);                  var selectedText = browser.First("selected-text"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "A")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AA")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAA")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAAA")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ComboBoxBinded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("binded-combobox"' SelectByDataUi);                  var selectedText = browser.First("selected-text"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "A")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AA")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAA")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAAA")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ComboBoxBinded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("binded-combobox"' SelectByDataUi);                  var selectedText = browser.First("selected-text"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "A")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AA")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAA")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAAA")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ComboBoxBinded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("binded-combobox"' SelectByDataUi);                  var selectedText = browser.First("selected-text"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "A")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AA")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAA")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAAA")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ComboBoxBinded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("binded-combobox"' SelectByDataUi);                  var selectedText = browser.First("selected-text"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "A")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AA")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAA")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAAA")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ComboBoxBinded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("binded-combobox"' SelectByDataUi);                  var selectedText = browser.First("selected-text"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "A")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AA")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAA")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAAA")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ComboBoxBinded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("binded-combobox"' SelectByDataUi);                  var selectedText = browser.First("selected-text"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "A")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AA")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAA")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAAA")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ComboBoxBinded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("binded-combobox"' SelectByDataUi);                  var selectedText = browser.First("selected-text"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "A")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AA")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAA")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAAA")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ComboBoxBinded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("binded-combobox"' SelectByDataUi);                  var selectedText = browser.First("selected-text"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "A")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AA")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAA")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAAA")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ComboBoxBinded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Default);                    var comboBox = browser.First("binded-combobox"' SelectByDataUi);                  var selectedText = browser.First("selected-text"' SelectByDataUi);                    AssertUI.IsDisplayed(comboBox.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "A")' 2000' 30);                    // select second option from combobox                  comboBox.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AA")' 1000' 30);                    // select third option from combobox                  comboBox.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAA")' 1000' 30);                    // select fourth option from combobox                  comboBox.Select(3);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedText' "AAAA")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_DelaySync,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_DelaySync);                    // check that the second item is selected in both ComboBoxes on the page start                  AssertUI.IsSelected(browser.ElementAt("select"' 0).ElementAt("option"' 1));                  AssertUI.IsSelected(browser.ElementAt("select"' 1).ElementAt("option"' 1));                    // change the DataSource collection on the server and verify that the second item is selected in both ComboBoxes                  browser.First("input").Click();                    browser.WaitFor(() => {                      AssertUI.IsSelected(browser.ElementAt("select"' 0).ElementAt("option"' 1));                      AssertUI.IsSelected(browser.ElementAt("select"' 1).ElementAt("option"' 1));                  }' 800' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_DelaySync,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_DelaySync);                    // check that the second item is selected in both ComboBoxes on the page start                  AssertUI.IsSelected(browser.ElementAt("select"' 0).ElementAt("option"' 1));                  AssertUI.IsSelected(browser.ElementAt("select"' 1).ElementAt("option"' 1));                    // change the DataSource collection on the server and verify that the second item is selected in both ComboBoxes                  browser.First("input").Click();                    browser.WaitFor(() => {                      AssertUI.IsSelected(browser.ElementAt("select"' 0).ElementAt("option"' 1));                      AssertUI.IsSelected(browser.ElementAt("select"' 1).ElementAt("option"' 1));                  }' 800' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_DelaySync2,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_DelaySync2);                  browser.First("input[type=button]").Click();                    browser.WaitFor(() => {                          // check the comboboxes                      AssertUI.IsSelected(browser.ElementAt("select"' 0).ElementAt("option"' 0));                      AssertUI.IsSelected(browser.ElementAt("select"' 1).ElementAt("option"' 1));                        // check the labels                      AssertUI.InnerTextEquals(browser.ElementAt(".result"' 0)' "1");                      AssertUI.InnerTextEquals(browser.ElementAt(".result"' 1)' "2");                  }' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_DelaySync2,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_DelaySync2);                  browser.First("input[type=button]").Click();                    browser.WaitFor(() => {                          // check the comboboxes                      AssertUI.IsSelected(browser.ElementAt("select"' 0).ElementAt("option"' 0));                      AssertUI.IsSelected(browser.ElementAt("select"' 1).ElementAt("option"' 1));                        // check the labels                      AssertUI.InnerTextEquals(browser.ElementAt(".result"' 0)' "1");                      AssertUI.InnerTextEquals(browser.ElementAt(".result"' 1)' "2");                  }' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_Nullable,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Nullable);                  browser.WaitUntilDotvvmInited();                    // null value                  var span = browser.Single("selected-value"' SelectByDataUi);                  AssertUI.InnerTextEquals(span' "");                    // check combobox works                  var combobox = browser.Single("combobox"' SelectByDataUi);                  combobox.Select(0);                  browser.WaitFor(() => AssertUI.InnerTextEquals(span' "First")' 1000);                    // test buttons                  browser.ElementAt("input[type=button]"' 0).Click();                  AssertUI.InnerTextEquals(span' "First");                  AssertUI.IsSelected(combobox.FindElements("option")[0]);                    browser.ElementAt("input[type=button]"' 1).Click();                  AssertUI.InnerTextEquals(span' "");                  AssertUI.IsNotSelected(combobox.FindElements("option")[0]);                  AssertUI.IsNotSelected(combobox.FindElements("option")[1]);                  AssertUI.IsNotSelected(combobox.FindElements("option")[2]);                                    browser.ElementAt("input[type=button]"' 2).Click();                  AssertUI.InnerTextEquals(span' "First");                  AssertUI.IsSelected(combobox.FindElements("option")[0]);                    browser.ElementAt("input[type=button]"' 3).Click();                  AssertUI.InnerTextEquals(span' "Second");                  AssertUI.IsSelected(combobox.FindElements("option")[1]);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_Nullable,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Nullable);                  browser.WaitUntilDotvvmInited();                    // null value                  var span = browser.Single("selected-value"' SelectByDataUi);                  AssertUI.InnerTextEquals(span' "");                    // check combobox works                  var combobox = browser.Single("combobox"' SelectByDataUi);                  combobox.Select(0);                  browser.WaitFor(() => AssertUI.InnerTextEquals(span' "First")' 1000);                    // test buttons                  browser.ElementAt("input[type=button]"' 0).Click();                  AssertUI.InnerTextEquals(span' "First");                  AssertUI.IsSelected(combobox.FindElements("option")[0]);                    browser.ElementAt("input[type=button]"' 1).Click();                  AssertUI.InnerTextEquals(span' "");                  AssertUI.IsNotSelected(combobox.FindElements("option")[0]);                  AssertUI.IsNotSelected(combobox.FindElements("option")[1]);                  AssertUI.IsNotSelected(combobox.FindElements("option")[2]);                                    browser.ElementAt("input[type=button]"' 2).Click();                  AssertUI.InnerTextEquals(span' "First");                  AssertUI.IsSelected(combobox.FindElements("option")[0]);                    browser.ElementAt("input[type=button]"' 3).Click();                  AssertUI.InnerTextEquals(span' "Second");                  AssertUI.IsSelected(combobox.FindElements("option")[1]);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_Nullable,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Nullable);                  browser.WaitUntilDotvvmInited();                    // null value                  var span = browser.Single("selected-value"' SelectByDataUi);                  AssertUI.InnerTextEquals(span' "");                    // check combobox works                  var combobox = browser.Single("combobox"' SelectByDataUi);                  combobox.Select(0);                  browser.WaitFor(() => AssertUI.InnerTextEquals(span' "First")' 1000);                    // test buttons                  browser.ElementAt("input[type=button]"' 0).Click();                  AssertUI.InnerTextEquals(span' "First");                  AssertUI.IsSelected(combobox.FindElements("option")[0]);                    browser.ElementAt("input[type=button]"' 1).Click();                  AssertUI.InnerTextEquals(span' "");                  AssertUI.IsNotSelected(combobox.FindElements("option")[0]);                  AssertUI.IsNotSelected(combobox.FindElements("option")[1]);                  AssertUI.IsNotSelected(combobox.FindElements("option")[2]);                                    browser.ElementAt("input[type=button]"' 2).Click();                  AssertUI.InnerTextEquals(span' "First");                  AssertUI.IsSelected(combobox.FindElements("option")[0]);                    browser.ElementAt("input[type=button]"' 3).Click();                  AssertUI.InnerTextEquals(span' "Second");                  AssertUI.IsSelected(combobox.FindElements("option")[1]);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_Nullable,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_Nullable);                  browser.WaitUntilDotvvmInited();                    // null value                  var span = browser.Single("selected-value"' SelectByDataUi);                  AssertUI.InnerTextEquals(span' "");                    // check combobox works                  var combobox = browser.Single("combobox"' SelectByDataUi);                  combobox.Select(0);                  browser.WaitFor(() => AssertUI.InnerTextEquals(span' "First")' 1000);                    // test buttons                  browser.ElementAt("input[type=button]"' 0).Click();                  AssertUI.InnerTextEquals(span' "First");                  AssertUI.IsSelected(combobox.FindElements("option")[0]);                    browser.ElementAt("input[type=button]"' 1).Click();                  AssertUI.InnerTextEquals(span' "");                  AssertUI.IsNotSelected(combobox.FindElements("option")[0]);                  AssertUI.IsNotSelected(combobox.FindElements("option")[1]);                  AssertUI.IsNotSelected(combobox.FindElements("option")[2]);                                    browser.ElementAt("input[type=button]"' 2).Click();                  AssertUI.InnerTextEquals(span' "First");                  AssertUI.IsSelected(combobox.FindElements("option")[0]);                    browser.ElementAt("input[type=button]"' 3).Click();                  AssertUI.InnerTextEquals(span' "Second");                  AssertUI.IsSelected(combobox.FindElements("option")[1]);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ItemBinding_ItemValueBinding_Complex_Error,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_ItemBinding_ItemValueBinding_Complex_Error);                    browser.WaitFor(()=> {                      AssertUI.InnerText(browser.First(".exceptionMessage")' s => s.Contains("Return type") && s.Contains("ItemValueBinding") && s.Contains("primitive type"));                      AssertUI.InnerText(browser.First("p.summary")' s => s.Contains("DotVVM.Framework.Compilation.DotvvmCompilationException"));                      AssertUI.InnerText(browser.First(".errorUnderline")' s => s.Contains("ItemValueBinding=") && s.Contains("{value:"));                  }'1000);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ItemBinding_ItemValueBinding_Enum,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_ItemBinding_ItemValueBinding_Enum);                    var value = browser.Single("value"' SelectByDataUi);                  var dropDown = browser.Single("complex-crash"' SelectByDataUi);                  var dropDownButtons = dropDown.FindElements("option"' OpenQA.Selenium.By.TagName);                    AssertUI.InnerTextEquals(value'"EValue1");                    for (int i = 0; i < dropDownButtons.Count; i++)                  {                      dropDown.Click();                      dropDownButtons.ElementAt(i).Click();                        browser.WaitFor(()=> {                          AssertUI.InnerTextEquals(value'"EValue"+((i%3)+1).ToString());                       }'2000);                  }              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ItemBinding_ItemValueBinding_Enum,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_ItemBinding_ItemValueBinding_Enum);                    var value = browser.Single("value"' SelectByDataUi);                  var dropDown = browser.Single("complex-crash"' SelectByDataUi);                  var dropDownButtons = dropDown.FindElements("option"' OpenQA.Selenium.By.TagName);                    AssertUI.InnerTextEquals(value'"EValue1");                    for (int i = 0; i < dropDownButtons.Count; i++)                  {                      dropDown.Click();                      dropDownButtons.ElementAt(i).Click();                        browser.WaitFor(()=> {                          AssertUI.InnerTextEquals(value'"EValue"+((i%3)+1).ToString());                       }'2000);                  }              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ItemBinding_ItemValueBinding_Number,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_ItemBinding_ItemValueBinding_Number);                                   var value = browser.Single("value"' SelectByDataUi);                  var dropDown = browser.Single("complex-crash"' SelectByDataUi);                  var dropDownButtons = dropDown.FindElements("option"' OpenQA.Selenium.By.TagName);                    AssertUI.TextEmpty(value);                    for (int i = 0; i < dropDownButtons.Count; i++)                  {                      dropDown.Click();                      dropDownButtons.ElementAt(i).Click();                        browser.WaitFor(() => {                          AssertUI.InnerTextEquals(value' (i+1).ToString());                      }' 2000);                  }              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ItemBinding_ItemValueBinding_SelectedValue_Complex_Error,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_ItemBinding_ItemValueBinding_SelectedValue_ComplexToInt_Error);                    browser.WaitFor(() => {                      AssertUI.InnerText(browser.First(".exceptionMessage")' s => s.Contains("DotVVM.Samples.Common.ViewModels.ControlSamples.ComboBox.ComboxItemBindingViewModel+ComplexType") && s.Contains("not assignable") && s.Contains("System.Int32"));                      AssertUI.InnerText(browser.First("p.summary")' s => s.Contains("DotVVM.Framework.Compilation.DotvvmCompilationException"));                      AssertUI.InnerText(browser.First(".errorUnderline")' s => s.Contains("{value: SelectedInt}"));                  }' 1000);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ItemBinding_ItemValueBinding_SelectedValue_StringToInt_Error,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_ItemBinding_ItemValueBinding_SelectedValue_StringToInt_Error);                    browser.WaitFor(() => {                      AssertUI.InnerText(browser.First(".exceptionMessage")' s => s.Contains("System.String") && s.Contains("not assignable") && s.Contains("System.Int32"));                      AssertUI.InnerText(browser.First("p.summary")' s => s.Contains("DotVVM.Framework.Compilation.DotvvmCompilationException"));                      AssertUI.InnerText(browser.First(".errorUnderline")' s => s.Contains("{value: SelectedInt}"));                  }' 1000);              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_ItemBinding_ItemValueBinding_String,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_ItemBinding_ItemValueBinding_String);                    var value = browser.Single("value"' SelectByDataUi);                  var dropDown = browser.Single("complex-crash"' SelectByDataUi);                  var dropDownButtons = dropDown.FindElements("option"' OpenQA.Selenium.By.TagName);                    AssertUI.TextEmpty(value);                    for (int i = 0; i < dropDownButtons.Count; i++)                  {                      dropDown.Click();                      dropDownButtons.ElementAt(i).Click();                        browser.WaitFor(() => {                          AssertUI.InnerTextEquals(value' dropDownButtons.ElementAt(i).GetInnerText());                      }' 2000);                  }              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_BindingCTValidation_StringToEnum,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_BindingCTValidation_StringToEnum);                    var dropDown = browser.Single("string-to-enum"' SelectByDataUi);                  var dropDownButtons = dropDown.FindElements("option"' SelectBy.TagName);                  var setSecondaryFieldButton = browser.Single("set-secondary-field"' SelectByDataUi);                  var enum1 = browser.Single("enum"' SelectByDataUi);                  var enum2 = browser.Single("enum2"' SelectByDataUi);                    dropDownButtons.ElementAt(1).Click();                  setSecondaryFieldButton.Click();                    for (int i = 0; i < dropDownButtons.Count; i++)                  {                      dropDownButtons.ElementAt(i).Click();                        browser.WaitFor(()=> {                          AssertUI.TextEquals(enum1' dropDownButtons.ElementAt(i).GetInnerText());                          AssertUI.TextNotEquals(enum2' dropDownButtons.ElementAt(i).GetInnerText());                      }'2000);                                            setSecondaryFieldButton.Click();                      browser.WaitFor(()=> {AssertUI.TextEquals(enum2' dropDownButtons.ElementAt(i).GetInnerText()); }'2000);                  }              });
Magic Number,DotVVM.Samples.Tests.Control,ComboBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ComboBoxTests.cs,Control_ComboBox_BindingCTValidation_StringToEnum,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ComboBox_BindingCTValidation_StringToEnum);                    var dropDown = browser.Single("string-to-enum"' SelectByDataUi);                  var dropDownButtons = dropDown.FindElements("option"' SelectBy.TagName);                  var setSecondaryFieldButton = browser.Single("set-secondary-field"' SelectByDataUi);                  var enum1 = browser.Single("enum"' SelectByDataUi);                  var enum2 = browser.Single("enum2"' SelectByDataUi);                    dropDownButtons.ElementAt(1).Click();                  setSecondaryFieldButton.Click();                    for (int i = 0; i < dropDownButtons.Count; i++)                  {                      dropDownButtons.ElementAt(i).Click();                        browser.WaitFor(()=> {                          AssertUI.TextEquals(enum1' dropDownButtons.ElementAt(i).GetInnerText());                          AssertUI.TextNotEquals(enum2' dropDownButtons.ElementAt(i).GetInnerText());                      }'2000);                                            setSecondaryFieldButton.Click();                      browser.WaitFor(()=> {AssertUI.TextEquals(enum2' dropDownButtons.ElementAt(i).GetInnerText()); }'2000);                  }              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_ShowHideControl,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // verify the second pager is hidden                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsNotDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(2);                  // verify the second pager appears                  browser.Click("input[type=button]");                    // verify the second pager appears                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(3);                    // switch to another page                  browser.First(".pagination").ElementAt("li a"' 4).Click();                    // verify the second pager is still visible                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(3);              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_ShowHideControl,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // verify the second pager is hidden                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsNotDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(2);                  // verify the second pager appears                  browser.Click("input[type=button]");                    // verify the second pager appears                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(3);                    // switch to another page                  browser.First(".pagination").ElementAt("li a"' 4).Click();                    // verify the second pager is still visible                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(3);              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_ShowHideControl,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // verify the second pager is hidden                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsNotDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(2);                  // verify the second pager appears                  browser.Click("input[type=button]");                    // verify the second pager appears                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(3);                    // switch to another page                  browser.First(".pagination").ElementAt("li a"' 4).Click();                    // verify the second pager is still visible                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(3);              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_ShowHideControl,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // verify the second pager is hidden                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsNotDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(2);                  // verify the second pager appears                  browser.Click("input[type=button]");                    // verify the second pager appears                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(3);                    // switch to another page                  browser.First(".pagination").ElementAt("li a"' 4).Click();                    // verify the second pager is still visible                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(3);              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_ActiveCssClass,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // the first li should be visible because it contains text' the second with the link should be hidden                  var pageIndex1 = browser.ElementAt(".pagination"' 0).ElementAt("li"' 2);                  AssertUI.NotContainsElement(pageIndex1' "a");                  AssertUI.HasClass(pageIndex1' "active");                  AssertUI.IsDisplayed(pageIndex1);                    var pageIndex2 = browser.ElementAt(".pagination"' 0).ElementAt("li"' 3);                  AssertUI.ContainsElement(pageIndex2' "a");                  AssertUI.HasClass(pageIndex2' "active");                  AssertUI.IsNotDisplayed(pageIndex2);                    // the first li should note be there because only hyperlinks are rendered                  var pageIndex3 = browser.ElementAt(".pagination"' 2).ElementAt("li"' 2);                  AssertUI.ContainsElement(pageIndex3' "a");                  AssertUI.HasClass(pageIndex3' "active");                  AssertUI.IsDisplayed(pageIndex3);              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_ActiveCssClass,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // the first li should be visible because it contains text' the second with the link should be hidden                  var pageIndex1 = browser.ElementAt(".pagination"' 0).ElementAt("li"' 2);                  AssertUI.NotContainsElement(pageIndex1' "a");                  AssertUI.HasClass(pageIndex1' "active");                  AssertUI.IsDisplayed(pageIndex1);                    var pageIndex2 = browser.ElementAt(".pagination"' 0).ElementAt("li"' 3);                  AssertUI.ContainsElement(pageIndex2' "a");                  AssertUI.HasClass(pageIndex2' "active");                  AssertUI.IsNotDisplayed(pageIndex2);                    // the first li should note be there because only hyperlinks are rendered                  var pageIndex3 = browser.ElementAt(".pagination"' 2).ElementAt("li"' 2);                  AssertUI.ContainsElement(pageIndex3' "a");                  AssertUI.HasClass(pageIndex3' "active");                  AssertUI.IsDisplayed(pageIndex3);              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_ActiveCssClass,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // the first li should be visible because it contains text' the second with the link should be hidden                  var pageIndex1 = browser.ElementAt(".pagination"' 0).ElementAt("li"' 2);                  AssertUI.NotContainsElement(pageIndex1' "a");                  AssertUI.HasClass(pageIndex1' "active");                  AssertUI.IsDisplayed(pageIndex1);                    var pageIndex2 = browser.ElementAt(".pagination"' 0).ElementAt("li"' 3);                  AssertUI.ContainsElement(pageIndex2' "a");                  AssertUI.HasClass(pageIndex2' "active");                  AssertUI.IsNotDisplayed(pageIndex2);                    // the first li should note be there because only hyperlinks are rendered                  var pageIndex3 = browser.ElementAt(".pagination"' 2).ElementAt("li"' 2);                  AssertUI.ContainsElement(pageIndex3' "a");                  AssertUI.HasClass(pageIndex3' "active");                  AssertUI.IsDisplayed(pageIndex3);              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_ActiveCssClass,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // the first li should be visible because it contains text' the second with the link should be hidden                  var pageIndex1 = browser.ElementAt(".pagination"' 0).ElementAt("li"' 2);                  AssertUI.NotContainsElement(pageIndex1' "a");                  AssertUI.HasClass(pageIndex1' "active");                  AssertUI.IsDisplayed(pageIndex1);                    var pageIndex2 = browser.ElementAt(".pagination"' 0).ElementAt("li"' 3);                  AssertUI.ContainsElement(pageIndex2' "a");                  AssertUI.HasClass(pageIndex2' "active");                  AssertUI.IsNotDisplayed(pageIndex2);                    // the first li should note be there because only hyperlinks are rendered                  var pageIndex3 = browser.ElementAt(".pagination"' 2).ElementAt("li"' 2);                  AssertUI.ContainsElement(pageIndex3' "a");                  AssertUI.HasClass(pageIndex3' "active");                  AssertUI.IsDisplayed(pageIndex3);              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledAttribute,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // the first ul should not be disabled                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // the forth ul should be disabled                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 4)' "disabled");                    // verify element is disabled after click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // verify element is not disabled after another click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledAttribute,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // the first ul should not be disabled                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // the forth ul should be disabled                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 4)' "disabled");                    // verify element is disabled after click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // verify element is not disabled after another click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledAttribute,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // the first ul should not be disabled                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // the forth ul should be disabled                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 4)' "disabled");                    // verify element is disabled after click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // verify element is not disabled after another click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledAttribute,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // the first ul should not be disabled                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // the forth ul should be disabled                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 4)' "disabled");                    // verify element is disabled after click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // verify element is not disabled after another click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledAttribute,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // the first ul should not be disabled                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // the forth ul should be disabled                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 4)' "disabled");                    // verify element is disabled after click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // verify element is not disabled after another click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledAttribute,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // the first ul should not be disabled                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // the forth ul should be disabled                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 4)' "disabled");                    // verify element is disabled after click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // verify element is not disabled after another click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledAttribute,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // the first ul should not be disabled                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // the forth ul should be disabled                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 4)' "disabled");                    // verify element is disabled after click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // verify element is not disabled after another click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledAttribute,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // the first ul should not be disabled                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // the forth ul should be disabled                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 4)' "disabled");                    // verify element is disabled after click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // verify element is not disabled after another click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledAttribute,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // the first ul should not be disabled                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // the forth ul should be disabled                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 4)' "disabled");                    // verify element is disabled after click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // verify element is not disabled after another click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledAttribute,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // the first ul should not be disabled                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // the forth ul should be disabled                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 4)' "disabled");                    // verify element is disabled after click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // verify element is not disabled after another click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledAttribute,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // the first ul should not be disabled                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // the forth ul should be disabled                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 4)' "disabled");                    // verify element is disabled after click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // verify element is not disabled after another click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledAttribute,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // the first ul should not be disabled                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // the forth ul should be disabled                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager4").ElementAt("li a"' 4)' "disabled");                    // verify element is disabled after click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");                    // verify element is not disabled after another click                  browser.Single("#enableCheckbox input[type=checkbox]").Click();                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 0)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 1)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 2)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 3)' "disabled");                  AssertUI.HasNotAttribute(browser.Single("#pager1").ElementAt("li a"' 4)' "disabled");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledControlClick,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // populate with data                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    // disable pager1 by binding                  var enableCheckbox = browser.Single("#enableCheckbox input[type=checkbox]").ScrollTo().Click();                    // try to switch to next page                  browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 2).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                    // try to switch to last page                  browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 1).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                    for (int i = browser.Single("#pager1").FindElements("li a").Count - 3; i > 2; i--)                  {                      browser.Single("#pager1").ElementAt("li a"' i).ScrollTo().Click();                      AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                  }                    // enable pager                  browser.Single("#enableCheckbox input[type=checkbox]").ScrollTo().Click();                  // switch to last page                  browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 1).ScrollTo().Click();                  // disable pager                  browser.Single("#enableCheckbox input[type=checkbox]").ScrollTo().Click();                    // try to switch to first page                  browser.Single("#pager1").ElementAt("li a"' 2).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");                    // try to switch to previous page                  browser.Single("#pager1").ElementAt("li a"' 1).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");                    // try to switch to first                  browser.Single("#pager1").ElementAt("li a"' 0).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledControlClick,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // populate with data                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    // disable pager1 by binding                  var enableCheckbox = browser.Single("#enableCheckbox input[type=checkbox]").ScrollTo().Click();                    // try to switch to next page                  browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 2).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                    // try to switch to last page                  browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 1).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                    for (int i = browser.Single("#pager1").FindElements("li a").Count - 3; i > 2; i--)                  {                      browser.Single("#pager1").ElementAt("li a"' i).ScrollTo().Click();                      AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                  }                    // enable pager                  browser.Single("#enableCheckbox input[type=checkbox]").ScrollTo().Click();                  // switch to last page                  browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 1).ScrollTo().Click();                  // disable pager                  browser.Single("#enableCheckbox input[type=checkbox]").ScrollTo().Click();                    // try to switch to first page                  browser.Single("#pager1").ElementAt("li a"' 2).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");                    // try to switch to previous page                  browser.Single("#pager1").ElementAt("li a"' 1).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");                    // try to switch to first                  browser.Single("#pager1").ElementAt("li a"' 0).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledControlClick,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // populate with data                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    // disable pager1 by binding                  var enableCheckbox = browser.Single("#enableCheckbox input[type=checkbox]").ScrollTo().Click();                    // try to switch to next page                  browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 2).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                    // try to switch to last page                  browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 1).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                    for (int i = browser.Single("#pager1").FindElements("li a").Count - 3; i > 2; i--)                  {                      browser.Single("#pager1").ElementAt("li a"' i).ScrollTo().Click();                      AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                  }                    // enable pager                  browser.Single("#enableCheckbox input[type=checkbox]").ScrollTo().Click();                  // switch to last page                  browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 1).ScrollTo().Click();                  // disable pager                  browser.Single("#enableCheckbox input[type=checkbox]").ScrollTo().Click();                    // try to switch to first page                  browser.Single("#pager1").ElementAt("li a"' 2).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");                    // try to switch to previous page                  browser.Single("#pager1").ElementAt("li a"' 1).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");                    // try to switch to first                  browser.Single("#pager1").ElementAt("li a"' 0).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledControlClick,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // populate with data                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    // disable pager1 by binding                  var enableCheckbox = browser.Single("#enableCheckbox input[type=checkbox]").ScrollTo().Click();                    // try to switch to next page                  browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 2).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                    // try to switch to last page                  browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 1).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                    for (int i = browser.Single("#pager1").FindElements("li a").Count - 3; i > 2; i--)                  {                      browser.Single("#pager1").ElementAt("li a"' i).ScrollTo().Click();                      AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                  }                    // enable pager                  browser.Single("#enableCheckbox input[type=checkbox]").ScrollTo().Click();                  // switch to last page                  browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 1).ScrollTo().Click();                  // disable pager                  browser.Single("#enableCheckbox input[type=checkbox]").ScrollTo().Click();                    // try to switch to first page                  browser.Single("#pager1").ElementAt("li a"' 2).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");                    // try to switch to previous page                  browser.Single("#pager1").ElementAt("li a"' 1).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");                    // try to switch to first                  browser.Single("#pager1").ElementAt("li a"' 0).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledByBindingControlClick,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // populate with data                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    // pager 4 should be disabled by value                  // try to switch to next page                  browser.Single("#pager4").ElementAt("li a"' browser.Single("#pager4").FindElements("li a").Count - 2).ScrollTo().Click().Wait();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                    // try to switch to last page                  browser.Single("#pager4").ElementAt("li a"' browser.Single("#pager4").FindElements("li a").Count - 1).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                    for (int i = browser.Single("#pager4").FindElements("li a").Count - 3; i > 2; i--)                  {                      // try to switch to pages                      browser.Single("#pager4").ElementAt("li a"' i).ScrollTo().Click();                      AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                  }                  // switch to last page                  browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 1).ScrollTo().Click();                    // try to switch to first page                  browser.Single("#pager4").ElementAt("li a"' 2).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");                    // try to swwitch to previous page                  browser.Single("#pager4").ElementAt("li a"' 1).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");                    // try to swwitch to first                  browser.Single("#pager4").ElementAt("li a"' 0).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledByBindingControlClick,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // populate with data                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    // pager 4 should be disabled by value                  // try to switch to next page                  browser.Single("#pager4").ElementAt("li a"' browser.Single("#pager4").FindElements("li a").Count - 2).ScrollTo().Click().Wait();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                    // try to switch to last page                  browser.Single("#pager4").ElementAt("li a"' browser.Single("#pager4").FindElements("li a").Count - 1).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                    for (int i = browser.Single("#pager4").FindElements("li a").Count - 3; i > 2; i--)                  {                      // try to switch to pages                      browser.Single("#pager4").ElementAt("li a"' i).ScrollTo().Click();                      AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                  }                  // switch to last page                  browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 1).ScrollTo().Click();                    // try to switch to first page                  browser.Single("#pager4").ElementAt("li a"' 2).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");                    // try to swwitch to previous page                  browser.Single("#pager4").ElementAt("li a"' 1).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");                    // try to swwitch to first                  browser.Single("#pager4").ElementAt("li a"' 0).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledByBindingControlClick,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // populate with data                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    // pager 4 should be disabled by value                  // try to switch to next page                  browser.Single("#pager4").ElementAt("li a"' browser.Single("#pager4").FindElements("li a").Count - 2).ScrollTo().Click().Wait();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                    // try to switch to last page                  browser.Single("#pager4").ElementAt("li a"' browser.Single("#pager4").FindElements("li a").Count - 1).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                    for (int i = browser.Single("#pager4").FindElements("li a").Count - 3; i > 2; i--)                  {                      // try to switch to pages                      browser.Single("#pager4").ElementAt("li a"' i).ScrollTo().Click();                      AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                  }                  // switch to last page                  browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 1).ScrollTo().Click();                    // try to switch to first page                  browser.Single("#pager4").ElementAt("li a"' 2).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");                    // try to swwitch to previous page                  browser.Single("#pager4").ElementAt("li a"' 1).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");                    // try to swwitch to first                  browser.Single("#pager4").ElementAt("li a"' 0).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_DataPager_DisabledByBindingControlClick,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // populate with data                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    // pager 4 should be disabled by value                  // try to switch to next page                  browser.Single("#pager4").ElementAt("li a"' browser.Single("#pager4").FindElements("li a").Count - 2).ScrollTo().Click().Wait();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                    // try to switch to last page                  browser.Single("#pager4").ElementAt("li a"' browser.Single("#pager4").FindElements("li a").Count - 1).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                    for (int i = browser.Single("#pager4").FindElements("li a").Count - 3; i > 2; i--)                  {                      // try to switch to pages                      browser.Single("#pager4").ElementAt("li a"' i).ScrollTo().Click();                      AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 0");                  }                  // switch to last page                  browser.Single("#pager1").ElementAt("li a"' browser.Single("#pager1").FindElements("li a").Count - 1).ScrollTo().Click();                    // try to switch to first page                  browser.Single("#pager4").ElementAt("li a"' 2).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");                    // try to swwitch to previous page                  browser.Single("#pager4").ElementAt("li a"' 1).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");                    // try to swwitch to first                  browser.Single("#pager4").ElementAt("li a"' 0).ScrollTo().Click();                  AssertUI.InnerTextEquals(browser.First("ul").First("li")' "Item 48");              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_ShowHideControl,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // verify the second pager is hidden                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsNotDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(2);                  // verify the second pager appears                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    // verify the second pager appears                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(3);                    // switch to another page                  browser.First(".pagination").ElementAt("li a"' 4).Click();                    // verify the second pager is still visible                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(3);              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_ShowHideControl,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // verify the second pager is hidden                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsNotDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(2);                  // verify the second pager appears                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    // verify the second pager appears                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(3);                    // switch to another page                  browser.First(".pagination").ElementAt("li a"' 4).Click();                    // verify the second pager is still visible                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(3);              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_ShowHideControl,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // verify the second pager is hidden                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsNotDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(2);                  // verify the second pager appears                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    // verify the second pager appears                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(3);                    // switch to another page                  browser.First(".pagination").ElementAt("li a"' 4).Click();                    // verify the second pager is still visible                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(3);              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_ShowHideControl,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    // verify the second pager is hidden                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsNotDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(2);                  // verify the second pager appears                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    // verify the second pager appears                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(3);                    // switch to another page                  browser.First(".pagination").ElementAt("li a"' 4).Click();                    // verify the second pager is still visible                  AssertUI.IsDisplayed(browser.First(".pagination"));                  AssertUI.IsDisplayed(browser.ElementAt(".pagination"' 1));                  browser.First("ul").FindElements("li").ThrowIfDifferentCountThan(3);              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_NearPageIndexes,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    void CheckNearPageIndexes(IEnumerable<int> indexes)                  {                      var elements = browser.First("#pager1")                          .FindElements("li:not([style*='none'])");                        var nearPageIndexesCount = indexes.Count();                      // Including first page' previous page' next page' last page links                      elements.ThrowIfDifferentCountThan(nearPageIndexesCount + 4);                        foreach (var value in indexes.Zip(elements.Skip(2)' (i' e) => new { Index = i' Element = e }))                      {                          // Skip first and previous links                          AssertUI.InnerTextEquals(value.Element.Single("span'a")' value.Index.ToString());                      }                  }                    IElementWrapper GetPageIndex(int index)                  {                      foreach (var element in browser.Single("#pager1").FindElements("li a"))                      {                          if (string.Equals(element.GetInnerText()' index.ToString()' System.StringComparison.InvariantCulture))                          {                              return element;                          }                      }                      throw new NoSuchElementException();                  }                    // populate with data                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    CheckNearPageIndexes(Enumerable.Range(1' 6));                    GetPageIndex(6).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(1' 11));                    GetPageIndex(11).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(6' 11));                    GetPageIndex(16).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(11' 7));              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_NearPageIndexes,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    void CheckNearPageIndexes(IEnumerable<int> indexes)                  {                      var elements = browser.First("#pager1")                          .FindElements("li:not([style*='none'])");                        var nearPageIndexesCount = indexes.Count();                      // Including first page' previous page' next page' last page links                      elements.ThrowIfDifferentCountThan(nearPageIndexesCount + 4);                        foreach (var value in indexes.Zip(elements.Skip(2)' (i' e) => new { Index = i' Element = e }))                      {                          // Skip first and previous links                          AssertUI.InnerTextEquals(value.Element.Single("span'a")' value.Index.ToString());                      }                  }                    IElementWrapper GetPageIndex(int index)                  {                      foreach (var element in browser.Single("#pager1").FindElements("li a"))                      {                          if (string.Equals(element.GetInnerText()' index.ToString()' System.StringComparison.InvariantCulture))                          {                              return element;                          }                      }                      throw new NoSuchElementException();                  }                    // populate with data                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    CheckNearPageIndexes(Enumerable.Range(1' 6));                    GetPageIndex(6).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(1' 11));                    GetPageIndex(11).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(6' 11));                    GetPageIndex(16).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(11' 7));              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_NearPageIndexes,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    void CheckNearPageIndexes(IEnumerable<int> indexes)                  {                      var elements = browser.First("#pager1")                          .FindElements("li:not([style*='none'])");                        var nearPageIndexesCount = indexes.Count();                      // Including first page' previous page' next page' last page links                      elements.ThrowIfDifferentCountThan(nearPageIndexesCount + 4);                        foreach (var value in indexes.Zip(elements.Skip(2)' (i' e) => new { Index = i' Element = e }))                      {                          // Skip first and previous links                          AssertUI.InnerTextEquals(value.Element.Single("span'a")' value.Index.ToString());                      }                  }                    IElementWrapper GetPageIndex(int index)                  {                      foreach (var element in browser.Single("#pager1").FindElements("li a"))                      {                          if (string.Equals(element.GetInnerText()' index.ToString()' System.StringComparison.InvariantCulture))                          {                              return element;                          }                      }                      throw new NoSuchElementException();                  }                    // populate with data                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    CheckNearPageIndexes(Enumerable.Range(1' 6));                    GetPageIndex(6).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(1' 11));                    GetPageIndex(11).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(6' 11));                    GetPageIndex(16).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(11' 7));              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_NearPageIndexes,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    void CheckNearPageIndexes(IEnumerable<int> indexes)                  {                      var elements = browser.First("#pager1")                          .FindElements("li:not([style*='none'])");                        var nearPageIndexesCount = indexes.Count();                      // Including first page' previous page' next page' last page links                      elements.ThrowIfDifferentCountThan(nearPageIndexesCount + 4);                        foreach (var value in indexes.Zip(elements.Skip(2)' (i' e) => new { Index = i' Element = e }))                      {                          // Skip first and previous links                          AssertUI.InnerTextEquals(value.Element.Single("span'a")' value.Index.ToString());                      }                  }                    IElementWrapper GetPageIndex(int index)                  {                      foreach (var element in browser.Single("#pager1").FindElements("li a"))                      {                          if (string.Equals(element.GetInnerText()' index.ToString()' System.StringComparison.InvariantCulture))                          {                              return element;                          }                      }                      throw new NoSuchElementException();                  }                    // populate with data                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    CheckNearPageIndexes(Enumerable.Range(1' 6));                    GetPageIndex(6).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(1' 11));                    GetPageIndex(11).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(6' 11));                    GetPageIndex(16).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(11' 7));              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_NearPageIndexes,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    void CheckNearPageIndexes(IEnumerable<int> indexes)                  {                      var elements = browser.First("#pager1")                          .FindElements("li:not([style*='none'])");                        var nearPageIndexesCount = indexes.Count();                      // Including first page' previous page' next page' last page links                      elements.ThrowIfDifferentCountThan(nearPageIndexesCount + 4);                        foreach (var value in indexes.Zip(elements.Skip(2)' (i' e) => new { Index = i' Element = e }))                      {                          // Skip first and previous links                          AssertUI.InnerTextEquals(value.Element.Single("span'a")' value.Index.ToString());                      }                  }                    IElementWrapper GetPageIndex(int index)                  {                      foreach (var element in browser.Single("#pager1").FindElements("li a"))                      {                          if (string.Equals(element.GetInnerText()' index.ToString()' System.StringComparison.InvariantCulture))                          {                              return element;                          }                      }                      throw new NoSuchElementException();                  }                    // populate with data                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    CheckNearPageIndexes(Enumerable.Range(1' 6));                    GetPageIndex(6).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(1' 11));                    GetPageIndex(11).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(6' 11));                    GetPageIndex(16).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(11' 7));              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_NearPageIndexes,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    void CheckNearPageIndexes(IEnumerable<int> indexes)                  {                      var elements = browser.First("#pager1")                          .FindElements("li:not([style*='none'])");                        var nearPageIndexesCount = indexes.Count();                      // Including first page' previous page' next page' last page links                      elements.ThrowIfDifferentCountThan(nearPageIndexesCount + 4);                        foreach (var value in indexes.Zip(elements.Skip(2)' (i' e) => new { Index = i' Element = e }))                      {                          // Skip first and previous links                          AssertUI.InnerTextEquals(value.Element.Single("span'a")' value.Index.ToString());                      }                  }                    IElementWrapper GetPageIndex(int index)                  {                      foreach (var element in browser.Single("#pager1").FindElements("li a"))                      {                          if (string.Equals(element.GetInnerText()' index.ToString()' System.StringComparison.InvariantCulture))                          {                              return element;                          }                      }                      throw new NoSuchElementException();                  }                    // populate with data                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    CheckNearPageIndexes(Enumerable.Range(1' 6));                    GetPageIndex(6).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(1' 11));                    GetPageIndex(11).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(6' 11));                    GetPageIndex(16).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(11' 7));              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_NearPageIndexes,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    void CheckNearPageIndexes(IEnumerable<int> indexes)                  {                      var elements = browser.First("#pager1")                          .FindElements("li:not([style*='none'])");                        var nearPageIndexesCount = indexes.Count();                      // Including first page' previous page' next page' last page links                      elements.ThrowIfDifferentCountThan(nearPageIndexesCount + 4);                        foreach (var value in indexes.Zip(elements.Skip(2)' (i' e) => new { Index = i' Element = e }))                      {                          // Skip first and previous links                          AssertUI.InnerTextEquals(value.Element.Single("span'a")' value.Index.ToString());                      }                  }                    IElementWrapper GetPageIndex(int index)                  {                      foreach (var element in browser.Single("#pager1").FindElements("li a"))                      {                          if (string.Equals(element.GetInnerText()' index.ToString()' System.StringComparison.InvariantCulture))                          {                              return element;                          }                      }                      throw new NoSuchElementException();                  }                    // populate with data                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    CheckNearPageIndexes(Enumerable.Range(1' 6));                    GetPageIndex(6).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(1' 11));                    GetPageIndex(11).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(6' 11));                    GetPageIndex(16).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(11' 7));              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_NearPageIndexes,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    void CheckNearPageIndexes(IEnumerable<int> indexes)                  {                      var elements = browser.First("#pager1")                          .FindElements("li:not([style*='none'])");                        var nearPageIndexesCount = indexes.Count();                      // Including first page' previous page' next page' last page links                      elements.ThrowIfDifferentCountThan(nearPageIndexesCount + 4);                        foreach (var value in indexes.Zip(elements.Skip(2)' (i' e) => new { Index = i' Element = e }))                      {                          // Skip first and previous links                          AssertUI.InnerTextEquals(value.Element.Single("span'a")' value.Index.ToString());                      }                  }                    IElementWrapper GetPageIndex(int index)                  {                      foreach (var element in browser.Single("#pager1").FindElements("li a"))                      {                          if (string.Equals(element.GetInnerText()' index.ToString()' System.StringComparison.InvariantCulture))                          {                              return element;                          }                      }                      throw new NoSuchElementException();                  }                    // populate with data                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    CheckNearPageIndexes(Enumerable.Range(1' 6));                    GetPageIndex(6).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(1' 11));                    GetPageIndex(11).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(6' 11));                    GetPageIndex(16).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(11' 7));              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_NearPageIndexes,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    void CheckNearPageIndexes(IEnumerable<int> indexes)                  {                      var elements = browser.First("#pager1")                          .FindElements("li:not([style*='none'])");                        var nearPageIndexesCount = indexes.Count();                      // Including first page' previous page' next page' last page links                      elements.ThrowIfDifferentCountThan(nearPageIndexesCount + 4);                        foreach (var value in indexes.Zip(elements.Skip(2)' (i' e) => new { Index = i' Element = e }))                      {                          // Skip first and previous links                          AssertUI.InnerTextEquals(value.Element.Single("span'a")' value.Index.ToString());                      }                  }                    IElementWrapper GetPageIndex(int index)                  {                      foreach (var element in browser.Single("#pager1").FindElements("li a"))                      {                          if (string.Equals(element.GetInnerText()' index.ToString()' System.StringComparison.InvariantCulture))                          {                              return element;                          }                      }                      throw new NoSuchElementException();                  }                    // populate with data                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    CheckNearPageIndexes(Enumerable.Range(1' 6));                    GetPageIndex(6).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(1' 11));                    GetPageIndex(11).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(6' 11));                    GetPageIndex(16).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(11' 7));              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_NearPageIndexes,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    void CheckNearPageIndexes(IEnumerable<int> indexes)                  {                      var elements = browser.First("#pager1")                          .FindElements("li:not([style*='none'])");                        var nearPageIndexesCount = indexes.Count();                      // Including first page' previous page' next page' last page links                      elements.ThrowIfDifferentCountThan(nearPageIndexesCount + 4);                        foreach (var value in indexes.Zip(elements.Skip(2)' (i' e) => new { Index = i' Element = e }))                      {                          // Skip first and previous links                          AssertUI.InnerTextEquals(value.Element.Single("span'a")' value.Index.ToString());                      }                  }                    IElementWrapper GetPageIndex(int index)                  {                      foreach (var element in browser.Single("#pager1").FindElements("li a"))                      {                          if (string.Equals(element.GetInnerText()' index.ToString()' System.StringComparison.InvariantCulture))                          {                              return element;                          }                      }                      throw new NoSuchElementException();                  }                    // populate with data                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    CheckNearPageIndexes(Enumerable.Range(1' 6));                    GetPageIndex(6).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(1' 11));                    GetPageIndex(11).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(6' 11));                    GetPageIndex(16).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(11' 7));              });
Magic Number,DotVVM.Samples.Tests.Control,DataPagerTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\DataPagerTests.cs,Control_DataPager_NearPageIndexes,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_DataPager_DataPager);                  browser.Wait();                    void CheckNearPageIndexes(IEnumerable<int> indexes)                  {                      var elements = browser.First("#pager1")                          .FindElements("li:not([style*='none'])");                        var nearPageIndexesCount = indexes.Count();                      // Including first page' previous page' next page' last page links                      elements.ThrowIfDifferentCountThan(nearPageIndexesCount + 4);                        foreach (var value in indexes.Zip(elements.Skip(2)' (i' e) => new { Index = i' Element = e }))                      {                          // Skip first and previous links                          AssertUI.InnerTextEquals(value.Element.Single("span'a")' value.Index.ToString());                      }                  }                    IElementWrapper GetPageIndex(int index)                  {                      foreach (var element in browser.Single("#pager1").FindElements("li a"))                      {                          if (string.Equals(element.GetInnerText()' index.ToString()' System.StringComparison.InvariantCulture))                          {                              return element;                          }                      }                      throw new NoSuchElementException();                  }                    // populate with data                  browser.Single("populate-button"' this.SelectByDataUi).Click();                    CheckNearPageIndexes(Enumerable.Range(1' 6));                    GetPageIndex(6).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(1' 11));                    GetPageIndex(11).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(6' 11));                    GetPageIndex(16).ScrollTo().Click();                  CheckNearPageIndexes(Enumerable.Range(11' 7));              });
Magic Number,DotVVM.Samples.Tests.Control,EnabledPropertyTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\EnabledPropertyTests.cs,Control_EnabledProperty_EnabledProperty,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_EnabledProperty_EnabledProperty);                    AssertUI.IsEnabled(browser.ElementAt("select"' 0));                  AssertUI.IsEnabled(browser.ElementAt("input"' 0));                  AssertUI.IsEnabled(browser.ElementAt("label"' 0));                  AssertUI.IsEnabled(browser.ElementAt("label"' 1));                  AssertUI.IsEnabled(browser.ElementAt("label"' 2));                  AssertUI.IsEnabled(browser.ElementAt("select"' 1));                  AssertUI.IsEnabled(browser.First("[data-ui=button]"));                    browser.First("[data-ui=switch-button]").Click().Wait();                    AssertUI.IsNotEnabled(browser.ElementAt("select"' 0));                  AssertUI.IsNotEnabled(browser.ElementAt("input"' 0));                    try                  {                      browser.ElementAt("label input[type=radio]"' 0).Click();                      browser.ElementAt("label input[type=radio]"' 1).Click();                      browser.ElementAt("label input[type=checkbox]"' 0).Click();                  }                  catch (InvalidElementStateException ex) when (ex.Message == "Element is not enabled")                  {                      // NOOP                  }                    AssertUI.IsNotSelected(browser.ElementAt("label"' 0));                  AssertUI.IsNotSelected(browser.ElementAt("label"' 1));                  AssertUI.IsNotSelected(browser.ElementAt("label"' 2));                  AssertUI.IsNotEnabled(browser.ElementAt("select"' 1));                  AssertUI.IsNotEnabled(browser.First("[data-ui=button]"));              });
Magic Number,DotVVM.Samples.Tests.Control,EnabledPropertyTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\EnabledPropertyTests.cs,Control_EnabledProperty_EnabledProperty,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_EnabledProperty_EnabledProperty);                    AssertUI.IsEnabled(browser.ElementAt("select"' 0));                  AssertUI.IsEnabled(browser.ElementAt("input"' 0));                  AssertUI.IsEnabled(browser.ElementAt("label"' 0));                  AssertUI.IsEnabled(browser.ElementAt("label"' 1));                  AssertUI.IsEnabled(browser.ElementAt("label"' 2));                  AssertUI.IsEnabled(browser.ElementAt("select"' 1));                  AssertUI.IsEnabled(browser.First("[data-ui=button]"));                    browser.First("[data-ui=switch-button]").Click().Wait();                    AssertUI.IsNotEnabled(browser.ElementAt("select"' 0));                  AssertUI.IsNotEnabled(browser.ElementAt("input"' 0));                    try                  {                      browser.ElementAt("label input[type=radio]"' 0).Click();                      browser.ElementAt("label input[type=radio]"' 1).Click();                      browser.ElementAt("label input[type=checkbox]"' 0).Click();                  }                  catch (InvalidElementStateException ex) when (ex.Message == "Element is not enabled")                  {                      // NOOP                  }                    AssertUI.IsNotSelected(browser.ElementAt("label"' 0));                  AssertUI.IsNotSelected(browser.ElementAt("label"' 1));                  AssertUI.IsNotSelected(browser.ElementAt("label"' 2));                  AssertUI.IsNotEnabled(browser.ElementAt("select"' 1));                  AssertUI.IsNotEnabled(browser.First("[data-ui=button]"));              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadInRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadInRepeaterTests.cs,Complex_FileUploadInRepeater_FileUploadInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_FileUploadInRepeater_FileUploadInRepeater);                  browser.Wait(1000);                      var tempPath = Path.GetTempFileName();                  File.WriteAllBytes(tempPath' Enumerable.Range(0' 255).Select(i => (byte)i).ToArray());                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "0");                  DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 0)' tempPath);                    browser.WaitFor(() => browser.ElementAt(".files-count"' 0).GetInnerText() == "1"' 10000' "FileCount is not updated to '1'.");                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "0");                    DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 2)' tempPath);                  browser.Wait(6000);                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "1");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "1");                    DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 0)' tempPath);                  browser.Wait(6000);                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "2");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "1");                    try                  {                      File.Delete(tempPath);                  }                  catch                  {                      //TODO log                  }              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadInRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadInRepeaterTests.cs,Complex_FileUploadInRepeater_FileUploadInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_FileUploadInRepeater_FileUploadInRepeater);                  browser.Wait(1000);                      var tempPath = Path.GetTempFileName();                  File.WriteAllBytes(tempPath' Enumerable.Range(0' 255).Select(i => (byte)i).ToArray());                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "0");                  DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 0)' tempPath);                    browser.WaitFor(() => browser.ElementAt(".files-count"' 0).GetInnerText() == "1"' 10000' "FileCount is not updated to '1'.");                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "0");                    DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 2)' tempPath);                  browser.Wait(6000);                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "1");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "1");                    DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 0)' tempPath);                  browser.Wait(6000);                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "2");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "1");                    try                  {                      File.Delete(tempPath);                  }                  catch                  {                      //TODO log                  }              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadInRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadInRepeaterTests.cs,Complex_FileUploadInRepeater_FileUploadInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_FileUploadInRepeater_FileUploadInRepeater);                  browser.Wait(1000);                      var tempPath = Path.GetTempFileName();                  File.WriteAllBytes(tempPath' Enumerable.Range(0' 255).Select(i => (byte)i).ToArray());                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "0");                  DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 0)' tempPath);                    browser.WaitFor(() => browser.ElementAt(".files-count"' 0).GetInnerText() == "1"' 10000' "FileCount is not updated to '1'.");                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "0");                    DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 2)' tempPath);                  browser.Wait(6000);                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "1");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "1");                    DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 0)' tempPath);                  browser.Wait(6000);                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "2");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "1");                    try                  {                      File.Delete(tempPath);                  }                  catch                  {                      //TODO log                  }              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadInRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadInRepeaterTests.cs,Complex_FileUploadInRepeater_FileUploadInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_FileUploadInRepeater_FileUploadInRepeater);                  browser.Wait(1000);                      var tempPath = Path.GetTempFileName();                  File.WriteAllBytes(tempPath' Enumerable.Range(0' 255).Select(i => (byte)i).ToArray());                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "0");                  DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 0)' tempPath);                    browser.WaitFor(() => browser.ElementAt(".files-count"' 0).GetInnerText() == "1"' 10000' "FileCount is not updated to '1'.");                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "0");                    DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 2)' tempPath);                  browser.Wait(6000);                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "1");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "1");                    DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 0)' tempPath);                  browser.Wait(6000);                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "2");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "1");                    try                  {                      File.Delete(tempPath);                  }                  catch                  {                      //TODO log                  }              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadInRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadInRepeaterTests.cs,Complex_FileUploadInRepeater_FileUploadInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_FileUploadInRepeater_FileUploadInRepeater);                  browser.Wait(1000);                      var tempPath = Path.GetTempFileName();                  File.WriteAllBytes(tempPath' Enumerable.Range(0' 255).Select(i => (byte)i).ToArray());                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "0");                  DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 0)' tempPath);                    browser.WaitFor(() => browser.ElementAt(".files-count"' 0).GetInnerText() == "1"' 10000' "FileCount is not updated to '1'.");                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "0");                    DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 2)' tempPath);                  browser.Wait(6000);                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "1");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "1");                    DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 0)' tempPath);                  browser.Wait(6000);                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "2");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "1");                    try                  {                      File.Delete(tempPath);                  }                  catch                  {                      //TODO log                  }              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadInRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadInRepeaterTests.cs,Complex_FileUploadInRepeater_FileUploadInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_FileUploadInRepeater_FileUploadInRepeater);                  browser.Wait(1000);                      var tempPath = Path.GetTempFileName();                  File.WriteAllBytes(tempPath' Enumerable.Range(0' 255).Select(i => (byte)i).ToArray());                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "0");                  DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 0)' tempPath);                    browser.WaitFor(() => browser.ElementAt(".files-count"' 0).GetInnerText() == "1"' 10000' "FileCount is not updated to '1'.");                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "0");                    DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 2)' tempPath);                  browser.Wait(6000);                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "1");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "1");                    DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 0)' tempPath);                  browser.Wait(6000);                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "2");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "1");                    try                  {                      File.Delete(tempPath);                  }                  catch                  {                      //TODO log                  }              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadInRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadInRepeaterTests.cs,Complex_FileUploadInRepeater_FileUploadInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_FileUploadInRepeater_FileUploadInRepeater);                  browser.Wait(1000);                      var tempPath = Path.GetTempFileName();                  File.WriteAllBytes(tempPath' Enumerable.Range(0' 255).Select(i => (byte)i).ToArray());                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "0");                  DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 0)' tempPath);                    browser.WaitFor(() => browser.ElementAt(".files-count"' 0).GetInnerText() == "1"' 10000' "FileCount is not updated to '1'.");                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "0");                    DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 2)' tempPath);                  browser.Wait(6000);                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "1");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "1");                    DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 0)' tempPath);                  browser.Wait(6000);                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "2");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "1");                    try                  {                      File.Delete(tempPath);                  }                  catch                  {                      //TODO log                  }              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadInRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadInRepeaterTests.cs,Complex_FileUploadInRepeater_FileUploadInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_FileUploadInRepeater_FileUploadInRepeater);                  browser.Wait(1000);                      var tempPath = Path.GetTempFileName();                  File.WriteAllBytes(tempPath' Enumerable.Range(0' 255).Select(i => (byte)i).ToArray());                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "0");                  DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 0)' tempPath);                    browser.WaitFor(() => browser.ElementAt(".files-count"' 0).GetInnerText() == "1"' 10000' "FileCount is not updated to '1'.");                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "0");                    DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 2)' tempPath);                  browser.Wait(6000);                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "1");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "1");                    DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 0)' tempPath);                  browser.Wait(6000);                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "2");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "1");                    try                  {                      File.Delete(tempPath);                  }                  catch                  {                      //TODO log                  }              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadInRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadInRepeaterTests.cs,Complex_FileUploadInRepeater_FileUploadInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ComplexSamples_FileUploadInRepeater_FileUploadInRepeater);                  browser.Wait(1000);                      var tempPath = Path.GetTempFileName();                  File.WriteAllBytes(tempPath' Enumerable.Range(0' 255).Select(i => (byte)i).ToArray());                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "0");                  DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 0)' tempPath);                    browser.WaitFor(() => browser.ElementAt(".files-count"' 0).GetInnerText() == "1"' 10000' "FileCount is not updated to '1'.");                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "0");                    DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 2)' tempPath);                  browser.Wait(6000);                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "1");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "1");                    DotVVMAssert.UploadFile((ElementWrapper)browser.ElementAt(".dotvvm-upload-button a"' 0)' tempPath);                  browser.Wait(6000);                    AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 0)' "2");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 1)' "0");                  AssertUI.InnerTextEquals(browser.ElementAt(".files-count"' 2)' "1");                    try                  {                      File.Delete(tempPath);                  }                  catch                  {                      //TODO log                  }              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadTests.cs,Control_FileUpload_FileUpload,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_FileUpload);                  browser.Wait(1000);                    // get existing files                  var existingFiles = browser.FindElements("li").Select(e => e.GetText()).ToList();                  browser.Wait(1000);                    // generate a sample file to upload                  var tempFile = Path.GetTempFileName();                  File.WriteAllText(tempFile' string.Join("'"' Enumerable.Range(1' 100000)));                    // write the full path to the dialog                    DotVVMAssert.UploadFile((ElementWrapper)browser.First(".dotvvm-upload-button a")' tempFile);                    // wait for the file to be uploaded                    browser.WaitFor(() => browser.First(".dotvvm-upload-files").GetText() == "1 files"' 60000'                      "File was not uploaded in 1 min interval.");                    //TODO: TestContext.WriteLine("The file was uploaded.");                    // submit                  browser.Click("input[type=button]");                    // verify the file is there present                  browser.WaitFor(                      () =>                          browser.First("ul").FindElements("li").FirstOrDefault(t => !existingFiles.Contains(t.GetText())) !=                          null' 60000' "File was not uploaded correctly.");                    // delete the file                  var firstLi =                      browser.First("ul").FindElements("li").FirstOrDefault(t => !existingFiles.Contains(t.GetText()));                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_FileUpload + "?delete=" + firstLi.GetText());                    // delete the temp file                  File.Delete(tempFile);              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadTests.cs,Control_FileUpload_FileUpload,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_FileUpload);                  browser.Wait(1000);                    // get existing files                  var existingFiles = browser.FindElements("li").Select(e => e.GetText()).ToList();                  browser.Wait(1000);                    // generate a sample file to upload                  var tempFile = Path.GetTempFileName();                  File.WriteAllText(tempFile' string.Join("'"' Enumerable.Range(1' 100000)));                    // write the full path to the dialog                    DotVVMAssert.UploadFile((ElementWrapper)browser.First(".dotvvm-upload-button a")' tempFile);                    // wait for the file to be uploaded                    browser.WaitFor(() => browser.First(".dotvvm-upload-files").GetText() == "1 files"' 60000'                      "File was not uploaded in 1 min interval.");                    //TODO: TestContext.WriteLine("The file was uploaded.");                    // submit                  browser.Click("input[type=button]");                    // verify the file is there present                  browser.WaitFor(                      () =>                          browser.First("ul").FindElements("li").FirstOrDefault(t => !existingFiles.Contains(t.GetText())) !=                          null' 60000' "File was not uploaded correctly.");                    // delete the file                  var firstLi =                      browser.First("ul").FindElements("li").FirstOrDefault(t => !existingFiles.Contains(t.GetText()));                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_FileUpload + "?delete=" + firstLi.GetText());                    // delete the temp file                  File.Delete(tempFile);              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadTests.cs,Control_FileUpload_FileUpload,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_FileUpload);                  browser.Wait(1000);                    // get existing files                  var existingFiles = browser.FindElements("li").Select(e => e.GetText()).ToList();                  browser.Wait(1000);                    // generate a sample file to upload                  var tempFile = Path.GetTempFileName();                  File.WriteAllText(tempFile' string.Join("'"' Enumerable.Range(1' 100000)));                    // write the full path to the dialog                    DotVVMAssert.UploadFile((ElementWrapper)browser.First(".dotvvm-upload-button a")' tempFile);                    // wait for the file to be uploaded                    browser.WaitFor(() => browser.First(".dotvvm-upload-files").GetText() == "1 files"' 60000'                      "File was not uploaded in 1 min interval.");                    //TODO: TestContext.WriteLine("The file was uploaded.");                    // submit                  browser.Click("input[type=button]");                    // verify the file is there present                  browser.WaitFor(                      () =>                          browser.First("ul").FindElements("li").FirstOrDefault(t => !existingFiles.Contains(t.GetText())) !=                          null' 60000' "File was not uploaded correctly.");                    // delete the file                  var firstLi =                      browser.First("ul").FindElements("li").FirstOrDefault(t => !existingFiles.Contains(t.GetText()));                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_FileUpload + "?delete=" + firstLi.GetText());                    // delete the temp file                  File.Delete(tempFile);              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadTests.cs,Control_FileUpload_FileUpload,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_FileUpload);                  browser.Wait(1000);                    // get existing files                  var existingFiles = browser.FindElements("li").Select(e => e.GetText()).ToList();                  browser.Wait(1000);                    // generate a sample file to upload                  var tempFile = Path.GetTempFileName();                  File.WriteAllText(tempFile' string.Join("'"' Enumerable.Range(1' 100000)));                    // write the full path to the dialog                    DotVVMAssert.UploadFile((ElementWrapper)browser.First(".dotvvm-upload-button a")' tempFile);                    // wait for the file to be uploaded                    browser.WaitFor(() => browser.First(".dotvvm-upload-files").GetText() == "1 files"' 60000'                      "File was not uploaded in 1 min interval.");                    //TODO: TestContext.WriteLine("The file was uploaded.");                    // submit                  browser.Click("input[type=button]");                    // verify the file is there present                  browser.WaitFor(                      () =>                          browser.First("ul").FindElements("li").FirstOrDefault(t => !existingFiles.Contains(t.GetText())) !=                          null' 60000' "File was not uploaded correctly.");                    // delete the file                  var firstLi =                      browser.First("ul").FindElements("li").FirstOrDefault(t => !existingFiles.Contains(t.GetText()));                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_FileUpload + "?delete=" + firstLi.GetText());                    // delete the temp file                  File.Delete(tempFile);              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadTests.cs,Control_FileUpload_FileUpload,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_FileUpload);                  browser.Wait(1000);                    // get existing files                  var existingFiles = browser.FindElements("li").Select(e => e.GetText()).ToList();                  browser.Wait(1000);                    // generate a sample file to upload                  var tempFile = Path.GetTempFileName();                  File.WriteAllText(tempFile' string.Join("'"' Enumerable.Range(1' 100000)));                    // write the full path to the dialog                    DotVVMAssert.UploadFile((ElementWrapper)browser.First(".dotvvm-upload-button a")' tempFile);                    // wait for the file to be uploaded                    browser.WaitFor(() => browser.First(".dotvvm-upload-files").GetText() == "1 files"' 60000'                      "File was not uploaded in 1 min interval.");                    //TODO: TestContext.WriteLine("The file was uploaded.");                    // submit                  browser.Click("input[type=button]");                    // verify the file is there present                  browser.WaitFor(                      () =>                          browser.First("ul").FindElements("li").FirstOrDefault(t => !existingFiles.Contains(t.GetText())) !=                          null' 60000' "File was not uploaded correctly.");                    // delete the file                  var firstLi =                      browser.First("ul").FindElements("li").FirstOrDefault(t => !existingFiles.Contains(t.GetText()));                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_FileUpload + "?delete=" + firstLi.GetText());                    // delete the temp file                  File.Delete(tempFile);              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadTests.cs,Control_FileUpload_IsAllowedOrNot_IsFileAllowed,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_IsAllowedOrNot);                  browser.Wait(1000);                    var isFileTypeAllowed = browser.Single("span.isFileTypeAllowed");                  var isMaxSizeExceeded = browser.Single("span.isMaxSizeExceeded");                    var textFile = CreateTempFile("txt"' 1);                  DotVVMAssert.UploadFile((ElementWrapper)browser.First(".dotvvm-upload-button a")' textFile);                    browser.WaitFor(() => browser.First(".dotvvm-upload-files").GetText() == "1 files"' 60000'                      "File was not uploaded in 1 min interval.");                    AssertUI.TextEquals(isFileTypeAllowed' "true");                  AssertUI.TextEquals(isMaxSizeExceeded' "false");                    File.Delete(textFile);              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadTests.cs,Control_FileUpload_IsAllowedOrNot_IsFileAllowed,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_IsAllowedOrNot);                  browser.Wait(1000);                    var isFileTypeAllowed = browser.Single("span.isFileTypeAllowed");                  var isMaxSizeExceeded = browser.Single("span.isMaxSizeExceeded");                    var textFile = CreateTempFile("txt"' 1);                  DotVVMAssert.UploadFile((ElementWrapper)browser.First(".dotvvm-upload-button a")' textFile);                    browser.WaitFor(() => browser.First(".dotvvm-upload-files").GetText() == "1 files"' 60000'                      "File was not uploaded in 1 min interval.");                    AssertUI.TextEquals(isFileTypeAllowed' "true");                  AssertUI.TextEquals(isMaxSizeExceeded' "false");                    File.Delete(textFile);              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadTests.cs,Control_FileUpload_IsFileNotAllowed,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_IsAllowedOrNot);                  browser.Wait(1000);                    var isFileTypeAllowed = browser.Single("span.isFileTypeAllowed");                  var isMaxSizeExceeded = browser.Single("span.isMaxSizeExceeded");                    var mdFile = CreateTempFile("md"' 1);                  DotVVMAssert.UploadFile((ElementWrapper)browser.First(".dotvvm-upload-button a")' mdFile);                    browser.WaitFor(() => browser.First(".dotvvm-upload-files").GetText() == "1 files"' 60000'                      "File was not uploaded in 1 min interval.");                    AssertUI.TextEquals(isFileTypeAllowed' "false");                  AssertUI.TextEquals(isMaxSizeExceeded' "false");                    File.Delete(mdFile);              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadTests.cs,Control_FileUpload_IsFileNotAllowed,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_IsAllowedOrNot);                  browser.Wait(1000);                    var isFileTypeAllowed = browser.Single("span.isFileTypeAllowed");                  var isMaxSizeExceeded = browser.Single("span.isMaxSizeExceeded");                    var mdFile = CreateTempFile("md"' 1);                  DotVVMAssert.UploadFile((ElementWrapper)browser.First(".dotvvm-upload-button a")' mdFile);                    browser.WaitFor(() => browser.First(".dotvvm-upload-files").GetText() == "1 files"' 60000'                      "File was not uploaded in 1 min interval.");                    AssertUI.TextEquals(isFileTypeAllowed' "false");                  AssertUI.TextEquals(isMaxSizeExceeded' "false");                    File.Delete(mdFile);              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadTests.cs,Control_FileUpload_IsAllowedOrNot_FileTooLarge,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_IsAllowedOrNot);                  browser.Wait(1000);                    var isFileTypeAllowed = browser.Single("span.isFileTypeAllowed");                  var isMaxSizeExceeded = browser.Single("span.isMaxSizeExceeded");                    var largeFile = CreateTempFile("txt"' 2);                  DotVVMAssert.UploadFile((ElementWrapper)browser.First(".dotvvm-upload-button a")' largeFile);                    browser.WaitFor(() => browser.First(".dotvvm-upload-files").GetText() == "1 files"' 60000'                      "File was not uploaded in 1 min interval.");                    AssertUI.TextEquals(isFileTypeAllowed' "true");                  AssertUI.TextEquals(isMaxSizeExceeded' "true");                    File.Delete(largeFile);              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadTests.cs,Control_FileUpload_IsAllowedOrNot_FileTooLarge,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_IsAllowedOrNot);                  browser.Wait(1000);                    var isFileTypeAllowed = browser.Single("span.isFileTypeAllowed");                  var isMaxSizeExceeded = browser.Single("span.isMaxSizeExceeded");                    var largeFile = CreateTempFile("txt"' 2);                  DotVVMAssert.UploadFile((ElementWrapper)browser.First(".dotvvm-upload-button a")' largeFile);                    browser.WaitFor(() => browser.First(".dotvvm-upload-files").GetText() == "1 files"' 60000'                      "File was not uploaded in 1 min interval.");                    AssertUI.TextEquals(isFileTypeAllowed' "true");                  AssertUI.TextEquals(isMaxSizeExceeded' "true");                    File.Delete(largeFile);              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadTests.cs,Control_FileUpload_IsAllowedOrNot_FileTooLarge,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_IsAllowedOrNot);                  browser.Wait(1000);                    var isFileTypeAllowed = browser.Single("span.isFileTypeAllowed");                  var isMaxSizeExceeded = browser.Single("span.isMaxSizeExceeded");                    var largeFile = CreateTempFile("txt"' 2);                  DotVVMAssert.UploadFile((ElementWrapper)browser.First(".dotvvm-upload-button a")' largeFile);                    browser.WaitFor(() => browser.First(".dotvvm-upload-files").GetText() == "1 files"' 60000'                      "File was not uploaded in 1 min interval.");                    AssertUI.TextEquals(isFileTypeAllowed' "true");                  AssertUI.TextEquals(isMaxSizeExceeded' "true");                    File.Delete(largeFile);              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadTests.cs,Control_FileUpload_FileSize,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_FileSize);                  browser.Wait(1000);                    var fileSize = browser.Single("span.fileSize");                    var file = CreateTempFile("txt"' 2);                  DotVVMAssert.UploadFile((ElementWrapper)browser.First(".dotvvm-upload-button a")' file);                    browser.WaitFor(() => browser.First(".dotvvm-upload-files").GetText() == "1 files"' 60000'                      "File was not uploaded in 1 min interval.");                    AssertUI.TextEquals(fileSize' "2 MB");                    File.Delete(file);              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadTests.cs,Control_FileUpload_FileSize,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_FileSize);                  browser.Wait(1000);                    var fileSize = browser.Single("span.fileSize");                    var file = CreateTempFile("txt"' 2);                  DotVVMAssert.UploadFile((ElementWrapper)browser.First(".dotvvm-upload-button a")' file);                    browser.WaitFor(() => browser.First(".dotvvm-upload-files").GetText() == "1 files"' 60000'                      "File was not uploaded in 1 min interval.");                    AssertUI.TextEquals(fileSize' "2 MB");                    File.Delete(file);              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadTests.cs,Control_FileUpload_FileSize,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_FileUpload_FileSize);                  browser.Wait(1000);                    var fileSize = browser.Single("span.fileSize");                    var file = CreateTempFile("txt"' 2);                  DotVVMAssert.UploadFile((ElementWrapper)browser.First(".dotvvm-upload-button a")' file);                    browser.WaitFor(() => browser.First(".dotvvm-upload-files").GetText() == "1 files"' 60000'                      "File was not uploaded in 1 min interval.");                    AssertUI.TextEquals(fileSize' "2 MB");                    File.Delete(file);              });
Magic Number,DotVVM.Samples.Tests.Control,FileUploadTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadTests.cs,CreateTempFile,The following statement contains a magic number: fs.SetLength(size * 1024 * 1024);
Magic Number,DotVVM.Samples.Tests.Control,FileUploadTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\FileUploadTests.cs,CreateTempFile,The following statement contains a magic number: fs.SetLength(size * 1024 * 1024);
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingValidation,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingValidation);                  browser.Driver.Manage().Window.Maximize();                    //Get rows                  var rows = browser.First("table tbody");                  var firstRow = rows.ElementAt("tr"' 0);                    //Edit                  firstRow.ElementAt("td"' 5).First("button").Click();                    rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 4).First("input")' "type"' "text");                    //clear name                  firstRow.ElementAt("td"' 1).First("input").Clear();                    //update buttons                  firstRow.ElementAt("td"' 5).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //getting rid iof "postback interupted message"                  browser.FindElements("div#debugNotification").First().Click();                  browser.Wait(1000);                    var validationResult = browser.ElementAt(".validation"' 0);                    AssertUI.InnerTextEquals(validationResult' "The Name field is required.");                    //change name                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //clear email                  firstRow.ElementAt("td"' 3).First("input").Clear();                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //check validation                  AssertUI.InnerTextEquals(validationResult' "The Email field is not a valid e-mail address.");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingValidation,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingValidation);                  browser.Driver.Manage().Window.Maximize();                    //Get rows                  var rows = browser.First("table tbody");                  var firstRow = rows.ElementAt("tr"' 0);                    //Edit                  firstRow.ElementAt("td"' 5).First("button").Click();                    rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 4).First("input")' "type"' "text");                    //clear name                  firstRow.ElementAt("td"' 1).First("input").Clear();                    //update buttons                  firstRow.ElementAt("td"' 5).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //getting rid iof "postback interupted message"                  browser.FindElements("div#debugNotification").First().Click();                  browser.Wait(1000);                    var validationResult = browser.ElementAt(".validation"' 0);                    AssertUI.InnerTextEquals(validationResult' "The Name field is required.");                    //change name                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //clear email                  firstRow.ElementAt("td"' 3).First("input").Clear();                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //check validation                  AssertUI.InnerTextEquals(validationResult' "The Email field is not a valid e-mail address.");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingValidation,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingValidation);                  browser.Driver.Manage().Window.Maximize();                    //Get rows                  var rows = browser.First("table tbody");                  var firstRow = rows.ElementAt("tr"' 0);                    //Edit                  firstRow.ElementAt("td"' 5).First("button").Click();                    rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 4).First("input")' "type"' "text");                    //clear name                  firstRow.ElementAt("td"' 1).First("input").Clear();                    //update buttons                  firstRow.ElementAt("td"' 5).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //getting rid iof "postback interupted message"                  browser.FindElements("div#debugNotification").First().Click();                  browser.Wait(1000);                    var validationResult = browser.ElementAt(".validation"' 0);                    AssertUI.InnerTextEquals(validationResult' "The Name field is required.");                    //change name                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //clear email                  firstRow.ElementAt("td"' 3).First("input").Clear();                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //check validation                  AssertUI.InnerTextEquals(validationResult' "The Email field is not a valid e-mail address.");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingValidation,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingValidation);                  browser.Driver.Manage().Window.Maximize();                    //Get rows                  var rows = browser.First("table tbody");                  var firstRow = rows.ElementAt("tr"' 0);                    //Edit                  firstRow.ElementAt("td"' 5).First("button").Click();                    rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 4).First("input")' "type"' "text");                    //clear name                  firstRow.ElementAt("td"' 1).First("input").Clear();                    //update buttons                  firstRow.ElementAt("td"' 5).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //getting rid iof "postback interupted message"                  browser.FindElements("div#debugNotification").First().Click();                  browser.Wait(1000);                    var validationResult = browser.ElementAt(".validation"' 0);                    AssertUI.InnerTextEquals(validationResult' "The Name field is required.");                    //change name                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //clear email                  firstRow.ElementAt("td"' 3).First("input").Clear();                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //check validation                  AssertUI.InnerTextEquals(validationResult' "The Email field is not a valid e-mail address.");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingValidation,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingValidation);                  browser.Driver.Manage().Window.Maximize();                    //Get rows                  var rows = browser.First("table tbody");                  var firstRow = rows.ElementAt("tr"' 0);                    //Edit                  firstRow.ElementAt("td"' 5).First("button").Click();                    rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 4).First("input")' "type"' "text");                    //clear name                  firstRow.ElementAt("td"' 1).First("input").Clear();                    //update buttons                  firstRow.ElementAt("td"' 5).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //getting rid iof "postback interupted message"                  browser.FindElements("div#debugNotification").First().Click();                  browser.Wait(1000);                    var validationResult = browser.ElementAt(".validation"' 0);                    AssertUI.InnerTextEquals(validationResult' "The Name field is required.");                    //change name                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //clear email                  firstRow.ElementAt("td"' 3).First("input").Clear();                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //check validation                  AssertUI.InnerTextEquals(validationResult' "The Email field is not a valid e-mail address.");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingValidation,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingValidation);                  browser.Driver.Manage().Window.Maximize();                    //Get rows                  var rows = browser.First("table tbody");                  var firstRow = rows.ElementAt("tr"' 0);                    //Edit                  firstRow.ElementAt("td"' 5).First("button").Click();                    rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 4).First("input")' "type"' "text");                    //clear name                  firstRow.ElementAt("td"' 1).First("input").Clear();                    //update buttons                  firstRow.ElementAt("td"' 5).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //getting rid iof "postback interupted message"                  browser.FindElements("div#debugNotification").First().Click();                  browser.Wait(1000);                    var validationResult = browser.ElementAt(".validation"' 0);                    AssertUI.InnerTextEquals(validationResult' "The Name field is required.");                    //change name                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //clear email                  firstRow.ElementAt("td"' 3).First("input").Clear();                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //check validation                  AssertUI.InnerTextEquals(validationResult' "The Email field is not a valid e-mail address.");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingValidation,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingValidation);                  browser.Driver.Manage().Window.Maximize();                    //Get rows                  var rows = browser.First("table tbody");                  var firstRow = rows.ElementAt("tr"' 0);                    //Edit                  firstRow.ElementAt("td"' 5).First("button").Click();                    rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 4).First("input")' "type"' "text");                    //clear name                  firstRow.ElementAt("td"' 1).First("input").Clear();                    //update buttons                  firstRow.ElementAt("td"' 5).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //getting rid iof "postback interupted message"                  browser.FindElements("div#debugNotification").First().Click();                  browser.Wait(1000);                    var validationResult = browser.ElementAt(".validation"' 0);                    AssertUI.InnerTextEquals(validationResult' "The Name field is required.");                    //change name                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //clear email                  firstRow.ElementAt("td"' 3).First("input").Clear();                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //check validation                  AssertUI.InnerTextEquals(validationResult' "The Email field is not a valid e-mail address.");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingValidation,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingValidation);                  browser.Driver.Manage().Window.Maximize();                    //Get rows                  var rows = browser.First("table tbody");                  var firstRow = rows.ElementAt("tr"' 0);                    //Edit                  firstRow.ElementAt("td"' 5).First("button").Click();                    rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 4).First("input")' "type"' "text");                    //clear name                  firstRow.ElementAt("td"' 1).First("input").Clear();                    //update buttons                  firstRow.ElementAt("td"' 5).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //getting rid iof "postback interupted message"                  browser.FindElements("div#debugNotification").First().Click();                  browser.Wait(1000);                    var validationResult = browser.ElementAt(".validation"' 0);                    AssertUI.InnerTextEquals(validationResult' "The Name field is required.");                    //change name                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //clear email                  firstRow.ElementAt("td"' 3).First("input").Clear();                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //check validation                  AssertUI.InnerTextEquals(validationResult' "The Email field is not a valid e-mail address.");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingValidation,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingValidation);                  browser.Driver.Manage().Window.Maximize();                    //Get rows                  var rows = browser.First("table tbody");                  var firstRow = rows.ElementAt("tr"' 0);                    //Edit                  firstRow.ElementAt("td"' 5).First("button").Click();                    rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 4).First("input")' "type"' "text");                    //clear name                  firstRow.ElementAt("td"' 1).First("input").Clear();                    //update buttons                  firstRow.ElementAt("td"' 5).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //getting rid iof "postback interupted message"                  browser.FindElements("div#debugNotification").First().Click();                  browser.Wait(1000);                    var validationResult = browser.ElementAt(".validation"' 0);                    AssertUI.InnerTextEquals(validationResult' "The Name field is required.");                    //change name                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //clear email                  firstRow.ElementAt("td"' 3).First("input").Clear();                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //check validation                  AssertUI.InnerTextEquals(validationResult' "The Email field is not a valid e-mail address.");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingValidation,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingValidation);                  browser.Driver.Manage().Window.Maximize();                    //Get rows                  var rows = browser.First("table tbody");                  var firstRow = rows.ElementAt("tr"' 0);                    //Edit                  firstRow.ElementAt("td"' 5).First("button").Click();                    rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 4).First("input")' "type"' "text");                    //clear name                  firstRow.ElementAt("td"' 1).First("input").Clear();                    //update buttons                  firstRow.ElementAt("td"' 5).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //getting rid iof "postback interupted message"                  browser.FindElements("div#debugNotification").First().Click();                  browser.Wait(1000);                    var validationResult = browser.ElementAt(".validation"' 0);                    AssertUI.InnerTextEquals(validationResult' "The Name field is required.");                    //change name                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //clear email                  firstRow.ElementAt("td"' 3).First("input").Clear();                    //update                  firstRow.ElementAt("td"' 5).First("button").Click();                    //check validation                  AssertUI.InnerTextEquals(validationResult' "The Email field is not a valid e-mail address.");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewStaticCommand,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewStaticCommand);                  browser.Wait();                    //check rows                  browser.FindElements("table tbody tr").ThrowIfDifferentCountThan(5);                  //check first row Id                  AssertUI.InnerTextEquals(browser.First("table tbody tr td span")' "1");                  //cal static command for delete row                  browser.First("table tbody tr input[type=button]").Click();                  //check rows again                  browser.FindElements("table tbody tr").ThrowIfDifferentCountThan(4);                  //check first row Id                  AssertUI.InnerTextEquals(browser.First("table tbody tr td span")' "2");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewStaticCommand,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewStaticCommand);                  browser.Wait();                    //check rows                  browser.FindElements("table tbody tr").ThrowIfDifferentCountThan(5);                  //check first row Id                  AssertUI.InnerTextEquals(browser.First("table tbody tr td span")' "1");                  //cal static command for delete row                  browser.First("table tbody tr input[type=button]").Click();                  //check rows again                  browser.FindElements("table tbody tr").ThrowIfDifferentCountThan(4);                  //check first row Id                  AssertUI.InnerTextEquals(browser.First("table tbody tr td span")' "2");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingValidation_GridViewInlineEditingFormat,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingValidation);                    //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  var dateDisplay = firstRow.ElementAt("td"' 2).First("span").GetText();                  var moneyDisplay = firstRow.ElementAt("td"' 4).First("span").GetText();                    //Edit                  firstRow.ElementAt("td"' 5).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check format                  AssertUI.TextEquals(firstRow.ElementAt("td"' 2).First("input")' dateDisplay);                  AssertUI.TextEquals(firstRow.ElementAt("td"' 4).First("input")' moneyDisplay);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingValidation_GridViewInlineEditingFormat,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingValidation);                    //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  var dateDisplay = firstRow.ElementAt("td"' 2).First("span").GetText();                  var moneyDisplay = firstRow.ElementAt("td"' 4).First("span").GetText();                    //Edit                  firstRow.ElementAt("td"' 5).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check format                  AssertUI.TextEquals(firstRow.ElementAt("td"' 2).First("input")' dateDisplay);                  AssertUI.TextEquals(firstRow.ElementAt("td"' 4).First("input")' moneyDisplay);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingValidation_GridViewInlineEditingFormat,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingValidation);                    //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  var dateDisplay = firstRow.ElementAt("td"' 2).First("span").GetText();                  var moneyDisplay = firstRow.ElementAt("td"' 4).First("span").GetText();                    //Edit                  firstRow.ElementAt("td"' 5).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check format                  AssertUI.TextEquals(firstRow.ElementAt("td"' 2).First("input")' dateDisplay);                  AssertUI.TextEquals(firstRow.ElementAt("td"' 4).First("input")' moneyDisplay);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingValidation_GridViewInlineEditingFormat,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingValidation);                    //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  var dateDisplay = firstRow.ElementAt("td"' 2).First("span").GetText();                  var moneyDisplay = firstRow.ElementAt("td"' 4).First("span").GetText();                    //Edit                  firstRow.ElementAt("td"' 5).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check format                  AssertUI.TextEquals(firstRow.ElementAt("td"' 2).First("input")' dateDisplay);                  AssertUI.TextEquals(firstRow.ElementAt("td"' 4).First("input")' moneyDisplay);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingValidation_GridViewInlineEditingFormat,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingValidation);                    //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  var dateDisplay = firstRow.ElementAt("td"' 2).First("span").GetText();                  var moneyDisplay = firstRow.ElementAt("td"' 4).First("span").GetText();                    //Edit                  firstRow.ElementAt("td"' 5).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check format                  AssertUI.TextEquals(firstRow.ElementAt("td"' 2).First("input")' dateDisplay);                  AssertUI.TextEquals(firstRow.ElementAt("td"' 4).First("input")' moneyDisplay);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingValidation_GridViewInlineEditingFormat,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingValidation);                    //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  var dateDisplay = firstRow.ElementAt("td"' 2).First("span").GetText();                  var moneyDisplay = firstRow.ElementAt("td"' 4).First("span").GetText();                    //Edit                  firstRow.ElementAt("td"' 5).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check format                  AssertUI.TextEquals(firstRow.ElementAt("td"' 2).First("input")' dateDisplay);                  AssertUI.TextEquals(firstRow.ElementAt("td"' 4).First("input")' moneyDisplay);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingValidation_GridViewInlineEditingFormat,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingValidation);                    //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  var dateDisplay = firstRow.ElementAt("td"' 2).First("span").GetText();                  var moneyDisplay = firstRow.ElementAt("td"' 4).First("span").GetText();                    //Edit                  firstRow.ElementAt("td"' 5).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check format                  AssertUI.TextEquals(firstRow.ElementAt("td"' 2).First("input")' dateDisplay);                  AssertUI.TextEquals(firstRow.ElementAt("td"' 4).First("input")' moneyDisplay);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingPrimaryKeyGuid,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingPrimaryKeyGuid);                  //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "9536d712-2e91-43d2-8ebb-93fbec31cf34");                  //Edit                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                    //change name                  firstRow.ElementAt("td"' 1).First("input").Clear();                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //update buttons                  firstRow.ElementAt("td"' 4).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check changed name                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 1).First("span")' "Test");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingPrimaryKeyGuid,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingPrimaryKeyGuid);                  //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "9536d712-2e91-43d2-8ebb-93fbec31cf34");                  //Edit                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                    //change name                  firstRow.ElementAt("td"' 1).First("input").Clear();                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //update buttons                  firstRow.ElementAt("td"' 4).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check changed name                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 1).First("span")' "Test");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingPrimaryKeyGuid,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingPrimaryKeyGuid);                  //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "9536d712-2e91-43d2-8ebb-93fbec31cf34");                  //Edit                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                    //change name                  firstRow.ElementAt("td"' 1).First("input").Clear();                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //update buttons                  firstRow.ElementAt("td"' 4).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check changed name                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 1).First("span")' "Test");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingPrimaryKeyGuid,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingPrimaryKeyGuid);                  //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "9536d712-2e91-43d2-8ebb-93fbec31cf34");                  //Edit                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                    //change name                  firstRow.ElementAt("td"' 1).First("input").Clear();                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //update buttons                  firstRow.ElementAt("td"' 4).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check changed name                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 1).First("span")' "Test");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingPrimaryKeyGuid,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingPrimaryKeyGuid);                  //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "9536d712-2e91-43d2-8ebb-93fbec31cf34");                  //Edit                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                    //change name                  firstRow.ElementAt("td"' 1).First("input").Clear();                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //update buttons                  firstRow.ElementAt("td"' 4).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check changed name                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 1).First("span")' "Test");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingPrimaryKeyGuid,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingPrimaryKeyGuid);                  //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "9536d712-2e91-43d2-8ebb-93fbec31cf34");                  //Edit                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                    //change name                  firstRow.ElementAt("td"' 1).First("input").Clear();                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //update buttons                  firstRow.ElementAt("td"' 4).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check changed name                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 1).First("span")' "Test");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingPrimaryKeyGuid,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingPrimaryKeyGuid);                  //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "9536d712-2e91-43d2-8ebb-93fbec31cf34");                  //Edit                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                    //change name                  firstRow.ElementAt("td"' 1).First("input").Clear();                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //update buttons                  firstRow.ElementAt("td"' 4).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check changed name                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 1).First("span")' "Test");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingPrimaryKeyGuid,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingPrimaryKeyGuid);                  //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "9536d712-2e91-43d2-8ebb-93fbec31cf34");                  //Edit                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                    //change name                  firstRow.ElementAt("td"' 1).First("input").Clear();                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //update buttons                  firstRow.ElementAt("td"' 4).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check changed name                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 1).First("span")' "Test");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingPrimaryKeyGuid,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingPrimaryKeyGuid);                  //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "9536d712-2e91-43d2-8ebb-93fbec31cf34");                  //Edit                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                    //change name                  firstRow.ElementAt("td"' 1).First("input").Clear();                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //update buttons                  firstRow.ElementAt("td"' 4).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check changed name                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 1).First("span")' "Test");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingPrimaryKeyString,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingPrimaryKeyString);                  //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "A");                  //Edit                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                    //change name                  firstRow.ElementAt("td"' 1).First("input").Clear();                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //update buttons                  firstRow.ElementAt("td"' 4).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check changed name and Id                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "A");                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 1).First("span")' "Test");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingPrimaryKeyString,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingPrimaryKeyString);                  //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "A");                  //Edit                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                    //change name                  firstRow.ElementAt("td"' 1).First("input").Clear();                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //update buttons                  firstRow.ElementAt("td"' 4).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check changed name and Id                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "A");                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 1).First("span")' "Test");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingPrimaryKeyString,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingPrimaryKeyString);                  //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "A");                  //Edit                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                    //change name                  firstRow.ElementAt("td"' 1).First("input").Clear();                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //update buttons                  firstRow.ElementAt("td"' 4).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check changed name and Id                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "A");                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 1).First("span")' "Test");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingPrimaryKeyString,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingPrimaryKeyString);                  //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "A");                  //Edit                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                    //change name                  firstRow.ElementAt("td"' 1).First("input").Clear();                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //update buttons                  firstRow.ElementAt("td"' 4).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check changed name and Id                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "A");                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 1).First("span")' "Test");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingPrimaryKeyString,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingPrimaryKeyString);                  //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "A");                  //Edit                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                    //change name                  firstRow.ElementAt("td"' 1).First("input").Clear();                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //update buttons                  firstRow.ElementAt("td"' 4).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check changed name and Id                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "A");                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 1).First("span")' "Test");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingPrimaryKeyString,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingPrimaryKeyString);                  //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "A");                  //Edit                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                    //change name                  firstRow.ElementAt("td"' 1).First("input").Clear();                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //update buttons                  firstRow.ElementAt("td"' 4).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check changed name and Id                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "A");                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 1).First("span")' "Test");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingPrimaryKeyString,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingPrimaryKeyString);                  //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "A");                  //Edit                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                    //change name                  firstRow.ElementAt("td"' 1).First("input").Clear();                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //update buttons                  firstRow.ElementAt("td"' 4).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check changed name and Id                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "A");                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 1).First("span")' "Test");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingPrimaryKeyString,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingPrimaryKeyString);                  //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "A");                  //Edit                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                    //change name                  firstRow.ElementAt("td"' 1).First("input").Clear();                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //update buttons                  firstRow.ElementAt("td"' 4).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check changed name and Id                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "A");                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 1).First("span")' "Test");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditingPrimaryKeyString,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewInlineEditingPrimaryKeyString);                  //Get rows                  var rows = browser.First("table tbody");                  rows.FindElements("tr").ThrowIfDifferentCountThan(3);                    var firstRow = rows.ElementAt("tr"' 0);                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "A");                  //Edit                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //Check type                  AssertUI.Attribute(firstRow.ElementAt("td"' 1).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 2).First("input")' "type"' "text");                  AssertUI.Attribute(firstRow.ElementAt("td"' 3).First("input")' "type"' "text");                    //change name                  firstRow.ElementAt("td"' 1).First("input").Clear();                  firstRow.ElementAt("td"' 1).First("input").SendKeys("Test");                    //update buttons                  firstRow.ElementAt("td"' 4).FindElements("button").ThrowIfDifferentCountThan(2);                    //update                  firstRow.ElementAt("td"' 4).First("button").Click();                  browser.Wait(500);                    //init again                  rows = browser.First("table tbody");                  firstRow = rows.ElementAt("tr"' 0);                    //check changed name and Id                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 0).First("span")' "A");                  AssertUI.InnerTextEquals(firstRow.ElementAt("td"' 1).First("span")' "Test");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    // click on Cancel button                  firstRow.ElementAt("td"' 3).ElementAt("button"' 1).ScrollTo().Click();                  browser.Wait(500);                    // click the Edit button on another row                  table = browser.ElementAt("table"' tableID);                  var desiredRow = table.ElementAt("tbody tr"' 3);                  desiredRow.ElementAt("td"' 3).Single("button").ScrollTo().Click();                  browser.Wait(500);                    // check if edit row changed                  table = browser.ElementAt("table"' tableID);                  desiredRow = table.ElementAt("tbody tr"' 3);                  AssertUI.IsDisplayed(desiredRow.First("input"));                  desiredRow.FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    // click on Cancel button                  firstRow.ElementAt("td"' 3).ElementAt("button"' 1).ScrollTo().Click();                  browser.Wait(500);                    // click the Edit button on another row                  table = browser.ElementAt("table"' tableID);                  var desiredRow = table.ElementAt("tbody tr"' 3);                  desiredRow.ElementAt("td"' 3).Single("button").ScrollTo().Click();                  browser.Wait(500);                    // check if edit row changed                  table = browser.ElementAt("table"' tableID);                  desiredRow = table.ElementAt("tbody tr"' 3);                  AssertUI.IsDisplayed(desiredRow.First("input"));                  desiredRow.FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    // click on Cancel button                  firstRow.ElementAt("td"' 3).ElementAt("button"' 1).ScrollTo().Click();                  browser.Wait(500);                    // click the Edit button on another row                  table = browser.ElementAt("table"' tableID);                  var desiredRow = table.ElementAt("tbody tr"' 3);                  desiredRow.ElementAt("td"' 3).Single("button").ScrollTo().Click();                  browser.Wait(500);                    // check if edit row changed                  table = browser.ElementAt("table"' tableID);                  desiredRow = table.ElementAt("tbody tr"' 3);                  AssertUI.IsDisplayed(desiredRow.First("input"));                  desiredRow.FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    // click on Cancel button                  firstRow.ElementAt("td"' 3).ElementAt("button"' 1).ScrollTo().Click();                  browser.Wait(500);                    // click the Edit button on another row                  table = browser.ElementAt("table"' tableID);                  var desiredRow = table.ElementAt("tbody tr"' 3);                  desiredRow.ElementAt("td"' 3).Single("button").ScrollTo().Click();                  browser.Wait(500);                    // check if edit row changed                  table = browser.ElementAt("table"' tableID);                  desiredRow = table.ElementAt("tbody tr"' 3);                  AssertUI.IsDisplayed(desiredRow.First("input"));                  desiredRow.FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    // click on Cancel button                  firstRow.ElementAt("td"' 3).ElementAt("button"' 1).ScrollTo().Click();                  browser.Wait(500);                    // click the Edit button on another row                  table = browser.ElementAt("table"' tableID);                  var desiredRow = table.ElementAt("tbody tr"' 3);                  desiredRow.ElementAt("td"' 3).Single("button").ScrollTo().Click();                  browser.Wait(500);                    // check if edit row changed                  table = browser.ElementAt("table"' tableID);                  desiredRow = table.ElementAt("tbody tr"' 3);                  AssertUI.IsDisplayed(desiredRow.First("input"));                  desiredRow.FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    // click on Cancel button                  firstRow.ElementAt("td"' 3).ElementAt("button"' 1).ScrollTo().Click();                  browser.Wait(500);                    // click the Edit button on another row                  table = browser.ElementAt("table"' tableID);                  var desiredRow = table.ElementAt("tbody tr"' 3);                  desiredRow.ElementAt("td"' 3).Single("button").ScrollTo().Click();                  browser.Wait(500);                    // check if edit row changed                  table = browser.ElementAt("table"' tableID);                  desiredRow = table.ElementAt("tbody tr"' 3);                  AssertUI.IsDisplayed(desiredRow.First("input"));                  desiredRow.FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    // click on Cancel button                  firstRow.ElementAt("td"' 3).ElementAt("button"' 1).ScrollTo().Click();                  browser.Wait(500);                    // click the Edit button on another row                  table = browser.ElementAt("table"' tableID);                  var desiredRow = table.ElementAt("tbody tr"' 3);                  desiredRow.ElementAt("td"' 3).Single("button").ScrollTo().Click();                  browser.Wait(500);                    // check if edit row changed                  table = browser.ElementAt("table"' tableID);                  desiredRow = table.ElementAt("tbody tr"' 3);                  AssertUI.IsDisplayed(desiredRow.First("input"));                  desiredRow.FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    // click on Cancel button                  firstRow.ElementAt("td"' 3).ElementAt("button"' 1).ScrollTo().Click();                  browser.Wait(500);                    // click the Edit button on another row                  table = browser.ElementAt("table"' tableID);                  var desiredRow = table.ElementAt("tbody tr"' 3);                  desiredRow.ElementAt("td"' 3).Single("button").ScrollTo().Click();                  browser.Wait(500);                    // check if edit row changed                  table = browser.ElementAt("table"' tableID);                  desiredRow = table.ElementAt("tbody tr"' 3);                  AssertUI.IsDisplayed(desiredRow.First("input"));                  desiredRow.FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    // click on Cancel button                  firstRow.ElementAt("td"' 3).ElementAt("button"' 1).ScrollTo().Click();                  browser.Wait(500);                    // click the Edit button on another row                  table = browser.ElementAt("table"' tableID);                  var desiredRow = table.ElementAt("tbody tr"' 3);                  desiredRow.ElementAt("td"' 3).Single("button").ScrollTo().Click();                  browser.Wait(500);                    // check if edit row changed                  table = browser.ElementAt("table"' tableID);                  desiredRow = table.ElementAt("tbody tr"' 3);                  AssertUI.IsDisplayed(desiredRow.First("input"));                  desiredRow.FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    // click on Cancel button                  firstRow.ElementAt("td"' 3).ElementAt("button"' 1).ScrollTo().Click();                  browser.Wait(500);                    // click the Edit button on another row                  table = browser.ElementAt("table"' tableID);                  var desiredRow = table.ElementAt("tbody tr"' 3);                  desiredRow.ElementAt("td"' 3).Single("button").ScrollTo().Click();                  browser.Wait(500);                    // check if edit row changed                  table = browser.ElementAt("table"' tableID);                  desiredRow = table.ElementAt("tbody tr"' 3);                  AssertUI.IsDisplayed(desiredRow.First("input"));                  desiredRow.FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    // click on Cancel button                  firstRow.ElementAt("td"' 3).ElementAt("button"' 1).ScrollTo().Click();                  browser.Wait(500);                    // click the Edit button on another row                  table = browser.ElementAt("table"' tableID);                  var desiredRow = table.ElementAt("tbody tr"' 3);                  desiredRow.ElementAt("td"' 3).Single("button").ScrollTo().Click();                  browser.Wait(500);                    // check if edit row changed                  table = browser.ElementAt("table"' tableID);                  desiredRow = table.ElementAt("tbody tr"' 3);                  AssertUI.IsDisplayed(desiredRow.First("input"));                  desiredRow.FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    // click on Cancel button                  firstRow.ElementAt("td"' 3).ElementAt("button"' 1).ScrollTo().Click();                  browser.Wait(500);                    // click the Edit button on another row                  table = browser.ElementAt("table"' tableID);                  var desiredRow = table.ElementAt("tbody tr"' 3);                  desiredRow.ElementAt("td"' 3).Single("button").ScrollTo().Click();                  browser.Wait(500);                    // check if edit row changed                  table = browser.ElementAt("table"' tableID);                  desiredRow = table.ElementAt("tbody tr"' 3);                  AssertUI.IsDisplayed(desiredRow.First("input"));                  desiredRow.FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing_PagingWhenEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.Refresh();                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    //page to second page                  var navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "2").Click();                  browser.Wait(500);                    table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "11");                    //page to back                  navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "1").Click();                  browser.Wait(500);                    //after page back check edit row                  table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing_PagingWhenEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.Refresh();                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    //page to second page                  var navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "2").Click();                  browser.Wait(500);                    table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "11");                    //page to back                  navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "1").Click();                  browser.Wait(500);                    //after page back check edit row                  table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing_PagingWhenEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.Refresh();                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    //page to second page                  var navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "2").Click();                  browser.Wait(500);                    table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "11");                    //page to back                  navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "1").Click();                  browser.Wait(500);                    //after page back check edit row                  table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing_PagingWhenEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.Refresh();                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    //page to second page                  var navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "2").Click();                  browser.Wait(500);                    table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "11");                    //page to back                  navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "1").Click();                  browser.Wait(500);                    //after page back check edit row                  table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing_PagingWhenEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.Refresh();                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    //page to second page                  var navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "2").Click();                  browser.Wait(500);                    table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "11");                    //page to back                  navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "1").Click();                  browser.Wait(500);                    //after page back check edit row                  table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing_PagingWhenEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.Refresh();                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    //page to second page                  var navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "2").Click();                  browser.Wait(500);                    table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "11");                    //page to back                  navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "1").Click();                  browser.Wait(500);                    //after page back check edit row                  table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing_PagingWhenEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.Refresh();                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    //page to second page                  var navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "2").Click();                  browser.Wait(500);                    table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "11");                    //page to back                  navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "1").Click();                  browser.Wait(500);                    //after page back check edit row                  table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing_PagingWhenEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.Refresh();                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    //page to second page                  var navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "2").Click();                  browser.Wait(500);                    table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "11");                    //page to back                  navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "1").Click();                  browser.Wait(500);                    //after page back check edit row                  table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing_PagingWhenEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.Refresh();                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    //page to second page                  var navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "2").Click();                  browser.Wait(500);                    table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "11");                    //page to back                  navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "1").Click();                  browser.Wait(500);                    //after page back check edit row                  table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewInlineEditing_PagingWhenEditing,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.Refresh();                  browser.NavigateToUrl(path);                    // get table                  var table = browser.ElementAt("table"' tableID);                    //check rows                  table.FindElements("tbody tr").ThrowIfDifferentCountThan(10);                    // check whether the first row is in edit mode                  var firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);                    // check if right number of testboxs are displayed => IsEditable works                  table.FindElements("tbody tr td input").ThrowIfDifferentCountThan(2);                    //page to second page                  var navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "2").Click();                  browser.Wait(500);                    table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "11");                    //page to back                  navigation = browser.ElementAt(".pagination"' 0);                  navigation.FindElements("li a").Single(s => s.GetText() == "1").Click();                  browser.Wait(500);                    //after page back check edit row                  table = browser.ElementAt("table"' tableID);                  firstRow = table.First("tbody tr");                  AssertUI.InnerTextEquals(firstRow.First("td")' "1");                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 1).Single("input"));                  AssertUI.IsDisplayed(firstRow.ElementAt("td"' 2).Single("input"));                  firstRow.ElementAt("td"' 3).FindElements("button").ThrowIfDifferentCountThan(2);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewPagingSortingBase,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(path);                  browser.ActionWaitTime = 500;                    System.Action performTest = () =>                  {                      //// make sure that thirs row's first cell is yellow                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' s => s.Equals(""));                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' 2).ElementAt("td"' 0)' s => s.Equals("alternate"));                        //// go to second page                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "1");                      browser.ElementAt("ul"' 0).FindElements("li a").Single(s => s.GetText() == "2").Click();                      browser.Wait();                        //// go to previous page                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "11");                      browser.ElementAt("ul"' 0).FindElements("li a").Single(s => s.GetText() == "««").Click();                      browser.Wait();                        //// go to next page                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "1");                      browser.ElementAt("ul"' 0).FindElements("li a").Single(s => s.GetText() == "»»").Click();                      browser.Wait();                        //// try the disabled link - nothing should happen                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "11");                      browser.ElementAt("ul"' 0).FindElements("li a").Single(s => s.GetText() == "»»").Click();                      browser.Wait();                        AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "11");                        // try sorting in the first grid                      browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 2).ElementAt("button"' 0).Click();                      browser.Wait();                      browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 1).ElementAt("a"' 0).Click();                      browser.Wait();                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 1)' "sort-asc");                        browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 0).ElementAt("a"' 0).Click();                      browser.Wait();                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "1");                        //// sort descending in the first grid                      browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 1).ElementAt("a"' 0).Click();                      browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 1).ElementAt("a"' 0).Click();                      browser.Wait();                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 1)' "sort-desc");                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "16");                        //// sort by different column in the first grid                      browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 0).ElementAt("a"' 0).Click();                      browser.Wait();                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "1");                  };                    Control_GridViewShowHeaderWhenNoData(browser);                    browser.Wait();                  performTest();                  browser.Wait();                  browser.NavigateToUrl();                  browser.Wait();                  browser.NavigateBack();                  browser.Wait();                  performTest();              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewPagingSortingBase,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(path);                  browser.ActionWaitTime = 500;                    System.Action performTest = () =>                  {                      //// make sure that thirs row's first cell is yellow                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' s => s.Equals(""));                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' 2).ElementAt("td"' 0)' s => s.Equals("alternate"));                        //// go to second page                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "1");                      browser.ElementAt("ul"' 0).FindElements("li a").Single(s => s.GetText() == "2").Click();                      browser.Wait();                        //// go to previous page                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "11");                      browser.ElementAt("ul"' 0).FindElements("li a").Single(s => s.GetText() == "««").Click();                      browser.Wait();                        //// go to next page                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "1");                      browser.ElementAt("ul"' 0).FindElements("li a").Single(s => s.GetText() == "»»").Click();                      browser.Wait();                        //// try the disabled link - nothing should happen                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "11");                      browser.ElementAt("ul"' 0).FindElements("li a").Single(s => s.GetText() == "»»").Click();                      browser.Wait();                        AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "11");                        // try sorting in the first grid                      browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 2).ElementAt("button"' 0).Click();                      browser.Wait();                      browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 1).ElementAt("a"' 0).Click();                      browser.Wait();                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 1)' "sort-asc");                        browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 0).ElementAt("a"' 0).Click();                      browser.Wait();                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "1");                        //// sort descending in the first grid                      browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 1).ElementAt("a"' 0).Click();                      browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 1).ElementAt("a"' 0).Click();                      browser.Wait();                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 1)' "sort-desc");                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "16");                        //// sort by different column in the first grid                      browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 0).ElementAt("a"' 0).Click();                      browser.Wait();                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "1");                  };                    Control_GridViewShowHeaderWhenNoData(browser);                    browser.Wait();                  performTest();                  browser.Wait();                  browser.NavigateToUrl();                  browser.Wait();                  browser.NavigateBack();                  browser.Wait();                  performTest();              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewPagingSortingBase,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(path);                  browser.ActionWaitTime = 500;                    System.Action performTest = () =>                  {                      //// make sure that thirs row's first cell is yellow                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' s => s.Equals(""));                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' 2).ElementAt("td"' 0)' s => s.Equals("alternate"));                        //// go to second page                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "1");                      browser.ElementAt("ul"' 0).FindElements("li a").Single(s => s.GetText() == "2").Click();                      browser.Wait();                        //// go to previous page                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "11");                      browser.ElementAt("ul"' 0).FindElements("li a").Single(s => s.GetText() == "««").Click();                      browser.Wait();                        //// go to next page                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "1");                      browser.ElementAt("ul"' 0).FindElements("li a").Single(s => s.GetText() == "»»").Click();                      browser.Wait();                        //// try the disabled link - nothing should happen                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "11");                      browser.ElementAt("ul"' 0).FindElements("li a").Single(s => s.GetText() == "»»").Click();                      browser.Wait();                        AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "11");                        // try sorting in the first grid                      browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 2).ElementAt("button"' 0).Click();                      browser.Wait();                      browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 1).ElementAt("a"' 0).Click();                      browser.Wait();                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 1)' "sort-asc");                        browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 0).ElementAt("a"' 0).Click();                      browser.Wait();                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "1");                        //// sort descending in the first grid                      browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 1).ElementAt("a"' 0).Click();                      browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 1).ElementAt("a"' 0).Click();                      browser.Wait();                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 1)' "sort-desc");                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "16");                        //// sort by different column in the first grid                      browser.ElementAt("table"' 0).ElementAt("tr"' 0).ElementAt("th"' 0).ElementAt("a"' 0).Click();                      browser.Wait();                      AssertUI.InnerTextEquals(browser.ElementAt("table"' 0).ElementAt("tr"' 1).ElementAt("td"' 0)' "1");                  };                    Control_GridViewShowHeaderWhenNoData(browser);                    browser.Wait();                  performTest();                  browser.Wait();                  browser.NavigateToUrl();                  browser.Wait();                  browser.NavigateBack();                  browser.Wait();                  performTest();              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewRowDecorators,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.ElementAt("table"' 0).FindElements("tr").ThrowIfDifferentCountThan(6);                  browser.ElementAt("table"' 1).FindElements("tr").ThrowIfDifferentCountThan(6);                    // check that clicking selects the row which gets the 'selected' class                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 3).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 3));                  }                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 2).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 2));                  }                    // check that the edit row has the 'edit' class while the other rows have the 'normal' class                  for (int i = 1; i < 6; i++)                  {                      if (i != 2)                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "normal");                          AssertUI.HasNotClass(elementWrapper' "edit");                      }                      else                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "edit");                          AssertUI.HasNotClass(elementWrapper' "normal");                      }                  }              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewRowDecorators,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.ElementAt("table"' 0).FindElements("tr").ThrowIfDifferentCountThan(6);                  browser.ElementAt("table"' 1).FindElements("tr").ThrowIfDifferentCountThan(6);                    // check that clicking selects the row which gets the 'selected' class                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 3).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 3));                  }                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 2).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 2));                  }                    // check that the edit row has the 'edit' class while the other rows have the 'normal' class                  for (int i = 1; i < 6; i++)                  {                      if (i != 2)                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "normal");                          AssertUI.HasNotClass(elementWrapper' "edit");                      }                      else                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "edit");                          AssertUI.HasNotClass(elementWrapper' "normal");                      }                  }              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewRowDecorators,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.ElementAt("table"' 0).FindElements("tr").ThrowIfDifferentCountThan(6);                  browser.ElementAt("table"' 1).FindElements("tr").ThrowIfDifferentCountThan(6);                    // check that clicking selects the row which gets the 'selected' class                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 3).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 3));                  }                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 2).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 2));                  }                    // check that the edit row has the 'edit' class while the other rows have the 'normal' class                  for (int i = 1; i < 6; i++)                  {                      if (i != 2)                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "normal");                          AssertUI.HasNotClass(elementWrapper' "edit");                      }                      else                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "edit");                          AssertUI.HasNotClass(elementWrapper' "normal");                      }                  }              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewRowDecorators,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.ElementAt("table"' 0).FindElements("tr").ThrowIfDifferentCountThan(6);                  browser.ElementAt("table"' 1).FindElements("tr").ThrowIfDifferentCountThan(6);                    // check that clicking selects the row which gets the 'selected' class                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 3).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 3));                  }                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 2).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 2));                  }                    // check that the edit row has the 'edit' class while the other rows have the 'normal' class                  for (int i = 1; i < 6; i++)                  {                      if (i != 2)                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "normal");                          AssertUI.HasNotClass(elementWrapper' "edit");                      }                      else                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "edit");                          AssertUI.HasNotClass(elementWrapper' "normal");                      }                  }              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewRowDecorators,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.ElementAt("table"' 0).FindElements("tr").ThrowIfDifferentCountThan(6);                  browser.ElementAt("table"' 1).FindElements("tr").ThrowIfDifferentCountThan(6);                    // check that clicking selects the row which gets the 'selected' class                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 3).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 3));                  }                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 2).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 2));                  }                    // check that the edit row has the 'edit' class while the other rows have the 'normal' class                  for (int i = 1; i < 6; i++)                  {                      if (i != 2)                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "normal");                          AssertUI.HasNotClass(elementWrapper' "edit");                      }                      else                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "edit");                          AssertUI.HasNotClass(elementWrapper' "normal");                      }                  }              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewRowDecorators,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.ElementAt("table"' 0).FindElements("tr").ThrowIfDifferentCountThan(6);                  browser.ElementAt("table"' 1).FindElements("tr").ThrowIfDifferentCountThan(6);                    // check that clicking selects the row which gets the 'selected' class                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 3).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 3));                  }                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 2).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 2));                  }                    // check that the edit row has the 'edit' class while the other rows have the 'normal' class                  for (int i = 1; i < 6; i++)                  {                      if (i != 2)                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "normal");                          AssertUI.HasNotClass(elementWrapper' "edit");                      }                      else                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "edit");                          AssertUI.HasNotClass(elementWrapper' "normal");                      }                  }              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewRowDecorators,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.ElementAt("table"' 0).FindElements("tr").ThrowIfDifferentCountThan(6);                  browser.ElementAt("table"' 1).FindElements("tr").ThrowIfDifferentCountThan(6);                    // check that clicking selects the row which gets the 'selected' class                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 3).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 3));                  }                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 2).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 2));                  }                    // check that the edit row has the 'edit' class while the other rows have the 'normal' class                  for (int i = 1; i < 6; i++)                  {                      if (i != 2)                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "normal");                          AssertUI.HasNotClass(elementWrapper' "edit");                      }                      else                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "edit");                          AssertUI.HasNotClass(elementWrapper' "normal");                      }                  }              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewRowDecorators,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.ElementAt("table"' 0).FindElements("tr").ThrowIfDifferentCountThan(6);                  browser.ElementAt("table"' 1).FindElements("tr").ThrowIfDifferentCountThan(6);                    // check that clicking selects the row which gets the 'selected' class                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 3).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 3));                  }                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 2).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 2));                  }                    // check that the edit row has the 'edit' class while the other rows have the 'normal' class                  for (int i = 1; i < 6; i++)                  {                      if (i != 2)                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "normal");                          AssertUI.HasNotClass(elementWrapper' "edit");                      }                      else                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "edit");                          AssertUI.HasNotClass(elementWrapper' "normal");                      }                  }              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewRowDecorators,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.ElementAt("table"' 0).FindElements("tr").ThrowIfDifferentCountThan(6);                  browser.ElementAt("table"' 1).FindElements("tr").ThrowIfDifferentCountThan(6);                    // check that clicking selects the row which gets the 'selected' class                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 3).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 3));                  }                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 2).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 2));                  }                    // check that the edit row has the 'edit' class while the other rows have the 'normal' class                  for (int i = 1; i < 6; i++)                  {                      if (i != 2)                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "normal");                          AssertUI.HasNotClass(elementWrapper' "edit");                      }                      else                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "edit");                          AssertUI.HasNotClass(elementWrapper' "normal");                      }                  }              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewRowDecorators,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.ElementAt("table"' 0).FindElements("tr").ThrowIfDifferentCountThan(6);                  browser.ElementAt("table"' 1).FindElements("tr").ThrowIfDifferentCountThan(6);                    // check that clicking selects the row which gets the 'selected' class                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 3).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 3));                  }                  // we dont want to check if element is clickable' it is not a button just fire click event                  browser.ElementAt("tr"' 2).ElementAt("td"' 0).Click();                  browser.Wait();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.ClassAttribute(browser.ElementAt("table"' 0).ElementAt("tr"' i)' v => v.Contains("selected") == (i == 2));                  }                    // check that the edit row has the 'edit' class while the other rows have the 'normal' class                  for (int i = 1; i < 6; i++)                  {                      if (i != 2)                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "normal");                          AssertUI.HasNotClass(elementWrapper' "edit");                      }                      else                      {                          var elementWrapper = browser.ElementAt("table"' 1).ElementAt("tr"' i);                          AssertUI.HasClass(elementWrapper' "edit");                          AssertUI.HasNotClass(elementWrapper' "normal");                      }                  }              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewRowDecorators_ClickPropagation,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.Wait();                    browser.ElementAt("table"' 0).ElementAt("tr"' 4).First("input[type=button]").Click().Wait();                  AssertUI.HasNotClass(browser.ElementAt("table"' 0).ElementAt("tr"' 4)' "selected");                  AssertUI.InnerText(browser.ElementAt("table"' 0).ElementAt("tr"' 4).ElementAt("td"' 1)' t => t == "xxx");                    browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.Wait();                    browser.ElementAt("table"' 0).ElementAt("tr"' 4).First("a").Click().Wait();                  AssertUI.HasNotClass(browser.ElementAt("table"' 0).ElementAt("tr"' 4)' "selected");                  AssertUI.InnerText(browser.ElementAt("table"' 0).ElementAt("tr"' 4).ElementAt("td"' 1)' t => t == "xxx");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewRowDecorators_ClickPropagation,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.Wait();                    browser.ElementAt("table"' 0).ElementAt("tr"' 4).First("input[type=button]").Click().Wait();                  AssertUI.HasNotClass(browser.ElementAt("table"' 0).ElementAt("tr"' 4)' "selected");                  AssertUI.InnerText(browser.ElementAt("table"' 0).ElementAt("tr"' 4).ElementAt("td"' 1)' t => t == "xxx");                    browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.Wait();                    browser.ElementAt("table"' 0).ElementAt("tr"' 4).First("a").Click().Wait();                  AssertUI.HasNotClass(browser.ElementAt("table"' 0).ElementAt("tr"' 4)' "selected");                  AssertUI.InnerText(browser.ElementAt("table"' 0).ElementAt("tr"' 4).ElementAt("td"' 1)' t => t == "xxx");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewRowDecorators_ClickPropagation,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.Wait();                    browser.ElementAt("table"' 0).ElementAt("tr"' 4).First("input[type=button]").Click().Wait();                  AssertUI.HasNotClass(browser.ElementAt("table"' 0).ElementAt("tr"' 4)' "selected");                  AssertUI.InnerText(browser.ElementAt("table"' 0).ElementAt("tr"' 4).ElementAt("td"' 1)' t => t == "xxx");                    browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.Wait();                    browser.ElementAt("table"' 0).ElementAt("tr"' 4).First("a").Click().Wait();                  AssertUI.HasNotClass(browser.ElementAt("table"' 0).ElementAt("tr"' 4)' "selected");                  AssertUI.InnerText(browser.ElementAt("table"' 0).ElementAt("tr"' 4).ElementAt("td"' 1)' t => t == "xxx");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewRowDecorators_ClickPropagation,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.Wait();                    browser.ElementAt("table"' 0).ElementAt("tr"' 4).First("input[type=button]").Click().Wait();                  AssertUI.HasNotClass(browser.ElementAt("table"' 0).ElementAt("tr"' 4)' "selected");                  AssertUI.InnerText(browser.ElementAt("table"' 0).ElementAt("tr"' 4).ElementAt("td"' 1)' t => t == "xxx");                    browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.Wait();                    browser.ElementAt("table"' 0).ElementAt("tr"' 4).First("a").Click().Wait();                  AssertUI.HasNotClass(browser.ElementAt("table"' 0).ElementAt("tr"' 4)' "selected");                  AssertUI.InnerText(browser.ElementAt("table"' 0).ElementAt("tr"' 4).ElementAt("td"' 1)' t => t == "xxx");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewRowDecorators_ClickPropagation,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.Wait();                    browser.ElementAt("table"' 0).ElementAt("tr"' 4).First("input[type=button]").Click().Wait();                  AssertUI.HasNotClass(browser.ElementAt("table"' 0).ElementAt("tr"' 4)' "selected");                  AssertUI.InnerText(browser.ElementAt("table"' 0).ElementAt("tr"' 4).ElementAt("td"' 1)' t => t == "xxx");                    browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.Wait();                    browser.ElementAt("table"' 0).ElementAt("tr"' 4).First("a").Click().Wait();                  AssertUI.HasNotClass(browser.ElementAt("table"' 0).ElementAt("tr"' 4)' "selected");                  AssertUI.InnerText(browser.ElementAt("table"' 0).ElementAt("tr"' 4).ElementAt("td"' 1)' t => t == "xxx");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_GridViewRowDecorators_ClickPropagation,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.Wait();                    browser.ElementAt("table"' 0).ElementAt("tr"' 4).First("input[type=button]").Click().Wait();                  AssertUI.HasNotClass(browser.ElementAt("table"' 0).ElementAt("tr"' 4)' "selected");                  AssertUI.InnerText(browser.ElementAt("table"' 0).ElementAt("tr"' 4).ElementAt("td"' 1)' t => t == "xxx");                    browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_GridViewRowDecorators);                  browser.Wait();                    browser.ElementAt("table"' 0).ElementAt("tr"' 4).First("a").Click().Wait();                  AssertUI.HasNotClass(browser.ElementAt("table"' 0).ElementAt("tr"' 4)' "selected");                  AssertUI.InnerText(browser.ElementAt("table"' 0).ElementAt("tr"' 4).ElementAt("td"' 1)' t => t == "xxx");              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_ColumnVisible,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_ColumnVisible);                  browser.Wait();                    // check that columns are visible                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }                    // check that columns are hidden                  browser.First("input[type=checkbox]").Click();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsNotDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsNotDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }                    // check that columns are visible again                  browser.First("input[type=checkbox]").Click();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_ColumnVisible,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_ColumnVisible);                  browser.Wait();                    // check that columns are visible                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }                    // check that columns are hidden                  browser.First("input[type=checkbox]").Click();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsNotDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsNotDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }                    // check that columns are visible again                  browser.First("input[type=checkbox]").Click();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_ColumnVisible,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_ColumnVisible);                  browser.Wait();                    // check that columns are visible                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }                    // check that columns are hidden                  browser.First("input[type=checkbox]").Click();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsNotDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsNotDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }                    // check that columns are visible again                  browser.First("input[type=checkbox]").Click();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_ColumnVisible,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_ColumnVisible);                  browser.Wait();                    // check that columns are visible                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }                    // check that columns are hidden                  browser.First("input[type=checkbox]").Click();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsNotDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsNotDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }                    // check that columns are visible again                  browser.First("input[type=checkbox]").Click();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_ColumnVisible,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_ColumnVisible);                  browser.Wait();                    // check that columns are visible                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }                    // check that columns are hidden                  browser.First("input[type=checkbox]").Click();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsNotDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsNotDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }                    // check that columns are visible again                  browser.First("input[type=checkbox]").Click();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_ColumnVisible,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_ColumnVisible);                  browser.Wait();                    // check that columns are visible                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }                    // check that columns are hidden                  browser.First("input[type=checkbox]").Click();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsNotDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsNotDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }                    // check that columns are visible again                  browser.First("input[type=checkbox]").Click();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_ColumnVisible,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_ColumnVisible);                  browser.Wait();                    // check that columns are visible                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }                    // check that columns are hidden                  browser.First("input[type=checkbox]").Click();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsNotDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsNotDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }                    // check that columns are visible again                  browser.First("input[type=checkbox]").Click();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_ColumnVisible,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_ColumnVisible);                  browser.Wait();                    // check that columns are visible                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }                    // check that columns are hidden                  browser.First("input[type=checkbox]").Click();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsNotDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsNotDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }                    // check that columns are visible again                  browser.First("input[type=checkbox]").Click();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_ColumnVisible,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_ColumnVisible);                  browser.Wait();                    // check that columns are visible                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }                    // check that columns are hidden                  browser.First("input[type=checkbox]").Click();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsNotDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsNotDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }                    // check that columns are visible again                  browser.First("input[type=checkbox]").Click();                  for (int i = 0; i < 6; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 0).ElementAt("tr"' i).ElementAt("td'th"' 2));                  }                  for (int i = 0; i < 2; i++)                  {                      AssertUI.IsDisplayed(browser.ElementAt("table"' 1).ElementAt("tr"' i).ElementAt("td'th"' 1));                  }              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_LargeGrid,The following statement contains a magic number: const int RowCount = 1000;
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_LargeGrid,The following statement contains a magic number: const int ColumnCount = 28;
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_RenamedPrimaryKey,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_RenamedPrimaryKey);                  browser.WaitUntilDotvvmInited();                    var gridview = browser.Single("gridview"' SelectByDataUi);                  AssertUI.NotContainsElement(gridview' "input");                    browser.First("edit-button"' SelectByDataUi).Click();                  browser.WaitFor(() => AssertUI.ContainsElement(gridview' "input")' 1000);                    browser.First("save-button"' SelectByDataUi).Click();                  browser.WaitFor(() => AssertUI.NotContainsElement(gridview' "input")' 1000);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_RenamedPrimaryKey,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_RenamedPrimaryKey);                  browser.WaitUntilDotvvmInited();                    var gridview = browser.Single("gridview"' SelectByDataUi);                  AssertUI.NotContainsElement(gridview' "input");                    browser.First("edit-button"' SelectByDataUi).Click();                  browser.WaitFor(() => AssertUI.ContainsElement(gridview' "input")' 1000);                    browser.First("save-button"' SelectByDataUi).Click();                  browser.WaitFor(() => AssertUI.NotContainsElement(gridview' "input")' 1000);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_InvalidCssClass_TextBox_Attached,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_InvalidCssClass);                  browser.WaitUntilDotvvmInited();                    var gridview = browser.Single("gridview"' SelectByDataUi);                  gridview.First("edit-button"' SelectByDataUi).Click();                    IElementWrapper textbox = null;                  browser.WaitFor(() => textbox = browser.First(".name-attached > input")' 1000);                  AssertUI.HasNotClass(textbox' "invalid");                  textbox.Clear();                    gridview.First("save-button"' SelectByDataUi).Click();                  browser.WaitFor(() => AssertUI.HasClass(textbox' "invalid")' 1000);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_InvalidCssClass_TextBox_Attached,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_InvalidCssClass);                  browser.WaitUntilDotvvmInited();                    var gridview = browser.Single("gridview"' SelectByDataUi);                  gridview.First("edit-button"' SelectByDataUi).Click();                    IElementWrapper textbox = null;                  browser.WaitFor(() => textbox = browser.First(".name-attached > input")' 1000);                  AssertUI.HasNotClass(textbox' "invalid");                  textbox.Clear();                    gridview.First("save-button"' SelectByDataUi).Click();                  browser.WaitFor(() => AssertUI.HasClass(textbox' "invalid")' 1000);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_InvalidCssClass_TextBox_Both,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_InvalidCssClass);                  browser.WaitUntilDotvvmInited();                    var gridview = browser.Single("gridview"' SelectByDataUi);                  gridview.First("edit-button"' SelectByDataUi).Click();                    IElementWrapper textbox = null;                  IElementWrapper validator = null;                  browser.WaitFor(() => textbox = browser.First(".name-attached-standalone > input")' 1000);                  browser.WaitFor(() => validator = browser.First(".name-attached-standalone > span")' 1000);                  AssertUI.HasNotClass(textbox' "invalid");                  AssertUI.HasNotClass(validator' "invalid");                  textbox.Clear();                    gridview.First("save-button"' SelectByDataUi).Click();                  browser.WaitFor(() => AssertUI.HasClass(textbox' "invalid")' 1000);                  browser.WaitFor(() => AssertUI.HasClass(validator' "invalid")' 1000);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_InvalidCssClass_TextBox_Both,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_InvalidCssClass);                  browser.WaitUntilDotvvmInited();                    var gridview = browser.Single("gridview"' SelectByDataUi);                  gridview.First("edit-button"' SelectByDataUi).Click();                    IElementWrapper textbox = null;                  IElementWrapper validator = null;                  browser.WaitFor(() => textbox = browser.First(".name-attached-standalone > input")' 1000);                  browser.WaitFor(() => validator = browser.First(".name-attached-standalone > span")' 1000);                  AssertUI.HasNotClass(textbox' "invalid");                  AssertUI.HasNotClass(validator' "invalid");                  textbox.Clear();                    gridview.First("save-button"' SelectByDataUi).Click();                  browser.WaitFor(() => AssertUI.HasClass(textbox' "invalid")' 1000);                  browser.WaitFor(() => AssertUI.HasClass(validator' "invalid")' 1000);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_InvalidCssClass_TextBox_Both,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_InvalidCssClass);                  browser.WaitUntilDotvvmInited();                    var gridview = browser.Single("gridview"' SelectByDataUi);                  gridview.First("edit-button"' SelectByDataUi).Click();                    IElementWrapper textbox = null;                  IElementWrapper validator = null;                  browser.WaitFor(() => textbox = browser.First(".name-attached-standalone > input")' 1000);                  browser.WaitFor(() => validator = browser.First(".name-attached-standalone > span")' 1000);                  AssertUI.HasNotClass(textbox' "invalid");                  AssertUI.HasNotClass(validator' "invalid");                  textbox.Clear();                    gridview.First("save-button"' SelectByDataUi).Click();                  browser.WaitFor(() => AssertUI.HasClass(textbox' "invalid")' 1000);                  browser.WaitFor(() => AssertUI.HasClass(validator' "invalid")' 1000);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_InvalidCssClass_TextBox_Both,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_InvalidCssClass);                  browser.WaitUntilDotvvmInited();                    var gridview = browser.Single("gridview"' SelectByDataUi);                  gridview.First("edit-button"' SelectByDataUi).Click();                    IElementWrapper textbox = null;                  IElementWrapper validator = null;                  browser.WaitFor(() => textbox = browser.First(".name-attached-standalone > input")' 1000);                  browser.WaitFor(() => validator = browser.First(".name-attached-standalone > span")' 1000);                  AssertUI.HasNotClass(textbox' "invalid");                  AssertUI.HasNotClass(validator' "invalid");                  textbox.Clear();                    gridview.First("save-button"' SelectByDataUi).Click();                  browser.WaitFor(() => AssertUI.HasClass(textbox' "invalid")' 1000);                  browser.WaitFor(() => AssertUI.HasClass(validator' "invalid")' 1000);              });
Magic Number,DotVVM.Samples.Tests.Control,GridViewTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\GridViewTests.cs,Control_GridView_InvalidCssClass_CheckBox,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_GridView_InvalidCssClass);                  browser.WaitUntilDotvvmInited();                    var gridview = browser.Single("gridview"' SelectByDataUi);                  AssertUI.HasNotClass(gridview.First(".is-standalone > span")' "invalid");                    gridview.First("edit-button"' SelectByDataUi).Click();                  var checkBox = browser.First(".is-standalone > input");                  checkBox.Click();                  gridview.First("save-button"' SelectByDataUi).Click();                  browser.WaitFor(() => AssertUI.HasClass(gridview.First(".is-standalone > span")' "invalid")' 1000);              });
Magic Number,DotVVM.Samples.Tests.Control,IncludeInPagePropertyTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\IncludeInPagePropertyTests.cs,Control_IncludeInPageProperty_IncludeInPage_LiteralsInRepeater,The following statement contains a magic number: CheckIncludeInPage(browser => {                  var literals = browser.FindElements("literal-repeater"' this.SelectByDataUi);                  Assert.AreEqual(3' literals.Count);                  foreach (var literal in literals)                  {                      AssertUI.IsDisplayed(literal);                  }              }' browser => {                  Assert.AreEqual(0' browser.FindElements("literal-repeater"' this.SelectByDataUi).Count);              });
Magic Number,DotVVM.Samples.Tests.Control,LiteralTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\LiteralTests.cs,Control_Literal_Literal,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Literal_Literal);                    foreach (var column in browser.FindElements("td"))                  {                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 0).Single("span")' "Hardcoded value");                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 1).Single("span")' "Hello");                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 2).Single("span")' "1/1/2000");                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 3)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 3)' text => text.Contains("Hardcoded value"));                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 4)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 4)' text => text.Contains("Hello"));                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 5)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 5)' text => text.Contains("1/1/2000"));                  }              });
Magic Number,DotVVM.Samples.Tests.Control,LiteralTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\LiteralTests.cs,Control_Literal_Literal,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Literal_Literal);                    foreach (var column in browser.FindElements("td"))                  {                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 0).Single("span")' "Hardcoded value");                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 1).Single("span")' "Hello");                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 2).Single("span")' "1/1/2000");                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 3)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 3)' text => text.Contains("Hardcoded value"));                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 4)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 4)' text => text.Contains("Hello"));                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 5)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 5)' text => text.Contains("1/1/2000"));                  }              });
Magic Number,DotVVM.Samples.Tests.Control,LiteralTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\LiteralTests.cs,Control_Literal_Literal,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Literal_Literal);                    foreach (var column in browser.FindElements("td"))                  {                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 0).Single("span")' "Hardcoded value");                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 1).Single("span")' "Hello");                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 2).Single("span")' "1/1/2000");                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 3)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 3)' text => text.Contains("Hardcoded value"));                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 4)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 4)' text => text.Contains("Hello"));                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 5)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 5)' text => text.Contains("1/1/2000"));                  }              });
Magic Number,DotVVM.Samples.Tests.Control,LiteralTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\LiteralTests.cs,Control_Literal_Literal,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Literal_Literal);                    foreach (var column in browser.FindElements("td"))                  {                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 0).Single("span")' "Hardcoded value");                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 1).Single("span")' "Hello");                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 2).Single("span")' "1/1/2000");                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 3)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 3)' text => text.Contains("Hardcoded value"));                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 4)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 4)' text => text.Contains("Hello"));                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 5)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 5)' text => text.Contains("1/1/2000"));                  }              });
Magic Number,DotVVM.Samples.Tests.Control,LiteralTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\LiteralTests.cs,Control_Literal_Literal,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Literal_Literal);                    foreach (var column in browser.FindElements("td"))                  {                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 0).Single("span")' "Hardcoded value");                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 1).Single("span")' "Hello");                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 2).Single("span")' "1/1/2000");                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 3)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 3)' text => text.Contains("Hardcoded value"));                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 4)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 4)' text => text.Contains("Hello"));                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 5)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 5)' text => text.Contains("1/1/2000"));                  }              });
Magic Number,DotVVM.Samples.Tests.Control,LiteralTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\LiteralTests.cs,Control_Literal_Literal,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Literal_Literal);                    foreach (var column in browser.FindElements("td"))                  {                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 0).Single("span")' "Hardcoded value");                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 1).Single("span")' "Hello");                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 2).Single("span")' "1/1/2000");                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 3)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 3)' text => text.Contains("Hardcoded value"));                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 4)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 4)' text => text.Contains("Hello"));                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 5)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 5)' text => text.Contains("1/1/2000"));                  }              });
Magic Number,DotVVM.Samples.Tests.Control,LiteralTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\LiteralTests.cs,Control_Literal_Literal,The following statement contains a magic number: RunInAllBrowsers(browser =>              {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Literal_Literal);                    foreach (var column in browser.FindElements("td"))                  {                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 0).Single("span")' "Hardcoded value");                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 1).Single("span")' "Hello");                      AssertUI.InnerTextEquals(column.ElementAt("fieldset"' 2).Single("span")' "1/1/2000");                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 3)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 3)' text => text.Contains("Hardcoded value"));                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 4)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 4)' text => text.Contains("Hello"));                        AssertUI.NotContainsElement(column.ElementAt("fieldset"' 5)' "span");                      AssertUI.InnerText(column.ElementAt("fieldset"' 5)' text => text.Contains("1/1/2000"));                  }              });
Magic Number,DotVVM.Samples.Tests.Control,MultiSelectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\MultiSelectTests.cs,Control_MultiSelect_Binded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_MultiSelect_binded);                    var multiselect = browser.First("binded-multiselect"' SelectByDataUi);                  var selectedValues = browser.First("selected-values"' SelectByDataUi);                    AssertUI.IsDisplayed(multiselect.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha")' 2000' 30);                    // select second option from combobox                  multiselect.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha Brno")' 1000' 30);                    // select third option from combobox                  multiselect.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha Brno Napajedla")' 1000' 30);                    // select third option from combobox                  multiselect.Children[0].Click();                  multiselect.Children[1].Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Napajedla")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,MultiSelectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\MultiSelectTests.cs,Control_MultiSelect_Binded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_MultiSelect_binded);                    var multiselect = browser.First("binded-multiselect"' SelectByDataUi);                  var selectedValues = browser.First("selected-values"' SelectByDataUi);                    AssertUI.IsDisplayed(multiselect.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha")' 2000' 30);                    // select second option from combobox                  multiselect.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha Brno")' 1000' 30);                    // select third option from combobox                  multiselect.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha Brno Napajedla")' 1000' 30);                    // select third option from combobox                  multiselect.Children[0].Click();                  multiselect.Children[1].Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Napajedla")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,MultiSelectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\MultiSelectTests.cs,Control_MultiSelect_Binded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_MultiSelect_binded);                    var multiselect = browser.First("binded-multiselect"' SelectByDataUi);                  var selectedValues = browser.First("selected-values"' SelectByDataUi);                    AssertUI.IsDisplayed(multiselect.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha")' 2000' 30);                    // select second option from combobox                  multiselect.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha Brno")' 1000' 30);                    // select third option from combobox                  multiselect.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha Brno Napajedla")' 1000' 30);                    // select third option from combobox                  multiselect.Children[0].Click();                  multiselect.Children[1].Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Napajedla")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,MultiSelectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\MultiSelectTests.cs,Control_MultiSelect_Binded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_MultiSelect_binded);                    var multiselect = browser.First("binded-multiselect"' SelectByDataUi);                  var selectedValues = browser.First("selected-values"' SelectByDataUi);                    AssertUI.IsDisplayed(multiselect.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha")' 2000' 30);                    // select second option from combobox                  multiselect.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha Brno")' 1000' 30);                    // select third option from combobox                  multiselect.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha Brno Napajedla")' 1000' 30);                    // select third option from combobox                  multiselect.Children[0].Click();                  multiselect.Children[1].Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Napajedla")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,MultiSelectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\MultiSelectTests.cs,Control_MultiSelect_Binded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_MultiSelect_binded);                    var multiselect = browser.First("binded-multiselect"' SelectByDataUi);                  var selectedValues = browser.First("selected-values"' SelectByDataUi);                    AssertUI.IsDisplayed(multiselect.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha")' 2000' 30);                    // select second option from combobox                  multiselect.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha Brno")' 1000' 30);                    // select third option from combobox                  multiselect.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha Brno Napajedla")' 1000' 30);                    // select third option from combobox                  multiselect.Children[0].Click();                  multiselect.Children[1].Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Napajedla")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,MultiSelectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\MultiSelectTests.cs,Control_MultiSelect_Binded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_MultiSelect_binded);                    var multiselect = browser.First("binded-multiselect"' SelectByDataUi);                  var selectedValues = browser.First("selected-values"' SelectByDataUi);                    AssertUI.IsDisplayed(multiselect.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha")' 2000' 30);                    // select second option from combobox                  multiselect.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha Brno")' 1000' 30);                    // select third option from combobox                  multiselect.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha Brno Napajedla")' 1000' 30);                    // select third option from combobox                  multiselect.Children[0].Click();                  multiselect.Children[1].Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Napajedla")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,MultiSelectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\MultiSelectTests.cs,Control_MultiSelect_Binded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_MultiSelect_binded);                    var multiselect = browser.First("binded-multiselect"' SelectByDataUi);                  var selectedValues = browser.First("selected-values"' SelectByDataUi);                    AssertUI.IsDisplayed(multiselect.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha")' 2000' 30);                    // select second option from combobox                  multiselect.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha Brno")' 1000' 30);                    // select third option from combobox                  multiselect.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha Brno Napajedla")' 1000' 30);                    // select third option from combobox                  multiselect.Children[0].Click();                  multiselect.Children[1].Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Napajedla")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,MultiSelectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\MultiSelectTests.cs,Control_MultiSelect_Binded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_MultiSelect_binded);                    var multiselect = browser.First("binded-multiselect"' SelectByDataUi);                  var selectedValues = browser.First("selected-values"' SelectByDataUi);                    AssertUI.IsDisplayed(multiselect.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha")' 2000' 30);                    // select second option from combobox                  multiselect.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha Brno")' 1000' 30);                    // select third option from combobox                  multiselect.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha Brno Napajedla")' 1000' 30);                    // select third option from combobox                  multiselect.Children[0].Click();                  multiselect.Children[1].Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Napajedla")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,MultiSelectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\MultiSelectTests.cs,Control_MultiSelect_Binded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_MultiSelect_binded);                    var multiselect = browser.First("binded-multiselect"' SelectByDataUi);                  var selectedValues = browser.First("selected-values"' SelectByDataUi);                    AssertUI.IsDisplayed(multiselect.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha")' 2000' 30);                    // select second option from combobox                  multiselect.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha Brno")' 1000' 30);                    // select third option from combobox                  multiselect.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Praha Brno Napajedla")' 1000' 30);                    // select third option from combobox                  multiselect.Children[0].Click();                  multiselect.Children[1].Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "Napajedla")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,MultiSelectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\MultiSelectTests.cs,Control_MultiSelect_Hardcoded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_MultiSelect_hardcoded);                    var multiselect = browser.First("hardcoded-multiselect"' SelectByDataUi);                  var selectedValues = browser.First("selected-values"' SelectByDataUi);                    AssertUI.IsDisplayed(multiselect.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1")' 2000' 30);                    // select second option from combobox                  multiselect.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1 2")' 1000' 30);                    // select third option from combobox                  multiselect.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1 2 3")' 1000' 30);                    // select third option from combobox                  multiselect.Children[0].Click();                  multiselect.Children[1].Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "3")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,MultiSelectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\MultiSelectTests.cs,Control_MultiSelect_Hardcoded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_MultiSelect_hardcoded);                    var multiselect = browser.First("hardcoded-multiselect"' SelectByDataUi);                  var selectedValues = browser.First("selected-values"' SelectByDataUi);                    AssertUI.IsDisplayed(multiselect.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1")' 2000' 30);                    // select second option from combobox                  multiselect.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1 2")' 1000' 30);                    // select third option from combobox                  multiselect.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1 2 3")' 1000' 30);                    // select third option from combobox                  multiselect.Children[0].Click();                  multiselect.Children[1].Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "3")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,MultiSelectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\MultiSelectTests.cs,Control_MultiSelect_Hardcoded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_MultiSelect_hardcoded);                    var multiselect = browser.First("hardcoded-multiselect"' SelectByDataUi);                  var selectedValues = browser.First("selected-values"' SelectByDataUi);                    AssertUI.IsDisplayed(multiselect.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1")' 2000' 30);                    // select second option from combobox                  multiselect.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1 2")' 1000' 30);                    // select third option from combobox                  multiselect.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1 2 3")' 1000' 30);                    // select third option from combobox                  multiselect.Children[0].Click();                  multiselect.Children[1].Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "3")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,MultiSelectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\MultiSelectTests.cs,Control_MultiSelect_Hardcoded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_MultiSelect_hardcoded);                    var multiselect = browser.First("hardcoded-multiselect"' SelectByDataUi);                  var selectedValues = browser.First("selected-values"' SelectByDataUi);                    AssertUI.IsDisplayed(multiselect.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1")' 2000' 30);                    // select second option from combobox                  multiselect.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1 2")' 1000' 30);                    // select third option from combobox                  multiselect.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1 2 3")' 1000' 30);                    // select third option from combobox                  multiselect.Children[0].Click();                  multiselect.Children[1].Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "3")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,MultiSelectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\MultiSelectTests.cs,Control_MultiSelect_Hardcoded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_MultiSelect_hardcoded);                    var multiselect = browser.First("hardcoded-multiselect"' SelectByDataUi);                  var selectedValues = browser.First("selected-values"' SelectByDataUi);                    AssertUI.IsDisplayed(multiselect.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1")' 2000' 30);                    // select second option from combobox                  multiselect.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1 2")' 1000' 30);                    // select third option from combobox                  multiselect.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1 2 3")' 1000' 30);                    // select third option from combobox                  multiselect.Children[0].Click();                  multiselect.Children[1].Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "3")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,MultiSelectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\MultiSelectTests.cs,Control_MultiSelect_Hardcoded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_MultiSelect_hardcoded);                    var multiselect = browser.First("hardcoded-multiselect"' SelectByDataUi);                  var selectedValues = browser.First("selected-values"' SelectByDataUi);                    AssertUI.IsDisplayed(multiselect.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1")' 2000' 30);                    // select second option from combobox                  multiselect.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1 2")' 1000' 30);                    // select third option from combobox                  multiselect.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1 2 3")' 1000' 30);                    // select third option from combobox                  multiselect.Children[0].Click();                  multiselect.Children[1].Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "3")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,MultiSelectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\MultiSelectTests.cs,Control_MultiSelect_Hardcoded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_MultiSelect_hardcoded);                    var multiselect = browser.First("hardcoded-multiselect"' SelectByDataUi);                  var selectedValues = browser.First("selected-values"' SelectByDataUi);                    AssertUI.IsDisplayed(multiselect.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1")' 2000' 30);                    // select second option from combobox                  multiselect.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1 2")' 1000' 30);                    // select third option from combobox                  multiselect.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1 2 3")' 1000' 30);                    // select third option from combobox                  multiselect.Children[0].Click();                  multiselect.Children[1].Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "3")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,MultiSelectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\MultiSelectTests.cs,Control_MultiSelect_Hardcoded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_MultiSelect_hardcoded);                    var multiselect = browser.First("hardcoded-multiselect"' SelectByDataUi);                  var selectedValues = browser.First("selected-values"' SelectByDataUi);                    AssertUI.IsDisplayed(multiselect.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1")' 2000' 30);                    // select second option from combobox                  multiselect.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1 2")' 1000' 30);                    // select third option from combobox                  multiselect.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1 2 3")' 1000' 30);                    // select third option from combobox                  multiselect.Children[0].Click();                  multiselect.Children[1].Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "3")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,MultiSelectTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\MultiSelectTests.cs,Control_MultiSelect_Hardcoded,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_MultiSelect_hardcoded);                    var multiselect = browser.First("hardcoded-multiselect"' SelectByDataUi);                  var selectedValues = browser.First("selected-values"' SelectByDataUi);                    AssertUI.IsDisplayed(multiselect.Select(0));                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1")' 2000' 30);                    // select second option from combobox                  multiselect.Select(1);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1 2")' 1000' 30);                    // select third option from combobox                  multiselect.Select(2);                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "1 2 3")' 1000' 30);                    // select third option from combobox                  multiselect.Children[0].Click();                  multiselect.Children[1].Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(selectedValues' "3")' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Control,NestedRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\NestedRepeaterTests.cs,Control_Repeater_NestedRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_NestedRepeater);                  browser.Wait();                    browser.ElementAt("a"' 0).Click();                    var result = browser.First("#result");                  AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 1).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 2).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 3).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 4).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 5).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");                    browser.ElementAt("a"' 6).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 7).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 8).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 9).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 10).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 11).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");              });
Magic Number,DotVVM.Samples.Tests.Control,NestedRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\NestedRepeaterTests.cs,Control_Repeater_NestedRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_NestedRepeater);                  browser.Wait();                    browser.ElementAt("a"' 0).Click();                    var result = browser.First("#result");                  AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 1).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 2).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 3).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 4).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 5).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");                    browser.ElementAt("a"' 6).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 7).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 8).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 9).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 10).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 11).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");              });
Magic Number,DotVVM.Samples.Tests.Control,NestedRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\NestedRepeaterTests.cs,Control_Repeater_NestedRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_NestedRepeater);                  browser.Wait();                    browser.ElementAt("a"' 0).Click();                    var result = browser.First("#result");                  AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 1).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 2).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 3).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 4).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 5).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");                    browser.ElementAt("a"' 6).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 7).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 8).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 9).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 10).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 11).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");              });
Magic Number,DotVVM.Samples.Tests.Control,NestedRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\NestedRepeaterTests.cs,Control_Repeater_NestedRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_NestedRepeater);                  browser.Wait();                    browser.ElementAt("a"' 0).Click();                    var result = browser.First("#result");                  AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 1).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 2).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 3).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 4).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 5).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");                    browser.ElementAt("a"' 6).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 7).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 8).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 9).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 10).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 11).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");              });
Magic Number,DotVVM.Samples.Tests.Control,NestedRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\NestedRepeaterTests.cs,Control_Repeater_NestedRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_NestedRepeater);                  browser.Wait();                    browser.ElementAt("a"' 0).Click();                    var result = browser.First("#result");                  AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 1).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 2).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 3).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 4).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 5).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");                    browser.ElementAt("a"' 6).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 7).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 8).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 9).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 10).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 11).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");              });
Magic Number,DotVVM.Samples.Tests.Control,NestedRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\NestedRepeaterTests.cs,Control_Repeater_NestedRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_NestedRepeater);                  browser.Wait();                    browser.ElementAt("a"' 0).Click();                    var result = browser.First("#result");                  AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 1).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 2).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 3).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 4).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 5).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");                    browser.ElementAt("a"' 6).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 7).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 8).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 9).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 10).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 11).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");              });
Magic Number,DotVVM.Samples.Tests.Control,NestedRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\NestedRepeaterTests.cs,Control_Repeater_NestedRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_NestedRepeater);                  browser.Wait();                    browser.ElementAt("a"' 0).Click();                    var result = browser.First("#result");                  AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 1).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 2).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 3).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 4).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 5).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");                    browser.ElementAt("a"' 6).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 7).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 8).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 9).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 10).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 11).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");              });
Magic Number,DotVVM.Samples.Tests.Control,NestedRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\NestedRepeaterTests.cs,Control_Repeater_NestedRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_NestedRepeater);                  browser.Wait();                    browser.ElementAt("a"' 0).Click();                    var result = browser.First("#result");                  AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 1).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 2).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 3).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 4).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 5).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");                    browser.ElementAt("a"' 6).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 7).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 8).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 9).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 10).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 11).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");              });
Magic Number,DotVVM.Samples.Tests.Control,NestedRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\NestedRepeaterTests.cs,Control_Repeater_NestedRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_NestedRepeater);                  browser.Wait();                    browser.ElementAt("a"' 0).Click();                    var result = browser.First("#result");                  AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 1).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 2).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 3).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 4).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 5).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");                    browser.ElementAt("a"' 6).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 7).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 8).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 9).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 10).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 11).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");              });
Magic Number,DotVVM.Samples.Tests.Control,NestedRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\NestedRepeaterTests.cs,Control_Repeater_NestedRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_NestedRepeater);                  browser.Wait();                    browser.ElementAt("a"' 0).Click();                    var result = browser.First("#result");                  AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 1).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 2).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 3).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 4).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 5).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");                    browser.ElementAt("a"' 6).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 1");                    browser.ElementAt("a"' 7).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 2");                    browser.ElementAt("a"' 8).Click();                    AssertUI.InnerTextEquals(result' "Child 1 Subchild 3");                    browser.ElementAt("a"' 9).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 1");                    browser.ElementAt("a"' 10).Click();                    AssertUI.InnerTextEquals(result' "Child 2 Subchild 2");                    browser.ElementAt("a"' 11).Click();                    AssertUI.InnerTextEquals(result' "Child 3 Subchild 1");              });
Magic Number,DotVVM.Samples.Tests.Control,NestedRepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\NestedRepeaterTests.cs,Control_Repeater_NestedRepeaterWithControl,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_NestedRepeaterWithControl);                  browser.Wait();                    var result = browser.First("#result");                  var buttons = browser.FindElements("input[type=button]");                    int count = 1;                  foreach (var button in buttons)                  {                      browser.WaitFor(() => AssertUI.InnerTextEquals(result' count.ToString())' 500);                      button.Click();                      count++;                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RadioButtonTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RadioButtonTests.cs,Control_RadioButton_RadioButton,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_RadioButton_RadioButton);                  browser.Wait();                    browser.ElementAt("input[type=radio]"' 2).Click();                  browser.ElementAt("input[type=radio]"' 3).Click();                  browser.First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(browser.Last("span")' "4");                    browser.ElementAt("input[type=radio]"' 1).Click();                  browser.First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(browser.Last("span")' "2");              });
Magic Number,DotVVM.Samples.Tests.Control,RadioButtonTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RadioButtonTests.cs,Control_RadioButton_RadioButton,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_RadioButton_RadioButton);                  browser.Wait();                    browser.ElementAt("input[type=radio]"' 2).Click();                  browser.ElementAt("input[type=radio]"' 3).Click();                  browser.First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(browser.Last("span")' "4");                    browser.ElementAt("input[type=radio]"' 1).Click();                  browser.First("input[type=button]").Click();                  browser.Wait();                    AssertUI.InnerTextEquals(browser.Last("span")' "2");              });
Magic Number,DotVVM.Samples.Tests.Control,RadioButtonTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RadioButtonTests.cs,Control_RadioButton_Nullable,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_RadioButton_Nullable);                  browser.WaitUntilDotvvmInited();                    var radio1 = browser.Single("radiobutton-first"' SelectByDataUi).Single("input");                  var radio2 = browser.Single("radiobutton-second"' SelectByDataUi).Single("input");                    // null value                  var span = browser.Single("sample-item"' SelectByDataUi);                  AssertUI.InnerTextEquals(span' "");                    radio1.Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(span' "First")' 1000);                    radio2.Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(span' "Second")' 1000);                    browser.ElementAt("input[type=button]"' 0).Click();                  AssertUI.InnerTextEquals(span' "Second");                  AssertUI.IsChecked(radio2);                    browser.ElementAt("input[type=button]"' 1).Click();                  AssertUI.InnerTextEquals(span' "");                  AssertUI.IsNotChecked(radio1);                  AssertUI.IsNotChecked(radio2);                    browser.ElementAt("input[type=button]"' 2).Click();                  AssertUI.InnerTextEquals(span' "First");                  AssertUI.IsChecked(radio1);                    browser.ElementAt("input[type=button]"' 3).Click();                  AssertUI.InnerTextEquals(span' "Second");                  AssertUI.IsChecked(radio2);              });
Magic Number,DotVVM.Samples.Tests.Control,RadioButtonTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RadioButtonTests.cs,Control_RadioButton_Nullable,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_RadioButton_Nullable);                  browser.WaitUntilDotvvmInited();                    var radio1 = browser.Single("radiobutton-first"' SelectByDataUi).Single("input");                  var radio2 = browser.Single("radiobutton-second"' SelectByDataUi).Single("input");                    // null value                  var span = browser.Single("sample-item"' SelectByDataUi);                  AssertUI.InnerTextEquals(span' "");                    radio1.Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(span' "First")' 1000);                    radio2.Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(span' "Second")' 1000);                    browser.ElementAt("input[type=button]"' 0).Click();                  AssertUI.InnerTextEquals(span' "Second");                  AssertUI.IsChecked(radio2);                    browser.ElementAt("input[type=button]"' 1).Click();                  AssertUI.InnerTextEquals(span' "");                  AssertUI.IsNotChecked(radio1);                  AssertUI.IsNotChecked(radio2);                    browser.ElementAt("input[type=button]"' 2).Click();                  AssertUI.InnerTextEquals(span' "First");                  AssertUI.IsChecked(radio1);                    browser.ElementAt("input[type=button]"' 3).Click();                  AssertUI.InnerTextEquals(span' "Second");                  AssertUI.IsChecked(radio2);              });
Magic Number,DotVVM.Samples.Tests.Control,RadioButtonTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RadioButtonTests.cs,Control_RadioButton_Nullable,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_RadioButton_Nullable);                  browser.WaitUntilDotvvmInited();                    var radio1 = browser.Single("radiobutton-first"' SelectByDataUi).Single("input");                  var radio2 = browser.Single("radiobutton-second"' SelectByDataUi).Single("input");                    // null value                  var span = browser.Single("sample-item"' SelectByDataUi);                  AssertUI.InnerTextEquals(span' "");                    radio1.Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(span' "First")' 1000);                    radio2.Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(span' "Second")' 1000);                    browser.ElementAt("input[type=button]"' 0).Click();                  AssertUI.InnerTextEquals(span' "Second");                  AssertUI.IsChecked(radio2);                    browser.ElementAt("input[type=button]"' 1).Click();                  AssertUI.InnerTextEquals(span' "");                  AssertUI.IsNotChecked(radio1);                  AssertUI.IsNotChecked(radio2);                    browser.ElementAt("input[type=button]"' 2).Click();                  AssertUI.InnerTextEquals(span' "First");                  AssertUI.IsChecked(radio1);                    browser.ElementAt("input[type=button]"' 3).Click();                  AssertUI.InnerTextEquals(span' "Second");                  AssertUI.IsChecked(radio2);              });
Magic Number,DotVVM.Samples.Tests.Control,RadioButtonTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RadioButtonTests.cs,Control_RadioButton_Nullable,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_RadioButton_Nullable);                  browser.WaitUntilDotvvmInited();                    var radio1 = browser.Single("radiobutton-first"' SelectByDataUi).Single("input");                  var radio2 = browser.Single("radiobutton-second"' SelectByDataUi).Single("input");                    // null value                  var span = browser.Single("sample-item"' SelectByDataUi);                  AssertUI.InnerTextEquals(span' "");                    radio1.Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(span' "First")' 1000);                    radio2.Click();                  browser.WaitFor(() => AssertUI.InnerTextEquals(span' "Second")' 1000);                    browser.ElementAt("input[type=button]"' 0).Click();                  AssertUI.InnerTextEquals(span' "Second");                  AssertUI.IsChecked(radio2);                    browser.ElementAt("input[type=button]"' 1).Click();                  AssertUI.InnerTextEquals(span' "");                  AssertUI.IsNotChecked(radio1);                  AssertUI.IsNotChecked(radio2);                    browser.ElementAt("input[type=button]"' 2).Click();                  AssertUI.InnerTextEquals(span' "First");                  AssertUI.IsChecked(radio1);                    browser.ElementAt("input[type=button]"' 3).Click();                  AssertUI.InnerTextEquals(span' "Second");                  AssertUI.IsChecked(radio2);              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_DataSourceNull,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_DataSourceNull);                  browser.Wait();                    var clientRepeater = browser.Single("client-repeater"' this.SelectByDataUi);                  var serverRepeater = browser.Single("server-repeater"' this.SelectByDataUi);                    Assert.Equal(0' clientRepeater.Children.Count);                  Assert.Equal(0' serverRepeater.Children.Count);                    var button = browser.Single("set-collection-button"' this.SelectByDataUi);                  button.Click().Wait();                    clientRepeater = browser.Single("client-repeater"' this.SelectByDataUi);                  serverRepeater = browser.Single("server-repeater"' this.SelectByDataUi);                    Assert.Equal(3' clientRepeater.Children.Count);                  Assert.Equal(3' serverRepeater.Children.Count);              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_DataSourceNull,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_DataSourceNull);                  browser.Wait();                    var clientRepeater = browser.Single("client-repeater"' this.SelectByDataUi);                  var serverRepeater = browser.Single("server-repeater"' this.SelectByDataUi);                    Assert.Equal(0' clientRepeater.Children.Count);                  Assert.Equal(0' serverRepeater.Children.Count);                    var button = browser.Single("set-collection-button"' this.SelectByDataUi);                  button.Click().Wait();                    clientRepeater = browser.Single("client-repeater"' this.SelectByDataUi);                  serverRepeater = browser.Single("server-repeater"' this.SelectByDataUi);                    Assert.Equal(3' clientRepeater.Children.Count);                  Assert.Equal(3' serverRepeater.Children.Count);              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterAsSeparator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterAsSeparator);                  browser.Wait();                    var repeater = browser.Single("root-repeater"' this.SelectByDataUi);                    for (int i = 2; i < 5; i++)                  {                      var separators = repeater.FindElements("separator"' this.SelectByDataUi);                        Assert.Equal(i' separators.Count);                        foreach (var separator in separators)                      {                          var texts = separator.FindElements("p");                          Assert.Equal(3' texts.Count);                          AssertUI.InnerTextEquals(texts[0]' "First separator");                          AssertUI.InnerTextEquals(texts[1]' "Second separator");                          AssertUI.InnerTextEquals(texts[2]' "Third separator");                      }                        browser.Single("add-item-button"' SelectByDataUi).Click();                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterAsSeparator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterAsSeparator);                  browser.Wait();                    var repeater = browser.Single("root-repeater"' this.SelectByDataUi);                    for (int i = 2; i < 5; i++)                  {                      var separators = repeater.FindElements("separator"' this.SelectByDataUi);                        Assert.Equal(i' separators.Count);                        foreach (var separator in separators)                      {                          var texts = separator.FindElements("p");                          Assert.Equal(3' texts.Count);                          AssertUI.InnerTextEquals(texts[0]' "First separator");                          AssertUI.InnerTextEquals(texts[1]' "Second separator");                          AssertUI.InnerTextEquals(texts[2]' "Third separator");                      }                        browser.Single("add-item-button"' SelectByDataUi).Click();                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterAsSeparator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterAsSeparator);                  browser.Wait();                    var repeater = browser.Single("root-repeater"' this.SelectByDataUi);                    for (int i = 2; i < 5; i++)                  {                      var separators = repeater.FindElements("separator"' this.SelectByDataUi);                        Assert.Equal(i' separators.Count);                        foreach (var separator in separators)                      {                          var texts = separator.FindElements("p");                          Assert.Equal(3' texts.Count);                          AssertUI.InnerTextEquals(texts[0]' "First separator");                          AssertUI.InnerTextEquals(texts[1]' "Second separator");                          AssertUI.InnerTextEquals(texts[2]' "Third separator");                      }                        browser.Single("add-item-button"' SelectByDataUi).Click();                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterAsSeparator,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterAsSeparator);                  browser.Wait();                    var repeater = browser.Single("root-repeater"' this.SelectByDataUi);                    for (int i = 2; i < 5; i++)                  {                      var separators = repeater.FindElements("separator"' this.SelectByDataUi);                        Assert.Equal(i' separators.Count);                        foreach (var separator in separators)                      {                          var texts = separator.FindElements("p");                          Assert.Equal(3' texts.Count);                          AssertUI.InnerTextEquals(texts[0]' "First separator");                          AssertUI.InnerTextEquals(texts[1]' "Second separator");                          AssertUI.InnerTextEquals(texts[2]' "Third separator");                      }                        browser.Single("add-item-button"' SelectByDataUi).Click();                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterWrapperTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterWrapperTag);                    browser.FindElements("#part1>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 3)' "Test 4");                    browser.FindElements("#part2>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 3)' "Test 4");                    browser.FindElements("#part1_server>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1_server>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 3)' "Test 4");                    browser.FindElements("#part2_server>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2_server>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3_server>p").ThrowIfDifferentCountThan(4);                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 3)' "Test 4");              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterWrapperTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterWrapperTag);                    browser.FindElements("#part1>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 3)' "Test 4");                    browser.FindElements("#part2>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 3)' "Test 4");                    browser.FindElements("#part1_server>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1_server>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 3)' "Test 4");                    browser.FindElements("#part2_server>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2_server>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3_server>p").ThrowIfDifferentCountThan(4);                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 3)' "Test 4");              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterWrapperTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterWrapperTag);                    browser.FindElements("#part1>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 3)' "Test 4");                    browser.FindElements("#part2>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 3)' "Test 4");                    browser.FindElements("#part1_server>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1_server>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 3)' "Test 4");                    browser.FindElements("#part2_server>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2_server>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3_server>p").ThrowIfDifferentCountThan(4);                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 3)' "Test 4");              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterWrapperTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterWrapperTag);                    browser.FindElements("#part1>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 3)' "Test 4");                    browser.FindElements("#part2>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 3)' "Test 4");                    browser.FindElements("#part1_server>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1_server>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 3)' "Test 4");                    browser.FindElements("#part2_server>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2_server>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3_server>p").ThrowIfDifferentCountThan(4);                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 3)' "Test 4");              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterWrapperTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterWrapperTag);                    browser.FindElements("#part1>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 3)' "Test 4");                    browser.FindElements("#part2>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 3)' "Test 4");                    browser.FindElements("#part1_server>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1_server>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 3)' "Test 4");                    browser.FindElements("#part2_server>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2_server>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3_server>p").ThrowIfDifferentCountThan(4);                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 3)' "Test 4");              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterWrapperTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterWrapperTag);                    browser.FindElements("#part1>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 3)' "Test 4");                    browser.FindElements("#part2>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 3)' "Test 4");                    browser.FindElements("#part1_server>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1_server>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 3)' "Test 4");                    browser.FindElements("#part2_server>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2_server>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3_server>p").ThrowIfDifferentCountThan(4);                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 3)' "Test 4");              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterWrapperTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterWrapperTag);                    browser.FindElements("#part1>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 3)' "Test 4");                    browser.FindElements("#part2>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 3)' "Test 4");                    browser.FindElements("#part1_server>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1_server>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 3)' "Test 4");                    browser.FindElements("#part2_server>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2_server>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3_server>p").ThrowIfDifferentCountThan(4);                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 3)' "Test 4");              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterWrapperTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterWrapperTag);                    browser.FindElements("#part1>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 3)' "Test 4");                    browser.FindElements("#part2>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 3)' "Test 4");                    browser.FindElements("#part1_server>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1_server>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 3)' "Test 4");                    browser.FindElements("#part2_server>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2_server>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3_server>p").ThrowIfDifferentCountThan(4);                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 3)' "Test 4");              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterWrapperTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterWrapperTag);                    browser.FindElements("#part1>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 3)' "Test 4");                    browser.FindElements("#part2>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 3)' "Test 4");                    browser.FindElements("#part1_server>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1_server>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 3)' "Test 4");                    browser.FindElements("#part2_server>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2_server>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3_server>p").ThrowIfDifferentCountThan(4);                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 3)' "Test 4");              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterWrapperTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterWrapperTag);                    browser.FindElements("#part1>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 3)' "Test 4");                    browser.FindElements("#part2>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 3)' "Test 4");                    browser.FindElements("#part1_server>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1_server>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 3)' "Test 4");                    browser.FindElements("#part2_server>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2_server>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3_server>p").ThrowIfDifferentCountThan(4);                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 3)' "Test 4");              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterWrapperTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterWrapperTag);                    browser.FindElements("#part1>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 3)' "Test 4");                    browser.FindElements("#part2>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 3)' "Test 4");                    browser.FindElements("#part1_server>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1_server>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 3)' "Test 4");                    browser.FindElements("#part2_server>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2_server>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3_server>p").ThrowIfDifferentCountThan(4);                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 3)' "Test 4");              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterWrapperTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterWrapperTag);                    browser.FindElements("#part1>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 3)' "Test 4");                    browser.FindElements("#part2>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 3)' "Test 4");                    browser.FindElements("#part1_server>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1_server>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 3)' "Test 4");                    browser.FindElements("#part2_server>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2_server>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3_server>p").ThrowIfDifferentCountThan(4);                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 3)' "Test 4");              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterWrapperTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterWrapperTag);                    browser.FindElements("#part1>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 3)' "Test 4");                    browser.FindElements("#part2>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 3)' "Test 4");                    browser.FindElements("#part1_server>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1_server>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 3)' "Test 4");                    browser.FindElements("#part2_server>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2_server>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3_server>p").ThrowIfDifferentCountThan(4);                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 3)' "Test 4");              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterWrapperTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterWrapperTag);                    browser.FindElements("#part1>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 3)' "Test 4");                    browser.FindElements("#part2>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 3)' "Test 4");                    browser.FindElements("#part1_server>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1_server>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 3)' "Test 4");                    browser.FindElements("#part2_server>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2_server>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3_server>p").ThrowIfDifferentCountThan(4);                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 3)' "Test 4");              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterWrapperTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterWrapperTag);                    browser.FindElements("#part1>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 3)' "Test 4");                    browser.FindElements("#part2>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 3)' "Test 4");                    browser.FindElements("#part1_server>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1_server>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 3)' "Test 4");                    browser.FindElements("#part2_server>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2_server>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3_server>p").ThrowIfDifferentCountThan(4);                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 3)' "Test 4");              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterWrapperTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterWrapperTag);                    browser.FindElements("#part1>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 3)' "Test 4");                    browser.FindElements("#part2>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 3)' "Test 4");                    browser.FindElements("#part1_server>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1_server>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 3)' "Test 4");                    browser.FindElements("#part2_server>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2_server>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3_server>p").ThrowIfDifferentCountThan(4);                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 3)' "Test 4");              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterWrapperTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterWrapperTag);                    browser.FindElements("#part1>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 3)' "Test 4");                    browser.FindElements("#part2>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 3)' "Test 4");                    browser.FindElements("#part1_server>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1_server>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 3)' "Test 4");                    browser.FindElements("#part2_server>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2_server>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3_server>p").ThrowIfDifferentCountThan(4);                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 3)' "Test 4");              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RepeaterWrapperTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RepeaterWrapperTag);                    browser.FindElements("#part1>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1>div>p"' 3)' "Test 4");                    browser.FindElements("#part2>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3>p"' 3)' "Test 4");                    browser.FindElements("#part1_server>div").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part1_server>div>p").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part1_server>div>p"' 3)' "Test 4");                    browser.FindElements("#part2_server>ul").ThrowIfDifferentCountThan(1);                  browser.FindElements("#part2_server>ul>li").ThrowIfDifferentCountThan(4);                    AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part2_server>ul>li"' 3)' "Test 4");                    browser.FindElements("#part3_server>p").ThrowIfDifferentCountThan(4);                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 0)' "Test 1");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 1)' "Test 2");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 2)' "Test 3");                  AssertUI.InnerTextEquals(browser.ElementAt("#part3_server>p"' 3)' "Test 4");              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLink,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLink);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLink,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLink);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLink,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLink);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLink,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLink);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLink,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLink);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLink,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLink);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLink,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLink);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLink,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLink);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLink,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLink);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLink,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLink);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLink,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLink);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkUrlSuffix,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkUrlSuffix);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3?id=3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3?id=3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkUrlSuffix,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkUrlSuffix);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3?id=3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3?id=3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkUrlSuffix,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkUrlSuffix);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3?id=3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3?id=3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkUrlSuffix,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkUrlSuffix);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3?id=3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3?id=3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkUrlSuffix,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkUrlSuffix);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3?id=3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3?id=3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkUrlSuffix,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkUrlSuffix);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3?id=3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3?id=3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkUrlSuffix,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkUrlSuffix);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3?id=3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3?id=3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkUrlSuffix,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkUrlSuffix);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3?id=3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3?id=3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkUrlSuffix,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkUrlSuffix);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3?id=3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3?id=3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkUrlSuffix,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkUrlSuffix);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3?id=3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3?id=3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkUrlSuffix,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkUrlSuffix);                    // verify link urls                  var url = browser.CurrentUrl;                  AssertUI.Attribute(browser.ElementAt("a"' 0)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 1)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 2)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 3)' "href"' url + "/1?test");                  AssertUI.Attribute(browser.ElementAt("a"' 4)' "href"' url + "/2?test");                  AssertUI.Attribute(browser.ElementAt("a"' 5)' "href"' url + "/3?test");                  AssertUI.Attribute(browser.ElementAt("a"' 6)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 7)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 8)' "href"' url + "/3?id=3");                  AssertUI.Attribute(browser.ElementAt("a"' 9)' "href"' url + "/1?id=1");                  AssertUI.Attribute(browser.ElementAt("a"' 10)' "href"' url + "/2?id=2");                  AssertUI.Attribute(browser.ElementAt("a"' 11)' "href"' url + "/3?id=3");                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkQuery);                    // verify link urls                  var url = browser.CurrentUrl;                    AssertUI.HyperLinkEquals(browser.ElementAt("a"' 0)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 1)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 2)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 3)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 4)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 5)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 6)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 7)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 8)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 9)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 10)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 11)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkQuery);                    // verify link urls                  var url = browser.CurrentUrl;                    AssertUI.HyperLinkEquals(browser.ElementAt("a"' 0)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 1)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 2)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 3)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 4)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 5)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 6)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 7)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 8)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 9)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 10)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 11)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkQuery);                    // verify link urls                  var url = browser.CurrentUrl;                    AssertUI.HyperLinkEquals(browser.ElementAt("a"' 0)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 1)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 2)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 3)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 4)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 5)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 6)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 7)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 8)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 9)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 10)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 11)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkQuery);                    // verify link urls                  var url = browser.CurrentUrl;                    AssertUI.HyperLinkEquals(browser.ElementAt("a"' 0)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 1)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 2)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 3)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 4)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 5)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 6)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 7)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 8)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 9)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 10)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 11)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkQuery);                    // verify link urls                  var url = browser.CurrentUrl;                    AssertUI.HyperLinkEquals(browser.ElementAt("a"' 0)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 1)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 2)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 3)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 4)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 5)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 6)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 7)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 8)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 9)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 10)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 11)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkQuery);                    // verify link urls                  var url = browser.CurrentUrl;                    AssertUI.HyperLinkEquals(browser.ElementAt("a"' 0)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 1)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 2)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 3)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 4)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 5)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 6)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 7)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 8)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 9)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 10)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 11)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkQuery);                    // verify link urls                  var url = browser.CurrentUrl;                    AssertUI.HyperLinkEquals(browser.ElementAt("a"' 0)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 1)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 2)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 3)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 4)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 5)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 6)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 7)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 8)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 9)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 10)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 11)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkQuery);                    // verify link urls                  var url = browser.CurrentUrl;                    AssertUI.HyperLinkEquals(browser.ElementAt("a"' 0)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 1)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 2)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 3)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 4)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 5)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 6)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 7)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 8)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 9)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 10)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 11)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkQuery);                    // verify link urls                  var url = browser.CurrentUrl;                    AssertUI.HyperLinkEquals(browser.ElementAt("a"' 0)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 1)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 2)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 3)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 4)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 5)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 6)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 7)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 8)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 9)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 10)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 11)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkQuery);                    // verify link urls                  var url = browser.CurrentUrl;                    AssertUI.HyperLinkEquals(browser.ElementAt("a"' 0)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 1)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 2)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 3)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 4)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 5)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 6)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 7)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 8)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 9)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 10)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 11)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,Control_Repeater_RouteLinkQuery,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_Repeater_RouteLinkQuery);                    // verify link urls                  var url = browser.CurrentUrl;                    AssertUI.HyperLinkEquals(browser.ElementAt("a"' 0)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 1)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 2)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 3)' url + "?Static=query&Id=1"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 4)' url + "?Static=query&Id=2"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 5)' url + "?Static=query&Id=3"' UrlKind.Absolute' false' UriComponents.PathAndQuery);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 6)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 7)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 8)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 9)' url + "?first=param&Static=query&Id=1#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 10)' url + "?first=param&Static=query&Id=2#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                  AssertUI.HyperLinkEquals(browser.ElementAt("a"' 11)' url + "?first=param&Static=query&Id=3#test"' UrlKind.Absolute' false' UriComponents.PathAndQuery | UriComponents.Fragment);                    for (int i = 0; i < 12; i++)                  {                      AssertUI.InnerText(browser.ElementAt("a"' i)' s => !string.IsNullOrWhiteSpace(s)' "Not rendered Name");                  }              });
Magic Number,DotVVM.Samples.Tests.Control,RepeaterTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\RepeaterTests.cs,CheckSeparators,The following statement contains a magic number: i % 2 == 0
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder_EnteredFromPageB,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder_EnteredFromPageB,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder_EnteredFromPageB,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder_EnteredFromPageB,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder_EnteredFromPageB,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_SpaContentPlaceHolder_EnteredFromPageB,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageB + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_PrefixRouteName_EnteredFromPageB,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_PrefixRouteName_EnteredFromPageB,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_PrefixRouteName_EnteredFromPageB,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_PrefixRouteName_EnteredFromPageB,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_PrefixRouteName_EnteredFromPageB,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_PrefixRouteName_EnteredFromPageB,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_PrefixRouteName_EnteredFromPageB,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,SpaContentPlaceHolderTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\SpaContentPlaceHolderTests.cs,Control_SpaContentPlaceHolder_PrefixRouteName_EnteredFromPageB,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                  browser.Wait(2000);                    // verify the URL after redirect to the DefaultRoute                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript 2 resource loaded!");                  browser.ConfirmAlert();                  browser.Wait(2000);                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                    // go to first page                  browser.First("a").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // go to second page                  browser.FindElements("a").Single(l => l.GetText() == "Go to Task List").Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageB);                    // try the task list                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);                  browser.Last("tr a").Click();                  browser.Wait();                  AssertUI.HasClass(browser.Last(".table tr")' "completed");                    // test the browse back button                  browser.NavigateBack();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/16");                    // test first page                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  browser.Click("input[type=button]");                  browser.Wait();                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "3");                    // test the forward button                  browser.NavigateForward();                  browser.Wait();                    // test the redirect inside SPA                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(3);                  browser.Last("input[type=button]").Click();                  browser.Wait(2000);                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_Default + "#!/" + SamplesRouteUrls.ControlSamples_SpaContentPlaceHolder_PrefixRouteName_PageA + "/15");                    // test the redirect outside SPA                  AssertUI.TextEquals(browser.ElementAt("span"' 0)' "0");                  browser.FindElements("a").Single(l => l.GetText().Contains("Exit SPA")).Click();                  browser.Wait();                  AssertUI.UrlEquals(browser' browser.BaseUrl + SamplesRouteUrls.ComplexSamples_TaskList_ServerRenderedTaskList);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_TextBox_FormatDoubleProperty,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_TextBox_TextBox_FormatDoubleProperty);                    AssertUI.TextEquals(browser.Single("[data-ui='textBox']")' "0.00");                  browser.Single("[data-ui='button']").Click();                  browser.Wait(500);                    AssertUI.TextEquals(browser.Single("[data-ui='textBox']")' "10.50");              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat,The following statement contains a magic number: RunInAllBrowsers(browser => {                  var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var dateResult1 = browser.First("#date-result1").GetText();                  var dateResult2 = browser.First("#date-result2").GetText();                  var dateResult3 = browser.First("#date-result3").GetText();                    var dateTextBox = browser.First("#dateTextbox");                  AssertUI.Attribute(dateTextBox' "value"' dateResult1);                    var dateText = browser.First("#DateValueText");                  AssertUI.InnerTextEquals(dateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateTextBox = browser.First("#nullableDateTextbox");                  AssertUI.Attribute(nullableDateTextBox' "value"' new DateTime(2015' 12' 27).ToString("G"' culture));                    var nullableDateText = browser.First("#nullableDateValueText");                  AssertUI.InnerTextEquals(nullableDateText' new DateTime(2015' 12' 27).ToString("G"' culture));                    var numberTextbox = browser.First("#numberTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 123.1235.ToString(culture));                    var numberValueText = browser.First("#numberValueText");                  AssertUI.InnerTextEquals(numberValueText' 123.123456789.ToString(culture));                    var nullableNumberTextbox = browser.First("#nullableNumberTextbox");                  AssertUI.Attribute(nullableNumberTextbox' "value"' 123.123456789.ToString(culture));                    var nullableNumberValueText = browser.First("#nullableNumberValueText");                  AssertUI.InnerTextEquals(nullableNumberValueText' 123.123456789.ToString(culture));                    //write new valid values                  dateTextBox.Clear().SendKeys(dateResult2);                  numberTextbox.Clear().SendKeys(2000.ToString("n0"' culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 12' 27).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 2000.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 2000.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult2);                    //write invalid values                  dateTextBox.Clear().SendKeys("dsasdasd");                  numberTextbox.Clear().SendKeys("000//a");                  dateTextBox.Click();                    //check invalid values                  AssertUI.InnerTextEquals(dateText' "");                  AssertUI.InnerTextEquals(numberValueText' "");                    AssertUI.Attribute(numberTextbox' "value"' "000//a");                  AssertUI.Attribute(dateTextBox' "value"' "dsasdasd");                    //write new valid values                  dateTextBox.Clear().SendKeys(new DateTime(2018' 1' 1).ToString("d"' culture));                  numberTextbox.Clear().SendKeys(1000.550277.ToString(culture));                  dateTextBox.Click().Wait();                    //check new values                  AssertUI.InnerTextEquals(dateText' new DateTime(2018' 1' 1).ToString("G"' culture));                  AssertUI.InnerTextEquals(numberValueText' 1000.550277.ToString(culture));                    AssertUI.Attribute(numberTextbox' "value"' 1000.550277.ToString("n4"' culture));                  AssertUI.Attribute(dateTextBox' "value"' dateResult3);              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat_ChangedCommandBinding,The following statement contains a magic number: RunInAllBrowsers(browser => {                  void ClearInput(IElementWrapper element)                  {                      // There is special threatment for TextBox with Changed Command                      // When Clear() method is used' changed command is invoked and default value '0.00' appear                      while (element.GetText() != "")                      {                          element.WebElement.SendKeys(Keys.Backspace);                      }                  }                    // Set focus to different element to drop focus on input and invoke onchange element (for IE)                  void LoseFocus() => browser.Single("body").SetFocus(); ;                    var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var numberTextbox = browser.First("#bindingNumberFormatTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 0.ToString("N"' culture));                    var numberValueText = browser.First("#resultNumberValueText");                  AssertUI.InnerTextEquals(numberValueText' 0.ToString(culture));                    // send new values                  ClearInput(numberTextbox);                  numberTextbox.SendKeys("42")                      .SendEnterKey()                      .Wait();                  LoseFocus();                    // check new values                  AssertUI.InnerTextEquals(numberValueText' 42.ToString(culture));                  AssertUI.Attribute(numberTextbox' "value"' 42.ToString("N"' culture));                    // send new values                  ClearInput(numberTextbox);                  numberTextbox.SendKeys(123.456789.ToString(culture))                      .SendEnterKey()                      .Wait();                  LoseFocus();                    // check new values                  AssertUI.InnerTextEquals(numberValueText' 123.456789.ToString(culture));                  AssertUI.Attribute(numberTextbox' "value"' 123.456789.ToString("N"' culture));              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat_ChangedCommandBinding,The following statement contains a magic number: RunInAllBrowsers(browser => {                  void ClearInput(IElementWrapper element)                  {                      // There is special threatment for TextBox with Changed Command                      // When Clear() method is used' changed command is invoked and default value '0.00' appear                      while (element.GetText() != "")                      {                          element.WebElement.SendKeys(Keys.Backspace);                      }                  }                    // Set focus to different element to drop focus on input and invoke onchange element (for IE)                  void LoseFocus() => browser.Single("body").SetFocus(); ;                    var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var numberTextbox = browser.First("#bindingNumberFormatTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 0.ToString("N"' culture));                    var numberValueText = browser.First("#resultNumberValueText");                  AssertUI.InnerTextEquals(numberValueText' 0.ToString(culture));                    // send new values                  ClearInput(numberTextbox);                  numberTextbox.SendKeys("42")                      .SendEnterKey()                      .Wait();                  LoseFocus();                    // check new values                  AssertUI.InnerTextEquals(numberValueText' 42.ToString(culture));                  AssertUI.Attribute(numberTextbox' "value"' 42.ToString("N"' culture));                    // send new values                  ClearInput(numberTextbox);                  numberTextbox.SendKeys(123.456789.ToString(culture))                      .SendEnterKey()                      .Wait();                  LoseFocus();                    // check new values                  AssertUI.InnerTextEquals(numberValueText' 123.456789.ToString(culture));                  AssertUI.Attribute(numberTextbox' "value"' 123.456789.ToString("N"' culture));              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat_ChangedCommandBinding,The following statement contains a magic number: RunInAllBrowsers(browser => {                  void ClearInput(IElementWrapper element)                  {                      // There is special threatment for TextBox with Changed Command                      // When Clear() method is used' changed command is invoked and default value '0.00' appear                      while (element.GetText() != "")                      {                          element.WebElement.SendKeys(Keys.Backspace);                      }                  }                    // Set focus to different element to drop focus on input and invoke onchange element (for IE)                  void LoseFocus() => browser.Single("body").SetFocus(); ;                    var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var numberTextbox = browser.First("#bindingNumberFormatTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 0.ToString("N"' culture));                    var numberValueText = browser.First("#resultNumberValueText");                  AssertUI.InnerTextEquals(numberValueText' 0.ToString(culture));                    // send new values                  ClearInput(numberTextbox);                  numberTextbox.SendKeys("42")                      .SendEnterKey()                      .Wait();                  LoseFocus();                    // check new values                  AssertUI.InnerTextEquals(numberValueText' 42.ToString(culture));                  AssertUI.Attribute(numberTextbox' "value"' 42.ToString("N"' culture));                    // send new values                  ClearInput(numberTextbox);                  numberTextbox.SendKeys(123.456789.ToString(culture))                      .SendEnterKey()                      .Wait();                  LoseFocus();                    // check new values                  AssertUI.InnerTextEquals(numberValueText' 123.456789.ToString(culture));                  AssertUI.Attribute(numberTextbox' "value"' 123.456789.ToString("N"' culture));              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat_ChangedCommandBinding,The following statement contains a magic number: RunInAllBrowsers(browser => {                  void ClearInput(IElementWrapper element)                  {                      // There is special threatment for TextBox with Changed Command                      // When Clear() method is used' changed command is invoked and default value '0.00' appear                      while (element.GetText() != "")                      {                          element.WebElement.SendKeys(Keys.Backspace);                      }                  }                    // Set focus to different element to drop focus on input and invoke onchange element (for IE)                  void LoseFocus() => browser.Single("body").SetFocus(); ;                    var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var numberTextbox = browser.First("#bindingNumberFormatTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 0.ToString("N"' culture));                    var numberValueText = browser.First("#resultNumberValueText");                  AssertUI.InnerTextEquals(numberValueText' 0.ToString(culture));                    // send new values                  ClearInput(numberTextbox);                  numberTextbox.SendKeys("42")                      .SendEnterKey()                      .Wait();                  LoseFocus();                    // check new values                  AssertUI.InnerTextEquals(numberValueText' 42.ToString(culture));                  AssertUI.Attribute(numberTextbox' "value"' 42.ToString("N"' culture));                    // send new values                  ClearInput(numberTextbox);                  numberTextbox.SendKeys(123.456789.ToString(culture))                      .SendEnterKey()                      .Wait();                  LoseFocus();                    // check new values                  AssertUI.InnerTextEquals(numberValueText' 123.456789.ToString(culture));                  AssertUI.Attribute(numberTextbox' "value"' 123.456789.ToString("N"' culture));              });
Magic Number,DotVVM.Samples.Tests.Control,TextBoxTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\TextBoxTests.cs,Control_TextBox_StringFormat_ChangedCommandBinding,The following statement contains a magic number: RunInAllBrowsers(browser => {                  void ClearInput(IElementWrapper element)                  {                      // There is special threatment for TextBox with Changed Command                      // When Clear() method is used' changed command is invoked and default value '0.00' appear                      while (element.GetText() != "")                      {                          element.WebElement.SendKeys(Keys.Backspace);                      }                  }                    // Set focus to different element to drop focus on input and invoke onchange element (for IE)                  void LoseFocus() => browser.Single("body").SetFocus(); ;                    var culture = new CultureInfo(cultureName);                  browser.NavigateToUrl(url);                  browser.First(linkSelector).Click();                    var numberTextbox = browser.First("#bindingNumberFormatTextbox");                  AssertUI.Attribute(numberTextbox' "value"' 0.ToString("N"' culture));                    var numberValueText = browser.First("#resultNumberValueText");                  AssertUI.InnerTextEquals(numberValueText' 0.ToString(culture));                    // send new values                  ClearInput(numberTextbox);                  numberTextbox.SendKeys("42")                      .SendEnterKey()                      .Wait();                  LoseFocus();                    // check new values                  AssertUI.InnerTextEquals(numberValueText' 42.ToString(culture));                  AssertUI.Attribute(numberTextbox' "value"' 42.ToString("N"' culture));                    // send new values                  ClearInput(numberTextbox);                  numberTextbox.SendKeys(123.456789.ToString(culture))                      .SendEnterKey()                      .Wait();                  LoseFocus();                    // check new values                  AssertUI.InnerTextEquals(numberValueText' 123.456789.ToString(culture));                  AssertUI.Attribute(numberTextbox' "value"' 123.456789.ToString("N"' culture));              });
Magic Number,DotVVM.Samples.Tests.Control,UpdateProgressTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\UpdateProgressTests.cs,Control_UpdateProgress_UpdateProgress,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_UpdateProgress_UpdateProgress);                  browser.Wait();                    // click the button and verify that the progress appears and disappears again                  AssertUI.IsNotDisplayed(browser.First(".update-progress"));                  browser.ElementAt("input[type=button]"' 0).Click();                  AssertUI.IsDisplayed(browser.First(".update-progress"));                  browser.Wait(3000);                  AssertUI.IsNotDisplayed(browser.First(".update-progress"));                    // click the second button and verify that the progress appears and disappears again                  AssertUI.IsNotDisplayed(browser.First(".update-progress"));                  browser.ElementAt("input[type=button]"' 1).Click();                  browser.Wait(1000);                  AssertUI.IsNotDisplayed(browser.First(".update-progress"));              });
Magic Number,DotVVM.Samples.Tests.Control,UpdateProgressTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\UpdateProgressTests.cs,Control_UpdateProgress_UpdateProgress,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_UpdateProgress_UpdateProgress);                  browser.Wait();                    // click the button and verify that the progress appears and disappears again                  AssertUI.IsNotDisplayed(browser.First(".update-progress"));                  browser.ElementAt("input[type=button]"' 0).Click();                  AssertUI.IsDisplayed(browser.First(".update-progress"));                  browser.Wait(3000);                  AssertUI.IsNotDisplayed(browser.First(".update-progress"));                    // click the second button and verify that the progress appears and disappears again                  AssertUI.IsNotDisplayed(browser.First(".update-progress"));                  browser.ElementAt("input[type=button]"' 1).Click();                  browser.Wait(1000);                  AssertUI.IsNotDisplayed(browser.First(".update-progress"));              });
Magic Number,DotVVM.Samples.Tests.Control,UpdateProgressTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\UpdateProgressTests.cs,Control_UpdateProgress_UpdateProgressDelayLongTest,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_UpdateProgress_UpdateProgressDelay);                  browser.Wait();                    // click the button with long test and verify that the progress appears and disappears again                  AssertUI.IsNotDisplayed(browser.First(".update-progress"));                  browser.First(".long-test").Click();                    //wait for the progress to be shown                  browser.WaitFor(() => {                      AssertUI.IsDisplayed(browser.First(".update-progress"));                  }' 3000);                    //verify that the progress disappears                   browser.WaitFor(() => {                      AssertUI.IsNotDisplayed(browser.First(".update-progress"));                  }' 2000);              });
Magic Number,DotVVM.Samples.Tests.Control,UpdateProgressTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\UpdateProgressTests.cs,Control_UpdateProgress_UpdateProgressDelayLongTest,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_UpdateProgress_UpdateProgressDelay);                  browser.Wait();                    // click the button with long test and verify that the progress appears and disappears again                  AssertUI.IsNotDisplayed(browser.First(".update-progress"));                  browser.First(".long-test").Click();                    //wait for the progress to be shown                  browser.WaitFor(() => {                      AssertUI.IsDisplayed(browser.First(".update-progress"));                  }' 3000);                    //verify that the progress disappears                   browser.WaitFor(() => {                      AssertUI.IsNotDisplayed(browser.First(".update-progress"));                  }' 2000);              });
Magic Number,DotVVM.Samples.Tests.Control,UpdateProgressTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\UpdateProgressTests.cs,Control_UpdateProgress_UpdateProgressDelayShortTest,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_UpdateProgress_UpdateProgressDelay);                  browser.Wait();                    // click the second button with short test and verify that the progress does not appear                  AssertUI.IsNotDisplayed(browser.First(".update-progress"));                  browser.First(".short-test").Click();                    browser.WaitFor(() => AssertUI.IsNotDisplayed(browser.First(".update-progress"))' 3000);                });
Magic Number,DotVVM.Samples.Tests.Control,UpdateProgressTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\UpdateProgressTests.cs,Control_UpdateProgress_UpdateProgressDelayInterruptTest,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_UpdateProgress_UpdateProgressDelay);                  browser.Wait();                  var updateProgressControl = browser.First(".update-progress");                    // click the second button with short test and verify that the progress does not appear                  AssertUI.IsNotDisplayed(updateProgressControl);                  browser.First(".short-test").Click();                  //waiting for the update progress to show up                  browser.WaitFor(() => {                      AssertUI.IsNotDisplayed(updateProgressControl);                  }' 3000);                    // click the first button with long test and verify that the progress does appear                  AssertUI.IsNotDisplayed(updateProgressControl);                  browser.First(".long-test").Click();                  //waiting for the update progress to show up                  browser.WaitFor(() => {                      AssertUI.IsDisplayed(updateProgressControl);                  }' 3000);                    //interrupting first postback with another postback (it should still be displayed and wait to second postback end)                  AssertUI.IsDisplayed(updateProgressControl);                  browser.First(".long-test").Click();                  //update progress should be displayed during whole postback                  browser.Wait(2000);                  AssertUI.IsDisplayed(updateProgressControl);                    //update progress should disapear after postback end                  browser.WaitFor(() => {                      AssertUI.IsNotDisplayed(updateProgressControl);                  }' 2000);              });
Magic Number,DotVVM.Samples.Tests.Control,UpdateProgressTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\UpdateProgressTests.cs,Control_UpdateProgress_UpdateProgressDelayInterruptTest,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_UpdateProgress_UpdateProgressDelay);                  browser.Wait();                  var updateProgressControl = browser.First(".update-progress");                    // click the second button with short test and verify that the progress does not appear                  AssertUI.IsNotDisplayed(updateProgressControl);                  browser.First(".short-test").Click();                  //waiting for the update progress to show up                  browser.WaitFor(() => {                      AssertUI.IsNotDisplayed(updateProgressControl);                  }' 3000);                    // click the first button with long test and verify that the progress does appear                  AssertUI.IsNotDisplayed(updateProgressControl);                  browser.First(".long-test").Click();                  //waiting for the update progress to show up                  browser.WaitFor(() => {                      AssertUI.IsDisplayed(updateProgressControl);                  }' 3000);                    //interrupting first postback with another postback (it should still be displayed and wait to second postback end)                  AssertUI.IsDisplayed(updateProgressControl);                  browser.First(".long-test").Click();                  //update progress should be displayed during whole postback                  browser.Wait(2000);                  AssertUI.IsDisplayed(updateProgressControl);                    //update progress should disapear after postback end                  browser.WaitFor(() => {                      AssertUI.IsNotDisplayed(updateProgressControl);                  }' 2000);              });
Magic Number,DotVVM.Samples.Tests.Control,UpdateProgressTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\UpdateProgressTests.cs,Control_UpdateProgress_UpdateProgressDelayInterruptTest,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_UpdateProgress_UpdateProgressDelay);                  browser.Wait();                  var updateProgressControl = browser.First(".update-progress");                    // click the second button with short test and verify that the progress does not appear                  AssertUI.IsNotDisplayed(updateProgressControl);                  browser.First(".short-test").Click();                  //waiting for the update progress to show up                  browser.WaitFor(() => {                      AssertUI.IsNotDisplayed(updateProgressControl);                  }' 3000);                    // click the first button with long test and verify that the progress does appear                  AssertUI.IsNotDisplayed(updateProgressControl);                  browser.First(".long-test").Click();                  //waiting for the update progress to show up                  browser.WaitFor(() => {                      AssertUI.IsDisplayed(updateProgressControl);                  }' 3000);                    //interrupting first postback with another postback (it should still be displayed and wait to second postback end)                  AssertUI.IsDisplayed(updateProgressControl);                  browser.First(".long-test").Click();                  //update progress should be displayed during whole postback                  browser.Wait(2000);                  AssertUI.IsDisplayed(updateProgressControl);                    //update progress should disapear after postback end                  browser.WaitFor(() => {                      AssertUI.IsNotDisplayed(updateProgressControl);                  }' 2000);              });
Magic Number,DotVVM.Samples.Tests.Control,UpdateProgressTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\UpdateProgressTests.cs,Control_UpdateProgress_UpdateProgressDelayInterruptTest,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_UpdateProgress_UpdateProgressDelay);                  browser.Wait();                  var updateProgressControl = browser.First(".update-progress");                    // click the second button with short test and verify that the progress does not appear                  AssertUI.IsNotDisplayed(updateProgressControl);                  browser.First(".short-test").Click();                  //waiting for the update progress to show up                  browser.WaitFor(() => {                      AssertUI.IsNotDisplayed(updateProgressControl);                  }' 3000);                    // click the first button with long test and verify that the progress does appear                  AssertUI.IsNotDisplayed(updateProgressControl);                  browser.First(".long-test").Click();                  //waiting for the update progress to show up                  browser.WaitFor(() => {                      AssertUI.IsDisplayed(updateProgressControl);                  }' 3000);                    //interrupting first postback with another postback (it should still be displayed and wait to second postback end)                  AssertUI.IsDisplayed(updateProgressControl);                  browser.First(".long-test").Click();                  //update progress should be displayed during whole postback                  browser.Wait(2000);                  AssertUI.IsDisplayed(updateProgressControl);                    //update progress should disapear after postback end                  browser.WaitFor(() => {                      AssertUI.IsNotDisplayed(updateProgressControl);                  }' 2000);              });
Magic Number,DotVVM.Samples.Tests.Control,UpdateProgressTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\UpdateProgressTests.cs,Control_UpdateProgress_UpdateProgressQueues,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_UpdateProgress_UpdateProgressQueues);                  browser.Wait();                    var button1 = browser.ElementAt("input[type=button]"' 0);                  var button2 = browser.ElementAt("input[type=button]"' 1);                  var button3 = browser.ElementAt("input[type=button]"' 2);                  var buttonDefault = browser.ElementAt("input[type=button]"' 3);                  var progress1 = browser.Single(".updateprogress-allqueues");                  var progress2 = browser.Single(".updateprogress-queue1");                  var progress3 = browser.Single(".updateprogress-queue12");                  var progress4 = browser.Single(".updateprogress-exclude1default");                    // first button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  button1.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsDisplayed(progress2);                  AssertUI.IsDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  browser.Wait(1500);                    // second button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  button2.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsDisplayed(progress3);                  AssertUI.IsDisplayed(progress4);                  browser.Wait(1500);                    // third button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  button3.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsDisplayed(progress4);                  browser.Wait(1500);                    // fourth button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  buttonDefault.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  browser.Wait(1500);                    AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);              });
Magic Number,DotVVM.Samples.Tests.Control,UpdateProgressTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\UpdateProgressTests.cs,Control_UpdateProgress_UpdateProgressQueues,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_UpdateProgress_UpdateProgressQueues);                  browser.Wait();                    var button1 = browser.ElementAt("input[type=button]"' 0);                  var button2 = browser.ElementAt("input[type=button]"' 1);                  var button3 = browser.ElementAt("input[type=button]"' 2);                  var buttonDefault = browser.ElementAt("input[type=button]"' 3);                  var progress1 = browser.Single(".updateprogress-allqueues");                  var progress2 = browser.Single(".updateprogress-queue1");                  var progress3 = browser.Single(".updateprogress-queue12");                  var progress4 = browser.Single(".updateprogress-exclude1default");                    // first button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  button1.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsDisplayed(progress2);                  AssertUI.IsDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  browser.Wait(1500);                    // second button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  button2.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsDisplayed(progress3);                  AssertUI.IsDisplayed(progress4);                  browser.Wait(1500);                    // third button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  button3.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsDisplayed(progress4);                  browser.Wait(1500);                    // fourth button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  buttonDefault.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  browser.Wait(1500);                    AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);              });
Magic Number,DotVVM.Samples.Tests.Control,UpdateProgressTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\UpdateProgressTests.cs,Control_UpdateProgress_UpdateProgressQueues,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_UpdateProgress_UpdateProgressQueues);                  browser.Wait();                    var button1 = browser.ElementAt("input[type=button]"' 0);                  var button2 = browser.ElementAt("input[type=button]"' 1);                  var button3 = browser.ElementAt("input[type=button]"' 2);                  var buttonDefault = browser.ElementAt("input[type=button]"' 3);                  var progress1 = browser.Single(".updateprogress-allqueues");                  var progress2 = browser.Single(".updateprogress-queue1");                  var progress3 = browser.Single(".updateprogress-queue12");                  var progress4 = browser.Single(".updateprogress-exclude1default");                    // first button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  button1.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsDisplayed(progress2);                  AssertUI.IsDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  browser.Wait(1500);                    // second button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  button2.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsDisplayed(progress3);                  AssertUI.IsDisplayed(progress4);                  browser.Wait(1500);                    // third button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  button3.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsDisplayed(progress4);                  browser.Wait(1500);                    // fourth button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  buttonDefault.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  browser.Wait(1500);                    AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);              });
Magic Number,DotVVM.Samples.Tests.Control,UpdateProgressTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\UpdateProgressTests.cs,Control_UpdateProgress_UpdateProgressQueues,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_UpdateProgress_UpdateProgressQueues);                  browser.Wait();                    var button1 = browser.ElementAt("input[type=button]"' 0);                  var button2 = browser.ElementAt("input[type=button]"' 1);                  var button3 = browser.ElementAt("input[type=button]"' 2);                  var buttonDefault = browser.ElementAt("input[type=button]"' 3);                  var progress1 = browser.Single(".updateprogress-allqueues");                  var progress2 = browser.Single(".updateprogress-queue1");                  var progress3 = browser.Single(".updateprogress-queue12");                  var progress4 = browser.Single(".updateprogress-exclude1default");                    // first button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  button1.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsDisplayed(progress2);                  AssertUI.IsDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  browser.Wait(1500);                    // second button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  button2.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsDisplayed(progress3);                  AssertUI.IsDisplayed(progress4);                  browser.Wait(1500);                    // third button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  button3.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsDisplayed(progress4);                  browser.Wait(1500);                    // fourth button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  buttonDefault.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  browser.Wait(1500);                    AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);              });
Magic Number,DotVVM.Samples.Tests.Control,UpdateProgressTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\UpdateProgressTests.cs,Control_UpdateProgress_UpdateProgressQueues,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_UpdateProgress_UpdateProgressQueues);                  browser.Wait();                    var button1 = browser.ElementAt("input[type=button]"' 0);                  var button2 = browser.ElementAt("input[type=button]"' 1);                  var button3 = browser.ElementAt("input[type=button]"' 2);                  var buttonDefault = browser.ElementAt("input[type=button]"' 3);                  var progress1 = browser.Single(".updateprogress-allqueues");                  var progress2 = browser.Single(".updateprogress-queue1");                  var progress3 = browser.Single(".updateprogress-queue12");                  var progress4 = browser.Single(".updateprogress-exclude1default");                    // first button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  button1.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsDisplayed(progress2);                  AssertUI.IsDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  browser.Wait(1500);                    // second button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  button2.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsDisplayed(progress3);                  AssertUI.IsDisplayed(progress4);                  browser.Wait(1500);                    // third button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  button3.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsDisplayed(progress4);                  browser.Wait(1500);                    // fourth button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  buttonDefault.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  browser.Wait(1500);                    AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);              });
Magic Number,DotVVM.Samples.Tests.Control,UpdateProgressTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\UpdateProgressTests.cs,Control_UpdateProgress_UpdateProgressQueues,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_UpdateProgress_UpdateProgressQueues);                  browser.Wait();                    var button1 = browser.ElementAt("input[type=button]"' 0);                  var button2 = browser.ElementAt("input[type=button]"' 1);                  var button3 = browser.ElementAt("input[type=button]"' 2);                  var buttonDefault = browser.ElementAt("input[type=button]"' 3);                  var progress1 = browser.Single(".updateprogress-allqueues");                  var progress2 = browser.Single(".updateprogress-queue1");                  var progress3 = browser.Single(".updateprogress-queue12");                  var progress4 = browser.Single(".updateprogress-exclude1default");                    // first button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  button1.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsDisplayed(progress2);                  AssertUI.IsDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  browser.Wait(1500);                    // second button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  button2.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsDisplayed(progress3);                  AssertUI.IsDisplayed(progress4);                  browser.Wait(1500);                    // third button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  button3.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsDisplayed(progress4);                  browser.Wait(1500);                    // fourth button                  AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  buttonDefault.Click();                  AssertUI.IsDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);                  browser.Wait(1500);                    AssertUI.IsNotDisplayed(progress1);                  AssertUI.IsNotDisplayed(progress2);                  AssertUI.IsNotDisplayed(progress3);                  AssertUI.IsNotDisplayed(progress4);              });
Magic Number,DotVVM.Samples.Tests.Control,UpdateProgressTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\UpdateProgressTests.cs,Control_UpdateProgress_SPA_Redirect,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(route);                  browser.Wait();                    var spaTextElement = browser.Single("text"' SelectByDataUi);                  var goToSpa2Btn = browser.Single("btn-2"' SelectByDataUi);                  var progress = browser.Single("progress"' By.Id);                    AssertUI.InnerTextEquals(spaTextElement' "PAGE 1");                  AssertUI.IsNotDisplayed(progress);                    goToSpa2Btn.Click();                    var sw = new Stopwatch();                  sw.Start();                  while (sw.ElapsedMilliseconds < 2100) // action should take only 2000ms                  {                      string spaText;                      try                      {                          spaText = browser.Single("text"' SelectByDataUi).GetInnerText();                      }                      //element changed during retrieval of text.                      catch (StaleElementReferenceException)                      {                          continue;                      }                        if (spaText != "PAGE 1")                      {                          AssertUI.IsDisplayed(progress);                      }                      else                      {                          return;                      }                        Thread.Sleep(50);                  }                    Assert.True(false' "SPA 2 page did not load in time");              });
Magic Number,DotVVM.Samples.Tests.Control,UpdateProgressTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\UpdateProgressTests.cs,Control_UpdateProgress_SPA_Redirect,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(route);                  browser.Wait();                    var spaTextElement = browser.Single("text"' SelectByDataUi);                  var goToSpa2Btn = browser.Single("btn-2"' SelectByDataUi);                  var progress = browser.Single("progress"' By.Id);                    AssertUI.InnerTextEquals(spaTextElement' "PAGE 1");                  AssertUI.IsNotDisplayed(progress);                    goToSpa2Btn.Click();                    var sw = new Stopwatch();                  sw.Start();                  while (sw.ElapsedMilliseconds < 2100) // action should take only 2000ms                  {                      string spaText;                      try                      {                          spaText = browser.Single("text"' SelectByDataUi).GetInnerText();                      }                      //element changed during retrieval of text.                      catch (StaleElementReferenceException)                      {                          continue;                      }                        if (spaText != "PAGE 1")                      {                          AssertUI.IsDisplayed(progress);                      }                      else                      {                          return;                      }                        Thread.Sleep(50);                  }                    Assert.True(false' "SPA 2 page did not load in time");              });
Magic Number,DotVVM.Samples.Tests.Control,UpdateProgressTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\UpdateProgressTests.cs,Control_UpdateProgress_SPA_LongAction,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_UpdateProgress_UpdateProgressRedirectSPA1);                  browser.Wait();                  var progress = browser.Single("progress"' By.Id);                    AssertUI.IsNotDisplayed(progress);                    browser.Single("long"' SelectByDataUi).Click();                  AssertUI.IsDisplayed(progress);                  Thread.Sleep(1000);                  progress.WaitFor(AssertUI.IsNotDisplayed' 500'                      "Update progress did not hide after action finished");              });
Magic Number,DotVVM.Samples.Tests.Control,UpdateProgressTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\UpdateProgressTests.cs,Control_UpdateProgress_SPA_LongAction,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_UpdateProgress_UpdateProgressRedirectSPA1);                  browser.Wait();                  var progress = browser.Single("progress"' By.Id);                    AssertUI.IsNotDisplayed(progress);                    browser.Single("long"' SelectByDataUi).Click();                  AssertUI.IsDisplayed(progress);                  Thread.Sleep(1000);                  progress.WaitFor(AssertUI.IsNotDisplayed' 500'                      "Update progress did not hide after action finished");              });
Magic Number,DotVVM.Samples.Tests.Control,ValidationSummaryTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Control\ValidationSummaryTests.cs,Control_ValidationSummary_RecursiveValidationSummary,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ValidationSummary_RecursiveValidationSummary);                    browser.ElementAt("input[type=button]"' 0).Click().Wait();                    browser.ElementAt("ul"' 0).FindElements("li").ThrowIfDifferentCountThan(2);                  AssertUI.InnerTextEquals(browser.First("#result")' "false");                    browser.ElementAt("input[type=button]"' 1).Click().Wait();                  browser.ElementAt("ul"' 1).FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.First("#result")' "false");              });
Magic Number,DotVVM.Samples.Tests,ErrorsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\ErrorsTests.cs,Error_ExceptionWindow_DotNetReferenceSourceRedirect,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.Errors_FieldInValueBinding);                  browser.First("label[for=menu_radio_stack_trace]").Click();                    //find and click on github link                  var link = browser.FindElements("div.exceptionStackTrace span.docLinks a")                             .First(s => s.Children.Any(c => c.GetTagName() == "img" && ((c.GetAttribute("src")?.IndexOf("referencesource.microsoft.com"' StringComparison.OrdinalIgnoreCase) ?? -1) > -1)))                             .GetAttribute("href");                  var startQuery = link.IndexOf("q=");                  var query = link.Substring(startQuery + 2);                  //Log("query: " + query);                  var specificLink = "https://referencesource.microsoft.com/api/symbols/?symbol=" + query;                  using (var wc = new System.Net.WebClient())                  {                      var downloadedString = wc.DownloadString(specificLink);                      if (downloadedString.IndexOf("No results found"' StringComparison.OrdinalIgnoreCase) != -1)                      {                          throw new Exception("The relevant docs page on referencesource.microsoft.com was not found.");                      }                  }              });
Magic Number,DotVVM.Samples.Tests.Feature,ActionFilterErrorHandlingTest,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ActionFilterErrorHandlingTest.cs,Feature_ActionFilterErrorHandling_ActionFilterErrorHandling_PageException,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ActionFilterErrorHandling_ActionFilterPageErrorHandling);                  browser.Wait(1000);                  AssertUI.Url(browser' u => u.Contains("error500"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ActionFilterErrorHandlingTest,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ActionFilterErrorHandlingTest.cs,Feature_ActionFilterErrorHandling_ActionFilterRedirect,The following statement contains a magic number: RunInAllBrowsers(browser => {                  // try the first button                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ActionFilterErrorHandling_ActionFilterRedirect);                  browser.Wait(1000);                  AssertUI.Url(browser' u => !u.Contains("?redirected=true"));                  browser.ElementAt("input"' 0).Click();                  browser.Wait(1000);                  AssertUI.Url(browser' u => u.Contains("?redirected=true"));                    // try the second button                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ActionFilterErrorHandling_ActionFilterRedirect);                  browser.Wait(1000);                  AssertUI.Url(browser' u => !u.Contains("?redirected=true"));                  browser.ElementAt("input"' 1).Click();                  browser.Wait(1000);                  AssertUI.Url(browser' u => u.Contains("?redirected=true"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ActionFilterErrorHandlingTest,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ActionFilterErrorHandlingTest.cs,Feature_ActionFilterErrorHandling_ActionFilterRedirect,The following statement contains a magic number: RunInAllBrowsers(browser => {                  // try the first button                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ActionFilterErrorHandling_ActionFilterRedirect);                  browser.Wait(1000);                  AssertUI.Url(browser' u => !u.Contains("?redirected=true"));                  browser.ElementAt("input"' 0).Click();                  browser.Wait(1000);                  AssertUI.Url(browser' u => u.Contains("?redirected=true"));                    // try the second button                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ActionFilterErrorHandling_ActionFilterRedirect);                  browser.Wait(1000);                  AssertUI.Url(browser' u => !u.Contains("?redirected=true"));                  browser.ElementAt("input"' 1).Click();                  browser.Wait(1000);                  AssertUI.Url(browser' u => u.Contains("?redirected=true"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ActionFilterErrorHandlingTest,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ActionFilterErrorHandlingTest.cs,Feature_ActionFilterErrorHandling_ActionFilterRedirect,The following statement contains a magic number: RunInAllBrowsers(browser => {                  // try the first button                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ActionFilterErrorHandling_ActionFilterRedirect);                  browser.Wait(1000);                  AssertUI.Url(browser' u => !u.Contains("?redirected=true"));                  browser.ElementAt("input"' 0).Click();                  browser.Wait(1000);                  AssertUI.Url(browser' u => u.Contains("?redirected=true"));                    // try the second button                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ActionFilterErrorHandling_ActionFilterRedirect);                  browser.Wait(1000);                  AssertUI.Url(browser' u => !u.Contains("?redirected=true"));                  browser.ElementAt("input"' 1).Click();                  browser.Wait(1000);                  AssertUI.Url(browser' u => u.Contains("?redirected=true"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ActionFilterErrorHandlingTest,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ActionFilterErrorHandlingTest.cs,Feature_ActionFilterErrorHandling_ActionFilterRedirect,The following statement contains a magic number: RunInAllBrowsers(browser => {                  // try the first button                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ActionFilterErrorHandling_ActionFilterRedirect);                  browser.Wait(1000);                  AssertUI.Url(browser' u => !u.Contains("?redirected=true"));                  browser.ElementAt("input"' 0).Click();                  browser.Wait(1000);                  AssertUI.Url(browser' u => u.Contains("?redirected=true"));                    // try the second button                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ActionFilterErrorHandling_ActionFilterRedirect);                  browser.Wait(1000);                  AssertUI.Url(browser' u => !u.Contains("?redirected=true"));                  browser.ElementAt("input"' 1).Click();                  browser.Wait(1000);                  AssertUI.Url(browser' u => u.Contains("?redirected=true"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_GithubRepoApi,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_GithubRepoApi);                    IEnumerable<IElementWrapper> options = null;                  browser.WaitFor(() =>                  {                      options = browser.First("select").FindElements("option");                      return options.Any(o => o.GetInnerText() == "dotvvm");                  }' 10000);                    // check dotvvm repo issues                  browser.Wait(2000);                  var dotvvmIssues = browser.First("table").FindElements("tr").Skip(1).ToList();                  Assert.True(dotvvmIssues.Count > 10);                    // get text of the first issue                  dotvvmIssues.ElementAt(0).First("a").Click();                  browser.Wait(2000);                  var firstIssueText = browser.First(".id-current-issue-text").GetInnerText();                    // make sure it changes when I click another issue                  dotvvmIssues.ElementAt(dotvvmIssues.Count - 1).First("a").Click();                  browser.Wait(2000);                  var lastIssueText = browser.First(".id-current-issue-text").GetInnerText();                    Assert.NotEqual(firstIssueText' lastIssueText);                    // switch to DotVVM Docs                  Assert.Contains(options' o => o.GetInnerText() == "dotvvm-docs");                  browser.First("select").Select("dotvvm-docs");                  browser.Wait(2000);                    // make sure that the table has changed                  var docsIssues = browser.First("table").FindElements("tr").Skip(1).ToList();                  Assert.True(docsIssues.Count > 1);                    docsIssues.ElementAt(0).First("a").Click();                  browser.Wait(2000);                  var firstIssueText2 = browser.First(".id-current-issue-text").GetInnerText();                  Assert.NotEqual(firstIssueText' firstIssueText2);              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_GithubRepoApi,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_GithubRepoApi);                    IEnumerable<IElementWrapper> options = null;                  browser.WaitFor(() =>                  {                      options = browser.First("select").FindElements("option");                      return options.Any(o => o.GetInnerText() == "dotvvm");                  }' 10000);                    // check dotvvm repo issues                  browser.Wait(2000);                  var dotvvmIssues = browser.First("table").FindElements("tr").Skip(1).ToList();                  Assert.True(dotvvmIssues.Count > 10);                    // get text of the first issue                  dotvvmIssues.ElementAt(0).First("a").Click();                  browser.Wait(2000);                  var firstIssueText = browser.First(".id-current-issue-text").GetInnerText();                    // make sure it changes when I click another issue                  dotvvmIssues.ElementAt(dotvvmIssues.Count - 1).First("a").Click();                  browser.Wait(2000);                  var lastIssueText = browser.First(".id-current-issue-text").GetInnerText();                    Assert.NotEqual(firstIssueText' lastIssueText);                    // switch to DotVVM Docs                  Assert.Contains(options' o => o.GetInnerText() == "dotvvm-docs");                  browser.First("select").Select("dotvvm-docs");                  browser.Wait(2000);                    // make sure that the table has changed                  var docsIssues = browser.First("table").FindElements("tr").Skip(1).ToList();                  Assert.True(docsIssues.Count > 1);                    docsIssues.ElementAt(0).First("a").Click();                  browser.Wait(2000);                  var firstIssueText2 = browser.First(".id-current-issue-text").GetInnerText();                  Assert.NotEqual(firstIssueText' firstIssueText2);              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_GithubRepoApi,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_GithubRepoApi);                    IEnumerable<IElementWrapper> options = null;                  browser.WaitFor(() =>                  {                      options = browser.First("select").FindElements("option");                      return options.Any(o => o.GetInnerText() == "dotvvm");                  }' 10000);                    // check dotvvm repo issues                  browser.Wait(2000);                  var dotvvmIssues = browser.First("table").FindElements("tr").Skip(1).ToList();                  Assert.True(dotvvmIssues.Count > 10);                    // get text of the first issue                  dotvvmIssues.ElementAt(0).First("a").Click();                  browser.Wait(2000);                  var firstIssueText = browser.First(".id-current-issue-text").GetInnerText();                    // make sure it changes when I click another issue                  dotvvmIssues.ElementAt(dotvvmIssues.Count - 1).First("a").Click();                  browser.Wait(2000);                  var lastIssueText = browser.First(".id-current-issue-text").GetInnerText();                    Assert.NotEqual(firstIssueText' lastIssueText);                    // switch to DotVVM Docs                  Assert.Contains(options' o => o.GetInnerText() == "dotvvm-docs");                  browser.First("select").Select("dotvvm-docs");                  browser.Wait(2000);                    // make sure that the table has changed                  var docsIssues = browser.First("table").FindElements("tr").Skip(1).ToList();                  Assert.True(docsIssues.Count > 1);                    docsIssues.ElementAt(0).First("a").Click();                  browser.Wait(2000);                  var firstIssueText2 = browser.First(".id-current-issue-text").GetInnerText();                  Assert.NotEqual(firstIssueText' firstIssueText2);              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_GithubRepoApi,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_GithubRepoApi);                    IEnumerable<IElementWrapper> options = null;                  browser.WaitFor(() =>                  {                      options = browser.First("select").FindElements("option");                      return options.Any(o => o.GetInnerText() == "dotvvm");                  }' 10000);                    // check dotvvm repo issues                  browser.Wait(2000);                  var dotvvmIssues = browser.First("table").FindElements("tr").Skip(1).ToList();                  Assert.True(dotvvmIssues.Count > 10);                    // get text of the first issue                  dotvvmIssues.ElementAt(0).First("a").Click();                  browser.Wait(2000);                  var firstIssueText = browser.First(".id-current-issue-text").GetInnerText();                    // make sure it changes when I click another issue                  dotvvmIssues.ElementAt(dotvvmIssues.Count - 1).First("a").Click();                  browser.Wait(2000);                  var lastIssueText = browser.First(".id-current-issue-text").GetInnerText();                    Assert.NotEqual(firstIssueText' lastIssueText);                    // switch to DotVVM Docs                  Assert.Contains(options' o => o.GetInnerText() == "dotvvm-docs");                  browser.First("select").Select("dotvvm-docs");                  browser.Wait(2000);                    // make sure that the table has changed                  var docsIssues = browser.First("table").FindElements("tr").Skip(1).ToList();                  Assert.True(docsIssues.Count > 1);                    docsIssues.ElementAt(0).First("a").Click();                  browser.Wait(2000);                  var firstIssueText2 = browser.First(".id-current-issue-text").GetInnerText();                  Assert.NotEqual(firstIssueText' firstIssueText2);              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_GithubRepoApi,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_GithubRepoApi);                    IEnumerable<IElementWrapper> options = null;                  browser.WaitFor(() =>                  {                      options = browser.First("select").FindElements("option");                      return options.Any(o => o.GetInnerText() == "dotvvm");                  }' 10000);                    // check dotvvm repo issues                  browser.Wait(2000);                  var dotvvmIssues = browser.First("table").FindElements("tr").Skip(1).ToList();                  Assert.True(dotvvmIssues.Count > 10);                    // get text of the first issue                  dotvvmIssues.ElementAt(0).First("a").Click();                  browser.Wait(2000);                  var firstIssueText = browser.First(".id-current-issue-text").GetInnerText();                    // make sure it changes when I click another issue                  dotvvmIssues.ElementAt(dotvvmIssues.Count - 1).First("a").Click();                  browser.Wait(2000);                  var lastIssueText = browser.First(".id-current-issue-text").GetInnerText();                    Assert.NotEqual(firstIssueText' lastIssueText);                    // switch to DotVVM Docs                  Assert.Contains(options' o => o.GetInnerText() == "dotvvm-docs");                  browser.First("select").Select("dotvvm-docs");                  browser.Wait(2000);                    // make sure that the table has changed                  var docsIssues = browser.First("table").FindElements("tr").Skip(1).ToList();                  Assert.True(docsIssues.Count > 1);                    docsIssues.ElementAt(0).First("a").Click();                  browser.Wait(2000);                  var firstIssueText2 = browser.First(".id-current-issue-text").GetInnerText();                  Assert.NotEqual(firstIssueText' firstIssueText2);              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_GithubRepoApi,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_GithubRepoApi);                    IEnumerable<IElementWrapper> options = null;                  browser.WaitFor(() =>                  {                      options = browser.First("select").FindElements("option");                      return options.Any(o => o.GetInnerText() == "dotvvm");                  }' 10000);                    // check dotvvm repo issues                  browser.Wait(2000);                  var dotvvmIssues = browser.First("table").FindElements("tr").Skip(1).ToList();                  Assert.True(dotvvmIssues.Count > 10);                    // get text of the first issue                  dotvvmIssues.ElementAt(0).First("a").Click();                  browser.Wait(2000);                  var firstIssueText = browser.First(".id-current-issue-text").GetInnerText();                    // make sure it changes when I click another issue                  dotvvmIssues.ElementAt(dotvvmIssues.Count - 1).First("a").Click();                  browser.Wait(2000);                  var lastIssueText = browser.First(".id-current-issue-text").GetInnerText();                    Assert.NotEqual(firstIssueText' lastIssueText);                    // switch to DotVVM Docs                  Assert.Contains(options' o => o.GetInnerText() == "dotvvm-docs");                  browser.First("select").Select("dotvvm-docs");                  browser.Wait(2000);                    // make sure that the table has changed                  var docsIssues = browser.First("table").FindElements("tr").Skip(1).ToList();                  Assert.True(docsIssues.Count > 1);                    docsIssues.ElementAt(0).First("a").Click();                  browser.Wait(2000);                  var firstIssueText2 = browser.First(".id-current-issue-text").GetInnerText();                  Assert.NotEqual(firstIssueText' firstIssueText2);              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_GithubRepoApi,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_GithubRepoApi);                    IEnumerable<IElementWrapper> options = null;                  browser.WaitFor(() =>                  {                      options = browser.First("select").FindElements("option");                      return options.Any(o => o.GetInnerText() == "dotvvm");                  }' 10000);                    // check dotvvm repo issues                  browser.Wait(2000);                  var dotvvmIssues = browser.First("table").FindElements("tr").Skip(1).ToList();                  Assert.True(dotvvmIssues.Count > 10);                    // get text of the first issue                  dotvvmIssues.ElementAt(0).First("a").Click();                  browser.Wait(2000);                  var firstIssueText = browser.First(".id-current-issue-text").GetInnerText();                    // make sure it changes when I click another issue                  dotvvmIssues.ElementAt(dotvvmIssues.Count - 1).First("a").Click();                  browser.Wait(2000);                  var lastIssueText = browser.First(".id-current-issue-text").GetInnerText();                    Assert.NotEqual(firstIssueText' lastIssueText);                    // switch to DotVVM Docs                  Assert.Contains(options' o => o.GetInnerText() == "dotvvm-docs");                  browser.First("select").Select("dotvvm-docs");                  browser.Wait(2000);                    // make sure that the table has changed                  var docsIssues = browser.First("table").FindElements("tr").Skip(1).ToList();                  Assert.True(docsIssues.Count > 1);                    docsIssues.ElementAt(0).First("a").Click();                  browser.Wait(2000);                  var firstIssueText2 = browser.First(".id-current-issue-text").GetInnerText();                  Assert.NotEqual(firstIssueText' firstIssueText2);              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_GetCollection,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_GetCollection);                    // click the first button (ID = 11)                  browser.WaitFor(() => {                      browser.First(".id-company[data-company-id='11'] input[type=button]").Click()                          .Wait();                  }' 30000' "Cannot find CompanyID = 11. Probably data are not loaded. (The page did not load in 5s.)");                    // ensure that orders have been loaded                  var orders = browser.FindElements(".id-order");                  AssertUI.Any(orders).Attribute("data-order-id"' "6");                    var idToDelete = orders[2].GetAttribute("data-order-id");       // every order has two elements (read-only and edit)                    // delete order (ID = 7)                  browser.First($".id-order[data-order-id='{idToDelete}'] input[type=button][value=Delete]").Click().Wait();                  orders = browser.FindElements(".id-order");                  AssertUI.Any(orders).Attribute("data-order-id"' "6");                  AssertUI.All(orders).Attribute("data-order-id"' s => s != idToDelete);                    // click the second button (ID = 12)                  browser.First(".id-company[data-company-id='12'] input[type=button]").Click().Wait();                    // ensure that orders have been loaded                  orders = browser.FindElements(".id-order");                  AssertUI.Any(orders).Attribute("data-order-id"' "2");                  AssertUI.Any(orders).Attribute("data-order-id"' "9");                    // edit order (ID = 2)                  browser.First(".id-order[data-order-id='2'] input[type=button][value=Edit]").Click().Wait();                  browser.First(".id-order.id-edit input[type=text]").Clear().SendKeys("2000-01-01");                  browser.First(".id-order.id-edit input[type=button][value=Apply]").Click().Wait();                  browser.First(".id-order.id-edit input[type=button][value=Exit]").Click().Wait();                    AssertUI.TextEquals(browser.First(".id-order[data-order-id='2'] .id-date")' "2000-01-01");                    // change the order (ID = 2) date back so the test can be run once again                  browser.First(".id-order[data-order-id='2'] input[type=button][value=Edit]").Click().Wait();                  browser.First(".id-order.id-edit input[type=text]").Clear().SendKeys("2010-01-01");                  browser.First(".id-order.id-edit input[type=button][value=Apply]").Click().Wait();                  browser.First(".id-order.id-edit input[type=button][value=Exit]").Click().Wait();                    AssertUI.TextEquals(browser.First(".id-order[data-order-id='2'] .id-date")' "2010-01-01");              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_GetCollection,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_GetCollection);                    // click the first button (ID = 11)                  browser.WaitFor(() => {                      browser.First(".id-company[data-company-id='11'] input[type=button]").Click()                          .Wait();                  }' 30000' "Cannot find CompanyID = 11. Probably data are not loaded. (The page did not load in 5s.)");                    // ensure that orders have been loaded                  var orders = browser.FindElements(".id-order");                  AssertUI.Any(orders).Attribute("data-order-id"' "6");                    var idToDelete = orders[2].GetAttribute("data-order-id");       // every order has two elements (read-only and edit)                    // delete order (ID = 7)                  browser.First($".id-order[data-order-id='{idToDelete}'] input[type=button][value=Delete]").Click().Wait();                  orders = browser.FindElements(".id-order");                  AssertUI.Any(orders).Attribute("data-order-id"' "6");                  AssertUI.All(orders).Attribute("data-order-id"' s => s != idToDelete);                    // click the second button (ID = 12)                  browser.First(".id-company[data-company-id='12'] input[type=button]").Click().Wait();                    // ensure that orders have been loaded                  orders = browser.FindElements(".id-order");                  AssertUI.Any(orders).Attribute("data-order-id"' "2");                  AssertUI.Any(orders).Attribute("data-order-id"' "9");                    // edit order (ID = 2)                  browser.First(".id-order[data-order-id='2'] input[type=button][value=Edit]").Click().Wait();                  browser.First(".id-order.id-edit input[type=text]").Clear().SendKeys("2000-01-01");                  browser.First(".id-order.id-edit input[type=button][value=Apply]").Click().Wait();                  browser.First(".id-order.id-edit input[type=button][value=Exit]").Click().Wait();                    AssertUI.TextEquals(browser.First(".id-order[data-order-id='2'] .id-date")' "2000-01-01");                    // change the order (ID = 2) date back so the test can be run once again                  browser.First(".id-order[data-order-id='2'] input[type=button][value=Edit]").Click().Wait();                  browser.First(".id-order.id-edit input[type=text]").Clear().SendKeys("2010-01-01");                  browser.First(".id-order.id-edit input[type=button][value=Apply]").Click().Wait();                  browser.First(".id-order.id-edit input[type=button][value=Exit]").Click().Wait();                    AssertUI.TextEquals(browser.First(".id-order[data-order-id='2'] .id-date")' "2010-01-01");              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_AzureFunctionsApi,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_AzureFunctionsApi);                  string originalDate1 = null;                  string refreshedDate1 = null;                    browser.WaitFor(() => {                      var date1 = browser.First(".id-date1");                      AssertUI.TextNotEmpty(date1);                      originalDate1 = date1.GetText();                  }' 15000' "Page did not loaded in 15s.");                    // click the get data button                  browser.First("input[type=button]").Click();                    browser.WaitFor(() => {                      var date1 = browser.First(".id-date1");                      AssertUI.TextNotEquals(date1' originalDate1);                      refreshedDate1 = date1.GetText();                  }' 5000' "#LI :1");                    // test again                  originalDate1 = refreshedDate1;                  browser.Wait(1500);                    // click it again - the time changes every second                    browser.First("input[type=button]").Click();                  browser.WaitFor(() => {                      var date1 = browser.First(".id-date1");                      AssertUI.TextNotEquals(date1' originalDate1);                      refreshedDate1 = date1.GetText();                  }' 5000' "#LI :2");                    // click the set data button                  browser.ElementAt("input[type=button]"' 1).Click();                    browser.WaitFor(() => {                      var date2 = browser.First(".id-date2");                      AssertUI.TextEquals(date2' refreshedDate1);                  }' 5000);              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_AzureFunctionsApi,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_AzureFunctionsApi);                  string originalDate1 = null;                  string refreshedDate1 = null;                    browser.WaitFor(() => {                      var date1 = browser.First(".id-date1");                      AssertUI.TextNotEmpty(date1);                      originalDate1 = date1.GetText();                  }' 15000' "Page did not loaded in 15s.");                    // click the get data button                  browser.First("input[type=button]").Click();                    browser.WaitFor(() => {                      var date1 = browser.First(".id-date1");                      AssertUI.TextNotEquals(date1' originalDate1);                      refreshedDate1 = date1.GetText();                  }' 5000' "#LI :1");                    // test again                  originalDate1 = refreshedDate1;                  browser.Wait(1500);                    // click it again - the time changes every second                    browser.First("input[type=button]").Click();                  browser.WaitFor(() => {                      var date1 = browser.First(".id-date1");                      AssertUI.TextNotEquals(date1' originalDate1);                      refreshedDate1 = date1.GetText();                  }' 5000' "#LI :2");                    // click the set data button                  browser.ElementAt("input[type=button]"' 1).Click();                    browser.WaitFor(() => {                      var date2 = browser.First(".id-date2");                      AssertUI.TextEquals(date2' refreshedDate1);                  }' 5000);              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_AzureFunctionsApi,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_AzureFunctionsApi);                  string originalDate1 = null;                  string refreshedDate1 = null;                    browser.WaitFor(() => {                      var date1 = browser.First(".id-date1");                      AssertUI.TextNotEmpty(date1);                      originalDate1 = date1.GetText();                  }' 15000' "Page did not loaded in 15s.");                    // click the get data button                  browser.First("input[type=button]").Click();                    browser.WaitFor(() => {                      var date1 = browser.First(".id-date1");                      AssertUI.TextNotEquals(date1' originalDate1);                      refreshedDate1 = date1.GetText();                  }' 5000' "#LI :1");                    // test again                  originalDate1 = refreshedDate1;                  browser.Wait(1500);                    // click it again - the time changes every second                    browser.First("input[type=button]").Click();                  browser.WaitFor(() => {                      var date1 = browser.First(".id-date1");                      AssertUI.TextNotEquals(date1' originalDate1);                      refreshedDate1 = date1.GetText();                  }' 5000' "#LI :2");                    // click the set data button                  browser.ElementAt("input[type=button]"' 1).Click();                    browser.WaitFor(() => {                      var date2 = browser.First(".id-date2");                      AssertUI.TextEquals(date2' refreshedDate1);                  }' 5000);              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_AzureFunctionsApi,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_AzureFunctionsApi);                  string originalDate1 = null;                  string refreshedDate1 = null;                    browser.WaitFor(() => {                      var date1 = browser.First(".id-date1");                      AssertUI.TextNotEmpty(date1);                      originalDate1 = date1.GetText();                  }' 15000' "Page did not loaded in 15s.");                    // click the get data button                  browser.First("input[type=button]").Click();                    browser.WaitFor(() => {                      var date1 = browser.First(".id-date1");                      AssertUI.TextNotEquals(date1' originalDate1);                      refreshedDate1 = date1.GetText();                  }' 5000' "#LI :1");                    // test again                  originalDate1 = refreshedDate1;                  browser.Wait(1500);                    // click it again - the time changes every second                    browser.First("input[type=button]").Click();                  browser.WaitFor(() => {                      var date1 = browser.First(".id-date1");                      AssertUI.TextNotEquals(date1' originalDate1);                      refreshedDate1 = date1.GetText();                  }' 5000' "#LI :2");                    // click the set data button                  browser.ElementAt("input[type=button]"' 1).Click();                    browser.WaitFor(() => {                      var date2 = browser.First(".id-date2");                      AssertUI.TextEquals(date2' refreshedDate1);                  }' 5000);              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_AzureFunctionsApi,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_AzureFunctionsApi);                  string originalDate1 = null;                  string refreshedDate1 = null;                    browser.WaitFor(() => {                      var date1 = browser.First(".id-date1");                      AssertUI.TextNotEmpty(date1);                      originalDate1 = date1.GetText();                  }' 15000' "Page did not loaded in 15s.");                    // click the get data button                  browser.First("input[type=button]").Click();                    browser.WaitFor(() => {                      var date1 = browser.First(".id-date1");                      AssertUI.TextNotEquals(date1' originalDate1);                      refreshedDate1 = date1.GetText();                  }' 5000' "#LI :1");                    // test again                  originalDate1 = refreshedDate1;                  browser.Wait(1500);                    // click it again - the time changes every second                    browser.First("input[type=button]").Click();                  browser.WaitFor(() => {                      var date1 = browser.First(".id-date1");                      AssertUI.TextNotEquals(date1' originalDate1);                      refreshedDate1 = date1.GetText();                  }' 5000' "#LI :2");                    // click the set data button                  browser.ElementAt("input[type=button]"' 1).Click();                    browser.WaitFor(() => {                      var date2 = browser.First(".id-date2");                      AssertUI.TextEquals(date2' refreshedDate1);                  }' 5000);              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_AzureFunctionsApiTable,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_AzureFunctionsApiTable);                  browser.Wait(2000);                    // fill Add entity form                  browser.ElementAt(".form-create input[type=text]"' 0).Clear().SendKeys("UI Test");                  browser.ElementAt(".form-create input[type=text]"' 1).Clear().SendKeys("15");                  browser.ElementAt(".form-create input[type=text]"' 2).Clear().SendKeys("2018-10-28 12:13:14");                    // submit                  browser.ElementAt(".form-create input[type=button]"' 0).Click().Wait();                  browser.ElementAt(".form-create input[type=button]"' 1).Click().Wait();                    // make sure the new row is in the table                  var row = browser.FindElements(".form-grid tr").Skip(1).First(r => r.ElementAt("td"' 0).GetText() == "UI Test");                  AssertUI.TextEquals(row.ElementAt("td"' 1)' "15");                  AssertUI.TextEquals(row.ElementAt("td"' 2)' "2018-10-28 12:13:14");                    // delete UI Test items                  foreach (var r in browser.FindElements(".form-grid tr").Skip(1).Where(r => r.ElementAt("td"' 0).GetText() == "UI Test"))                  {                      r.First("input[type=checkbox]").Click();                  }                  browser.First(".form-grid input[type=button]").Click().Wait();                  browser.ElementAt(".form-create input[type=button]"' 1).Click().Wait();                    // make sure it disappeared                  Assert.Equal(0' browser.FindElements(".form-grid tr").Skip(1).Count(r => r.ElementAt("td"' 0).GetText() == "UI Test"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_AzureFunctionsApiTable,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_AzureFunctionsApiTable);                  browser.Wait(2000);                    // fill Add entity form                  browser.ElementAt(".form-create input[type=text]"' 0).Clear().SendKeys("UI Test");                  browser.ElementAt(".form-create input[type=text]"' 1).Clear().SendKeys("15");                  browser.ElementAt(".form-create input[type=text]"' 2).Clear().SendKeys("2018-10-28 12:13:14");                    // submit                  browser.ElementAt(".form-create input[type=button]"' 0).Click().Wait();                  browser.ElementAt(".form-create input[type=button]"' 1).Click().Wait();                    // make sure the new row is in the table                  var row = browser.FindElements(".form-grid tr").Skip(1).First(r => r.ElementAt("td"' 0).GetText() == "UI Test");                  AssertUI.TextEquals(row.ElementAt("td"' 1)' "15");                  AssertUI.TextEquals(row.ElementAt("td"' 2)' "2018-10-28 12:13:14");                    // delete UI Test items                  foreach (var r in browser.FindElements(".form-grid tr").Skip(1).Where(r => r.ElementAt("td"' 0).GetText() == "UI Test"))                  {                      r.First("input[type=checkbox]").Click();                  }                  browser.First(".form-grid input[type=button]").Click().Wait();                  browser.ElementAt(".form-create input[type=button]"' 1).Click().Wait();                    // make sure it disappeared                  Assert.Equal(0' browser.FindElements(".form-grid tr").Skip(1).Count(r => r.ElementAt("td"' 0).GetText() == "UI Test"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_AzureFunctionsApiTable,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_AzureFunctionsApiTable);                  browser.Wait(2000);                    // fill Add entity form                  browser.ElementAt(".form-create input[type=text]"' 0).Clear().SendKeys("UI Test");                  browser.ElementAt(".form-create input[type=text]"' 1).Clear().SendKeys("15");                  browser.ElementAt(".form-create input[type=text]"' 2).Clear().SendKeys("2018-10-28 12:13:14");                    // submit                  browser.ElementAt(".form-create input[type=button]"' 0).Click().Wait();                  browser.ElementAt(".form-create input[type=button]"' 1).Click().Wait();                    // make sure the new row is in the table                  var row = browser.FindElements(".form-grid tr").Skip(1).First(r => r.ElementAt("td"' 0).GetText() == "UI Test");                  AssertUI.TextEquals(row.ElementAt("td"' 1)' "15");                  AssertUI.TextEquals(row.ElementAt("td"' 2)' "2018-10-28 12:13:14");                    // delete UI Test items                  foreach (var r in browser.FindElements(".form-grid tr").Skip(1).Where(r => r.ElementAt("td"' 0).GetText() == "UI Test"))                  {                      r.First("input[type=checkbox]").Click();                  }                  browser.First(".form-grid input[type=button]").Click().Wait();                  browser.ElementAt(".form-create input[type=button]"' 1).Click().Wait();                    // make sure it disappeared                  Assert.Equal(0' browser.FindElements(".form-grid tr").Skip(1).Count(r => r.ElementAt("td"' 0).GetText() == "UI Test"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,ApiTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ApiTests.cs,Feature_Api_BindingSharing,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Api_BindingSharing);                    // wait for the page is loaded                  browser.WaitFor(() => {                      for (int i = 0; i < 6; i++)                      {                          browser.ElementAt("select"' 0).FindElements("option").ThrowIfSequenceEmpty();                      }                  }' 10000' "The ComboBoxes didn't load.");                    // check combobox contents                  var combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(6);                    AssertUI.TextEquals(combos[0].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[0].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[1].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[2].ElementAt("option"' 0)' "Category 3 / Item 1");                    AssertUI.TextEquals(combos[3].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[3].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[4].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[5].ElementAt("option"' 0)' "Category 3 / Item 1");                    browser.Wait(1000);                                    // check requests                  var requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/get?category=3"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/getWithRouteParam/3"));                    // click on the button                  browser.Single("input[type=button]").Click();                  browser.Wait(2000);                    combos = browser.FindElements("select");                  combos.ThrowIfDifferentCountThan(9);                    AssertUI.TextEquals(combos[6].ElementAt("option"' 0)' "Category 1 / Item 1");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 1)' "Category 1 / Item 2");                  AssertUI.TextEquals(combos[6].ElementAt("option"' 2)' "Category 1 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 0)' "Category 2 / Item 1");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 1)' "Category 2 / Item 2");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 2)' "Category 2 / Item 3");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 3)' "Category 2 / Item 4");                  AssertUI.TextEquals(combos[7].ElementAt("option"' 4)' "Category 2 / Item 5");                  AssertUI.TextEquals(combos[8].ElementAt("option"' 0)' "Category 3 / Item 1");                    // check requests                  requests = browser.Single("pre").GetInnerText().Split('\r'' '\n').Where(l => l.Trim().Length > 0).ToList();                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/get?category=3")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/1")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/2")));                  Assert.Equal(2' requests.Count(r => r.EndsWith("BindingSharing/getWithRouteParam/3")));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=1"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=2"));                  Assert.Single(requests' r => r.EndsWith("BindingSharing/post?category=3"));              });
Magic Number,DotVVM.Samples.Tests.Feature,BindingContextsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\BindingContextsTests.cs,Feature_BindingContexts_BindingContext,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_BindingContexts_BindingContext);                  browser.Wait(1000);                    var linkCount = browser.FindElements("a").Count;                  for (var i = 0; i < linkCount; i++)                  {                      var link = browser.ElementAt("a"' i);                      link.Click();                      browser.WaitFor(() => {                          AssertUI.InnerTextEquals(browser.Single(".result")' link.GetInnerText());                      }' 3000' 50);                  }              });
Magic Number,DotVVM.Samples.Tests.Feature,BindingContextsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\BindingContextsTests.cs,Feature_BindingContexts_BindingContext,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_BindingContexts_BindingContext);                  browser.Wait(1000);                    var linkCount = browser.FindElements("a").Count;                  for (var i = 0; i < linkCount; i++)                  {                      var link = browser.ElementAt("a"' i);                      link.Click();                      browser.WaitFor(() => {                          AssertUI.InnerTextEquals(browser.Single(".result")' link.GetInnerText());                      }' 3000' 50);                  }              });
Magic Number,DotVVM.Samples.Tests.Feature,BindingContextsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\BindingContextsTests.cs,Feature_BindingContexts_BindingContext,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_BindingContexts_BindingContext);                  browser.Wait(1000);                    var linkCount = browser.FindElements("a").Count;                  for (var i = 0; i < linkCount; i++)                  {                      var link = browser.ElementAt("a"' i);                      link.Click();                      browser.WaitFor(() => {                          AssertUI.InnerTextEquals(browser.Single(".result")' link.GetInnerText());                      }' 3000' 50);                  }              });
Magic Number,DotVVM.Samples.Tests.Feature,BindingContextsTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\BindingContextsTests.cs,Feature_BindingContexts_CollectionContext,The following statement contains a magic number: RunInAllBrowsers(browser => {                  foreach (var a in new[] { "Client"' "Server" })                  {                      browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_BindingContexts_CollectionContext + $"?renderMode={a}");                      browser.Wait(1000);                        var elements = browser.FindElements(By.ClassName("collection-index"));                      elements.ThrowIfSequenceEmpty();                      elements.ForEach(e => AssertUI.InnerTextEquals(e' elements.IndexOf(e).ToString()));                  }              });
Magic Number,DotVVM.Samples.Tests.Feature,BindingPageInfoTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\BindingPageInfoTests.cs,Feature_BindingPageInfo_BindingPageInfo,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_BindingPageInfo_BindingPageInfo);                    var text = browser.Single("[data-ui=postback-text]");                  var button = browser.Single("[data-ui=long-postback-button]");                    AssertUI.InnerTextEquals(text' "no postback");                  button.Click();                  AssertUI.InnerTextEquals(text' "postback running");                    browser.Wait(1000);                  AssertUI.InnerTextEquals(text' "no postback");              });
Magic Number,DotVVM.Samples.Tests.Feature,DateTimeSerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\DateTimeSerializationTests.cs,Feature_DateTimeSerialization_DateTimeSerialization,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_DateTimeSerialization_DateTimeSerialization);                  browser.WaitFor(() => browser.FindElements("input[type=text]").ThrowIfSequenceEmpty()' 5000);                    // verify the first date                  browser.ElementAt("input[type=text]"' 0).Clear().SendKeys("18.2.1988");                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)' s => DateTime.Parse(s).Equals(new DateTime(1988' 2' 18)));                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)'                      s => DateTime.Parse(s).Equals(DateTime.MinValue));                    // verify the second date                  browser.ElementAt("input[type=text]"' 1).Clear().SendKeys("2011-03-19 16:48:17");                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 1)'                      s => DateTime.Parse(s).Equals(new DateTime(2011' 3' 19' 16' 48' 0)));                    browser.ElementAt("input[type=text]"' 1).Clear();                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerTextEquals(browser.ElementAt("span"' 1)' "null");                    // try to set dates from server                  browser.ElementAt("input[type=button]"' 0).Click();                  browser.ElementAt("input[type=button]"' 2).Click();                    browser.Wait(500);                    // there is no time in the field                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 0)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalHours < 24);                    // the minutes can differ slightly                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 1)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalMinutes < 1);              });
Magic Number,DotVVM.Samples.Tests.Feature,DateTimeSerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\DateTimeSerializationTests.cs,Feature_DateTimeSerialization_DateTimeSerialization,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_DateTimeSerialization_DateTimeSerialization);                  browser.WaitFor(() => browser.FindElements("input[type=text]").ThrowIfSequenceEmpty()' 5000);                    // verify the first date                  browser.ElementAt("input[type=text]"' 0).Clear().SendKeys("18.2.1988");                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)' s => DateTime.Parse(s).Equals(new DateTime(1988' 2' 18)));                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)'                      s => DateTime.Parse(s).Equals(DateTime.MinValue));                    // verify the second date                  browser.ElementAt("input[type=text]"' 1).Clear().SendKeys("2011-03-19 16:48:17");                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 1)'                      s => DateTime.Parse(s).Equals(new DateTime(2011' 3' 19' 16' 48' 0)));                    browser.ElementAt("input[type=text]"' 1).Clear();                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerTextEquals(browser.ElementAt("span"' 1)' "null");                    // try to set dates from server                  browser.ElementAt("input[type=button]"' 0).Click();                  browser.ElementAt("input[type=button]"' 2).Click();                    browser.Wait(500);                    // there is no time in the field                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 0)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalHours < 24);                    // the minutes can differ slightly                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 1)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalMinutes < 1);              });
Magic Number,DotVVM.Samples.Tests.Feature,DateTimeSerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\DateTimeSerializationTests.cs,Feature_DateTimeSerialization_DateTimeSerialization,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_DateTimeSerialization_DateTimeSerialization);                  browser.WaitFor(() => browser.FindElements("input[type=text]").ThrowIfSequenceEmpty()' 5000);                    // verify the first date                  browser.ElementAt("input[type=text]"' 0).Clear().SendKeys("18.2.1988");                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)' s => DateTime.Parse(s).Equals(new DateTime(1988' 2' 18)));                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)'                      s => DateTime.Parse(s).Equals(DateTime.MinValue));                    // verify the second date                  browser.ElementAt("input[type=text]"' 1).Clear().SendKeys("2011-03-19 16:48:17");                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 1)'                      s => DateTime.Parse(s).Equals(new DateTime(2011' 3' 19' 16' 48' 0)));                    browser.ElementAt("input[type=text]"' 1).Clear();                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerTextEquals(browser.ElementAt("span"' 1)' "null");                    // try to set dates from server                  browser.ElementAt("input[type=button]"' 0).Click();                  browser.ElementAt("input[type=button]"' 2).Click();                    browser.Wait(500);                    // there is no time in the field                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 0)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalHours < 24);                    // the minutes can differ slightly                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 1)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalMinutes < 1);              });
Magic Number,DotVVM.Samples.Tests.Feature,DateTimeSerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\DateTimeSerializationTests.cs,Feature_DateTimeSerialization_DateTimeSerialization,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_DateTimeSerialization_DateTimeSerialization);                  browser.WaitFor(() => browser.FindElements("input[type=text]").ThrowIfSequenceEmpty()' 5000);                    // verify the first date                  browser.ElementAt("input[type=text]"' 0).Clear().SendKeys("18.2.1988");                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)' s => DateTime.Parse(s).Equals(new DateTime(1988' 2' 18)));                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)'                      s => DateTime.Parse(s).Equals(DateTime.MinValue));                    // verify the second date                  browser.ElementAt("input[type=text]"' 1).Clear().SendKeys("2011-03-19 16:48:17");                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 1)'                      s => DateTime.Parse(s).Equals(new DateTime(2011' 3' 19' 16' 48' 0)));                    browser.ElementAt("input[type=text]"' 1).Clear();                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerTextEquals(browser.ElementAt("span"' 1)' "null");                    // try to set dates from server                  browser.ElementAt("input[type=button]"' 0).Click();                  browser.ElementAt("input[type=button]"' 2).Click();                    browser.Wait(500);                    // there is no time in the field                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 0)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalHours < 24);                    // the minutes can differ slightly                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 1)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalMinutes < 1);              });
Magic Number,DotVVM.Samples.Tests.Feature,DateTimeSerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\DateTimeSerializationTests.cs,Feature_DateTimeSerialization_DateTimeSerialization,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_DateTimeSerialization_DateTimeSerialization);                  browser.WaitFor(() => browser.FindElements("input[type=text]").ThrowIfSequenceEmpty()' 5000);                    // verify the first date                  browser.ElementAt("input[type=text]"' 0).Clear().SendKeys("18.2.1988");                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)' s => DateTime.Parse(s).Equals(new DateTime(1988' 2' 18)));                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)'                      s => DateTime.Parse(s).Equals(DateTime.MinValue));                    // verify the second date                  browser.ElementAt("input[type=text]"' 1).Clear().SendKeys("2011-03-19 16:48:17");                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 1)'                      s => DateTime.Parse(s).Equals(new DateTime(2011' 3' 19' 16' 48' 0)));                    browser.ElementAt("input[type=text]"' 1).Clear();                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerTextEquals(browser.ElementAt("span"' 1)' "null");                    // try to set dates from server                  browser.ElementAt("input[type=button]"' 0).Click();                  browser.ElementAt("input[type=button]"' 2).Click();                    browser.Wait(500);                    // there is no time in the field                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 0)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalHours < 24);                    // the minutes can differ slightly                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 1)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalMinutes < 1);              });
Magic Number,DotVVM.Samples.Tests.Feature,DateTimeSerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\DateTimeSerializationTests.cs,Feature_DateTimeSerialization_DateTimeSerialization,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_DateTimeSerialization_DateTimeSerialization);                  browser.WaitFor(() => browser.FindElements("input[type=text]").ThrowIfSequenceEmpty()' 5000);                    // verify the first date                  browser.ElementAt("input[type=text]"' 0).Clear().SendKeys("18.2.1988");                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)' s => DateTime.Parse(s).Equals(new DateTime(1988' 2' 18)));                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)'                      s => DateTime.Parse(s).Equals(DateTime.MinValue));                    // verify the second date                  browser.ElementAt("input[type=text]"' 1).Clear().SendKeys("2011-03-19 16:48:17");                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 1)'                      s => DateTime.Parse(s).Equals(new DateTime(2011' 3' 19' 16' 48' 0)));                    browser.ElementAt("input[type=text]"' 1).Clear();                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerTextEquals(browser.ElementAt("span"' 1)' "null");                    // try to set dates from server                  browser.ElementAt("input[type=button]"' 0).Click();                  browser.ElementAt("input[type=button]"' 2).Click();                    browser.Wait(500);                    // there is no time in the field                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 0)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalHours < 24);                    // the minutes can differ slightly                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 1)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalMinutes < 1);              });
Magic Number,DotVVM.Samples.Tests.Feature,DateTimeSerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\DateTimeSerializationTests.cs,Feature_DateTimeSerialization_DateTimeSerialization,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_DateTimeSerialization_DateTimeSerialization);                  browser.WaitFor(() => browser.FindElements("input[type=text]").ThrowIfSequenceEmpty()' 5000);                    // verify the first date                  browser.ElementAt("input[type=text]"' 0).Clear().SendKeys("18.2.1988");                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)' s => DateTime.Parse(s).Equals(new DateTime(1988' 2' 18)));                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)'                      s => DateTime.Parse(s).Equals(DateTime.MinValue));                    // verify the second date                  browser.ElementAt("input[type=text]"' 1).Clear().SendKeys("2011-03-19 16:48:17");                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 1)'                      s => DateTime.Parse(s).Equals(new DateTime(2011' 3' 19' 16' 48' 0)));                    browser.ElementAt("input[type=text]"' 1).Clear();                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerTextEquals(browser.ElementAt("span"' 1)' "null");                    // try to set dates from server                  browser.ElementAt("input[type=button]"' 0).Click();                  browser.ElementAt("input[type=button]"' 2).Click();                    browser.Wait(500);                    // there is no time in the field                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 0)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalHours < 24);                    // the minutes can differ slightly                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 1)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalMinutes < 1);              });
Magic Number,DotVVM.Samples.Tests.Feature,DateTimeSerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\DateTimeSerializationTests.cs,Feature_DateTimeSerialization_DateTimeSerialization,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_DateTimeSerialization_DateTimeSerialization);                  browser.WaitFor(() => browser.FindElements("input[type=text]").ThrowIfSequenceEmpty()' 5000);                    // verify the first date                  browser.ElementAt("input[type=text]"' 0).Clear().SendKeys("18.2.1988");                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)' s => DateTime.Parse(s).Equals(new DateTime(1988' 2' 18)));                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)'                      s => DateTime.Parse(s).Equals(DateTime.MinValue));                    // verify the second date                  browser.ElementAt("input[type=text]"' 1).Clear().SendKeys("2011-03-19 16:48:17");                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 1)'                      s => DateTime.Parse(s).Equals(new DateTime(2011' 3' 19' 16' 48' 0)));                    browser.ElementAt("input[type=text]"' 1).Clear();                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerTextEquals(browser.ElementAt("span"' 1)' "null");                    // try to set dates from server                  browser.ElementAt("input[type=button]"' 0).Click();                  browser.ElementAt("input[type=button]"' 2).Click();                    browser.Wait(500);                    // there is no time in the field                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 0)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalHours < 24);                    // the minutes can differ slightly                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 1)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalMinutes < 1);              });
Magic Number,DotVVM.Samples.Tests.Feature,DateTimeSerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\DateTimeSerializationTests.cs,Feature_DateTimeSerialization_DateTimeSerialization,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_DateTimeSerialization_DateTimeSerialization);                  browser.WaitFor(() => browser.FindElements("input[type=text]").ThrowIfSequenceEmpty()' 5000);                    // verify the first date                  browser.ElementAt("input[type=text]"' 0).Clear().SendKeys("18.2.1988");                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)' s => DateTime.Parse(s).Equals(new DateTime(1988' 2' 18)));                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)'                      s => DateTime.Parse(s).Equals(DateTime.MinValue));                    // verify the second date                  browser.ElementAt("input[type=text]"' 1).Clear().SendKeys("2011-03-19 16:48:17");                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 1)'                      s => DateTime.Parse(s).Equals(new DateTime(2011' 3' 19' 16' 48' 0)));                    browser.ElementAt("input[type=text]"' 1).Clear();                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerTextEquals(browser.ElementAt("span"' 1)' "null");                    // try to set dates from server                  browser.ElementAt("input[type=button]"' 0).Click();                  browser.ElementAt("input[type=button]"' 2).Click();                    browser.Wait(500);                    // there is no time in the field                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 0)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalHours < 24);                    // the minutes can differ slightly                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 1)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalMinutes < 1);              });
Magic Number,DotVVM.Samples.Tests.Feature,DateTimeSerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\DateTimeSerializationTests.cs,Feature_DateTimeSerialization_DateTimeSerialization,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_DateTimeSerialization_DateTimeSerialization);                  browser.WaitFor(() => browser.FindElements("input[type=text]").ThrowIfSequenceEmpty()' 5000);                    // verify the first date                  browser.ElementAt("input[type=text]"' 0).Clear().SendKeys("18.2.1988");                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)' s => DateTime.Parse(s).Equals(new DateTime(1988' 2' 18)));                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)'                      s => DateTime.Parse(s).Equals(DateTime.MinValue));                    // verify the second date                  browser.ElementAt("input[type=text]"' 1).Clear().SendKeys("2011-03-19 16:48:17");                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 1)'                      s => DateTime.Parse(s).Equals(new DateTime(2011' 3' 19' 16' 48' 0)));                    browser.ElementAt("input[type=text]"' 1).Clear();                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerTextEquals(browser.ElementAt("span"' 1)' "null");                    // try to set dates from server                  browser.ElementAt("input[type=button]"' 0).Click();                  browser.ElementAt("input[type=button]"' 2).Click();                    browser.Wait(500);                    // there is no time in the field                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 0)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalHours < 24);                    // the minutes can differ slightly                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 1)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalMinutes < 1);              });
Magic Number,DotVVM.Samples.Tests.Feature,DateTimeSerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\DateTimeSerializationTests.cs,Feature_DateTimeSerialization_DateTimeSerialization,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_DateTimeSerialization_DateTimeSerialization);                  browser.WaitFor(() => browser.FindElements("input[type=text]").ThrowIfSequenceEmpty()' 5000);                    // verify the first date                  browser.ElementAt("input[type=text]"' 0).Clear().SendKeys("18.2.1988");                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)' s => DateTime.Parse(s).Equals(new DateTime(1988' 2' 18)));                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)'                      s => DateTime.Parse(s).Equals(DateTime.MinValue));                    // verify the second date                  browser.ElementAt("input[type=text]"' 1).Clear().SendKeys("2011-03-19 16:48:17");                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 1)'                      s => DateTime.Parse(s).Equals(new DateTime(2011' 3' 19' 16' 48' 0)));                    browser.ElementAt("input[type=text]"' 1).Clear();                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerTextEquals(browser.ElementAt("span"' 1)' "null");                    // try to set dates from server                  browser.ElementAt("input[type=button]"' 0).Click();                  browser.ElementAt("input[type=button]"' 2).Click();                    browser.Wait(500);                    // there is no time in the field                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 0)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalHours < 24);                    // the minutes can differ slightly                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 1)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalMinutes < 1);              });
Magic Number,DotVVM.Samples.Tests.Feature,DateTimeSerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\DateTimeSerializationTests.cs,Feature_DateTimeSerialization_DateTimeSerialization,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_DateTimeSerialization_DateTimeSerialization);                  browser.WaitFor(() => browser.FindElements("input[type=text]").ThrowIfSequenceEmpty()' 5000);                    // verify the first date                  browser.ElementAt("input[type=text]"' 0).Clear().SendKeys("18.2.1988");                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)' s => DateTime.Parse(s).Equals(new DateTime(1988' 2' 18)));                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)'                      s => DateTime.Parse(s).Equals(DateTime.MinValue));                    // verify the second date                  browser.ElementAt("input[type=text]"' 1).Clear().SendKeys("2011-03-19 16:48:17");                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 1)'                      s => DateTime.Parse(s).Equals(new DateTime(2011' 3' 19' 16' 48' 0)));                    browser.ElementAt("input[type=text]"' 1).Clear();                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerTextEquals(browser.ElementAt("span"' 1)' "null");                    // try to set dates from server                  browser.ElementAt("input[type=button]"' 0).Click();                  browser.ElementAt("input[type=button]"' 2).Click();                    browser.Wait(500);                    // there is no time in the field                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 0)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalHours < 24);                    // the minutes can differ slightly                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 1)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalMinutes < 1);              });
Magic Number,DotVVM.Samples.Tests.Feature,DateTimeSerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\DateTimeSerializationTests.cs,Feature_DateTimeSerialization_DateTimeSerialization,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_DateTimeSerialization_DateTimeSerialization);                  browser.WaitFor(() => browser.FindElements("input[type=text]").ThrowIfSequenceEmpty()' 5000);                    // verify the first date                  browser.ElementAt("input[type=text]"' 0).Clear().SendKeys("18.2.1988");                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)' s => DateTime.Parse(s).Equals(new DateTime(1988' 2' 18)));                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)'                      s => DateTime.Parse(s).Equals(DateTime.MinValue));                    // verify the second date                  browser.ElementAt("input[type=text]"' 1).Clear().SendKeys("2011-03-19 16:48:17");                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 1)'                      s => DateTime.Parse(s).Equals(new DateTime(2011' 3' 19' 16' 48' 0)));                    browser.ElementAt("input[type=text]"' 1).Clear();                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerTextEquals(browser.ElementAt("span"' 1)' "null");                    // try to set dates from server                  browser.ElementAt("input[type=button]"' 0).Click();                  browser.ElementAt("input[type=button]"' 2).Click();                    browser.Wait(500);                    // there is no time in the field                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 0)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalHours < 24);                    // the minutes can differ slightly                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 1)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalMinutes < 1);              });
Magic Number,DotVVM.Samples.Tests.Feature,DateTimeSerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\DateTimeSerializationTests.cs,Feature_DateTimeSerialization_DateTimeSerialization,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_DateTimeSerialization_DateTimeSerialization);                  browser.WaitFor(() => browser.FindElements("input[type=text]").ThrowIfSequenceEmpty()' 5000);                    // verify the first date                  browser.ElementAt("input[type=text]"' 0).Clear().SendKeys("18.2.1988");                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)' s => DateTime.Parse(s).Equals(new DateTime(1988' 2' 18)));                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=button]"' 1).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 0)'                      s => DateTime.Parse(s).Equals(DateTime.MinValue));                    // verify the second date                  browser.ElementAt("input[type=text]"' 1).Clear().SendKeys("2011-03-19 16:48:17");                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerText(browser.ElementAt("span"' 1)'                      s => DateTime.Parse(s).Equals(new DateTime(2011' 3' 19' 16' 48' 0)));                    browser.ElementAt("input[type=text]"' 1).Clear();                  browser.ElementAt("input[type=button]"' 3).Click();                    AssertUI.InnerTextEquals(browser.ElementAt("span"' 1)' "null");                    // try to set dates from server                  browser.ElementAt("input[type=button]"' 0).Click();                  browser.ElementAt("input[type=button]"' 2).Click();                    browser.Wait(500);                    // there is no time in the field                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 0)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalHours < 24);                    // the minutes can differ slightly                  AssertUI.Attribute(browser.ElementAt("input[type=text]"' 1)' "value"'                      s => (DateTime.Now - DateTime.Parse(s' culture)).TotalMinutes < 1);              });
Magic Number,DotVVM.Samples.Tests.Feature,DateTimeSerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\DateTimeSerializationTests.cs,Feature_DateTimeSerialization_StaticDateTime,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_DateTimeSerialization_DateTimeSerialization);                    AssertUI.Attribute(browser.Single("input[data-ui='static-date']")' "value"' s => string.IsNullOrEmpty(s));                    browser.Single("input[data-ui='set-static-date-button']").Click();                    AssertUI.Attribute(browser.Single("input[data-ui='static-date']")' "value"'                      s => DateTime.Parse(s' culture) == new DateTime(2000' 1' 1));              });
Magic Number,DotVVM.Samples.Tests.Feature,DependencyInjectionTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\DependencyInjectionTests.cs,Feature_DependencyInjection_ViewModelScopedService,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_DependencyInjection_ViewModelScopedService);                    for (int i = 0; i < 5; i++)                  {                      var value = browser.First(".result").GetInnerText();                      AssertUI.InnerTextEquals(browser.First(".result2")' value);                        browser.First("input[type=button]").Click().Wait();                      var value2 = browser.First(".result").GetInnerText();                      AssertUI.InnerTextEquals(browser.First(".result2")' value2);                        Assert.AreNotEqual(value' value2);                  }              });
Magic Number,DotVVM.Samples.Tests.Feature,DirectivesTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\DirectivesTests.cs,Feature_Directives_ImportDirective,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Directives_ImportDirective);                    // check all texts from resources                  AssertUI.InnerTextEquals(browser.ElementAt("p"' 0)' "Hello from ImportDirectiveViewModel");                  AssertUI.InnerTextEquals(browser.ElementAt("p"' 1)' "Hello TestClass1");                  AssertUI.InnerTextEquals(browser.ElementAt("p"' 2)' "Hello TestClassNonAlias");                  AssertUI.InnerTextEquals(browser.ElementAt("p"' 3)' "Default from configuration");                  AssertUI.InnerTextEquals(browser.ElementAt("p"' 4)' "Hello From Nested Class"); // maybe more possibilities?              });
Magic Number,DotVVM.Samples.Tests.Feature,DirectivesTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\DirectivesTests.cs,Feature_Directives_ImportDirective,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Directives_ImportDirective);                    // check all texts from resources                  AssertUI.InnerTextEquals(browser.ElementAt("p"' 0)' "Hello from ImportDirectiveViewModel");                  AssertUI.InnerTextEquals(browser.ElementAt("p"' 1)' "Hello TestClass1");                  AssertUI.InnerTextEquals(browser.ElementAt("p"' 2)' "Hello TestClassNonAlias");                  AssertUI.InnerTextEquals(browser.ElementAt("p"' 3)' "Default from configuration");                  AssertUI.InnerTextEquals(browser.ElementAt("p"' 4)' "Hello From Nested Class"); // maybe more possibilities?              });
Magic Number,DotVVM.Samples.Tests.Feature,DirectivesTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\DirectivesTests.cs,Feature_Directives_ImportDirective,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Directives_ImportDirective);                    // check all texts from resources                  AssertUI.InnerTextEquals(browser.ElementAt("p"' 0)' "Hello from ImportDirectiveViewModel");                  AssertUI.InnerTextEquals(browser.ElementAt("p"' 1)' "Hello TestClass1");                  AssertUI.InnerTextEquals(browser.ElementAt("p"' 2)' "Hello TestClassNonAlias");                  AssertUI.InnerTextEquals(browser.ElementAt("p"' 3)' "Default from configuration");                  AssertUI.InnerTextEquals(browser.ElementAt("p"' 4)' "Hello From Nested Class"); // maybe more possibilities?              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormattingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormattingTests.cs,Feature_Formatting_Formatting,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Formatting_Formatting);                    // verify items rendered on client and on the server are the same                  var items1 = browser.FindElements(".list1 li");                  var items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());                    // do the postback                  browser.Click("input[type=button]");                  browser.Wait();                    // verify items rendered on client and on the server are the same                  items1 = browser.FindElements(".list1 li");                  items2 = browser.FindElements(".list2 li");                  AssertUI.InnerTextEquals(items1.ElementAt(0)' items2.ElementAt(0).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(1)' items2.ElementAt(1).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(2)' items2.ElementAt(2).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(3)' items2.ElementAt(3).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(4)' items2.ElementAt(4).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(5)' items2.ElementAt(5).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(6)' items2.ElementAt(6).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(7)' items2.ElementAt(7).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(8)' items2.ElementAt(8).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(9)' items2.ElementAt(9).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(10)' items2.ElementAt(10).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(11)' items2.ElementAt(11).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(12)' items2.ElementAt(12).GetText());                  AssertUI.InnerTextEquals(items1.ElementAt(13)' items2.ElementAt(13).GetText());              });
Magic Number,DotVVM.Samples.Tests.Feature,FormControlsEnabledTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\FormControlsEnabledTests.cs,Feature_FormControlsEnabled_FormControlsEnabled,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_FormControlsEnabled_FormControlsEnabled);                    bool enabled = false;                    for (int i = 0; i < 2; i++)                  {                      foreach (var prefix in prefixes)                      {                          // These controls should always be enabled because they are explicitly set to Enabled                          AssertUI.IsEnabled(browser.First($"#{prefix}1-enabled"));                          AssertUI.IsEnabled(browser.First($"#{prefix}2-enabled"));                          AssertUI.IsEnabled(browser.First($"#repeater_0_{prefix}-enabled"));                          AssertUI.IsEnabled(browser.First($"#repeater_1_{prefix}-enabled"));                            // These controls should always be disabled                          AssertUI.IsNotEnabled(browser.First($"#{prefix}1-disabled"));                          AssertUI.IsNotEnabled(browser.First($"#{prefix}2-disabled"));                          AssertUI.IsNotEnabled(browser.First($"#repeater_0_{prefix}-disabled"));                          AssertUI.IsNotEnabled(browser.First($"#repeater_1_{prefix}-disabled"));                            // These should be changed by the Toggle button                          if (enabled)                          {                              AssertUI.IsEnabled(browser.First($"#{prefix}1-default"));                              AssertUI.IsEnabled(browser.First($"#{prefix}2-default"));                          }                          else                          {                              AssertUI.IsNotEnabled(browser.First($"#{prefix}1-default"));                              AssertUI.IsNotEnabled(browser.First($"#{prefix}2-default"));                          }                            // These are overriden by the repeater                          AssertUI.IsNotEnabled(browser.First($"#repeater_0_{prefix}-default"));                          AssertUI.IsEnabled(browser.First($"#repeater_1_{prefix}-default"));                      }                      browser.First("#toggle").Click().Wait();                      enabled = !enabled;                  }                    // LinkButton tests. Selenium does not recognize them as disabled as that is handled by DotVVM.                  int linkButtonPresses = 0;                    // These controls should always be enabled because they are explicitly set to Enabled                  TestLinkButton(browser' "linkb1-enabled"' true' ref linkButtonPresses);                  TestLinkButton(browser' "linkb2-enabled"' true' ref linkButtonPresses);                  TestLinkButton(browser' "repeater_0_linkb-enabled"' true' ref linkButtonPresses);                  TestLinkButton(browser' "repeater_1_linkb-enabled"' true' ref linkButtonPresses);                    // These controls should always be disabled                  TestLinkButton(browser' "linkb1-disabled"' false' ref linkButtonPresses);                  TestLinkButton(browser' "linkb2-disabled"' false' ref linkButtonPresses);                  TestLinkButton(browser' "repeater_0_linkb-disabled"' false' ref linkButtonPresses);                  TestLinkButton(browser' "repeater_1_linkb-disabled"' false' ref linkButtonPresses);                    // These should be changed by the Toggle button                  TestLinkButton(browser' "linkb1-default"' enabled' ref linkButtonPresses);                  TestLinkButton(browser' "linkb2-default"' enabled' ref linkButtonPresses);                    // These are overriden by the repeater                  TestLinkButton(browser' "repeater_0_linkb-default"' false' ref linkButtonPresses);                  TestLinkButton(browser' "repeater_1_linkb-default"' true' ref linkButtonPresses);                    browser.First("#toggle").Click().Wait();                  enabled = !enabled;              });
Magic Number,DotVVM.Samples.Tests.Feature,HtmlTagTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\HtmlTagTests.cs,Feature_HtmlTag_NonPairHtmlTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_HtmlTag_NonPairHtmlTag);                    browser.ElementAt("div"' 0).FindElements("hr").ThrowIfDifferentCountThan(2);                  browser.ElementAt("div"' 1).FindElements("hr").ThrowIfDifferentCountThan(1);                    AssertUI.InnerTextEquals(browser.ElementAt("div"' 2).First("span")' "Hello");              });
Magic Number,DotVVM.Samples.Tests.Feature,HtmlTagTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\HtmlTagTests.cs,Feature_HtmlTag_NonPairHtmlTag,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_HtmlTag_NonPairHtmlTag);                    browser.ElementAt("div"' 0).FindElements("hr").ThrowIfDifferentCountThan(2);                  browser.ElementAt("div"' 1).FindElements("hr").ThrowIfDifferentCountThan(1);                    AssertUI.InnerTextEquals(browser.ElementAt("div"' 2).First("span")' "Hello");              });
Magic Number,DotVVM.Samples.Tests.Feature,IdGenerationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\IdGenerationTests.cs,Feature_IdGeneration_IdGeneration,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_IdGeneration_IdGeneration);                  browser.Wait();                    AssertUI.Attribute(browser.Single("*[data-id=test1_marker]")' "id"' s => s.Equals("test1")'                           "Wrong ID");                  AssertUI.Attribute(browser.Single("*[data-id=test2_marker]")' "id"' s => s.Equals("test2")'                           "Wrong ID");                    AssertUI.Attribute(browser.Single("*[data-id=test1a_marker]")' "id"' s => s.Equals("test1a")'                           "Wrong ID");                  AssertUI.Attribute(browser.Single("*[data-id=test2a_marker]")' "id"' s => s.Equals("test2a")'                           "Wrong ID");                    var control1 = browser.Single("#ctl1");                  AssertUI.Attribute(control1.Single("*[data-id=control1_marker]")' "id"' s => s.Equals("ctl1_control1")'                      "Wrong ID");                  AssertUI.Attribute(control1.Single("*[data-id=control2_marker]")' "id"' s => s.Equals("ctl1_control2")'                      "Wrong ID");                    var control2 = browser.Single("#ctl2");                  AssertUI.Attribute(control2.Single("*[data-id=control1_marker]")' "id"' s => s.Equals("control1")'                      "Wrong ID");                  AssertUI.Attribute(control2.Single("*[data-id=control2_marker]")' "id"' s => s.Equals("control2")'                      "Wrong ID");                    var repeater1 = browser.Single("*[data-id=repeater1]");                  for (int i = 0; i < 4; i++)                  {                      AssertUI.Attribute(repeater1.ElementAt("*[data-id=repeater1_marker]"' i)' "id"'                          s => s.Equals(repeater1.GetAttribute("id") + "_" + i + "_repeater1")' "Wrong ID");                      AssertUI.Attribute(repeater1.ElementAt("*[data-id=repeater2_marker]"' i)' "id"'                          s => s.Equals(repeater1.GetAttribute("id") + "_" + i + "_repeater2")' "Wrong ID");                  }                    var repeater2 = browser.Single("*[data-id=repeater2]");                  for (int i = 0; i < 4; i++)                  {                      AssertUI.Attribute(repeater2.ElementAt("*[data-id=repeater1server_marker]"' i)' "id"'                          s => s.Equals(repeater2.GetAttribute("id") + "_" + i + "_repeater1server")' "Wrong ID");                      AssertUI.Attribute(repeater2.ElementAt("*[data-id=repeater2server_marker]"' i)' "id"'                          s => s.Equals(repeater2.GetAttribute("id") + "_" + i + "_repeater2server")' "Wrong ID");                  }                    foreach (var span in browser.Single("*[data-ui=repeater3]").Children)                  {                      AssertUI.Attribute(span' "id"' s => s.Equals(span.GetAttribute("data-ui"))' "Wrong ID");                  }              });
Magic Number,DotVVM.Samples.Tests.Feature,IdGenerationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\IdGenerationTests.cs,Feature_IdGeneration_IdGeneration,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_IdGeneration_IdGeneration);                  browser.Wait();                    AssertUI.Attribute(browser.Single("*[data-id=test1_marker]")' "id"' s => s.Equals("test1")'                           "Wrong ID");                  AssertUI.Attribute(browser.Single("*[data-id=test2_marker]")' "id"' s => s.Equals("test2")'                           "Wrong ID");                    AssertUI.Attribute(browser.Single("*[data-id=test1a_marker]")' "id"' s => s.Equals("test1a")'                           "Wrong ID");                  AssertUI.Attribute(browser.Single("*[data-id=test2a_marker]")' "id"' s => s.Equals("test2a")'                           "Wrong ID");                    var control1 = browser.Single("#ctl1");                  AssertUI.Attribute(control1.Single("*[data-id=control1_marker]")' "id"' s => s.Equals("ctl1_control1")'                      "Wrong ID");                  AssertUI.Attribute(control1.Single("*[data-id=control2_marker]")' "id"' s => s.Equals("ctl1_control2")'                      "Wrong ID");                    var control2 = browser.Single("#ctl2");                  AssertUI.Attribute(control2.Single("*[data-id=control1_marker]")' "id"' s => s.Equals("control1")'                      "Wrong ID");                  AssertUI.Attribute(control2.Single("*[data-id=control2_marker]")' "id"' s => s.Equals("control2")'                      "Wrong ID");                    var repeater1 = browser.Single("*[data-id=repeater1]");                  for (int i = 0; i < 4; i++)                  {                      AssertUI.Attribute(repeater1.ElementAt("*[data-id=repeater1_marker]"' i)' "id"'                          s => s.Equals(repeater1.GetAttribute("id") + "_" + i + "_repeater1")' "Wrong ID");                      AssertUI.Attribute(repeater1.ElementAt("*[data-id=repeater2_marker]"' i)' "id"'                          s => s.Equals(repeater1.GetAttribute("id") + "_" + i + "_repeater2")' "Wrong ID");                  }                    var repeater2 = browser.Single("*[data-id=repeater2]");                  for (int i = 0; i < 4; i++)                  {                      AssertUI.Attribute(repeater2.ElementAt("*[data-id=repeater1server_marker]"' i)' "id"'                          s => s.Equals(repeater2.GetAttribute("id") + "_" + i + "_repeater1server")' "Wrong ID");                      AssertUI.Attribute(repeater2.ElementAt("*[data-id=repeater2server_marker]"' i)' "id"'                          s => s.Equals(repeater2.GetAttribute("id") + "_" + i + "_repeater2server")' "Wrong ID");                  }                    foreach (var span in browser.Single("*[data-ui=repeater3]").Children)                  {                      AssertUI.Attribute(span' "id"' s => s.Equals(span.GetAttribute("data-ui"))' "Wrong ID");                  }              });
Magic Number,DotVVM.Samples.Tests.Feature,LocalizationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\LocalizationTests.cs,Feature_Localization_Localization_FormatString,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Localization_Localization_FormatString);                  var cultureElement = browser.First("#culture");                    AssertUI.InnerText(cultureElement' s => !string.IsNullOrWhiteSpace(s)' "Text is empty and should not be! (Missing current culture code!)");                    var culture = cultureElement.GetText();                  Thread.CurrentThread.CurrentCulture = Thread.CurrentThread.CurrentUICulture = new CultureInfo(culture);                  var value = 12.3456;                    //not supported by framework                  //AssertUI.InnerTextEquals(browser.First("#HardCodedValue")' value.ToString("#0.00"));                    //supported                  AssertUI.InnerTextEquals(browser.First("#HardCodedValueInBinding")' value.ToString("#0.00"));              });
Magic Number,DotVVM.Samples.Tests.Feature,LocalizationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\LocalizationTests.cs,Feature_Localization_Globalize,The following statement contains a magic number: browser.WaitFor(() => AssertUI.TextEquals(browser.Single("span-hello")' "Hello")' 1000);
Magic Number,DotVVM.Samples.Tests.Feature,LocalizationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\LocalizationTests.cs,Feature_Localization_Globalize,The following statement contains a magic number: browser.WaitFor(() => AssertUI.TextEquals(browser.Single("span-parse")' "42")' 1000);
Magic Number,DotVVM.Samples.Tests.Feature,LocalizationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\LocalizationTests.cs,Feature_Localization_Globalize,The following statement contains a magic number: browser.WaitFor(() => AssertUI.TextEquals(browser.Single("span-multiply")' "-42")' 1000);
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_ControlControlCommandInvokeAction,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_ControlControlCommandInvokeAction);                  // The page is complex so we need to wait little longer until the DOM is properly generated                  browser.Wait(2000);                    var allButtons = browser.First("#buttons").FindElements("button");                  foreach (var button in allButtons)                  {                      button.Click();                      browser.WaitFor(() => {                          var parent = button.ParentElement.ParentElement;                          var value = parent.First("[data-id='Column2']").GetText().Trim() + "|" + parent.First("[data-id=Row2]").GetText().Trim() + "|" + parent.First("[data-id='Row']").GetText().Trim() + "|" + parent.First("[data-id=Column]").GetText().Trim();                            AssertUI.InnerTextEquals(browser.First("#value")' value);                      }' 2500' 25' "Button did not invoke action or action was not performed.");                  }                    AssertUI.TextEquals(browser.First("#Duplicity")' "false");              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_ControlControlCommandInvokeAction,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_ControlControlCommandInvokeAction);                  // The page is complex so we need to wait little longer until the DOM is properly generated                  browser.Wait(2000);                    var allButtons = browser.First("#buttons").FindElements("button");                  foreach (var button in allButtons)                  {                      button.Click();                      browser.WaitFor(() => {                          var parent = button.ParentElement.ParentElement;                          var value = parent.First("[data-id='Column2']").GetText().Trim() + "|" + parent.First("[data-id=Row2]").GetText().Trim() + "|" + parent.First("[data-id='Row']").GetText().Trim() + "|" + parent.First("[data-id=Column]").GetText().Trim();                            AssertUI.InnerTextEquals(browser.First("#value")' value);                      }' 2500' 25' "Button did not invoke action or action was not performed.");                  }                    AssertUI.TextEquals(browser.First("#Duplicity")' "false");              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_ControlControlCommandInvokeAction,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_ControlControlCommandInvokeAction);                  // The page is complex so we need to wait little longer until the DOM is properly generated                  browser.Wait(2000);                    var allButtons = browser.First("#buttons").FindElements("button");                  foreach (var button in allButtons)                  {                      button.Click();                      browser.WaitFor(() => {                          var parent = button.ParentElement.ParentElement;                          var value = parent.First("[data-id='Column2']").GetText().Trim() + "|" + parent.First("[data-id=Row2]").GetText().Trim() + "|" + parent.First("[data-id='Row']").GetText().Trim() + "|" + parent.First("[data-id=Column]").GetText().Trim();                            AssertUI.InnerTextEquals(browser.First("#value")' value);                      }' 2500' 25' "Button did not invoke action or action was not performed.");                  }                    AssertUI.TextEquals(browser.First("#Duplicity")' "false");              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_CommandBindingInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_CommandBindingInRepeater);                  AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Hello from DotVVM!");                    browser.ElementAt("input[type=button]"' 0).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 1).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 2).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 3).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 4).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 3");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 5).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 3");                  }' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_CommandBindingInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_CommandBindingInRepeater);                  AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Hello from DotVVM!");                    browser.ElementAt("input[type=button]"' 0).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 1).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 2).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 3).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 4).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 3");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 5).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 3");                  }' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_CommandBindingInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_CommandBindingInRepeater);                  AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Hello from DotVVM!");                    browser.ElementAt("input[type=button]"' 0).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 1).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 2).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 3).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 4).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 3");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 5).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 3");                  }' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_CommandBindingInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_CommandBindingInRepeater);                  AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Hello from DotVVM!");                    browser.ElementAt("input[type=button]"' 0).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 1).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 2).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 3).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 4).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 3");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 5).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 3");                  }' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_CommandBindingInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_CommandBindingInRepeater);                  AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Hello from DotVVM!");                    browser.ElementAt("input[type=button]"' 0).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 1).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 2).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 3).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 4).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 3");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 5).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 3");                  }' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_CommandBindingInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_CommandBindingInRepeater);                  AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Hello from DotVVM!");                    browser.ElementAt("input[type=button]"' 0).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 1).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 2).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 3).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 4).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 3");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 5).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 3");                  }' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_CommandBindingInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_CommandBindingInRepeater);                  AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Hello from DotVVM!");                    browser.ElementAt("input[type=button]"' 0).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 1).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 2).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 3).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 4).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 3");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 5).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 3");                  }' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_CommandBindingInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_CommandBindingInRepeater);                  AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Hello from DotVVM!");                    browser.ElementAt("input[type=button]"' 0).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 1).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 2).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 3).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 4).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 3");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 5).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 3");                  }' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_CommandBindingInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_CommandBindingInRepeater);                  AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Hello from DotVVM!");                    browser.ElementAt("input[type=button]"' 0).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 1).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 2).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 3).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 4).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 3");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 5).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 3");                  }' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_CommandBindingInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_CommandBindingInRepeater);                  AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Hello from DotVVM!");                    browser.ElementAt("input[type=button]"' 0).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 1).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 2).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 3).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 4).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 3");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 5).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 3");                  }' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_CommandBindingInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_CommandBindingInRepeater);                  AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Hello from DotVVM!");                    browser.ElementAt("input[type=button]"' 0).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 1).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 2).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 3).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 4).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 3");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 5).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 3");                  }' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_CommandBindingInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_CommandBindingInRepeater);                  AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Hello from DotVVM!");                    browser.ElementAt("input[type=button]"' 0).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 1).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 2).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 3).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 4).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 3");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 5).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 3");                  }' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_CommandBindingInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_CommandBindingInRepeater);                  AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Hello from DotVVM!");                    browser.ElementAt("input[type=button]"' 0).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 1).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 2).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 3).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 4).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 3");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 5).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 3");                  }' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_CommandBindingInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_CommandBindingInRepeater);                  AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Hello from DotVVM!");                    browser.ElementAt("input[type=button]"' 0).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 1).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 2).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 3).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 4).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 3");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 5).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 3");                  }' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_CommandBindingInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_CommandBindingInRepeater);                  AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Hello from DotVVM!");                    browser.ElementAt("input[type=button]"' 0).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 1).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 2).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 3).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 4).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 3");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 5).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 3");                  }' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_CommandBindingInRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_CommandBindingInRepeater);                  AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Hello from DotVVM!");                    browser.ElementAt("input[type=button]"' 0).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 1).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 1");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 2).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 3).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 2");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 4).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action1 - Item 3");                  }' 1000' 30);                    browser.ElementAt("input[type=button]"' 5).Click();                  browser.WaitFor(() => {                      AssertUI.InnerTextEquals(browser.First("span[data-uitest=result]")' "Action2 - Item 3");                  }' 1000' 30);              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_MarkupControlRegistration,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_MarkupControlRegistration);                    AssertUI.InnerTextEquals(browser.ElementAt("h2"' 0)' "First Control");                  AssertUI.InnerTextEquals(browser.ElementAt("h2"' 1)' "Second control name was set from the binding");                    AssertUI.Value(browser.ElementAt("input[type=text]"' 0)' "15");                  browser.ElementAt("input[type=button]"' 0).Click().Wait();                  AssertUI.Value(browser.ElementAt("input[type=text]"' 0)' "16");                  browser.ElementAt("input[type=button]"' 0).Click().Wait();                  AssertUI.Value(browser.ElementAt("input[type=text]"' 0)' "17");                  browser.ElementAt("input[type=button]"' 1).Click().Wait();                  AssertUI.Value(browser.ElementAt("input[type=text]"' 0)' "16");                    AssertUI.Value(browser.ElementAt("input[type=text]"' 1)' "25");                  browser.ElementAt("input[type=button]"' 2).Click().Wait();                  AssertUI.Value(browser.ElementAt("input[type=text]"' 1)' "26");                  browser.ElementAt("input[type=button]"' 2).Click().Wait();                  AssertUI.Value(browser.ElementAt("input[type=text]"' 1)' "27");                  browser.ElementAt("input[type=button]"' 3).Click().Wait();                  AssertUI.Value(browser.ElementAt("input[type=text]"' 1)' "26");              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_MarkupControlRegistration,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_MarkupControlRegistration);                    AssertUI.InnerTextEquals(browser.ElementAt("h2"' 0)' "First Control");                  AssertUI.InnerTextEquals(browser.ElementAt("h2"' 1)' "Second control name was set from the binding");                    AssertUI.Value(browser.ElementAt("input[type=text]"' 0)' "15");                  browser.ElementAt("input[type=button]"' 0).Click().Wait();                  AssertUI.Value(browser.ElementAt("input[type=text]"' 0)' "16");                  browser.ElementAt("input[type=button]"' 0).Click().Wait();                  AssertUI.Value(browser.ElementAt("input[type=text]"' 0)' "17");                  browser.ElementAt("input[type=button]"' 1).Click().Wait();                  AssertUI.Value(browser.ElementAt("input[type=text]"' 0)' "16");                    AssertUI.Value(browser.ElementAt("input[type=text]"' 1)' "25");                  browser.ElementAt("input[type=button]"' 2).Click().Wait();                  AssertUI.Value(browser.ElementAt("input[type=text]"' 1)' "26");                  browser.ElementAt("input[type=button]"' 2).Click().Wait();                  AssertUI.Value(browser.ElementAt("input[type=text]"' 1)' "27");                  browser.ElementAt("input[type=button]"' 3).Click().Wait();                  AssertUI.Value(browser.ElementAt("input[type=text]"' 1)' "26");              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_MarkupControlRegistration,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_MarkupControlRegistration);                    AssertUI.InnerTextEquals(browser.ElementAt("h2"' 0)' "First Control");                  AssertUI.InnerTextEquals(browser.ElementAt("h2"' 1)' "Second control name was set from the binding");                    AssertUI.Value(browser.ElementAt("input[type=text]"' 0)' "15");                  browser.ElementAt("input[type=button]"' 0).Click().Wait();                  AssertUI.Value(browser.ElementAt("input[type=text]"' 0)' "16");                  browser.ElementAt("input[type=button]"' 0).Click().Wait();                  AssertUI.Value(browser.ElementAt("input[type=text]"' 0)' "17");                  browser.ElementAt("input[type=button]"' 1).Click().Wait();                  AssertUI.Value(browser.ElementAt("input[type=text]"' 0)' "16");                    AssertUI.Value(browser.ElementAt("input[type=text]"' 1)' "25");                  browser.ElementAt("input[type=button]"' 2).Click().Wait();                  AssertUI.Value(browser.ElementAt("input[type=text]"' 1)' "26");                  browser.ElementAt("input[type=button]"' 2).Click().Wait();                  AssertUI.Value(browser.ElementAt("input[type=text]"' 1)' "27");                  browser.ElementAt("input[type=button]"' 3).Click().Wait();                  AssertUI.Value(browser.ElementAt("input[type=text]"' 1)' "26");              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_MultiControlHierarchy,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_MultiControlHierarchy);                    var ul = browser.First("ul"' By.CssSelector);                  ul.FindElements("li"' By.CssSelector).ThrowIfDifferentCountThan(20);              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_ComboBoxDataSourceBoundToStaticCollection,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_ComboBoxDataSourceBoundToStaticCollection);                    var innerControlLiteral = browser.First("[data-ui=inner-control-literal]");                  AssertUI.InnerTextEquals(innerControlLiteral' "Default item");                    var comboboxSelectedValue = browser.First("[data-ui=combobox-selected-value]");                  var combobox = browser.First("[data-ui=combobox]");                    combobox.Select(0);                  AssertUI.InnerTextEquals(comboboxSelectedValue' "0");                    combobox.Select(1);                  AssertUI.InnerTextEquals(comboboxSelectedValue' "1");                    combobox.Select(2);                  AssertUI.InnerTextEquals(comboboxSelectedValue' "2");                    AssertUI.InnerTextEquals(combobox.ElementAt("option"' 0)' "Number 0");                  AssertUI.InnerTextEquals(combobox.ElementAt("option"' 1)' "Number 1");                  AssertUI.InnerTextEquals(combobox.ElementAt("option"' 2)' "Number 2");              });
Magic Number,DotVVM.Samples.Tests.Feature,MarkupControlTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\MarkupControlTests.cs,Feature_MarkupControl_ComboBoxDataSourceBoundToStaticCollection,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_MarkupControl_ComboBoxDataSourceBoundToStaticCollection);                    var innerControlLiteral = browser.First("[data-ui=inner-control-literal]");                  AssertUI.InnerTextEquals(innerControlLiteral' "Default item");                    var comboboxSelectedValue = browser.First("[data-ui=combobox-selected-value]");                  var combobox = browser.First("[data-ui=combobox]");                    combobox.Select(0);                  AssertUI.InnerTextEquals(comboboxSelectedValue' "0");                    combobox.Select(1);                  AssertUI.InnerTextEquals(comboboxSelectedValue' "1");                    combobox.Select(2);                  AssertUI.InnerTextEquals(comboboxSelectedValue' "2");                    AssertUI.InnerTextEquals(combobox.ElementAt("option"' 0)' "Number 0");                  AssertUI.InnerTextEquals(combobox.ElementAt("option"' 1)' "Number 1");                  AssertUI.InnerTextEquals(combobox.ElementAt("option"' 2)' "Number 2");              });
Magic Number,DotVVM.Samples.Tests.Feature,PostbackConcurrencyTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostbackConcurrencyTests.cs,Feature_PostbackConcurrency_UpdateProgressControl,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_PostbackConcurrency_DefaultMode);                    // test update progress control                  AssertUI.IsNotDisplayed(browser' "div[data-ui=update-progress]");                  browser.Single(longActionSelector).Click();                  AssertUI.IsDisplayed(browser' "div[data-ui=update-progress]");                  browser.Wait(3000);                  AssertUI.IsNotDisplayed(browser' "div[data-ui=update-progress]");              });
Magic Number,DotVVM.Samples.Tests.Feature,PostbackConcurrencyTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostbackConcurrencyTests.cs,Feature_PostbackConcurrency_DefaultMode,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_PostbackConcurrency_DefaultMode);                    // try the long action interrupted by the short one                  browser.Single(longActionSelector).Click();                  browser.Wait(1000);                  browser.Single(shortActionSelector).Click();                    var postbackIndexSpan = browser.Single("span[data-ui=postback-index]");                  var lastActionSpan = browser.Single("span[data-ui=last-action]");                    // the postback index should be 1 now (because of short action)                  AssertUI.InnerTextEquals(postbackIndexSpan' "1");                  AssertUI.InnerTextEquals(lastActionSpan' "short");                    // the result of the long action should be canceled' the counter shouldn't increase                  browser.Wait(6000);                  AssertUI.InnerTextEquals(postbackIndexSpan' "1");                  AssertUI.InnerTextEquals(lastActionSpan' "short");              });
Magic Number,DotVVM.Samples.Tests.Feature,PostbackConcurrencyTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostbackConcurrencyTests.cs,Feature_PostbackConcurrency_DefaultMode,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_PostbackConcurrency_DefaultMode);                    // try the long action interrupted by the short one                  browser.Single(longActionSelector).Click();                  browser.Wait(1000);                  browser.Single(shortActionSelector).Click();                    var postbackIndexSpan = browser.Single("span[data-ui=postback-index]");                  var lastActionSpan = browser.Single("span[data-ui=last-action]");                    // the postback index should be 1 now (because of short action)                  AssertUI.InnerTextEquals(postbackIndexSpan' "1");                  AssertUI.InnerTextEquals(lastActionSpan' "short");                    // the result of the long action should be canceled' the counter shouldn't increase                  browser.Wait(6000);                  AssertUI.InnerTextEquals(postbackIndexSpan' "1");                  AssertUI.InnerTextEquals(lastActionSpan' "short");              });
Magic Number,DotVVM.Samples.Tests.Feature,PostbackConcurrencyTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostbackConcurrencyTests.cs,Feature_PostbackConcurrency_QueueMode,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_PostbackConcurrency_QueueMode);                    // try the long action than queue another long action and short action                  browser.Single(longActionSelector).Click();                  browser.Wait(500);                  browser.Single(longActionSelector).Click();                  browser.Wait(500);                  browser.Single(shortActionSelector).Click();                    var postbackIndexSpan = browser.Single("span[data-ui=postback-index]");                  var lastActionSpan = browser.Single("span[data-ui=last-action]");                    // the postback index should be 0 now (because of no postback finished yet)                  AssertUI.InnerTextEquals(postbackIndexSpan' "0");                  AssertUI.InnerTextEquals(lastActionSpan' string.Empty);                    browser.Wait(3000);                  // the first long action should be finished' the counter should increase and another long action should be running                  AssertUI.InnerTextEquals(postbackIndexSpan' "1");                  AssertUI.InnerTextEquals(lastActionSpan' "long");                    browser.Wait(3000);                  // the second long action should be finished together with the short action'                  // the counter should increase twice                  AssertUI.InnerTextEquals(postbackIndexSpan' "3");                  AssertUI.InnerTextEquals(lastActionSpan' "short");              });
Magic Number,DotVVM.Samples.Tests.Feature,PostbackConcurrencyTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostbackConcurrencyTests.cs,Feature_PostbackConcurrency_QueueMode,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_PostbackConcurrency_QueueMode);                    // try the long action than queue another long action and short action                  browser.Single(longActionSelector).Click();                  browser.Wait(500);                  browser.Single(longActionSelector).Click();                  browser.Wait(500);                  browser.Single(shortActionSelector).Click();                    var postbackIndexSpan = browser.Single("span[data-ui=postback-index]");                  var lastActionSpan = browser.Single("span[data-ui=last-action]");                    // the postback index should be 0 now (because of no postback finished yet)                  AssertUI.InnerTextEquals(postbackIndexSpan' "0");                  AssertUI.InnerTextEquals(lastActionSpan' string.Empty);                    browser.Wait(3000);                  // the first long action should be finished' the counter should increase and another long action should be running                  AssertUI.InnerTextEquals(postbackIndexSpan' "1");                  AssertUI.InnerTextEquals(lastActionSpan' "long");                    browser.Wait(3000);                  // the second long action should be finished together with the short action'                  // the counter should increase twice                  AssertUI.InnerTextEquals(postbackIndexSpan' "3");                  AssertUI.InnerTextEquals(lastActionSpan' "short");              });
Magic Number,DotVVM.Samples.Tests.Feature,PostbackConcurrencyTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostbackConcurrencyTests.cs,Feature_PostbackConcurrency_QueueMode,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_PostbackConcurrency_QueueMode);                    // try the long action than queue another long action and short action                  browser.Single(longActionSelector).Click();                  browser.Wait(500);                  browser.Single(longActionSelector).Click();                  browser.Wait(500);                  browser.Single(shortActionSelector).Click();                    var postbackIndexSpan = browser.Single("span[data-ui=postback-index]");                  var lastActionSpan = browser.Single("span[data-ui=last-action]");                    // the postback index should be 0 now (because of no postback finished yet)                  AssertUI.InnerTextEquals(postbackIndexSpan' "0");                  AssertUI.InnerTextEquals(lastActionSpan' string.Empty);                    browser.Wait(3000);                  // the first long action should be finished' the counter should increase and another long action should be running                  AssertUI.InnerTextEquals(postbackIndexSpan' "1");                  AssertUI.InnerTextEquals(lastActionSpan' "long");                    browser.Wait(3000);                  // the second long action should be finished together with the short action'                  // the counter should increase twice                  AssertUI.InnerTextEquals(postbackIndexSpan' "3");                  AssertUI.InnerTextEquals(lastActionSpan' "short");              });
Magic Number,DotVVM.Samples.Tests.Feature,PostbackConcurrencyTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostbackConcurrencyTests.cs,Feature_PostbackConcurrency_QueueMode,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_PostbackConcurrency_QueueMode);                    // try the long action than queue another long action and short action                  browser.Single(longActionSelector).Click();                  browser.Wait(500);                  browser.Single(longActionSelector).Click();                  browser.Wait(500);                  browser.Single(shortActionSelector).Click();                    var postbackIndexSpan = browser.Single("span[data-ui=postback-index]");                  var lastActionSpan = browser.Single("span[data-ui=last-action]");                    // the postback index should be 0 now (because of no postback finished yet)                  AssertUI.InnerTextEquals(postbackIndexSpan' "0");                  AssertUI.InnerTextEquals(lastActionSpan' string.Empty);                    browser.Wait(3000);                  // the first long action should be finished' the counter should increase and another long action should be running                  AssertUI.InnerTextEquals(postbackIndexSpan' "1");                  AssertUI.InnerTextEquals(lastActionSpan' "long");                    browser.Wait(3000);                  // the second long action should be finished together with the short action'                  // the counter should increase twice                  AssertUI.InnerTextEquals(postbackIndexSpan' "3");                  AssertUI.InnerTextEquals(lastActionSpan' "short");              });
Magic Number,DotVVM.Samples.Tests.Feature,PostbackConcurrencyTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostbackConcurrencyTests.cs,Feature_PostbackConcurrency_DenyMode,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_PostbackConcurrency_DenyMode);                    // try the long action than queue the short action which should fail                  browser.Single(longActionSelector).Click();                  browser.Wait(250);                  browser.Single(shortActionSelector).Click();                    var postbackIndexSpan = browser.Single("span[data-ui=postback-index]");                  var lastActionSpan = browser.Single("span[data-ui=last-action]");                    // the postback index should be 0 now (because of no postback finished yet)                  AssertUI.InnerTextEquals(postbackIndexSpan' "0");                  AssertUI.InnerTextEquals(lastActionSpan' string.Empty);                    browser.WaitFor(() => {                      // the long action should be finished and the short action should be interrupted with no effect                      AssertUI.InnerTextEquals(postbackIndexSpan' "1");                      AssertUI.InnerTextEquals(lastActionSpan' "long");                  }' 6000);              });
Magic Number,DotVVM.Samples.Tests.Feature,PostbackConcurrencyTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostbackConcurrencyTests.cs,Feature_PostbackConcurrency_DenyMode,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_PostbackConcurrency_DenyMode);                    // try the long action than queue the short action which should fail                  browser.Single(longActionSelector).Click();                  browser.Wait(250);                  browser.Single(shortActionSelector).Click();                    var postbackIndexSpan = browser.Single("span[data-ui=postback-index]");                  var lastActionSpan = browser.Single("span[data-ui=last-action]");                    // the postback index should be 0 now (because of no postback finished yet)                  AssertUI.InnerTextEquals(postbackIndexSpan' "0");                  AssertUI.InnerTextEquals(lastActionSpan' string.Empty);                    browser.WaitFor(() => {                      // the long action should be finished and the short action should be interrupted with no effect                      AssertUI.InnerTextEquals(postbackIndexSpan' "1");                      AssertUI.InnerTextEquals(lastActionSpan' "long");                  }' 6000);              });
Magic Number,DotVVM.Samples.Tests.Feature,PostBackTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostBackTests.cs,Feature_PostBack_PostbackUpdate,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_PostBack_PostbackUpdate);                    // enter number of lines and click the button                  browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "15");                  browser.Click("input[type=button]");                  browser.Wait();                    browser.FindElements("br").ThrowIfDifferentCountThan(14);                    // change number of lines and click the button                  browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "5");                  browser.Click("input[type=button]");                  browser.Wait();                    browser.FindElements("br").ThrowIfDifferentCountThan(4);              });
Magic Number,DotVVM.Samples.Tests.Feature,PostBackTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostBackTests.cs,Feature_PostBack_PostbackUpdate,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_PostBack_PostbackUpdate);                    // enter number of lines and click the button                  browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "15");                  browser.Click("input[type=button]");                  browser.Wait();                    browser.FindElements("br").ThrowIfDifferentCountThan(14);                    // change number of lines and click the button                  browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "5");                  browser.Click("input[type=button]");                  browser.Wait();                    browser.FindElements("br").ThrowIfDifferentCountThan(4);              });
Magic Number,DotVVM.Samples.Tests.Feature,PostBackTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostBackTests.cs,Feature_PostBack_PostbackUpdateRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_PostBack_PostbackUpdateRepeater);                    // enter the text and click the button                  browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "test");                  browser.Click("input[type=button]");                  browser.Wait();                    // check the inner text of generated items                  browser.FindElements(".render-server p.item")                      .ThrowIfDifferentCountThan(5).ForEach(e => {                          AssertUI.InnerTextEquals(e' "test");                      });                  browser.FindElements(".render-client p.item")                      .ThrowIfDifferentCountThan(5).ForEach(e => {                          AssertUI.InnerTextEquals(e' "test");                      });                    // change the text and client the button                  browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "xxx");                  browser.Click("input[type=button]");                  browser.Wait();                    // check the inner text of generated items                  browser.FindElements(".render-server p.item")                      .ThrowIfDifferentCountThan(5).ForEach(e => {                          AssertUI.InnerTextEquals(e' "xxx");                      });                  browser.FindElements(".render-client p.item")                      .ThrowIfDifferentCountThan(5).ForEach(e => {                          AssertUI.InnerTextEquals(e' "xxx");                      });              });
Magic Number,DotVVM.Samples.Tests.Feature,PostBackTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostBackTests.cs,Feature_PostBack_PostbackUpdateRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_PostBack_PostbackUpdateRepeater);                    // enter the text and click the button                  browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "test");                  browser.Click("input[type=button]");                  browser.Wait();                    // check the inner text of generated items                  browser.FindElements(".render-server p.item")                      .ThrowIfDifferentCountThan(5).ForEach(e => {                          AssertUI.InnerTextEquals(e' "test");                      });                  browser.FindElements(".render-client p.item")                      .ThrowIfDifferentCountThan(5).ForEach(e => {                          AssertUI.InnerTextEquals(e' "test");                      });                    // change the text and client the button                  browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "xxx");                  browser.Click("input[type=button]");                  browser.Wait();                    // check the inner text of generated items                  browser.FindElements(".render-server p.item")                      .ThrowIfDifferentCountThan(5).ForEach(e => {                          AssertUI.InnerTextEquals(e' "xxx");                      });                  browser.FindElements(".render-client p.item")                      .ThrowIfDifferentCountThan(5).ForEach(e => {                          AssertUI.InnerTextEquals(e' "xxx");                      });              });
Magic Number,DotVVM.Samples.Tests.Feature,PostBackTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostBackTests.cs,Feature_PostBack_PostbackUpdateRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_PostBack_PostbackUpdateRepeater);                    // enter the text and click the button                  browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "test");                  browser.Click("input[type=button]");                  browser.Wait();                    // check the inner text of generated items                  browser.FindElements(".render-server p.item")                      .ThrowIfDifferentCountThan(5).ForEach(e => {                          AssertUI.InnerTextEquals(e' "test");                      });                  browser.FindElements(".render-client p.item")                      .ThrowIfDifferentCountThan(5).ForEach(e => {                          AssertUI.InnerTextEquals(e' "test");                      });                    // change the text and client the button                  browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "xxx");                  browser.Click("input[type=button]");                  browser.Wait();                    // check the inner text of generated items                  browser.FindElements(".render-server p.item")                      .ThrowIfDifferentCountThan(5).ForEach(e => {                          AssertUI.InnerTextEquals(e' "xxx");                      });                  browser.FindElements(".render-client p.item")                      .ThrowIfDifferentCountThan(5).ForEach(e => {                          AssertUI.InnerTextEquals(e' "xxx");                      });              });
Magic Number,DotVVM.Samples.Tests.Feature,PostBackTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostBackTests.cs,Feature_PostBack_PostbackUpdateRepeater,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_PostBack_PostbackUpdateRepeater);                    // enter the text and click the button                  browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "test");                  browser.Click("input[type=button]");                  browser.Wait();                    // check the inner text of generated items                  browser.FindElements(".render-server p.item")                      .ThrowIfDifferentCountThan(5).ForEach(e => {                          AssertUI.InnerTextEquals(e' "test");                      });                  browser.FindElements(".render-client p.item")                      .ThrowIfDifferentCountThan(5).ForEach(e => {                          AssertUI.InnerTextEquals(e' "test");                      });                    // change the text and client the button                  browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "xxx");                  browser.Click("input[type=button]");                  browser.Wait();                    // check the inner text of generated items                  browser.FindElements(".render-server p.item")                      .ThrowIfDifferentCountThan(5).ForEach(e => {                          AssertUI.InnerTextEquals(e' "xxx");                      });                  browser.FindElements(".render-client p.item")                      .ThrowIfDifferentCountThan(5).ForEach(e => {                          AssertUI.InnerTextEquals(e' "xxx");                      });              });
Magic Number,DotVVM.Samples.Tests.Feature,PostBackTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostBackTests.cs,ValidatePostbackHandlersComplexSection,The following statement contains a magic number: browser.WaitFor(() => {                  section = browser.First(sectionSelector);              }' 2000' "Cannot find static commands section.");
Magic Number,DotVVM.Samples.Tests.Feature,PostBackTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostBackTests.cs,ValidatePostbackHandlersComplexSection,The following statement contains a magic number: section.ElementAt("input[type=button]"' 2).Click();
Magic Number,DotVVM.Samples.Tests.Feature,PostBackTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostBackTests.cs,ValidatePostbackHandlersComplexSection,The following statement contains a magic number: section.ElementAt("input[type=button]"' 3).Click();
Magic Number,DotVVM.Samples.Tests.Feature,PostBackTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostBackTests.cs,ValidatePostbackHandlersComplexSection,The following statement contains a magic number: section.ElementAt("input[type=button]"' 4).Click();
Magic Number,DotVVM.Samples.Tests.Feature,PostBackTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostBackTests.cs,ValidatePostbackHandlersComplexSection,The following statement contains a magic number: section.ElementAt("input[type=button]"' 5).Click();
Magic Number,DotVVM.Samples.Tests.Feature,PostBackTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostBackTests.cs,ValidatePostbackHandlersComplexSection,The following statement contains a magic number: section.ElementAt("input[type=button]"' 5).Click();
Magic Number,DotVVM.Samples.Tests.Feature,PostBackTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostBackTests.cs,ValidatePostbackHandlersComplexSection,The following statement contains a magic number: section.ElementAt("input[type=button]"' 5).Click();
Magic Number,DotVVM.Samples.Tests.Feature,PostBackTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostBackTests.cs,ValidatePostbackHandlersComplexSection,The following statement contains a magic number: section.ElementAt("input[type=button]"' 5).Click();
Magic Number,DotVVM.Samples.Tests.Feature,PostBackTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostBackTests.cs,ValidatePostbackHandlersComplexSection,The following statement contains a magic number: section.ElementAt("input[type=button]"' 6).Click();
Magic Number,DotVVM.Samples.Tests.Feature,PostBackTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostBackTests.cs,ValidatePostbackHandlersComplexSection,The following statement contains a magic number: browser.WaitFor(() => {                  index = browser.First("[data-ui=\"command-index\"]");                  AssertUI.InnerTextEquals(index' "0");              }' 1500' "Redirect to CZ localization failed.");
Magic Number,DotVVM.Samples.Tests.Feature,PostBackTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostBackTests.cs,ValidatePostbackHandlersComplexSection,The following statement contains a magic number: section.ElementAt("input[type=button]"' 6).Click();
Magic Number,DotVVM.Samples.Tests.Feature,PostBackTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\PostBackTests.cs,ValidatePostbackHandlersComplexSection,The following statement contains a magic number: section.ElementAt("input[type=button]"' 6).Click();
Magic Number,DotVVM.Samples.Tests.Feature,RenderSettingsModeServerTest,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\RenderSettingsModeServerTest.cs,Feature_RenderSettingsModeServer_RenderSettingModeServerProperty,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_RenderSettingsModeServer_RenderSettingModeServerProperty);                    // ensure month names are rendered on the server                  browser.FindElements("table tr td span").ThrowIfDifferentCountThan(12);                    // fill textboxes                  browser.SendKeys("input[type=text]"' "1");                    browser.Click("input[type=button]");                    // validate result                  AssertUI.InnerTextEquals(browser.Last("span")' "12"' false' true);              });
Magic Number,DotVVM.Samples.Tests.Feature,ResourcesTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ResourcesTests.cs,Feature_Resources_CdnUnavailableResourceLoad,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Resources_CdnUnavailableResourceLoad);                    // verify that if CDN is not available' local script loads                  browser.WaitFor(browser.HasAlert' 5000' "An alert was expected to open!");                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();              });
Magic Number,DotVVM.Samples.Tests.Feature,ResourcesTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ResourcesTests.cs,Feature_Resources_CdnScriptPriority,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Resources_CdnScriptPriority);                    // verify that if CDN is not available' local script loads                  browser.WaitFor(browser.HasAlert' 5000' "An alert was expected to open!");                  AssertUI.AlertTextEquals(browser' "javascript resource loaded!");                  browser.ConfirmAlert();              });
Magic Number,DotVVM.Samples.Tests.Feature,ResourcesTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ResourcesTests.cs,Feature_Resources_OnlineNonameResourceLoad,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Resources_OnlineNonameResourceLoad);                    //click button                  browser.First("input[type=button]").Click();                    //check that alert showed                  browser.WaitFor(browser.HasAlert' 5000' "An alert was expected to open!");                  AssertUI.AlertTextEquals(browser' "resource loaded");                  browser.ConfirmAlert();              });
Magic Number,DotVVM.Samples.Tests.Feature,ResourcesTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ResourcesTests.cs,Feature_Resource_RequiredOnPostback,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Resources_RequiredOnPostback);                  browser.WaitUntilDotvvmInited();                    var welcome = browser.Single("welcome"' SelectByDataUi);                  AssertUI.TextEquals(welcome' "Welcome");                    browser.Single("button"' SelectByDataUi).Click();                  browser.WaitFor(() => AssertUI.AlertTextEquals(browser' "javascript resource loaded!")' 5000);                    browser.ConfirmAlert();                  browser.WaitFor(() => AssertUI.TextEquals(welcome' "Welcome")' 1000);              });
Magic Number,DotVVM.Samples.Tests.Feature,ResourcesTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ResourcesTests.cs,Feature_Resource_RequiredOnPostback,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Resources_RequiredOnPostback);                  browser.WaitUntilDotvvmInited();                    var welcome = browser.Single("welcome"' SelectByDataUi);                  AssertUI.TextEquals(welcome' "Welcome");                    browser.Single("button"' SelectByDataUi).Click();                  browser.WaitFor(() => AssertUI.AlertTextEquals(browser' "javascript resource loaded!")' 5000);                    browser.ConfirmAlert();                  browser.WaitFor(() => AssertUI.TextEquals(welcome' "Welcome")' 1000);              });
Magic Number,DotVVM.Samples.Tests.Feature,SerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\SerializationTests.cs,Feature_Serialization_ObservableCollectionShouldContainObservables,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Serialization_ObservableCollectionShouldContainObservables);                  browser.Wait();                    // verify that the values are selected                  browser.ElementAt("select"' 0).Select(0);                  browser.ElementAt("select"' 1).Select(1);                  browser.ElementAt("select"' 2).Select(2);                    // click the button                  browser.Click("input[type=button]");                    // verify that the values are correct                  AssertUI.InnerTextEquals(browser.First("p.result")' "1'2'3");                  AssertUI.Attribute(browser.ElementAt("select"' 0)' "value"' "1");                  AssertUI.Attribute(browser.ElementAt("select"' 1)' "value"' "2");                  AssertUI.Attribute(browser.ElementAt("select"' 2)' "value"' "3");                  browser.Wait();                    // change the values                  browser.ElementAt("select"' 0).Select(1);                  browser.ElementAt("select"' 1).Select(2);                  browser.ElementAt("select"' 2).Select(1);                    // click the button                  browser.Click("input[type=button]");                    // verify that the values are correct                  AssertUI.InnerTextEquals(browser.First("p.result")' "2'3'2");                  AssertUI.Attribute(browser.ElementAt("select"' 0)' "value"' "2");                  AssertUI.Attribute(browser.ElementAt("select"' 1)' "value"' "3");                  AssertUI.Attribute(browser.ElementAt("select"' 2)' "value"' "2");              });
Magic Number,DotVVM.Samples.Tests.Feature,SerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\SerializationTests.cs,Feature_Serialization_ObservableCollectionShouldContainObservables,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Serialization_ObservableCollectionShouldContainObservables);                  browser.Wait();                    // verify that the values are selected                  browser.ElementAt("select"' 0).Select(0);                  browser.ElementAt("select"' 1).Select(1);                  browser.ElementAt("select"' 2).Select(2);                    // click the button                  browser.Click("input[type=button]");                    // verify that the values are correct                  AssertUI.InnerTextEquals(browser.First("p.result")' "1'2'3");                  AssertUI.Attribute(browser.ElementAt("select"' 0)' "value"' "1");                  AssertUI.Attribute(browser.ElementAt("select"' 1)' "value"' "2");                  AssertUI.Attribute(browser.ElementAt("select"' 2)' "value"' "3");                  browser.Wait();                    // change the values                  browser.ElementAt("select"' 0).Select(1);                  browser.ElementAt("select"' 1).Select(2);                  browser.ElementAt("select"' 2).Select(1);                    // click the button                  browser.Click("input[type=button]");                    // verify that the values are correct                  AssertUI.InnerTextEquals(browser.First("p.result")' "2'3'2");                  AssertUI.Attribute(browser.ElementAt("select"' 0)' "value"' "2");                  AssertUI.Attribute(browser.ElementAt("select"' 1)' "value"' "3");                  AssertUI.Attribute(browser.ElementAt("select"' 2)' "value"' "2");              });
Magic Number,DotVVM.Samples.Tests.Feature,SerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\SerializationTests.cs,Feature_Serialization_ObservableCollectionShouldContainObservables,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Serialization_ObservableCollectionShouldContainObservables);                  browser.Wait();                    // verify that the values are selected                  browser.ElementAt("select"' 0).Select(0);                  browser.ElementAt("select"' 1).Select(1);                  browser.ElementAt("select"' 2).Select(2);                    // click the button                  browser.Click("input[type=button]");                    // verify that the values are correct                  AssertUI.InnerTextEquals(browser.First("p.result")' "1'2'3");                  AssertUI.Attribute(browser.ElementAt("select"' 0)' "value"' "1");                  AssertUI.Attribute(browser.ElementAt("select"' 1)' "value"' "2");                  AssertUI.Attribute(browser.ElementAt("select"' 2)' "value"' "3");                  browser.Wait();                    // change the values                  browser.ElementAt("select"' 0).Select(1);                  browser.ElementAt("select"' 1).Select(2);                  browser.ElementAt("select"' 2).Select(1);                    // click the button                  browser.Click("input[type=button]");                    // verify that the values are correct                  AssertUI.InnerTextEquals(browser.First("p.result")' "2'3'2");                  AssertUI.Attribute(browser.ElementAt("select"' 0)' "value"' "2");                  AssertUI.Attribute(browser.ElementAt("select"' 1)' "value"' "3");                  AssertUI.Attribute(browser.ElementAt("select"' 2)' "value"' "2");              });
Magic Number,DotVVM.Samples.Tests.Feature,SerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\SerializationTests.cs,Feature_Serialization_ObservableCollectionShouldContainObservables,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Serialization_ObservableCollectionShouldContainObservables);                  browser.Wait();                    // verify that the values are selected                  browser.ElementAt("select"' 0).Select(0);                  browser.ElementAt("select"' 1).Select(1);                  browser.ElementAt("select"' 2).Select(2);                    // click the button                  browser.Click("input[type=button]");                    // verify that the values are correct                  AssertUI.InnerTextEquals(browser.First("p.result")' "1'2'3");                  AssertUI.Attribute(browser.ElementAt("select"' 0)' "value"' "1");                  AssertUI.Attribute(browser.ElementAt("select"' 1)' "value"' "2");                  AssertUI.Attribute(browser.ElementAt("select"' 2)' "value"' "3");                  browser.Wait();                    // change the values                  browser.ElementAt("select"' 0).Select(1);                  browser.ElementAt("select"' 1).Select(2);                  browser.ElementAt("select"' 2).Select(1);                    // click the button                  browser.Click("input[type=button]");                    // verify that the values are correct                  AssertUI.InnerTextEquals(browser.First("p.result")' "2'3'2");                  AssertUI.Attribute(browser.ElementAt("select"' 0)' "value"' "2");                  AssertUI.Attribute(browser.ElementAt("select"' 1)' "value"' "3");                  AssertUI.Attribute(browser.ElementAt("select"' 2)' "value"' "2");              });
Magic Number,DotVVM.Samples.Tests.Feature,SerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\SerializationTests.cs,Feature_Serialization_ObservableCollectionShouldContainObservables,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Serialization_ObservableCollectionShouldContainObservables);                  browser.Wait();                    // verify that the values are selected                  browser.ElementAt("select"' 0).Select(0);                  browser.ElementAt("select"' 1).Select(1);                  browser.ElementAt("select"' 2).Select(2);                    // click the button                  browser.Click("input[type=button]");                    // verify that the values are correct                  AssertUI.InnerTextEquals(browser.First("p.result")' "1'2'3");                  AssertUI.Attribute(browser.ElementAt("select"' 0)' "value"' "1");                  AssertUI.Attribute(browser.ElementAt("select"' 1)' "value"' "2");                  AssertUI.Attribute(browser.ElementAt("select"' 2)' "value"' "3");                  browser.Wait();                    // change the values                  browser.ElementAt("select"' 0).Select(1);                  browser.ElementAt("select"' 1).Select(2);                  browser.ElementAt("select"' 2).Select(1);                    // click the button                  browser.Click("input[type=button]");                    // verify that the values are correct                  AssertUI.InnerTextEquals(browser.First("p.result")' "2'3'2");                  AssertUI.Attribute(browser.ElementAt("select"' 0)' "value"' "2");                  AssertUI.Attribute(browser.ElementAt("select"' 1)' "value"' "3");                  AssertUI.Attribute(browser.ElementAt("select"' 2)' "value"' "2");              });
Magic Number,DotVVM.Samples.Tests.Feature,SerializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\SerializationTests.cs,Feature_Serialization_ObservableCollectionShouldContainObservables,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Serialization_ObservableCollectionShouldContainObservables);                  browser.Wait();                    // verify that the values are selected                  browser.ElementAt("select"' 0).Select(0);                  browser.ElementAt("select"' 1).Select(1);                  browser.ElementAt("select"' 2).Select(2);                    // click the button                  browser.Click("input[type=button]");                    // verify that the values are correct                  AssertUI.InnerTextEquals(browser.First("p.result")' "1'2'3");                  AssertUI.Attribute(browser.ElementAt("select"' 0)' "value"' "1");                  AssertUI.Attribute(browser.ElementAt("select"' 1)' "value"' "2");                  AssertUI.Attribute(browser.ElementAt("select"' 2)' "value"' "3");                  browser.Wait();                    // change the values                  browser.ElementAt("select"' 0).Select(1);                  browser.ElementAt("select"' 1).Select(2);                  browser.ElementAt("select"' 2).Select(1);                    // click the button                  browser.Click("input[type=button]");                    // verify that the values are correct                  AssertUI.InnerTextEquals(browser.First("p.result")' "2'3'2");                  AssertUI.Attribute(browser.ElementAt("select"' 0)' "value"' "2");                  AssertUI.Attribute(browser.ElementAt("select"' 1)' "value"' "3");                  AssertUI.Attribute(browser.ElementAt("select"' 2)' "value"' "2");              });
Magic Number,DotVVM.Samples.Tests.Feature,StaticCommandTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\StaticCommandTests.cs,Feature_StaticCommand_ComboBoxSelectionChangedViewModel_Core,The following statement contains a magic number: browser.ElementAt("select"' 0).Select(2).Wait();
Magic Number,DotVVM.Samples.Tests.Feature,StaticCommandTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\StaticCommandTests.cs,Feature_StaticCommand_ComboBoxSelectionChangedViewModel_Core,The following statement contains a magic number: browser.ElementAt("select"' 1).Select(2).Wait();
Magic Number,DotVVM.Samples.Tests.Feature,StaticCommandTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\StaticCommandTests.cs,Feature_StaticCommand_ComboBoxSelectionChangedViewModel_Core,The following statement contains a magic number: AssertUI.IsSelected(browser.ElementAt("select"' 0).ElementAt("option"' 2));
Magic Number,DotVVM.Samples.Tests.Feature,StaticCommandTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\StaticCommandTests.cs,Feature_StaticCommand_ComboBoxSelectionChangedViewModel_Core,The following statement contains a magic number: AssertUI.IsSelected(browser.ElementAt("select"' 1).ElementAt("option"' 2));
Magic Number,DotVVM.Samples.Tests.Feature,StaticCommandTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\StaticCommandTests.cs,Feature_StaticCommand_ComboBoxSelectionChangedViewModel_Core,The following statement contains a magic number: AssertUI.IsSelected(browser.ElementAt("select"' 1).ElementAt("option"' 2));
Magic Number,DotVVM.Samples.Tests.Feature,StaticCommandTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\StaticCommandTests.cs,Feature_StaticCommand_ComboBoxSelectionChangedViewModel_Core,The following statement contains a magic number: browser.ElementAt("input"' 2).Click().Wait();
Magic Number,DotVVM.Samples.Tests.Feature,StaticCommandTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\StaticCommandTests.cs,Feature_StaticCommand_StaticCommand_TaskSequence,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_StaticCommand_StaticCommand_TaskSequence);                    var textBox = browser.Single("input[type=text]");                  var commandButton = browser.ElementAt("input[type=button]"' 0);                  var staticCommandButton = browser.ElementAt("input[type=button]"' 1);                    commandButton.Click().Wait();                  AssertUI.Value(textBox' "55");                    textBox.Clear();                  textBox.SendKeys("0");                  textBox.SendKeys(Keys.Tab);                    staticCommandButton.Click().Wait(1000);                  AssertUI.Value(textBox' "55");              });
Magic Number,DotVVM.Samples.Tests.Feature,StaticCommandTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\StaticCommandTests.cs,Feature_StaticCommand_StaticCommand_ArrayAssigment,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_StaticCommand_StaticCommand_ArrayAssigment);                    AssertUI.InnerTextEquals(browser.ElementAt(".item"' 0)' "Anne");                  AssertUI.InnerTextEquals(browser.ElementAt(".item"' 1)' "Martin");                    var button = browser.Single("input[type=button]");                  button.Click().Wait();                    AssertUI.InnerTextEquals(browser.ElementAt(".item"' 0)' "Bob");                  AssertUI.InnerTextEquals(browser.ElementAt(".item"' 1)' "Oliver");                  AssertUI.InnerTextEquals(browser.ElementAt(".item"' 2)' "Pablo");              });
Magic Number,DotVVM.Samples.Tests.Feature,StaticCommandTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\StaticCommandTests.cs,Feature_StaticCommand_StaticCommand_LoadComplexDataFromService,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_StaticCommand_StaticCommand_LoadComplexDataFromService);                    var textBox = browser.Single("input[type=text]");                  textBox.SendKeys("Vindaloo");                    var button = browser.Single("input[type=button]");                  button.Click().Wait();                    AssertUI.InnerTextEquals(browser.ElementAt(".name"' 0)' "Martin");                  AssertUI.InnerTextEquals(browser.ElementAt(".name"' 1)' "Roman");                  AssertUI.InnerTextEquals(browser.ElementAt(".name"' 2)' "Igor");                    AssertUI.InnerTextEquals(browser.ElementAt(".food"' 0)' "Burger");                  AssertUI.InnerTextEquals(browser.ElementAt(".food"' 1)' "Pizza");                  AssertUI.InnerTextEquals(browser.ElementAt(".food"' 2)' "Vindaloo");              });
Magic Number,DotVVM.Samples.Tests.Feature,StaticCommandTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\StaticCommandTests.cs,Feature_StaticCommand_StaticCommand_LoadComplexDataFromService,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_StaticCommand_StaticCommand_LoadComplexDataFromService);                    var textBox = browser.Single("input[type=text]");                  textBox.SendKeys("Vindaloo");                    var button = browser.Single("input[type=button]");                  button.Click().Wait();                    AssertUI.InnerTextEquals(browser.ElementAt(".name"' 0)' "Martin");                  AssertUI.InnerTextEquals(browser.ElementAt(".name"' 1)' "Roman");                  AssertUI.InnerTextEquals(browser.ElementAt(".name"' 2)' "Igor");                    AssertUI.InnerTextEquals(browser.ElementAt(".food"' 0)' "Burger");                  AssertUI.InnerTextEquals(browser.ElementAt(".food"' 1)' "Pizza");                  AssertUI.InnerTextEquals(browser.ElementAt(".food"' 2)' "Vindaloo");              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationSummaryTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationSummaryTests.cs,Control_ValidationSummary_RecursiveValidationSummary,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.ControlSamples_ValidationSummary_RecursiveValidationSummary);                    browser.ElementAt("input[type=button]"' 0).Click().Wait();                    browser.ElementAt("ul"' 0).FindElements("li").ThrowIfDifferentCountThan(2);                  AssertUI.InnerTextEquals(browser.First("#result")' "false");                    browser.ElementAt("input[type=button]"' 1).Click().Wait();                  browser.ElementAt("ul"' 1).FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.First("#result")' "false");              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationSummaryTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationSummaryTests.cs,Control_ValidationSummary_IncludeErrorsFromTarget,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(url);                    var summary = browser.First("[data-ui=validationSummary]");                  Assert.Equal(0' summary.Children.Count);                    var loginButton = browser.First("[data-ui=login-button]");                  loginButton.Click();                  Assert.Equal(2' summary.Children.Count);                    browser.First("[data-ui=nick-textbox]").SendKeys("Mike");                  loginButton.Click();                  Assert.Equal(1' summary.Children.Count);                    browser.First("[data-ui=password-textbox]").SendKeys("123");                  loginButton.Click();                  Assert.Equal(1' summary.Children.Count);                    browser.First("[data-ui=password-textbox]").SendKeys("4");                  loginButton.Click();                  Assert.Equal(0' summary.Children.Count);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_ClientSideObservableUpdate,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_ClientSideObservableUpdate);                    var switchTestsButton = browser.ElementAt("input[type=button]"' 0);                  var postbackButton = browser.ElementAt("input[type=button]"' 1);                    for (int i = 0; i < 2; i++)                  {                      // load section 1 and validate it                      switchTestsButton.Click();                      AssertUI.TextEquals(browser.Single("*[data-id=validator1]")' "");                        postbackButton.Click();                      AssertUI.TextEquals(browser.Single("*[data-id=validator1]")' "The Text field is not a valid e-mail address.");                        browser.Single("input[data-id=textbox1]").Clear();                      postbackButton.Click();                      AssertUI.TextEquals(browser.Single("*[data-id=validator1]")' "The Text field is required. The Text field is not a valid e-mail address.");                        // load section 2 and validate it                      switchTestsButton.Click();                      AssertUI.TextEquals(browser.Single("*[data-id=validator2]")' "");                        postbackButton.Click();                      AssertUI.TextEquals(browser.Single("*[data-id=validator2]")' "The Text field is required. The Text field is not a valid e-mail address.");                        browser.Single("input[data-id=textbox2]").SendKeys("t@t.tt");                      postbackButton.Click();                      AssertUI.TextEquals(browser.Single("*[data-id=validator2]")' "");                  }              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_InvalidCssClassNotDuplicated,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_InvalidCssClassNotDuplicated);                    var textbox = browser.Single("input[type=text]");                  var button = browser.Single("input[type=button]");                  var div = browser.Single("div[data-id=validated-div]");                    // empty - one error                  button.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.ClassAttribute(div' c => c == "form-group has-error abc");                    // invalid - two errors                  textbox.SendKeys("abcd");                  button.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  AssertUI.ClassAttribute(div' c => c == "form-group has-error abc");                    // valid                  textbox.Clear();                  textbox.SendKeys("123");                  button.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  AssertUI.ClassAttribute(div' c => c == "form-group");              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_DateTimeValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_DateTimeValidation);                    var button = browser.First("input[type=button]");                  var textBoxes = browser.FindElements("input[type=text]").ThrowIfDifferentCountThan(5);                    void testValue(string value)                  {                      foreach (var textBox in textBoxes)                      {                          textBox.Clear().SendKeys(value);                      }                      button.Click();                  }                  void assertValidators(params bool[] states)                  {                      if (states.Length != textBoxes.Count)                      {                          throw new ArgumentException("states");                      }                        for (int i = 0; i < textBoxes.Count; i++)                      {                          if (states[i])                          {                              AssertUI.HasClass(textBoxes[i]' "has-error");                          }                          else                          {                              AssertUI.HasNotClass(textBoxes[i]' "has-error");                          }                      }                  }                    // empty field - Required validators should be triggered                  testValue("");                  assertValidators(false' false' true' false' true);                    // correct value - no error                  testValue("06/14/2017 8:10:35 AM");                  assertValidators(false' false' false' false' false);                    // incorrect format - all fields should trigger errors except the one where DotvvmClientFormat is disabled                  testValue("06-14-2017");                  assertValidators(false' true' true' true' true);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_EssentialTypeValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_EssentialTypeValidation);                    var addNestedBtn = browser.ElementAt("input[type=button]"' 0);                  var withBtn = browser.ElementAt("input[type=button]"' 1);                  var withOutBtn = browser.ElementAt("input[type=button]"' 2);                    // withnout nested test                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.First("li")' "The NullableIntegerProperty field is required.");                  withOutBtn.Click();                                         // should not remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  browser.First(".nullableInt input[type=text]").SendKeys("5");                  withOutBtn.Click();                                         // should not remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  withBtn.Click();                                            // should remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    // with nested test                  browser.First(".nullableInt input[type=text]").Clear();                  addNestedBtn.Click();                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(4);                  browser.ElementAt(".nullableInt input[type=text]"' 0).SendKeys("10");                  browser.ElementAt(".nullableInt input[type=text]"' 2).SendKeys("10");                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(4);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                    // wrong value test                  browser.ElementAt(".nullableInt input[type=text]"' 3).SendKeys("15");                  browser.First(".NaNTest input[type=text]").SendKeys("asd");                  withBtn.Click();                  browser.WaitForPostback();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                    // correct form test                  browser.First(".NaNTest input[type=text]").Clear();                  browser.First(".NaNTest input[type=text]").SendKeys("55");                  browser.ElementAt(".nullableInt input[type=text]"' 1).SendKeys("15");                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_EssentialTypeValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_EssentialTypeValidation);                    var addNestedBtn = browser.ElementAt("input[type=button]"' 0);                  var withBtn = browser.ElementAt("input[type=button]"' 1);                  var withOutBtn = browser.ElementAt("input[type=button]"' 2);                    // withnout nested test                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.First("li")' "The NullableIntegerProperty field is required.");                  withOutBtn.Click();                                         // should not remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  browser.First(".nullableInt input[type=text]").SendKeys("5");                  withOutBtn.Click();                                         // should not remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  withBtn.Click();                                            // should remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    // with nested test                  browser.First(".nullableInt input[type=text]").Clear();                  addNestedBtn.Click();                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(4);                  browser.ElementAt(".nullableInt input[type=text]"' 0).SendKeys("10");                  browser.ElementAt(".nullableInt input[type=text]"' 2).SendKeys("10");                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(4);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                    // wrong value test                  browser.ElementAt(".nullableInt input[type=text]"' 3).SendKeys("15");                  browser.First(".NaNTest input[type=text]").SendKeys("asd");                  withBtn.Click();                  browser.WaitForPostback();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                    // correct form test                  browser.First(".NaNTest input[type=text]").Clear();                  browser.First(".NaNTest input[type=text]").SendKeys("55");                  browser.ElementAt(".nullableInt input[type=text]"' 1).SendKeys("15");                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_EssentialTypeValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_EssentialTypeValidation);                    var addNestedBtn = browser.ElementAt("input[type=button]"' 0);                  var withBtn = browser.ElementAt("input[type=button]"' 1);                  var withOutBtn = browser.ElementAt("input[type=button]"' 2);                    // withnout nested test                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.First("li")' "The NullableIntegerProperty field is required.");                  withOutBtn.Click();                                         // should not remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  browser.First(".nullableInt input[type=text]").SendKeys("5");                  withOutBtn.Click();                                         // should not remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  withBtn.Click();                                            // should remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    // with nested test                  browser.First(".nullableInt input[type=text]").Clear();                  addNestedBtn.Click();                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(4);                  browser.ElementAt(".nullableInt input[type=text]"' 0).SendKeys("10");                  browser.ElementAt(".nullableInt input[type=text]"' 2).SendKeys("10");                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(4);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                    // wrong value test                  browser.ElementAt(".nullableInt input[type=text]"' 3).SendKeys("15");                  browser.First(".NaNTest input[type=text]").SendKeys("asd");                  withBtn.Click();                  browser.WaitForPostback();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                    // correct form test                  browser.First(".NaNTest input[type=text]").Clear();                  browser.First(".NaNTest input[type=text]").SendKeys("55");                  browser.ElementAt(".nullableInt input[type=text]"' 1).SendKeys("15");                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_EssentialTypeValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_EssentialTypeValidation);                    var addNestedBtn = browser.ElementAt("input[type=button]"' 0);                  var withBtn = browser.ElementAt("input[type=button]"' 1);                  var withOutBtn = browser.ElementAt("input[type=button]"' 2);                    // withnout nested test                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.First("li")' "The NullableIntegerProperty field is required.");                  withOutBtn.Click();                                         // should not remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  browser.First(".nullableInt input[type=text]").SendKeys("5");                  withOutBtn.Click();                                         // should not remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  withBtn.Click();                                            // should remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    // with nested test                  browser.First(".nullableInt input[type=text]").Clear();                  addNestedBtn.Click();                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(4);                  browser.ElementAt(".nullableInt input[type=text]"' 0).SendKeys("10");                  browser.ElementAt(".nullableInt input[type=text]"' 2).SendKeys("10");                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(4);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                    // wrong value test                  browser.ElementAt(".nullableInt input[type=text]"' 3).SendKeys("15");                  browser.First(".NaNTest input[type=text]").SendKeys("asd");                  withBtn.Click();                  browser.WaitForPostback();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                    // correct form test                  browser.First(".NaNTest input[type=text]").Clear();                  browser.First(".NaNTest input[type=text]").SendKeys("55");                  browser.ElementAt(".nullableInt input[type=text]"' 1).SendKeys("15");                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_EssentialTypeValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_EssentialTypeValidation);                    var addNestedBtn = browser.ElementAt("input[type=button]"' 0);                  var withBtn = browser.ElementAt("input[type=button]"' 1);                  var withOutBtn = browser.ElementAt("input[type=button]"' 2);                    // withnout nested test                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.First("li")' "The NullableIntegerProperty field is required.");                  withOutBtn.Click();                                         // should not remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  browser.First(".nullableInt input[type=text]").SendKeys("5");                  withOutBtn.Click();                                         // should not remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  withBtn.Click();                                            // should remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    // with nested test                  browser.First(".nullableInt input[type=text]").Clear();                  addNestedBtn.Click();                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(4);                  browser.ElementAt(".nullableInt input[type=text]"' 0).SendKeys("10");                  browser.ElementAt(".nullableInt input[type=text]"' 2).SendKeys("10");                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(4);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                    // wrong value test                  browser.ElementAt(".nullableInt input[type=text]"' 3).SendKeys("15");                  browser.First(".NaNTest input[type=text]").SendKeys("asd");                  withBtn.Click();                  browser.WaitForPostback();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                    // correct form test                  browser.First(".NaNTest input[type=text]").Clear();                  browser.First(".NaNTest input[type=text]").SendKeys("55");                  browser.ElementAt(".nullableInt input[type=text]"' 1).SendKeys("15");                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_EssentialTypeValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_EssentialTypeValidation);                    var addNestedBtn = browser.ElementAt("input[type=button]"' 0);                  var withBtn = browser.ElementAt("input[type=button]"' 1);                  var withOutBtn = browser.ElementAt("input[type=button]"' 2);                    // withnout nested test                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.First("li")' "The NullableIntegerProperty field is required.");                  withOutBtn.Click();                                         // should not remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  browser.First(".nullableInt input[type=text]").SendKeys("5");                  withOutBtn.Click();                                         // should not remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  withBtn.Click();                                            // should remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    // with nested test                  browser.First(".nullableInt input[type=text]").Clear();                  addNestedBtn.Click();                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(4);                  browser.ElementAt(".nullableInt input[type=text]"' 0).SendKeys("10");                  browser.ElementAt(".nullableInt input[type=text]"' 2).SendKeys("10");                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(4);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                    // wrong value test                  browser.ElementAt(".nullableInt input[type=text]"' 3).SendKeys("15");                  browser.First(".NaNTest input[type=text]").SendKeys("asd");                  withBtn.Click();                  browser.WaitForPostback();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                    // correct form test                  browser.First(".NaNTest input[type=text]").Clear();                  browser.First(".NaNTest input[type=text]").SendKeys("55");                  browser.ElementAt(".nullableInt input[type=text]"' 1).SendKeys("15");                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_EssentialTypeValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_EssentialTypeValidation);                    var addNestedBtn = browser.ElementAt("input[type=button]"' 0);                  var withBtn = browser.ElementAt("input[type=button]"' 1);                  var withOutBtn = browser.ElementAt("input[type=button]"' 2);                    // withnout nested test                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.First("li")' "The NullableIntegerProperty field is required.");                  withOutBtn.Click();                                         // should not remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  browser.First(".nullableInt input[type=text]").SendKeys("5");                  withOutBtn.Click();                                         // should not remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  withBtn.Click();                                            // should remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    // with nested test                  browser.First(".nullableInt input[type=text]").Clear();                  addNestedBtn.Click();                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(4);                  browser.ElementAt(".nullableInt input[type=text]"' 0).SendKeys("10");                  browser.ElementAt(".nullableInt input[type=text]"' 2).SendKeys("10");                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(4);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                    // wrong value test                  browser.ElementAt(".nullableInt input[type=text]"' 3).SendKeys("15");                  browser.First(".NaNTest input[type=text]").SendKeys("asd");                  withBtn.Click();                  browser.WaitForPostback();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                    // correct form test                  browser.First(".NaNTest input[type=text]").Clear();                  browser.First(".NaNTest input[type=text]").SendKeys("55");                  browser.ElementAt(".nullableInt input[type=text]"' 1).SendKeys("15");                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_EssentialTypeValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_EssentialTypeValidation);                    var addNestedBtn = browser.ElementAt("input[type=button]"' 0);                  var withBtn = browser.ElementAt("input[type=button]"' 1);                  var withOutBtn = browser.ElementAt("input[type=button]"' 2);                    // withnout nested test                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.First("li")' "The NullableIntegerProperty field is required.");                  withOutBtn.Click();                                         // should not remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  browser.First(".nullableInt input[type=text]").SendKeys("5");                  withOutBtn.Click();                                         // should not remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  withBtn.Click();                                            // should remove the validation error                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    // with nested test                  browser.First(".nullableInt input[type=text]").Clear();                  addNestedBtn.Click();                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(4);                  browser.ElementAt(".nullableInt input[type=text]"' 0).SendKeys("10");                  browser.ElementAt(".nullableInt input[type=text]"' 2).SendKeys("10");                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(4);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                    // wrong value test                  browser.ElementAt(".nullableInt input[type=text]"' 3).SendKeys("15");                  browser.First(".NaNTest input[type=text]").SendKeys("asd");                  withBtn.Click();                  browser.WaitForPostback();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                    // correct form test                  browser.First(".NaNTest input[type=text]").Clear();                  browser.First(".NaNTest input[type=text]").SendKeys("55");                  browser.ElementAt(".nullableInt input[type=text]"' 1).SendKeys("15");                  withOutBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  withBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_ModelStateErrors,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_ModelStateErrors);                    //click first button - viewmodel error                  browser.ElementAt("input[type=button]"' 0).Click();                  browser.FindElements(".vmErrors li").ThrowIfDifferentCountThan(1);                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm1Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 1));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 2));                    //click second button - nested viewmodel1 error                  browser.ElementAt("input[type=button]"' 1).Click();                  browser.FindElements(".vmErrors li").ThrowIfDifferentCountThan(1);                  AssertUI.IsDisplayed(browser.ElementAt(".vm1Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 1));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 2));                    //click third button - nested viewmodel2 two errors                  browser.ElementAt("input[type=button]"' 2).Click();                  browser.FindElements(".vmErrors li").ThrowIfDifferentCountThan(2);                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm1Error"' 0));                  AssertUI.IsDisplayed(browser.ElementAt(".vm2Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 1));                  AssertUI.IsDisplayed(browser.ElementAt(".vm2Error"' 2));              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_ModelStateErrors,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_ModelStateErrors);                    //click first button - viewmodel error                  browser.ElementAt("input[type=button]"' 0).Click();                  browser.FindElements(".vmErrors li").ThrowIfDifferentCountThan(1);                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm1Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 1));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 2));                    //click second button - nested viewmodel1 error                  browser.ElementAt("input[type=button]"' 1).Click();                  browser.FindElements(".vmErrors li").ThrowIfDifferentCountThan(1);                  AssertUI.IsDisplayed(browser.ElementAt(".vm1Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 1));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 2));                    //click third button - nested viewmodel2 two errors                  browser.ElementAt("input[type=button]"' 2).Click();                  browser.FindElements(".vmErrors li").ThrowIfDifferentCountThan(2);                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm1Error"' 0));                  AssertUI.IsDisplayed(browser.ElementAt(".vm2Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 1));                  AssertUI.IsDisplayed(browser.ElementAt(".vm2Error"' 2));              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_ModelStateErrors,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_ModelStateErrors);                    //click first button - viewmodel error                  browser.ElementAt("input[type=button]"' 0).Click();                  browser.FindElements(".vmErrors li").ThrowIfDifferentCountThan(1);                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm1Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 1));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 2));                    //click second button - nested viewmodel1 error                  browser.ElementAt("input[type=button]"' 1).Click();                  browser.FindElements(".vmErrors li").ThrowIfDifferentCountThan(1);                  AssertUI.IsDisplayed(browser.ElementAt(".vm1Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 1));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 2));                    //click third button - nested viewmodel2 two errors                  browser.ElementAt("input[type=button]"' 2).Click();                  browser.FindElements(".vmErrors li").ThrowIfDifferentCountThan(2);                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm1Error"' 0));                  AssertUI.IsDisplayed(browser.ElementAt(".vm2Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 1));                  AssertUI.IsDisplayed(browser.ElementAt(".vm2Error"' 2));              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_ModelStateErrors,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_ModelStateErrors);                    //click first button - viewmodel error                  browser.ElementAt("input[type=button]"' 0).Click();                  browser.FindElements(".vmErrors li").ThrowIfDifferentCountThan(1);                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm1Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 1));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 2));                    //click second button - nested viewmodel1 error                  browser.ElementAt("input[type=button]"' 1).Click();                  browser.FindElements(".vmErrors li").ThrowIfDifferentCountThan(1);                  AssertUI.IsDisplayed(browser.ElementAt(".vm1Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 1));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 2));                    //click third button - nested viewmodel2 two errors                  browser.ElementAt("input[type=button]"' 2).Click();                  browser.FindElements(".vmErrors li").ThrowIfDifferentCountThan(2);                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm1Error"' 0));                  AssertUI.IsDisplayed(browser.ElementAt(".vm2Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 1));                  AssertUI.IsDisplayed(browser.ElementAt(".vm2Error"' 2));              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_ModelStateErrors,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_ModelStateErrors);                    //click first button - viewmodel error                  browser.ElementAt("input[type=button]"' 0).Click();                  browser.FindElements(".vmErrors li").ThrowIfDifferentCountThan(1);                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm1Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 1));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 2));                    //click second button - nested viewmodel1 error                  browser.ElementAt("input[type=button]"' 1).Click();                  browser.FindElements(".vmErrors li").ThrowIfDifferentCountThan(1);                  AssertUI.IsDisplayed(browser.ElementAt(".vm1Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 1));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 2));                    //click third button - nested viewmodel2 two errors                  browser.ElementAt("input[type=button]"' 2).Click();                  browser.FindElements(".vmErrors li").ThrowIfDifferentCountThan(2);                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm1Error"' 0));                  AssertUI.IsDisplayed(browser.ElementAt(".vm2Error"' 0));                  AssertUI.IsNotDisplayed(browser.ElementAt(".vm2Error"' 1));                  AssertUI.IsDisplayed(browser.ElementAt(".vm2Error"' 2));              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_NestedValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_NestedValidation);                    // ensure validators not visible                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    browser.FindElements(".summary1 li").ThrowIfDifferentCountThan(0);                  browser.FindElements(".summary2 li").ThrowIfDifferentCountThan(0);                    // leave textbox empty and submit the form                  browser.Click("input[type=button]");                    // ensure validators visible                  AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("invalid"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    browser.FindElements(".summary1 li").ThrowIfDifferentCountThan(0);                  browser.FindElements(".summary2 li").ThrowIfDifferentCountThan(1);                    // submit once again and test the validation summary still holds one error                  browser.Click("input[type=button]");                    // ensure validators visible                  AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("invalid"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    browser.FindElements(".summary1 li").ThrowIfDifferentCountThan(0);                  browser.FindElements(".summary2 li").ThrowIfDifferentCountThan(1);                    // fill invalid value in the task title                  browser.SendKeys("input[type=text]"' "test");                  browser.Wait();                  browser.Click("input[type=button]");                    // ensure validators                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    browser.FindElements(".summary1 li").ThrowIfDifferentCountThan(0);                  browser.FindElements(".summary2 li").ThrowIfDifferentCountThan(0);                });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_NestedValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_NestedValidation);                    // ensure validators not visible                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    browser.FindElements(".summary1 li").ThrowIfDifferentCountThan(0);                  browser.FindElements(".summary2 li").ThrowIfDifferentCountThan(0);                    // leave textbox empty and submit the form                  browser.Click("input[type=button]");                    // ensure validators visible                  AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("invalid"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    browser.FindElements(".summary1 li").ThrowIfDifferentCountThan(0);                  browser.FindElements(".summary2 li").ThrowIfDifferentCountThan(1);                    // submit once again and test the validation summary still holds one error                  browser.Click("input[type=button]");                    // ensure validators visible                  AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("invalid"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    browser.FindElements(".summary1 li").ThrowIfDifferentCountThan(0);                  browser.FindElements(".summary2 li").ThrowIfDifferentCountThan(1);                    // fill invalid value in the task title                  browser.SendKeys("input[type=text]"' "test");                  browser.Wait();                  browser.Click("input[type=button]");                    // ensure validators                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    browser.FindElements(".summary1 li").ThrowIfDifferentCountThan(0);                  browser.FindElements(".summary2 li").ThrowIfDifferentCountThan(0);                });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_NestedValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_NestedValidation);                    // ensure validators not visible                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    browser.FindElements(".summary1 li").ThrowIfDifferentCountThan(0);                  browser.FindElements(".summary2 li").ThrowIfDifferentCountThan(0);                    // leave textbox empty and submit the form                  browser.Click("input[type=button]");                    // ensure validators visible                  AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("invalid"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    browser.FindElements(".summary1 li").ThrowIfDifferentCountThan(0);                  browser.FindElements(".summary2 li").ThrowIfDifferentCountThan(1);                    // submit once again and test the validation summary still holds one error                  browser.Click("input[type=button]");                    // ensure validators visible                  AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("invalid"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    browser.FindElements(".summary1 li").ThrowIfDifferentCountThan(0);                  browser.FindElements(".summary2 li").ThrowIfDifferentCountThan(1);                    // fill invalid value in the task title                  browser.SendKeys("input[type=text]"' "test");                  browser.Wait();                  browser.Click("input[type=button]");                    // ensure validators                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    browser.FindElements(".summary1 li").ThrowIfDifferentCountThan(0);                  browser.FindElements(".summary2 li").ThrowIfDifferentCountThan(0);                });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_NestedValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_NestedValidation);                    // ensure validators not visible                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    browser.FindElements(".summary1 li").ThrowIfDifferentCountThan(0);                  browser.FindElements(".summary2 li").ThrowIfDifferentCountThan(0);                    // leave textbox empty and submit the form                  browser.Click("input[type=button]");                    // ensure validators visible                  AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("invalid"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    browser.FindElements(".summary1 li").ThrowIfDifferentCountThan(0);                  browser.FindElements(".summary2 li").ThrowIfDifferentCountThan(1);                    // submit once again and test the validation summary still holds one error                  browser.Click("input[type=button]");                    // ensure validators visible                  AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("invalid"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    browser.FindElements(".summary1 li").ThrowIfDifferentCountThan(0);                  browser.FindElements(".summary2 li").ThrowIfDifferentCountThan(1);                    // fill invalid value in the task title                  browser.SendKeys("input[type=text]"' "test");                  browser.Wait();                  browser.Click("input[type=button]");                    // ensure validators                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    browser.FindElements(".summary1 li").ThrowIfDifferentCountThan(0);                  browser.FindElements(".summary2 li").ThrowIfDifferentCountThan(0);                });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_NullValidationTarget,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_NullValidationTarget);                    //get buttons                  var targetRootBtn = browser.ElementAt("input[type=button]"' 0);                  var targetNullBtn = browser.ElementAt("input[type=button]"' 1);                  var targetSomeBtn = browser.ElementAt("input[type=button]"' 2);                    //test both fields empty                  targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 1)' "The Required field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.First("li")' "The Required field is required.");                    //test invalid Email and empty Required                  browser.ElementAt("input[type=text]"' 0).SendKeys("invalid");                    targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 1)' "The Required field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    // The invalid Email won't be reported because emails are checked only on the server                  targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The Required field is required.");                    //test valid Email and empty Required                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=text]"' 0).SendKeys("valid@test.com");                    targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 1)' "The Required field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.First("li")' "The Required field is required.");                    //test invalid Email and filled Required                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=text]"' 0).SendKeys("invalid");                  browser.ElementAt("input[type=text]"' 1).SendKeys("filled");                    targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    // The invalid email will be reported this time because now the check makes it to the server                  targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The Email field is not a valid e-mail address.");                    //test valid Email and filled Required (valid form - expect for null object)                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=text]"' 0).SendKeys("valid@test.com");                    targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_NullValidationTarget,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_NullValidationTarget);                    //get buttons                  var targetRootBtn = browser.ElementAt("input[type=button]"' 0);                  var targetNullBtn = browser.ElementAt("input[type=button]"' 1);                  var targetSomeBtn = browser.ElementAt("input[type=button]"' 2);                    //test both fields empty                  targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 1)' "The Required field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.First("li")' "The Required field is required.");                    //test invalid Email and empty Required                  browser.ElementAt("input[type=text]"' 0).SendKeys("invalid");                    targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 1)' "The Required field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    // The invalid Email won't be reported because emails are checked only on the server                  targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The Required field is required.");                    //test valid Email and empty Required                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=text]"' 0).SendKeys("valid@test.com");                    targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 1)' "The Required field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.First("li")' "The Required field is required.");                    //test invalid Email and filled Required                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=text]"' 0).SendKeys("invalid");                  browser.ElementAt("input[type=text]"' 1).SendKeys("filled");                    targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    // The invalid email will be reported this time because now the check makes it to the server                  targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The Email field is not a valid e-mail address.");                    //test valid Email and filled Required (valid form - expect for null object)                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=text]"' 0).SendKeys("valid@test.com");                    targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_NullValidationTarget,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_NullValidationTarget);                    //get buttons                  var targetRootBtn = browser.ElementAt("input[type=button]"' 0);                  var targetNullBtn = browser.ElementAt("input[type=button]"' 1);                  var targetSomeBtn = browser.ElementAt("input[type=button]"' 2);                    //test both fields empty                  targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 1)' "The Required field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.First("li")' "The Required field is required.");                    //test invalid Email and empty Required                  browser.ElementAt("input[type=text]"' 0).SendKeys("invalid");                    targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 1)' "The Required field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    // The invalid Email won't be reported because emails are checked only on the server                  targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The Required field is required.");                    //test valid Email and empty Required                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=text]"' 0).SendKeys("valid@test.com");                    targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 1)' "The Required field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.First("li")' "The Required field is required.");                    //test invalid Email and filled Required                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=text]"' 0).SendKeys("invalid");                  browser.ElementAt("input[type=text]"' 1).SendKeys("filled");                    targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    // The invalid email will be reported this time because now the check makes it to the server                  targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The Email field is not a valid e-mail address.");                    //test valid Email and filled Required (valid form - expect for null object)                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=text]"' 0).SendKeys("valid@test.com");                    targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_NullValidationTarget,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_NullValidationTarget);                    //get buttons                  var targetRootBtn = browser.ElementAt("input[type=button]"' 0);                  var targetNullBtn = browser.ElementAt("input[type=button]"' 1);                  var targetSomeBtn = browser.ElementAt("input[type=button]"' 2);                    //test both fields empty                  targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 1)' "The Required field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.First("li")' "The Required field is required.");                    //test invalid Email and empty Required                  browser.ElementAt("input[type=text]"' 0).SendKeys("invalid");                    targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 1)' "The Required field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    // The invalid Email won't be reported because emails are checked only on the server                  targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The Required field is required.");                    //test valid Email and empty Required                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=text]"' 0).SendKeys("valid@test.com");                    targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(2);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 1)' "The Required field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.First("li")' "The Required field is required.");                    //test invalid Email and filled Required                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=text]"' 0).SendKeys("invalid");                  browser.ElementAt("input[type=text]"' 1).SendKeys("filled");                    targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    // The invalid email will be reported this time because now the check makes it to the server                  targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The Email field is not a valid e-mail address.");                    //test valid Email and filled Required (valid form - expect for null object)                  browser.ElementAt("input[type=text]"' 0).Clear();                  browser.ElementAt("input[type=text]"' 0).SendKeys("valid@test.com");                    targetRootBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                  AssertUI.InnerTextEquals(browser.ElementAt("li"' 0)' "The NullObject field is required.");                    targetNullBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    targetSomeBtn.Click();                  browser.FindElements("li").ThrowIfDifferentCountThan(0);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_SimpleValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_SimpleValidation);                    // ensure validators not visible                  browser.WaitFor(() => {                      browser.FindElements("li").ThrowIfDifferentCountThan(0);                  }' 1000' 30);                        AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    // leave textbox empty and submit the form                  browser.Click("input[type=button]");                    // ensure validators visible                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("validator"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    // submit once again and test the validation summary still holds one error                  browser.Click("input[type=button]");                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    // fill invalid value in the task title                  browser.SendKeys("input[type=text]"' "test");                  browser.Wait();                  browser.Click("input[type=button]");                    // ensure validators visible                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("validator"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    // fill valid value in the task title                  browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "test@mail.com");                  browser.Wait();                  browser.Click("input[type=button]");                    // ensure validators not visible                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    // ensure the item was added                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_SimpleValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_SimpleValidation);                    // ensure validators not visible                  browser.WaitFor(() => {                      browser.FindElements("li").ThrowIfDifferentCountThan(0);                  }' 1000' 30);                        AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    // leave textbox empty and submit the form                  browser.Click("input[type=button]");                    // ensure validators visible                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("validator"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    // submit once again and test the validation summary still holds one error                  browser.Click("input[type=button]");                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    // fill invalid value in the task title                  browser.SendKeys("input[type=text]"' "test");                  browser.Wait();                  browser.Click("input[type=button]");                    // ensure validators visible                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("validator"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    // fill valid value in the task title                  browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "test@mail.com");                  browser.Wait();                  browser.Click("input[type=button]");                    // ensure validators not visible                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    // ensure the item was added                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_SimpleValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_SimpleValidation);                    // ensure validators not visible                  browser.WaitFor(() => {                      browser.FindElements("li").ThrowIfDifferentCountThan(0);                  }' 1000' 30);                        AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    // leave textbox empty and submit the form                  browser.Click("input[type=button]");                    // ensure validators visible                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("validator"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    // submit once again and test the validation summary still holds one error                  browser.Click("input[type=button]");                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    // fill invalid value in the task title                  browser.SendKeys("input[type=text]"' "test");                  browser.Wait();                  browser.Click("input[type=button]");                    // ensure validators visible                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("validator"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    // fill valid value in the task title                  browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "test@mail.com");                  browser.Wait();                  browser.Click("input[type=button]");                    // ensure validators not visible                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    // ensure the item was added                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_SimpleValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_SimpleValidation);                    // ensure validators not visible                  browser.WaitFor(() => {                      browser.FindElements("li").ThrowIfDifferentCountThan(0);                  }' 1000' 30);                        AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    // leave textbox empty and submit the form                  browser.Click("input[type=button]");                    // ensure validators visible                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("validator"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    // submit once again and test the validation summary still holds one error                  browser.Click("input[type=button]");                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    // fill invalid value in the task title                  browser.SendKeys("input[type=text]"' "test");                  browser.Wait();                  browser.Click("input[type=button]");                    // ensure validators visible                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("validator"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    // fill valid value in the task title                  browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "test@mail.com");                  browser.Wait();                  browser.Click("input[type=button]");                    // ensure validators not visible                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    // ensure the item was added                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_SimpleValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_SimpleValidation);                    // ensure validators not visible                  browser.WaitFor(() => {                      browser.FindElements("li").ThrowIfDifferentCountThan(0);                  }' 1000' 30);                        AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    // leave textbox empty and submit the form                  browser.Click("input[type=button]");                    // ensure validators visible                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("validator"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    // submit once again and test the validation summary still holds one error                  browser.Click("input[type=button]");                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    // fill invalid value in the task title                  browser.SendKeys("input[type=text]"' "test");                  browser.Wait();                  browser.Click("input[type=button]");                    // ensure validators visible                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("validator"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    // fill valid value in the task title                  browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "test@mail.com");                  browser.Wait();                  browser.Click("input[type=button]");                    // ensure validators not visible                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    // ensure the item was added                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_SimpleValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_SimpleValidation);                    // ensure validators not visible                  browser.WaitFor(() => {                      browser.FindElements("li").ThrowIfDifferentCountThan(0);                  }' 1000' 30);                        AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    // leave textbox empty and submit the form                  browser.Click("input[type=button]");                    // ensure validators visible                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("validator"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    // submit once again and test the validation summary still holds one error                  browser.Click("input[type=button]");                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    // fill invalid value in the task title                  browser.SendKeys("input[type=text]"' "test");                  browser.Wait();                  browser.Click("input[type=button]");                    // ensure validators visible                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("validator"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    // fill valid value in the task title                  browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "test@mail.com");                  browser.Wait();                  browser.Click("input[type=button]");                    // ensure validators not visible                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    // ensure the item was added                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);              });
Magic Number,DotVVM.Samples.Tests.Feature,ValidationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ValidationTests.cs,Feature_Validation_SimpleValidation,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_Validation_SimpleValidation);                    // ensure validators not visible                  browser.WaitFor(() => {                      browser.FindElements("li").ThrowIfDifferentCountThan(0);                  }' 1000' 30);                        AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    // leave textbox empty and submit the form                  browser.Click("input[type=button]");                    // ensure validators visible                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("validator"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    // submit once again and test the validation summary still holds one error                  browser.Click("input[type=button]");                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    // fill invalid value in the task title                  browser.SendKeys("input[type=text]"' "test");                  browser.Wait();                  browser.Click("input[type=button]");                    // ensure validators visible                  browser.FindElements("li").ThrowIfDifferentCountThan(1);                    AssertUI.IsDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => s.Contains("validator"));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 2));                    // fill valid value in the task title                  browser.ClearElementsContent("input[type=text]");                  browser.SendKeys("input[type=text]"' "test@mail.com");                  browser.Wait();                  browser.Click("input[type=button]");                    // ensure validators not visible                  browser.FindElements("li").ThrowIfDifferentCountThan(0);                    AssertUI.IsNotDisplayed(browser.ElementAt("span"' 0));                  AssertUI.IsDisplayed(browser.ElementAt("span"' 1));                  AssertUI.ClassAttribute(browser.ElementAt("span"' 1)' s => !s.Contains("validator"));                  AssertUI.IsNotDisplayed(browser.ElementAt("span"' 2));                    // ensure the item was added                  browser.FindElements(".table tr").ThrowIfDifferentCountThan(4);              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelCacheTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelCacheTests.cs,Feature_ViewModelCache_ViewModelCacheMiss,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelCache_ViewModelCacheMiss);                  browser.Wait();                    var cacheEnabled = browser.Single(".cacheEnabled").GetText() == "True";                    var result = browser.Single(".result");                  var requestCount = browser.Single(".requestCount");                  AssertUI.TextEquals(result' "0");                  AssertUI.TextEquals(requestCount' "0");                    // normal postback                  browser.ElementAt("input[type=button]"' 0).Click().Wait(1000);                  AssertUI.TextEquals(result' "1");                  AssertUI.TextEquals(requestCount' "1");                    // tamper with viewmodel cache id - it should do two requests but it should still work                  browser.ElementAt("input[type=button]"' 1).Click().Wait(1000);                  browser.ElementAt("input[type=button]"' 0).Click().Wait(1000);                  AssertUI.TextEquals(result' "2");                  AssertUI.TextEquals(requestCount' cacheEnabled ? "3" : "2");                    // normal postback                  browser.ElementAt("input[type=button]"' 0).Click().Wait(1000);                  AssertUI.TextEquals(result' "3");                  AssertUI.TextEquals(requestCount' cacheEnabled ? "4" : "3");              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelCacheTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelCacheTests.cs,Feature_ViewModelCache_ViewModelCacheMiss,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelCache_ViewModelCacheMiss);                  browser.Wait();                    var cacheEnabled = browser.Single(".cacheEnabled").GetText() == "True";                    var result = browser.Single(".result");                  var requestCount = browser.Single(".requestCount");                  AssertUI.TextEquals(result' "0");                  AssertUI.TextEquals(requestCount' "0");                    // normal postback                  browser.ElementAt("input[type=button]"' 0).Click().Wait(1000);                  AssertUI.TextEquals(result' "1");                  AssertUI.TextEquals(requestCount' "1");                    // tamper with viewmodel cache id - it should do two requests but it should still work                  browser.ElementAt("input[type=button]"' 1).Click().Wait(1000);                  browser.ElementAt("input[type=button]"' 0).Click().Wait(1000);                  AssertUI.TextEquals(result' "2");                  AssertUI.TextEquals(requestCount' cacheEnabled ? "3" : "2");                    // normal postback                  browser.ElementAt("input[type=button]"' 0).Click().Wait(1000);                  AssertUI.TextEquals(result' "3");                  AssertUI.TextEquals(requestCount' cacheEnabled ? "4" : "3");              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelCacheTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelCacheTests.cs,Feature_ViewModelCache_ViewModelCacheMiss,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelCache_ViewModelCacheMiss);                  browser.Wait();                    var cacheEnabled = browser.Single(".cacheEnabled").GetText() == "True";                    var result = browser.Single(".result");                  var requestCount = browser.Single(".requestCount");                  AssertUI.TextEquals(result' "0");                  AssertUI.TextEquals(requestCount' "0");                    // normal postback                  browser.ElementAt("input[type=button]"' 0).Click().Wait(1000);                  AssertUI.TextEquals(result' "1");                  AssertUI.TextEquals(requestCount' "1");                    // tamper with viewmodel cache id - it should do two requests but it should still work                  browser.ElementAt("input[type=button]"' 1).Click().Wait(1000);                  browser.ElementAt("input[type=button]"' 0).Click().Wait(1000);                  AssertUI.TextEquals(result' "2");                  AssertUI.TextEquals(requestCount' cacheEnabled ? "3" : "2");                    // normal postback                  browser.ElementAt("input[type=button]"' 0).Click().Wait(1000);                  AssertUI.TextEquals(result' "3");                  AssertUI.TextEquals(requestCount' cacheEnabled ? "4" : "3");              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelCacheTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelCacheTests.cs,Feature_ViewModelCache_ViewModelCacheMiss,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelCache_ViewModelCacheMiss);                  browser.Wait();                    var cacheEnabled = browser.Single(".cacheEnabled").GetText() == "True";                    var result = browser.Single(".result");                  var requestCount = browser.Single(".requestCount");                  AssertUI.TextEquals(result' "0");                  AssertUI.TextEquals(requestCount' "0");                    // normal postback                  browser.ElementAt("input[type=button]"' 0).Click().Wait(1000);                  AssertUI.TextEquals(result' "1");                  AssertUI.TextEquals(requestCount' "1");                    // tamper with viewmodel cache id - it should do two requests but it should still work                  browser.ElementAt("input[type=button]"' 1).Click().Wait(1000);                  browser.ElementAt("input[type=button]"' 0).Click().Wait(1000);                  AssertUI.TextEquals(result' "2");                  AssertUI.TextEquals(requestCount' cacheEnabled ? "3" : "2");                    // normal postback                  browser.ElementAt("input[type=button]"' 0).Click().Wait(1000);                  AssertUI.TextEquals(result' "3");                  AssertUI.TextEquals(requestCount' cacheEnabled ? "4" : "3");              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelDeserializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelDeserializationTests.cs,Feature_ViewModelDeserialization_DoesNotDropObject,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelDeserialization_DoesNotDropObject);                    AssertUI.InnerTextEquals(browser.First("span")' "0");                  //value++                  browser.ElementAt("input[type=button]"' 2).Click();                  browser.ElementAt("input[type=button]"' 2).Click();                  //check value                  AssertUI.InnerTextEquals(browser.First("span")' "2");                  //hide span                  browser.ElementAt("input[type=button]"' 0).Click();                  //show span                  browser.ElementAt("input[type=button]"' 1).Click();                  //value++                  browser.ElementAt("input[type=button]"' 2).Click();                  //check value                  AssertUI.InnerTextEquals(browser.First("span")' "3");              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelDeserializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelDeserializationTests.cs,Feature_ViewModelDeserialization_DoesNotDropObject,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelDeserialization_DoesNotDropObject);                    AssertUI.InnerTextEquals(browser.First("span")' "0");                  //value++                  browser.ElementAt("input[type=button]"' 2).Click();                  browser.ElementAt("input[type=button]"' 2).Click();                  //check value                  AssertUI.InnerTextEquals(browser.First("span")' "2");                  //hide span                  browser.ElementAt("input[type=button]"' 0).Click();                  //show span                  browser.ElementAt("input[type=button]"' 1).Click();                  //value++                  browser.ElementAt("input[type=button]"' 2).Click();                  //check value                  AssertUI.InnerTextEquals(browser.First("span")' "3");              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelDeserializationTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelDeserializationTests.cs,Feature_ViewModelDeserialization_DoesNotDropObject,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelDeserialization_DoesNotDropObject);                    AssertUI.InnerTextEquals(browser.First("span")' "0");                  //value++                  browser.ElementAt("input[type=button]"' 2).Click();                  browser.ElementAt("input[type=button]"' 2).Click();                  //check value                  AssertUI.InnerTextEquals(browser.First("span")' "2");                  //hide span                  browser.ElementAt("input[type=button]"' 0).Click();                  //show span                  browser.ElementAt("input[type=button]"' 1).Click();                  //value++                  browser.ElementAt("input[type=button]"' 2).Click();                  //check value                  AssertUI.InnerTextEquals(browser.First("span")' "3");              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelNestingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelNestingTests.cs,Feature_ViewModelNesting_NestedViewModel,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelNesting_NestedViewModel);                    // check table values                  CheckTableRow(browser' 1);                  CheckTableRow(browser' 2);                  CheckTableRow(browser' 3);                    // check tree structure                  CheckTreeItems(browser' 0' 5); // 5 nodes in level 0                  CheckTreeItems(browser' 1' 20); // 20 nodes in level 1                  CheckTreeItems(browser' 2' 60); // 60 nodes in level 2                  CheckTreeItems(browser' 3' 120); // 120 nodes in level 3                  CheckTreeItems(browser' 4' 120); // 120 nodes in level 4              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelNestingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelNestingTests.cs,Feature_ViewModelNesting_NestedViewModel,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelNesting_NestedViewModel);                    // check table values                  CheckTableRow(browser' 1);                  CheckTableRow(browser' 2);                  CheckTableRow(browser' 3);                    // check tree structure                  CheckTreeItems(browser' 0' 5); // 5 nodes in level 0                  CheckTreeItems(browser' 1' 20); // 20 nodes in level 1                  CheckTreeItems(browser' 2' 60); // 60 nodes in level 2                  CheckTreeItems(browser' 3' 120); // 120 nodes in level 3                  CheckTreeItems(browser' 4' 120); // 120 nodes in level 4              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelNestingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelNestingTests.cs,Feature_ViewModelNesting_NestedViewModel,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelNesting_NestedViewModel);                    // check table values                  CheckTableRow(browser' 1);                  CheckTableRow(browser' 2);                  CheckTableRow(browser' 3);                    // check tree structure                  CheckTreeItems(browser' 0' 5); // 5 nodes in level 0                  CheckTreeItems(browser' 1' 20); // 20 nodes in level 1                  CheckTreeItems(browser' 2' 60); // 60 nodes in level 2                  CheckTreeItems(browser' 3' 120); // 120 nodes in level 3                  CheckTreeItems(browser' 4' 120); // 120 nodes in level 4              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelNestingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelNestingTests.cs,Feature_ViewModelNesting_NestedViewModel,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelNesting_NestedViewModel);                    // check table values                  CheckTableRow(browser' 1);                  CheckTableRow(browser' 2);                  CheckTableRow(browser' 3);                    // check tree structure                  CheckTreeItems(browser' 0' 5); // 5 nodes in level 0                  CheckTreeItems(browser' 1' 20); // 20 nodes in level 1                  CheckTreeItems(browser' 2' 60); // 60 nodes in level 2                  CheckTreeItems(browser' 3' 120); // 120 nodes in level 3                  CheckTreeItems(browser' 4' 120); // 120 nodes in level 4              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelNestingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelNestingTests.cs,Feature_ViewModelNesting_NestedViewModel,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelNesting_NestedViewModel);                    // check table values                  CheckTableRow(browser' 1);                  CheckTableRow(browser' 2);                  CheckTableRow(browser' 3);                    // check tree structure                  CheckTreeItems(browser' 0' 5); // 5 nodes in level 0                  CheckTreeItems(browser' 1' 20); // 20 nodes in level 1                  CheckTreeItems(browser' 2' 60); // 60 nodes in level 2                  CheckTreeItems(browser' 3' 120); // 120 nodes in level 3                  CheckTreeItems(browser' 4' 120); // 120 nodes in level 4              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelNestingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelNestingTests.cs,Feature_ViewModelNesting_NestedViewModel,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelNesting_NestedViewModel);                    // check table values                  CheckTableRow(browser' 1);                  CheckTableRow(browser' 2);                  CheckTableRow(browser' 3);                    // check tree structure                  CheckTreeItems(browser' 0' 5); // 5 nodes in level 0                  CheckTreeItems(browser' 1' 20); // 20 nodes in level 1                  CheckTreeItems(browser' 2' 60); // 60 nodes in level 2                  CheckTreeItems(browser' 3' 120); // 120 nodes in level 3                  CheckTreeItems(browser' 4' 120); // 120 nodes in level 4              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelNestingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelNestingTests.cs,Feature_ViewModelNesting_NestedViewModel,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelNesting_NestedViewModel);                    // check table values                  CheckTableRow(browser' 1);                  CheckTableRow(browser' 2);                  CheckTableRow(browser' 3);                    // check tree structure                  CheckTreeItems(browser' 0' 5); // 5 nodes in level 0                  CheckTreeItems(browser' 1' 20); // 20 nodes in level 1                  CheckTreeItems(browser' 2' 60); // 60 nodes in level 2                  CheckTreeItems(browser' 3' 120); // 120 nodes in level 3                  CheckTreeItems(browser' 4' 120); // 120 nodes in level 4              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelNestingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelNestingTests.cs,Feature_ViewModelNesting_NestedViewModel,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelNesting_NestedViewModel);                    // check table values                  CheckTableRow(browser' 1);                  CheckTableRow(browser' 2);                  CheckTableRow(browser' 3);                    // check tree structure                  CheckTreeItems(browser' 0' 5); // 5 nodes in level 0                  CheckTreeItems(browser' 1' 20); // 20 nodes in level 1                  CheckTreeItems(browser' 2' 60); // 60 nodes in level 2                  CheckTreeItems(browser' 3' 120); // 120 nodes in level 3                  CheckTreeItems(browser' 4' 120); // 120 nodes in level 4              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelNestingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelNestingTests.cs,Feature_ViewModelNesting_NestedViewModel,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelNesting_NestedViewModel);                    // check table values                  CheckTableRow(browser' 1);                  CheckTableRow(browser' 2);                  CheckTableRow(browser' 3);                    // check tree structure                  CheckTreeItems(browser' 0' 5); // 5 nodes in level 0                  CheckTreeItems(browser' 1' 20); // 20 nodes in level 1                  CheckTreeItems(browser' 2' 60); // 60 nodes in level 2                  CheckTreeItems(browser' 3' 120); // 120 nodes in level 3                  CheckTreeItems(browser' 4' 120); // 120 nodes in level 4              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelNestingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelNestingTests.cs,Feature_ViewModelNesting_NestedViewModel,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelNesting_NestedViewModel);                    // check table values                  CheckTableRow(browser' 1);                  CheckTableRow(browser' 2);                  CheckTableRow(browser' 3);                    // check tree structure                  CheckTreeItems(browser' 0' 5); // 5 nodes in level 0                  CheckTreeItems(browser' 1' 20); // 20 nodes in level 1                  CheckTreeItems(browser' 2' 60); // 60 nodes in level 2                  CheckTreeItems(browser' 3' 120); // 120 nodes in level 3                  CheckTreeItems(browser' 4' 120); // 120 nodes in level 4              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelNestingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelNestingTests.cs,CheckTableRow,The following statement contains a magic number: var value = table.ElementAt("tr"' row).ElementAt("td"' 3).GetInnerText();
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelNestingTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelNestingTests.cs,CheckTableRow,The following statement contains a magic number: AssertUI.InnerTextEquals(table.ElementAt("tr"' row).ElementAt("td"' 2)' value' false);
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelProtectionTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelProtectionTests.cs,Feature_ViewModelProtection_ViewModelProtection,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelProtection_ViewModelProtection);                    // get original value                  var originalValue = browser.First("strong span").GetText();                    // modify protected data                  browser.Last("a").Click();                  browser.Wait(750);                    // make sure it happened                  AssertUI.InnerTextEquals(browser.First("strong span")' "hello");                    // try to do postback                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Wait(500);                  browser.Click("input[type=button]");                  browser.Wait(750);                    // verify that the original value was restored                  AssertUI.InnerTextEquals(browser.First("strong span")' originalValue);              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelProtectionTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelProtectionTests.cs,Feature_ViewModelProtection_ViewModelProtection,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelProtection_ViewModelProtection);                    // get original value                  var originalValue = browser.First("strong span").GetText();                    // modify protected data                  browser.Last("a").Click();                  browser.Wait(750);                    // make sure it happened                  AssertUI.InnerTextEquals(browser.First("strong span")' "hello");                    // try to do postback                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Wait(500);                  browser.Click("input[type=button]");                  browser.Wait(750);                    // verify that the original value was restored                  AssertUI.InnerTextEquals(browser.First("strong span")' originalValue);              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelProtectionTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelProtectionTests.cs,Feature_ViewModelProtection_ViewModelProtection,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelProtection_ViewModelProtection);                    // get original value                  var originalValue = browser.First("strong span").GetText();                    // modify protected data                  browser.Last("a").Click();                  browser.Wait(750);                    // make sure it happened                  AssertUI.InnerTextEquals(browser.First("strong span")' "hello");                    // try to do postback                  browser.SendKeys("input[type=text]"' "DotVVM rocks!");                  browser.Wait(500);                  browser.Click("input[type=button]");                  browser.Wait(750);                    // verify that the original value was restored                  AssertUI.InnerTextEquals(browser.First("strong span")' originalValue);              });
Magic Number,DotVVM.Samples.Tests.Feature,ViewModelProtectionTests,C:\research\architectureSmells\repos\riganti_redwood\src\DotVVM.Samples.Tests\Feature\ViewModelProtectionTests.cs,RunComplexViewModelProtectionTest,The following statement contains a magic number: RunInAllBrowsers(browser => {                  browser.NavigateToUrl(SamplesRouteUrls.FeatureSamples_ViewModelProtection_ComplexViewModelProtection);                    beforePostback(browser);                  browser.Single("postback"' this.SelectByDataUi).Click();                  browser.Wait(500);                  afterPostback(browser);              });
