Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,GetExceptionMessage,Cyclomatic complexity of the method is 10
Complex Method,MsgPack.Rpc,StandardObjectPool<T>,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\StandardObjectPool`1.cs,StandardObjectPool,Cyclomatic complexity of the method is 8
Complex Method,MsgPack.Rpc,StandardObjectPool<T>,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\StandardObjectPool`1.cs,BorrowCore,Cyclomatic complexity of the method is 9
Long Parameter List,MsgPack.Rpc,ArraySegmentExtensions,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\ArraySegmentExtensions.cs,CopyTo,The method has 5 parameters. Parameters: source' sourceOffset' array' arrayOffset' count
Long Parameter List,MsgPack.Rpc,ByteArraySegmentStream,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\ByteArraySegmentStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,MsgPack.Rpc,RpcArgumentException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcArgumentException.cs,RpcArgumentException,The method has 5 parameters. Parameters: methodName' parameterName' message' debugInformation' inner
Long Parameter List,MsgPack.Rpc.Protocols,RpcMethodInvocationException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\Protocols\RpcMethodInvocationException.cs,RpcMethodInvocationException,The method has 5 parameters. Parameters: rpcError' methodName' message' debugInformation' inner
Long Identifier,MsgPack.Rpc,ExceptionDispatchInfo,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\ExceptionDispatchInfo.cs,,The length of the parameter _constructorParameterStringException is 36.
Long Identifier,MsgPack.Rpc,ExceptionDispatchInfo,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\ExceptionDispatchInfo.cs,,The length of the parameter _safeCreateWrapperWin32ExceptionMethod is 38.
Long Identifier,MsgPack.Rpc,RpcApplicationContext,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcApplicationContext.cs,StopTimeoutWatch,The length of the parameter exceptionInCancellationCallback is 31.
Long Identifier,MsgPack.Rpc,RpcApplicationContext,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcApplicationContext.cs,,The length of the parameter _exceptionInCancellationCallback is 32.
Long Identifier,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,WriteStackFrame,The length of the parameter stackFrameTemplateWithFileInfo is 30.
Long Identifier,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,WriteStackFrame,The length of the parameter stackFrameTemplateWithoutFileInfo is 33.
Long Identifier,MsgPack.Rpc.StandardObjectPoolTracing,StandardObjectPoolTrace,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\StandardObjectPoolTrace.cs,,The length of the parameter InitializedWithDefaultConfiguration is 35.
Long Statement,MsgPack.Rpc,ByteArraySegmentStream,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\ByteArraySegmentStream.cs,Read,The length of the statement  "				int copied = this._segments[ this._segmentIndex ].CopyTo( this._offsetInCurrentSegment' buffer' offset + result' remains ); " is 123.
Long Statement,MsgPack.Rpc,ByteArraySegmentStream,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\ByteArraySegmentStream.cs,Seek,The length of the statement  "			Contract.Assert( offsetFromCurrent + this._position <= this.Length' this.Length + " <= " + offsetFromCurrent + this._position ); " is 128.
Long Statement,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,GetExceptionMessage,The length of the statement  "									: new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset' frame.FileName' frame.FileLineNumber' frame.FileColumnNumber } ) " is 174.
Long Statement,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,GetExceptionMessage,The length of the statement  "							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset() }; " is 137.
Long Statement,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,GetExceptionMessage,The length of the statement  "							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset()' frame.GetFileName()' frame.GetFileLineNumber()' frame.GetFileColumnNumber() }; " is 214.
Long Statement,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,ToStackFrameMethodSignature,The length of the statement  "			return String.Concat( methodBase.DeclaringType.FullName' "."' methodBase.Name' "("' String.Join( "' "' methodBase.GetParameters().Select( p => p.ParameterType.FullName ) )' ")" ); " is 179.
Long Statement,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,ToString,The length of the statement  "			if ( ( !includesDebugInformation || this._remoteExceptions == null ) && ( this._preservedStackTrace == null || this._preservedStackTrace.Count == 0 ) ) " is 151.
Long Statement,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,BuildExceptionStackTrace,The length of the statement  "						stringBuilder.AppendFormat( CultureInfo.CurrentCulture' "Exception transferred at [{0}]:"' this._remoteExceptions[ i - 1 ].Hop ).AppendLine(); " is 142.
Long Statement,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,BuildExceptionStackTrace,The length of the statement  "				stringBuilder.AppendFormat( CultureInfo.CurrentCulture' "Exception transferred at [{0}]:"' this._remoteExceptions[ this._remoteExceptions.Length - 1 ].Hop ).AppendLine(); " is 170.
Long Statement,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,WriteStackFrame,The length of the statement  "				stringBuilder.AppendFormat( CultureInfo.CurrentCulture' stackFrameTemplateWithFileInfo' frame.MethodSignature' frame.FileName' frame.FileLineNumber ); " is 150.
Long Statement,MsgPack.Rpc,RpcError,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcError.cs,ToString,The length of the statement  "			return String.Format( CultureInfo.CurrentCulture' "{0}({1}): {2}"' this._identifier' this._errorCode' this.DefaultMessage ); " is 124.
Long Statement,MsgPack.Rpc,RpcError,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcError.cs,CustomError,The length of the statement  "				throw new ArgumentOutOfRangeException( "errorCode"' errorCode' "Application error code must be grator than or equal to 0." ); " is 125.
Long Statement,MsgPack.Rpc,RpcError,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcError.cs,FromIdentifier,The length of the statement  "			return CustomError( String.IsNullOrWhiteSpace( identifier ) ? _unexpectedErrorIdentifier : identifier' errorCode ?? _unexpectedErrorCode ); " is 139.
Long Statement,MsgPack.Rpc,RpcErrorMessage,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcErrorMessage.cs,ToString,The length of the statement  "				return String.Format( CultureInfo.CurrentCulture' "{{ \"ID\" : \"{0}\"' \"Code\" : {1}' \"Detail\" : {2} }}"' this._error.Identifier' this._error.ErrorCode' this._detail ); " is 172.
Long Statement,MsgPack.Rpc,RpcTimeoutException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcTimeoutException.cs,GetExceptionMessage,The length of the statement  "			store.Add( ClientTimeoutKeyUtf8' this._clientTimeout == null ? MessagePackObject.Nil : this._clientTimeout.Value.Ticks ); " is 121.
Long Statement,MsgPack.Rpc,StandardObjectPool<T>,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\StandardObjectPool`1.cs,CollectLeases,The length of the statement  "							"Garbage items are collected' but there may be lost items. {{ \"Name\" : \"{0}\"' \"Type\" : \"{1}\"' \"HashCode\" : 0x{2:X}' \"Collected\" : {3}' \"MayBeLost\" : {4} }}"' " is 171.
Long Statement,MsgPack.Rpc,StandardObjectPool<T>,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\StandardObjectPool`1.cs,CollectLeases,The length of the statement  "							"Garbage items are collected. {{ \"Name\" : \"{0}\"' \"Type\" : \"{1}\"' \"HashCode\" : 0x{2:X}' \"Collected\" : {3} }}"' " is 121.
Long Statement,MsgPack.Rpc,StandardObjectPool<T>,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\StandardObjectPool`1.cs,BorrowCore,The length of the statement  "					throw new TimeoutException( String.Format( CultureInfo.CurrentCulture' "The object borrowing is not completed in the time out {0}."' this._borrowTimeout ) ); " is 157.
Long Statement,MsgPack.Rpc,StandardObjectPool<T>,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\StandardObjectPool`1.cs,TraceBorrow,The length of the statement  "				"Borrow the value from the pool. {{ \"Name\" : \"{0}\"' \"Type\" : \"{1}\"' \"HashCode\" : 0x{2:X}' \"Evicted\" : 0x{2:X}' \"Resource\" : \"{3}\"' \"HashCodeOfResource\" : 0x{4:X} }}"' " is 184.
Long Statement,MsgPack.Rpc,StandardObjectPool<T>,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\StandardObjectPool`1.cs,ReturnCore,The length of the statement  "					"Failed to return the value to the pool. {{ \"Name\" : \"{0}\"' \"Type\" : \"{1}\"' \"Value\" : 0x{2:X}' \"Resource\" : \"{3}\"' \"HashCodeOfResource\" : 0x{4:X} }}"' " is 166.
Long Statement,MsgPack.Rpc,StandardObjectPool<T>,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\StandardObjectPool`1.cs,ReturnCore,The length of the statement  "						"Return the value to the pool. {{ \"Name\" : \"{0}\"' \"Type\" : \"{1}\"' \"Value\" : 0x{2:X}' \"Resource\" : \"{3}\"' \"HashCodeOfResource\" : 0x{4:X} }}"' " is 156.
Long Statement,MsgPack.Rpc.Diagnostics,FileMessagePackStreamLogger,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\Diagnostics\FileMessagePackStreamLogger.cs,Write,The length of the statement  "			string filePath = Path.Combine( this._directoryPath' String.Format( CultureInfo.InvariantCulture' "{0:yyyyMMdd_HHmmss_fff}-{1}-{2}.mpac"' sessionStartTime.UtcDateTime' remoteEndPointString' ThreadId ) ); " is 203.
Long Statement,MsgPack.Rpc.Diagnostics,FileMessagePackStreamLogger,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\Diagnostics\FileMessagePackStreamLogger.cs,Write,The length of the statement  "					using ( var fileStream = new FileStream( filePath' FileMode.Append' FileAccess.Write' FileShare.Read' 64 * 1024' FileOptions.None ) ) " is 133.
Long Statement,MsgPack.Rpc.Diagnostics,IsolatedStorageFileMessagePackStreamLogger,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\Diagnostics\IsolatedStorageFileMessagePackStreamLogger.cs,Write,The length of the statement  "			string fileName = String.Format( CultureInfo.InvariantCulture' "{0:yyyyMMdd_HHmmss_fff}-{1}-{2}.mpac"' sessionStartTime.UtcDateTime' remoteEndPointString' ThreadId ); " is 166.
Long Statement,MsgPack.Rpc.Protocols.Filters,StreamLoggingMessageFilter<T>,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\Protocols\Filters\StreamLoggingMessageFilter`1.cs,ProcessMessageCore,The length of the statement  "			this._logger.Write( context.SessionStartedAt' context.RemoteEndPoint' context.ReceivedData.SelectMany( s => s.AsEnumerable() ) ); " is 129.
Long Statement,MsgPack.Rpc.Protocols,MessageContext,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\Protocols\MessageContext.cs,SetTransport,The length of the statement  "				throw new InvalidOperationException( String.Format( CultureInfo.CurrentCulture' "This context is already bounded to '{0}'(Socket: 0x{1:X})."' transport.GetType()' transport.BoundSocket == null ? IntPtr.Zero : transport.BoundSocket.Handle ) ); " is 242.
Long Statement,MsgPack.Rpc.Protocols,MessageContext,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\Protocols\MessageContext.cs,SetTransport,The length of the statement  "				throw new InvalidOperationException( String.Format( CultureInfo.CurrentCulture' "This context is already bounded to '{0}'(Socket: 0x{1:X})."' transport.GetType()' transport.BoundSocket == null ? 0 : transport.BoundSocket.GetHashCode() ) ); " is 239.
Long Statement,MsgPack.Rpc.Protocols,InboundMessageContext,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\Protocols\InboundMessageContext.cs,ShiftCurrentReceivingBuffer,The length of the statement  "			this.SocketContext.SetBuffer( this._currentReceivingBuffer' this._currentReceivingBufferOffset' this._currentReceivingBuffer.Length - this._currentReceivingBufferOffset ); " is 171.
Complex Conditional,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,ToString,The conditional expression  "( !includesDebugInformation || this._remoteExceptions == null ) && ( this._preservedStackTrace == null || this._preservedStackTrace.Count == 0 )"  is complex.
Empty Catch Block,MsgPack.Rpc,RpcApplicationContext,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcApplicationContext.cs,OnHardTimeout,The method has an empty catch block.
Empty Catch Block,MsgPack.Rpc,RpcApplicationContext,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcApplicationContext.cs,OnHardTimeout,The method has an empty catch block.
Empty Catch Block,MsgPack.Rpc,RpcApplicationContext,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcApplicationContext.cs,DoHardTimeout,The method has an empty catch block.
Empty Catch Block,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,SafeGetHRFromException,The method has an empty catch block.
Empty Catch Block,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,SafeGetHRFromException,The method has an empty catch block.
Empty Catch Block,MsgPack.Rpc.Diagnostics,FileMessagePackStreamLogger,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\Diagnostics\FileMessagePackStreamLogger.cs,Write,The method has an empty catch block.
Empty Catch Block,MsgPack.Rpc.Diagnostics,IsolatedStorageFileMessagePackStreamLogger,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\Diagnostics\IsolatedStorageFileMessagePackStreamLogger.cs,Write,The method has an empty catch block.
Empty Catch Block,MsgPack.Rpc.Protocols,InboundMessageContext,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\Protocols\InboundMessageContext.cs,ClearBuffers,The method has an empty catch block.
Empty Catch Block,MsgPack.Rpc.Protocols,InboundMessageContext,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\Protocols\InboundMessageContext.cs,ClearBuffers,The method has an empty catch block.
Magic Number,MsgPack.Rpc,ObjectPoolConfiguration,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\ObjectPoolConfiguration.cs,ResetEvitionInterval,The following statement contains a magic number: this._evitionInterval = TimeSpan.FromMinutes( 3 );
Magic Number,MsgPack.Rpc,ObjectPoolConfiguration,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\ObjectPoolConfiguration.cs,ToString,The following statement contains a magic number: var buffer = new StringBuilder( 256 );
Magic Number,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,GetExceptionMessage,The following statement contains a magic number: var store = new MessagePackObjectDictionary( 2 );
Magic Number,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,GetExceptionMessage,The following statement contains a magic number: if ( this.InnerException != null || this._remoteExceptions != null )  			{  				var innerList = new List<MessagePackObject>();  				if ( this._remoteExceptions != null )  				{  					foreach ( var remoteException in this._remoteExceptions )  					{  						MessagePackObject[] properties = new MessagePackObject[ 6 ];  						properties[ 0 ] = remoteException.Hop + 1;  						properties[ 1 ] = MessagePackConvert.EncodeString( remoteException.TypeName );  						// HResult is significant for some exception (e.g. IOException).  						properties[ 2 ] = remoteException.HResult;  						properties[ 3 ] = MessagePackConvert.EncodeString( remoteException.Message );  						properties[ 4 ] =  #if !SILVERLIGHT  							Array.ConvertAll(  #else  							ArrayExtensions.ConvertAll(  #endif  								remoteException.StackTrace'  								frame =>  									frame.FileName == null  									? new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset } )  									: new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset' frame.FileName' frame.FileLineNumber' frame.FileColumnNumber } )  							);  						properties[ 5 ] = new MessagePackObject( remoteException.Data );  						innerList.Add( properties );  					}  				}    				for ( var inner = this.InnerException; inner != null; inner = inner.InnerException )  				{  					MessagePackObject[] properties = new MessagePackObject[ 6 ];  					properties[ 0 ] = 0;  					properties[ 1 ] = MessagePackConvert.EncodeString( inner.GetType().FullName );  					// HResult is significant for some exception (e.g. IOException).  					properties[ 2 ] = SafeGetHRFromException( inner );  					properties[ 3 ] = MessagePackConvert.EncodeString( inner.Message );    					// stack trace  					var innerStackTrace =   #if !SILVERLIGHT  						new StackTrace( inner' true );  #else  						new StackTrace( inner );  #endif  					var frames = new MessagePackObject[ innerStackTrace.FrameCount ];  					for ( int i = 0; i < frames.Length; i++ )  					{  						var frame = innerStackTrace.GetFrame( innerStackTrace.FrameCount - ( i + 1 ) );  #if !SILVERLIGHT  						if ( frame.GetFileName() == null )  						{  #endif  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset() };  #if !SILVERLIGHT  						}  						else  						{  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset()' frame.GetFileName()' frame.GetFileLineNumber()' frame.GetFileColumnNumber() };  						}  #endif  					}  					properties[ 4 ] = new MessagePackObject( frames );    					// data  					if ( inner.Data != null && inner.Data.Count > 0 )  					{  						var data = new MessagePackObjectDictionary( inner.Data.Count );  						foreach ( System.Collections.DictionaryEntry entry in inner.Data )  						{  							data.Add( MessagePackObject.FromObject( entry.Key )' MessagePackObject.FromObject( entry.Value ) );  						}    						properties[ 5 ] = new MessagePackObject( data );  					}    					innerList.Add( properties );  				}    				store.Add( _remoteExceptionsUtf8' new MessagePackObject( innerList ) );  			}
Magic Number,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,GetExceptionMessage,The following statement contains a magic number: if ( this.InnerException != null || this._remoteExceptions != null )  			{  				var innerList = new List<MessagePackObject>();  				if ( this._remoteExceptions != null )  				{  					foreach ( var remoteException in this._remoteExceptions )  					{  						MessagePackObject[] properties = new MessagePackObject[ 6 ];  						properties[ 0 ] = remoteException.Hop + 1;  						properties[ 1 ] = MessagePackConvert.EncodeString( remoteException.TypeName );  						// HResult is significant for some exception (e.g. IOException).  						properties[ 2 ] = remoteException.HResult;  						properties[ 3 ] = MessagePackConvert.EncodeString( remoteException.Message );  						properties[ 4 ] =  #if !SILVERLIGHT  							Array.ConvertAll(  #else  							ArrayExtensions.ConvertAll(  #endif  								remoteException.StackTrace'  								frame =>  									frame.FileName == null  									? new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset } )  									: new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset' frame.FileName' frame.FileLineNumber' frame.FileColumnNumber } )  							);  						properties[ 5 ] = new MessagePackObject( remoteException.Data );  						innerList.Add( properties );  					}  				}    				for ( var inner = this.InnerException; inner != null; inner = inner.InnerException )  				{  					MessagePackObject[] properties = new MessagePackObject[ 6 ];  					properties[ 0 ] = 0;  					properties[ 1 ] = MessagePackConvert.EncodeString( inner.GetType().FullName );  					// HResult is significant for some exception (e.g. IOException).  					properties[ 2 ] = SafeGetHRFromException( inner );  					properties[ 3 ] = MessagePackConvert.EncodeString( inner.Message );    					// stack trace  					var innerStackTrace =   #if !SILVERLIGHT  						new StackTrace( inner' true );  #else  						new StackTrace( inner );  #endif  					var frames = new MessagePackObject[ innerStackTrace.FrameCount ];  					for ( int i = 0; i < frames.Length; i++ )  					{  						var frame = innerStackTrace.GetFrame( innerStackTrace.FrameCount - ( i + 1 ) );  #if !SILVERLIGHT  						if ( frame.GetFileName() == null )  						{  #endif  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset() };  #if !SILVERLIGHT  						}  						else  						{  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset()' frame.GetFileName()' frame.GetFileLineNumber()' frame.GetFileColumnNumber() };  						}  #endif  					}  					properties[ 4 ] = new MessagePackObject( frames );    					// data  					if ( inner.Data != null && inner.Data.Count > 0 )  					{  						var data = new MessagePackObjectDictionary( inner.Data.Count );  						foreach ( System.Collections.DictionaryEntry entry in inner.Data )  						{  							data.Add( MessagePackObject.FromObject( entry.Key )' MessagePackObject.FromObject( entry.Value ) );  						}    						properties[ 5 ] = new MessagePackObject( data );  					}    					innerList.Add( properties );  				}    				store.Add( _remoteExceptionsUtf8' new MessagePackObject( innerList ) );  			}
Magic Number,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,GetExceptionMessage,The following statement contains a magic number: if ( this.InnerException != null || this._remoteExceptions != null )  			{  				var innerList = new List<MessagePackObject>();  				if ( this._remoteExceptions != null )  				{  					foreach ( var remoteException in this._remoteExceptions )  					{  						MessagePackObject[] properties = new MessagePackObject[ 6 ];  						properties[ 0 ] = remoteException.Hop + 1;  						properties[ 1 ] = MessagePackConvert.EncodeString( remoteException.TypeName );  						// HResult is significant for some exception (e.g. IOException).  						properties[ 2 ] = remoteException.HResult;  						properties[ 3 ] = MessagePackConvert.EncodeString( remoteException.Message );  						properties[ 4 ] =  #if !SILVERLIGHT  							Array.ConvertAll(  #else  							ArrayExtensions.ConvertAll(  #endif  								remoteException.StackTrace'  								frame =>  									frame.FileName == null  									? new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset } )  									: new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset' frame.FileName' frame.FileLineNumber' frame.FileColumnNumber } )  							);  						properties[ 5 ] = new MessagePackObject( remoteException.Data );  						innerList.Add( properties );  					}  				}    				for ( var inner = this.InnerException; inner != null; inner = inner.InnerException )  				{  					MessagePackObject[] properties = new MessagePackObject[ 6 ];  					properties[ 0 ] = 0;  					properties[ 1 ] = MessagePackConvert.EncodeString( inner.GetType().FullName );  					// HResult is significant for some exception (e.g. IOException).  					properties[ 2 ] = SafeGetHRFromException( inner );  					properties[ 3 ] = MessagePackConvert.EncodeString( inner.Message );    					// stack trace  					var innerStackTrace =   #if !SILVERLIGHT  						new StackTrace( inner' true );  #else  						new StackTrace( inner );  #endif  					var frames = new MessagePackObject[ innerStackTrace.FrameCount ];  					for ( int i = 0; i < frames.Length; i++ )  					{  						var frame = innerStackTrace.GetFrame( innerStackTrace.FrameCount - ( i + 1 ) );  #if !SILVERLIGHT  						if ( frame.GetFileName() == null )  						{  #endif  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset() };  #if !SILVERLIGHT  						}  						else  						{  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset()' frame.GetFileName()' frame.GetFileLineNumber()' frame.GetFileColumnNumber() };  						}  #endif  					}  					properties[ 4 ] = new MessagePackObject( frames );    					// data  					if ( inner.Data != null && inner.Data.Count > 0 )  					{  						var data = new MessagePackObjectDictionary( inner.Data.Count );  						foreach ( System.Collections.DictionaryEntry entry in inner.Data )  						{  							data.Add( MessagePackObject.FromObject( entry.Key )' MessagePackObject.FromObject( entry.Value ) );  						}    						properties[ 5 ] = new MessagePackObject( data );  					}    					innerList.Add( properties );  				}    				store.Add( _remoteExceptionsUtf8' new MessagePackObject( innerList ) );  			}
Magic Number,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,GetExceptionMessage,The following statement contains a magic number: if ( this.InnerException != null || this._remoteExceptions != null )  			{  				var innerList = new List<MessagePackObject>();  				if ( this._remoteExceptions != null )  				{  					foreach ( var remoteException in this._remoteExceptions )  					{  						MessagePackObject[] properties = new MessagePackObject[ 6 ];  						properties[ 0 ] = remoteException.Hop + 1;  						properties[ 1 ] = MessagePackConvert.EncodeString( remoteException.TypeName );  						// HResult is significant for some exception (e.g. IOException).  						properties[ 2 ] = remoteException.HResult;  						properties[ 3 ] = MessagePackConvert.EncodeString( remoteException.Message );  						properties[ 4 ] =  #if !SILVERLIGHT  							Array.ConvertAll(  #else  							ArrayExtensions.ConvertAll(  #endif  								remoteException.StackTrace'  								frame =>  									frame.FileName == null  									? new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset } )  									: new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset' frame.FileName' frame.FileLineNumber' frame.FileColumnNumber } )  							);  						properties[ 5 ] = new MessagePackObject( remoteException.Data );  						innerList.Add( properties );  					}  				}    				for ( var inner = this.InnerException; inner != null; inner = inner.InnerException )  				{  					MessagePackObject[] properties = new MessagePackObject[ 6 ];  					properties[ 0 ] = 0;  					properties[ 1 ] = MessagePackConvert.EncodeString( inner.GetType().FullName );  					// HResult is significant for some exception (e.g. IOException).  					properties[ 2 ] = SafeGetHRFromException( inner );  					properties[ 3 ] = MessagePackConvert.EncodeString( inner.Message );    					// stack trace  					var innerStackTrace =   #if !SILVERLIGHT  						new StackTrace( inner' true );  #else  						new StackTrace( inner );  #endif  					var frames = new MessagePackObject[ innerStackTrace.FrameCount ];  					for ( int i = 0; i < frames.Length; i++ )  					{  						var frame = innerStackTrace.GetFrame( innerStackTrace.FrameCount - ( i + 1 ) );  #if !SILVERLIGHT  						if ( frame.GetFileName() == null )  						{  #endif  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset() };  #if !SILVERLIGHT  						}  						else  						{  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset()' frame.GetFileName()' frame.GetFileLineNumber()' frame.GetFileColumnNumber() };  						}  #endif  					}  					properties[ 4 ] = new MessagePackObject( frames );    					// data  					if ( inner.Data != null && inner.Data.Count > 0 )  					{  						var data = new MessagePackObjectDictionary( inner.Data.Count );  						foreach ( System.Collections.DictionaryEntry entry in inner.Data )  						{  							data.Add( MessagePackObject.FromObject( entry.Key )' MessagePackObject.FromObject( entry.Value ) );  						}    						properties[ 5 ] = new MessagePackObject( data );  					}    					innerList.Add( properties );  				}    				store.Add( _remoteExceptionsUtf8' new MessagePackObject( innerList ) );  			}
Magic Number,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,GetExceptionMessage,The following statement contains a magic number: if ( this.InnerException != null || this._remoteExceptions != null )  			{  				var innerList = new List<MessagePackObject>();  				if ( this._remoteExceptions != null )  				{  					foreach ( var remoteException in this._remoteExceptions )  					{  						MessagePackObject[] properties = new MessagePackObject[ 6 ];  						properties[ 0 ] = remoteException.Hop + 1;  						properties[ 1 ] = MessagePackConvert.EncodeString( remoteException.TypeName );  						// HResult is significant for some exception (e.g. IOException).  						properties[ 2 ] = remoteException.HResult;  						properties[ 3 ] = MessagePackConvert.EncodeString( remoteException.Message );  						properties[ 4 ] =  #if !SILVERLIGHT  							Array.ConvertAll(  #else  							ArrayExtensions.ConvertAll(  #endif  								remoteException.StackTrace'  								frame =>  									frame.FileName == null  									? new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset } )  									: new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset' frame.FileName' frame.FileLineNumber' frame.FileColumnNumber } )  							);  						properties[ 5 ] = new MessagePackObject( remoteException.Data );  						innerList.Add( properties );  					}  				}    				for ( var inner = this.InnerException; inner != null; inner = inner.InnerException )  				{  					MessagePackObject[] properties = new MessagePackObject[ 6 ];  					properties[ 0 ] = 0;  					properties[ 1 ] = MessagePackConvert.EncodeString( inner.GetType().FullName );  					// HResult is significant for some exception (e.g. IOException).  					properties[ 2 ] = SafeGetHRFromException( inner );  					properties[ 3 ] = MessagePackConvert.EncodeString( inner.Message );    					// stack trace  					var innerStackTrace =   #if !SILVERLIGHT  						new StackTrace( inner' true );  #else  						new StackTrace( inner );  #endif  					var frames = new MessagePackObject[ innerStackTrace.FrameCount ];  					for ( int i = 0; i < frames.Length; i++ )  					{  						var frame = innerStackTrace.GetFrame( innerStackTrace.FrameCount - ( i + 1 ) );  #if !SILVERLIGHT  						if ( frame.GetFileName() == null )  						{  #endif  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset() };  #if !SILVERLIGHT  						}  						else  						{  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset()' frame.GetFileName()' frame.GetFileLineNumber()' frame.GetFileColumnNumber() };  						}  #endif  					}  					properties[ 4 ] = new MessagePackObject( frames );    					// data  					if ( inner.Data != null && inner.Data.Count > 0 )  					{  						var data = new MessagePackObjectDictionary( inner.Data.Count );  						foreach ( System.Collections.DictionaryEntry entry in inner.Data )  						{  							data.Add( MessagePackObject.FromObject( entry.Key )' MessagePackObject.FromObject( entry.Value ) );  						}    						properties[ 5 ] = new MessagePackObject( data );  					}    					innerList.Add( properties );  				}    				store.Add( _remoteExceptionsUtf8' new MessagePackObject( innerList ) );  			}
Magic Number,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,GetExceptionMessage,The following statement contains a magic number: if ( this.InnerException != null || this._remoteExceptions != null )  			{  				var innerList = new List<MessagePackObject>();  				if ( this._remoteExceptions != null )  				{  					foreach ( var remoteException in this._remoteExceptions )  					{  						MessagePackObject[] properties = new MessagePackObject[ 6 ];  						properties[ 0 ] = remoteException.Hop + 1;  						properties[ 1 ] = MessagePackConvert.EncodeString( remoteException.TypeName );  						// HResult is significant for some exception (e.g. IOException).  						properties[ 2 ] = remoteException.HResult;  						properties[ 3 ] = MessagePackConvert.EncodeString( remoteException.Message );  						properties[ 4 ] =  #if !SILVERLIGHT  							Array.ConvertAll(  #else  							ArrayExtensions.ConvertAll(  #endif  								remoteException.StackTrace'  								frame =>  									frame.FileName == null  									? new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset } )  									: new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset' frame.FileName' frame.FileLineNumber' frame.FileColumnNumber } )  							);  						properties[ 5 ] = new MessagePackObject( remoteException.Data );  						innerList.Add( properties );  					}  				}    				for ( var inner = this.InnerException; inner != null; inner = inner.InnerException )  				{  					MessagePackObject[] properties = new MessagePackObject[ 6 ];  					properties[ 0 ] = 0;  					properties[ 1 ] = MessagePackConvert.EncodeString( inner.GetType().FullName );  					// HResult is significant for some exception (e.g. IOException).  					properties[ 2 ] = SafeGetHRFromException( inner );  					properties[ 3 ] = MessagePackConvert.EncodeString( inner.Message );    					// stack trace  					var innerStackTrace =   #if !SILVERLIGHT  						new StackTrace( inner' true );  #else  						new StackTrace( inner );  #endif  					var frames = new MessagePackObject[ innerStackTrace.FrameCount ];  					for ( int i = 0; i < frames.Length; i++ )  					{  						var frame = innerStackTrace.GetFrame( innerStackTrace.FrameCount - ( i + 1 ) );  #if !SILVERLIGHT  						if ( frame.GetFileName() == null )  						{  #endif  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset() };  #if !SILVERLIGHT  						}  						else  						{  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset()' frame.GetFileName()' frame.GetFileLineNumber()' frame.GetFileColumnNumber() };  						}  #endif  					}  					properties[ 4 ] = new MessagePackObject( frames );    					// data  					if ( inner.Data != null && inner.Data.Count > 0 )  					{  						var data = new MessagePackObjectDictionary( inner.Data.Count );  						foreach ( System.Collections.DictionaryEntry entry in inner.Data )  						{  							data.Add( MessagePackObject.FromObject( entry.Key )' MessagePackObject.FromObject( entry.Value ) );  						}    						properties[ 5 ] = new MessagePackObject( data );  					}    					innerList.Add( properties );  				}    				store.Add( _remoteExceptionsUtf8' new MessagePackObject( innerList ) );  			}
Magic Number,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,GetExceptionMessage,The following statement contains a magic number: if ( this.InnerException != null || this._remoteExceptions != null )  			{  				var innerList = new List<MessagePackObject>();  				if ( this._remoteExceptions != null )  				{  					foreach ( var remoteException in this._remoteExceptions )  					{  						MessagePackObject[] properties = new MessagePackObject[ 6 ];  						properties[ 0 ] = remoteException.Hop + 1;  						properties[ 1 ] = MessagePackConvert.EncodeString( remoteException.TypeName );  						// HResult is significant for some exception (e.g. IOException).  						properties[ 2 ] = remoteException.HResult;  						properties[ 3 ] = MessagePackConvert.EncodeString( remoteException.Message );  						properties[ 4 ] =  #if !SILVERLIGHT  							Array.ConvertAll(  #else  							ArrayExtensions.ConvertAll(  #endif  								remoteException.StackTrace'  								frame =>  									frame.FileName == null  									? new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset } )  									: new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset' frame.FileName' frame.FileLineNumber' frame.FileColumnNumber } )  							);  						properties[ 5 ] = new MessagePackObject( remoteException.Data );  						innerList.Add( properties );  					}  				}    				for ( var inner = this.InnerException; inner != null; inner = inner.InnerException )  				{  					MessagePackObject[] properties = new MessagePackObject[ 6 ];  					properties[ 0 ] = 0;  					properties[ 1 ] = MessagePackConvert.EncodeString( inner.GetType().FullName );  					// HResult is significant for some exception (e.g. IOException).  					properties[ 2 ] = SafeGetHRFromException( inner );  					properties[ 3 ] = MessagePackConvert.EncodeString( inner.Message );    					// stack trace  					var innerStackTrace =   #if !SILVERLIGHT  						new StackTrace( inner' true );  #else  						new StackTrace( inner );  #endif  					var frames = new MessagePackObject[ innerStackTrace.FrameCount ];  					for ( int i = 0; i < frames.Length; i++ )  					{  						var frame = innerStackTrace.GetFrame( innerStackTrace.FrameCount - ( i + 1 ) );  #if !SILVERLIGHT  						if ( frame.GetFileName() == null )  						{  #endif  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset() };  #if !SILVERLIGHT  						}  						else  						{  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset()' frame.GetFileName()' frame.GetFileLineNumber()' frame.GetFileColumnNumber() };  						}  #endif  					}  					properties[ 4 ] = new MessagePackObject( frames );    					// data  					if ( inner.Data != null && inner.Data.Count > 0 )  					{  						var data = new MessagePackObjectDictionary( inner.Data.Count );  						foreach ( System.Collections.DictionaryEntry entry in inner.Data )  						{  							data.Add( MessagePackObject.FromObject( entry.Key )' MessagePackObject.FromObject( entry.Value ) );  						}    						properties[ 5 ] = new MessagePackObject( data );  					}    					innerList.Add( properties );  				}    				store.Add( _remoteExceptionsUtf8' new MessagePackObject( innerList ) );  			}
Magic Number,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,GetExceptionMessage,The following statement contains a magic number: if ( this.InnerException != null || this._remoteExceptions != null )  			{  				var innerList = new List<MessagePackObject>();  				if ( this._remoteExceptions != null )  				{  					foreach ( var remoteException in this._remoteExceptions )  					{  						MessagePackObject[] properties = new MessagePackObject[ 6 ];  						properties[ 0 ] = remoteException.Hop + 1;  						properties[ 1 ] = MessagePackConvert.EncodeString( remoteException.TypeName );  						// HResult is significant for some exception (e.g. IOException).  						properties[ 2 ] = remoteException.HResult;  						properties[ 3 ] = MessagePackConvert.EncodeString( remoteException.Message );  						properties[ 4 ] =  #if !SILVERLIGHT  							Array.ConvertAll(  #else  							ArrayExtensions.ConvertAll(  #endif  								remoteException.StackTrace'  								frame =>  									frame.FileName == null  									? new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset } )  									: new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset' frame.FileName' frame.FileLineNumber' frame.FileColumnNumber } )  							);  						properties[ 5 ] = new MessagePackObject( remoteException.Data );  						innerList.Add( properties );  					}  				}    				for ( var inner = this.InnerException; inner != null; inner = inner.InnerException )  				{  					MessagePackObject[] properties = new MessagePackObject[ 6 ];  					properties[ 0 ] = 0;  					properties[ 1 ] = MessagePackConvert.EncodeString( inner.GetType().FullName );  					// HResult is significant for some exception (e.g. IOException).  					properties[ 2 ] = SafeGetHRFromException( inner );  					properties[ 3 ] = MessagePackConvert.EncodeString( inner.Message );    					// stack trace  					var innerStackTrace =   #if !SILVERLIGHT  						new StackTrace( inner' true );  #else  						new StackTrace( inner );  #endif  					var frames = new MessagePackObject[ innerStackTrace.FrameCount ];  					for ( int i = 0; i < frames.Length; i++ )  					{  						var frame = innerStackTrace.GetFrame( innerStackTrace.FrameCount - ( i + 1 ) );  #if !SILVERLIGHT  						if ( frame.GetFileName() == null )  						{  #endif  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset() };  #if !SILVERLIGHT  						}  						else  						{  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset()' frame.GetFileName()' frame.GetFileLineNumber()' frame.GetFileColumnNumber() };  						}  #endif  					}  					properties[ 4 ] = new MessagePackObject( frames );    					// data  					if ( inner.Data != null && inner.Data.Count > 0 )  					{  						var data = new MessagePackObjectDictionary( inner.Data.Count );  						foreach ( System.Collections.DictionaryEntry entry in inner.Data )  						{  							data.Add( MessagePackObject.FromObject( entry.Key )' MessagePackObject.FromObject( entry.Value ) );  						}    						properties[ 5 ] = new MessagePackObject( data );  					}    					innerList.Add( properties );  				}    				store.Add( _remoteExceptionsUtf8' new MessagePackObject( innerList ) );  			}
Magic Number,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,GetExceptionMessage,The following statement contains a magic number: if ( this.InnerException != null || this._remoteExceptions != null )  			{  				var innerList = new List<MessagePackObject>();  				if ( this._remoteExceptions != null )  				{  					foreach ( var remoteException in this._remoteExceptions )  					{  						MessagePackObject[] properties = new MessagePackObject[ 6 ];  						properties[ 0 ] = remoteException.Hop + 1;  						properties[ 1 ] = MessagePackConvert.EncodeString( remoteException.TypeName );  						// HResult is significant for some exception (e.g. IOException).  						properties[ 2 ] = remoteException.HResult;  						properties[ 3 ] = MessagePackConvert.EncodeString( remoteException.Message );  						properties[ 4 ] =  #if !SILVERLIGHT  							Array.ConvertAll(  #else  							ArrayExtensions.ConvertAll(  #endif  								remoteException.StackTrace'  								frame =>  									frame.FileName == null  									? new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset } )  									: new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset' frame.FileName' frame.FileLineNumber' frame.FileColumnNumber } )  							);  						properties[ 5 ] = new MessagePackObject( remoteException.Data );  						innerList.Add( properties );  					}  				}    				for ( var inner = this.InnerException; inner != null; inner = inner.InnerException )  				{  					MessagePackObject[] properties = new MessagePackObject[ 6 ];  					properties[ 0 ] = 0;  					properties[ 1 ] = MessagePackConvert.EncodeString( inner.GetType().FullName );  					// HResult is significant for some exception (e.g. IOException).  					properties[ 2 ] = SafeGetHRFromException( inner );  					properties[ 3 ] = MessagePackConvert.EncodeString( inner.Message );    					// stack trace  					var innerStackTrace =   #if !SILVERLIGHT  						new StackTrace( inner' true );  #else  						new StackTrace( inner );  #endif  					var frames = new MessagePackObject[ innerStackTrace.FrameCount ];  					for ( int i = 0; i < frames.Length; i++ )  					{  						var frame = innerStackTrace.GetFrame( innerStackTrace.FrameCount - ( i + 1 ) );  #if !SILVERLIGHT  						if ( frame.GetFileName() == null )  						{  #endif  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset() };  #if !SILVERLIGHT  						}  						else  						{  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset()' frame.GetFileName()' frame.GetFileLineNumber()' frame.GetFileColumnNumber() };  						}  #endif  					}  					properties[ 4 ] = new MessagePackObject( frames );    					// data  					if ( inner.Data != null && inner.Data.Count > 0 )  					{  						var data = new MessagePackObjectDictionary( inner.Data.Count );  						foreach ( System.Collections.DictionaryEntry entry in inner.Data )  						{  							data.Add( MessagePackObject.FromObject( entry.Key )' MessagePackObject.FromObject( entry.Value ) );  						}    						properties[ 5 ] = new MessagePackObject( data );  					}    					innerList.Add( properties );  				}    				store.Add( _remoteExceptionsUtf8' new MessagePackObject( innerList ) );  			}
Magic Number,MsgPack.Rpc,RpcException,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.PreserveStackTrace.cs,GetExceptionMessage,The following statement contains a magic number: if ( this.InnerException != null || this._remoteExceptions != null )  			{  				var innerList = new List<MessagePackObject>();  				if ( this._remoteExceptions != null )  				{  					foreach ( var remoteException in this._remoteExceptions )  					{  						MessagePackObject[] properties = new MessagePackObject[ 6 ];  						properties[ 0 ] = remoteException.Hop + 1;  						properties[ 1 ] = MessagePackConvert.EncodeString( remoteException.TypeName );  						// HResult is significant for some exception (e.g. IOException).  						properties[ 2 ] = remoteException.HResult;  						properties[ 3 ] = MessagePackConvert.EncodeString( remoteException.Message );  						properties[ 4 ] =  #if !SILVERLIGHT  							Array.ConvertAll(  #else  							ArrayExtensions.ConvertAll(  #endif  								remoteException.StackTrace'  								frame =>  									frame.FileName == null  									? new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset } )  									: new MessagePackObject( new MessagePackObject[] { frame.MethodSignature' frame.ILOffset' frame.NativeOffset' frame.FileName' frame.FileLineNumber' frame.FileColumnNumber } )  							);  						properties[ 5 ] = new MessagePackObject( remoteException.Data );  						innerList.Add( properties );  					}  				}    				for ( var inner = this.InnerException; inner != null; inner = inner.InnerException )  				{  					MessagePackObject[] properties = new MessagePackObject[ 6 ];  					properties[ 0 ] = 0;  					properties[ 1 ] = MessagePackConvert.EncodeString( inner.GetType().FullName );  					// HResult is significant for some exception (e.g. IOException).  					properties[ 2 ] = SafeGetHRFromException( inner );  					properties[ 3 ] = MessagePackConvert.EncodeString( inner.Message );    					// stack trace  					var innerStackTrace =   #if !SILVERLIGHT  						new StackTrace( inner' true );  #else  						new StackTrace( inner );  #endif  					var frames = new MessagePackObject[ innerStackTrace.FrameCount ];  					for ( int i = 0; i < frames.Length; i++ )  					{  						var frame = innerStackTrace.GetFrame( innerStackTrace.FrameCount - ( i + 1 ) );  #if !SILVERLIGHT  						if ( frame.GetFileName() == null )  						{  #endif  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset() };  #if !SILVERLIGHT  						}  						else  						{  							frames[ i ] = new MessagePackObject[] { ToStackFrameMethodSignature( frame.GetMethod() )' frame.GetILOffset()' frame.GetNativeOffset()' frame.GetFileName()' frame.GetFileLineNumber()' frame.GetFileColumnNumber() };  						}  #endif  					}  					properties[ 4 ] = new MessagePackObject( frames );    					// data  					if ( inner.Data != null && inner.Data.Count > 0 )  					{  						var data = new MessagePackObjectDictionary( inner.Data.Count );  						foreach ( System.Collections.DictionaryEntry entry in inner.Data )  						{  							data.Add( MessagePackObject.FromObject( entry.Key )' MessagePackObject.FromObject( entry.Value ) );  						}    						properties[ 5 ] = new MessagePackObject( data );  					}    					innerList.Add( properties );  				}    				store.Add( _remoteExceptionsUtf8' new MessagePackObject( innerList ) );  			}
Magic Number,MsgPack.Rpc,RpcErrorMessage,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcErrorMessage.cs,RpcErrorMessage,The following statement contains a magic number: var data = new MessagePackObjectDictionary( 2 );
Magic Number,MsgPack.Rpc,RemoteExceptionInformation,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.Propagation.cs,RemoteExceptionInformation,The following statement contains a magic number: if ( unpacked.Count != 6 )  				{  					throw new SerializationException( "Count of remote exception information must be 6." );  				}
Magic Number,MsgPack.Rpc,RemoteExceptionInformation,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.Propagation.cs,RemoteExceptionInformation,The following statement contains a magic number: this.HResult = unpacked[ 2 ].AsInt32();
Magic Number,MsgPack.Rpc,RemoteExceptionInformation,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.Propagation.cs,RemoteExceptionInformation,The following statement contains a magic number: this.Message = unpacked[ 3 ].AsString();
Magic Number,MsgPack.Rpc,RemoteExceptionInformation,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.Propagation.cs,RemoteExceptionInformation,The following statement contains a magic number: this.StackTrace = unpacked[ 4 ].AsList().Select( item => new RemoteStackFrame( item.AsList() ) ).ToArray();
Magic Number,MsgPack.Rpc,RemoteExceptionInformation,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.Propagation.cs,RemoteExceptionInformation,The following statement contains a magic number: this.Data = unpacked[ 5 ].AsDictionary();
Magic Number,MsgPack.Rpc,RemoteStackFrame,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.Propagation.cs,RemoteStackFrame,The following statement contains a magic number: switch ( unpacked.Count )  				{  					case 3:  					{  						this.MethodSignature = unpacked[ 0 ].AsString();  						this.ILOffset = unpacked[ 1 ].AsInt32();  						this.NativeOffset = unpacked[ 2 ].AsInt32();  						this.FileName = null;  						this.FileLineNumber = 0;  						this.FileColumnNumber = 0;  						break;  					}  					case 6:  					{  						this.MethodSignature = unpacked[ 0 ].AsString();  						this.ILOffset = unpacked[ 1 ].AsInt32();  						this.NativeOffset = unpacked[ 2 ].AsInt32();  						this.FileName = unpacked[ 3 ].AsString();  						this.FileLineNumber = unpacked[ 4 ].AsInt32();  						this.FileColumnNumber = unpacked[ 5 ].AsInt32();  						break;  					}  					default:  					{  						throw new SerializationException( "Count of remote stack frames must be 3 or 6." );  					}  				}
Magic Number,MsgPack.Rpc,RemoteStackFrame,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.Propagation.cs,RemoteStackFrame,The following statement contains a magic number: switch ( unpacked.Count )  				{  					case 3:  					{  						this.MethodSignature = unpacked[ 0 ].AsString();  						this.ILOffset = unpacked[ 1 ].AsInt32();  						this.NativeOffset = unpacked[ 2 ].AsInt32();  						this.FileName = null;  						this.FileLineNumber = 0;  						this.FileColumnNumber = 0;  						break;  					}  					case 6:  					{  						this.MethodSignature = unpacked[ 0 ].AsString();  						this.ILOffset = unpacked[ 1 ].AsInt32();  						this.NativeOffset = unpacked[ 2 ].AsInt32();  						this.FileName = unpacked[ 3 ].AsString();  						this.FileLineNumber = unpacked[ 4 ].AsInt32();  						this.FileColumnNumber = unpacked[ 5 ].AsInt32();  						break;  					}  					default:  					{  						throw new SerializationException( "Count of remote stack frames must be 3 or 6." );  					}  				}
Magic Number,MsgPack.Rpc,RemoteStackFrame,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.Propagation.cs,RemoteStackFrame,The following statement contains a magic number: switch ( unpacked.Count )  				{  					case 3:  					{  						this.MethodSignature = unpacked[ 0 ].AsString();  						this.ILOffset = unpacked[ 1 ].AsInt32();  						this.NativeOffset = unpacked[ 2 ].AsInt32();  						this.FileName = null;  						this.FileLineNumber = 0;  						this.FileColumnNumber = 0;  						break;  					}  					case 6:  					{  						this.MethodSignature = unpacked[ 0 ].AsString();  						this.ILOffset = unpacked[ 1 ].AsInt32();  						this.NativeOffset = unpacked[ 2 ].AsInt32();  						this.FileName = unpacked[ 3 ].AsString();  						this.FileLineNumber = unpacked[ 4 ].AsInt32();  						this.FileColumnNumber = unpacked[ 5 ].AsInt32();  						break;  					}  					default:  					{  						throw new SerializationException( "Count of remote stack frames must be 3 or 6." );  					}  				}
Magic Number,MsgPack.Rpc,RemoteStackFrame,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.Propagation.cs,RemoteStackFrame,The following statement contains a magic number: switch ( unpacked.Count )  				{  					case 3:  					{  						this.MethodSignature = unpacked[ 0 ].AsString();  						this.ILOffset = unpacked[ 1 ].AsInt32();  						this.NativeOffset = unpacked[ 2 ].AsInt32();  						this.FileName = null;  						this.FileLineNumber = 0;  						this.FileColumnNumber = 0;  						break;  					}  					case 6:  					{  						this.MethodSignature = unpacked[ 0 ].AsString();  						this.ILOffset = unpacked[ 1 ].AsInt32();  						this.NativeOffset = unpacked[ 2 ].AsInt32();  						this.FileName = unpacked[ 3 ].AsString();  						this.FileLineNumber = unpacked[ 4 ].AsInt32();  						this.FileColumnNumber = unpacked[ 5 ].AsInt32();  						break;  					}  					default:  					{  						throw new SerializationException( "Count of remote stack frames must be 3 or 6." );  					}  				}
Magic Number,MsgPack.Rpc,RemoteStackFrame,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.Propagation.cs,RemoteStackFrame,The following statement contains a magic number: switch ( unpacked.Count )  				{  					case 3:  					{  						this.MethodSignature = unpacked[ 0 ].AsString();  						this.ILOffset = unpacked[ 1 ].AsInt32();  						this.NativeOffset = unpacked[ 2 ].AsInt32();  						this.FileName = null;  						this.FileLineNumber = 0;  						this.FileColumnNumber = 0;  						break;  					}  					case 6:  					{  						this.MethodSignature = unpacked[ 0 ].AsString();  						this.ILOffset = unpacked[ 1 ].AsInt32();  						this.NativeOffset = unpacked[ 2 ].AsInt32();  						this.FileName = unpacked[ 3 ].AsString();  						this.FileLineNumber = unpacked[ 4 ].AsInt32();  						this.FileColumnNumber = unpacked[ 5 ].AsInt32();  						break;  					}  					default:  					{  						throw new SerializationException( "Count of remote stack frames must be 3 or 6." );  					}  				}
Magic Number,MsgPack.Rpc,RemoteStackFrame,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.Propagation.cs,RemoteStackFrame,The following statement contains a magic number: switch ( unpacked.Count )  				{  					case 3:  					{  						this.MethodSignature = unpacked[ 0 ].AsString();  						this.ILOffset = unpacked[ 1 ].AsInt32();  						this.NativeOffset = unpacked[ 2 ].AsInt32();  						this.FileName = null;  						this.FileLineNumber = 0;  						this.FileColumnNumber = 0;  						break;  					}  					case 6:  					{  						this.MethodSignature = unpacked[ 0 ].AsString();  						this.ILOffset = unpacked[ 1 ].AsInt32();  						this.NativeOffset = unpacked[ 2 ].AsInt32();  						this.FileName = unpacked[ 3 ].AsString();  						this.FileLineNumber = unpacked[ 4 ].AsInt32();  						this.FileColumnNumber = unpacked[ 5 ].AsInt32();  						break;  					}  					default:  					{  						throw new SerializationException( "Count of remote stack frames must be 3 or 6." );  					}  				}
Magic Number,MsgPack.Rpc,RemoteStackFrame,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\RpcException.Propagation.cs,RemoteStackFrame,The following statement contains a magic number: switch ( unpacked.Count )  				{  					case 3:  					{  						this.MethodSignature = unpacked[ 0 ].AsString();  						this.ILOffset = unpacked[ 1 ].AsInt32();  						this.NativeOffset = unpacked[ 2 ].AsInt32();  						this.FileName = null;  						this.FileLineNumber = 0;  						this.FileColumnNumber = 0;  						break;  					}  					case 6:  					{  						this.MethodSignature = unpacked[ 0 ].AsString();  						this.ILOffset = unpacked[ 1 ].AsInt32();  						this.NativeOffset = unpacked[ 2 ].AsInt32();  						this.FileName = unpacked[ 3 ].AsString();  						this.FileLineNumber = unpacked[ 4 ].AsInt32();  						this.FileColumnNumber = unpacked[ 5 ].AsInt32();  						break;  					}  					default:  					{  						throw new SerializationException( "Count of remote stack frames must be 3 or 6." );  					}  				}
Magic Number,MsgPack.Rpc,StandardObjectPool<T>,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\StandardObjectPool`1.cs,EvictExtraItemsCore,The following statement contains a magic number: int evicting = remains / 2 + remains % 2;
Magic Number,MsgPack.Rpc,StandardObjectPool<T>,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\StandardObjectPool`1.cs,EvictExtraItemsCore,The following statement contains a magic number: int evicting = remains / 2 + remains % 2;
Magic Number,MsgPack.Rpc,StandardObjectPool<T>,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\StandardObjectPool`1.cs,CollectLeases,The following statement contains a magic number: try  			{  				this._leasesLock.EnterWriteLock();  				try  				{  					var buffer = new List<WeakReference>( this._leases.Count + Environment.ProcessorCount * 2 );  					WeakReference dequeud;  					while ( this._leases.TryTake( out dequeud ) )  					{  						buffer.Add( dequeud );  					}    					bool isFlushed = false;  					int freed = 0;  					foreach ( var item in buffer )  					{  						if ( !isFlushed && item.IsAlive && !disposed.Exists( x => Object.ReferenceEquals( x' SafeGetTarget( item ) ) ) )  						{  							if ( !this._leases.TryAdd( item ) )  							{  								// Just evict  								isFlushed = true;  								freed++;  							}  						}  						else  						{  							freed++;  						}  					}    #if !API_SIGNATURE_TEST  					if ( freed - disposed.Count > 0 && this._source.ShouldTrace( StandardObjectPoolTrace.GarbageCollectedWithLost ) )  					{  						this._source.TraceEvent(  							StandardObjectPoolTrace.GarbageCollectedWithLost'  							"Garbage items are collected' but there may be lost items. {{ \"Name\" : \"{0}\"' \"Type\" : \"{1}\"' \"HashCode\" : 0x{2:X}' \"Collected\" : {3}' \"MayBeLost\" : {4} }}"'  							this._name'  							this.GetType()'  							this.GetHashCode()'  							freed'  							freed - disposed.Count  						);  					}  					else if ( freed > 0 && this._source.ShouldTrace( StandardObjectPoolTrace.GarbageCollectedWithoutLost ) )  					{  						this._source.TraceEvent(  							StandardObjectPoolTrace.GarbageCollectedWithoutLost'  							"Garbage items are collected. {{ \"Name\" : \"{0}\"' \"Type\" : \"{1}\"' \"HashCode\" : 0x{2:X}' \"Collected\" : {3} }}"'  							this._name'  							this.GetType()'  							this.GetHashCode()'  							freed  						);  					}  #endif  				}  				finally  				{  					this._leasesLock.ExitWriteLock();  				}    				isSuccess = true;  			}  			finally  			{  				if ( !isSuccess )  				{  					this.SetIsCorrupted();  				}  			}
Magic Number,MsgPack.Rpc.Diagnostics,FileMessagePackStreamLogger,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\Diagnostics\FileMessagePackStreamLogger.cs,Write,The following statement contains a magic number: while ( true )  			{  				if ( !Directory.Exists( this._directoryPath ) )  				{  					Directory.CreateDirectory( this._directoryPath );  				}    				try  				{  					using ( var fileStream = new FileStream( filePath' FileMode.Append' FileAccess.Write' FileShare.Read' 64 * 1024' FileOptions.None ) )  					{  						if ( stream != null )  						{  							long written = fileStream.Length;  							foreach ( var b in Skip( stream' written ) )  							{  								fileStream.WriteByte( b );  							}  						}  					}    					break;  				}  				catch ( DirectoryNotFoundException ) { }  			}
Magic Number,MsgPack.Rpc.Diagnostics,FileMessagePackStreamLogger,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\Diagnostics\FileMessagePackStreamLogger.cs,Write,The following statement contains a magic number: while ( true )  			{  				if ( !Directory.Exists( this._directoryPath ) )  				{  					Directory.CreateDirectory( this._directoryPath );  				}    				try  				{  					using ( var fileStream = new FileStream( filePath' FileMode.Append' FileAccess.Write' FileShare.Read' 64 * 1024' FileOptions.None ) )  					{  						if ( stream != null )  						{  							long written = fileStream.Length;  							foreach ( var b in Skip( stream' written ) )  							{  								fileStream.WriteByte( b );  							}  						}  					}    					break;  				}  				catch ( DirectoryNotFoundException ) { }  			}
Magic Number,MsgPack.Rpc.Protocols.Filters,QuotaMessageFilter<T>,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\Protocols\Filters\QuotaMessageFilter`1.cs,ProcessMessageCore,The following statement contains a magic number: if ( length > this._quota )  			{  				throw RpcError.MessageTooLargeError.ToException(  					new MessagePackObject(  						new MessagePackObjectDictionary( 2 )  						{   							{ "ActualLength"' length }'  							{ "Quota"' this._quota }   						}'  						true  					)  				);  			}
Magic Number,MsgPack.Rpc.Protocols,OutboundMessageContext,C:\repos\yfakariya_msgpack-rpc-cli\src\MsgPack.Rpc\Rpc\Protocols\OutboundMessageContext.cs,OutboundMessageContext,The following statement contains a magic number: this._idBuffer = new MemoryStream( 5 );
