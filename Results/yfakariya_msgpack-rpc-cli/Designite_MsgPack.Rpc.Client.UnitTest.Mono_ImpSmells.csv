Implementation smell,Namespace,Class,File,Method,Description
Long Method,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestShutdownCore,The method has 146 lines of code.
Long Method,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceiveCore,The method has 124 lines of code.
Complex Method,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestSendCore,Cyclomatic complexity of the method is 8
Complex Method,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceiveCore,Cyclomatic complexity of the method is 9
Long Parameter List,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceiveCore,The method has 6 parameters. Parameters: messageType' expectedError' expectedResult' receivedBinaryModifier' willBeUnknown' waitTimeout
Long Identifier,MsgPack.Rpc.Client,AsyncResultTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\AsyncResultTest.cs,TestCompletionCore,The length of the parameter expectedIsCompletedSynchronously is 32.
Long Statement,MsgPack.Rpc.Client,AsyncResultTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\AsyncResultTest.cs,TestOnError_IsCompletedSynchronously_ErrorWithCompletedSynchronouslyIsTrue,The length of the statement  "			TestCompletionCore( true' target => target.OnError( error' true )' target => Assert.That( target.Error' Is.SameAs( error ) ) ); " is 127.
Long Statement,MsgPack.Rpc.Client,AsyncResultTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\AsyncResultTest.cs,TestOnError_IsNotCompletedSynchronously_CompleteWithCompletedSynchronouslyIsFalse,The length of the statement  "			TestCompletionCore( false' target => target.OnError( error' false )' target => Assert.That( target.Error' Is.SameAs( error ) ) ); " is 129.
Long Statement,MsgPack.Rpc.Client,DynamicRpcProxyTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\DynamicRpcProxyTest.cs,TestDynamicInvocation_Success,The length of the statement  "			using ( var environment = new InProcTestEnvironment( ( method' id' args ) => method == methodName && args[ 0 ].AsString() == arg ) ) " is 132.
Long Statement,MsgPack.Rpc.Client,DynamicRpcProxyTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\DynamicRpcProxyTest.cs,TestDynamicInvocation_BeginEnd_Success,The length of the statement  "			using ( var environment = new InProcTestEnvironment( ( method' id' args ) => method == methodName && args[ 0 ].AsString() == arg ) ) " is 132.
Long Statement,MsgPack.Rpc.Client,DynamicRpcProxyTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\DynamicRpcProxyTest.cs,TestDynamicInvocation_Async_Success,The length of the statement  "			using ( var environment = new InProcTestEnvironment( ( method' id' args ) => method == methodName && args[ 0 ].AsString() == arg ) ) " is 132.
Long Statement,MsgPack.Rpc.Client,DynamicRpcProxyTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\DynamicRpcProxyTest.cs,TestDynamicInvocation_ServerError,The length of the statement  "			using ( var environment = new InProcTestEnvironment( ( method' id' args ) => { throw new InvalidOperationException( "DUMMY" ); } ) ) " is 132.
Long Statement,MsgPack.Rpc.Client,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\IntegrationTest.cs,TestEcho,The length of the statement  "				server.Error += ( sender' e ) => Console.Error.WriteLine( "{0} Error:{1}"' e.IsClientError ? "Client" : "Server"' e.Exception ); " is 128.
Long Statement,MsgPack.Rpc.Client,RequestMessageAsyncResultTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\RequestMessageAsyncResultTest.cs,CreateContext,The length of the statement  "			context.ErrorBuffer = new ByteArraySegmentStream( new ArraySegment<byte>[] { new ArraySegment<byte>( new byte[] { 0xC0 } ) } ); " is 127.
Long Statement,MsgPack.Rpc.Client,RequestMessageAsyncResultTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\RequestMessageAsyncResultTest.cs,CreateContext,The length of the statement  "			context.ResultBuffer = new ByteArraySegmentStream( new ArraySegment<byte>[] { new ArraySegment<byte>( new byte[] { 0xC0 } ) } ); " is 128.
Long Statement,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,TestSetTransport_NotNull_SetAsIs,The length of the statement  "				Assert.That( target.NextProcess' Is.EqualTo( new Func<ClientResponseContext' bool>( transport.UnpackResponseHeader ) ) ); " is 121.
Long Statement,MsgPack.Rpc.Client.Protocols,ClientSocketErrorTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientSocketErrorTest.cs,TestToClientRpcError,The length of the statement  "					Assert.That( result.Detail.AsDictionary().ContainsValue( new SocketException( ( int )socketError ).Message )' socketError.ToString() ); " is 135.
Long Statement,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestSendCore,The length of the statement  "							result = responseContext == null ? default( MessagePackObject? ) : Unpacking.UnpackObject( responseContext.ResultBuffer ); " is 122.
Long Statement,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceiveInvalidRequestCore,The length of the statement  "						invalidRequestPacking( packer' originalResult[ 1 ].AsInt32()' originalResult[ 2 ].IsNil ? null : RpcError.FromIdentifier( originalResult[ 2 ].AsString()' null )' originalResult[ 3 ] ); " is 184.
Long Statement,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceive_UnknownMessageIdCore,The length of the statement  "							Assert.That( e.ReturnValue == result' "{0}({1}) != {2}({3})"' e.ReturnValue' e.ReturnValue.Value.UnderlyingType' result' result.UnderlyingType ); " is 145.
Long Statement,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceive_InterruptCore,The length of the statement  "					e.ChunkedReceivedData = splitter( response.Value.AsList()[ 1 ].AsByte()' RpcError.FromIdentifier( response.Value.AsList()[ 2 ].AsString()' null )' response.Value.AsList()[ 3 ] ); " is 178.
Long Statement,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceive_InterupptOnArrayAndResume_Ok,The length of the statement  "					new byte[]{ 0x0' 0x4' ( byte )MessageType.Response' messageId }.Concat( ToBytes( error.Identifier ) ).Concat( ToBytes( returnValue ) ).ToArray() " is 144.
Long Statement,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceive_InterupptAfterArrayAndResume_Ok,The length of the statement  "					new byte[]{ ( byte )MessageType.Response' messageId }.Concat( ToBytes( error.Identifier ) ).Concat( ToBytes( returnValue ) ).ToArray() " is 134.
Long Statement,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceive_InterupptOnMessageTypeAndResume_Ok,The length of the statement  "					new byte[]{ ( byte )MessageType.Response' messageId }.Concat( ToBytes( error.Identifier ) ).Concat( ToBytes( returnValue ) ).ToArray() " is 134.
Long Statement,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceive_Request_InterupptOnArgumentsBodyAndResume_Ok,The length of the statement  "							new byte[]{ 0x94' ( byte )MessageType.Response' messageId }.Concat( ToBytes( error.Identifier ) ).Concat( returnValueBytes.Take( 1 ) ).ToArray()' " is 145.
Long Statement,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceive_Request_InterupptOnArgumentsBodyAndNotResume_Timeout,The length of the statement  "							new byte[]{ 0x94' ( byte )MessageType.Response' messageId }.Concat( ToBytes( error.Identifier ) ).Concat( returnValueBytes.Take( 1 ) ).ToArray()' " is 145.
Long Statement,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestFiltersCore,The length of the statement  "			using ( var serverTransportManager = new InProcServerTransportManager( server.Server as RpcServer' m => new SingletonObjectPool<InProcServerTransport>( new InProcServerTransport( m ) ) ) ) " is 188.
Long Statement,MsgPack.Rpc.Client.Protocols,TcpClientTransportManagerTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportManagerTest.cs,TestConnectAsync_Timeout,The length of the statement  "			var testNetworkIPEndPont = new IPEndPoint( IPAddress.Parse( "198.51.100.1" )' 12345 ); // c.f. http://tools.ietf.org/html/rfc5737) " is 130.
Long Statement,MsgPack.Rpc.Client.Protocols,TcpClientTransportManagerTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportManagerTest.cs,TestConnectAsync_Timeout,The length of the statement  "				var actual = Assert.Throws<AggregateException>( () => target.ConnectAsync( testNetworkIPEndPont ).Wait( TimeSpan.FromSeconds( 1 ) ) ); " is 134.
Long Statement,MsgPack.Rpc.Client.Protocols,TcpClientTransportManagerTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportManagerTest.cs,TestConnectAsync_Timeout,The length of the statement  "				Assert.That( ( actual.InnerException as RpcException ).RpcError' Is.EqualTo( RpcError.ConnectionTimeoutError )' actual.ToString() ); " is 132.
Long Statement,MsgPack.Rpc.Client.Protocols,TcpClientTransportManagerTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportManagerTest.cs,TestConnectAsync_ImplicitTimeout_TranslationOk,The length of the statement  "			var testNetworkIPEndPont = new IPEndPoint( IPAddress.Parse( "198.51.100.1" )' 12345 ); // c.f. http://tools.ietf.org/html/rfc5737) " is 130.
Long Statement,MsgPack.Rpc.Client.Protocols,TcpClientTransportManagerTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportManagerTest.cs,TestConnectAsync_ImplicitTimeout_TranslationOk,The length of the statement  "				Assert.That( ( actual.InnerException as RpcException ).RpcError' Is.EqualTo( RpcError.ConnectionTimeoutError )' actual.ToString() ); " is 132.
Long Statement,MsgPack.Rpc.Client.Protocols,TcpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportTest.cs,AssertResponse,The length of the statement  "			Assert.That( ids.Contains( result[ 3 ].AsList()[ 0 ].ToString() )' "[{0}] contains '{1}'"' String.Join( "' "' ids )' result[ 3 ].AsList()[ 0 ].ToString() ); " is 156.
Long Statement,MsgPack.Rpc.Client.Protocols,TcpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportTest.cs,TestSendReceiveRequestCore,The length of the statement  "																responseTable[ responseContext.MessageId.Value ] = Unpacking.UnpackArray( responseContext.ResultBuffer )[ 0 ].AsString(); " is 121.
Long Statement,MsgPack.Rpc.Client.Protocols,UdpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\UdpClientTransportTest.cs,AssertResponse,The length of the statement  "			Assert.That( ids.Contains( result[ 3 ].AsList()[ 0 ].ToString() )' "[{0}] contains '{1}'"' String.Join( "' "' ids )' result[ 3 ].AsList()[ 0 ].ToString() ); " is 156.
Long Statement,MsgPack.Rpc.Client.Protocols,UdpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\UdpClientTransportTest.cs,TestSendReceiveRequestCore,The length of the statement  "			using ( var clientTransportManager = new UdpClientTransportManager( new RpcClientConfiguration() { PreferIPv4 = true } ) ) " is 122.
Long Statement,MsgPack.Rpc.Client.Protocols,UdpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\UdpClientTransportTest.cs,TestSendReceiveRequestCore,The length of the statement  "																responseTable[ responseContext.MessageId.Value ] = Unpacking.UnpackArray( responseContext.ResultBuffer )[ 0 ].AsString(); " is 121.
Long Statement,MsgPack.Rpc.Client.Protocols,UdpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\UdpClientTransportTest.cs,TestSendNotifyCore,The length of the statement  "			using ( var clientTransportManager = new UdpClientTransportManager( new RpcClientConfiguration() { PreferIPv4 = true } ) ) " is 122.
Long Statement,MsgPack.Rpc.Client.Protocols,_SetUpFixture,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\_SetUpFixture.cs,EnsureThreadPoolCapacity,The length of the statement  "			if ( String.IsNullOrEmpty( winDir ) || !RuntimeEnvironment.GetRuntimeDirectory().StartsWith( winDir' StringComparison.OrdinalIgnoreCase ) ) " is 139.
Long Statement,MsgPack.Rpc.Client.Protocols.Filters,ClientQuotaMessageFilterTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\Filters\ClientQuotaMessageFilterTest.cs,TestIsEqualToQuota_Ok,The length of the statement  "					Assert.That( responseError.IsSuccess' responseError.IsSuccess ? String.Empty : responseError.ToException().ToString() ); " is 120.
Long Statement,MsgPack.Rpc.Client.Protocols.Filters,ClientQuotaMessageFilterTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\Filters\ClientQuotaMessageFilterTest.cs,TestIsGreatorThanQuota_MessagetooLongError,The length of the statement  "					Assert.That( responseError.IsSuccess' responseError.IsSuccess ? String.Empty : responseError.ToException().ToString() ); " is 120.
Empty Catch Block,MsgPack.Rpc.Client,TcpTestEnvironment,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\RpcClientTest.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MsgPack.Rpc.Client.Protocols,ClientTransportManager_1Test,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportManager`1Test.cs,TestBeginShutdown_ShutdownCompletedOccurredAndSocketShutdowned,The method has an empty catch block.
Magic Number,MsgPack.Rpc.Client,AsyncResultTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\AsyncResultTest.cs,TestCompletionCore,The following statement contains a magic number: task.Wait( 10 );
Magic Number,MsgPack.Rpc.Client,DynamicRpcProxyTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\DynamicRpcProxyTest.cs,TestDynamicInvocation_Success,The following statement contains a magic number: int messageId = Environment.TickCount % 1000;
Magic Number,MsgPack.Rpc.Client,DynamicRpcProxyTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\DynamicRpcProxyTest.cs,TestDynamicInvocation_BeginEnd_Success,The following statement contains a magic number: int messageId = Environment.TickCount % 1000;
Magic Number,MsgPack.Rpc.Client,DynamicRpcProxyTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\DynamicRpcProxyTest.cs,TestDynamicInvocation_Async_Success,The following statement contains a magic number: int messageId = Environment.TickCount % 1000;
Magic Number,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,TestShiftCurrentReceivingBuffer_LessThanRemains_CurrentReceivingBufferOffsetIsShifttedAndReceivedDataIsAppended,The following statement contains a magic number: int bytesTransferred = 13;
Magic Number,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,TestShiftCurrentReceivingBuffer_EqualToRemains_CurrentReceivingBufferOffsetIsInitializedAndBufferIsSwappedAndReceivedDataIsAppended,The following statement contains a magic number: int bytesTransferred = 13;
Magic Number,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,TestShiftCurrentReceivingBuffer_EqualToRemains_CurrentReceivingBufferOffsetIsInitializedAndBufferIsSwappedAndReceivedDataIsAppended,The following statement contains a magic number: Assert.That( target.ReceivedData.Count' Is.EqualTo( 2 ) );
Magic Number,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,TestShiftCurrentReceivingBuffer_GratorThanRemains_CurrentReceivingBufferOffsetIsRecountedAndBufferIsSwappedAndReceivedDataIsAppended,The following statement contains a magic number: int bytesTransferred = 13;
Magic Number,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,TestShiftCurrentReceivingBuffer_GratorThanRemains_CurrentReceivingBufferOffsetIsRecountedAndBufferIsSwappedAndReceivedDataIsAppended,The following statement contains a magic number: Assert.That( target.ReceivedData.Count' Is.EqualTo( 2 ) );
Magic Number,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,MakeBufferDirty,The following statement contains a magic number: target.SetReceivingBuffer( new byte[] { 1' 2' 3' 4 } );
Magic Number,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,MakeBufferDirty,The following statement contains a magic number: target.SetReceivingBuffer( new byte[] { 1' 2' 3' 4 } );
Magic Number,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,MakeBufferDirty,The following statement contains a magic number: target.SetReceivingBuffer( new byte[] { 1' 2' 3' 4 } );
Magic Number,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,MakeBufferDirty,The following statement contains a magic number: target.ReceivedData.Add( new ArraySegment<byte>( new byte[] { 1' 2' 3' 4 } ) );
Magic Number,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,MakeBufferDirty,The following statement contains a magic number: target.ReceivedData.Add( new ArraySegment<byte>( new byte[] { 1' 2' 3' 4 } ) );
Magic Number,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,MakeBufferDirty,The following statement contains a magic number: target.ReceivedData.Add( new ArraySegment<byte>( new byte[] { 1' 2' 3' 4 } ) );
Magic Number,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,MakeBufferDirty,The following statement contains a magic number: target.ResultStartAt = 2;
Magic Number,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,CreateDirtyBytes,The following statement contains a magic number: return new ArraySegment<byte>[] { new ArraySegment<byte>( new byte[] { 1' 2' 3' 4' 5' 6' 7' 8 } ) };
Magic Number,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,CreateDirtyBytes,The following statement contains a magic number: return new ArraySegment<byte>[] { new ArraySegment<byte>( new byte[] { 1' 2' 3' 4' 5' 6' 7' 8 } ) };
Magic Number,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,CreateDirtyBytes,The following statement contains a magic number: return new ArraySegment<byte>[] { new ArraySegment<byte>( new byte[] { 1' 2' 3' 4' 5' 6' 7' 8 } ) };
Magic Number,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,CreateDirtyBytes,The following statement contains a magic number: return new ArraySegment<byte>[] { new ArraySegment<byte>( new byte[] { 1' 2' 3' 4' 5' 6' 7' 8 } ) };
Magic Number,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,CreateDirtyBytes,The following statement contains a magic number: return new ArraySegment<byte>[] { new ArraySegment<byte>( new byte[] { 1' 2' 3' 4' 5' 6' 7' 8 } ) };
Magic Number,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,CreateDirtyBytes,The following statement contains a magic number: return new ArraySegment<byte>[] { new ArraySegment<byte>( new byte[] { 1' 2' 3' 4' 5' 6' 7' 8 } ) };
Magic Number,MsgPack.Rpc.Client.Protocols,ClientResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientResponseContextTest.cs,CreateDirtyBytes,The following statement contains a magic number: return new ArraySegment<byte>[] { new ArraySegment<byte>( new byte[] { 1' 2' 3' 4' 5' 6' 7' 8 } ) };
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportManager_1Test,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportManager`1Test.cs,TestBeginShutdown_ShutdownCompletedRaisedAndIsInShutdownTransitFalseToTrueToFalse,The following statement contains a magic number: Assert.That( waitHandle.Wait( TimeSpan.FromSeconds( 3 ) ) );
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportManager_1Test,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportManager`1Test.cs,TestBeginShutdown_ShutdownCompletedOccurredAndSocketShutdowned,The following statement contains a magic number: var listener = new TcpListener( IPAddress.Loopback' 19860 );
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportManager_1Test,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportManager`1Test.cs,TestBeginShutdown_ShutdownCompletedOccurredAndSocketShutdowned,The following statement contains a magic number: activeTransport.BoundSocket.Connect( IPAddress.Loopback' 19860 );
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestShutdownCore,The following statement contains a magic number: var arg = Environment.TickCount % 3;
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestShutdownCore,The following statement contains a magic number: var returnValue = Environment.TickCount % 5;
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestShutdownCore,The following statement contains a magic number: TestCore(  				( target' serverTransportManager ) =>  				{  					testEnvironment = Tuple.Create( target' serverTransportManager );    					using ( var serverShutdownWaitHandle = new ManualResetEventSlim() )  					using ( var serverReceivedWaitHandle = new ManualResetEventSlim() )  					using ( var clientShutdownWaitHandle = new ManualResetEventSlim() )  					using ( var responseReceivedWaitHandle = new ManualResetEventSlim() )  					{  						var context = target.GetClientRequestContext();  						try  						{  							if ( isServerReceiving )  							{  								serverTransportManager.TransportReceived += ( sender' e ) => serverReceivedWaitHandle.Set();  							}    							serverTransportManager.TransportShutdownCompleted += ( sender' e ) => serverShutdownWaitHandle.Set();  							target.ShutdownCompleted += ( sender' e ) => clientShutdownWaitHandle.Set();    							int messageId = Math.Abs( Environment.TickCount % 10 );  							int? resultMessageId = null;  							MessagePackObject? resultReturn = null;  							RpcErrorMessage resultError = RpcErrorMessage.Success;  							Exception sendingError = null;  							Task sendingMayFail = null;    							if ( !isEmpty )  							{  								context.SetRequest(  									messageId'  									"Test"'  									( responseContext' error' completedSynchronously ) =>  									{  										if ( error == null )  										{  											resultMessageId = responseContext.MessageId;  											resultReturn = Unpacking.UnpackObject( responseContext.ResultBuffer );  											resultError = ErrorInterpreter.UnpackError( responseContext );  										}  										else  										{  											sendingError = error;  										}    										responseReceivedWaitHandle.Set();  									}  								);    								context.ArgumentsPacker.PackArrayHeader( 0 );    								if ( isServerReceiving )  								{  									( ( InProcClientTransport )target ).DataSending +=  										( sender' e ) =>  										{  											e.Data = e.Data.Take( e.Data.Length / 2 ).ToArray();  										};  								}    								if ( isServerReceiving )  								{  									( ( InProcClientTransport )target ).MessageSent +=  										( sender' e ) => target.BeginShutdown();  									sendingMayFail =  										Task.Factory.StartNew(  											() => target.Send( context )  										);  								}  								else  								{  									target.Send( context );  								}    								// Else' shutdown will be initiated in callback.  							}  							else  							{  								// Initiate shutdown now.    								if ( isClientShutdown )  								{  									target.BeginShutdown();  								}  								else  								{  									serverTransportManager.BeginShutdown();  								}  							}    							if ( !isEmpty )  							{  								if ( isServerReceiving )  								{  									Assert.That( serverReceivedWaitHandle.Wait( _testTimeout ) );  								}    								Assert.That( responseReceivedWaitHandle.Wait( _testTimeout ) );  							}  							else  							{  								if ( !isClientShutdown )  								{  									// Client will never detect server shutdown when there are no sessions.  								}  								else  								{  									Assert.That( clientShutdownWaitHandle.Wait( _testTimeout ) );  								}  							}    							Assert.That( serverShutdownWaitHandle.Wait( _testTimeout ) );    							if ( !isEmpty )  							{  								if ( isServerReceiving )  								{  									Assert.That( sendingError' Is.Not.Null );  								}  								else  								{  									Assert.That( resultMessageId == messageId );  									Assert.That( resultError.IsSuccess );  									Assert.That( resultReturn == returnValue );  								}  							}  						}  						finally  						{  							if ( context.BoundTransport != null )  							{  								// Return only if the shutdown was not occurred.  								target.ReturnContext( context );  							}  						}  					}  				}'  				( messageId' args ) =>  				{  					if ( !isServerReceiving )  					{  						// Initiate shutdown.  						if ( isClientShutdown )  						{  							testEnvironment.Item1.BeginShutdown();  						}  						else  						{  							testEnvironment.Item2.BeginShutdown();  						}  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestShutdownCore,The following statement contains a magic number: TestCore(  				( target' serverTransportManager ) =>  				{  					testEnvironment = Tuple.Create( target' serverTransportManager );    					using ( var serverShutdownWaitHandle = new ManualResetEventSlim() )  					using ( var serverReceivedWaitHandle = new ManualResetEventSlim() )  					using ( var clientShutdownWaitHandle = new ManualResetEventSlim() )  					using ( var responseReceivedWaitHandle = new ManualResetEventSlim() )  					{  						var context = target.GetClientRequestContext();  						try  						{  							if ( isServerReceiving )  							{  								serverTransportManager.TransportReceived += ( sender' e ) => serverReceivedWaitHandle.Set();  							}    							serverTransportManager.TransportShutdownCompleted += ( sender' e ) => serverShutdownWaitHandle.Set();  							target.ShutdownCompleted += ( sender' e ) => clientShutdownWaitHandle.Set();    							int messageId = Math.Abs( Environment.TickCount % 10 );  							int? resultMessageId = null;  							MessagePackObject? resultReturn = null;  							RpcErrorMessage resultError = RpcErrorMessage.Success;  							Exception sendingError = null;  							Task sendingMayFail = null;    							if ( !isEmpty )  							{  								context.SetRequest(  									messageId'  									"Test"'  									( responseContext' error' completedSynchronously ) =>  									{  										if ( error == null )  										{  											resultMessageId = responseContext.MessageId;  											resultReturn = Unpacking.UnpackObject( responseContext.ResultBuffer );  											resultError = ErrorInterpreter.UnpackError( responseContext );  										}  										else  										{  											sendingError = error;  										}    										responseReceivedWaitHandle.Set();  									}  								);    								context.ArgumentsPacker.PackArrayHeader( 0 );    								if ( isServerReceiving )  								{  									( ( InProcClientTransport )target ).DataSending +=  										( sender' e ) =>  										{  											e.Data = e.Data.Take( e.Data.Length / 2 ).ToArray();  										};  								}    								if ( isServerReceiving )  								{  									( ( InProcClientTransport )target ).MessageSent +=  										( sender' e ) => target.BeginShutdown();  									sendingMayFail =  										Task.Factory.StartNew(  											() => target.Send( context )  										);  								}  								else  								{  									target.Send( context );  								}    								// Else' shutdown will be initiated in callback.  							}  							else  							{  								// Initiate shutdown now.    								if ( isClientShutdown )  								{  									target.BeginShutdown();  								}  								else  								{  									serverTransportManager.BeginShutdown();  								}  							}    							if ( !isEmpty )  							{  								if ( isServerReceiving )  								{  									Assert.That( serverReceivedWaitHandle.Wait( _testTimeout ) );  								}    								Assert.That( responseReceivedWaitHandle.Wait( _testTimeout ) );  							}  							else  							{  								if ( !isClientShutdown )  								{  									// Client will never detect server shutdown when there are no sessions.  								}  								else  								{  									Assert.That( clientShutdownWaitHandle.Wait( _testTimeout ) );  								}  							}    							Assert.That( serverShutdownWaitHandle.Wait( _testTimeout ) );    							if ( !isEmpty )  							{  								if ( isServerReceiving )  								{  									Assert.That( sendingError' Is.Not.Null );  								}  								else  								{  									Assert.That( resultMessageId == messageId );  									Assert.That( resultError.IsSuccess );  									Assert.That( resultReturn == returnValue );  								}  							}  						}  						finally  						{  							if ( context.BoundTransport != null )  							{  								// Return only if the shutdown was not occurred.  								target.ReturnContext( context );  							}  						}  					}  				}'  				( messageId' args ) =>  				{  					if ( !isServerReceiving )  					{  						// Initiate shutdown.  						if ( isClientShutdown )  						{  							testEnvironment.Item1.BeginShutdown();  						}  						else  						{  							testEnvironment.Item2.BeginShutdown();  						}  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestSendCore,The following statement contains a magic number: int? messageId = messageType == MessageType.Request ? Math.Abs( Environment.TickCount % 1000 ) : default( int? );
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestSendCore,The following statement contains a magic number: transport.DataSending +=  						( sender' e ) => Thread.Sleep( TimeSpan.FromMilliseconds( waitTimeout.Value.TotalMilliseconds * 3 ) );
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestSend_RequestTimeout_TimeoutError,The following statement contains a magic number: TestSendCore( MessageType.Request' SocketError.OperationAborted' TimeSpan.FromMilliseconds( 20 ) );
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestSend_NotificationTimeout_TimeoutError,The following statement contains a magic number: TestSendCore( MessageType.Request' SocketError.OperationAborted' TimeSpan.FromMilliseconds( 20 ) );
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceiveCore,The following statement contains a magic number: int? messageId = messageType == MessageType.Request ? Math.Abs( Environment.TickCount % 100 ) : default( int? );
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceiveInvalidRequestCore,The following statement contains a magic number: TestReceiveCore(  				MessageType.Request'  				expectedError'  				expectedResult: null'  				receivedBinaryModifier: e =>  				{  					var originalResult = Unpacking.UnpackArray( e.ReceivedData ).Value;    					using ( var buffer = new MemoryStream() )  					using ( var packer = Packer.Create( buffer' false ) )  					{  						invalidRequestPacking( packer' originalResult[ 1 ].AsInt32()' originalResult[ 2 ].IsNil ? null : RpcError.FromIdentifier( originalResult[ 2 ].AsString()' null )' originalResult[ 3 ] );  						e.ChunkedReceivedData = new byte[][] { buffer.ToArray() };  					}  				}'  				willBeUnknown: willBeConnectionReset'  				waitTimeout: null  			);
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceiveInvalidRequestCore,The following statement contains a magic number: TestReceiveCore(  				MessageType.Request'  				expectedError'  				expectedResult: null'  				receivedBinaryModifier: e =>  				{  					var originalResult = Unpacking.UnpackArray( e.ReceivedData ).Value;    					using ( var buffer = new MemoryStream() )  					using ( var packer = Packer.Create( buffer' false ) )  					{  						invalidRequestPacking( packer' originalResult[ 1 ].AsInt32()' originalResult[ 2 ].IsNil ? null : RpcError.FromIdentifier( originalResult[ 2 ].AsString()' null )' originalResult[ 3 ] );  						e.ChunkedReceivedData = new byte[][] { buffer.ToArray() };  					}  				}'  				willBeUnknown: willBeConnectionReset'  				waitTimeout: null  			);
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceiveInvalidRequestCore,The following statement contains a magic number: TestReceiveCore(  				MessageType.Request'  				expectedError'  				expectedResult: null'  				receivedBinaryModifier: e =>  				{  					var originalResult = Unpacking.UnpackArray( e.ReceivedData ).Value;    					using ( var buffer = new MemoryStream() )  					using ( var packer = Packer.Create( buffer' false ) )  					{  						invalidRequestPacking( packer' originalResult[ 1 ].AsInt32()' originalResult[ 2 ].IsNil ? null : RpcError.FromIdentifier( originalResult[ 2 ].AsString()' null )' originalResult[ 3 ] );  						e.ChunkedReceivedData = new byte[][] { buffer.ToArray() };  					}  				}'  				willBeUnknown: willBeConnectionReset'  				waitTimeout: null  			);
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceive_ArrayLengthIs3_Orphan,The following statement contains a magic number: TestReceiveInvalidRequestCore(  				( packer' originalMessageId' originalError' originalReturnValue ) =>  				{  					packer.PackArrayHeader( 3 );  					packer.Pack( ( int )MessageType.Response );  					packer.Pack( originalMessageId );  					packer.Pack( originalError == null ? null : originalError.Identifier );  				}'  				RpcError.RemoteRuntimeError'  				true  			);
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceive_ArrayLengthIs5_Orphan,The following statement contains a magic number: TestReceiveInvalidRequestCore(  				( packer' originalMessageId' originalError' originalReturnValue ) =>  				{  					packer.PackArrayHeader( 5 );  					packer.Pack( ( int )MessageType.Response );  					packer.Pack( originalMessageId );  					packer.Pack( "Test" );  					packer.Pack( originalError == null ? null : originalError.Identifier );  					packer.Pack( originalReturnValue );  				}'  				RpcError.RemoteRuntimeError'  				true  			);
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceive_RequestMessageType_Orphan,The following statement contains a magic number: TestReceiveInvalidRequestCore(  				( packer' originalMessageId' originalError' originalReturnValue ) =>  				{  					packer.PackArrayHeader( 4 );  					packer.Pack( ( int )MessageType.Request );  					packer.Pack( originalMessageId );  					packer.Pack( originalError == null ? null : originalError.Identifier );  					packer.Pack( originalReturnValue );  				}'  				RpcError.RemoteRuntimeError'  				true  			);
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceive_UnknownMessageType_Orphan,The following statement contains a magic number: TestReceiveInvalidRequestCore(  				( packer' originalMessageId' originalError' originalReturnValue ) =>  				{  					packer.PackArrayHeader( 4 );  					packer.Pack( 3 );  					packer.Pack( originalMessageId );  					packer.Pack( originalError == null ? null : originalError.Identifier );  					packer.Pack( originalReturnValue );  				}'  				RpcError.RemoteRuntimeError'  				true  			);
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceive_UnknownMessageType_Orphan,The following statement contains a magic number: TestReceiveInvalidRequestCore(  				( packer' originalMessageId' originalError' originalReturnValue ) =>  				{  					packer.PackArrayHeader( 4 );  					packer.Pack( 3 );  					packer.Pack( originalMessageId );  					packer.Pack( originalError == null ? null : originalError.Identifier );  					packer.Pack( originalReturnValue );  				}'  				RpcError.RemoteRuntimeError'  				true  			);
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceive_UnknownMessageIdCore,The following statement contains a magic number: transport.ResponseReceived +=  					( sender' e ) =>  					{  						var originalResult = Unpacking.UnpackArray( e.ReceivedData ).Value;    						using ( var buffer = new MemoryStream() )  						using ( var packer = Packer.Create( buffer' false ) )  						{  							packer.PackArrayHeader( 4 );  							packer.Pack( ( int )MessageType.Response );  							packer.Pack( 2 );  							packer.Pack( error == null ? MessagePackObject.Nil : error.Identifier );  							packer.Pack( originalResult[ 3 ].AsList()[ 0 ] ); // EchoServer returns args as MPO[]' so pick up first element.  							e.ChunkedReceivedData = new byte[][] { buffer.ToArray() };  						}  					};
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceive_UnknownMessageIdCore,The following statement contains a magic number: transport.ResponseReceived +=  					( sender' e ) =>  					{  						var originalResult = Unpacking.UnpackArray( e.ReceivedData ).Value;    						using ( var buffer = new MemoryStream() )  						using ( var packer = Packer.Create( buffer' false ) )  						{  							packer.PackArrayHeader( 4 );  							packer.Pack( ( int )MessageType.Response );  							packer.Pack( 2 );  							packer.Pack( error == null ? MessagePackObject.Nil : error.Identifier );  							packer.Pack( originalResult[ 3 ].AsList()[ 0 ] ); // EchoServer returns args as MPO[]' so pick up first element.  							e.ChunkedReceivedData = new byte[][] { buffer.ToArray() };  						}  					};
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceive_UnknownMessageIdCore,The following statement contains a magic number: transport.ResponseReceived +=  					( sender' e ) =>  					{  						var originalResult = Unpacking.UnpackArray( e.ReceivedData ).Value;    						using ( var buffer = new MemoryStream() )  						using ( var packer = Packer.Create( buffer' false ) )  						{  							packer.PackArrayHeader( 4 );  							packer.Pack( ( int )MessageType.Response );  							packer.Pack( 2 );  							packer.Pack( error == null ? MessagePackObject.Nil : error.Identifier );  							packer.Pack( originalResult[ 3 ].AsList()[ 0 ] ); // EchoServer returns args as MPO[]' so pick up first element.  							e.ChunkedReceivedData = new byte[][] { buffer.ToArray() };  						}  					};
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceive_InterruptCore,The following statement contains a magic number: TestReceiveCore(  				MessageType.Request'  				error.Error'  				error.Detail'  				e =>  				{  					var response = Unpacking.UnpackObject( e.ReceivedData );  					e.ChunkedReceivedData = splitter( response.Value.AsList()[ 1 ].AsByte()' RpcError.FromIdentifier( response.Value.AsList()[ 2 ].AsString()' null )' response.Value.AsList()[ 3 ] );  				}'  				mayOrphan'  				waitTimeout  			);
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestReceive_InterruptCore,The following statement contains a magic number: TestReceiveCore(  				MessageType.Request'  				error.Error'  				error.Detail'  				e =>  				{  					var response = Unpacking.UnpackObject( e.ReceivedData );  					e.ChunkedReceivedData = splitter( response.Value.AsList()[ 1 ].AsByte()' RpcError.FromIdentifier( response.Value.AsList()[ 2 ].AsString()' null )' response.Value.AsList()[ 3 ] );  				}'  				mayOrphan'  				waitTimeout  			);
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestFilters_Initialization_AppliedDeserializationsAreInOrder_AppliedSerializationsAreReverseOrder,The following statement contains a magic number: TestFiltersCore(  				null'  				target =>  				{  					CheckFilters( target.AfterSerializationFilters' MessageFilteringLocation.AfterSerialization' 0' 1 );  					CheckFilters( target.BeforeDeserializationFilters' MessageFilteringLocation.BeforeDeserialization' 3' 2 );  				}'  				null'  				new ClientRequestTestMessageFilterProvider( 0 )'  				new ClientRequestTestMessageFilterProvider( 1 )'  				new ClientResponseTestMessageFilterProvider( 2 )'  				new ClientResponseTestMessageFilterProvider( 3 )  			);
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestFilters_Initialization_AppliedDeserializationsAreInOrder_AppliedSerializationsAreReverseOrder,The following statement contains a magic number: TestFiltersCore(  				null'  				target =>  				{  					CheckFilters( target.AfterSerializationFilters' MessageFilteringLocation.AfterSerialization' 0' 1 );  					CheckFilters( target.BeforeDeserializationFilters' MessageFilteringLocation.BeforeDeserialization' 3' 2 );  				}'  				null'  				new ClientRequestTestMessageFilterProvider( 0 )'  				new ClientRequestTestMessageFilterProvider( 1 )'  				new ClientResponseTestMessageFilterProvider( 2 )'  				new ClientResponseTestMessageFilterProvider( 3 )  			);
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestFilters_Initialization_AppliedDeserializationsAreInOrder_AppliedSerializationsAreReverseOrder,The following statement contains a magic number: TestFiltersCore(  				null'  				target =>  				{  					CheckFilters( target.AfterSerializationFilters' MessageFilteringLocation.AfterSerialization' 0' 1 );  					CheckFilters( target.BeforeDeserializationFilters' MessageFilteringLocation.BeforeDeserialization' 3' 2 );  				}'  				null'  				new ClientRequestTestMessageFilterProvider( 0 )'  				new ClientRequestTestMessageFilterProvider( 1 )'  				new ClientResponseTestMessageFilterProvider( 2 )'  				new ClientResponseTestMessageFilterProvider( 3 )  			);
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestFilters_Initialization_AppliedDeserializationsAreInOrder_AppliedSerializationsAreReverseOrder,The following statement contains a magic number: TestFiltersCore(  				null'  				target =>  				{  					CheckFilters( target.AfterSerializationFilters' MessageFilteringLocation.AfterSerialization' 0' 1 );  					CheckFilters( target.BeforeDeserializationFilters' MessageFilteringLocation.BeforeDeserialization' 3' 2 );  				}'  				null'  				new ClientRequestTestMessageFilterProvider( 0 )'  				new ClientRequestTestMessageFilterProvider( 1 )'  				new ClientResponseTestMessageFilterProvider( 2 )'  				new ClientResponseTestMessageFilterProvider( 3 )  			);
Magic Number,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestFiltersCore,The following statement contains a magic number: requestContext.SetRequest(  					123'  					"Test"'  					( responseContext' error' completedSynchronously ) =>  					{  						object boxedError = error ?? ( object )ErrorInterpreter.UnpackError( responseContext );  						Interlocked.Exchange( ref responseError' boxedError );  						responseWaitHandle.Set();  					}  				);
Magic Number,MsgPack.Rpc.Client.Protocols,ChunkedReceivedDataEnumerator,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,ChunkedReceivedDataEnumerator,The following statement contains a magic number: this._former = data.Take( data.Length / 2 ).ToArray();
Magic Number,MsgPack.Rpc.Client.Protocols,ChunkedReceivedDataEnumerator,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,ChunkedReceivedDataEnumerator,The following statement contains a magic number: this._latter = data.Skip( data.Length / 2 ).ToArray();
Magic Number,MsgPack.Rpc.Client.Protocols,TcpClientTransportManagerTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportManagerTest.cs,TestConnectAsync_Success,The following statement contains a magic number: var endPoint = new IPEndPoint( IPAddress.Loopback' 57319 );
Magic Number,MsgPack.Rpc.Client.Protocols,TcpClientTransportManagerTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportManagerTest.cs,TestConnectAsync_Timeout,The following statement contains a magic number: var testNetworkIPEndPont = new IPEndPoint( IPAddress.Parse( "198.51.100.1" )' 12345 );
Magic Number,MsgPack.Rpc.Client.Protocols,TcpClientTransportManagerTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportManagerTest.cs,TestConnectAsync_Timeout,The following statement contains a magic number: configuration.ConnectTimeout = TimeSpan.FromMilliseconds( 20 );
Magic Number,MsgPack.Rpc.Client.Protocols,TcpClientTransportManagerTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportManagerTest.cs,TestConnectAsync_ImplicitTimeout_TranslationOk,The following statement contains a magic number: var testNetworkIPEndPont = new IPEndPoint( IPAddress.Parse( "198.51.100.1" )' 12345 );
Magic Number,MsgPack.Rpc.Client.Protocols,TcpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportTest.cs,PackRequest,The following statement contains a magic number: packer.PackArrayHeader( 4 );
Magic Number,MsgPack.Rpc.Client.Protocols,TcpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result.Count' Is.EqualTo( 4 ) );
Magic Number,MsgPack.Rpc.Client.Protocols,TcpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result[ 2 ].IsNil' result[ 2 ].ToString() );
Magic Number,MsgPack.Rpc.Client.Protocols,TcpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result[ 2 ].IsNil' result[ 2 ].ToString() );
Magic Number,MsgPack.Rpc.Client.Protocols,TcpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result[ 3 ].IsArray );
Magic Number,MsgPack.Rpc.Client.Protocols,TcpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result[ 3 ].AsList().Count' Is.EqualTo( 1 ) );
Magic Number,MsgPack.Rpc.Client.Protocols,TcpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( ids.Contains( result[ 3 ].AsList()[ 0 ].ToString() )' "[{0}] contains '{1}'"' String.Join( "' "' ids )' result[ 3 ].AsList()[ 0 ].ToString() );
Magic Number,MsgPack.Rpc.Client.Protocols,TcpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( ids.Contains( result[ 3 ].AsList()[ 0 ].ToString() )' "[{0}] contains '{1}'"' String.Join( "' "' ids )' result[ 3 ].AsList()[ 0 ].ToString() );
Magic Number,MsgPack.Rpc.Client.Protocols,TcpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportTest.cs,TestSendReceiveRequest_Twice_Ok,The following statement contains a magic number: TestSendReceiveRequest(  				endPoint => TestSendReceiveRequestCore( endPoint' 2' 1 )  			);
Magic Number,MsgPack.Rpc.Client.Protocols,TcpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportTest.cs,TestSendReceiveRequest_Parallel_Ok,The following statement contains a magic number: TestSendReceiveRequest(  				endPoint => TestSendReceiveRequestCore( endPoint' 1' 2 )  			);
Magic Number,MsgPack.Rpc.Client.Protocols,TcpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportTest.cs,PackNotify,The following statement contains a magic number: packer.PackArrayHeader( 3 );
Magic Number,MsgPack.Rpc.Client.Protocols,TcpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportTest.cs,PackNotify,The following statement contains a magic number: packer.Pack( 2 );
Magic Number,MsgPack.Rpc.Client.Protocols,TcpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportTest.cs,TestSendNotify_Twice_Ok,The following statement contains a magic number: TestSendNotify(  				1'  				( endPoint'arrivalLatch' arrivedIds ) => TestSendNotifyCore( endPoint' arrivalLatch' arrivedIds' 2 )  			);
Magic Number,MsgPack.Rpc.Client.Protocols,TcpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\TcpClientTransportTest.cs,TestSendNotify_Parallel_Ok,The following statement contains a magic number: TestSendNotify(  				2'  				( endPoint' arrivalLatch'arrivedIds ) => TestSendNotifyCore( endPoint' arrivalLatch' arrivedIds' 1 )  			);
Magic Number,MsgPack.Rpc.Client.Protocols,UdpClientTransportManagerTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\UdpClientTransportManagerTest.cs,TestConnectAsync_Success,The following statement contains a magic number: var endPoint = new IPEndPoint( IPAddress.Loopback' 57319 );
Magic Number,MsgPack.Rpc.Client.Protocols,UdpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\UdpClientTransportTest.cs,PackRequest,The following statement contains a magic number: packer.PackArrayHeader( 4 );
Magic Number,MsgPack.Rpc.Client.Protocols,UdpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\UdpClientTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result.Count' Is.EqualTo( 4 ) );
Magic Number,MsgPack.Rpc.Client.Protocols,UdpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\UdpClientTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result[ 2 ].IsNil' result[ 2 ].ToString() );
Magic Number,MsgPack.Rpc.Client.Protocols,UdpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\UdpClientTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result[ 2 ].IsNil' result[ 2 ].ToString() );
Magic Number,MsgPack.Rpc.Client.Protocols,UdpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\UdpClientTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result[ 3 ].IsArray );
Magic Number,MsgPack.Rpc.Client.Protocols,UdpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\UdpClientTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result[ 3 ].AsList().Count' Is.EqualTo( 1 ) );
Magic Number,MsgPack.Rpc.Client.Protocols,UdpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\UdpClientTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( ids.Contains( result[ 3 ].AsList()[ 0 ].ToString() )' "[{0}] contains '{1}'"' String.Join( "' "' ids )' result[ 3 ].AsList()[ 0 ].ToString() );
Magic Number,MsgPack.Rpc.Client.Protocols,UdpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\UdpClientTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( ids.Contains( result[ 3 ].AsList()[ 0 ].ToString() )' "[{0}] contains '{1}'"' String.Join( "' "' ids )' result[ 3 ].AsList()[ 0 ].ToString() );
Magic Number,MsgPack.Rpc.Client.Protocols,UdpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\UdpClientTransportTest.cs,TestSendReceiveRequest_Twice_Ok,The following statement contains a magic number: TestSendReceiveRequest(  				endPoint => TestSendReceiveRequestCore( endPoint' 2' 1 )  			);
Magic Number,MsgPack.Rpc.Client.Protocols,UdpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\UdpClientTransportTest.cs,TestSendReceiveRequest_Parallel_Ok,The following statement contains a magic number: TestSendReceiveRequest(  				endPoint => TestSendReceiveRequestCore( endPoint' 1' 2 )  			);
Magic Number,MsgPack.Rpc.Client.Protocols,UdpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\UdpClientTransportTest.cs,PackNotify,The following statement contains a magic number: packer.PackArrayHeader( 3 );
Magic Number,MsgPack.Rpc.Client.Protocols,UdpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\UdpClientTransportTest.cs,PackNotify,The following statement contains a magic number: packer.Pack( 2 );
Magic Number,MsgPack.Rpc.Client.Protocols,UdpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\UdpClientTransportTest.cs,TestSendNotify_Twice_Ok,The following statement contains a magic number: TestSendNotify(  				1'  				( endPoint' arrivalLatch' arrivedIds ) => TestSendNotifyCore( endPoint' arrivalLatch' arrivedIds' 2 )  			);
Magic Number,MsgPack.Rpc.Client.Protocols,UdpClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\UdpClientTransportTest.cs,TestSendNotify_Parallel_Ok,The following statement contains a magic number: TestSendNotify(  				2'  				( endPoint' arrivalLatch' arrivedIds ) => TestSendNotifyCore( endPoint' arrivalLatch' arrivedIds' 1 )  			);
Magic Number,MsgPack.Rpc.Client.Protocols,_SetUpFixture,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\_SetUpFixture.cs,EnsureThreadPoolCapacity,The following statement contains a magic number: ThreadPool.SetMinThreads( Environment.ProcessorCount * 10' Environment.ProcessorCount * 10 );
Magic Number,MsgPack.Rpc.Client.Protocols,_SetUpFixture,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\_SetUpFixture.cs,EnsureThreadPoolCapacity,The following statement contains a magic number: ThreadPool.SetMinThreads( Environment.ProcessorCount * 10' Environment.ProcessorCount * 10 );
Magic Number,MsgPack.Rpc.Client.Protocols,_SetUpFixture,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\_SetUpFixture.cs,EnsureThreadPoolCapacity,The following statement contains a magic number: ThreadPool.SetMaxThreads( Int16.MaxValue' 1000 );
Magic Number,MsgPack.Rpc.Client.Protocols.Filters,ClientQuotaMessageFilterTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\Filters\ClientQuotaMessageFilterTest.cs,TestIsEqualToQuota_Ok,The following statement contains a magic number: long quota = 16;
Magic Number,MsgPack.Rpc.Client.Protocols.Filters,ClientQuotaMessageFilterTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\Filters\ClientQuotaMessageFilterTest.cs,TestIsGreatorThanQuota_MessagetooLongError,The following statement contains a magic number: long quota = 16;
Missing Default,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestFilters_RequestResponse_Invoked,The following switch statement is missing a default case: switch ( e.AppliedLocation )  					{  						case MessageFilteringLocation.AfterSerialization:  						{  							Interlocked.Exchange( ref afterSerializationApplied' 1 );  							break;  						}  					}
Missing Default,MsgPack.Rpc.Client.Protocols,ClientTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Client.UnitTest\Rpc\Client\Protocols\ClientTransportTest.cs,TestFilters_RequestResponse_Invoked,The following switch statement is missing a default case: switch ( e.AppliedLocation )  					{  						case MessageFilteringLocation.BeforeDeserialization:  						{  							Interlocked.Exchange( ref beforeDeserializationApplied' 1 );  							break;  						}  					}
