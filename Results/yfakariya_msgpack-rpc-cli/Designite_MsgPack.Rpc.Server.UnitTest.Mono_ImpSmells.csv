Implementation smell,Namespace,Class,File,Method,Description
Long Method,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestShutdownCore,The method has 112 lines of code.
Long Method,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceiveCore,The method has 131 lines of code.
Long Parameter List,MsgPack.Rpc.Server.Dispatch,ServiceInvokerGeneratorTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\ServiceInvokerGeneratorTest.cs,TestGetServiceInvokerCore,The method has 5 parameters. Parameters: invoked' configuration' arg1' arg2' assertion
Long Parameter List,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceiveCore,The method has 10 parameters. Parameters: sending' onExecute' responseAssertion' willExecute' willBeConnectionReset' receiveTimeout' messageType' messageId' methodName' arguments
Long Parameter List,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceiveInvalidRequestCore,The method has 5 parameters. Parameters: invalidRequestPacking' expectedError' willBeConnectionReset' messageType' messageId
Long Parameter List,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_InterruptCore,The method has 6 parameters. Parameters: willExecute' expectedError' willResetConnection' receiveTimeout' messageId' partitionedSendings
Long Parameter List,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_InterruptCore,The method has 5 parameters. Parameters: willExecute' expectedError' willResetConnection' receiveTimeout' partitionedSendings
Long Parameter List,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_InterruptCore,The method has 7 parameters. Parameters: willExecute' expectedError' willResetConnection' receiveTimeout' messageId' arguments' partitionedSendings
Long Parameter List,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_InterruptCore,The method has 6 parameters. Parameters: willExecute' expectedError' willResetConnection' receiveTimeout' arguments' partitionedSendings
Long Parameter List,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_InterruptCore,The method has 8 parameters. Parameters: willExecute' expectedError' willResetConnection' receiveTimeout' messageType' messageId' arguments' partitionedSendings
Long Identifier,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,,The length of the parameter _operationDescriptionConstructor is 32.
Long Statement,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,SetUp,The length of the statement  "			this._debugTrace = new DebugTraceSourceSetting( _traceEnabled' MsgPackRpcServerTrace.Source' MsgPackRpcServerProtocolsTrace.Source' _trace ); " is 141.
Long Statement,MsgPack.Rpc.Server.Dispatch,AsyncServiceInvokerTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\AsyncServiceInvokerTest.cs,TestInvokeAsync_FatalError_TaskSetSerializedError,The length of the statement  "				using ( var result = new Target( new Exception( "FAIL" )' RpcErrorMessage.Success ).InvokeAsync( requestContext' responseContext ) ) " is 132.
Long Statement,MsgPack.Rpc.Server.Dispatch,AsyncServiceInvokerTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\AsyncServiceInvokerTest.cs,TestInvokeAsync_MethodError_TaskSetSerializedError,The length of the statement  "				using ( var result = new Target( null' new RpcErrorMessage( RpcError.ArgumentError' MessagePackObject.Nil ) ).InvokeAsync( requestContext' responseContext ) ) " is 158.
Long Statement,MsgPack.Rpc.Server.Dispatch,FileBasedServiceTypeLocatorTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\FileBasedServiceTypeLocatorTest.cs,TestFindServicesCore,The length of the statement  "			File.WriteAllText( Path.Combine( svcDir' "1.svc" )' String.Format( CultureInfo.InvariantCulture' template' typeof( TestService1 ).FullName ) ); " is 143.
Long Statement,MsgPack.Rpc.Server.Dispatch,FileBasedServiceTypeLocatorTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\FileBasedServiceTypeLocatorTest.cs,TestFindServicesCore,The length of the statement  "			File.WriteAllText( Path.Combine( svcDir' "2.svc" )' String.Format( CultureInfo.InvariantCulture' template' typeof( TestService2 ).FullName ) ); " is 143.
Long Statement,MsgPack.Rpc.Server.Dispatch,FileBasedServiceTypeLocatorTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\FileBasedServiceTypeLocatorTest.cs,TestFindServicesCoreInWorkerDomain,The length of the statement  "				var workerDomain = AppDomain.CreateDomain( "WorkerDomain"' null' setup' new PermissionSet( PermissionState.Unrestricted ) ); " is 124.
Long Statement,MsgPack.Rpc.Server.Dispatch,FileBasedServiceTypeLocatorTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\FileBasedServiceTypeLocatorTest.cs,TestFindServices_FileFound_TypeFound_Failed,The length of the statement  "				File.WriteAllText( Path.Combine( tempDir' "1.svc" )' String.Format( CultureInfo.InvariantCulture' template' "Example.NotExist" ) ); " is 131.
Long Statement,MsgPack.Rpc.Server.Dispatch,FileBasedServiceTypeLocatorTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\FileBasedServiceTypeLocatorTest.cs,TestFindServices_InvalidSvcFile_Failed,The length of the statement  "				File.WriteAllText( Path.Combine( tempDir' "1.svc" )' String.Format( CultureInfo.InvariantCulture' template' "Service1" ) ); " is 123.
Long Statement,MsgPack.Rpc.Server.Dispatch,FileBasedServiceTypeLocatorTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\FileBasedServiceTypeLocatorTest.cs,TestFindServices_NotSvc_Ignored,The length of the statement  "				File.WriteAllText( Path.Combine( tempDir' "1.svg" )' String.Format( CultureInfo.InvariantCulture' template' typeof( TestService1 ).FullName ) ); " is 144.
Long Statement,MsgPack.Rpc.Server.Dispatch,InvocationHelperTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\InvocationHelperTest.cs,TestTrace_SuccessAtLeast,The length of the statement  "				InvocationHelper.TraceInvocationResult<object>( 1' Rpc.Protocols.MessageType.Request' 1' "TracingTest"' RpcErrorMessage.Success' null ); " is 136.
Long Statement,MsgPack.Rpc.Server.Dispatch,InvocationHelperTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\InvocationHelperTest.cs,TestTrace_SuccessAtLeast,The length of the statement  "				InvocationHelper.TraceInvocationResult<object>( 1' Rpc.Protocols.MessageType.Request' 1' "TracingTest"' new RpcErrorMessage( RpcError.RemoteRuntimeError' "Description"' "DebugInformation" )' null ); " is 198.
Long Statement,MsgPack.Rpc.Server.Dispatch,InvocationHelperTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\InvocationHelperTest.cs,TestHandleArgumentDeserializationException_NotNull_IsDebugMode_IncludesFullExceptionInfo,The length of the statement  "			Assert.That( result.Detail.AsDictionary()[ RpcException.MessageKeyUtf8 ].AsString()' Is.StringContaining( parameterName ) ); " is 124.
Long Statement,MsgPack.Rpc.Server.Dispatch,InvocationHelperTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\InvocationHelperTest.cs,TestHandleArgumentDeserializationException_NotNull_IsDebugMode_IncludesFullExceptionInfo,The length of the statement  "			Assert.That( result.Detail.AsDictionary()[ RpcException.DebugInformationKeyUtf8 ].AsString()' Is.StringContaining( exception.Message ) ); " is 137.
Long Statement,MsgPack.Rpc.Server.Dispatch,InvocationHelperTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\InvocationHelperTest.cs,TestHandleArgumentDeserializationException_NotNull_IsNotDebugMode_DoesNotIncludeFullExceptionInfo,The length of the statement  "			Assert.That( result.Detail.AsDictionary()[ RpcException.MessageKeyUtf8 ].AsString()' Is.StringContaining( parameterName ) ); " is 124.
Long Statement,MsgPack.Rpc.Server.Dispatch,InvocationHelperTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\InvocationHelperTest.cs,TestHandleInvocationException_NotNull_ArgumentException_IsDebugMode_AsArgumentError,The length of the statement  "			Assert.That( result.Detail.AsDictionary()[ RpcException.MessageKeyUtf8 ].AsString()' Is.StringContaining( exception.ParamName ) ); " is 130.
Long Statement,MsgPack.Rpc.Server.Dispatch,InvocationHelperTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\InvocationHelperTest.cs,TestHandleInvocationException_NotNull_ArgumentException_IsDebugMode_AsArgumentError,The length of the statement  "			Assert.That( result.Detail.AsDictionary()[ RpcException.DebugInformationKeyUtf8 ].AsString()' Is.StringContaining( exception.Message ) ); " is 137.
Long Statement,MsgPack.Rpc.Server.Dispatch,InvocationHelperTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\InvocationHelperTest.cs,TestHandleInvocationException_NotNull_ArgumentException_IsNotDebugMode_AsArgumentErrorWithoutDebugInformation,The length of the statement  "			Assert.That( result.Detail.AsDictionary()[ RpcException.MessageKeyUtf8 ].AsString()' Is.StringContaining( exception.ParamName ) ); " is 130.
Long Statement,MsgPack.Rpc.Server.Dispatch,InvocationHelperTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\InvocationHelperTest.cs,TestHandleInvocationException_NotNull_RpcException_IsDebugMode_AsCorrespondingError,The length of the statement  "			var exception = new RpcException( RpcError.MessageTooLargeError' Guid.NewGuid().ToString()' Guid.NewGuid().ToString() ); " is 120.
Long Statement,MsgPack.Rpc.Server.Dispatch,InvocationHelperTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\InvocationHelperTest.cs,TestHandleInvocationException_NotNull_RpcException_IsDebugMode_AsCorrespondingError,The length of the statement  "			Assert.That( result.Detail.AsDictionary()[ RpcException.MessageKeyUtf8 ].AsString()' Is.StringContaining( exception.Message ) ); " is 128.
Long Statement,MsgPack.Rpc.Server.Dispatch,InvocationHelperTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\InvocationHelperTest.cs,TestHandleInvocationException_NotNull_RpcException_IsDebugMode_AsCorrespondingError,The length of the statement  "			Assert.That( result.Detail.AsDictionary()[ RpcException.DebugInformationKeyUtf8 ].AsString()' Is.StringContaining( exception.DebugInformation ) ); " is 146.
Long Statement,MsgPack.Rpc.Server.Dispatch,InvocationHelperTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\InvocationHelperTest.cs,TestHandleInvocationException_NotNull_RpcException_IsDebugMode_AsCorrespondingErrorWithoutDebugInformation,The length of the statement  "			var exception = new RpcException( RpcError.MessageTooLargeError' Guid.NewGuid().ToString()' Guid.NewGuid().ToString() ); " is 120.
Long Statement,MsgPack.Rpc.Server.Dispatch,InvocationHelperTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\InvocationHelperTest.cs,TestHandleInvocationException_NotNull_RpcException_IsDebugMode_AsCorrespondingErrorWithoutDebugInformation,The length of the statement  "			Assert.That( result.Detail.AsDictionary()[ RpcException.MessageKeyUtf8 ].AsString()' Is.Not.Null.And.No.Empty.And.Not.StringContaining( exception.Message ).And.Not.StringContaining( exception.DebugInformation ) ); " is 213.
Long Statement,MsgPack.Rpc.Server.Dispatch,InvocationHelperTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\InvocationHelperTest.cs,TestHandleInvocationException_NotNull_OtherException_IsDebugMode_AsRemoteRuntimeError,The length of the statement  "			Assert.That( result.Detail.AsDictionary()[ RpcException.MessageKeyUtf8 ].AsString()' Is.Not.Null.And.Not.Empty.And.StringContaining( exception.Message ) ); " is 155.
Long Statement,MsgPack.Rpc.Server.Dispatch,InvocationHelperTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\InvocationHelperTest.cs,TestHandleInvocationException_NotNull_OtherException_IsDebugMode_AsRemoteRuntimeError,The length of the statement  "			Assert.That( result.Detail.AsDictionary()[ RpcException.DebugInformationKeyUtf8 ].AsString()' Is.StringContaining( exception.Message ) ); " is 137.
Long Statement,MsgPack.Rpc.Server.Dispatch,InvocationHelperTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\InvocationHelperTest.cs,TestHandleInvocationException_NotNull_OtherException_IsNotDebugMode_AsRemoteRuntimeError,The length of the statement  "			Assert.That( result.Detail.AsDictionary()[ RpcException.MessageKeyUtf8 ].AsString()' Is.Not.Null.And.Not.Empty.And.No.StringContaining( exception.Message ) ); " is 158.
Long Statement,MsgPack.Rpc.Server.Dispatch,ServiceInvokerGeneratorTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\ServiceInvokerGeneratorTest.cs,TestGetServiceInvokerCore,The length of the statement  "						var result = target.GetServiceInvoker( RpcServerRuntime.Create( configuration' this._serializationContext )' serviceDescription' targetOperation ); " is 147.
Long Statement,MsgPack.Rpc.Server.Dispatch,ServiceInvokerGeneratorTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\ServiceInvokerGeneratorTest.cs,TestGetServiceInvoker_ReturnsValidInvoker_NonErrorCase,The length of the statement  "						Assert.That( Unpacking.UnpackObject( responseContext.GetErrorData() ).Value.IsNil' Unpacking.UnpackObject( responseContext.GetErrorData() ).Value.ToString() ); " is 159.
Long Statement,MsgPack.Rpc.Server.Dispatch,ServiceInvokerGeneratorTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\ServiceInvokerGeneratorTest.cs,TestGetServiceInvoker_ReturnsValidInvoker_ErrorCase_IsNotDebugMode_NotRpcError_DefaultMessage,The length of the statement  "						Assert.That( Unpacking.UnpackObject( responseContext.GetErrorData() ).Value.Equals( rpcError.Identifier )' "{0}!={1}"' Unpacking.UnpackObject( responseContext.GetErrorData() ).Value' rpcError.Identifier ); " is 205.
Long Statement,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,GetOperationDescriptionConstructor,The length of the statement  "				Expression.Lambda<Func<ServiceDescription' string' Func<ServerRequestContext' ServerResponseContext' Task>' OperationDescription>>( " is 131.
Long Statement,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,GetOperationDescriptionConstructor,The length of the statement  "						typeof( OperationDescription ).GetConstructors( BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance ).Single()' " is 128.
Long Statement,MsgPack.Rpc.Server.Dispatch.SvcFileInterop,AttributeNameParsingStateTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\SvcFileInterop\AttributeNameParsingStateTest.cs,GetPrevious,The length of the statement  "			return new RuntimeDirectiveIndicatorFoundState( new ServerDirectiveIndicatorFoundState( new StartTagFoundState( new InitialState() ) ) ); " is 137.
Long Statement,MsgPack.Rpc.Server.Dispatch.SvcFileInterop,AttributeValueParsingStateTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\SvcFileInterop\AttributeValueParsingStateTest.cs,TestParse_QuotedChars_NameWasWrongCasingService_TransitToAttributeNameParsingStateWithoutDirectiveSet,The length of the statement  "			TestParseCore( '"'' "service"' "Example.Service"' target => Assert.That( ( target as AttributeNameParsingState ).Directive.Service' Is.Null ) ); " is 144.
Long Statement,MsgPack.Rpc.Server.Dispatch.SvcFileInterop,AttributeValueParsingStateTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\SvcFileInterop\AttributeValueParsingStateTest.cs,TestParse_QuotedChars_NameWasNotService_TransitToAttributeNameParsingStateWithoutDirectiveSet,The length of the statement  "			TestParseCore( '"'' "Services"' "Example.Service"' target => Assert.That( ( target as AttributeNameParsingState ).Directive.Service' Is.Null ) ); " is 145.
Long Statement,MsgPack.Rpc.Server.Dispatch.SvcFileInterop,AttributeValueParsingStateTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\SvcFileInterop\AttributeValueParsingStateTest.cs,TestParse_QuotedCharsWithEntityOrCharacterReference_NameWasService_TransitToAttributeNameParsingStateWithDirectiveSet,The length of the statement  "			TestParseCore( '"'' "Service"' "&amp;&quot;&lt;&gt;&apos;&#x123;"' target => Assert.That( ( target as AttributeNameParsingState ).Directive.Service' Is.EqualTo( "&\"<>'" + ( char )0x123 ) ) ); " is 192.
Long Statement,MsgPack.Rpc.Server.Dispatch.SvcFileInterop,AttributeValueParsingStateTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\SvcFileInterop\AttributeValueParsingStateTest.cs,TestParse_DoubleQuotedEmpty_NameWasService_TransitToAttributeNameParsingStateWithDirectiveSetEmpty,The length of the statement  "			TestParseCore( '"'' "Service"' String.Empty' target => Assert.That( ( target as AttributeNameParsingState ).Directive.Service' Is.Not.Null.And.Empty ) ); " is 153.
Long Statement,MsgPack.Rpc.Server.Dispatch.SvcFileInterop,AttributeValueParsingStateTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\SvcFileInterop\AttributeValueParsingStateTest.cs,TestParse_SingleQuotedEmpty_NameWasService_TransitToAttributeNameParsingStateWithDirectiveSetEmpty,The length of the statement  "			TestParseCore( '\''' "Service"' String.Empty' target => Assert.That( ( target as AttributeNameParsingState ).Directive.Service' Is.Not.Null.And.Empty ) ); " is 154.
Long Statement,MsgPack.Rpc.Server.Dispatch.SvcFileInterop,AttributeValueParsingStateTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\SvcFileInterop\AttributeValueParsingStateTest.cs,GetPrevious,The length of the statement  "			return new AttributeNameParsingState( new RuntimeDirectiveIndicatorFoundState( new ServerDirectiveIndicatorFoundState( new StartTagFoundState( new InitialState() ) ) )' new StringBuilder() ); " is 191.
Long Statement,MsgPack.Rpc.Server.Dispatch.SvcFileInterop,FinishedStateTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\SvcFileInterop\FinishedStateTest.cs,GetPrevious,The length of the statement  "			return new AttributeNameParsingState( new RuntimeDirectiveIndicatorFoundState( new ServerDirectiveIndicatorFoundState( new StartTagFoundState( new InitialState() ) ) )' new StringBuilder() ); " is 191.
Long Statement,MsgPack.Rpc.Server.Protocols.Filters,ServerQuotaMessageFilterTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\Filters\ServerQuotaMessageFilterTest.cs,TestIsGreatorThanQuota_MessagetooLongError,The length of the statement  "					Assert.That( responseMessage[ 2 ] == RpcError.MessageTooLargeError.Identifier' "{0}:{1}"' responseMessage[ 2 ]' responseMessage[ 3 ] ); " is 135.
Long Statement,MsgPack.Rpc.Server.Protocols,ServerRequestContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerRequestContextTest.cs,TestClear,The length of the statement  "					target.SetReceivedData( new ArraySegment<byte>[] { new ArraySegment<byte>( new byte[] { 1 } )' new ArraySegment<byte>( new byte[] { 1' 2 } ) } ); " is 145.
Long Statement,MsgPack.Rpc.Server.Protocols,ServerRequestContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerRequestContextTest.cs,TestClearBuffers,The length of the statement  "					target.SetReceivedData( new ArraySegment<byte>[] { new ArraySegment<byte>( new byte[] { 1 } )' new ArraySegment<byte>( new byte[] { 1' 2 } ) } ); " is 145.
Long Statement,MsgPack.Rpc.Server.Protocols,ServerRequestContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerRequestContextTest.cs,TestClearDispatchContext,The length of the statement  "					target.SetReceivedData( new ArraySegment<byte>[] { new ArraySegment<byte>( new byte[] { 1 } )' new ArraySegment<byte>( new byte[] { 1' 2 } ) } ); " is 145.
Long Statement,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestCore,The length of the statement  "				s => serverTransportManager = new InProcServerTransportManager( s' m => new SingletonObjectPool<InProcServerTransport>( new InProcServerTransport( m ) ) ); " is 155.
Long Statement,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_Request_Fail_ResponseReturns,The length of the statement  "					Assert.That( returnValue.AsDictionary()[ "Message" ] == "TestMessage"' "Unexpected. {0}{1}"' Environment.NewLine' returnValue ); " is 128.
Long Statement,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceiveInvalidRequestCore,The length of the statement  "					Assert.That( RpcError.FromIdentifier( error.AsString()' null )' Is.EqualTo( expectedError )' "{0}:{1}"' error' returnValue ); " is 125.
Long Statement,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_InterruptCore,The length of the statement  "			TestReceive_InterruptCore( willExecute' expectedError' willResetConnection' receiveTimeout' MessageType.Request' messageId' new MessagePackObject[ 0 ]' partitionedSendings ); " is 174.
Long Statement,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_InterruptCore,The length of the statement  "			TestReceive_InterruptCore( willExecute' expectedError' willResetConnection' receiveTimeout' MessageType.Notification' null' new MessagePackObject[ 0 ]' partitionedSendings ); " is 174.
Long Statement,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_InterruptCore,The length of the statement  "			TestReceive_InterruptCore( willExecute' expectedError' willResetConnection' receiveTimeout' MessageType.Request' messageId' arguments' partitionedSendings ); " is 157.
Long Statement,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_InterruptCore,The length of the statement  "			TestReceive_InterruptCore( willExecute' expectedError' willResetConnection' receiveTimeout' MessageType.Notification' null' arguments' partitionedSendings ); " is 157.
Long Statement,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestSendCore,The length of the statement  "							Assert.That( result[ 3 ].AsDictionary()[ "Message" ] == errorMessage' "{0} does not contain \"{1}\""' result[ 3 ]' errorMessage ); " is 130.
Long Statement,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestFiltersCore,The length of the statement  "			using ( var manager = new InProcServerTransportManager( server' m => new SingletonObjectPool<InProcServerTransport>( new InProcServerTransport( m ) ) ) ) " is 153.
Long Statement,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,AssertResponse,The length of the statement  "			Assert.That( ids.Contains( result[ 3 ].AsList()[ 0 ].ToString() )' "[{0}] contains '{1}'"' String.Join( "' "' ids )' result[ 3 ].AsList()[ 0 ].ToString() ); " is 156.
Long Statement,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,TestSendReceiveRequestCore,The length of the statement  "						var ids = Enumerable.Repeat( 0' latch == null ? 1 : latch.InitialCount ).Select( _ => Guid.NewGuid().ToString() ).ToArray(); " is 124.
Long Statement,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,TestSendNotifyCore,The length of the statement  "						var ids = Enumerable.Repeat( 0' concurrencyLatch == null ? 1 : concurrencyLatch.InitialCount ).Select( _ => Guid.NewGuid().ToString() ).ToArray(); " is 146.
Long Statement,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,AssertResponse,The length of the statement  "			Assert.That( ids.Contains( result[ 3 ].AsList()[ 0 ].ToString() )' "[{0}] contains '{1}'"' String.Join( "' "' ids )' result[ 3 ].AsList()[ 0 ].ToString() ); " is 156.
Long Statement,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,TestSendReceiveRequestCore,The length of the statement  "					var ids = Enumerable.Repeat( 0' latch == null ? 1 : latch.InitialCount ).Select( _ => Guid.NewGuid().ToString() ).ToArray(); " is 124.
Long Statement,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,TestSendNotifyCore,The length of the statement  "					var ids = Enumerable.Repeat( 0' concurrencyLatch == null ? 1 : concurrencyLatch.InitialCount ).Select( _ => Guid.NewGuid().ToString() ).ToArray(); " is 146.
Long Statement,MsgPack.Rpc.Server.Protocols,_SetUpFixture,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\_SetUpFixture.cs,SetupCurrentNamespaceTests,The length of the statement  "			if ( String.IsNullOrEmpty( winDir ) || !RuntimeEnvironment.GetRuntimeDirectory().StartsWith( winDir' StringComparison.OrdinalIgnoreCase ) ) " is 139.
Empty Catch Block,MsgPack.Rpc.Server.Protocols,ServerTransportManager_1Test,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportManager`1Test.cs,TestBeginShutdown_ShutdownCompletedOccurredAndSocketShutdowned,The method has an empty catch block.
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestCore,The following statement contains a magic number: packer.PackArrayHeader( 4 );
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestCore,The following statement contains a magic number: packer.Pack( 123 );
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestCore,The following statement contains a magic number: packer.PackArrayHeader( 2 );
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestCore,The following statement contains a magic number: Assert.That( array.Count' Is.EqualTo( 4 ) );
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestCore,The following statement contains a magic number: Assert.That(  						array[ 1 ] == 123'  						String.Format(  							CultureInfo.CurrentCulture'  							"Expected: {1}{0}Actual : {2}"'  							Environment.NewLine'  							123'  							array[ 1 ].ToString() ) );
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestCore,The following statement contains a magic number: Assert.That(  						array[ 1 ] == 123'  						String.Format(  							CultureInfo.CurrentCulture'  							"Expected: {1}{0}Actual : {2}"'  							Environment.NewLine'  							123'  							array[ 1 ].ToString() ) );
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestCore,The following statement contains a magic number: Assert.That(  						array[ 2 ] == MessagePackObject.Nil'  						String.Format(  							CultureInfo.CurrentCulture'  							"Expected: {1}{0}Actual : {2}"'  							Environment.NewLine'  							MessagePackObject.Nil'  							array[ 2 ].ToString() ) );
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestCore,The following statement contains a magic number: Assert.That(  						array[ 2 ] == MessagePackObject.Nil'  						String.Format(  							CultureInfo.CurrentCulture'  							"Expected: {1}{0}Actual : {2}"'  							Environment.NewLine'  							MessagePackObject.Nil'  							array[ 2 ].ToString() ) );
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestCore,The following statement contains a magic number: Assert.That( array[ 3 ].IsArray' array[ 3 ].ToString() );
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestCore,The following statement contains a magic number: Assert.That( array[ 3 ].IsArray' array[ 3 ].ToString() );
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestCore,The following statement contains a magic number: var returnValue = array[ 3 ].AsList();
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestCore,The following statement contains a magic number: Assert.That( returnValue.Count' Is.EqualTo( 2 ) );
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestContinuous,The following statement contains a magic number: const int count = 3;
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestContinuousCore,The following statement contains a magic number: packer.PackArrayHeader( 4 );
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestContinuousCore,The following statement contains a magic number: packer.PackArrayHeader( 2 );
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestContinuousCore,The following statement contains a magic number: Assert.That( array.Count' Is.EqualTo( 4 ) );
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestContinuousCore,The following statement contains a magic number: Assert.That( array[ 2 ] == MessagePackObject.Nil' array[ 2 ].ToString() );
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestContinuousCore,The following statement contains a magic number: Assert.That( array[ 2 ] == MessagePackObject.Nil' array[ 2 ].ToString() );
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestContinuousCore,The following statement contains a magic number: Assert.That( array[ 3 ].IsArray' array[ 3 ].ToString() );
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestContinuousCore,The following statement contains a magic number: Assert.That( array[ 3 ].IsArray' array[ 3 ].ToString() );
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestContinuousCore,The following statement contains a magic number: var returnValue = array[ 3 ].AsList();
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,TestEchoRequestContinuousCore,The following statement contains a magic number: Assert.That( returnValue.Count' Is.EqualTo( 2 ) );
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,CreateConfiguration,The following statement contains a magic number: return  				new RpcServerConfiguration()  				{  					PreferIPv4 = true'  					BindingEndPoint = new IPEndPoint( IPAddress.Any' 57319 )'  					MinimumConcurrentRequest = 1'  					MaximumConcurrentRequest = 10'  					MinimumConnection = 1'  					MaximumConnection = 1'  					TransportManagerProvider = transportManagerProvider'  					DispatcherProvider = server => new CallbackDispatcher( server' callback )  				};
Magic Number,MsgPack.Rpc.Server,IntegrationTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\IntegrationTest.cs,CreateConfiguration,The following statement contains a magic number: return  				new RpcServerConfiguration()  				{  					PreferIPv4 = true'  					BindingEndPoint = new IPEndPoint( IPAddress.Any' 57319 )'  					MinimumConcurrentRequest = 1'  					MaximumConcurrentRequest = 10'  					MinimumConnection = 1'  					MaximumConnection = 1'  					TransportManagerProvider = transportManagerProvider'  					DispatcherProvider = server => new CallbackDispatcher( server' callback )  				};
Magic Number,MsgPack.Rpc.Server.Dispatch,AsyncServiceInvokerTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\AsyncServiceInvokerTest.cs,TestInvokeAsync_Success_TaskSetSerializedReturnValue,The following statement contains a magic number: Assert.That( responseContext.GetReturnValueData()' Is.EqualTo( new byte[] { 123 } ) );
Magic Number,MsgPack.Rpc.Server.Dispatch,Target,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\AsyncServiceInvokerTest.cs,InvokeCore,The following statement contains a magic number: return new AsyncInvocationResult( Task.Factory.StartNew( () => 123 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch,FileBasedServiceTypeLocatorTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\FileBasedServiceTypeLocatorTest.cs,TestBaseDirectory_TooLong,The following statement contains a magic number: new FileBasedServiceTypeLocator().BaseDirectory = ".\\" + new String( 'A'' 255 );
Magic Number,MsgPack.Rpc.Server.Dispatch,OperationDescriptionTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\OperationDescriptionTest.cs,TestFromServiceDescription_WithMethods_CreateForPublicAnnotatedMembers,The following statement contains a magic number: Assert.That( result' Is.Not.Null.And.Length.EqualTo( 2 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch,ServiceDescriptionTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\ServiceDescriptionTest.cs,TestGetHashCode_VersionIsSet_Harmless,The following statement contains a magic number: ServiceDescription target =  				new ServiceDescription( name' initializer )  				{  					Version = 123  				};
Magic Number,MsgPack.Rpc.Server.Dispatch,ServiceDescriptionTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\ServiceDescriptionTest.cs,TestEquals_NameAreSame_VersionAreDiffer_TypeAreSame_False,The following statement contains a magic number: var right =  				new ServiceDescription( "TestA"' () => new object() )  				{  							Version = 2  				};
Magic Number,MsgPack.Rpc.Server.Dispatch,ServiceDescriptionTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\ServiceDescriptionTest.cs,TestEquals_NameAreDiffer_VersionAreDiffer_TypeAreSame_False,The following statement contains a magic number: var right =  				new ServiceDescription( "TestB"' () => new object() )  				{  							Version = 2  				};
Magic Number,MsgPack.Rpc.Server.Dispatch,ServiceInvokerGeneratorTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\ServiceInvokerGeneratorTest.cs,TestGetServiceInvokerCore,The following statement contains a magic number: requestContext.ArgumentsBufferPacker.PackArrayHeader( 2 );
Magic Number,MsgPack.Rpc.Server.Dispatch,ServiceInvokerGeneratorTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\ServiceInvokerGeneratorTest.cs,TestGetServiceInvokerCore,The following statement contains a magic number: requestContext.MessageId = 123;
Magic Number,MsgPack.Rpc.Server.Dispatch,ServiceInvokerGeneratorTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\ServiceInvokerGeneratorTest.cs,TestGetServiceInvoker_ReturnsValidInvoker_NonErrorCase,The following statement contains a magic number: this.TestGetServiceInvokerCore<string' int' bool>(  					( sender' e ) =>  					{  						Assert.That( e.Arguments.Length' Is.EqualTo( 2 ) );  						Assert.That( e.Arguments[ 0 ]' Is.EqualTo( arg1 ) );  						Assert.That( e.Arguments[ 1 ]' Is.EqualTo( arg2 ) );  						e.ReturnValue = returnValue;  					}'  					new RpcServerConfiguration() { IsDebugMode = true }'  					arg1'  					arg2'  					responseContext =>  					{  						Assert.That( Unpacking.UnpackObject( responseContext.GetErrorData() ).Value.IsNil' Unpacking.UnpackObject( responseContext.GetErrorData() ).Value.ToString() );  						Assert.That( Unpacking.UnpackObject( responseContext.GetReturnValueData() ).Value.AsBoolean() );  					}  				);
Magic Number,MsgPack.Rpc.Server.Dispatch,ServiceInvokerGeneratorTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\ServiceInvokerGeneratorTest.cs,TestGetServiceInvoker_ReturnsValidInvoker_ErrorCase_IsNotDebugMode_NotRpcError_DefaultMessage,The following statement contains a magic number: this.TestGetServiceInvokerCore<string' int' bool>(  					( sender' e ) =>  					{  						Assert.That( e.Arguments.Length' Is.EqualTo( 2 ) );  						Assert.That( e.Arguments[ 0 ]' Is.EqualTo( arg1 ) );  						Assert.That( e.Arguments[ 1 ]' Is.EqualTo( arg2 ) );  						e.Exception = new Exception( Guid.NewGuid().ToString() );  					}'  					new RpcServerConfiguration() { IsDebugMode = false }'  					arg1'  					arg2'  					responseContext =>  					{  						Assert.That( Unpacking.UnpackObject( responseContext.GetErrorData() ).Value.Equals( rpcError.Identifier )' "{0}!={1}"' Unpacking.UnpackObject( responseContext.GetErrorData() ).Value' rpcError.Identifier );  						var exception = new RpcException( rpcError' Unpacking.UnpackObject( responseContext.GetReturnValueData() ).Value );  						Assert.That( exception.RpcError.Identifier' Is.EqualTo( rpcError.Identifier ) );  						Assert.That( exception.RpcError.ErrorCode' Is.EqualTo( rpcError.ErrorCode ) );  						Assert.That( exception.Message' Is.EqualTo( rpcError.DefaultMessageInvariant ) );  						Assert.That( exception.DebugInformation' Is.Empty );  					}  				);
Magic Number,MsgPack.Rpc.Server.Dispatch,ServiceInvokerGeneratorTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\ServiceInvokerGeneratorTest.cs,TestGetServiceInvoker_ReturnsValidInvoker_ErrorCase_IsDebugMode_NotRpcError_SpecifiedMessage,The following statement contains a magic number: this.TestGetServiceInvokerCore<string' int' bool>(  					( sender' e ) =>  					{  						Assert.That( e.Arguments.Length' Is.EqualTo( 2 ) );  						Assert.That( e.Arguments[ 0 ]' Is.EqualTo( arg1 ) );  						Assert.That( e.Arguments[ 1 ]' Is.EqualTo( arg2 ) );  						e.Exception = new Exception( message );  					}'  					new RpcServerConfiguration() { IsDebugMode = true }'  					arg1'  					arg2'  					responseContext =>  					{  						Assert.That( Unpacking.UnpackObject( responseContext.GetErrorData() ).Value.Equals( rpcError.Identifier ) );  						var exception = new RpcException( rpcError' Unpacking.UnpackObject( responseContext.GetReturnValueData() ).Value );  						Assert.That( exception.RpcError.Identifier' Is.EqualTo( rpcError.Identifier ) );  						Assert.That( exception.RpcError.ErrorCode' Is.EqualTo( rpcError.ErrorCode ) );  						Assert.That( exception.Message' Is.EqualTo( message ) );  						Assert.That( exception.DebugInformation' Is.StringContaining( message ).And.Not.EqualTo( message ) );  					}  				);
Magic Number,MsgPack.Rpc.Server.Dispatch,ServiceInvokerGeneratorTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\ServiceInvokerGeneratorTest.cs,TestGetServiceInvoker_ReturnsValidInvoker_ErrorCase_IsNotDebugMode_RpcError_WithMessageAndDebugInformation,The following statement contains a magic number: this.TestGetServiceInvokerCore<string' int' bool>(  					( sender' e ) =>  					{  						Assert.That( e.Arguments.Length' Is.EqualTo( 2 ) );  						Assert.That( e.Arguments[ 0 ]' Is.EqualTo( arg1 ) );  						Assert.That( e.Arguments[ 1 ]' Is.EqualTo( arg2 ) );  						e.Exception = new RpcException( rpcError' message' debugInformation );  					}'  					new RpcServerConfiguration() { IsDebugMode = false }'  					arg1'  					arg2'  					responseContext =>  					{  						Assert.That( Unpacking.UnpackObject( responseContext.GetErrorData() ).Value.Equals( rpcError.Identifier ) );  						var exception = new RpcException( rpcError' Unpacking.UnpackObject( responseContext.GetReturnValueData() ).Value );  						Assert.That( exception.RpcError.Identifier' Is.EqualTo( rpcError.Identifier ) );  						Assert.That( exception.RpcError.ErrorCode' Is.EqualTo( rpcError.ErrorCode ) );  						Assert.That( exception.Message' Is.EqualTo( rpcError.DefaultMessageInvariant ) );  						Assert.That( exception.DebugInformation' Is.Empty );  					}  				);
Magic Number,MsgPack.Rpc.Server.Dispatch,ServiceInvokerGeneratorTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\ServiceInvokerGeneratorTest.cs,TestGetServiceInvoker_ReturnsValidInvoker_ErrorCase_IsDebugMode_RpcError_WithMessageAndDebugInformation,The following statement contains a magic number: this.TestGetServiceInvokerCore<string' int' bool>(  					( sender' e ) =>  					{  						Assert.That( e.Arguments.Length' Is.EqualTo( 2 ) );  						Assert.That( e.Arguments[ 0 ]' Is.EqualTo( arg1 ) );  						Assert.That( e.Arguments[ 1 ]' Is.EqualTo( arg2 ) );  						e.Exception = new RpcException( rpcError' message' debugInformation );  					}'  					new RpcServerConfiguration() { IsDebugMode = true }'  					arg1'  					arg2'  					responseContext =>  					{  						Assert.That( Unpacking.UnpackObject( responseContext.GetErrorData() ).Value.Equals( rpcError.Identifier ) );  						var exception = new RpcException( rpcError' Unpacking.UnpackObject( responseContext.GetReturnValueData() ).Value );  						Assert.That( exception.RpcError.Identifier' Is.EqualTo( rpcError.Identifier ) );  						Assert.That( exception.RpcError.ErrorCode' Is.EqualTo( rpcError.ErrorCode ) );  						Assert.That( exception.Message' Is.EqualTo( message ) );  						Assert.That( exception.DebugInformation' Is.EqualTo( debugInformation ) );  					}  				);
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,TestAdd_NotNull_NonDefaultScope_AppendVersion_True,The following statement contains a magic number: Assert.That(  				TestAddCore(  					CreateOperation( "M"' "S"' 1 )'  					CreateOperation( "M"' "S"' 2 )  				)'  				Is.True  			);
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,GetTestTarget,The following statement contains a magic number: result.Add( CreateOperation( "Method"' String.Empty' 2 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,GetTestTarget,The following statement contains a magic number: result.Add( CreateOperation( "Method_"' String.Empty' 2 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,GetTestTarget,The following statement contains a magic number: result.Add( CreateOperation( "Method"' "Scope_"' 2 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,GetTestTarget,The following statement contains a magic number: result.Add( CreateOperation( "Method_"' "Scope_"' 2 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,GetTestTarget,The following statement contains a magic number: result.Add( CreateOperation( "Method"' "Scope"' 2 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,GetTestTarget,The following statement contains a magic number: result.Add( CreateOperation( "Method_"' "Scope"' 2 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,TestGet_String_VersionOmitted_Latest,The following statement contains a magic number: Assert.That( result.Service.Version' Is.EqualTo( 2 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,TestGet_String_ScopeAndVersionOmitted_DefaultLatest,The following statement contains a magic number: Assert.That( result.Service.Version' Is.EqualTo( 2 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,TestGet_String_String_Int32_VersionDiffer_Null,The following statement contains a magic number: Assert.That( target.Get( "Method"' "Scope"' 3 )' Is.Null );
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,TestGet_String_String_Int32_VersionOmitted_Latest,The following statement contains a magic number: Assert.That( result.Service.Version' Is.EqualTo( 2 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,TestGet_String_String_Int32_ScopeAndVersionOmitted_DefaultLatest,The following statement contains a magic number: Assert.That( result.Service.Version' Is.EqualTo( 2 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,TestRemove_String_String_Int32_VersionNotMatch_False,The following statement contains a magic number: Assert.That( target.Remove( "Method"' "Scope"' 3 )' Is.False );
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,TestGetMethods_Exist_ReturnsAll,The following statement contains a magic number: Assert.That( result.Count' Is.EqualTo( 2 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,TestGetMethods_Exist_ReturnsAll,The following statement contains a magic number: Assert.That( result.Sum( m => m.Value.Count() )' Is.EqualTo( 4 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,TestGetMethods_Exist_ReturnsAll,The following statement contains a magic number: Assert.That( result[ "Method" ].Contains( target.Get( "Method"' "Scope"' 2 ) ) );
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,TestGetMethods_Exist_ReturnsAll,The following statement contains a magic number: Assert.That( result[ "Method_" ].Contains( target.Get( "Method_"' "Scope"' 2 ) ) );
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,TestGetVersions_Exist_ReturnsAll,The following statement contains a magic number: Assert.That( result.Length' Is.EqualTo( 2 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,TestGetVersions_Exist_ReturnsAll,The following statement contains a magic number: Assert.That( result.Contains( target.Get( "Method"' "Scope"' 2 ) ) );
Magic Number,MsgPack.Rpc.Server.Dispatch,VersionedOperationCatalogTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\VersionedOperationCatalogTest.cs,TestGetEnumerator_Exist_ReturnsAll,The following statement contains a magic number: Assert.That( result.Length' Is.EqualTo( 12 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch.SvcFileInterop,InitialStateTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\SvcFileInterop\InitialStateTest.cs,TestParse_TrailingWhitespace_ProceedsByOneAndFinallyTransitToStartTagFoundState,The following statement contains a magic number: i < 4
Magic Number,MsgPack.Rpc.Server.Dispatch.SvcFileInterop,SvcDirectiveParserStateTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\SvcFileInterop\SvcDirectiveParserStateTest.cs,TestParse_LineNumberAndPosition,The following statement contains a magic number: Assert.That( target.Position' Is.EqualTo( 2 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch.SvcFileInterop,SvcDirectiveParserStateTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\SvcFileInterop\SvcDirectiveParserStateTest.cs,TestParse_LineNumberAndPosition,The following statement contains a magic number: Assert.That( target.Position' Is.EqualTo( 3 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch.SvcFileInterop,SvcDirectiveParserStateTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\SvcFileInterop\SvcDirectiveParserStateTest.cs,TestParse_LineNumberAndPosition,The following statement contains a magic number: Assert.That( target.LineNumber' Is.EqualTo( 2 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch.SvcFileInterop,SvcDirectiveParserStateTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\SvcFileInterop\SvcDirectiveParserStateTest.cs,TestParse_LineNumberAndPosition,The following statement contains a magic number: Assert.That( target.LineNumber' Is.EqualTo( 2 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch.SvcFileInterop,SvcDirectiveParserStateTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\SvcFileInterop\SvcDirectiveParserStateTest.cs,TestParse_LineNumberAndPosition,The following statement contains a magic number: Assert.That( target.Position' Is.EqualTo( 2 ) );
Magic Number,MsgPack.Rpc.Server.Dispatch.SvcFileInterop,SvcDirectiveParserStateTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Dispatch\SvcFileInterop\SvcDirectiveParserStateTest.cs,TestParse_LineNumberAndPosition,The following statement contains a magic number: Assert.That( target.LineNumber' Is.EqualTo( 2 ) );
Magic Number,MsgPack.Rpc.Server.Protocols.Filters,ServerQuotaMessageFilterTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\Filters\ServerQuotaMessageFilterTest.cs,TestIsEqualToQuota_Ok,The following statement contains a magic number: long quota = 16;
Magic Number,MsgPack.Rpc.Server.Protocols.Filters,ServerQuotaMessageFilterTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\Filters\ServerQuotaMessageFilterTest.cs,TestIsEqualToQuota_Ok,The following statement contains a magic number: ServerTransportTest.TestFiltersCore(  				( argumentPacker' currentLength ) =>  				{  					var remaining = quota - currentLength - 2; // header(FixArray) + header(FixRaw) = 2 byte  					argumentPacker.PackArrayHeader( 1 );  					argumentPacker.PackRaw( new byte[ remaining ] );  				}'  				null'  				( request' response ) =>  				{  					// No error occurred.  					var responseMessage = Unpacking.UnpackArray( response ).Value;  					Assert.That( responseMessage[ 2 ].IsNil' "{0}:{1}"' responseMessage[ 2 ]' responseMessage[ 3 ] );  				}'  				new ServerQuotaMessageFilterProvider( quota )  			);
Magic Number,MsgPack.Rpc.Server.Protocols.Filters,ServerQuotaMessageFilterTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\Filters\ServerQuotaMessageFilterTest.cs,TestIsEqualToQuota_Ok,The following statement contains a magic number: ServerTransportTest.TestFiltersCore(  				( argumentPacker' currentLength ) =>  				{  					var remaining = quota - currentLength - 2; // header(FixArray) + header(FixRaw) = 2 byte  					argumentPacker.PackArrayHeader( 1 );  					argumentPacker.PackRaw( new byte[ remaining ] );  				}'  				null'  				( request' response ) =>  				{  					// No error occurred.  					var responseMessage = Unpacking.UnpackArray( response ).Value;  					Assert.That( responseMessage[ 2 ].IsNil' "{0}:{1}"' responseMessage[ 2 ]' responseMessage[ 3 ] );  				}'  				new ServerQuotaMessageFilterProvider( quota )  			);
Magic Number,MsgPack.Rpc.Server.Protocols.Filters,ServerQuotaMessageFilterTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\Filters\ServerQuotaMessageFilterTest.cs,TestIsEqualToQuota_Ok,The following statement contains a magic number: ServerTransportTest.TestFiltersCore(  				( argumentPacker' currentLength ) =>  				{  					var remaining = quota - currentLength - 2; // header(FixArray) + header(FixRaw) = 2 byte  					argumentPacker.PackArrayHeader( 1 );  					argumentPacker.PackRaw( new byte[ remaining ] );  				}'  				null'  				( request' response ) =>  				{  					// No error occurred.  					var responseMessage = Unpacking.UnpackArray( response ).Value;  					Assert.That( responseMessage[ 2 ].IsNil' "{0}:{1}"' responseMessage[ 2 ]' responseMessage[ 3 ] );  				}'  				new ServerQuotaMessageFilterProvider( quota )  			);
Magic Number,MsgPack.Rpc.Server.Protocols.Filters,ServerQuotaMessageFilterTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\Filters\ServerQuotaMessageFilterTest.cs,TestIsEqualToQuota_Ok,The following statement contains a magic number: ServerTransportTest.TestFiltersCore(  				( argumentPacker' currentLength ) =>  				{  					var remaining = quota - currentLength - 2; // header(FixArray) + header(FixRaw) = 2 byte  					argumentPacker.PackArrayHeader( 1 );  					argumentPacker.PackRaw( new byte[ remaining ] );  				}'  				null'  				( request' response ) =>  				{  					// No error occurred.  					var responseMessage = Unpacking.UnpackArray( response ).Value;  					Assert.That( responseMessage[ 2 ].IsNil' "{0}:{1}"' responseMessage[ 2 ]' responseMessage[ 3 ] );  				}'  				new ServerQuotaMessageFilterProvider( quota )  			);
Magic Number,MsgPack.Rpc.Server.Protocols.Filters,ServerQuotaMessageFilterTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\Filters\ServerQuotaMessageFilterTest.cs,TestIsGreatorThanQuota_MessagetooLongError,The following statement contains a magic number: long quota = 16;
Magic Number,MsgPack.Rpc.Server.Protocols.Filters,ServerQuotaMessageFilterTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\Filters\ServerQuotaMessageFilterTest.cs,TestIsGreatorThanQuota_MessagetooLongError,The following statement contains a magic number: ServerTransportTest.TestFiltersCore(  				( argumentPacker' currentLength ) =>  				{  					var remaining = quota - currentLength - 2; // header(FixArray) + header(FixRaw) = 2 byte  					argumentPacker.PackArrayHeader( 1 );  					argumentPacker.PackRaw( new byte[ remaining + 1 ] );  				}'  				null'  				( request' response ) =>  				{  					// Error occurred.  					var responseMessage = Unpacking.UnpackArray( response ).Value;  					Assert.That( responseMessage[ 2 ] == RpcError.MessageTooLargeError.Identifier' "{0}:{1}"' responseMessage[ 2 ]' responseMessage[ 3 ] );  				}'  				new ServerQuotaMessageFilterProvider( quota )  			);
Magic Number,MsgPack.Rpc.Server.Protocols.Filters,ServerQuotaMessageFilterTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\Filters\ServerQuotaMessageFilterTest.cs,TestIsGreatorThanQuota_MessagetooLongError,The following statement contains a magic number: ServerTransportTest.TestFiltersCore(  				( argumentPacker' currentLength ) =>  				{  					var remaining = quota - currentLength - 2; // header(FixArray) + header(FixRaw) = 2 byte  					argumentPacker.PackArrayHeader( 1 );  					argumentPacker.PackRaw( new byte[ remaining + 1 ] );  				}'  				null'  				( request' response ) =>  				{  					// Error occurred.  					var responseMessage = Unpacking.UnpackArray( response ).Value;  					Assert.That( responseMessage[ 2 ] == RpcError.MessageTooLargeError.Identifier' "{0}:{1}"' responseMessage[ 2 ]' responseMessage[ 3 ] );  				}'  				new ServerQuotaMessageFilterProvider( quota )  			);
Magic Number,MsgPack.Rpc.Server.Protocols.Filters,ServerQuotaMessageFilterTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\Filters\ServerQuotaMessageFilterTest.cs,TestIsGreatorThanQuota_MessagetooLongError,The following statement contains a magic number: ServerTransportTest.TestFiltersCore(  				( argumentPacker' currentLength ) =>  				{  					var remaining = quota - currentLength - 2; // header(FixArray) + header(FixRaw) = 2 byte  					argumentPacker.PackArrayHeader( 1 );  					argumentPacker.PackRaw( new byte[ remaining + 1 ] );  				}'  				null'  				( request' response ) =>  				{  					// Error occurred.  					var responseMessage = Unpacking.UnpackArray( response ).Value;  					Assert.That( responseMessage[ 2 ] == RpcError.MessageTooLargeError.Identifier' "{0}:{1}"' responseMessage[ 2 ]' responseMessage[ 3 ] );  				}'  				new ServerQuotaMessageFilterProvider( quota )  			);
Magic Number,MsgPack.Rpc.Server.Protocols.Filters,ServerQuotaMessageFilterTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\Filters\ServerQuotaMessageFilterTest.cs,TestIsGreatorThanQuota_MessagetooLongError,The following statement contains a magic number: ServerTransportTest.TestFiltersCore(  				( argumentPacker' currentLength ) =>  				{  					var remaining = quota - currentLength - 2; // header(FixArray) + header(FixRaw) = 2 byte  					argumentPacker.PackArrayHeader( 1 );  					argumentPacker.PackRaw( new byte[ remaining + 1 ] );  				}'  				null'  				( request' response ) =>  				{  					// Error occurred.  					var responseMessage = Unpacking.UnpackArray( response ).Value;  					Assert.That( responseMessage[ 2 ] == RpcError.MessageTooLargeError.Identifier' "{0}:{1}"' responseMessage[ 2 ]' responseMessage[ 3 ] );  				}'  				new ServerQuotaMessageFilterProvider( quota )  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerRequestContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerRequestContextTest.cs,InitializeBuffers,The following statement contains a magic number: target.ArgumentsCount = 2;
Magic Number,MsgPack.Rpc.Server.Protocols,ServerRequestContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerRequestContextTest.cs,InitializeBuffers,The following statement contains a magic number: target.UnpackedArgumentsCount = 3;
Magic Number,MsgPack.Rpc.Server.Protocols,ServerRequestContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerRequestContextTest.cs,InitializeBuffers,The following statement contains a magic number: target.MessageId = 123;
Magic Number,MsgPack.Rpc.Server.Protocols,ServerRequestContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerRequestContextTest.cs,TestClear,The following statement contains a magic number: TestCore( ( target' _ ) =>  				{  					InitializeBuffers( target );  					target.SetReceivedData( new ArraySegment<byte>[] { new ArraySegment<byte>( new byte[] { 1 } )' new ArraySegment<byte>( new byte[] { 1' 2 } ) } );  					target.SetReceivingBuffer( new byte[] { 1 } );  					target.Clear();    					Assert.That( target.CurrentReceivingBuffer' Is.Not.Null.And.Not.Empty );  					Assert.That( target.ReceivedData' Is.Not.Null.And.Not.Empty );  					Assert.That( target.ArgumentsBuffer.Length' Is.EqualTo( 0 ) );  					Assert.That( target.ArgumentsBufferPacker' Is.Null );  					Assert.That( target.ArgumentsBufferUnpacker' Is.Null );  					Assert.That( target.ArgumentsCount' Is.EqualTo( 0 ) );  					Assert.That( target.ArgumentsUnpacker' Is.Null );  					Assert.That( target.CompletedSynchronously' Is.False );  					Assert.That( target.HeaderUnpacker' Is.Null );  					Assert.That( target.MessageId' Is.Null );  					Assert.That( target.MessageType' Is.EqualTo( MessageType.Response ) );  					Assert.That( target.MethodName' Is.Null );  					Assert.That( target.RootUnpacker' Is.Null );  					Assert.That( target.UnpackedArgumentsCount' Is.EqualTo( 0 ) );  					Assert.That( target.UnpackingBuffer' Is.Null );  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerRequestContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerRequestContextTest.cs,TestClearBuffers,The following statement contains a magic number: TestCore( ( target' _ ) =>  				{  					InitializeBuffers( target );  					target.SetReceivedData( new ArraySegment<byte>[] { new ArraySegment<byte>( new byte[] { 1 } )' new ArraySegment<byte>( new byte[] { 1' 2 } ) } );  					target.SetReceivingBuffer( new byte[] { 1 } );  					target.ClearBuffers();    					Assert.That( target.CurrentReceivingBuffer' Is.Not.Null.And.Not.Empty );  					Assert.That( target.ReceivedData' Is.Not.Null.And.Not.Empty );    					Assert.That( target.ArgumentsBuffer.Length' Is.Not.EqualTo( 0 ) );  					Assert.That( target.ArgumentsBufferPacker' Is.Null );  					Assert.That( target.ArgumentsBufferUnpacker' Is.Null );  					Assert.That( target.ArgumentsCount' Is.EqualTo( 0 ) );  					Assert.That( target.ArgumentsUnpacker' Is.Not.Null );  					Assert.That( target.HeaderUnpacker' Is.Null );  					Assert.That( target.MessageId' Is.Not.Null );  					Assert.That( target.MessageType' Is.EqualTo( MessageType.Request ) );  					Assert.That( target.MethodName' Is.Not.Null );  					Assert.That( target.RootUnpacker' Is.Null );  					Assert.That( target.UnpackedArgumentsCount' Is.EqualTo( 0 ) );  					Assert.That( target.UnpackingBuffer' Is.Not.Null );  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerRequestContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerRequestContextTest.cs,TestClearDispatchContext,The following statement contains a magic number: TestCore( ( target' _ ) =>  				{  					InitializeBuffers( target );  					target.SetReceivedData( new ArraySegment<byte>[] { new ArraySegment<byte>( new byte[] { 1 } )' new ArraySegment<byte>( new byte[] { 1' 2 } ) } );  					target.SetReceivingBuffer( new byte[] { 1 } );  					target.ClearDispatchContext();    					Assert.That( target.CurrentReceivingBuffer' Is.Not.Null.And.Not.Empty );  					Assert.That( target.ReceivedData' Is.Not.Null.And.Not.Empty );  					Assert.That( target.ArgumentsBuffer.Length' Is.EqualTo( 0 ) );  					Assert.That( target.ArgumentsBufferPacker' Is.Not.Null );  					Assert.That( target.ArgumentsBufferUnpacker' Is.Not.Null );  					Assert.That( target.ArgumentsCount' Is.Not.EqualTo( 0 ) );  					Assert.That( target.ArgumentsUnpacker' Is.Null );  					Assert.That( target.HeaderUnpacker' Is.Not.Null );  					Assert.That( target.MessageId' Is.Not.Null );  					Assert.That( target.MessageType' Is.EqualTo( MessageType.Response ) );  					Assert.That( target.MethodName' Is.Null );  					Assert.That( target.RootUnpacker' Is.Not.Null );  					Assert.That( target.UnpackedArgumentsCount' Is.Not.EqualTo( 0 ) );  					Assert.That( target.UnpackingBuffer' Is.Not.Null );  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerResponseContextTest.cs,TestSerialize_OnNullResult_ReturnValueDataIsNil_ErrorDataIsNil,The following statement contains a magic number: TestCore( ( target' transport ) =>  				{  					target.MessageId = 123;  					target.Serialize( default( object )' RpcErrorMessage.Success' null );    					Assert.That( Unpacking.UnpackObject( target.GetReturnValueData() ).Value.Equals( MessagePackObject.Nil ) );  					Assert.That( Unpacking.UnpackObject( target.GetErrorData() ).Value.Equals( MessagePackObject.Nil ) );  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerResponseContextTest.cs,TestSerialize_OnNotNullResult_ReturnValueDataIsSet_ErrorDataIsNil,The following statement contains a magic number: TestCore( ( target' transport ) =>  				{  					target.MessageId = 123;  					target.Serialize( "Test"' RpcErrorMessage.Success' MessagePackSerializer.Get<string>() );    					Assert.That( Unpacking.UnpackObject( target.GetReturnValueData() ).Value.Equals( "Test" ) );  					Assert.That( Unpacking.UnpackObject( target.GetErrorData() ).Value.Equals( MessagePackObject.Nil ) );  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerResponseContextTest.cs,TestSerialize_OnError_ReturnValueDataIsSet_ErrorDataIsSet,The following statement contains a magic number: TestCore( ( target' transport ) =>  				{  					target.MessageId = 123;  					target.Serialize( default( object )' new RpcErrorMessage( RpcError.CallError' "Detail" )' null );    					Assert.That( Unpacking.UnpackObject( target.GetReturnValueData() ).Value.Equals( "Detail" ) );  					Assert.That( Unpacking.UnpackObject( target.GetErrorData() ).Value.Equals( RpcError.CallError.Identifier ) );  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerResponseContextTest.cs,TestPrepare_SegmentsAreAllSet,The following statement contains a magic number: TestCore( ( target' transport ) =>  				{  					target.MessageId = 123;  					target.Serialize( default( object )' new RpcErrorMessage( RpcError.CallError' "Detail" )' null );  					target.Prepare( true );    					Assert.That( target.SendingBuffer.Length' Is.EqualTo( 4 ) );  					Assert.That( target.SendingBuffer[ 0 ].AsEnumerable().ToArray()' Is.EqualTo( new byte[] { 0x94' 0x1 } ) );  					AssertArraySegment( 123' target.SendingBuffer[ 1 ] );  					AssertArraySegment( RpcError.CallError.Identifier' target.SendingBuffer[ 2 ] );  					AssertArraySegment( "Detail"' target.SendingBuffer[ 3 ] );  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerResponseContextTest.cs,TestPrepare_SegmentsAreAllSet,The following statement contains a magic number: TestCore( ( target' transport ) =>  				{  					target.MessageId = 123;  					target.Serialize( default( object )' new RpcErrorMessage( RpcError.CallError' "Detail" )' null );  					target.Prepare( true );    					Assert.That( target.SendingBuffer.Length' Is.EqualTo( 4 ) );  					Assert.That( target.SendingBuffer[ 0 ].AsEnumerable().ToArray()' Is.EqualTo( new byte[] { 0x94' 0x1 } ) );  					AssertArraySegment( 123' target.SendingBuffer[ 1 ] );  					AssertArraySegment( RpcError.CallError.Identifier' target.SendingBuffer[ 2 ] );  					AssertArraySegment( "Detail"' target.SendingBuffer[ 3 ] );  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerResponseContextTest.cs,TestPrepare_SegmentsAreAllSet,The following statement contains a magic number: TestCore( ( target' transport ) =>  				{  					target.MessageId = 123;  					target.Serialize( default( object )' new RpcErrorMessage( RpcError.CallError' "Detail" )' null );  					target.Prepare( true );    					Assert.That( target.SendingBuffer.Length' Is.EqualTo( 4 ) );  					Assert.That( target.SendingBuffer[ 0 ].AsEnumerable().ToArray()' Is.EqualTo( new byte[] { 0x94' 0x1 } ) );  					AssertArraySegment( 123' target.SendingBuffer[ 1 ] );  					AssertArraySegment( RpcError.CallError.Identifier' target.SendingBuffer[ 2 ] );  					AssertArraySegment( "Detail"' target.SendingBuffer[ 3 ] );  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerResponseContextTest.cs,TestPrepare_SegmentsAreAllSet,The following statement contains a magic number: TestCore( ( target' transport ) =>  				{  					target.MessageId = 123;  					target.Serialize( default( object )' new RpcErrorMessage( RpcError.CallError' "Detail" )' null );  					target.Prepare( true );    					Assert.That( target.SendingBuffer.Length' Is.EqualTo( 4 ) );  					Assert.That( target.SendingBuffer[ 0 ].AsEnumerable().ToArray()' Is.EqualTo( new byte[] { 0x94' 0x1 } ) );  					AssertArraySegment( 123' target.SendingBuffer[ 1 ] );  					AssertArraySegment( RpcError.CallError.Identifier' target.SendingBuffer[ 2 ] );  					AssertArraySegment( "Detail"' target.SendingBuffer[ 3 ] );  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerResponseContextTest.cs,TestPrepare_SegmentsAreAllSet,The following statement contains a magic number: TestCore( ( target' transport ) =>  				{  					target.MessageId = 123;  					target.Serialize( default( object )' new RpcErrorMessage( RpcError.CallError' "Detail" )' null );  					target.Prepare( true );    					Assert.That( target.SendingBuffer.Length' Is.EqualTo( 4 ) );  					Assert.That( target.SendingBuffer[ 0 ].AsEnumerable().ToArray()' Is.EqualTo( new byte[] { 0x94' 0x1 } ) );  					AssertArraySegment( 123' target.SendingBuffer[ 1 ] );  					AssertArraySegment( RpcError.CallError.Identifier' target.SendingBuffer[ 2 ] );  					AssertArraySegment( "Detail"' target.SendingBuffer[ 3 ] );  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerResponseContextTest.cs,TestClear,The following statement contains a magic number: TestCore( ( target' transport ) =>  				{  					target.MessageId = 123;  					target.Serialize( default( object )' new RpcErrorMessage( RpcError.CallError' "Detail" )' null );  					target.Prepare( true );  					target.SetCompletedSynchronously();    					target.Clear();    					Assert.That( target.ErrorDataPacker' Is.Not.Null );  					Assert.That( target.ReturnDataPacker' Is.Not.Null );  					Assert.That( target.GetReturnValueData()' Is.Not.Null.And.Empty );  					Assert.That( target.GetErrorData()' Is.Not.Null.And.Empty );  					Assert.That( target.MessageId' Is.Null );  					Assert.That( target.SendingBuffer[ 0 ].AsEnumerable().ToArray()' Is.EqualTo( new byte[] { 0x94' 0x1 } ) );  					Assert.That( target.SendingBuffer[ 1 ].AsEnumerable().ToArray()' Is.Empty );  					Assert.That( target.SendingBuffer[ 2 ].AsEnumerable().ToArray()' Is.Empty );  					Assert.That( target.SendingBuffer[ 3 ].AsEnumerable().ToArray()' Is.Empty );  					Assert.That( target.CompletedSynchronously' Is.False );  					Assert.That( target.BufferList' Is.Null );  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerResponseContextTest.cs,TestClear,The following statement contains a magic number: TestCore( ( target' transport ) =>  				{  					target.MessageId = 123;  					target.Serialize( default( object )' new RpcErrorMessage( RpcError.CallError' "Detail" )' null );  					target.Prepare( true );  					target.SetCompletedSynchronously();    					target.Clear();    					Assert.That( target.ErrorDataPacker' Is.Not.Null );  					Assert.That( target.ReturnDataPacker' Is.Not.Null );  					Assert.That( target.GetReturnValueData()' Is.Not.Null.And.Empty );  					Assert.That( target.GetErrorData()' Is.Not.Null.And.Empty );  					Assert.That( target.MessageId' Is.Null );  					Assert.That( target.SendingBuffer[ 0 ].AsEnumerable().ToArray()' Is.EqualTo( new byte[] { 0x94' 0x1 } ) );  					Assert.That( target.SendingBuffer[ 1 ].AsEnumerable().ToArray()' Is.Empty );  					Assert.That( target.SendingBuffer[ 2 ].AsEnumerable().ToArray()' Is.Empty );  					Assert.That( target.SendingBuffer[ 3 ].AsEnumerable().ToArray()' Is.Empty );  					Assert.That( target.CompletedSynchronously' Is.False );  					Assert.That( target.BufferList' Is.Null );  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerResponseContextTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerResponseContextTest.cs,TestClear,The following statement contains a magic number: TestCore( ( target' transport ) =>  				{  					target.MessageId = 123;  					target.Serialize( default( object )' new RpcErrorMessage( RpcError.CallError' "Detail" )' null );  					target.Prepare( true );  					target.SetCompletedSynchronously();    					target.Clear();    					Assert.That( target.ErrorDataPacker' Is.Not.Null );  					Assert.That( target.ReturnDataPacker' Is.Not.Null );  					Assert.That( target.GetReturnValueData()' Is.Not.Null.And.Empty );  					Assert.That( target.GetErrorData()' Is.Not.Null.And.Empty );  					Assert.That( target.MessageId' Is.Null );  					Assert.That( target.SendingBuffer[ 0 ].AsEnumerable().ToArray()' Is.EqualTo( new byte[] { 0x94' 0x1 } ) );  					Assert.That( target.SendingBuffer[ 1 ].AsEnumerable().ToArray()' Is.Empty );  					Assert.That( target.SendingBuffer[ 2 ].AsEnumerable().ToArray()' Is.Empty );  					Assert.That( target.SendingBuffer[ 3 ].AsEnumerable().ToArray()' Is.Empty );  					Assert.That( target.CompletedSynchronously' Is.False );  					Assert.That( target.BufferList' Is.Null );  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportManager_1Test,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportManager`1Test.cs,TestBeginShutdown_ShutdownCompletedOccurredAndSocketShutdowned,The following statement contains a magic number: var listener = new TcpListener( IPAddress.Loopback' 19860 );
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportManager_1Test,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportManager`1Test.cs,TestBeginShutdown_ShutdownCompletedOccurredAndSocketShutdowned,The following statement contains a magic number: activeTransport.BoundSocket.Connect( IPAddress.Loopback' 19860 );
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestShutdownCore,The following statement contains a magic number: var arg = Environment.TickCount % 3;
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestShutdownCore,The following statement contains a magic number: var returnValue = Environment.TickCount % 5;
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestShutdownCore,The following statement contains a magic number: TestCore(  				( target' controller ) =>  				{  					testEnvironment = Tuple.Create( target' controller );  					using ( var serverShutdownWaitHandle = new ManualResetEventSlim() )  					using ( var receivingWaitHandle = new ManualResetEventSlim() )  					using ( var shutdownPacketWaitHandle = new ManualResetEventSlim() )  					using ( var responseWaitHandle = new ManualResetEventSlim() )  					{  						byte[] response = null;    						if ( isReceiving )  						{  							// detects recursive dequeue.  							target.Receiving += ( sender' e ) => receivingWaitHandle.Set();  						}    						target.ShutdownCompleted += ( sender' e ) => serverShutdownWaitHandle.Set();    						controller.Response +=  							( sender' e ) =>  							{  								if ( e.Data.Length == 0 )  								{  									shutdownPacketWaitHandle.Set();  								}  								else  								{  									Interlocked.Exchange( ref response' e.Data );  									responseWaitHandle.Set();  								}  							};    						int messageId = Math.Abs( Environment.TickCount % 10 );  						if ( !isEmpty )  						{  							using ( var buffer = new MemoryStream() )  							{  								using ( var packer = Packer.Create( buffer' false ) )  								{  									packer.PackArrayHeader( 4 );  									packer.Pack( ( int )MessageType.Request );  									packer.Pack( messageId );  									packer.PackString( "Test" );  									packer.PackArrayHeader( 0 );  								}    								var sendingData = buffer.ToArray();    								controller.FeedReceiveBuffer( sendingData.Take( sendingData.Length / 2 ).ToArray() );    								if ( isReceiving )  								{  									Assert.That( receivingWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  									if ( isClientShutdown )  									{  										controller.FeedReceiveBuffer( new byte[ 0 ] );  									}  									else  									{  										target.BeginShutdown();  										controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  									}  								}  								else  								{  									// Shutdown will be initiated in callback.  									controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  								}  							}  						}  						else  						{  							// Initiate shutdown now.    							if ( isClientShutdown )  							{  								controller.FeedReceiveBuffer( new byte[ 0 ] );  							}  							else  							{  								target.BeginShutdown();  							}  						}    						Assert.That( serverShutdownWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  						Assert.That( shutdownPacketWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );    						if ( !isReceiving && !isEmpty )  						{  							Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  							var result = Unpacking.UnpackObject( response ).Value.AsList();    							Assert.That( result.Count' Is.EqualTo( 4 ) );  							Assert.That( result[ 0 ] == ( int )MessageType.Response );  							Assert.That( result[ 1 ] == messageId' "{0} != {1}"' result[ 1 ]' messageId );  							Assert.That( result[ 2 ].IsNil' "{0}:{1}"' result[ 2 ]' result[ 3 ] );  							Assert.That( result[ 3 ] == returnValue );  						}  					}  				}'  				( messageId' args ) =>  				{  					if ( !isReceiving )  					{  						// Initiate shutdown now.  						if ( isClientShutdown )  						{  							testEnvironment.Item2.FeedReceiveBuffer( new byte[ 0 ] );  						}  						else  						{  							testEnvironment.Item1.BeginShutdown();  						}  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestShutdownCore,The following statement contains a magic number: TestCore(  				( target' controller ) =>  				{  					testEnvironment = Tuple.Create( target' controller );  					using ( var serverShutdownWaitHandle = new ManualResetEventSlim() )  					using ( var receivingWaitHandle = new ManualResetEventSlim() )  					using ( var shutdownPacketWaitHandle = new ManualResetEventSlim() )  					using ( var responseWaitHandle = new ManualResetEventSlim() )  					{  						byte[] response = null;    						if ( isReceiving )  						{  							// detects recursive dequeue.  							target.Receiving += ( sender' e ) => receivingWaitHandle.Set();  						}    						target.ShutdownCompleted += ( sender' e ) => serverShutdownWaitHandle.Set();    						controller.Response +=  							( sender' e ) =>  							{  								if ( e.Data.Length == 0 )  								{  									shutdownPacketWaitHandle.Set();  								}  								else  								{  									Interlocked.Exchange( ref response' e.Data );  									responseWaitHandle.Set();  								}  							};    						int messageId = Math.Abs( Environment.TickCount % 10 );  						if ( !isEmpty )  						{  							using ( var buffer = new MemoryStream() )  							{  								using ( var packer = Packer.Create( buffer' false ) )  								{  									packer.PackArrayHeader( 4 );  									packer.Pack( ( int )MessageType.Request );  									packer.Pack( messageId );  									packer.PackString( "Test" );  									packer.PackArrayHeader( 0 );  								}    								var sendingData = buffer.ToArray();    								controller.FeedReceiveBuffer( sendingData.Take( sendingData.Length / 2 ).ToArray() );    								if ( isReceiving )  								{  									Assert.That( receivingWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  									if ( isClientShutdown )  									{  										controller.FeedReceiveBuffer( new byte[ 0 ] );  									}  									else  									{  										target.BeginShutdown();  										controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  									}  								}  								else  								{  									// Shutdown will be initiated in callback.  									controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  								}  							}  						}  						else  						{  							// Initiate shutdown now.    							if ( isClientShutdown )  							{  								controller.FeedReceiveBuffer( new byte[ 0 ] );  							}  							else  							{  								target.BeginShutdown();  							}  						}    						Assert.That( serverShutdownWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  						Assert.That( shutdownPacketWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );    						if ( !isReceiving && !isEmpty )  						{  							Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  							var result = Unpacking.UnpackObject( response ).Value.AsList();    							Assert.That( result.Count' Is.EqualTo( 4 ) );  							Assert.That( result[ 0 ] == ( int )MessageType.Response );  							Assert.That( result[ 1 ] == messageId' "{0} != {1}"' result[ 1 ]' messageId );  							Assert.That( result[ 2 ].IsNil' "{0}:{1}"' result[ 2 ]' result[ 3 ] );  							Assert.That( result[ 3 ] == returnValue );  						}  					}  				}'  				( messageId' args ) =>  				{  					if ( !isReceiving )  					{  						// Initiate shutdown now.  						if ( isClientShutdown )  						{  							testEnvironment.Item2.FeedReceiveBuffer( new byte[ 0 ] );  						}  						else  						{  							testEnvironment.Item1.BeginShutdown();  						}  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestShutdownCore,The following statement contains a magic number: TestCore(  				( target' controller ) =>  				{  					testEnvironment = Tuple.Create( target' controller );  					using ( var serverShutdownWaitHandle = new ManualResetEventSlim() )  					using ( var receivingWaitHandle = new ManualResetEventSlim() )  					using ( var shutdownPacketWaitHandle = new ManualResetEventSlim() )  					using ( var responseWaitHandle = new ManualResetEventSlim() )  					{  						byte[] response = null;    						if ( isReceiving )  						{  							// detects recursive dequeue.  							target.Receiving += ( sender' e ) => receivingWaitHandle.Set();  						}    						target.ShutdownCompleted += ( sender' e ) => serverShutdownWaitHandle.Set();    						controller.Response +=  							( sender' e ) =>  							{  								if ( e.Data.Length == 0 )  								{  									shutdownPacketWaitHandle.Set();  								}  								else  								{  									Interlocked.Exchange( ref response' e.Data );  									responseWaitHandle.Set();  								}  							};    						int messageId = Math.Abs( Environment.TickCount % 10 );  						if ( !isEmpty )  						{  							using ( var buffer = new MemoryStream() )  							{  								using ( var packer = Packer.Create( buffer' false ) )  								{  									packer.PackArrayHeader( 4 );  									packer.Pack( ( int )MessageType.Request );  									packer.Pack( messageId );  									packer.PackString( "Test" );  									packer.PackArrayHeader( 0 );  								}    								var sendingData = buffer.ToArray();    								controller.FeedReceiveBuffer( sendingData.Take( sendingData.Length / 2 ).ToArray() );    								if ( isReceiving )  								{  									Assert.That( receivingWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  									if ( isClientShutdown )  									{  										controller.FeedReceiveBuffer( new byte[ 0 ] );  									}  									else  									{  										target.BeginShutdown();  										controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  									}  								}  								else  								{  									// Shutdown will be initiated in callback.  									controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  								}  							}  						}  						else  						{  							// Initiate shutdown now.    							if ( isClientShutdown )  							{  								controller.FeedReceiveBuffer( new byte[ 0 ] );  							}  							else  							{  								target.BeginShutdown();  							}  						}    						Assert.That( serverShutdownWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  						Assert.That( shutdownPacketWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );    						if ( !isReceiving && !isEmpty )  						{  							Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  							var result = Unpacking.UnpackObject( response ).Value.AsList();    							Assert.That( result.Count' Is.EqualTo( 4 ) );  							Assert.That( result[ 0 ] == ( int )MessageType.Response );  							Assert.That( result[ 1 ] == messageId' "{0} != {1}"' result[ 1 ]' messageId );  							Assert.That( result[ 2 ].IsNil' "{0}:{1}"' result[ 2 ]' result[ 3 ] );  							Assert.That( result[ 3 ] == returnValue );  						}  					}  				}'  				( messageId' args ) =>  				{  					if ( !isReceiving )  					{  						// Initiate shutdown now.  						if ( isClientShutdown )  						{  							testEnvironment.Item2.FeedReceiveBuffer( new byte[ 0 ] );  						}  						else  						{  							testEnvironment.Item1.BeginShutdown();  						}  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestShutdownCore,The following statement contains a magic number: TestCore(  				( target' controller ) =>  				{  					testEnvironment = Tuple.Create( target' controller );  					using ( var serverShutdownWaitHandle = new ManualResetEventSlim() )  					using ( var receivingWaitHandle = new ManualResetEventSlim() )  					using ( var shutdownPacketWaitHandle = new ManualResetEventSlim() )  					using ( var responseWaitHandle = new ManualResetEventSlim() )  					{  						byte[] response = null;    						if ( isReceiving )  						{  							// detects recursive dequeue.  							target.Receiving += ( sender' e ) => receivingWaitHandle.Set();  						}    						target.ShutdownCompleted += ( sender' e ) => serverShutdownWaitHandle.Set();    						controller.Response +=  							( sender' e ) =>  							{  								if ( e.Data.Length == 0 )  								{  									shutdownPacketWaitHandle.Set();  								}  								else  								{  									Interlocked.Exchange( ref response' e.Data );  									responseWaitHandle.Set();  								}  							};    						int messageId = Math.Abs( Environment.TickCount % 10 );  						if ( !isEmpty )  						{  							using ( var buffer = new MemoryStream() )  							{  								using ( var packer = Packer.Create( buffer' false ) )  								{  									packer.PackArrayHeader( 4 );  									packer.Pack( ( int )MessageType.Request );  									packer.Pack( messageId );  									packer.PackString( "Test" );  									packer.PackArrayHeader( 0 );  								}    								var sendingData = buffer.ToArray();    								controller.FeedReceiveBuffer( sendingData.Take( sendingData.Length / 2 ).ToArray() );    								if ( isReceiving )  								{  									Assert.That( receivingWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  									if ( isClientShutdown )  									{  										controller.FeedReceiveBuffer( new byte[ 0 ] );  									}  									else  									{  										target.BeginShutdown();  										controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  									}  								}  								else  								{  									// Shutdown will be initiated in callback.  									controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  								}  							}  						}  						else  						{  							// Initiate shutdown now.    							if ( isClientShutdown )  							{  								controller.FeedReceiveBuffer( new byte[ 0 ] );  							}  							else  							{  								target.BeginShutdown();  							}  						}    						Assert.That( serverShutdownWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  						Assert.That( shutdownPacketWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );    						if ( !isReceiving && !isEmpty )  						{  							Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  							var result = Unpacking.UnpackObject( response ).Value.AsList();    							Assert.That( result.Count' Is.EqualTo( 4 ) );  							Assert.That( result[ 0 ] == ( int )MessageType.Response );  							Assert.That( result[ 1 ] == messageId' "{0} != {1}"' result[ 1 ]' messageId );  							Assert.That( result[ 2 ].IsNil' "{0}:{1}"' result[ 2 ]' result[ 3 ] );  							Assert.That( result[ 3 ] == returnValue );  						}  					}  				}'  				( messageId' args ) =>  				{  					if ( !isReceiving )  					{  						// Initiate shutdown now.  						if ( isClientShutdown )  						{  							testEnvironment.Item2.FeedReceiveBuffer( new byte[ 0 ] );  						}  						else  						{  							testEnvironment.Item1.BeginShutdown();  						}  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestShutdownCore,The following statement contains a magic number: TestCore(  				( target' controller ) =>  				{  					testEnvironment = Tuple.Create( target' controller );  					using ( var serverShutdownWaitHandle = new ManualResetEventSlim() )  					using ( var receivingWaitHandle = new ManualResetEventSlim() )  					using ( var shutdownPacketWaitHandle = new ManualResetEventSlim() )  					using ( var responseWaitHandle = new ManualResetEventSlim() )  					{  						byte[] response = null;    						if ( isReceiving )  						{  							// detects recursive dequeue.  							target.Receiving += ( sender' e ) => receivingWaitHandle.Set();  						}    						target.ShutdownCompleted += ( sender' e ) => serverShutdownWaitHandle.Set();    						controller.Response +=  							( sender' e ) =>  							{  								if ( e.Data.Length == 0 )  								{  									shutdownPacketWaitHandle.Set();  								}  								else  								{  									Interlocked.Exchange( ref response' e.Data );  									responseWaitHandle.Set();  								}  							};    						int messageId = Math.Abs( Environment.TickCount % 10 );  						if ( !isEmpty )  						{  							using ( var buffer = new MemoryStream() )  							{  								using ( var packer = Packer.Create( buffer' false ) )  								{  									packer.PackArrayHeader( 4 );  									packer.Pack( ( int )MessageType.Request );  									packer.Pack( messageId );  									packer.PackString( "Test" );  									packer.PackArrayHeader( 0 );  								}    								var sendingData = buffer.ToArray();    								controller.FeedReceiveBuffer( sendingData.Take( sendingData.Length / 2 ).ToArray() );    								if ( isReceiving )  								{  									Assert.That( receivingWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  									if ( isClientShutdown )  									{  										controller.FeedReceiveBuffer( new byte[ 0 ] );  									}  									else  									{  										target.BeginShutdown();  										controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  									}  								}  								else  								{  									// Shutdown will be initiated in callback.  									controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  								}  							}  						}  						else  						{  							// Initiate shutdown now.    							if ( isClientShutdown )  							{  								controller.FeedReceiveBuffer( new byte[ 0 ] );  							}  							else  							{  								target.BeginShutdown();  							}  						}    						Assert.That( serverShutdownWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  						Assert.That( shutdownPacketWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );    						if ( !isReceiving && !isEmpty )  						{  							Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  							var result = Unpacking.UnpackObject( response ).Value.AsList();    							Assert.That( result.Count' Is.EqualTo( 4 ) );  							Assert.That( result[ 0 ] == ( int )MessageType.Response );  							Assert.That( result[ 1 ] == messageId' "{0} != {1}"' result[ 1 ]' messageId );  							Assert.That( result[ 2 ].IsNil' "{0}:{1}"' result[ 2 ]' result[ 3 ] );  							Assert.That( result[ 3 ] == returnValue );  						}  					}  				}'  				( messageId' args ) =>  				{  					if ( !isReceiving )  					{  						// Initiate shutdown now.  						if ( isClientShutdown )  						{  							testEnvironment.Item2.FeedReceiveBuffer( new byte[ 0 ] );  						}  						else  						{  							testEnvironment.Item1.BeginShutdown();  						}  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestShutdownCore,The following statement contains a magic number: TestCore(  				( target' controller ) =>  				{  					testEnvironment = Tuple.Create( target' controller );  					using ( var serverShutdownWaitHandle = new ManualResetEventSlim() )  					using ( var receivingWaitHandle = new ManualResetEventSlim() )  					using ( var shutdownPacketWaitHandle = new ManualResetEventSlim() )  					using ( var responseWaitHandle = new ManualResetEventSlim() )  					{  						byte[] response = null;    						if ( isReceiving )  						{  							// detects recursive dequeue.  							target.Receiving += ( sender' e ) => receivingWaitHandle.Set();  						}    						target.ShutdownCompleted += ( sender' e ) => serverShutdownWaitHandle.Set();    						controller.Response +=  							( sender' e ) =>  							{  								if ( e.Data.Length == 0 )  								{  									shutdownPacketWaitHandle.Set();  								}  								else  								{  									Interlocked.Exchange( ref response' e.Data );  									responseWaitHandle.Set();  								}  							};    						int messageId = Math.Abs( Environment.TickCount % 10 );  						if ( !isEmpty )  						{  							using ( var buffer = new MemoryStream() )  							{  								using ( var packer = Packer.Create( buffer' false ) )  								{  									packer.PackArrayHeader( 4 );  									packer.Pack( ( int )MessageType.Request );  									packer.Pack( messageId );  									packer.PackString( "Test" );  									packer.PackArrayHeader( 0 );  								}    								var sendingData = buffer.ToArray();    								controller.FeedReceiveBuffer( sendingData.Take( sendingData.Length / 2 ).ToArray() );    								if ( isReceiving )  								{  									Assert.That( receivingWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  									if ( isClientShutdown )  									{  										controller.FeedReceiveBuffer( new byte[ 0 ] );  									}  									else  									{  										target.BeginShutdown();  										controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  									}  								}  								else  								{  									// Shutdown will be initiated in callback.  									controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  								}  							}  						}  						else  						{  							// Initiate shutdown now.    							if ( isClientShutdown )  							{  								controller.FeedReceiveBuffer( new byte[ 0 ] );  							}  							else  							{  								target.BeginShutdown();  							}  						}    						Assert.That( serverShutdownWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  						Assert.That( shutdownPacketWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );    						if ( !isReceiving && !isEmpty )  						{  							Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  							var result = Unpacking.UnpackObject( response ).Value.AsList();    							Assert.That( result.Count' Is.EqualTo( 4 ) );  							Assert.That( result[ 0 ] == ( int )MessageType.Response );  							Assert.That( result[ 1 ] == messageId' "{0} != {1}"' result[ 1 ]' messageId );  							Assert.That( result[ 2 ].IsNil' "{0}:{1}"' result[ 2 ]' result[ 3 ] );  							Assert.That( result[ 3 ] == returnValue );  						}  					}  				}'  				( messageId' args ) =>  				{  					if ( !isReceiving )  					{  						// Initiate shutdown now.  						if ( isClientShutdown )  						{  							testEnvironment.Item2.FeedReceiveBuffer( new byte[ 0 ] );  						}  						else  						{  							testEnvironment.Item1.BeginShutdown();  						}  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestShutdownCore,The following statement contains a magic number: TestCore(  				( target' controller ) =>  				{  					testEnvironment = Tuple.Create( target' controller );  					using ( var serverShutdownWaitHandle = new ManualResetEventSlim() )  					using ( var receivingWaitHandle = new ManualResetEventSlim() )  					using ( var shutdownPacketWaitHandle = new ManualResetEventSlim() )  					using ( var responseWaitHandle = new ManualResetEventSlim() )  					{  						byte[] response = null;    						if ( isReceiving )  						{  							// detects recursive dequeue.  							target.Receiving += ( sender' e ) => receivingWaitHandle.Set();  						}    						target.ShutdownCompleted += ( sender' e ) => serverShutdownWaitHandle.Set();    						controller.Response +=  							( sender' e ) =>  							{  								if ( e.Data.Length == 0 )  								{  									shutdownPacketWaitHandle.Set();  								}  								else  								{  									Interlocked.Exchange( ref response' e.Data );  									responseWaitHandle.Set();  								}  							};    						int messageId = Math.Abs( Environment.TickCount % 10 );  						if ( !isEmpty )  						{  							using ( var buffer = new MemoryStream() )  							{  								using ( var packer = Packer.Create( buffer' false ) )  								{  									packer.PackArrayHeader( 4 );  									packer.Pack( ( int )MessageType.Request );  									packer.Pack( messageId );  									packer.PackString( "Test" );  									packer.PackArrayHeader( 0 );  								}    								var sendingData = buffer.ToArray();    								controller.FeedReceiveBuffer( sendingData.Take( sendingData.Length / 2 ).ToArray() );    								if ( isReceiving )  								{  									Assert.That( receivingWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  									if ( isClientShutdown )  									{  										controller.FeedReceiveBuffer( new byte[ 0 ] );  									}  									else  									{  										target.BeginShutdown();  										controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  									}  								}  								else  								{  									// Shutdown will be initiated in callback.  									controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  								}  							}  						}  						else  						{  							// Initiate shutdown now.    							if ( isClientShutdown )  							{  								controller.FeedReceiveBuffer( new byte[ 0 ] );  							}  							else  							{  								target.BeginShutdown();  							}  						}    						Assert.That( serverShutdownWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  						Assert.That( shutdownPacketWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );    						if ( !isReceiving && !isEmpty )  						{  							Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  							var result = Unpacking.UnpackObject( response ).Value.AsList();    							Assert.That( result.Count' Is.EqualTo( 4 ) );  							Assert.That( result[ 0 ] == ( int )MessageType.Response );  							Assert.That( result[ 1 ] == messageId' "{0} != {1}"' result[ 1 ]' messageId );  							Assert.That( result[ 2 ].IsNil' "{0}:{1}"' result[ 2 ]' result[ 3 ] );  							Assert.That( result[ 3 ] == returnValue );  						}  					}  				}'  				( messageId' args ) =>  				{  					if ( !isReceiving )  					{  						// Initiate shutdown now.  						if ( isClientShutdown )  						{  							testEnvironment.Item2.FeedReceiveBuffer( new byte[ 0 ] );  						}  						else  						{  							testEnvironment.Item1.BeginShutdown();  						}  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestShutdownCore,The following statement contains a magic number: TestCore(  				( target' controller ) =>  				{  					testEnvironment = Tuple.Create( target' controller );  					using ( var serverShutdownWaitHandle = new ManualResetEventSlim() )  					using ( var receivingWaitHandle = new ManualResetEventSlim() )  					using ( var shutdownPacketWaitHandle = new ManualResetEventSlim() )  					using ( var responseWaitHandle = new ManualResetEventSlim() )  					{  						byte[] response = null;    						if ( isReceiving )  						{  							// detects recursive dequeue.  							target.Receiving += ( sender' e ) => receivingWaitHandle.Set();  						}    						target.ShutdownCompleted += ( sender' e ) => serverShutdownWaitHandle.Set();    						controller.Response +=  							( sender' e ) =>  							{  								if ( e.Data.Length == 0 )  								{  									shutdownPacketWaitHandle.Set();  								}  								else  								{  									Interlocked.Exchange( ref response' e.Data );  									responseWaitHandle.Set();  								}  							};    						int messageId = Math.Abs( Environment.TickCount % 10 );  						if ( !isEmpty )  						{  							using ( var buffer = new MemoryStream() )  							{  								using ( var packer = Packer.Create( buffer' false ) )  								{  									packer.PackArrayHeader( 4 );  									packer.Pack( ( int )MessageType.Request );  									packer.Pack( messageId );  									packer.PackString( "Test" );  									packer.PackArrayHeader( 0 );  								}    								var sendingData = buffer.ToArray();    								controller.FeedReceiveBuffer( sendingData.Take( sendingData.Length / 2 ).ToArray() );    								if ( isReceiving )  								{  									Assert.That( receivingWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  									if ( isClientShutdown )  									{  										controller.FeedReceiveBuffer( new byte[ 0 ] );  									}  									else  									{  										target.BeginShutdown();  										controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  									}  								}  								else  								{  									// Shutdown will be initiated in callback.  									controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  								}  							}  						}  						else  						{  							// Initiate shutdown now.    							if ( isClientShutdown )  							{  								controller.FeedReceiveBuffer( new byte[ 0 ] );  							}  							else  							{  								target.BeginShutdown();  							}  						}    						Assert.That( serverShutdownWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  						Assert.That( shutdownPacketWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );    						if ( !isReceiving && !isEmpty )  						{  							Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  							var result = Unpacking.UnpackObject( response ).Value.AsList();    							Assert.That( result.Count' Is.EqualTo( 4 ) );  							Assert.That( result[ 0 ] == ( int )MessageType.Response );  							Assert.That( result[ 1 ] == messageId' "{0} != {1}"' result[ 1 ]' messageId );  							Assert.That( result[ 2 ].IsNil' "{0}:{1}"' result[ 2 ]' result[ 3 ] );  							Assert.That( result[ 3 ] == returnValue );  						}  					}  				}'  				( messageId' args ) =>  				{  					if ( !isReceiving )  					{  						// Initiate shutdown now.  						if ( isClientShutdown )  						{  							testEnvironment.Item2.FeedReceiveBuffer( new byte[ 0 ] );  						}  						else  						{  							testEnvironment.Item1.BeginShutdown();  						}  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestShutdownCore,The following statement contains a magic number: TestCore(  				( target' controller ) =>  				{  					testEnvironment = Tuple.Create( target' controller );  					using ( var serverShutdownWaitHandle = new ManualResetEventSlim() )  					using ( var receivingWaitHandle = new ManualResetEventSlim() )  					using ( var shutdownPacketWaitHandle = new ManualResetEventSlim() )  					using ( var responseWaitHandle = new ManualResetEventSlim() )  					{  						byte[] response = null;    						if ( isReceiving )  						{  							// detects recursive dequeue.  							target.Receiving += ( sender' e ) => receivingWaitHandle.Set();  						}    						target.ShutdownCompleted += ( sender' e ) => serverShutdownWaitHandle.Set();    						controller.Response +=  							( sender' e ) =>  							{  								if ( e.Data.Length == 0 )  								{  									shutdownPacketWaitHandle.Set();  								}  								else  								{  									Interlocked.Exchange( ref response' e.Data );  									responseWaitHandle.Set();  								}  							};    						int messageId = Math.Abs( Environment.TickCount % 10 );  						if ( !isEmpty )  						{  							using ( var buffer = new MemoryStream() )  							{  								using ( var packer = Packer.Create( buffer' false ) )  								{  									packer.PackArrayHeader( 4 );  									packer.Pack( ( int )MessageType.Request );  									packer.Pack( messageId );  									packer.PackString( "Test" );  									packer.PackArrayHeader( 0 );  								}    								var sendingData = buffer.ToArray();    								controller.FeedReceiveBuffer( sendingData.Take( sendingData.Length / 2 ).ToArray() );    								if ( isReceiving )  								{  									Assert.That( receivingWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  									if ( isClientShutdown )  									{  										controller.FeedReceiveBuffer( new byte[ 0 ] );  									}  									else  									{  										target.BeginShutdown();  										controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  									}  								}  								else  								{  									// Shutdown will be initiated in callback.  									controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  								}  							}  						}  						else  						{  							// Initiate shutdown now.    							if ( isClientShutdown )  							{  								controller.FeedReceiveBuffer( new byte[ 0 ] );  							}  							else  							{  								target.BeginShutdown();  							}  						}    						Assert.That( serverShutdownWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  						Assert.That( shutdownPacketWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );    						if ( !isReceiving && !isEmpty )  						{  							Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  							var result = Unpacking.UnpackObject( response ).Value.AsList();    							Assert.That( result.Count' Is.EqualTo( 4 ) );  							Assert.That( result[ 0 ] == ( int )MessageType.Response );  							Assert.That( result[ 1 ] == messageId' "{0} != {1}"' result[ 1 ]' messageId );  							Assert.That( result[ 2 ].IsNil' "{0}:{1}"' result[ 2 ]' result[ 3 ] );  							Assert.That( result[ 3 ] == returnValue );  						}  					}  				}'  				( messageId' args ) =>  				{  					if ( !isReceiving )  					{  						// Initiate shutdown now.  						if ( isClientShutdown )  						{  							testEnvironment.Item2.FeedReceiveBuffer( new byte[ 0 ] );  						}  						else  						{  							testEnvironment.Item1.BeginShutdown();  						}  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestShutdownCore,The following statement contains a magic number: TestCore(  				( target' controller ) =>  				{  					testEnvironment = Tuple.Create( target' controller );  					using ( var serverShutdownWaitHandle = new ManualResetEventSlim() )  					using ( var receivingWaitHandle = new ManualResetEventSlim() )  					using ( var shutdownPacketWaitHandle = new ManualResetEventSlim() )  					using ( var responseWaitHandle = new ManualResetEventSlim() )  					{  						byte[] response = null;    						if ( isReceiving )  						{  							// detects recursive dequeue.  							target.Receiving += ( sender' e ) => receivingWaitHandle.Set();  						}    						target.ShutdownCompleted += ( sender' e ) => serverShutdownWaitHandle.Set();    						controller.Response +=  							( sender' e ) =>  							{  								if ( e.Data.Length == 0 )  								{  									shutdownPacketWaitHandle.Set();  								}  								else  								{  									Interlocked.Exchange( ref response' e.Data );  									responseWaitHandle.Set();  								}  							};    						int messageId = Math.Abs( Environment.TickCount % 10 );  						if ( !isEmpty )  						{  							using ( var buffer = new MemoryStream() )  							{  								using ( var packer = Packer.Create( buffer' false ) )  								{  									packer.PackArrayHeader( 4 );  									packer.Pack( ( int )MessageType.Request );  									packer.Pack( messageId );  									packer.PackString( "Test" );  									packer.PackArrayHeader( 0 );  								}    								var sendingData = buffer.ToArray();    								controller.FeedReceiveBuffer( sendingData.Take( sendingData.Length / 2 ).ToArray() );    								if ( isReceiving )  								{  									Assert.That( receivingWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  									if ( isClientShutdown )  									{  										controller.FeedReceiveBuffer( new byte[ 0 ] );  									}  									else  									{  										target.BeginShutdown();  										controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  									}  								}  								else  								{  									// Shutdown will be initiated in callback.  									controller.FeedReceiveBuffer( sendingData.Skip( sendingData.Length / 2 ).ToArray() );  								}  							}  						}  						else  						{  							// Initiate shutdown now.    							if ( isClientShutdown )  							{  								controller.FeedReceiveBuffer( new byte[ 0 ] );  							}  							else  							{  								target.BeginShutdown();  							}  						}    						Assert.That( serverShutdownWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  						Assert.That( shutdownPacketWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );    						if ( !isReceiving && !isEmpty )  						{  							Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) ) );  							var result = Unpacking.UnpackObject( response ).Value.AsList();    							Assert.That( result.Count' Is.EqualTo( 4 ) );  							Assert.That( result[ 0 ] == ( int )MessageType.Response );  							Assert.That( result[ 1 ] == messageId' "{0} != {1}"' result[ 1 ]' messageId );  							Assert.That( result[ 2 ].IsNil' "{0}:{1}"' result[ 2 ]' result[ 3 ] );  							Assert.That( result[ 3 ] == returnValue );  						}  					}  				}'  				( messageId' args ) =>  				{  					if ( !isReceiving )  					{  						// Initiate shutdown now.  						if ( isClientShutdown )  						{  							testEnvironment.Item2.FeedReceiveBuffer( new byte[ 0 ] );  						}  						else  						{  							testEnvironment.Item1.BeginShutdown();  						}  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceiveCore,The following statement contains a magic number: TestCore(  					( target' controller ) =>  					{  						using ( var responseWaitHandle = new ManualResetEventSlim() )  						{  							byte[] response = null;  							controller.Response +=  								( sender' e ) =>  								{  									if ( ( willBeConnectionReset && e.Data.Length == 0 )  										|| e.Data.Length > 0 )  									{  										Interlocked.Exchange( ref response' e.Data );  										responseWaitHandle.Set();  									}  								};    							using ( var buffer = new MemoryStream() )  							{  								if ( sending == null )  								{  									using ( var packer = Packer.Create( buffer' false ) )  									{  										if ( messageType == MessageType.Request )  										{  											packer.PackArrayHeader( 4 );  											packer.Pack( ( int )messageType );  											packer.Pack( messageId.Value );  										}  										else  										{  											packer.PackArrayHeader( 3 );  											packer.Pack( ( int )messageType );  										}    										packer.PackString( methodName );  										packer.PackArrayHeader( arguments.Length );  										foreach ( var argument in arguments )  										{  											packer.Pack( argument );  										}  									}    									controller.FeedReceiveBuffer( buffer.ToArray() );  								}  								else  								{  									sending( controller' buffer' messageType' messageId' methodName' arguments );  								}    								if ( willExecute )  								{  									if ( Debugger.IsAttached )  									{  										executionWaitHandle.Wait();  									}  									else  									{  										Assert.That( executionWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not executed." );  									}  								}    								if ( messageType == MessageType.Request )  								{  									if ( Debugger.IsAttached )  									{  										responseWaitHandle.Wait();  									}  									else  									{  										Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not respond." );  									}  								}  								else if ( receiveTimeout != null )  								{  									Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not respond." );  								}    								if ( willBeConnectionReset )  								{  									Assert.That( response' Is.Not.Null.And.Empty );  									return;  								}    								Assert.That( isExecuted' Is.EqualTo( willExecute ) );    								if ( messageType == MessageType.Request )  								{  									var result = Unpacking.UnpackObject( response ).Value.AsList();  									Assert.That( result.Count' Is.EqualTo( 4 ) );  									Assert.That( result[ 0 ] == ( int )MessageType.Response' "{0}"' result[ 0 ] );  									Assert.That( result[ 1 ] == messageId' "{0}!={1}"' result[ 1 ]' messageId );  									if ( responseAssertion == null )  									{  										Assert.That( result[ 2 ].IsNil' "{0}"' result[ 2 ] );  										Assert.That( result[ 3 ] == returnValue' "{0}!={1}"' result[ 3 ]' returnValue );  									}  									else  									{  										responseAssertion( result[ 2 ]' result[ 3 ] );  									}  								}  								else  								{  									Assert.That( response' Is.Null );  								}  							}  						}  					}'  					( actualMessageId' actualArguments ) =>  					{  						Assert.That( actualMessageId == messageId' "{0}!={1}"' actualMessageId' messageId );  						Assert.That( actualArguments' Is.EqualTo( arguments )' "{0}!={1}"' actualMessageId' arguments );  						try  						{  							if ( onExecute == null )  							{  								return returnValue;  							}  							else  							{  								return onExecute( returnValue );  							}  						}  						finally  						{  							isExecuted = true;  							executionWaitHandle.Set();  						}  					}'  					config => config.ReceiveTimeout = receiveTimeout  				);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceiveCore,The following statement contains a magic number: TestCore(  					( target' controller ) =>  					{  						using ( var responseWaitHandle = new ManualResetEventSlim() )  						{  							byte[] response = null;  							controller.Response +=  								( sender' e ) =>  								{  									if ( ( willBeConnectionReset && e.Data.Length == 0 )  										|| e.Data.Length > 0 )  									{  										Interlocked.Exchange( ref response' e.Data );  										responseWaitHandle.Set();  									}  								};    							using ( var buffer = new MemoryStream() )  							{  								if ( sending == null )  								{  									using ( var packer = Packer.Create( buffer' false ) )  									{  										if ( messageType == MessageType.Request )  										{  											packer.PackArrayHeader( 4 );  											packer.Pack( ( int )messageType );  											packer.Pack( messageId.Value );  										}  										else  										{  											packer.PackArrayHeader( 3 );  											packer.Pack( ( int )messageType );  										}    										packer.PackString( methodName );  										packer.PackArrayHeader( arguments.Length );  										foreach ( var argument in arguments )  										{  											packer.Pack( argument );  										}  									}    									controller.FeedReceiveBuffer( buffer.ToArray() );  								}  								else  								{  									sending( controller' buffer' messageType' messageId' methodName' arguments );  								}    								if ( willExecute )  								{  									if ( Debugger.IsAttached )  									{  										executionWaitHandle.Wait();  									}  									else  									{  										Assert.That( executionWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not executed." );  									}  								}    								if ( messageType == MessageType.Request )  								{  									if ( Debugger.IsAttached )  									{  										responseWaitHandle.Wait();  									}  									else  									{  										Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not respond." );  									}  								}  								else if ( receiveTimeout != null )  								{  									Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not respond." );  								}    								if ( willBeConnectionReset )  								{  									Assert.That( response' Is.Not.Null.And.Empty );  									return;  								}    								Assert.That( isExecuted' Is.EqualTo( willExecute ) );    								if ( messageType == MessageType.Request )  								{  									var result = Unpacking.UnpackObject( response ).Value.AsList();  									Assert.That( result.Count' Is.EqualTo( 4 ) );  									Assert.That( result[ 0 ] == ( int )MessageType.Response' "{0}"' result[ 0 ] );  									Assert.That( result[ 1 ] == messageId' "{0}!={1}"' result[ 1 ]' messageId );  									if ( responseAssertion == null )  									{  										Assert.That( result[ 2 ].IsNil' "{0}"' result[ 2 ] );  										Assert.That( result[ 3 ] == returnValue' "{0}!={1}"' result[ 3 ]' returnValue );  									}  									else  									{  										responseAssertion( result[ 2 ]' result[ 3 ] );  									}  								}  								else  								{  									Assert.That( response' Is.Null );  								}  							}  						}  					}'  					( actualMessageId' actualArguments ) =>  					{  						Assert.That( actualMessageId == messageId' "{0}!={1}"' actualMessageId' messageId );  						Assert.That( actualArguments' Is.EqualTo( arguments )' "{0}!={1}"' actualMessageId' arguments );  						try  						{  							if ( onExecute == null )  							{  								return returnValue;  							}  							else  							{  								return onExecute( returnValue );  							}  						}  						finally  						{  							isExecuted = true;  							executionWaitHandle.Set();  						}  					}'  					config => config.ReceiveTimeout = receiveTimeout  				);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceiveCore,The following statement contains a magic number: TestCore(  					( target' controller ) =>  					{  						using ( var responseWaitHandle = new ManualResetEventSlim() )  						{  							byte[] response = null;  							controller.Response +=  								( sender' e ) =>  								{  									if ( ( willBeConnectionReset && e.Data.Length == 0 )  										|| e.Data.Length > 0 )  									{  										Interlocked.Exchange( ref response' e.Data );  										responseWaitHandle.Set();  									}  								};    							using ( var buffer = new MemoryStream() )  							{  								if ( sending == null )  								{  									using ( var packer = Packer.Create( buffer' false ) )  									{  										if ( messageType == MessageType.Request )  										{  											packer.PackArrayHeader( 4 );  											packer.Pack( ( int )messageType );  											packer.Pack( messageId.Value );  										}  										else  										{  											packer.PackArrayHeader( 3 );  											packer.Pack( ( int )messageType );  										}    										packer.PackString( methodName );  										packer.PackArrayHeader( arguments.Length );  										foreach ( var argument in arguments )  										{  											packer.Pack( argument );  										}  									}    									controller.FeedReceiveBuffer( buffer.ToArray() );  								}  								else  								{  									sending( controller' buffer' messageType' messageId' methodName' arguments );  								}    								if ( willExecute )  								{  									if ( Debugger.IsAttached )  									{  										executionWaitHandle.Wait();  									}  									else  									{  										Assert.That( executionWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not executed." );  									}  								}    								if ( messageType == MessageType.Request )  								{  									if ( Debugger.IsAttached )  									{  										responseWaitHandle.Wait();  									}  									else  									{  										Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not respond." );  									}  								}  								else if ( receiveTimeout != null )  								{  									Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not respond." );  								}    								if ( willBeConnectionReset )  								{  									Assert.That( response' Is.Not.Null.And.Empty );  									return;  								}    								Assert.That( isExecuted' Is.EqualTo( willExecute ) );    								if ( messageType == MessageType.Request )  								{  									var result = Unpacking.UnpackObject( response ).Value.AsList();  									Assert.That( result.Count' Is.EqualTo( 4 ) );  									Assert.That( result[ 0 ] == ( int )MessageType.Response' "{0}"' result[ 0 ] );  									Assert.That( result[ 1 ] == messageId' "{0}!={1}"' result[ 1 ]' messageId );  									if ( responseAssertion == null )  									{  										Assert.That( result[ 2 ].IsNil' "{0}"' result[ 2 ] );  										Assert.That( result[ 3 ] == returnValue' "{0}!={1}"' result[ 3 ]' returnValue );  									}  									else  									{  										responseAssertion( result[ 2 ]' result[ 3 ] );  									}  								}  								else  								{  									Assert.That( response' Is.Null );  								}  							}  						}  					}'  					( actualMessageId' actualArguments ) =>  					{  						Assert.That( actualMessageId == messageId' "{0}!={1}"' actualMessageId' messageId );  						Assert.That( actualArguments' Is.EqualTo( arguments )' "{0}!={1}"' actualMessageId' arguments );  						try  						{  							if ( onExecute == null )  							{  								return returnValue;  							}  							else  							{  								return onExecute( returnValue );  							}  						}  						finally  						{  							isExecuted = true;  							executionWaitHandle.Set();  						}  					}'  					config => config.ReceiveTimeout = receiveTimeout  				);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceiveCore,The following statement contains a magic number: TestCore(  					( target' controller ) =>  					{  						using ( var responseWaitHandle = new ManualResetEventSlim() )  						{  							byte[] response = null;  							controller.Response +=  								( sender' e ) =>  								{  									if ( ( willBeConnectionReset && e.Data.Length == 0 )  										|| e.Data.Length > 0 )  									{  										Interlocked.Exchange( ref response' e.Data );  										responseWaitHandle.Set();  									}  								};    							using ( var buffer = new MemoryStream() )  							{  								if ( sending == null )  								{  									using ( var packer = Packer.Create( buffer' false ) )  									{  										if ( messageType == MessageType.Request )  										{  											packer.PackArrayHeader( 4 );  											packer.Pack( ( int )messageType );  											packer.Pack( messageId.Value );  										}  										else  										{  											packer.PackArrayHeader( 3 );  											packer.Pack( ( int )messageType );  										}    										packer.PackString( methodName );  										packer.PackArrayHeader( arguments.Length );  										foreach ( var argument in arguments )  										{  											packer.Pack( argument );  										}  									}    									controller.FeedReceiveBuffer( buffer.ToArray() );  								}  								else  								{  									sending( controller' buffer' messageType' messageId' methodName' arguments );  								}    								if ( willExecute )  								{  									if ( Debugger.IsAttached )  									{  										executionWaitHandle.Wait();  									}  									else  									{  										Assert.That( executionWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not executed." );  									}  								}    								if ( messageType == MessageType.Request )  								{  									if ( Debugger.IsAttached )  									{  										responseWaitHandle.Wait();  									}  									else  									{  										Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not respond." );  									}  								}  								else if ( receiveTimeout != null )  								{  									Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not respond." );  								}    								if ( willBeConnectionReset )  								{  									Assert.That( response' Is.Not.Null.And.Empty );  									return;  								}    								Assert.That( isExecuted' Is.EqualTo( willExecute ) );    								if ( messageType == MessageType.Request )  								{  									var result = Unpacking.UnpackObject( response ).Value.AsList();  									Assert.That( result.Count' Is.EqualTo( 4 ) );  									Assert.That( result[ 0 ] == ( int )MessageType.Response' "{0}"' result[ 0 ] );  									Assert.That( result[ 1 ] == messageId' "{0}!={1}"' result[ 1 ]' messageId );  									if ( responseAssertion == null )  									{  										Assert.That( result[ 2 ].IsNil' "{0}"' result[ 2 ] );  										Assert.That( result[ 3 ] == returnValue' "{0}!={1}"' result[ 3 ]' returnValue );  									}  									else  									{  										responseAssertion( result[ 2 ]' result[ 3 ] );  									}  								}  								else  								{  									Assert.That( response' Is.Null );  								}  							}  						}  					}'  					( actualMessageId' actualArguments ) =>  					{  						Assert.That( actualMessageId == messageId' "{0}!={1}"' actualMessageId' messageId );  						Assert.That( actualArguments' Is.EqualTo( arguments )' "{0}!={1}"' actualMessageId' arguments );  						try  						{  							if ( onExecute == null )  							{  								return returnValue;  							}  							else  							{  								return onExecute( returnValue );  							}  						}  						finally  						{  							isExecuted = true;  							executionWaitHandle.Set();  						}  					}'  					config => config.ReceiveTimeout = receiveTimeout  				);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceiveCore,The following statement contains a magic number: TestCore(  					( target' controller ) =>  					{  						using ( var responseWaitHandle = new ManualResetEventSlim() )  						{  							byte[] response = null;  							controller.Response +=  								( sender' e ) =>  								{  									if ( ( willBeConnectionReset && e.Data.Length == 0 )  										|| e.Data.Length > 0 )  									{  										Interlocked.Exchange( ref response' e.Data );  										responseWaitHandle.Set();  									}  								};    							using ( var buffer = new MemoryStream() )  							{  								if ( sending == null )  								{  									using ( var packer = Packer.Create( buffer' false ) )  									{  										if ( messageType == MessageType.Request )  										{  											packer.PackArrayHeader( 4 );  											packer.Pack( ( int )messageType );  											packer.Pack( messageId.Value );  										}  										else  										{  											packer.PackArrayHeader( 3 );  											packer.Pack( ( int )messageType );  										}    										packer.PackString( methodName );  										packer.PackArrayHeader( arguments.Length );  										foreach ( var argument in arguments )  										{  											packer.Pack( argument );  										}  									}    									controller.FeedReceiveBuffer( buffer.ToArray() );  								}  								else  								{  									sending( controller' buffer' messageType' messageId' methodName' arguments );  								}    								if ( willExecute )  								{  									if ( Debugger.IsAttached )  									{  										executionWaitHandle.Wait();  									}  									else  									{  										Assert.That( executionWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not executed." );  									}  								}    								if ( messageType == MessageType.Request )  								{  									if ( Debugger.IsAttached )  									{  										responseWaitHandle.Wait();  									}  									else  									{  										Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not respond." );  									}  								}  								else if ( receiveTimeout != null )  								{  									Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not respond." );  								}    								if ( willBeConnectionReset )  								{  									Assert.That( response' Is.Not.Null.And.Empty );  									return;  								}    								Assert.That( isExecuted' Is.EqualTo( willExecute ) );    								if ( messageType == MessageType.Request )  								{  									var result = Unpacking.UnpackObject( response ).Value.AsList();  									Assert.That( result.Count' Is.EqualTo( 4 ) );  									Assert.That( result[ 0 ] == ( int )MessageType.Response' "{0}"' result[ 0 ] );  									Assert.That( result[ 1 ] == messageId' "{0}!={1}"' result[ 1 ]' messageId );  									if ( responseAssertion == null )  									{  										Assert.That( result[ 2 ].IsNil' "{0}"' result[ 2 ] );  										Assert.That( result[ 3 ] == returnValue' "{0}!={1}"' result[ 3 ]' returnValue );  									}  									else  									{  										responseAssertion( result[ 2 ]' result[ 3 ] );  									}  								}  								else  								{  									Assert.That( response' Is.Null );  								}  							}  						}  					}'  					( actualMessageId' actualArguments ) =>  					{  						Assert.That( actualMessageId == messageId' "{0}!={1}"' actualMessageId' messageId );  						Assert.That( actualArguments' Is.EqualTo( arguments )' "{0}!={1}"' actualMessageId' arguments );  						try  						{  							if ( onExecute == null )  							{  								return returnValue;  							}  							else  							{  								return onExecute( returnValue );  							}  						}  						finally  						{  							isExecuted = true;  							executionWaitHandle.Set();  						}  					}'  					config => config.ReceiveTimeout = receiveTimeout  				);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceiveCore,The following statement contains a magic number: TestCore(  					( target' controller ) =>  					{  						using ( var responseWaitHandle = new ManualResetEventSlim() )  						{  							byte[] response = null;  							controller.Response +=  								( sender' e ) =>  								{  									if ( ( willBeConnectionReset && e.Data.Length == 0 )  										|| e.Data.Length > 0 )  									{  										Interlocked.Exchange( ref response' e.Data );  										responseWaitHandle.Set();  									}  								};    							using ( var buffer = new MemoryStream() )  							{  								if ( sending == null )  								{  									using ( var packer = Packer.Create( buffer' false ) )  									{  										if ( messageType == MessageType.Request )  										{  											packer.PackArrayHeader( 4 );  											packer.Pack( ( int )messageType );  											packer.Pack( messageId.Value );  										}  										else  										{  											packer.PackArrayHeader( 3 );  											packer.Pack( ( int )messageType );  										}    										packer.PackString( methodName );  										packer.PackArrayHeader( arguments.Length );  										foreach ( var argument in arguments )  										{  											packer.Pack( argument );  										}  									}    									controller.FeedReceiveBuffer( buffer.ToArray() );  								}  								else  								{  									sending( controller' buffer' messageType' messageId' methodName' arguments );  								}    								if ( willExecute )  								{  									if ( Debugger.IsAttached )  									{  										executionWaitHandle.Wait();  									}  									else  									{  										Assert.That( executionWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not executed." );  									}  								}    								if ( messageType == MessageType.Request )  								{  									if ( Debugger.IsAttached )  									{  										responseWaitHandle.Wait();  									}  									else  									{  										Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not respond." );  									}  								}  								else if ( receiveTimeout != null )  								{  									Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not respond." );  								}    								if ( willBeConnectionReset )  								{  									Assert.That( response' Is.Not.Null.And.Empty );  									return;  								}    								Assert.That( isExecuted' Is.EqualTo( willExecute ) );    								if ( messageType == MessageType.Request )  								{  									var result = Unpacking.UnpackObject( response ).Value.AsList();  									Assert.That( result.Count' Is.EqualTo( 4 ) );  									Assert.That( result[ 0 ] == ( int )MessageType.Response' "{0}"' result[ 0 ] );  									Assert.That( result[ 1 ] == messageId' "{0}!={1}"' result[ 1 ]' messageId );  									if ( responseAssertion == null )  									{  										Assert.That( result[ 2 ].IsNil' "{0}"' result[ 2 ] );  										Assert.That( result[ 3 ] == returnValue' "{0}!={1}"' result[ 3 ]' returnValue );  									}  									else  									{  										responseAssertion( result[ 2 ]' result[ 3 ] );  									}  								}  								else  								{  									Assert.That( response' Is.Null );  								}  							}  						}  					}'  					( actualMessageId' actualArguments ) =>  					{  						Assert.That( actualMessageId == messageId' "{0}!={1}"' actualMessageId' messageId );  						Assert.That( actualArguments' Is.EqualTo( arguments )' "{0}!={1}"' actualMessageId' arguments );  						try  						{  							if ( onExecute == null )  							{  								return returnValue;  							}  							else  							{  								return onExecute( returnValue );  							}  						}  						finally  						{  							isExecuted = true;  							executionWaitHandle.Set();  						}  					}'  					config => config.ReceiveTimeout = receiveTimeout  				);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceiveCore,The following statement contains a magic number: TestCore(  					( target' controller ) =>  					{  						using ( var responseWaitHandle = new ManualResetEventSlim() )  						{  							byte[] response = null;  							controller.Response +=  								( sender' e ) =>  								{  									if ( ( willBeConnectionReset && e.Data.Length == 0 )  										|| e.Data.Length > 0 )  									{  										Interlocked.Exchange( ref response' e.Data );  										responseWaitHandle.Set();  									}  								};    							using ( var buffer = new MemoryStream() )  							{  								if ( sending == null )  								{  									using ( var packer = Packer.Create( buffer' false ) )  									{  										if ( messageType == MessageType.Request )  										{  											packer.PackArrayHeader( 4 );  											packer.Pack( ( int )messageType );  											packer.Pack( messageId.Value );  										}  										else  										{  											packer.PackArrayHeader( 3 );  											packer.Pack( ( int )messageType );  										}    										packer.PackString( methodName );  										packer.PackArrayHeader( arguments.Length );  										foreach ( var argument in arguments )  										{  											packer.Pack( argument );  										}  									}    									controller.FeedReceiveBuffer( buffer.ToArray() );  								}  								else  								{  									sending( controller' buffer' messageType' messageId' methodName' arguments );  								}    								if ( willExecute )  								{  									if ( Debugger.IsAttached )  									{  										executionWaitHandle.Wait();  									}  									else  									{  										Assert.That( executionWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not executed." );  									}  								}    								if ( messageType == MessageType.Request )  								{  									if ( Debugger.IsAttached )  									{  										responseWaitHandle.Wait();  									}  									else  									{  										Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not respond." );  									}  								}  								else if ( receiveTimeout != null )  								{  									Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not respond." );  								}    								if ( willBeConnectionReset )  								{  									Assert.That( response' Is.Not.Null.And.Empty );  									return;  								}    								Assert.That( isExecuted' Is.EqualTo( willExecute ) );    								if ( messageType == MessageType.Request )  								{  									var result = Unpacking.UnpackObject( response ).Value.AsList();  									Assert.That( result.Count' Is.EqualTo( 4 ) );  									Assert.That( result[ 0 ] == ( int )MessageType.Response' "{0}"' result[ 0 ] );  									Assert.That( result[ 1 ] == messageId' "{0}!={1}"' result[ 1 ]' messageId );  									if ( responseAssertion == null )  									{  										Assert.That( result[ 2 ].IsNil' "{0}"' result[ 2 ] );  										Assert.That( result[ 3 ] == returnValue' "{0}!={1}"' result[ 3 ]' returnValue );  									}  									else  									{  										responseAssertion( result[ 2 ]' result[ 3 ] );  									}  								}  								else  								{  									Assert.That( response' Is.Null );  								}  							}  						}  					}'  					( actualMessageId' actualArguments ) =>  					{  						Assert.That( actualMessageId == messageId' "{0}!={1}"' actualMessageId' messageId );  						Assert.That( actualArguments' Is.EqualTo( arguments )' "{0}!={1}"' actualMessageId' arguments );  						try  						{  							if ( onExecute == null )  							{  								return returnValue;  							}  							else  							{  								return onExecute( returnValue );  							}  						}  						finally  						{  							isExecuted = true;  							executionWaitHandle.Set();  						}  					}'  					config => config.ReceiveTimeout = receiveTimeout  				);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceiveCore,The following statement contains a magic number: TestCore(  					( target' controller ) =>  					{  						using ( var responseWaitHandle = new ManualResetEventSlim() )  						{  							byte[] response = null;  							controller.Response +=  								( sender' e ) =>  								{  									if ( ( willBeConnectionReset && e.Data.Length == 0 )  										|| e.Data.Length > 0 )  									{  										Interlocked.Exchange( ref response' e.Data );  										responseWaitHandle.Set();  									}  								};    							using ( var buffer = new MemoryStream() )  							{  								if ( sending == null )  								{  									using ( var packer = Packer.Create( buffer' false ) )  									{  										if ( messageType == MessageType.Request )  										{  											packer.PackArrayHeader( 4 );  											packer.Pack( ( int )messageType );  											packer.Pack( messageId.Value );  										}  										else  										{  											packer.PackArrayHeader( 3 );  											packer.Pack( ( int )messageType );  										}    										packer.PackString( methodName );  										packer.PackArrayHeader( arguments.Length );  										foreach ( var argument in arguments )  										{  											packer.Pack( argument );  										}  									}    									controller.FeedReceiveBuffer( buffer.ToArray() );  								}  								else  								{  									sending( controller' buffer' messageType' messageId' methodName' arguments );  								}    								if ( willExecute )  								{  									if ( Debugger.IsAttached )  									{  										executionWaitHandle.Wait();  									}  									else  									{  										Assert.That( executionWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not executed." );  									}  								}    								if ( messageType == MessageType.Request )  								{  									if ( Debugger.IsAttached )  									{  										responseWaitHandle.Wait();  									}  									else  									{  										Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not respond." );  									}  								}  								else if ( receiveTimeout != null )  								{  									Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not respond." );  								}    								if ( willBeConnectionReset )  								{  									Assert.That( response' Is.Not.Null.And.Empty );  									return;  								}    								Assert.That( isExecuted' Is.EqualTo( willExecute ) );    								if ( messageType == MessageType.Request )  								{  									var result = Unpacking.UnpackObject( response ).Value.AsList();  									Assert.That( result.Count' Is.EqualTo( 4 ) );  									Assert.That( result[ 0 ] == ( int )MessageType.Response' "{0}"' result[ 0 ] );  									Assert.That( result[ 1 ] == messageId' "{0}!={1}"' result[ 1 ]' messageId );  									if ( responseAssertion == null )  									{  										Assert.That( result[ 2 ].IsNil' "{0}"' result[ 2 ] );  										Assert.That( result[ 3 ] == returnValue' "{0}!={1}"' result[ 3 ]' returnValue );  									}  									else  									{  										responseAssertion( result[ 2 ]' result[ 3 ] );  									}  								}  								else  								{  									Assert.That( response' Is.Null );  								}  							}  						}  					}'  					( actualMessageId' actualArguments ) =>  					{  						Assert.That( actualMessageId == messageId' "{0}!={1}"' actualMessageId' messageId );  						Assert.That( actualArguments' Is.EqualTo( arguments )' "{0}!={1}"' actualMessageId' arguments );  						try  						{  							if ( onExecute == null )  							{  								return returnValue;  							}  							else  							{  								return onExecute( returnValue );  							}  						}  						finally  						{  							isExecuted = true;  							executionWaitHandle.Set();  						}  					}'  					config => config.ReceiveTimeout = receiveTimeout  				);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceiveCore,The following statement contains a magic number: TestCore(  					( target' controller ) =>  					{  						using ( var responseWaitHandle = new ManualResetEventSlim() )  						{  							byte[] response = null;  							controller.Response +=  								( sender' e ) =>  								{  									if ( ( willBeConnectionReset && e.Data.Length == 0 )  										|| e.Data.Length > 0 )  									{  										Interlocked.Exchange( ref response' e.Data );  										responseWaitHandle.Set();  									}  								};    							using ( var buffer = new MemoryStream() )  							{  								if ( sending == null )  								{  									using ( var packer = Packer.Create( buffer' false ) )  									{  										if ( messageType == MessageType.Request )  										{  											packer.PackArrayHeader( 4 );  											packer.Pack( ( int )messageType );  											packer.Pack( messageId.Value );  										}  										else  										{  											packer.PackArrayHeader( 3 );  											packer.Pack( ( int )messageType );  										}    										packer.PackString( methodName );  										packer.PackArrayHeader( arguments.Length );  										foreach ( var argument in arguments )  										{  											packer.Pack( argument );  										}  									}    									controller.FeedReceiveBuffer( buffer.ToArray() );  								}  								else  								{  									sending( controller' buffer' messageType' messageId' methodName' arguments );  								}    								if ( willExecute )  								{  									if ( Debugger.IsAttached )  									{  										executionWaitHandle.Wait();  									}  									else  									{  										Assert.That( executionWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not executed." );  									}  								}    								if ( messageType == MessageType.Request )  								{  									if ( Debugger.IsAttached )  									{  										responseWaitHandle.Wait();  									}  									else  									{  										Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not respond." );  									}  								}  								else if ( receiveTimeout != null )  								{  									Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not respond." );  								}    								if ( willBeConnectionReset )  								{  									Assert.That( response' Is.Not.Null.And.Empty );  									return;  								}    								Assert.That( isExecuted' Is.EqualTo( willExecute ) );    								if ( messageType == MessageType.Request )  								{  									var result = Unpacking.UnpackObject( response ).Value.AsList();  									Assert.That( result.Count' Is.EqualTo( 4 ) );  									Assert.That( result[ 0 ] == ( int )MessageType.Response' "{0}"' result[ 0 ] );  									Assert.That( result[ 1 ] == messageId' "{0}!={1}"' result[ 1 ]' messageId );  									if ( responseAssertion == null )  									{  										Assert.That( result[ 2 ].IsNil' "{0}"' result[ 2 ] );  										Assert.That( result[ 3 ] == returnValue' "{0}!={1}"' result[ 3 ]' returnValue );  									}  									else  									{  										responseAssertion( result[ 2 ]' result[ 3 ] );  									}  								}  								else  								{  									Assert.That( response' Is.Null );  								}  							}  						}  					}'  					( actualMessageId' actualArguments ) =>  					{  						Assert.That( actualMessageId == messageId' "{0}!={1}"' actualMessageId' messageId );  						Assert.That( actualArguments' Is.EqualTo( arguments )' "{0}!={1}"' actualMessageId' arguments );  						try  						{  							if ( onExecute == null )  							{  								return returnValue;  							}  							else  							{  								return onExecute( returnValue );  							}  						}  						finally  						{  							isExecuted = true;  							executionWaitHandle.Set();  						}  					}'  					config => config.ReceiveTimeout = receiveTimeout  				);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_Request_Success_ResponseReturns,The following statement contains a magic number: TestReceiveCore(  				( controller' buffer' sendingType' sendingId' sendingMethod' sendingArguments ) =>  				{  					using ( var packer = Packer.Create( buffer' false ) )  					{  						packer.PackArrayHeader( 4 );  						packer.Pack( ( int )sendingType );  						packer.Pack( sendingId.Value );  						packer.Pack( sendingMethod );  						packer.Pack( sendingArguments );  					}    					controller.FeedReceiveBuffer( buffer.ToArray() );  				}'  				null'  				null'  				true'  				false'  				null'  				MessageType.Request'  				1'  				"Test"'  				"Arg1"  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_Request_Fail_ResponseReturns,The following statement contains a magic number: TestReceiveCore(  				( controller' buffer' sendingType' sendingId' sendingMethod' sendingArguments ) =>  				{  					using ( var packer = Packer.Create( buffer' false ) )  					{  						packer.PackArrayHeader( 4 );  						packer.Pack( ( int )sendingType );  						packer.Pack( sendingId.Value );  						packer.Pack( sendingMethod );  						packer.Pack( sendingArguments );  					}    					controller.FeedReceiveBuffer( buffer.ToArray() );  				}'  				returnValue =>  				{  					throw new RpcException( RpcError.CustomError( "TestId"' 1 )' "TestMessage"' null );  				}'  				( error' returnValue ) =>  				{  					Assert.That( error == "TestId"' "\"{0}\"!=\"Test\"' {1}"' error' returnValue );  					Assert.That( returnValue.AsDictionary()[ "Message" ] == "TestMessage"' "Unexpected. {0}{1}"' Environment.NewLine' returnValue );  				}'  				true'  				false'  				null'  				MessageType.Request'  				1'  				"Test"'  				"Arg1"  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_Notify_Success_ResponseNotReturns,The following statement contains a magic number: TestReceiveCore(  				( controller' buffer' sendingType' sendingId' sendingMethod' sendingArguments ) =>  				{  					using ( var packer = Packer.Create( buffer' false ) )  					{  						packer.PackArrayHeader( 3 );  						packer.Pack( ( int )sendingType );  						packer.Pack( sendingMethod );  						packer.Pack( sendingArguments );  					}    					controller.FeedReceiveBuffer( buffer.ToArray() );  				}'  				null'  				null'  				true'  				false'  				null'  				MessageType.Notification'  				null'  				"Test"'  				"Arg1"  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_Notify_Fail_ResponseNotReturns,The following statement contains a magic number: TestReceiveCore(  				( controller' buffer' sendingType' sendingId' sendingMethod' sendingArguments ) =>  				{  					using ( var packer = Packer.Create( buffer' false ) )  					{  						packer.PackArrayHeader( 3 );  						packer.Pack( ( int )sendingType );  						packer.Pack( sendingMethod );  						packer.Pack( sendingArguments );  					}    					controller.FeedReceiveBuffer( buffer.ToArray() );  				}'  				returnValue =>  				{  					throw new RpcException( RpcError.CustomError( "TestId"' 1 )' "TestMessage"' null );  				}'  				null'  				true'  				false'  				null'  				MessageType.Notification'  				null'  				"Test"'  				"Arg1"  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_Request_ArrayLengthIs2_MessageRefused,The following statement contains a magic number: TestReceiveInvalidRequestCore(  				( packer' messageType' messageId ) =>  				{  					packer.PackArrayHeader( 2 );  					packer.Pack( messageType );  					packer.Pack( messageId );  				}'  				RpcError.MessageRefusedError'  				true'  				MessageType.Request'  				null  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_Request_ArrayLengthIs3_MessageRefused,The following statement contains a magic number: TestReceiveInvalidRequestCore(  				( packer' messageType' messageId ) =>  				{  					packer.PackArrayHeader( 3 );  					packer.Pack( messageType );  					packer.Pack( messageId );  					packer.Pack( "Test" );  				}'  				RpcError.MessageRefusedError'  				true'  				MessageType.Request'  				null  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_Request_ArrayLengthIs5_MessageRefused,The following statement contains a magic number: TestReceiveInvalidRequestCore(  				( packer' messageType' messageId ) =>  				{  					packer.PackArrayHeader( 5 );  					packer.Pack( messageType );  					packer.Pack( messageId );  					packer.Pack( "Test" );  					packer.PackArrayHeader( 0 );  					packer.PackArrayHeader( 0 );  				}'  				RpcError.MessageRefusedError'  				true'  				MessageType.Request'  				null  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_Notification_ArrayLengthIs2_MessageRefused,The following statement contains a magic number: TestReceiveInvalidRequestCore(  				( packer' messageType' messageId ) =>  				{  					packer.PackArrayHeader( 2 );  					packer.Pack( messageType );  					packer.Pack( messageId );  				}'  				RpcError.MessageRefusedError'  				true'  				MessageType.Notification'  				null  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_Notification_ArrayLengthIs4_MessageRefused,The following statement contains a magic number: TestReceiveInvalidRequestCore(  				( packer' messageType' messageId ) =>  				{  					packer.PackArrayHeader( 4 );  					packer.Pack( messageType );  					packer.Pack( messageId );  					packer.Pack( "Test" );  					packer.PackArrayHeader( 0 );  				}'  				RpcError.MessageRefusedError'  				true'  				MessageType.Notification'  				null  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_Notification_ArrayLengthIs5_MessageRefused,The following statement contains a magic number: TestReceiveInvalidRequestCore(  				( packer' messageType' messageId ) =>  				{  					packer.PackArrayHeader( 5 );  					packer.Pack( messageType );  					packer.Pack( messageId );  					packer.Pack( "Test" );  					packer.PackArrayHeader( 0 );  					packer.PackArrayHeader( 0 );  				}'  				RpcError.MessageRefusedError'  				true'  				MessageType.Notification'  				null  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_ResponseMessageType_MessageRefused,The following statement contains a magic number: TestReceiveInvalidRequestCore(  				( packer' messageType' messageId ) =>  				{  					packer.PackArrayHeader( 4 );  					packer.Pack( ( int )MessageType.Response );  					packer.Pack( messageId );  					packer.PackString( "Test" );  					packer.PackString( "Test" );  				}'  				RpcError.MessageRefusedError'  				true'  				MessageType.Request'  				null  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_UnknownMessageType_MessageRefused,The following statement contains a magic number: TestReceiveInvalidRequestCore(  				( packer' messageType' messageId ) =>  				{  					packer.PackArrayHeader( 3 );  					packer.Pack( 3 );  					packer.Pack( messageId );  					packer.PackString( "Test" );  				}'  				RpcError.MessageRefusedError'  				true'  				MessageType.Request'  				null  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestReceive_UnknownMessageType_MessageRefused,The following statement contains a magic number: TestReceiveInvalidRequestCore(  				( packer' messageType' messageId ) =>  				{  					packer.PackArrayHeader( 3 );  					packer.Pack( 3 );  					packer.Pack( messageId );  					packer.PackString( "Test" );  				}'  				RpcError.MessageRefusedError'  				true'  				MessageType.Request'  				null  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestSendCore,The following statement contains a magic number: TestCore(  				( controller' target ) =>  				{  					using ( var waitHandle = new ManualResetEventSlim() )  					{  						byte[] response = null;  						controller.Response +=  							( sender' e ) =>  							{  								response = e.Data;  								waitHandle.Set();  							};    						using ( var buffer = new MemoryStream() )  						{  							using ( var packer = Packer.Create( buffer' false ) )  							{  								packer.PackArrayHeader( 4 );  								packer.Pack( ( int )MessageType.Request );  								packer.Pack( messageId );  								packer.PackString( "Test" );  								packer.PackArrayHeader( 0 );  							}    							controller.FeedData( buffer.ToArray() );  						}    						if ( Debugger.IsAttached )  						{  							waitHandle.Wait();  						}  						else  						{  							Assert.That( waitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "No respond." );  						}    						var result = Unpacking.UnpackObject( response ).Value.AsList();    						Assert.That( result.Count' Is.EqualTo( 4 ) );  						Assert.That( result[ 0 ] == ( int )MessageType.Response' "{0}!={1}"' result[ 0 ]' ( int )MessageType.Response );  						Assert.That( result[ 1 ] == messageId' "{0}!={1}"' result[ 1 ]' messageId );  						if ( error == null )  						{  							Assert.That( result[ 2 ].IsNil' "is not Nil" );  							Assert.That( result[ 3 ] == returnValue' "{0}!={1}"' result[ 3 ]' returnValue );  						}  						else  						{  							Assert.That( result[ 2 ] == error.Identifier' "{0}!={1}"' result[ 2 ]' error.Identifier );  							Assert.That( result[ 3 ].AsDictionary()[ "Message" ] == errorMessage' "{0} does not contain \"{1}\""' result[ 3 ]' errorMessage );  						}  					}  				}'  				( id' args ) =>  				{  					if ( error != null )  					{  						throw new RpcException( error' errorMessage' String.Empty );  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestSendCore,The following statement contains a magic number: TestCore(  				( controller' target ) =>  				{  					using ( var waitHandle = new ManualResetEventSlim() )  					{  						byte[] response = null;  						controller.Response +=  							( sender' e ) =>  							{  								response = e.Data;  								waitHandle.Set();  							};    						using ( var buffer = new MemoryStream() )  						{  							using ( var packer = Packer.Create( buffer' false ) )  							{  								packer.PackArrayHeader( 4 );  								packer.Pack( ( int )MessageType.Request );  								packer.Pack( messageId );  								packer.PackString( "Test" );  								packer.PackArrayHeader( 0 );  							}    							controller.FeedData( buffer.ToArray() );  						}    						if ( Debugger.IsAttached )  						{  							waitHandle.Wait();  						}  						else  						{  							Assert.That( waitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "No respond." );  						}    						var result = Unpacking.UnpackObject( response ).Value.AsList();    						Assert.That( result.Count' Is.EqualTo( 4 ) );  						Assert.That( result[ 0 ] == ( int )MessageType.Response' "{0}!={1}"' result[ 0 ]' ( int )MessageType.Response );  						Assert.That( result[ 1 ] == messageId' "{0}!={1}"' result[ 1 ]' messageId );  						if ( error == null )  						{  							Assert.That( result[ 2 ].IsNil' "is not Nil" );  							Assert.That( result[ 3 ] == returnValue' "{0}!={1}"' result[ 3 ]' returnValue );  						}  						else  						{  							Assert.That( result[ 2 ] == error.Identifier' "{0}!={1}"' result[ 2 ]' error.Identifier );  							Assert.That( result[ 3 ].AsDictionary()[ "Message" ] == errorMessage' "{0} does not contain \"{1}\""' result[ 3 ]' errorMessage );  						}  					}  				}'  				( id' args ) =>  				{  					if ( error != null )  					{  						throw new RpcException( error' errorMessage' String.Empty );  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestSendCore,The following statement contains a magic number: TestCore(  				( controller' target ) =>  				{  					using ( var waitHandle = new ManualResetEventSlim() )  					{  						byte[] response = null;  						controller.Response +=  							( sender' e ) =>  							{  								response = e.Data;  								waitHandle.Set();  							};    						using ( var buffer = new MemoryStream() )  						{  							using ( var packer = Packer.Create( buffer' false ) )  							{  								packer.PackArrayHeader( 4 );  								packer.Pack( ( int )MessageType.Request );  								packer.Pack( messageId );  								packer.PackString( "Test" );  								packer.PackArrayHeader( 0 );  							}    							controller.FeedData( buffer.ToArray() );  						}    						if ( Debugger.IsAttached )  						{  							waitHandle.Wait();  						}  						else  						{  							Assert.That( waitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "No respond." );  						}    						var result = Unpacking.UnpackObject( response ).Value.AsList();    						Assert.That( result.Count' Is.EqualTo( 4 ) );  						Assert.That( result[ 0 ] == ( int )MessageType.Response' "{0}!={1}"' result[ 0 ]' ( int )MessageType.Response );  						Assert.That( result[ 1 ] == messageId' "{0}!={1}"' result[ 1 ]' messageId );  						if ( error == null )  						{  							Assert.That( result[ 2 ].IsNil' "is not Nil" );  							Assert.That( result[ 3 ] == returnValue' "{0}!={1}"' result[ 3 ]' returnValue );  						}  						else  						{  							Assert.That( result[ 2 ] == error.Identifier' "{0}!={1}"' result[ 2 ]' error.Identifier );  							Assert.That( result[ 3 ].AsDictionary()[ "Message" ] == errorMessage' "{0} does not contain \"{1}\""' result[ 3 ]' errorMessage );  						}  					}  				}'  				( id' args ) =>  				{  					if ( error != null )  					{  						throw new RpcException( error' errorMessage' String.Empty );  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestSendCore,The following statement contains a magic number: TestCore(  				( controller' target ) =>  				{  					using ( var waitHandle = new ManualResetEventSlim() )  					{  						byte[] response = null;  						controller.Response +=  							( sender' e ) =>  							{  								response = e.Data;  								waitHandle.Set();  							};    						using ( var buffer = new MemoryStream() )  						{  							using ( var packer = Packer.Create( buffer' false ) )  							{  								packer.PackArrayHeader( 4 );  								packer.Pack( ( int )MessageType.Request );  								packer.Pack( messageId );  								packer.PackString( "Test" );  								packer.PackArrayHeader( 0 );  							}    							controller.FeedData( buffer.ToArray() );  						}    						if ( Debugger.IsAttached )  						{  							waitHandle.Wait();  						}  						else  						{  							Assert.That( waitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "No respond." );  						}    						var result = Unpacking.UnpackObject( response ).Value.AsList();    						Assert.That( result.Count' Is.EqualTo( 4 ) );  						Assert.That( result[ 0 ] == ( int )MessageType.Response' "{0}!={1}"' result[ 0 ]' ( int )MessageType.Response );  						Assert.That( result[ 1 ] == messageId' "{0}!={1}"' result[ 1 ]' messageId );  						if ( error == null )  						{  							Assert.That( result[ 2 ].IsNil' "is not Nil" );  							Assert.That( result[ 3 ] == returnValue' "{0}!={1}"' result[ 3 ]' returnValue );  						}  						else  						{  							Assert.That( result[ 2 ] == error.Identifier' "{0}!={1}"' result[ 2 ]' error.Identifier );  							Assert.That( result[ 3 ].AsDictionary()[ "Message" ] == errorMessage' "{0} does not contain \"{1}\""' result[ 3 ]' errorMessage );  						}  					}  				}'  				( id' args ) =>  				{  					if ( error != null )  					{  						throw new RpcException( error' errorMessage' String.Empty );  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestSendCore,The following statement contains a magic number: TestCore(  				( controller' target ) =>  				{  					using ( var waitHandle = new ManualResetEventSlim() )  					{  						byte[] response = null;  						controller.Response +=  							( sender' e ) =>  							{  								response = e.Data;  								waitHandle.Set();  							};    						using ( var buffer = new MemoryStream() )  						{  							using ( var packer = Packer.Create( buffer' false ) )  							{  								packer.PackArrayHeader( 4 );  								packer.Pack( ( int )MessageType.Request );  								packer.Pack( messageId );  								packer.PackString( "Test" );  								packer.PackArrayHeader( 0 );  							}    							controller.FeedData( buffer.ToArray() );  						}    						if ( Debugger.IsAttached )  						{  							waitHandle.Wait();  						}  						else  						{  							Assert.That( waitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "No respond." );  						}    						var result = Unpacking.UnpackObject( response ).Value.AsList();    						Assert.That( result.Count' Is.EqualTo( 4 ) );  						Assert.That( result[ 0 ] == ( int )MessageType.Response' "{0}!={1}"' result[ 0 ]' ( int )MessageType.Response );  						Assert.That( result[ 1 ] == messageId' "{0}!={1}"' result[ 1 ]' messageId );  						if ( error == null )  						{  							Assert.That( result[ 2 ].IsNil' "is not Nil" );  							Assert.That( result[ 3 ] == returnValue' "{0}!={1}"' result[ 3 ]' returnValue );  						}  						else  						{  							Assert.That( result[ 2 ] == error.Identifier' "{0}!={1}"' result[ 2 ]' error.Identifier );  							Assert.That( result[ 3 ].AsDictionary()[ "Message" ] == errorMessage' "{0} does not contain \"{1}\""' result[ 3 ]' errorMessage );  						}  					}  				}'  				( id' args ) =>  				{  					if ( error != null )  					{  						throw new RpcException( error' errorMessage' String.Empty );  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestSendCore,The following statement contains a magic number: TestCore(  				( controller' target ) =>  				{  					using ( var waitHandle = new ManualResetEventSlim() )  					{  						byte[] response = null;  						controller.Response +=  							( sender' e ) =>  							{  								response = e.Data;  								waitHandle.Set();  							};    						using ( var buffer = new MemoryStream() )  						{  							using ( var packer = Packer.Create( buffer' false ) )  							{  								packer.PackArrayHeader( 4 );  								packer.Pack( ( int )MessageType.Request );  								packer.Pack( messageId );  								packer.PackString( "Test" );  								packer.PackArrayHeader( 0 );  							}    							controller.FeedData( buffer.ToArray() );  						}    						if ( Debugger.IsAttached )  						{  							waitHandle.Wait();  						}  						else  						{  							Assert.That( waitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "No respond." );  						}    						var result = Unpacking.UnpackObject( response ).Value.AsList();    						Assert.That( result.Count' Is.EqualTo( 4 ) );  						Assert.That( result[ 0 ] == ( int )MessageType.Response' "{0}!={1}"' result[ 0 ]' ( int )MessageType.Response );  						Assert.That( result[ 1 ] == messageId' "{0}!={1}"' result[ 1 ]' messageId );  						if ( error == null )  						{  							Assert.That( result[ 2 ].IsNil' "is not Nil" );  							Assert.That( result[ 3 ] == returnValue' "{0}!={1}"' result[ 3 ]' returnValue );  						}  						else  						{  							Assert.That( result[ 2 ] == error.Identifier' "{0}!={1}"' result[ 2 ]' error.Identifier );  							Assert.That( result[ 3 ].AsDictionary()[ "Message" ] == errorMessage' "{0} does not contain \"{1}\""' result[ 3 ]' errorMessage );  						}  					}  				}'  				( id' args ) =>  				{  					if ( error != null )  					{  						throw new RpcException( error' errorMessage' String.Empty );  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestSendCore,The following statement contains a magic number: TestCore(  				( controller' target ) =>  				{  					using ( var waitHandle = new ManualResetEventSlim() )  					{  						byte[] response = null;  						controller.Response +=  							( sender' e ) =>  							{  								response = e.Data;  								waitHandle.Set();  							};    						using ( var buffer = new MemoryStream() )  						{  							using ( var packer = Packer.Create( buffer' false ) )  							{  								packer.PackArrayHeader( 4 );  								packer.Pack( ( int )MessageType.Request );  								packer.Pack( messageId );  								packer.PackString( "Test" );  								packer.PackArrayHeader( 0 );  							}    							controller.FeedData( buffer.ToArray() );  						}    						if ( Debugger.IsAttached )  						{  							waitHandle.Wait();  						}  						else  						{  							Assert.That( waitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "No respond." );  						}    						var result = Unpacking.UnpackObject( response ).Value.AsList();    						Assert.That( result.Count' Is.EqualTo( 4 ) );  						Assert.That( result[ 0 ] == ( int )MessageType.Response' "{0}!={1}"' result[ 0 ]' ( int )MessageType.Response );  						Assert.That( result[ 1 ] == messageId' "{0}!={1}"' result[ 1 ]' messageId );  						if ( error == null )  						{  							Assert.That( result[ 2 ].IsNil' "is not Nil" );  							Assert.That( result[ 3 ] == returnValue' "{0}!={1}"' result[ 3 ]' returnValue );  						}  						else  						{  							Assert.That( result[ 2 ] == error.Identifier' "{0}!={1}"' result[ 2 ]' error.Identifier );  							Assert.That( result[ 3 ].AsDictionary()[ "Message" ] == errorMessage' "{0} does not contain \"{1}\""' result[ 3 ]' errorMessage );  						}  					}  				}'  				( id' args ) =>  				{  					if ( error != null )  					{  						throw new RpcException( error' errorMessage' String.Empty );  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestSendCore,The following statement contains a magic number: TestCore(  				( controller' target ) =>  				{  					using ( var waitHandle = new ManualResetEventSlim() )  					{  						byte[] response = null;  						controller.Response +=  							( sender' e ) =>  							{  								response = e.Data;  								waitHandle.Set();  							};    						using ( var buffer = new MemoryStream() )  						{  							using ( var packer = Packer.Create( buffer' false ) )  							{  								packer.PackArrayHeader( 4 );  								packer.Pack( ( int )MessageType.Request );  								packer.Pack( messageId );  								packer.PackString( "Test" );  								packer.PackArrayHeader( 0 );  							}    							controller.FeedData( buffer.ToArray() );  						}    						if ( Debugger.IsAttached )  						{  							waitHandle.Wait();  						}  						else  						{  							Assert.That( waitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "No respond." );  						}    						var result = Unpacking.UnpackObject( response ).Value.AsList();    						Assert.That( result.Count' Is.EqualTo( 4 ) );  						Assert.That( result[ 0 ] == ( int )MessageType.Response' "{0}!={1}"' result[ 0 ]' ( int )MessageType.Response );  						Assert.That( result[ 1 ] == messageId' "{0}!={1}"' result[ 1 ]' messageId );  						if ( error == null )  						{  							Assert.That( result[ 2 ].IsNil' "is not Nil" );  							Assert.That( result[ 3 ] == returnValue' "{0}!={1}"' result[ 3 ]' returnValue );  						}  						else  						{  							Assert.That( result[ 2 ] == error.Identifier' "{0}!={1}"' result[ 2 ]' error.Identifier );  							Assert.That( result[ 3 ].AsDictionary()[ "Message" ] == errorMessage' "{0} does not contain \"{1}\""' result[ 3 ]' errorMessage );  						}  					}  				}'  				( id' args ) =>  				{  					if ( error != null )  					{  						throw new RpcException( error' errorMessage' String.Empty );  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestSendCore,The following statement contains a magic number: TestCore(  				( controller' target ) =>  				{  					using ( var waitHandle = new ManualResetEventSlim() )  					{  						byte[] response = null;  						controller.Response +=  							( sender' e ) =>  							{  								response = e.Data;  								waitHandle.Set();  							};    						using ( var buffer = new MemoryStream() )  						{  							using ( var packer = Packer.Create( buffer' false ) )  							{  								packer.PackArrayHeader( 4 );  								packer.Pack( ( int )MessageType.Request );  								packer.Pack( messageId );  								packer.PackString( "Test" );  								packer.PackArrayHeader( 0 );  							}    							controller.FeedData( buffer.ToArray() );  						}    						if ( Debugger.IsAttached )  						{  							waitHandle.Wait();  						}  						else  						{  							Assert.That( waitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "No respond." );  						}    						var result = Unpacking.UnpackObject( response ).Value.AsList();    						Assert.That( result.Count' Is.EqualTo( 4 ) );  						Assert.That( result[ 0 ] == ( int )MessageType.Response' "{0}!={1}"' result[ 0 ]' ( int )MessageType.Response );  						Assert.That( result[ 1 ] == messageId' "{0}!={1}"' result[ 1 ]' messageId );  						if ( error == null )  						{  							Assert.That( result[ 2 ].IsNil' "is not Nil" );  							Assert.That( result[ 3 ] == returnValue' "{0}!={1}"' result[ 3 ]' returnValue );  						}  						else  						{  							Assert.That( result[ 2 ] == error.Identifier' "{0}!={1}"' result[ 2 ]' error.Identifier );  							Assert.That( result[ 3 ].AsDictionary()[ "Message" ] == errorMessage' "{0} does not contain \"{1}\""' result[ 3 ]' errorMessage );  						}  					}  				}'  				( id' args ) =>  				{  					if ( error != null )  					{  						throw new RpcException( error' errorMessage' String.Empty );  					}    					return returnValue;  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestSend_NotVoid_ErrorAndReturnValueAreNil,The following statement contains a magic number: TestSendCore( new MessagePackObject( new MessagePackObject[] { 1' 2' 3 }' true )' null );
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestSend_NotVoid_ErrorAndReturnValueAreNil,The following statement contains a magic number: TestSendCore( new MessagePackObject( new MessagePackObject[] { 1' 2' 3 }' true )' null );
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestSend_Error_ErrorAndReturnValueAreFilled,The following statement contains a magic number: TestSendCore( MessagePackObject.Nil' RpcError.CustomError( "Test.Error"' 1234 ) );
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestExecute_Timeout_TimeoutError,The following statement contains a magic number: TestTimeoutCore(  				responseData =>  				{  					var response = Unpacking.UnpackArray( responseData ).Value;  					Assert.That( response[ 2 ] == RpcError.ServerError.Identifier' new MessagePackObject( response' true ).ToString() );  				}'  				isExecutionTimeout: true'  				isHardTimeout: false  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestExecute_Timeout_HardTimeoutError,The following statement contains a magic number: TestTimeoutCore(  				responseData =>  				{  					var response = Unpacking.UnpackArray( responseData ).Value;  					Assert.That( response[ 2 ] == RpcError.ServerError.Identifier' new MessagePackObject( response' true ).ToString() );  				}'  				isExecutionTimeout: true'  				isHardTimeout: true  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestTimeoutCore,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds( 50 );
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestTimeoutCore,The following statement contains a magic number: TimeSpan hanging = TimeSpan.FromMilliseconds( timeout.TotalMilliseconds * 1.5 );
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestTimeoutCore,The following statement contains a magic number: TestCore(  				( transport' controller ) =>  				{  					using ( var responseWaitHandle = new ManualResetEventSlim() )  					{  						byte[] responseData = null;    						if ( isSendingTimeout )  						{  							transport.Response +=  								( sender' e ) =>  								{  									if ( e.Data.Length > 0 )  									{  										// Causes send timeout by handing sending.  										// In-Proc shutdown packate will overstride this message.  										Thread.Sleep( hanging );  									}  								};  						}    						controller.Response +=  							( sender' e ) =>  							{  								if ( isSendingTimeout )  								{  									// Interesting in shutdown package only.  									if ( e.Data.Length == 0 )  									{  										Interlocked.Exchange( ref responseData' e.Data );  										responseWaitHandle.Set();  									}  								}  								else  								{  									Interlocked.Exchange( ref responseData' e.Data );  									responseWaitHandle.Set();  								}  							};    						using ( var buffer = new MemoryStream() )  						{  							using ( var packer = Packer.Create( buffer' false ) )  							{  								packer.PackArrayHeader( 4 );  								packer.Pack( ( int )MessageType.Request );  								packer.Pack( 1 );  								packer.PackString( "Test" );  								packer.PackArrayHeader( 0 );  							}    							controller.FeedReceiveBuffer( buffer.ToArray() );  						}    						Assert.That( responseWaitHandle.Wait( TimeSpan.FromSeconds( 1 ) )' Is.True' "Not respond." );    						responseAssertion( responseData );  					}  				}'  				( id' args ) =>  				{  					if ( isExecutionTimeout )  					{  						// Causes execution timeout by handing execution.  						Thread.Sleep( hanging );    						if ( isHardTimeout )  						{  							// Causes hard execution timeout by handing execution again.  							Thread.Sleep( hanging );  						}    						Assert.That( RpcApplicationContext.IsCanceled );  					}    					return args;  				}'  				configuration =>  				{  					if ( isExecutionTimeout )  					{  						configuration.ExecutionTimeout = timeout;  						configuration.HardExecutionTimeout = timeout;  					}    					if ( isSendingTimeout )  					{  						configuration.SendTimeout = timeout;  					}  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestFilters_Initialization_AppliedDeserializationsAreInOrder_AppliedSerializationsAreReverseOrder,The following statement contains a magic number: TestFiltersCore(  				null'  				target =>  				{  					CheckFilters( target.BeforeDeserializationFilters' MessageFilteringLocation.BeforeDeserialization' 0' 1 );  					CheckFilters( target.AfterSerializationFilters' MessageFilteringLocation.AfterSerialization' 3' 2 );  				}'  				null'  				new ServerRequestTestMessageFilterProvider( 0 )'  				new ServerRequestTestMessageFilterProvider( 1 )'  				new ServerResponseTestMessageFilterProvider( 2 )'  				new ServerResponseTestMessageFilterProvider( 3 )  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestFilters_Initialization_AppliedDeserializationsAreInOrder_AppliedSerializationsAreReverseOrder,The following statement contains a magic number: TestFiltersCore(  				null'  				target =>  				{  					CheckFilters( target.BeforeDeserializationFilters' MessageFilteringLocation.BeforeDeserialization' 0' 1 );  					CheckFilters( target.AfterSerializationFilters' MessageFilteringLocation.AfterSerialization' 3' 2 );  				}'  				null'  				new ServerRequestTestMessageFilterProvider( 0 )'  				new ServerRequestTestMessageFilterProvider( 1 )'  				new ServerResponseTestMessageFilterProvider( 2 )'  				new ServerResponseTestMessageFilterProvider( 3 )  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestFilters_Initialization_AppliedDeserializationsAreInOrder_AppliedSerializationsAreReverseOrder,The following statement contains a magic number: TestFiltersCore(  				null'  				target =>  				{  					CheckFilters( target.BeforeDeserializationFilters' MessageFilteringLocation.BeforeDeserialization' 0' 1 );  					CheckFilters( target.AfterSerializationFilters' MessageFilteringLocation.AfterSerialization' 3' 2 );  				}'  				null'  				new ServerRequestTestMessageFilterProvider( 0 )'  				new ServerRequestTestMessageFilterProvider( 1 )'  				new ServerResponseTestMessageFilterProvider( 2 )'  				new ServerResponseTestMessageFilterProvider( 3 )  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestFilters_Initialization_AppliedDeserializationsAreInOrder_AppliedSerializationsAreReverseOrder,The following statement contains a magic number: TestFiltersCore(  				null'  				target =>  				{  					CheckFilters( target.BeforeDeserializationFilters' MessageFilteringLocation.BeforeDeserialization' 0' 1 );  					CheckFilters( target.AfterSerializationFilters' MessageFilteringLocation.AfterSerialization' 3' 2 );  				}'  				null'  				new ServerRequestTestMessageFilterProvider( 0 )'  				new ServerRequestTestMessageFilterProvider( 1 )'  				new ServerResponseTestMessageFilterProvider( 2 )'  				new ServerResponseTestMessageFilterProvider( 3 )  			);
Magic Number,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestFiltersCore,The following statement contains a magic number: requestPacker.PackArrayHeader( 4 );
Magic Number,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,TestSendReceiveRequest,The following statement contains a magic number: var endPoint = new IPEndPoint( IPAddress.Loopback' 57319 );
Magic Number,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,PackRequest,The following statement contains a magic number: packer.PackArrayHeader( 4 );
Magic Number,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result.Count' Is.EqualTo( 4 ) );
Magic Number,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result[ 2 ].IsNil' result[ 2 ].ToString() );
Magic Number,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result[ 2 ].IsNil' result[ 2 ].ToString() );
Magic Number,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result[ 3 ].IsArray );
Magic Number,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result[ 3 ].AsList().Count' Is.EqualTo( 1 ) );
Magic Number,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( ids.Contains( result[ 3 ].AsList()[ 0 ].ToString() )' "[{0}] contains '{1}'"' String.Join( "' "' ids )' result[ 3 ].AsList()[ 0 ].ToString() );
Magic Number,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( ids.Contains( result[ 3 ].AsList()[ 0 ].ToString() )' "[{0}] contains '{1}'"' String.Join( "' "' ids )' result[ 3 ].AsList()[ 0 ].ToString() );
Magic Number,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,TestSendReceiveRequest_Twice_Ok,The following statement contains a magic number: TestSendReceiveRequest(  				endPoint => TestSendReceiveRequestCore( endPoint' 2' null )  			);
Magic Number,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,TestSendReceiveRequest_Parallel_Ok,The following statement contains a magic number: TestSendReceiveRequest(  				endPoint =>  				{  					using ( var latch = new CountdownEvent( 2 ) )  					{  						TestSendReceiveRequestCore( endPoint' 1' latch );  					}  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,TestSendNotify,The following statement contains a magic number: var endPoint = new IPEndPoint( IPAddress.Loopback' 57319 );
Magic Number,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,PackNotify,The following statement contains a magic number: packer.PackArrayHeader( 3 );
Magic Number,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,PackNotify,The following statement contains a magic number: packer.Pack( 2 );
Magic Number,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,TestSendNotify_Twice_Ok,The following statement contains a magic number: TestSendNotify(  				1'  				( endPoint' arrivalLatch' arrivedIds ) => TestSendNotifyCore( endPoint' arrivalLatch' arrivedIds' 2 )  			);
Magic Number,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,TestSendNotify_Parallel_Ok,The following statement contains a magic number: TestSendNotify(  				2'  				( endPoint' arrivalLatch' arrivedIds ) => TestSendNotifyCore( endPoint' arrivalLatch' arrivedIds' 1 )  			);
Magic Number,MsgPack.Rpc.Server.Protocols,TcpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\TcpServerTransportTest.cs,TestListen_NotIPv6OnlyOnWinNT6OrLator,The following statement contains a magic number: Environment.OSVersion.Platform != PlatformID.Win32NT || Environment.OSVersion.Version.Major < 6
Magic Number,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,TestSendReceiveRequest,The following statement contains a magic number: var endPoint = new IPEndPoint( IPAddress.Loopback' 57319 );
Magic Number,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,PackRequest,The following statement contains a magic number: packer.PackArrayHeader( 4 );
Magic Number,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result.Count' Is.EqualTo( 4 ) );
Magic Number,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result[ 2 ].IsNil' result[ 2 ].ToString() );
Magic Number,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result[ 2 ].IsNil' result[ 2 ].ToString() );
Magic Number,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result[ 3 ].IsArray' result[ 3 ].ToString() );
Magic Number,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result[ 3 ].IsArray' result[ 3 ].ToString() );
Magic Number,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result[ 3 ].AsList().Count' Is.EqualTo( 1 )' result[ 3 ].ToString() );
Magic Number,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( result[ 3 ].AsList().Count' Is.EqualTo( 1 )' result[ 3 ].ToString() );
Magic Number,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( ids.Contains( result[ 3 ].AsList()[ 0 ].ToString() )' "[{0}] contains '{1}'"' String.Join( "' "' ids )' result[ 3 ].AsList()[ 0 ].ToString() );
Magic Number,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,AssertResponse,The following statement contains a magic number: Assert.That( ids.Contains( result[ 3 ].AsList()[ 0 ].ToString() )' "[{0}] contains '{1}'"' String.Join( "' "' ids )' result[ 3 ].AsList()[ 0 ].ToString() );
Magic Number,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,TestSendReceiveRequest_Twice_Ok,The following statement contains a magic number: TestSendReceiveRequest(  				endPoint => TestSendReceiveRequestCore( endPoint' 2' null )  			);
Magic Number,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,TestSendReceiveRequest_Parallel_Ok,The following statement contains a magic number: TestSendReceiveRequest(  				endPoint =>  				{  					using ( var latch = new CountdownEvent( 2 ) )  					{  						TestSendReceiveRequestCore( endPoint' 1' latch );  					}  				}  			);
Magic Number,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,TestSendNotify,The following statement contains a magic number: var endPoint = new IPEndPoint( IPAddress.Loopback' 57319 );
Magic Number,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,PackNotify,The following statement contains a magic number: packer.PackArrayHeader( 3 );
Magic Number,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,PackNotify,The following statement contains a magic number: packer.Pack( 2 );
Magic Number,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,TestSendNotify_Twice_Ok,The following statement contains a magic number: TestSendNotify(  				1'  				( endPoint' arrivalLatch' arrivedIds ) => TestSendNotifyCore( endPoint' arrivalLatch' arrivedIds' 2 )  			);
Magic Number,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,TestSendNotify_Parallel_Ok,The following statement contains a magic number: TestSendNotify(  				2'  				( endPoint' arrivalLatch' arrivedIds ) => TestSendNotifyCore( endPoint' arrivalLatch' arrivedIds' 1 )  			);
Magic Number,MsgPack.Rpc.Server.Protocols,UdpServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\UdpServerTransportTest.cs,TestListen_NotIPv6OnlyOnWinNT6OrLator,The following statement contains a magic number: Environment.OSVersion.Platform != PlatformID.Win32NT || Environment.OSVersion.Version.Major < 6
Magic Number,MsgPack.Rpc.Server.Protocols,_SetUpFixture,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\_SetUpFixture.cs,SetupCurrentNamespaceTests,The following statement contains a magic number: ThreadPool.SetMinThreads( Environment.ProcessorCount * 10' Environment.ProcessorCount * 10 );
Magic Number,MsgPack.Rpc.Server.Protocols,_SetUpFixture,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\_SetUpFixture.cs,SetupCurrentNamespaceTests,The following statement contains a magic number: ThreadPool.SetMinThreads( Environment.ProcessorCount * 10' Environment.ProcessorCount * 10 );
Magic Number,MsgPack.Rpc.Server.Protocols,_SetUpFixture,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\_SetUpFixture.cs,SetupCurrentNamespaceTests,The following statement contains a magic number: ThreadPool.SetMaxThreads( Int16.MaxValue' 1000 );
Missing Default,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestFilters_RequestResponse_Invoked,The following switch statement is missing a default case: switch ( e.AppliedLocation )  					{  						case MessageFilteringLocation.BeforeDeserialization:  						{  							Interlocked.Exchange( ref beforeDeserializationApplied' 1 );  							break;  						}  					}
Missing Default,MsgPack.Rpc.Server.Protocols,ServerTransportTest,D:\research\architectureSmells\repos\yfakariya_msgpack-rpc-cli\test\MsgPack.Rpc.Server.UnitTest\Rpc\Server\Protocols\ServerTransportTest.cs,TestFilters_RequestResponse_Invoked,The following switch statement is missing a default case: switch ( e.AppliedLocation )  					{  						case MessageFilteringLocation.AfterSerialization:  						{  							Interlocked.Exchange( ref afterSerializationApplied' 1 );  							break;  						}  					}
