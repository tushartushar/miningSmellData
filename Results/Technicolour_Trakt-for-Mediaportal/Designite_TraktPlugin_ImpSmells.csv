Implementation smell,Namespace,Class,File,Method,Description
Long Method,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The method has 661 lines of code.
Long Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The method has 903 lines of code.
Long Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityFilterActionsMenu,The method has 143 lines of code.
Long Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityContextMenu,The method has 288 lines of code.
Long Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GUIWindowManager_Receivers,The method has 105 lines of code.
Long Method,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,LoadPluginHandlers,The method has 156 lines of code.
Long Method,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The method has 181 lines of code.
Long Method,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The method has 434 lines of code.
Long Method,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The method has 220 lines of code.
Long Method,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,SaveSettings,The method has 198 lines of code.
Long Method,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The method has 192 lines of code.
Long Method,TraktPlugin.GUI,GUIAnticipatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,OnShowContextMenu,The method has 104 lines of code.
Long Method,TraktPlugin.GUI,GUIBoxOffice,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBoxOffice.cs,OnShowContextMenu,The method has 183 lines of code.
Long Method,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,OnShowContextMenu,The method has 186 lines of code.
Long Method,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,SendCalendarToFacade,The method has 121 lines of code.
Long Method,TraktPlugin.GUI,GUICreditsMovie,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsMovie.cs,SendCreditResultsToFacade,The method has 219 lines of code.
Long Method,TraktPlugin.GUI,GUICreditsShow,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsShow.cs,SendCreditResultsToFacade,The method has 218 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CreateMoviesContextMenu,The method has 103 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The method has 155 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The method has 174 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The method has 103 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The method has 119 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityListItemTitle,The method has 120 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetTranslatedCreditJob,The method has 227 lines of code.
Long Method,TraktPlugin.GUI,GUIListItems,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnShowContextMenu,The method has 336 lines of code.
Long Method,TraktPlugin.GUI,GUICustomListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUICustomListItem.cs,GetImages,The method has 163 lines of code.
Long Method,TraktPlugin.GUI,GUILists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,OnShowContextMenu,The method has 157 lines of code.
Long Method,TraktPlugin.GUI,GUIPersonMovieCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnShowContextMenu,The method has 103 lines of code.
Long Method,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnShowContextMenu,The method has 149 lines of code.
Long Method,TraktPlugin.GUI,GUIPersonSummary,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonSummary.cs,SendMovieCreditsToFacade,The method has 185 lines of code.
Long Method,TraktPlugin.GUI,GUIPersonSummary,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonSummary.cs,SendShowCreditsToFacade,The method has 204 lines of code.
Long Method,TraktPlugin.GUI,GUIPopularMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnShowContextMenu,The method has 104 lines of code.
Long Method,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,OnShowContextMenu,The method has 179 lines of code.
Long Method,TraktPlugin.GUI,GUIRecentAddedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedMovies.cs,OnShowContextMenu,The method has 163 lines of code.
Long Method,TraktPlugin.GUI,GUIRecentShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,OnShowContextMenu,The method has 148 lines of code.
Long Method,TraktPlugin.GUI,GUIRelatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,OnShowContextMenu,The method has 212 lines of code.
Long Method,TraktPlugin.GUI,GUIRelatedShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedShows.cs,OnShowContextMenu,The method has 174 lines of code.
Long Method,TraktPlugin.GUI,GUISearchEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchEpisodes.cs,OnShowContextMenu,The method has 179 lines of code.
Long Method,TraktPlugin.GUI,GUISearchMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchMovies.cs,OnShowContextMenu,The method has 183 lines of code.
Long Method,TraktPlugin.GUI,GUISearchShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchShows.cs,OnShowContextMenu,The method has 151 lines of code.
Long Method,TraktPlugin.GUI,GUISeasonEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISeasonEpisodes.cs,OnShowContextMenu,The method has 151 lines of code.
Long Method,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,OnShowContextMenu,The method has 177 lines of code.
Long Method,TraktPlugin.GUI,GUIRecentWatchedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedMovies.cs,OnShowContextMenu,The method has 182 lines of code.
Long Method,TraktPlugin.GUI,GUIWatchListEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,OnShowContextMenu,The method has 107 lines of code.
Long Method,TraktPlugin.GUI,GUIRecommendationsMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnShowContextMenu,The method has 223 lines of code.
Long Method,TraktPlugin.GUI,GUIRecommendationsShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,The method has 105 lines of code.
Long Method,TraktPlugin.GUI,GUIRecommendationsShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnShowContextMenu,The method has 173 lines of code.
Long Method,TraktPlugin.GUI,GUITrendingMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnShowContextMenu,The method has 106 lines of code.
Long Method,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,OnShowContextMenu,The method has 245 lines of code.
Long Method,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,SendCalendarToFacade,The method has 133 lines of code.
Long Method,TraktPlugin.GUI,GUIWatchListMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListMovies.cs,OnShowContextMenu,The method has 240 lines of code.
Long Method,TraktPlugin.GUI,GUIWatchListShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListShows.cs,OnShowContextMenu,The method has 159 lines of code.
Long Method,TraktPlugin.GUI,TraktSkinSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetDashboardSkinSettings,The method has 103 lines of code.
Long Method,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowRateDialog,The method has 183 lines of code.
Long Method,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The method has 508 lines of code.
Long Method,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The method has 110 lines of code.
Long Method,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The method has 414 lines of code.
Long Method,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectUpdatedEx,The method has 110 lines of code.
Long Method,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The method has 383 lines of code.
Long Method,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The method has 438 lines of code.
Long Method,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,ShowRateDialog,The method has 111 lines of code.
Complex Method,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,Configuration,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,SetPriorityOrder,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,clbPlugins_ItemCheck,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,MovieSelect_Load,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCollectedEpisodesFromTrakt,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetWatchedEpisodesFromTrakt,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCustomLists,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetLikedListsFromTrakt,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedEpisodesFromTrakt,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedShowsFromTrakt,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedSeasonsFromTrakt,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedMoviesFromTrakt,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedListsFromTrakt,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetLikedCommentsFromTrakt,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadActivity,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadActivityFacade,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingMovies,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingShows,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivityImage,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,Cyclomatic complexity of the method is 94
Complex Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,Cyclomatic complexity of the method is 15
Complex Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityFilterActionsMenu,Cyclomatic complexity of the method is 15
Complex Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityFilterTypesMenu,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowTrendingShowsContextMenu,Cyclomatic complexity of the method is 20
Complex Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowTrendingMoviesContextMenu,Cyclomatic complexity of the method is 21
Complex Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityContextMenu,Cyclomatic complexity of the method is 78
Complex Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PlayActivityItem,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,OnActivitySelected,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GUIWindowManager_Receivers,Cyclomatic complexity of the method is 23
Complex Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GUIWindowManager_OnNewAction,Cyclomatic complexity of the method is 18
Complex Method,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,Init,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,UnLoadPluginHandlers,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,LoadPluginHandlers,Cyclomatic complexity of the method is 20
Complex Method,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,Cyclomatic complexity of the method is 80
Complex Method,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,Cyclomatic complexity of the method is 24
Complex Method,TraktPlugin.GUI,AsyncImageResource,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cornerstone.MP\AsyncImageResource.cs,setFilenameWorker,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,ImageSwapper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cornerstone.MP\ImageSwapper.cs,imageResource_ImageLoadingComplete,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUIAnticipatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,OnClicked,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUIAnticipatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,OnShowContextMenu,Cyclomatic complexity of the method is 24
Complex Method,TraktPlugin.GUI,GUIBoxOffice,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBoxOffice.cs,OnShowContextMenu,Cyclomatic complexity of the method is 30
Complex Method,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,OnClicked,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,OnShowContextMenu,Cyclomatic complexity of the method is 27
Complex Method,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,SendCalendarToFacade,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUICreditsMovie,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsMovie.cs,SendCreditResultsToFacade,Cyclomatic complexity of the method is 20
Complex Method,TraktPlugin.GUI,GUICreditsShow,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsShow.cs,SendCreditResultsToFacade,Cyclomatic complexity of the method is 20
Complex Method,TraktPlugin.GUI,GUIAnticipatedShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,OnClicked,Cyclomatic complexity of the method is 15
Complex Method,TraktPlugin.GUI,GUIAnticipatedShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,OnShowContextMenu,Cyclomatic complexity of the method is 23
Complex Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayMovie,Cyclomatic complexity of the method is 14
Complex Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayFirstUnwatchedEpisode,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,RateEpisode,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetContextMenuItemsForActivity,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CreateMoviesContextMenu,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowSortMenu,Cyclomatic complexity of the method is 15
Complex Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetSortByString,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowSearchByMenu,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,Cyclomatic complexity of the method is 22
Complex Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,Cyclomatic complexity of the method is 23
Complex Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,Cyclomatic complexity of the method is 14
Complex Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,Cyclomatic complexity of the method is 15
Complex Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityListItemTitle,Cyclomatic complexity of the method is 30
Complex Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityItemName,Cyclomatic complexity of the method is 17
Complex Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckRatingOnMovie,Cyclomatic complexity of the method is 17
Complex Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckRatingOnShow,Cyclomatic complexity of the method is 30
Complex Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetTranslatedCreditJob,Cyclomatic complexity of the method is 110
Complex Method,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetTranslatedCreditType,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUIListItemMovieSorter,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItemSorter.cs,Compare,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUIListItemShowSorter,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItemSorter.cs,Compare,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUIListItems,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnClicked,Cyclomatic complexity of the method is 16
Complex Method,TraktPlugin.GUI,GUIListItems,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnShowContextMenu,Cyclomatic complexity of the method is 68
Complex Method,TraktPlugin.GUI,GUIListItems,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,ListItemMatch,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUIListItems,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnItemSelected,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.GUI,GUICustomListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUICustomListItem.cs,SetImageToGui,Cyclomatic complexity of the method is 23
Complex Method,TraktPlugin.GUI,GUIEpisodeListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,SetImageToGui,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUIMovieListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIMovieListItem.cs,SetImageToGui,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.GUI,GUISeasonListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUISeasonListItem.cs,SetImageToGui,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUIShowListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIShowListItem.cs,SetImageToGui,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.GUI,GUILists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,OnClicked,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUILists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,OnShowContextMenu,Cyclomatic complexity of the method is 25
Complex Method,TraktPlugin.GUI,GUILists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,SendUserListsToFacade,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUILists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,InitProperties,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUIPersonMovieCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnClicked,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUIPersonMovieCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnShowContextMenu,Cyclomatic complexity of the method is 26
Complex Method,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnClicked,Cyclomatic complexity of the method is 19
Complex Method,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnShowContextMenu,Cyclomatic complexity of the method is 26
Complex Method,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnActivityTypeSelected,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.GUI,GUIPersonShowCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnClicked,Cyclomatic complexity of the method is 14
Complex Method,TraktPlugin.GUI,GUIPersonShowCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnShowContextMenu,Cyclomatic complexity of the method is 25
Complex Method,TraktPlugin.GUI,GUIPersonSummary,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonSummary.cs,OnClicked,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUIPersonSummary,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonSummary.cs,SendMovieCreditsToFacade,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUIPersonSummary,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonSummary.cs,SendShowCreditsToFacade,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,Cyclomatic complexity of the method is 27
Complex Method,TraktPlugin.GUI,GUIPopularMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnClicked,Cyclomatic complexity of the method is 16
Complex Method,TraktPlugin.GUI,GUIPopularMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnShowContextMenu,Cyclomatic complexity of the method is 27
Complex Method,TraktPlugin.GUI,GUIPopularShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnClicked,Cyclomatic complexity of the method is 18
Complex Method,TraktPlugin.GUI,GUIPopularShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnShowContextMenu,Cyclomatic complexity of the method is 26
Complex Method,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,OnShowContextMenu,Cyclomatic complexity of the method is 30
Complex Method,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,SendRecentlyAddedToFacade,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUIRecentAddedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedMovies.cs,OnShowContextMenu,Cyclomatic complexity of the method is 27
Complex Method,TraktPlugin.GUI,GUIRecentShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,OnShowContextMenu,Cyclomatic complexity of the method is 35
Complex Method,TraktPlugin.GUI,GUIRecentShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,GetContextMenuItemsForComment,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUIRelatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,OnShowContextMenu,Cyclomatic complexity of the method is 33
Complex Method,TraktPlugin.GUI,GUIRelatedShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedShows.cs,OnClicked,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUIRelatedShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedShows.cs,OnShowContextMenu,Cyclomatic complexity of the method is 27
Complex Method,TraktPlugin.GUI,GUISearch,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,OnClicked,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUISearch,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,SendSearchResultsToWindow,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUISearchEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchEpisodes.cs,OnShowContextMenu,Cyclomatic complexity of the method is 31
Complex Method,TraktPlugin.GUI,GUISearchMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchMovies.cs,OnShowContextMenu,Cyclomatic complexity of the method is 30
Complex Method,TraktPlugin.GUI,GUISearchShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchShows.cs,OnShowContextMenu,Cyclomatic complexity of the method is 24
Complex Method,TraktPlugin.GUI,GUISearchUsers,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchUsers.cs,OnClicked,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUISearchUsers,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchUsers.cs,OnShowContextMenu,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.GUI,GUISeasonEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISeasonEpisodes.cs,OnShowContextMenu,Cyclomatic complexity of the method is 23
Complex Method,TraktPlugin.GUI,GUISettingsGeneral,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsGeneral.cs,OnPageDestroy,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUISettingsPlugins,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsPlugins.cs,OnPageDestroy,Cyclomatic complexity of the method is 23
Complex Method,TraktPlugin.GUI,GUISettingsPlugins,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsPlugins.cs,OnClicked,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUISettingsPlugins,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsPlugins.cs,InitProperties,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUIShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,OnClicked,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUIShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,OnShowContextMenu,Cyclomatic complexity of the method is 19
Complex Method,TraktPlugin.GUI,GUIShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,SendCommentsToFacade,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.GUI,GUIShowSeasons,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShowSeasons.cs,OnClicked,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUIShowSeasons,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShowSeasons.cs,OnShowContextMenu,Cyclomatic complexity of the method is 14
Complex Method,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,OnShowContextMenu,Cyclomatic complexity of the method is 30
Complex Method,TraktPlugin.GUI,GUIRecentWatchedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedMovies.cs,OnShowContextMenu,Cyclomatic complexity of the method is 29
Complex Method,TraktPlugin.GUI,GUIUserProfile,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUserProfile.cs,OnClicked,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUIUserProfile,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUserProfile.cs,OnActivityTypeSelected,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUIWatchListEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,OnShowContextMenu,Cyclomatic complexity of the method is 17
Complex Method,TraktPlugin.GUI,GUIRecommendationsMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnClicked,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUIRecommendationsMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnShowContextMenu,Cyclomatic complexity of the method is 32
Complex Method,TraktPlugin.GUI,GUIRecommendationsShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,Cyclomatic complexity of the method is 16
Complex Method,TraktPlugin.GUI,GUIRecommendationsShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnShowContextMenu,Cyclomatic complexity of the method is 26
Complex Method,TraktPlugin.GUI,GUITrendingShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnClicked,Cyclomatic complexity of the method is 18
Complex Method,TraktPlugin.GUI,GUITrendingShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnShowContextMenu,Cyclomatic complexity of the method is 26
Complex Method,TraktPlugin.GUI,GUIRateDialog,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnAction,Cyclomatic complexity of the method is 16
Complex Method,TraktPlugin.GUI,GUIRateDialog,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnClicked,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUIRateDialog,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,GetRatingDescription,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.GUI,GUITrendingMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnClicked,Cyclomatic complexity of the method is 16
Complex Method,TraktPlugin.GUI,GUITrendingMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnShowContextMenu,Cyclomatic complexity of the method is 27
Complex Method,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,OnClicked,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,OnShowContextMenu,Cyclomatic complexity of the method is 37
Complex Method,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,SendCalendarToFacade,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUIImageHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,LocalImageFilename,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUIWatchListMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListMovies.cs,OnClicked,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUIWatchListMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListMovies.cs,OnShowContextMenu,Cyclomatic complexity of the method is 36
Complex Method,TraktPlugin.GUI,GUIWatchListShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListShows.cs,OnClicked,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.GUI,GUIWatchListShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListShows.cs,OnShowContextMenu,Cyclomatic complexity of the method is 25
Complex Method,TraktPlugin.GUI,TraktSkinSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetDashboardSkinSettings,Cyclomatic complexity of the method is 21
Complex Method,TraktPlugin.GUI,TraktSkinSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowRateDialog,Cyclomatic complexity of the method is 14
Complex Method,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,Cyclomatic complexity of the method is 58
Complex Method,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,GetMovieMediaType,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,GetMovieAudioCodec,Cyclomatic complexity of the method is 17
Complex Method,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,GetMovieAudioChannels,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,Cyclomatic complexity of the method is 43
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,Scrobble,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectUpdatedEx,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieResolution,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieAudioCodec,Cyclomatic complexity of the method is 16
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieAudioChannels,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,AddMoviesCriteriaToNode,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,UpdateCategoriesMenu,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,UpdateFiltersMenu,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,Cyclomatic complexity of the method is 39
Complex Method,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncProgress,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,GetMovieResolution,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,GetMovieAudioCodec,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,Cyclomatic complexity of the method is 48
Complex Method,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,Cyclomatic complexity of the method is 14
Complex Method,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeAudioCodec,Cyclomatic complexity of the method is 14
Complex Method,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeAudioChannels,Cyclomatic complexity of the method is 9
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddMovieToWatchList,The method has 5 parameters. Parameters: title' year' imdbid' tmdbid' updatePluginFilters
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddMovieToWatchList,The method has 6 parameters. Parameters: title' year' imdbid' tmdbid' traktid' updatePluginFilters
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveMovieFromWatchList,The method has 5 parameters. Parameters: title' year' imdbid' tmdbid' updateMovingPicturesFilters
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveMovieFromWatchList,The method has 6 parameters. Parameters: title' year' imdbid' tmdbid' traktid' updatePluginFilters
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddShowToWatchList,The method has 6 parameters. Parameters: title' year' tvdbid' imdbid' tmdbid' traktid
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveShowFromWatchList,The method has 6 parameters. Parameters: title' year' tvdbid' imdbid' tmdbid' traktid
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddSeasonToWatchList,The method has 7 parameters. Parameters: title' year' season' tvdbid' imdbid' tmdbid' traktid
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveSeasonFromWatchList,The method has 7 parameters. Parameters: title' year' season' tvdbid' imdbid' tmdbid' traktid
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddEpisodeToWatchList,The method has 7 parameters. Parameters: title' season' number' tvdbid' imdbid' tmdbid' traktid
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveEpisodeFromWatchList,The method has 7 parameters. Parameters: title' season' number' tvdbid' imdbid' tmdbid' traktid
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddRemoveMovieInUserList,The method has 7 parameters. Parameters: username' title' year' imdbid' tmdbid' traktid' remove
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddRemoveShowInUserList,The method has 8 parameters. Parameters: username' title' year' tvdbid' imdbid' tmdbid' traktid' remove
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowRelatedMovies,The method has 5 parameters. Parameters: title' year' imdbid' tmdbid' traktid
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowRelatedShows,The method has 6 parameters. Parameters: title' year' tvdbid' imdbid' tmdbid' traktid
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowMovieShouts,The method has 5 parameters. Parameters: title' year' imdbid' isWatched' fanart
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowMovieShouts,The method has 5 parameters. Parameters: title' imdbid' year' fanart' onlineFanart
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowMovieShouts,The method has 7 parameters. Parameters: title' year' imdbid' traktid' isWatched' fanart' onlineFanart
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowTVShowShouts,The method has 6 parameters. Parameters: title' tvdbid' traktid' isWatched' fanart' onlineFanart
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowTVShowShouts,The method has 8 parameters. Parameters: title' year' tvdbid' traktid' imdbid' isWatched' fanart' onlineFanart
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowTVSeasonShouts,The method has 9 parameters. Parameters: title' year' tvdbid' traktid' imdbid' season' isWatched' fanart' onlineFanart
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowEpisodeShouts,The method has 7 parameters. Parameters: title' tvdbid' season' episode' isWatched' fanart' onlineFanart
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowEpisodeShouts,The method has 8 parameters. Parameters: title' tvdbid' traktid' season' episode' isWatched' fanart' onlineFanart
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowEpisodeShouts,The method has 10 parameters. Parameters: title' year' tvdbid' traktid' imdbid' season' episode' isWatched' fanart' onlineFanart
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddMovieToWatchHistory,The method has 5 parameters. Parameters: title' year' imdbid' tmdbid' traktid
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveMovieFromWatchHistory,The method has 5 parameters. Parameters: title' year' imdbid' tmdbid' traktid
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddEpisodeToWatchHistory,The method has 7 parameters. Parameters: title' season' number' tvdbid' imdbid' tmdbid' traktid
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveEpisodeFromWatchHistory,The method has 7 parameters. Parameters: title' season' number' tvdbid' imdbid' tmdbid' traktid
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddMovieToCollection,The method has 5 parameters. Parameters: title' year' imdbid' tmdbid' traktid
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveMovieFromLibrary,The method has 5 parameters. Parameters: title' year' imdbid' tmdbid' traktid
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddEpisodeToCollection,The method has 7 parameters. Parameters: title' season' number' tvdbid' imdbid' tmdbid' traktid
Long Parameter List,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveEpisodeFromCollection,The method has 7 parameters. Parameters: title' season' number' tvdbid' imdbid' tmdbid' traktid
Long Parameter List,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,GetValueAsIntAndValidate,The method has 5 parameters. Parameters: section' key' defaultValue' minValue' maxValue
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The method has 5 parameters. Parameters: title' year' imdbid' fanart' showAll
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The method has 6 parameters. Parameters: title' year' imdbid' fanart' people' showAll
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The method has 7 parameters. Parameters: title' year' imdbid' isWatched' fanart' people' showAll
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The method has 5 parameters. Parameters: title' year' tvdbid' fanart' showAll
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The method has 6 parameters. Parameters: title' year' tvdbid' fanart' people' showAll
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The method has 7 parameters. Parameters: title' year' tvdbid' imdbid' fanart' people' showAll
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The method has 8 parameters. Parameters: title' year' tvdbid' season' seasonid' fanart' people' showAll
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The method has 9 parameters. Parameters: title' year' tvdbid' imdbid' season' seasonid' fanart' people' showAll
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The method has 6 parameters. Parameters: title' year' season' episode' tvdbid' fanart
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The method has 7 parameters. Parameters: title' year' season' episode' tvdbid' fanart' showAll
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The method has 8 parameters. Parameters: title' year' season' episode' tvdbid' fanart' people' showAll
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The method has 9 parameters. Parameters: title' year' season' episode' tvdbid' isWatched' fanart' people' showAll
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The method has 10 parameters. Parameters: title' year' season' episode' tvdbid' episodetvdbid' isWatched' fanart' people' showAll
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The method has 11 parameters. Parameters: title' year' season' episode' tvdbid' imdbid' episodetvdbid' isWatched' fanart' people' showAll
Long Parameter List,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The method has 5 parameters. Parameters: heading' lines' yesLabel' noLabel' defaultYes
Long Parameter List,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowOKDialog,The method has 5 parameters. Parameters: heading' line1' line2' line3' line4
Long Parameter List,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowNotifyDialog,The method has 5 parameters. Parameters: heading' text' image' buttonText' timeout
Long Parameter List,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,FindMovie,The method has 5 parameters. Parameters: title' year' imdbid' movieid' config
Long Parameter List,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,FindMovieID,The method has 5 parameters. Parameters: title' year' imdbid' tmdbid' movieID
Long Parameter List,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,FindMovieID,The method has 5 parameters. Parameters: title' year' imdbid' tmdbid' imdbMovie
Long Parameter List,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeInfo,The method has 8 parameters. Parameters: obj' title' year' showTvdbId' epTvdbId' seasonidx' episodeidx' isWatched
Long Identifier,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,,The length of the parameter cbParentalIgnoreMovieCertifications is 35.
Long Identifier,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,,The length of the parameter cbParentalIgnoreShowCertifications is 34.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cRecommendedMoviesDefaultLayout is 31.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cRecommendedShowsDefaultLayout is 30.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cWatchListEpisodesDefaultLayout is 31.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cDefaultMovieCalendarStartDate is 30.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cCalendarHideTVShowsInWatchList is 31.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cDashboardActivityPollInterval is 30.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cDashboardTrendingPollInterval is 30.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cMovieRecommendationHideCollected is 33.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cMovieRecommendationHideWatchlisted is 35.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cShowRecommendationHideCollected is 32.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cShowRecommendationHideWatchlisted is 34.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cTrendingMoviesHideWatchlisted is 30.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cAnticipatedShowsHideWatchlisted is 32.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cAnticipatedMoviesHideWatchlisted is 33.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cRecentWatchedMoviesDefaultLayout is 33.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cRecentWatchedEpisodesDefaultLayout is 35.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cRecentAddedMoviesDefaultLayout is 31.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cRecentAddedEpisodesDefaultLayout is 33.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cMaxRelatedMoviesUnWatchedRequest is 33.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cMaxRelatedShowsUnWatchedRequest is 32.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cMaxUserWatchedEpisodesRequest is 30.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cPersonMovieCreditsDefaultLayout is 32.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cPersonShowCreditsDefaultLayout is 31.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cAnticipatedMoviesDefaultLayout is 31.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cAnticipatedShowsDefaultLayout is 30.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cParentalIgnoreShowRatingEnabled is 32.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cParentalIgnoreMovieRatingEnabled is 33.
Long Identifier,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,,The length of the parameter cTmdbPreferredEpisodeThumbSize is 30.
Long Identifier,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,,The length of the parameter PreviousActivityTypeSelectedIndex is 33.
Long Identifier,TraktPlugin.GUI,GUISettingsGeneral,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsGeneral.cs,,The length of the parameter UpdatingMovingPicturesCategoriesMenu is 36.
Long Identifier,TraktPlugin.GUI,GUISettingsGeneral,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsGeneral.cs,,The length of the parameter UpdatingMovingPicturesFiltersMenu is 33.
Long Identifier,TraktPlugin.GUI,GUISettingsGeneral,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsGeneral.cs,,The length of the parameter btnCreateMovingPicturesCategories is 33.
Long Identifier,TraktPlugin.GUI,GUISettingsGeneral,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsGeneral.cs,,The length of the parameter btnCreateMovingPicturesFilters is 30.
Long Identifier,TraktPlugin.GUI,GUIUserProfile,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUserProfile.cs,,The length of the parameter PreviousActivityTypeSelectedIndex is 33.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter ActivityUpdatedListWithItemCountSingular is 40.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter ActivityUpdatedListWithItemCount is 32.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter ApproveFollowerAndFollowBackMessage is 35.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter CreateMovingPicturesCategories is 30.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter DontIncludeMeInFriendsActivity is 30.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter ExecutiveInChargeOfPostProduction is 33.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter FailedApplicationAuthorization is 30.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter LibraryAndPlaybackSyncAlreadyRunning is 36.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingPluginEnabledDescription is 31.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingListedPluginsDescription is 31.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingSyncStartDelayDescription is 32.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingWebRequestCacheDescription is 33.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingWebRequestTimeoutDescription is 35.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingShowRateDialogOnWatchedName is 34.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingShowRateDialogOnWatchedDescription is 41.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingShowRateDialogInPlaylistsName is 36.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingShowRateDialogInPlaylistsDescription is 43.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingActivityPollIntervalName is 31.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingActivityPollIntervalDescription is 38.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingTrendingPollIntervalName is 31.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingTrendingPollIntervalDescription is 38.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingDashboardLoadDelayDescription is 36.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingEnableJumpToForTVShowsName is 33.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingEnableJumpToForTVShowsDescription is 40.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingRememberLastSelectedActivityName is 39.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingRememberLastSelectedActivityDescription is 46.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingShowSearchResultsBreakdownName is 37.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingShowSearchResultsBreakdownDescription is 44.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxSearchResultsDescription is 34.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingFilterTrendingOnDashboardName is 36.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingFilterTrendingOnDashboardDescription is 43.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingIgnoreWatchedPercentOnDVDName is 36.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingIgnoreWatchedPercentOnDVDDescription is 43.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingSyncPlaybackDescription is 30.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingSyncResumeDeltaDescription is 33.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingSyncPlaybackOnEnterPluginName is 36.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingSyncPlaybackOnEnterPluginDescription is 43.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingSyncPlaybackCacheExpiryName is 34.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingSyncPlaybackCacheExpiryDescription is 41.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxTrendingMoviesRequestName is 35.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxTrendingMoviesRequestDescription is 42.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxTrendingShowsRequestName is 34.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxTrendingShowsRequestDescription is 41.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxRelatedMoviesRequestName is 34.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxRelatedMoviesRequestDescription is 41.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxRelatedMoviesUnWatchedRequestName is 43.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxRelatedMoviesUnWatchedRequestDescription is 50.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxRelatedShowsRequestName is 33.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxRelatedShowsRequestDescription is 40.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxRelatedShowsUnWatchedRequestName is 42.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxRelatedShowsUnWatchedRequestDescription is 49.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxPopularMoviesRequestName is 34.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxPopularMoviesRequestDescription is 41.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxPopularShowsRequestName is 33.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxPopularShowsRequestDescription is 40.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxUserWatchedMoviesRequestName is 38.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxUserWatchedMoviesRequestDescription is 45.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxUserWatchedEpisodesRequestName is 40.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxUserWatchedEpisodesRequestDescription is 47.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxUserCommentsRequestName is 33.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingMaxUserCommentsRequestDescription is 40.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingSkipMoviesWithNoIdsOnSyncName is 36.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingSkipMoviesWithNoIdsOnSyncDescription is 43.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingTmdbMovieImageMaxCacheAgeName is 36.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingTmdbMovieImageMaxCacheAgeDescription is 43.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingTmdbShowImageMaxCacheAgeName is 35.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingTmdbShowImageMaxCacheAgeDescription is 42.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingTmdbSeasonImageMaxCacheAgeName is 37.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingTmdbSeasonImageMaxCacheAgeDescription is 44.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingTmdbEpisodeImageMaxCacheAgeName is 38.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingTmdbEpisodeImageMaxCacheAgeDescription is 45.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingTmdbPersonImageMaxCacheAgeName is 37.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter SettingTmdbPersonImageMaxCacheAgeDescription is 44.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter UpdatingCategoriesMenuMovingPics is 32.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter UpdatingCategoriesMenuMovingPicsWarning is 39.
Long Identifier,TraktPlugin.GUI,Translation,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,,The length of the parameter UpdatingFiltersMenuMovingPicsWarning is 36.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,Init,The length of the statement  "            Seasons = new ConcurrentDictionary<Tuple<int?' int>' TmdbSeasonImages>(seasons.Distinct().ToDictionary(s => Tuple.Create(s.Id' s.Season))); " is 139.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,Init,The length of the statement  "            Episodes = new ConcurrentDictionary<Tuple<int?' int' int>' TmdbEpisodeImages>(episodes.Distinct().ToDictionary(e => Tuple.Create(e.Id' e.Season' e.Episode))); " is 158.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetTmdbConfiguration,The length of the statement  "                if (TraktSettings.TmdbConfiguration == null || TraktSettings.TmdbConfiguration.Images == null || DateTime.Now.Subtract(new TimeSpan(14' 0' 0' 0' 0)) > lastRequestedDate) " is 169.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetMovieImages,The length of the statement  "                if (DateTime.Now.Subtract(new TimeSpan(TraktSettings.TmdbMovieImageMaxCacheAge' 0' 0' 0' 0)) < movieImages.RequestAge.ToDateTime()) " is 131.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetMovieBackdropFilename,The length of the statement  "                                images.Id + "_" + (TraktSettings.DownloadFullSizeFanart ? "original" : TraktSettings.TmdbPreferredBackdropSize) + "_" + movieBackdrop.FilePath.TrimStart('/'); " is 158.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetMovieBackdropUrl,The length of the statement  "            return TraktSettings.TmdbConfiguration.Images.BaseUrl + (TraktSettings.DownloadFullSizeFanart ? "original" : TraktSettings.TmdbPreferredBackdropSize) + movieBackdrop.FilePath; " is 175.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetShowImages,The length of the statement  "                if (DateTime.Now.Subtract(new TimeSpan(TraktSettings.TmdbShowImageMaxCacheAge' 0' 0' 0' 0)) < showImages.RequestAge.ToDateTime()) " is 129.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetShowBackdropFilename,The length of the statement  "                images.Id + "_" + (TraktSettings.DownloadFullSizeFanart ? "original" : TraktSettings.TmdbPreferredBackdropSize) + "_" + showBackdrop.FilePath.TrimStart('/'); " is 157.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetShowBackdropUrl,The length of the statement  "            return TraktSettings.TmdbConfiguration.Images.BaseUrl + (TraktSettings.DownloadFullSizeFanart ? "original" : TraktSettings.TmdbPreferredBackdropSize) + showBackdrop.FilePath; " is 174.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetEpisodeImages,The length of the statement  "                if (DateTime.Now.Subtract(new TimeSpan(TraktSettings.TmdbEpisodeImageMaxCacheAge' 0' 0' 0' 0)) < episodeImages.RequestAge.ToDateTime()) " is 135.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetEpisodeImages,The length of the statement  "                TraktLogger.Info("Episode image cache expired. TMDb ID = '{0}'' Season = '{1}'' Episode = '{2}'' Request Age = '{3}'"' id' season' episode' episodeImages.RequestAge); " is 166.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetSeasonImages,The length of the statement  "                if (DateTime.Now.Subtract(new TimeSpan(TraktSettings.TmdbSeasonImageMaxCacheAge' 0' 0' 0' 0)) < seasonImages.RequestAge.ToDateTime()) " is 133.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetSeasonImages,The length of the statement  "                TraktLogger.Info("Season image cache expired. TMDb ID = '{0}'' Season = '{1}'' Request Age = '{2}'"' id' seasonImages.Season' seasonImages.RequestAge); " is 151.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetPersonImages,The length of the statement  "                if (DateTime.Now.Subtract(new TimeSpan(TraktSettings.TmdbPersonImageMaxCacheAge' 0' 0' 0' 0)) < personImages.RequestAge.ToDateTime()) " is 133.
Long Statement,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,AuthWorker_DoWork,The length of the statement  "            TraktLogger.Info("Successfully got device code from trakt.tv' presenting code '{0}' to user for activation at '{1}'. Code expires in '{2}' secs"' code.UserCode' code.VerificationUrl' code.ExpiresIn); " is 199.
Long Statement,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AuthorizationPopup)); " is 138.
Long Statement,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The length of the statement  "            this.lblUserCode.Font = new System.Drawing.Font("Microsoft Sans Serif"' 26F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 159.
Long Statement,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The length of the statement  "            this.lnkActivate.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.lnkActivate_LinkClicked); " is 120.
Long Statement,TraktPlugin,ConfigConnector,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\ConfigConnector.cs,Description,The length of the statement  "            return "Trakt actively keeps a record of what TV shows and movies you are watching. Based on your favourites' your friends' and the community' trakt recommends other TV shows and movies."; " is 188.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,ParseCommandLine,The length of the statement  "            TraktLogger.Info("Command Line Options Set' SilentMode = '{0}'' AutoSync = '{1}'' CloseAfterSync = '{2}'"' SilentMode' AutoSync' AutoCloseAfterSync); " is 149.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,cbKeepInSync_CheckedChanged,The length of the statement  "            //IMPORTANT NOTE on support for more than one library backend for the same video type (i.e movies) we shouldn't keep in sync ever. " is 130.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,CloseConfig,The length of the statement  "                string message = "You can not have 'Clean Library' option enabled with more than one movie or show plugin enabled. Option will be disabled."; " is 141.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,btnTVSeriesRestrictions_Click,The length of the statement  "                MessageBox.Show("Could not load series list' ensure that MP-TVSeries plugin is installed."' "Series Select"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 153.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Configuration)); " is 133.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.gbSync.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 139.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.ttpConfig.SetToolTip(this.cbSyncPlaybackOnEnterPlugin' "Sync playback/resume data when entering an enabled plugin.\r\nThis is in addition t" + " is 147.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.cbSyncPlaybackOnEnterPlugin.CheckedChanged += new System.EventHandler(this.cbSyncPlaybackOnEnterPlugin_CheckedChanged); " is 124.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.ttpConfig.SetToolTip(this.numSyncInterval' "Enter the period in hours to sync with trakt.tv for your selected \r\nsync options " + " is 135.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.ttpConfig.SetToolTip(this.numSyncResumeDelta' "You may wish to re-play X seconds from where you left off' this setting \r\nallows " + " is 138.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.ttpConfig.SetToolTip(this.cbSyncPlayback' "Sync playback / resume data for partially watched videos. This allows\r\nyou to con" + " is 134.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.ttpConfig.SetToolTip(this.cbSyncLibrary' "Enable this setting to synchronise your collection and watched states to and from" + " is 131.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.ttpConfig.SetToolTip(this.lbSyncTimerLength' "Set this to the value in hours that you want to wait to resync with Trakt"); " is 127.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.btnOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.ttpConfig.SetToolTip(this.btnTVSeriesRestrictions' "Select the series you want to ignore from Syncronization and Scrobbling."); " is 132.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.ttpConfig.SetToolTip(this.txtPinCode' "Enter in a 4-digit pin code to prevent playback of inappropriate material."); " is 121.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.progressBarSync.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 151.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.lblSyncStatus.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 149.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.btnStartLibrarySync.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 155.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.gbParentalControls.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 151.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.cboMovieCertifications.SelectedValueChanged += new System.EventHandler(this.cboMovieCertifications_SelectedValueChanged); " is 126.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.cbParentalIgnoreMovieCertifications.CheckedChanged += new System.EventHandler(this.cbParentalIgnoreMovieCertifications_CheckedChanged); " is 140.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.cboTVCertifications.SelectedValueChanged += new System.EventHandler(this.cboTVCertifications_SelectedValueChanged); " is 120.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.cbParentalIgnoreShowCertifications.CheckedChanged += new System.EventHandler(this.cbParentalIgnoreShowCertifications_CheckedChanged); " is 138.
Long Statement,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "            this.cboPreferredImageLanguage.SelectedIndexChanged += new System.EventHandler(this.cboPreferredImageLanguage_SelectedIndexChanged); " is 132.
Long Statement,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The length of the statement  "            this.listFolders.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 147.
Long Statement,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The length of the statement  "            this.btnOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The length of the statement  "            this.btnAdd.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 142.
Long Statement,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The length of the statement  "            this.btnDelete.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,MovieSelect_Load,The length of the statement  "            if (TraktSettings.MovingPictures > -1 && File.Exists(Path.Combine(Config.GetFolder(Config.Dir.Plugins)' @"Windows\MovingPictures.dll"))) " is 136.
Long Statement,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,MovieSelect_Load,The length of the statement  "            if (TraktSettings.MyFilms > -1 && File.Exists(Path.Combine(Config.GetFolder(Config.Dir.Plugins)' @"Windows\MyFilms.dll"))) " is 122.
Long Statement,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,LoadMoviesFromMovingPictures,The length of the statement  "            List<MediaPortal.Plugins.MovingPictures.Database.DBMovieInfo> movies = MediaPortal.Plugins.MovingPictures.Database.DBMovieInfo.GetAll(); " is 136.
Long Statement,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,LoadMoviesFromMovingPictures,The length of the statement  "            unCheckedMovies.AddRange(from movie in movies where !_blockedFilenames.Contains(movie.LocalMedia[0].FullPath) select new MovieSelectItem { MovieTitle = movie.Title' Filename = movie.LocalMedia.Select(media => media.FullPath).ToList() }); " is 237.
Long Statement,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,LoadMoviesFromMovingPictures,The length of the statement  "            checkedMovies.AddRange(from movie in movies where _blockedFilenames.Contains(movie.LocalMedia[0].FullPath) select new MovieSelectItem { MovieTitle = movie.Title' Filename = movie.LocalMedia.Select(media => media.FullPath).ToList() }); " is 234.
Long Statement,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,LoadMoviesFromMyFilms,The length of the statement  "            List<MyFilmsPlugin.DataBase.MFMovie> movies = (from MyFilmsPlugin.DataBase.MFMovie movie in moviesArray select movie).ToList(); " is 127.
Long Statement,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,LoadMoviesFromMyFilms,The length of the statement  "            unCheckedMovies.AddRange(from movie in movies where !_blockedFilenames.Contains(movie.File) select new MovieSelectItem { MovieTitle = movie.Title' Filename = new List<string> { movie.File } }); " is 193.
Long Statement,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,LoadMoviesFromMyFilms,The length of the statement  "            checkedMovies.AddRange(from movie in movies where _blockedFilenames.Contains(movie.File) select new MovieSelectItem { MovieTitle = movie.Title' Filename = new List<string> { movie.File } }); " is 190.
Long Statement,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The length of the statement  "            this.checkedListBoxMovies.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 156.
Long Statement,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The length of the statement  "            this.btnOk.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The length of the statement  "            this.btnFolderRestrictions.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 159.
Long Statement,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,OnLoad,The length of the statement  "            this.checkedListBoxSeries.ItemCheck += new System.Windows.Forms.ItemCheckEventHandler(this.checkedListBoxSeries_ItemCheck); " is 123.
Long Statement,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The length of the statement  "            this.checkedListBoxSeries.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 156.
Long Statement,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The length of the statement  "            this.buttonOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The length of the statement  "            this.chkBoxToggleAll.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 153.
Long Statement,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The length of the statement  "            this.labelSeriesSelected.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 158.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetUnWatchedMoviesFromTrakt,The length of the statement  "            TraktLogger.Debug("Comparing previous watched movies against current watched movies such that unwatched can be determined"); " is 124.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetWatchedMoviesFromTrakt,The length of the statement  "            TraktLogger.Info("Movie watched history cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Movies.Watched ?? "<empty>"' lastSyncActivities.Movies.Watched ?? "<empty>"); " is 239.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCollectedMoviesFromTrakt,The length of the statement  "            TraktLogger.Info("Movie collection cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Movies.Collection ?? "<empty>"' lastSyncActivities.Movies.Collection ?? "<empty>"); " is 240.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetRatedMoviesFromTrakt,The length of the statement  "            TraktLogger.Info("Movie ratings cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Movies.Rating ?? "<empty>"' lastSyncActivities.Movies.Rating ?? "<empty>"); " is 229.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetHiddenMoviesFromTrakt,The length of the statement  "            TraktLogger.Info("Movie hidden cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Movies.HiddenAt ?? "<empty>"' lastSyncActivities.Movies.HiddenAt ?? "<empty>"); " is 232.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCollectedEpisodesFromTrakt,The length of the statement  "            TraktLogger.Info("TV episode collection cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Episodes.Collection ?? "<empty>"' lastSyncActivities.Episodes.Collection ?? "<empty>"); " is 249.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetWatchedEpisodesFromTrakt,The length of the statement  "            TraktLogger.Info("TV episode watched history cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Episodes.Watched ?? "<empty>"' lastSyncActivities.Episodes.Watched ?? "<empty>"); " is 248.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetUnWatchedEpisodesFromTrakt,The length of the statement  "            TraktLogger.Debug("Comparing previous watched episodes against current watched episodes such that unwatched can be determined"); " is 128.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetRatedEpisodesFromTrakt,The length of the statement  "            TraktLogger.Info("TV episode ratings cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Episodes.Rating ?? "<empty>"' lastSyncActivities.Episodes.Rating ?? "<empty>"); " is 238.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetRatedSeasonsFromTrakt,The length of the statement  "            TraktLogger.Info("TV season ratings cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Seasons.Rating ?? "<empty>"' lastSyncActivities.Seasons.Rating ?? "<empty>"); " is 235.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetHiddenSeasonsFromTrakt,The length of the statement  "            TraktLogger.Info("Season hidden cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Seasons.HiddenAt ?? "<empty>"' lastSyncActivities.Seasons.HiddenAt ?? "<empty>"); " is 235.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetRatedShowsFromTrakt,The length of the statement  "            TraktLogger.Info("TV show ratings cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Shows.Rating ?? "<empty>"' lastSyncActivities.Shows.Rating ?? "<empty>"); " is 229.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetHiddenShowsFromTrakt,The length of the statement  "            TraktLogger.Info("Show hidden cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Shows.HiddenAt ?? "<empty>"' lastSyncActivities.Shows.HiddenAt ?? "<empty>"); " is 229.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetWatchlistedMoviesFromTrakt,The length of the statement  "                TraktLogger.Info("Movie watchlist cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Movies.Watchlist ?? "<empty>"' lastSyncActivities.Movies.Watchlist ?? "<empty>"); " is 237.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetRecommendedMoviesFromTrakt,The length of the statement  "                if (_RecommendedMovies != null && (DateTime.Now - MovieRecommendationsAge) > TimeSpan.FromMinutes(TraktSettings.WebRequestCacheMinutes)) " is 136.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetWatchlistedShowsFromTrakt,The length of the statement  "                TraktLogger.Info("TV show watchlist cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Shows.Watchlist ?? "<empty>"' lastSyncActivities.Shows.Watchlist ?? "<empty>"); " is 237.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetWatchlistedSeasonsFromTrakt,The length of the statement  "                TraktLogger.Info("TV seasons watchlist cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Seasons.Watchlist ?? "<empty>"' lastSyncActivities.Seasons.Watchlist ?? "<empty>"); " is 244.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetWatchlistedEpisodesFromTrakt,The length of the statement  "                TraktLogger.Info("TV episode watchlist cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Episodes.Watchlist ?? "<empty>"' lastSyncActivities.Episodes.Watchlist ?? "<empty>"); " is 246.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCustomListsFromTrakt,The length of the statement  "            TraktLogger.Info("Custom Lists cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Lists.UpdatedAt ?? "<empty>"' lastSyncActivities.Lists.UpdatedAt ?? "<empty>"); " is 232.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCustomLists,The length of the statement  "                if (_CustomListsAndItems == null || (DateTime.Now - CustomListAge) > TimeSpan.FromMinutes(TraktSettings.WebRequestCacheMinutes)) " is 128.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCustomLists,The length of the statement  "                        TraktLogger.Info("Getting list details for custom list from local cache. Name = '{0}'' ID = '{1}'' Slug = '{2}'"' list.Name' list.Ids.Trakt' list.Ids.Slug); " is 156.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCustomLists,The length of the statement  "                            TraktLogger.Info("Getting list details for custom list from trakt.tv' local cache is out of date. Name = '{0}'' Total Items = '{1}'' ID = '{2}'' Slug = '{3}'' Last Updated = '{4}'"' list.Name' list.ItemCount' list.Ids.Trakt' list.Ids.Slug' list.UpdatedAt); " is 256.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetLikedListsFromTrakt,The length of the statement  "            TraktLogger.Info("Liked lists cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Lists.LikedAt ?? "<empty>"' lastSyncActivities.Lists.LikedAt ?? "<empty>"); " is 227.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedEpisodesFromTrakt,The length of the statement  "            TraktLogger.Info("TV episode comments cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Episodes.Comment ?? "<empty>"' lastSyncActivities.Episodes.Comment ?? "<empty>"); " is 241.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedShowsFromTrakt,The length of the statement  "            TraktLogger.Info("TV show comments cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Shows.Comment ?? "<empty>"' lastSyncActivities.Shows.Comment ?? "<empty>"); " is 232.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedSeasonsFromTrakt,The length of the statement  "            TraktLogger.Info("TV season comments cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Seasons.Comment ?? "<empty>"' lastSyncActivities.Seasons.Comment ?? "<empty>"); " is 238.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedMoviesFromTrakt,The length of the statement  "            TraktLogger.Info("Movie comments cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Movies.Comment ?? "<empty>"' lastSyncActivities.Movies.Comment ?? "<empty>"); " is 232.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedListsFromTrakt,The length of the statement  "            TraktLogger.Info("List comments cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Lists.Comment ?? "<empty>"' lastSyncActivities.Lists.Comment ?? "<empty>"); " is 229.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetLikedCommentsFromTrakt,The length of the statement  "            TraktLogger.Info("Liked comments cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Comments.LikedAt ?? "<empty>"' lastSyncActivities.Comments.LikedAt ?? "<empty>"); " is 236.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetPausedMovies,The length of the statement  "            TraktLogger.Info("Movie paused cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Movies.PausedAt ?? "<empty>"' lastSyncActivities.Movies.PausedAt ?? "<empty>"); " is 232.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetPausedEpisodes,The length of the statement  "            TraktLogger.Info("TV episode paused cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Episodes.PausedAt ?? "<empty>"' lastSyncActivities.Episodes.PausedAt ?? "<empty>"); " is 241.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,UserRating,The length of the statement  "            var ratedMovie = RatedMovies.FirstOrDefault(m => ((m.Movie.Ids.Trakt == movie.Ids.Trakt) && m.Movie.Ids.Trakt != null) || " is 121.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsHidden,The length of the statement  "            return HiddenMovies.Any(m => (((m.Movie.Ids.Trakt == movie.Ids.Trakt) && m.Movie.Ids.Trakt != null) || ((m.Movie.Ids.Imdb == movie.Ids.Imdb) && movie.Ids.Imdb != null)) && m.Section == section); " is 194.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsWatched,The length of the statement  "            int watchedEpisodeCount = watchedEpisodes.Where(e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && show.Ids.Tvdb != null)) &&  " is 170.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsCollected,The length of the statement  "            int collectedEpisodeCount = collectedEpisodes.Where(e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && show.Ids.Tvdb != null)) && " is 174.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsWatchlisted,The length of the statement  "            return WatchListShows.Any(s => (((s.Show.Ids.Trakt == show.Ids.Trakt) && s.Show.Ids.Trakt != null) || ((s.Show.Ids.Tvdb == show.Ids.Tvdb) && show.Ids.Tvdb != null))); " is 166.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,UserRating,The length of the statement  "            var ratedShow = RatedShows.FirstOrDefault(s => (((s.Show.Ids.Trakt == show.Ids.Trakt) && s.Show.Ids.Trakt != null) || ((s.Show.Ids.Tvdb == show.Ids.Tvdb) && show.Ids.Tvdb != null))); " is 182.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,Plays,The length of the statement  "            return watchedEpisodes.Where(e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || (e.ShowTvdbId == show.Ids.Tvdb) && e.ShowTvdbId != null)).Sum(e => e.Plays); " is 165.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,Collected,The length of the statement  "            return collectedEpisodes.Where(e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || (e.ShowTvdbId == show.Ids.Tvdb) && e.ShowTvdbId != null)).Count(); " is 157.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsHidden,The length of the statement  "            return HiddenShows.Any(s => (((s.Show.Ids.Trakt == show.Ids.Trakt) && s.Show.Ids.Trakt != null) || ((s.Show.Ids.Tvdb == show.Ids.Tvdb) && show.Ids.Tvdb != null)) && s.Section == section); " is 187.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsWatchlisted,The length of the statement  "            return WatchListSeasons.Any(s => ((((s.Show.Ids.Trakt == show.Ids.Trakt) && s.Show.Ids.Trakt != null) || ((s.Show.Ids.Tvdb == show.Ids.Tvdb) && show.Ids.Tvdb != null))) && " is 171.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsWatched,The length of the statement  "            int watchedEpisodeCount = watchedEpisodes.Where(e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && show.Ids.Tvdb != null)) && " is 170.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsCollected,The length of the statement  "            int collectedEpisodeCount = collectedEpisodes.Where(e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && show.Ids.Tvdb != null)) && " is 174.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,UserRating,The length of the statement  "            var ratedSeason = RatedSeasons.FirstOrDefault(s => ((((s.Show.Ids.Trakt == show.Ids.Trakt) && s.Show.Ids.Trakt != null) || ((s.Show.Ids.Tvdb == show.Ids.Tvdb) && show.Ids.Tvdb != null))) &&  " is 189.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsWatched,The length of the statement  "            return WatchedEpisodes.Any(e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && show.Ids.Tvdb != null)) && " is 149.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsCollected,The length of the statement  "            return CollectedEpisodes.Any(e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && show.Ids.Tvdb != null)) && " is 151.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsWatchlisted,The length of the statement  "            return WatchListEpisodes.Any(e => (((e.Show.Ids.Trakt == show.Ids.Trakt) && e.Show.Ids.Trakt != null) || ((e.Show.Ids.Tvdb == show.Ids.Tvdb) && show.Ids.Tvdb != null)) && " is 170.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,UserRating,The length of the statement  "            // either match by episode id or if not available in cache (which could occur when added by sync caching) by show id and episode/season numbers " is 143.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,UserRating,The length of the statement  "            var ratedEpisode = RatedEpisodes.FirstOrDefault(re => ((re.Episode.Ids.Trakt == episode.Ids.Trakt) && re.Episode.Ids.Trakt != null) || " is 134.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,Plays,The length of the statement  "            var watchedEpisodes = WatchedEpisodes.Where(e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && show.Ids.Tvdb != null)) && " is 166.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,AddMovieToWatchHistory,The length of the statement  "            var existingWatchedMovie = watchedMovies.FirstOrDefault(m => ((m.Movie.Ids.Trakt == movie.Ids.Trakt) && movie.Ids.Trakt != null) || " is 131.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,AddMovieToPausedData,The length of the statement  "            var existingPausedMovie = pausedMovies.FirstOrDefault(m => ((m.Movie.Ids.Trakt == movie.Ids.Trakt) && movie.Ids.Trakt != null) || " is 129.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,AddEpisodeToWatchHistory,The length of the statement  "            var existingWatchedEpisode = watchedEpisodes.FirstOrDefault(e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && e.ShowTvdbId != null)) && " is 181.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,AddEpisodeToPausedData,The length of the statement  "            var existingPausedEpisode = pausedEpisodes.FirstOrDefault(e => (((e.Show.Ids.Trakt == show.Ids.Trakt) && e.Show.Ids.Trakt != null) || ((e.Show.Ids.Tvdb == show.Ids.Tvdb) && e.Show.Ids.Tvdb != null)) && " is 201.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveMovieFromWatchlist,The length of the statement  "                watchlistMovies.RemoveAll(m => m.Movie.Title.ToLowerInvariant() == movie.Title.ToLower() && m.Movie.Year == movie.Year); " is 120.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveMovieFromCollection,The length of the statement  "                collectedMovies.RemoveAll(m => m.Movie.Title.ToLowerInvariant() == movie.Title.ToLower() && m.Movie.Year == movie.Year); " is 120.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveMovieFromHiddenItems,The length of the statement  "                hiddenMovies.RemoveAll(m => (m.Movie.Title.ToLowerInvariant() == movie.Title.ToLower() && m.Movie.Year == movie.Year) && m.Section == section); " is 143.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveShowFromHiddenItems,The length of the statement  "                hiddenShows.RemoveAll(s => (s.Show.Title.ToLowerInvariant() == show.Title.ToLower() && s.Show.Year == show.Year) && s.Section == section); " is 138.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveEpisodeFromWatchHistory,The length of the statement  "            watchedEpisodes.RemoveAll(e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && e.ShowTvdbId != null)) && " is 147.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveEpisodeFromWatchHistory,The length of the statement  "                watchedEpisodes.RemoveAll(e => e.ShowTitle.ToLowerInvariant() == show.Title.ToLowerInvariant() && e.ShowYear == show.Year && " is 124.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveEpisodeFromWatchlist,The length of the statement  "            watchlistEpisodes.RemoveAll(e => (((e.Show.Ids.Trakt == show.Ids.Trakt) && e.Show.Ids.Trakt != null) || ((e.Show.Ids.Tvdb == show.Ids.Tvdb) && e.Show.Ids.Tvdb != null)) && " is 171.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveEpisodeFromWatchlist,The length of the statement  "                watchlistEpisodes.RemoveAll(e => e.Show.Title.ToLowerInvariant() == show.Title.ToLowerInvariant() && e.Show.Year == show.Year && " is 128.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveEpisodeFromCollection,The length of the statement  "            collectedEpisodes.RemoveAll(e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && e.ShowTvdbId != null)) && " is 149.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveEpisodeFromCollection,The length of the statement  "                collectedEpisodes.RemoveAll(e => e.ShowTitle.ToLowerInvariant() == show.Title.ToLowerInvariant() && e.ShowYear == show.Year && " is 126.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveEpisodeFromPausedData,The length of the statement  "            pausedEpisodes.RemoveAll(e => (((e.Show.Ids.Trakt == show.Ids.Trakt) && e.Show.Ids.Trakt != null) || ((e.Show.Ids.Tvdb == show.Ids.Tvdb) && e.Show.Ids.Tvdb != null)) && " is 168.
Long Statement,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveEpisodeFromPausedData,The length of the statement  "                pausedEpisodes.RemoveAll(e => e.Show.Title.ToLowerInvariant() == show.Title.ToLowerInvariant() && e.Show.Year == show.Year && " is 125.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetTrendingSettings,The length of the statement  "            // the whole point of having a collection is to define unique dashboard settings per window otherwise all windows share the same settings " is 137.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetTrendingSettings,The length of the statement  "            var trendingSettings = TraktSkinSettings.DashboardTrendingCollection.FirstOrDefault(d => d.MovieWindows.Contains(windowID) || d.TVShowWindows.Contains(windowID)); " is 162.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetFacade,The length of the statement  "                    TraktLogger.Debug("Unable to find facade control [id:{0}]' check that trakt skin settings are correctly defined!"' facadeID.ToString()); " is 136.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ClearSelectedActivityProperties,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Activity.Description"' GetActivityDescription((ActivityView)TraktSettings.ActivityStreamView)); " is 124.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadActivity,The length of the statement  "                    if (facade.Count == 0 && PreviousActivity != null && PreviousActivity.Activities != null && PreviousActivity.Activities.Count > 0) " is 130.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishActivityProperties,The length of the statement  "            int maxItems = activities.Count() < TraktSkinSettings.DashboardActivityFacadeMaxItems ? activities.Count() : TraktSkinSettings.DashboardActivityFacadeMaxItems; " is 159.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishActivityProperties,The length of the statement  "                GUIUtils.SetProperty(string.Format("#Trakt.Activity.{0}.ActivityPinIconNoExt"' i)' GetActivityImage(activities[i]).Replace(".png"' string.Empty)); " is 146.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishActivityProperties,The length of the statement  "                GUIUtils.SetProperty(string.Format("#Trakt.Activity.{0}.Time"' i)' activities[i].Timestamp.FromISO8601().ToLocalTime().ToShortTimeString()); " is 140.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishActivityProperties,The length of the statement  "                GUIUtils.SetProperty(string.Format("#Trakt.Activity.{0}.Day"' i)' activities[i].Timestamp.FromISO8601().ToLocalTime().DayOfWeek.ToString().Substring(0' 3)); " is 156.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadActivityFacade,The length of the statement  "            if (TraktSkinSettings.DashBoardActivityWindows == null || !TraktSkinSettings.DashBoardActivityWindows.Contains(GUIWindowManager.ActiveWindow.ToString())) " is 153.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadActivityFacade,The length of the statement  "                facade.CurrentLayout = (GUIFacadeControl.Layout)Enum.Parse(typeof(GUIFacadeControl.Layout)' TraktSkinSettings.DashboardActivityFacadeType); " is 139.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadActivityFacade,The length of the statement  "            facade.CurrentLayout = (GUIFacadeControl.Layout)Enum.Parse(typeof(GUIFacadeControl.Layout)' TraktSkinSettings.DashboardActivityFacadeType); " is 139.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadActivityFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Activity.Items"' string.Format("{0} {1}"' activities.Activities.Count().ToString()' activities.Activities.Count() > 1 ? Translation.Activities : Translation.Activity)); " is 197.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadActivityFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Activity.Description"' GetActivityDescription((ActivityView)TraktSettings.ActivityStreamView)); " is 124.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "                GUICommon.SetProperty(string.Format("#Trakt.Movie.{0}.Watchers.Extra"' i)' trendingItem.Watchers > 1 ? string.Format(Translation.PeopleWatching' trendingItem.Watchers) : Translation.PersonWatching); " is 198.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "                GUICommon.SetProperty(string.Format("#Trakt.Movie.{0}.Language"' i)' Translation.GetLanguageFromISOCode(trendingItem.Movie.Language)); " is 134.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "                GUICommon.SetProperty(string.Format("#Trakt.Movie.{0}.Overview"' i)' string.IsNullOrEmpty(trendingItem.Movie.Overview) ? Translation.NoMovieSummary : trendingItem.Movie.Overview); " is 179.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "                GUICommon.SetProperty(string.Format("#Trakt.Movie.{0}.Released"' i)' trendingItem.Movie.Released.FromISO8601().ToShortDateString()); " is 132.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "                GUICommon.SetProperty(string.Format("#Trakt.Movie.{0}.Url"' i)' string.Format("http://trakt.tv/movies/{0}"' trendingItem.Movie.Ids.Slug)); " is 138.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "                GUICommon.SetProperty(string.Format("#Trakt.Movie.{0}.Genres"' i)' string.Join("' "' TraktGenres.Translate(trendingItem.Movie.Genres))); " is 136.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "                GUICommon.SetProperty(string.Format("#Trakt.Movie.{0}.Ratings.Icon"' i)' (trendingItem.Movie.Rating >= 6) ? "love" : "hate"); " is 125.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "                GUICommon.SetProperty(string.Format("#Trakt.Movie.{0}.Ratings.Percentage"' i)' trendingItem.Movie.Rating.ToPercentage()); " is 121.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "                    GUICommon.SetProperty(string.Format("#Trakt.Movie.{0}.PosterImageFilename"' i)' TmdbCache.GetMoviePosterFilename(images)); " is 122.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "                    GUICommon.SetProperty(string.Format("#Trakt.Movie.{0}.FanartImageFilename"' i)' TmdbCache.GetMovieBackdropFilename(images)); " is 124.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingMoviesFacade,The length of the statement  "            if (TraktSkinSettings.DashboardTrendingCollection == null || !TraktSkinSettings.DashboardTrendingCollection.Exists(d => d.MovieWindows.Contains(GUIWindowManager.ActiveWindow.ToString()))) " is 187.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingMoviesFacade,The length of the statement  "            facade.CurrentLayout = (GUIFacadeControl.Layout)Enum.Parse(typeof(GUIFacadeControl.Layout)' trendingSettings.FacadeType); " is 121.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingMoviesFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Trending.Movies.Items"' string.Format("{0} {1}"' trendingItems.Count().ToString()' trendingItems.Count() > 1 ? Translation.Movies : Translation.Movie)); " is 181.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingMoviesFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Trending.Movies.Description"' string.Format(Translation.TrendingTVShowsPeople' trendingItems.Sum(t => t.Watchers).ToString()' trendingItems.Count().ToString())); " is 190.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The length of the statement  "                GUICommon.SetProperty(string.Format("#Trakt.Show.{0}.Watchers.Extra"' i)' trendingItem.Watchers > 1 ? string.Format(Translation.PeopleWatching' trendingItem.Watchers) : Translation.PersonWatching); " is 197.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The length of the statement  "                GUICommon.SetProperty(string.Format("#Trakt.Show.{0}.Url"' i)' string.Format("http://trakt.tv/shows/{0}"' trendingItem.Show.Ids.Slug)); " is 135.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The length of the statement  "                GUICommon.SetProperty(string.Format("#Trakt.Show.{0}.FirstAired"' i)' trendingItem.Show.FirstAired.FromISO8601().ToShortDateString()); " is 134.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The length of the statement  "                GUICommon.SetProperty(string.Format("#Trakt.Show.{0}.Overview"' i)' string.IsNullOrEmpty(trendingItem.Show.Overview) ? Translation.NoShowSummary : trendingItem.Show.Overview); " is 175.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The length of the statement  "                GUICommon.SetProperty(string.Format("#Trakt.Show.{0}.Genres"' i)' string.Join("' "' TraktGenres.Translate(trendingItem.Show.Genres))); " is 134.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The length of the statement  "                GUICommon.SetProperty(string.Format("#Trakt.Show.{0}.Ratings.Icon"' i)' (trendingItem.Show.Rating >= 6) ? "love" : "hate"); " is 123.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The length of the statement  "                    GUICommon.SetProperty(string.Format("#Trakt.Show.{0}.PosterImageFilename"' i)' TmdbCache.GetShowPosterFilename(images)); " is 120.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The length of the statement  "                    GUICommon.SetProperty(string.Format("#Trakt.Show.{0}.FanartImageFilename"' i)' TmdbCache.GetShowBackdropFilename(images)); " is 122.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingShowsFacade,The length of the statement  "            if (TraktSkinSettings.DashboardTrendingCollection == null || !TraktSkinSettings.DashboardTrendingCollection.Exists(d => d.TVShowWindows.Contains(GUIWindowManager.ActiveWindow.ToString()))) " is 188.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingShowsFacade,The length of the statement  "            facade.CurrentLayout = (GUIFacadeControl.Layout)Enum.Parse(typeof(GUIFacadeControl.Layout)' trendingSettings.FacadeType); " is 121.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingShowsFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Trending.Shows.Items"' string.Format("{0} {1}"' trendingItems.Count().ToString()' trendingItems.Count() > 1 ? Translation.SeriesPlural : Translation.Series)); " is 187.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingShowsFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Trending.Shows.Description"' string.Format(Translation.TrendingTVShowsPeople' trendingItems.Sum(t => t.Watchers).ToString()' trendingItems.Count().ToString())); " is 189.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetTrendingMovies,The length of the statement  "                var trendingResult = TraktAPI.TraktAPI.GetTrendingMovies(1' TraktSettings.FilterTrendingOnDashboard ? 100 : TraktSkinSettings.MaxTrendingItems); " is 144.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetTrendingShows,The length of the statement  "                var trendingItems = TraktAPI.TraktAPI.GetTrendingShows(1' TraktSettings.FilterTrendingOnDashboard ? 100 : TraktSkinSettings.MaxTrendingItems); " is 142.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The length of the statement  "            if (TraktSettings.DashboardActivityFilter.Types.Shows && TraktSettings.DashboardActivityFilter.Actions.HiddenCalendarItems) " is 123.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The length of the statement  "                    foreach (var item in hiddenShows.Where(h => h.Section == "calendar").OrderByDescending(c => c.HiddenAt).Take(maxActivityItems)) " is 127.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The length of the statement  "            if (TraktSettings.DashboardActivityFilter.Types.Shows && TraktSettings.DashboardActivityFilter.Actions.HiddedCollectedProgress) " is 127.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The length of the statement  "                    foreach (var item in hiddenShows.Where(h => h.Section == "progress_collected").OrderByDescending(c => c.HiddenAt).Take(maxActivityItems)) " is 137.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The length of the statement  "            if (TraktSettings.DashboardActivityFilter.Types.Shows && TraktSettings.DashboardActivityFilter.Actions.HiddenWatchedProgress) " is 125.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The length of the statement  "                    foreach (var item in hiddenShows.Where(h => h.Section == "progress_watched").OrderByDescending(c => c.HiddenAt).Take(maxActivityItems)) " is 135.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The length of the statement  "            if (TraktSettings.DashboardActivityFilter.Types.Shows && TraktSettings.DashboardActivityFilter.Actions.HiddenRecommendations) " is 125.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The length of the statement  "                    foreach (var item in hiddenShows.Where(h => h.Section == "recommendations").OrderByDescending(c => c.HiddenAt).Take(maxActivityItems)) " is 134.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The length of the statement  "            if (TraktSettings.DashboardActivityFilter.Types.Seasons && TraktSettings.DashboardActivityFilter.Actions.HiddedCollectedProgress) " is 129.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The length of the statement  "                    foreach (var item in hiddenSeasons.Where(h => h.Section == "progress_collected").OrderByDescending(c => c.HiddenAt).Take(maxActivityItems)) " is 139.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The length of the statement  "            if (TraktSettings.DashboardActivityFilter.Types.Seasons && TraktSettings.DashboardActivityFilter.Actions.HiddenWatchedProgress) " is 127.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The length of the statement  "                    foreach (var item in hiddenSeasons.Where(h => h.Section == "progress_watched").OrderByDescending(c => c.HiddenAt).Take(maxActivityItems)) " is 137.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The length of the statement  "            if (TraktSettings.DashboardActivityFilter.Types.Movies && TraktSettings.DashboardActivityFilter.Actions.HiddenCalendarItems) " is 124.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The length of the statement  "                    foreach (var item in hiddenMovies.Where(h => h.Section == "calendar").OrderByDescending(h => h.HiddenAt).Take(maxActivityItems)) " is 128.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The length of the statement  "            if (TraktSettings.DashboardActivityFilter.Types.Movies && TraktSettings.DashboardActivityFilter.Actions.HiddenRecommendations) " is 126.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The length of the statement  "                    foreach (var item in hiddenMovies.Where(h => h.Section == "recommendations").OrderByDescending(h => h.HiddenAt).Take(maxActivityItems)) " is 135.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The length of the statement  "            activity.Activities = activity.Activities.OrderByDescending(a => a.Timestamp).Take(TraktSkinSettings.DashboardActivityFacadeMaxItems).ToList(); " is 143.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,The length of the statement  "                        //incrementalActivity = TraktAPI.TraktAPI.GetCommunityActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch()); " is 121.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,The length of the statement  "                        //incrementalActivity = TraktAPI.TraktAPI.GetFollowersActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch()); " is 121.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,The length of the statement  "                        //incrementalActivity = TraktAPI.TraktAPI.GetFollowingActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch()); " is 121.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,The length of the statement  "                        //incrementalActivity = TraktAPI.TraktAPI.GetFriendActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch()' false); " is 125.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,The length of the statement  "                        //incrementalActivity = TraktAPI.TraktAPI.GetFriendActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch()' true); " is 124.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,The length of the statement  "                    PreviousActivity.Activities = incrementalActivity.Activities.Union(PreviousActivity.Activities).Take(TraktSkinSettings.DashboardActivityFacadeMaxItems).ToList(); " is 161.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,IsDashBoardWindow,The length of the statement  "            if (TraktSkinSettings.DashBoardActivityWindows != null && TraktSkinSettings.DashBoardActivityWindows.Contains(GUIWindowManager.ActiveWindow.ToString())) " is 152.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,IsDashBoardWindow,The length of the statement  "            if (TraktSkinSettings.DashboardTrendingCollection != null && TraktSkinSettings.DashboardTrendingCollection.Exists(d => d.MovieWindows.Contains(GUIWindowManager.ActiveWindow.ToString()))) " is 186.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,IsDashBoardWindow,The length of the statement  "            if (TraktSkinSettings.DashboardTrendingCollection != null && TraktSkinSettings.DashboardTrendingCollection.Exists(d=> d.TVShowWindows.Contains(GUIWindowManager.ActiveWindow.ToString()))) " is 186.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityFilterActionsMenu,The length of the statement  "                        TraktSettings.DashboardActivityFilter.Actions.HiddenCalendarItems = !TraktSettings.DashboardActivityFilter.Actions.HiddenCalendarItems; " is 135.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityFilterActionsMenu,The length of the statement  "                        TraktSettings.DashboardActivityFilter.Actions.HiddenRecommendations = !TraktSettings.DashboardActivityFilter.Actions.HiddenRecommendations; " is 139.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityFilterActionsMenu,The length of the statement  "                        TraktSettings.DashboardActivityFilter.Actions.HiddedCollectedProgress = !TraktSettings.DashboardActivityFilter.Actions.HiddedCollectedProgress; " is 143.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityFilterActionsMenu,The length of the statement  "                        TraktSettings.DashboardActivityFilter.Actions.HiddenWatchedProgress = !TraktSettings.DashboardActivityFilter.Actions.HiddenWatchedProgress; " is 139.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityViewMenu,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Activity.Description"' GetActivityDescription((ActivityView)TraktSettings.ActivityStreamView)); " is 124.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityContextMenu,The length of the statement  "                     (ActivityView)TraktSettings.ActivityStreamView == ActivityView.followers) && !((activityFacade.SelectedListItem as GUIUserListItem).IsFollowed)) " is 144.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityContextMenu,The length of the statement  "                    if (GUIUtils.ShowYesNoDialog(Translation.Network' string.Format(Translation.SendFollowRequest' activity.User.Username)' true)) " is 126.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,OnTrendingShowSelected,The length of the statement  "            GUICommon.SetProperty("#Trakt.Show.Watchers.Extra"' trendingItem.Watchers > 1 ? string.Format(Translation.PeopleWatching' trendingItem.Watchers) : Translation.PersonWatching); " is 175.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,OnTrendingMovieSelected,The length of the statement  "            GUICommon.SetProperty("#Trakt.Movie.Watchers.Extra"' trendingItem.Watchers > 1 ? string.Format(Translation.PeopleWatching' trendingItem.Watchers) : Translation.PersonWatching); " is 176.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GUIWindowManager_Receivers,The length of the statement  "                                        TraktLogger.Warning("No user associated with liked list. ID = '{0}'' Name = '{1}'' Privacy = '{2}'"' activity.List.Ids.Trakt' activity.List.Name' activity.List.Privacy);  " is 169.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GUIWindowManager_OnNewAction,The length of the statement  "                        if (!TrendingContextMenuIsActive && activeWindow.GetFocusControlId() == (int)TraktDashboardControls.TrendingShowsFacade) " is 120.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GUIWindowManager_OnNewAction,The length of the statement  "                        else if (!TrendingContextMenuIsActive && activeWindow.GetFocusControlId() == (int)TraktDashboardControls.TrendingMoviesFacade) " is 126.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,Init,The length of the statement  "            if (TraktSkinSettings.DashboardTrendingCollection != null && TraktSkinSettings.DashboardTrendingCollection.Exists(d => d.MovieWindows.Count > 0)) " is 145.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,Init,The length of the statement  "                TrendingMoviesTimer = new Timer(new TimerCallback((o) => { LoadTrendingMovies(); })' null' Timeout.Infinite' Timeout.Infinite); " is 127.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,Init,The length of the statement  "            if (TraktSkinSettings.DashboardTrendingCollection != null && TraktSkinSettings.DashboardTrendingCollection.Exists(d => d.TVShowWindows.Count > 0)) " is 146.
Long Statement,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,Init,The length of the statement  "                TrendingShowsTimer = new Timer(new TimerCallback((o) => { LoadTrendingShows(); })' null' Timeout.Infinite' Timeout.Infinite); " is 125.
Long Statement,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveMovieFromWatchList,The length of the statement  "            RemoveMovieFromWatchList(movie.Title' movie.Year' movie.Ids.Imdb' movie.Ids.Tmdb' movie.Ids.Trakt' updateMovingPicturesFilters); " is 128.
Long Statement,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddEpisodeToWatchList,The length of the statement  "            AddEpisodeToWatchList(episode.Title' episode.Season' episode.Number' episode.Ids.Tvdb' episode.Ids.Imdb' episode.Ids.Tmdb' episode.Ids.Trakt); " is 142.
Long Statement,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveEpisodeFromWatchList,The length of the statement  "            RemoveEpisodeFromWatchList(episode.Title' episode.Season' episode.Number' episode.Ids.Tvdb' episode.Ids.Imdb' episode.Ids.Tmdb' episode.Ids.Trakt); " is 147.
Long Statement,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddRemoveMovieInUserList,The length of the statement  "            AddRemoveMovieInUserList(TraktSettings.Username' movie.Title' movie.Year' movie.Ids.Imdb' movie.Ids.Tmdb' movie.Ids.Trakt' remove); " is 131.
Long Statement,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddRemoveShowInUserList,The length of the statement  "            AddRemoveShowInUserList(TraktSettings.Username' show.Title' show.Year' show.Ids.Tvdb' show.Ids.Imdb' show.Ids.Tmdb' show.Ids.Trakt' remove); " is 140.
Long Statement,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddRemoveShowInUserList,The length of the statement  "            AddRemoveShowInUserList(TraktSettings.Username' title' year.ToNullableInt32()' tvdbid.ToNullableInt32()' null' null' null' remove); " is 131.
Long Statement,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowMovieShouts,The length of the statement  "            ShowMovieShouts(movie.Title' movie.Year' movie.Ids.Imdb' movie.Ids.Trakt' movie.IsWatched()' TmdbCache.GetMovieBackdropFilename(images)' TmdbCache.GetMovieBackdropUrl(images)); " is 176.
Long Statement,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowTVShowShouts,The length of the statement  "            ShowTVShowShouts(show.Title' show.Year' show.Ids.Tvdb' show.Ids.Trakt' show.Ids.Imdb' show.IsWatched()' TmdbCache.GetShowBackdropFilename(images)' TmdbCache.GetShowBackdropUrl(images)); " is 185.
Long Statement,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowTVSeasonShouts,The length of the statement  "            ShowTVSeasonShouts(show.Title' show.Year' show.Ids.Tvdb' show.Ids.Trakt' show.Ids.Imdb' season.Number' season.IsWatched(show)' TmdbCache.GetShowBackdropFilename(showImages)' TmdbCache.GetShowBackdropUrl(showImages)); " is 216.
Long Statement,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowEpisodeShouts,The length of the statement  "            ShowEpisodeShouts(show.Title' show.Year' show.Ids.Tvdb' show.Ids.Trakt' show.Ids.Imdb' episode.Season' episode.Number' episode.IsWatched(show)' TmdbCache.GetShowBackdropFilename(showImages)' TmdbCache.GetShowBackdropUrl(showImages)); " is 233.
Long Statement,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowEpisodeShouts,The length of the statement  "            ShowEpisodeShouts(title' tvdbid.ToNullableInt32()' null' season.ToInt()' episode.ToInt()' isWatched' fanart' onlineFanart); " is 123.
Long Statement,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddEpisodeToWatchHistory,The length of the statement  "            AddEpisodeToWatchHistory(episode.Title' episode.Season' episode.Number' episode.Ids.Tvdb' episode.Ids.Imdb' episode.Ids.Tmdb' episode.Ids.Trakt); " is 145.
Long Statement,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveEpisodeFromWatchHistory,The length of the statement  "            RemoveEpisodeFromWatchHistory(episode.Title' episode.Season' episode.Number' episode.Ids.Tvdb' episode.Ids.Imdb' episode.Ids.Tmdb' episode.Ids.Trakt); " is 150.
Long Statement,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddEpisodeToCollection,The length of the statement  "            AddEpisodeToCollection(episode.Title' episode.Season' episode.Number' episode.Ids.Tvdb' episode.Ids.Imdb' episode.Ids.Tmdb' episode.Ids.Trakt); " is 143.
Long Statement,TraktPlugin,TraktHelper,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveEpisodeFromCollection,The length of the statement  "            RemoveEpisodeFromCollection(episode.Title' episode.Season' episode.Number' episode.Ids.Tvdb' episode.Ids.Imdb' episode.Ids.Tmdb' episode.Ids.Trakt); " is 148.
Long Statement,TraktPlugin,TraktLists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLists.cs,GetListsForUser,The length of the statement  "            if (!UserLists.Keys.Contains(username) || LastRequest < DateTime.UtcNow.Subtract(new TimeSpan(0' TraktSettings.WebRequestCacheMinutes' 0))) " is 139.
Long Statement,TraktPlugin,TraktLists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLists.cs,GetListItemsForUser,The length of the statement  "            if (!UserListItems.Keys.Contains(key) || LastRequest < DateTime.UtcNow.Subtract(new TimeSpan(0' TraktSettings.WebRequestCacheMinutes' 0))) " is 138.
Long Statement,TraktPlugin,TraktLists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLists.cs,GetListItemsForUser,The length of the statement  "                var listItems = TraktAPI.TraktAPI.GetUserListItems(username == TraktSettings.Username ? "me" : username' id.ToString()' "full"); " is 128.
Long Statement,TraktPlugin,TraktLists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLists.cs,ClearItemsInList,The length of the statement  "            if (GUIListItems.CurrentList != null && GUIListItems.CurrentList.Ids.Trakt == id && GUIListItems.CurrentUser == username) " is 121.
Long Statement,TraktPlugin,TraktLists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLists.cs,GetUserListSelections,The length of the statement  "            List<MultiSelectionItem> selectedItems = GUIUtils.ShowMultiSelectionDialog(Translation.SelectLists' GetMultiSelectItems(lists)); " is 128.
Long Statement,TraktPlugin,TraktLogger,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,CreatePrefix,The length of the statement  "            return DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff") + " [{0}] " + String.Format("[{0}][{1}]"' Thread.CurrentThread.Name' Thread.CurrentThread.ManagedThreadId.ToString().PadLeft(2''0')) +  ": {1}"; " is 200.
Long Statement,TraktPlugin,TraktLogger,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,CreateLatencyHeader,The length of the statement  "            string header = "TimeStamp (UTC)'Absolute Path'Query'Method'Status Code'Status Description'Data Sent (Bytes)'Data Received (Bytes)'Server Execution Time (ms)'Total Time Taken (ms)"; " is 181.
Long Statement,TraktPlugin,TraktLogger,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,TraktAPI_OnLatency,The length of the statement  "            WriteLatency(string.Format("{0}'{1}'{2}'{3}'{4}'{5}'{6}'{7}'{8}'{9}"' DateTime.UtcNow.ToISO8601()' webResponse.ResponseUri.AbsolutePath' query' webResponse.Method' (int)webResponse.StatusCode' webResponse.StatusDescription' dataSent' dataReceived' serverRuntime' totalTimeTaken)); " is 280.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,Init,The length of the statement  "            TraktLogger.Info("Starting Trakt plugin. Version = '{0}'' Date = '{1}'"' TraktSettings.Version' TraktSettings.BuildDate); " is 121.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,Init,The length of the statement  "            GUIWindowManager.OnDeActivateWindow += new GUIWindowManager.WindowActivationHandler(GUIWindowManager_OnDeActivateWindow); " is 121.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,Init,The length of the statement  "            Microsoft.Win32.SystemEvents.PowerModeChanged += new Microsoft.Win32.PowerModeChangedEventHandler(SystemEvents_PowerModeChanged); " is 129.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,Init,The length of the statement  "            syncLibraryTimer = new Timer(new TimerCallback((o) => { SyncLibrary(); })' null' TraktSettings.SyncStartDelay' TraktSettings.SyncTimerLength * 3600000); " is 152.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,syncLibraryWorker_RunWorkerCompleted,The length of the statement  "            TraktLogger.Info("Finished 2-way sync of all enabled plugins' Time Taken = '{0}'"' DateTime.UtcNow.Subtract(SyncStartTime).ToPrettyTime()); " is 139.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The length of the statement  "                            GUIUtils.ShowNotifyDialog(Translation.FollowerRequests' string.Format(Translation.FollowerRequestMessage' followerRequests.Count().ToString())); " is 144.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The length of the statement  "            if (TraktSkinSettings.DashBoardActivityWindows != null && TraktSkinSettings.DashBoardActivityWindows.Contains(windowID.ToString())) " is 131.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The length of the statement  "            if (TraktSkinSettings.DashboardTrendingCollection != null && TraktSkinSettings.DashboardTrendingCollection.Exists(d => d.MovieWindows.Contains(windowID.ToString()))) " is 165.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The length of the statement  "            if (TraktSkinSettings.DashboardTrendingCollection != null && TraktSkinSettings.DashboardTrendingCollection.Exists(d => d.TVShowWindows.Contains(windowID.ToString()))) " is 166.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "                                        if ((!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)) || imdbid.StartsWith("tt") || !string.IsNullOrEmpty(tmdbid)) " is 126.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "                                            var personAndRoleStrings = personAndRole.Split(new string[] { string.Format(" {0} "' roleSepString) }' StringSplitOptions.None); " is 128.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "                                    if (people != string.Empty && people != "unknown") searchPeople.Directors.AddRange(people.Split(''').Select(s => s.Trim())); " is 124.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "                                                validItem = TVSeries.GetEpisodeInfo(obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched); " is 132.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "                    if (GUIUtils.ShowYesNoDialog(Translation.WatchList' string.Format("{0}\n{1} ({2})"' Translation.AddThisItemToWatchList' title' year)' true)) " is 140.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "                        TraktHelper.AddMovieToWatchList(title' year.ToNullableInt32()' imdbid.ToNullIfEmpty()' tmdbid.ToNullableInt32()' updatePluginFilters); " is 134.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "                        TraktHelper.AddShowToWatchList(title' year.ToNullableInt32()' showtvdbid.ToNullableInt32()' imdbid.ToNullIfEmpty()' tmdbid.ToNullableInt32()' null); " is 148.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "                        TraktLogger.Info("Adding episode to Watchlist. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'' Episode TVDb ID = '{4}'"' title' year' season' episode' epTvdbId); " is 175.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "                    TraktLogger.Info("Adding episode to Custom List. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'' Episode TVDb ID = '{4}'"' title' year' season' episode' epTvdbId); " is 177.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "                        TraktLogger.Info("Showing rate dialog for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year' showtvdbid); " is 123.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "                        TraktLogger.Info("Showing rate dialog for tv episode. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'' Episode TVDb ID = '{4}'"' title' year' season' episode' epTvdbId); " is 182.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "                        TraktLogger.Info("Displaying Related Movies for {0}. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year' imdbid); " is 121.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "                        TraktLogger.Info("Displaying Related Shows for {0}. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year' showtvdbid); " is 124.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,SystemEvents_PowerModeChanged,The length of the statement  "                int startDelay = nextSyncDate <= DateTime.Now ? TraktSettings.SyncStartDelay : (int)(nextSyncDate.Subtract(DateTime.Now).TotalMilliseconds); " is 140.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,SystemEvents_PowerModeChanged,The length of the statement  "                TraktLogger.Info("Last library sync started at {0}' next sync will start at {1}"' SyncStartTime' DateTime.Now.Add(new TimeSpan(0' 0' 0' 0' startDelay))); " is 153.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,StartScrobble,The length of the statement  "                if (!TraktSettings.BlockedFilenames.Contains(filename) && !TraktSettings.BlockedFolders.Any(f => filename.ToLowerInvariant().Contains(f.ToLowerInvariant()))) " is 157.
Long Statement,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,StartScrobble,The length of the statement  "                                TraktLogger.Debug("File was recognised by an enabled plugin handler and is now scrobbling. Plugin = '{0}'"' traktHandler.Name); " is 127.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "                DashboardTrendingPollInterval = GetValueAsIntAndValidate(cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000); " is 123.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "                SortByRecommendedMovies = xmlreader.GetValueAsString(cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy>(); " is 141.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "                SortByRecommendedShows = xmlreader.GetValueAsString(cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy>(); " is 139.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "                SortByTrendingMovies = xmlreader.GetValueAsString(cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy>(); " is 135.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "                SortByTrendingShows = xmlreader.GetValueAsString(cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy>(); " is 133.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "                SortByPopularMovies = xmlreader.GetValueAsString(cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy>(); " is 133.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "                SortByPopularShows = xmlreader.GetValueAsString(cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy>(); " is 131.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "                SortByWatchListMovies = xmlreader.GetValueAsString(cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy>(); " is 137.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "                SortByWatchListShows = xmlreader.GetValueAsString(cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy>(); " is 135.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "                LastSyncActivities = xmlreader.GetValueAsString(cTrakt' cLastSyncActivities' new TraktLastSyncActivities().ToJSON()).FromJSON<TraktLastSyncActivities>(); " is 153.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "                LastListActivities = xmlreader.GetValueAsString(cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity>(); " is 124.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "                DashboardActivityFilter = xmlreader.GetValueAsString(cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter>(); " is 120.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "                SortByCreditMovies = xmlreader.GetValueAsString(cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy>(); " is 131.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "                SortByCreditShows = xmlreader.GetValueAsString(cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy>(); " is 129.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "                SortByAnticipatedMovies = xmlreader.GetValueAsString(cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy>(); " is 141.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "                SortByAnticipatedShows = xmlreader.GetValueAsString(cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy>(); " is 139.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "                ParentalIgnoreAfterTime = xmlreader.GetValueAsString(cTrakt' cParentalIgnoreAfterTime' new DateTime().ToShortTimeString()); " is 123.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "                OnlineSettings = xmlreader.GetValueAsString(cTrakt' cTraktOnlineSettings' "{}").FromJSON<TraktAPI.DataStructures.TraktSettings>(); " is 130.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,SaveSettings,The length of the statement  "                TraktCache.SaveFileCache(cLastTrendingShowFileCache' (LastTrendingShows ?? "[]".FromJSONArray<TraktShowTrending>()).ToList().ToJSON()); " is 135.
Long Statement,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,SaveSettings,The length of the statement  "                TraktCache.SaveFileCache(cLastTrendingMovieFileCache' (LastTrendingMovies ?? "[]".FromJSONArray<TraktMovieTrending>()).ToList().ToJSON()); " is 138.
Long Statement,TraktPlugin,ExtensionSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,AddHooksIntoMPEISettings,The length of the statement  "            MPEIPlugin.GUISettings extensionSettings = (MPEIPlugin.GUISettings)GUIWindowManager.GetWindow((int)GUI.ExternalPluginWindows.MPEISettings); " is 139.
Long Statement,TraktPlugin,ExtensionSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,Extensions_OnSettingsChanged,The length of the statement  "                int startDelay = nextSyncDate <= DateTime.Now ? TraktSettings.SyncStartDelay : (int)(nextSyncDate.Subtract(DateTime.Now).TotalMilliseconds); " is 140.
Long Statement,TraktPlugin.GUI,AsyncImageResource,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cornerstone.MP\AsyncImageResource.cs,LoadImageFastFromFile,The length of the statement  "                    image = (Image)typeof(Bitmap).InvokeMember("FromGDIplus"' BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.InvokeMethod' null' null' new object[] { imagePtr }); " is 171.
Long Statement,TraktPlugin.GUI,GUIAnticipatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,GetAnticipatedMovies,The length of the statement  "            if (AnticipatedMoviePages == null || LastRequest < DateTime.UtcNow.Subtract(new TimeSpan(0' TraktSettings.WebRequestCacheMinutes' 0))) " is 134.
Long Statement,TraktPlugin.GUI,GUIAnticipatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,SendAnticipatedMoviesToFacade,The length of the statement  "            var filteredAnticipatedList = FilterAnticipatedMovies(anticipatedItems.Movies).Where(m => !string.IsNullOrEmpty(m.Movie.Title)).ToList(); " is 137.
Long Statement,TraktPlugin.GUI,GUIAnticipatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,SendAnticipatedMoviesToFacade,The length of the statement  "            filteredAnticipatedList.Sort(new GUIListItemMovieSorter(TraktSettings.SortByAnticipatedMovies.Field' TraktSettings.SortByAnticipatedMovies.Direction)); " is 151.
Long Statement,TraktPlugin.GUI,GUIAnticipatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,SendAnticipatedMoviesToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' filteredAnticipatedList.Count()' filteredAnticipatedList.Count() > 1 ? Translation.Movies : Translation.Movie)); " is 174.
Long Statement,TraktPlugin.GUI,GUIAnticipatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,PublishMovieSkinProperties,The length of the statement  "            GUICommon.SetProperty("#Trakt.Movie.ListCount.Extra"' string.Format(Translation.AppearsInList' anticipatedItem.ListCount)); " is 123.
Long Statement,TraktPlugin.GUI,GUIAnticipatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,OnMovieSelected,The length of the statement  "            GUIImageHandler.LoadFanart(backdrop' TmdbCache.GetMovieBackdropFilename((item as GUIMovieListItem).Images.MovieImages)); " is 120.
Long Statement,TraktPlugin.GUI,GUIBoxOffice,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBoxOffice.cs,SendBoxOfficeToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' boxOffice.Count().ToString()' boxOffice.Count() > 1 ? Translation.Movies : Translation.Movie)); " is 157.
Long Statement,TraktPlugin.GUI,GUIBoxOffice,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBoxOffice.cs,OnMovieSelected,The length of the statement  "            GUIImageHandler.LoadFanart(backdrop' TmdbCache.GetMovieBackdropFilename((item as GUIMovieListItem).Images.MovieImages)); " is 120.
Long Statement,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,GetCalendarMoviesFromCache,The length of the statement  "            if (MovieCalendar == null || LastRequest < DateTime.UtcNow.Subtract(new TimeSpan(0' TraktSettings.WebRequestCacheMinutes' 0))) " is 126.
Long Statement,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,SendCalendarToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' itemCount.ToString()' itemCount > 1 ? Translation.Movies : Translation.Movie)); " is 141.
Long Statement,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,OnMovieSelected,The length of the statement  "            GUIImageHandler.LoadFanart(backdrop' TmdbCache.GetMovieBackdropFilename((item as GUIMovieListItem).Images.MovieImages)); " is 120.
Long Statement,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,SetMaxDays,The length of the statement  "                GUIControl.SetControlLabel(GetID' maxDaysButton.GetID' Translation.MaxDays + ": " + TraktSettings.MovieCalendarMaxDays); " is 120.
Long Statement,TraktPlugin.GUI,GUICreditsMovie,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsMovie.cs,SendCreditResultsToFacade,The length of the statement  "                    var item = new GUIPersonListItem(string.IsNullOrEmpty(person.Characters[0]) ? person.Person.Name : string.Format(Translation.ActorAndRole' person.Person.Name' person.Characters[0])' (int)TraktGUIWindows.CreditsMovie); " is 217.
Long Statement,TraktPlugin.GUI,GUICreditsMovie,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsMovie.cs,SendCreditResultsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' Facade.Count.ToString()' Facade.Count > 1 ? Translation.People : Translation.Person)); " is 148.
Long Statement,TraktPlugin.GUI,GUICreditsShow,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsShow.cs,SendCreditResultsToFacade,The length of the statement  "                    var item = new GUIPersonListItem(string.IsNullOrEmpty(person.Characters[0]) ? person.Person.Name : string.Format(Translation.ActorAndRole' person.Person.Name' person.Characters[0])' (int)TraktGUIWindows.CreditsShow); " is 216.
Long Statement,TraktPlugin.GUI,GUICreditsShow,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsShow.cs,SendCreditResultsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' Facade.Count.ToString()' Facade.Count > 1 ? Translation.People : Translation.Person)); " is 148.
Long Statement,TraktPlugin.GUI,GUIAnticipatedShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,GetAnticipatedShows,The length of the statement  "            if (AnticipatedShowPages == null || LastRequest < DateTime.UtcNow.Subtract(new TimeSpan(0' TraktSettings.WebRequestCacheMinutes' 0))) " is 133.
Long Statement,TraktPlugin.GUI,GUIAnticipatedShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,SendAnticipatedShowsToFacade,The length of the statement  "            var filteredAnticipatedList = FilterAnticipatedShows(anticipatedItems.Shows).Where(s => !string.IsNullOrEmpty(s.Show.Title)).ToList(); " is 134.
Long Statement,TraktPlugin.GUI,GUIAnticipatedShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,SendAnticipatedShowsToFacade,The length of the statement  "            filteredAnticipatedList.Sort(new GUIListItemShowSorter(TraktSettings.SortByAnticipatedShows.Field' TraktSettings.SortByAnticipatedShows.Direction)); " is 148.
Long Statement,TraktPlugin.GUI,GUIAnticipatedShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,SendAnticipatedShowsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' filteredAnticipatedList.Count()' filteredAnticipatedList.Count() > 1 ? Translation.SeriesPlural : Translation.Series)); " is 181.
Long Statement,TraktPlugin.GUI,GUIAnticipatedShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,PublishShowSkinProperties,The length of the statement  "            GUICommon.SetProperty("#Trakt.Show.ListCount.Extra"' string.Format(Translation.AppearsInList' anticipatedItem.ListCount)); " is 122.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayMovie,The length of the statement  "                    TraktLogger.Warning("Parental controls pin code has not successfully been entered. Window ID = {0}"' GUIWindowManager.ActiveWindow); " is 132.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayMovie,The length of the statement  "            TraktLogger.Info("Attempting to play movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year.ToLogString()' movie.Ids.Imdb.ToLogString()' movie.Ids.Tmdb.ToLogString()); " is 207.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayMovie,The length of the statement  "                bool movieExists = TraktHandlers.MovingPictures.FindMovieID(movie.Title' movie.Year.GetValueOrDefault()' movie.Ids.Imdb' movie.Ids.Tmdb' ref movieid); " is 150.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayMovie,The length of the statement  "                if (TraktHandlers.MyVideos.FindMovieID(movie.Title' movie.Year.GetValueOrDefault()' movie.Ids.Imdb' movie.Ids.Tmdb' ref imdbMovie)) " is 131.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayMovie,The length of the statement  "                if (TraktHandlers.MyFilmsHandler.FindMovie(movie.Title' movie.Year.GetValueOrDefault()' movie.Ids.Imdb' ref movieid' ref config)) " is 129.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayMovie,The length of the statement  "                TraktLogger.Info("There were no movies found in local plugin databases. Attempting to search and/or play trailer(s) from the Trailers plugin"); " is 143.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayEpisode,The length of the statement  "                    TraktLogger.Warning("Parental controls pin code has not successfully been entered. Window ID = {0}"' GUIWindowManager.ActiveWindow); " is 132.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayEpisode,The length of the statement  "                TraktLogger.Info("There were no episodes found in local plugin databases. Attempting to search and/or play trailer(s) from the Trailers plugin"); " is 145.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayFirstUnwatchedEpisode,The length of the statement  "                    TraktLogger.Warning("Parental controls pin code has not successfully been entered. Window ID = {0}"' GUIWindowManager.ActiveWindow); " is 132.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayFirstUnwatchedEpisode,The length of the statement  "            TraktLogger.Info("Attempting to play episodes for tv show. TVDb ID = '{0}'' IMDb ID = '{1}'"' show.Ids.Tvdb.ToLogString()' show.Ids.Imdb.ToLogString()); " is 152.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayFirstUnwatchedEpisode,The length of the statement  "                TraktLogger.Info("There were no episodes found in local plugin databases. Attempting to search and/or play trailer(s) from the Trailers plugin"); " is 145.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,MarkShowAsWatched,The length of the statement  "                TraktLogger.Info("Adding all episodes from show to trakt.tv watched history. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TVDb ID = '{3}'' TMDb ID = '{4}'"'  " is 157.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,MarkShowAsWatched,The length of the statement  "                                    show.Title' show.Year.ToLogString()' show.Ids.Imdb.ToLogString()' show.Ids.Tvdb.ToLogString()' show.Ids.Tmdb.ToLogString()); " is 124.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,MarkSeasonAsWatched,The length of the statement  "                TraktLogger.Info("Adding all episodes in season from show to trakt.tv watched history. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TVDb ID = '{3}'' TMDb ID = '{4}'' Season = '{5}'"'  " is 183.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,MarkSeasonAsWatched,The length of the statement  "                                    show.Title' show.Year.ToLogString()' show.Ids.Imdb.ToLogString()' show.Ids.Tvdb.ToLogString()' show.Ids.Tmdb.ToLogString()' season); " is 132.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,AddShowToCollection,The length of the statement  "                TraktLogger.Info("Adding all episodes from show to trakt.tv collection. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TVDb ID = '{3}'' TMDb ID = '{4}'"' " is 152.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,AddShowToCollection,The length of the statement  "                                    show.Title' show.Year.ToLogString()' show.Ids.Imdb.ToLogString()' show.Ids.Tvdb.ToLogString()' show.Ids.Tmdb.ToLogString()); " is 124.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,AddSeasonToLibrary,The length of the statement  "                TraktLogger.Info("Adding all episodes in season from show to trakt.tv collection. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TVDb ID = '{3}'' TMDb ID = '{4}'' Season = '{5}'"' " is 178.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,AddSeasonToLibrary,The length of the statement  "                                    show.Title' show.Year.ToLogString()' show.Ids.Imdb.ToLogString()' show.Ids.Tvdb.ToLogString()' show.Ids.Tmdb.ToLogString()' season); " is 132.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetUserProperties,The length of the statement  "            SetProperty("#Trakt.User.Gender"' string.IsNullOrEmpty(user.Gender) ? null : Translation.GetByName(string.Format("Gender{0}"' user.Gender))); " is 141.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetListProperties,The length of the statement  "            SetProperty("#Trakt.List.Url"' string.Format("http://trakt.tv/users/{0}/lists/{1}"' list.User?.Ids?.Slug' list.Ids?.Slug)); " is 123.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetStatisticProperties,The length of the statement  "                SetProperty("#Trakt.Statistics.Shows.Loved"' Username == TraktSettings.Username ? TraktCache.StatsShowsLoved() : stats.Shows.Ratings); " is 134.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetStatisticProperties,The length of the statement  "                SetProperty("#Trakt.Statistics.Episodes.Loved"' Username == TraktSettings.Username ? TraktCache.StatsEpisodesLoved() : stats.Episodes.Ratings); " is 143.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetStatisticProperties,The length of the statement  "                SetProperty("#Trakt.Statistics.Episodes.Hated"' Username == TraktSettings.Username ? TraktCache.StatsEpisodesHated() : 0); " is 122.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetStatisticProperties,The length of the statement  "                SetProperty("#Trakt.Statistics.Movies.Loved"' Username == TraktSettings.Username ? TraktCache.StatsMoviesLoved() : stats.Movies.Ratings); " is 137.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetMovieProperties,The length of the statement  "            SetProperty("#Trakt.Movie.Overview"' movie.Overview.ToNullIfEmpty() == null ? Translation.NoMovieSummary : movie.Overview.RemapHighOrderChars()); " is 145.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetSeasonProperties,The length of the statement  "            //SetProperty("#Trakt.Season.PosterImageFilename"' season.Images == null ? string.Empty : season.Images.Poster.LocalImageFilename(ArtworkType.SeasonPoster)); " is 157.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetShowProperties,The length of the statement  "            SetProperty("#Trakt.Show.Overview"' show.Overview.ToNullIfEmpty() == null ? Translation.NoShowSummary : show.Overview.RemapHighOrderChars()); " is 141.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetEpisodeProperties,The length of the statement  "                SetProperty("#Trakt.Episode.FirstAiredLocalizedDayOfWeek"' episode.FirstAired.FromISO8601().ToLocalTime().ToLocalisedDayOfWeek()); " is 130.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetEpisodeProperties,The length of the statement  "                SetProperty("#Trakt.Episode.FirstAiredLocalizedTime"' episode.FirstAired.FromISO8601().ToLocalTime().ToShortTimeString()); " is 122.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetEpisodeProperties,The length of the statement  "            SetProperty("#Trakt.Episode.Title"' string.IsNullOrEmpty(episode.Title) ? string.Format("{0} {1}"' Translation.Episode' episode.Number.ToString()) : episode.Title.RemapHighOrderChars()); " is 186.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetEpisodeProperties,The length of the statement  "            SetProperty("#Trakt.Episode.Url"' string.Format("http://trakt.tv/shows/{0}/seasons/{1}/episodes/{2}"' show.Ids.Slug' episode.Season' episode.Number)); " is 150.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetEpisodeProperties,The length of the statement  "            SetProperty("#Trakt.Episode.Overview"' episode.Overview.ToNullIfEmpty() == null ? Translation.NoEpisodeSummary : episode.Overview.RemapHighOrderChars()); " is 153.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetEpisodeProperties,The length of the statement  "            //    SetProperty("#Trakt.Episode.EpisodeImageFilename"' episode.Images.ScreenShot.LocalImageFilename(ArtworkType.EpisodeImage)); " is 129.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetPersonProperties,The length of the statement  "            //    SetProperty("#Trakt.Person.HeadshotFilename"' person.Images.HeadShot.LocalImageFilename(ArtworkType.PersonHeadshot)); " is 123.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetPersonProperties,The length of the statement  "            //    if (person.Images.Fanart != null && System.IO.File.Exists(person.Images.Fanart.LocalImageFilename(ArtworkType.PersonFanart))) " is 131.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetPersonProperties,The length of the statement  "            //        SetProperty("#Trakt.Person.FanartFilename"' person.Images.Fanart.LocalImageFilename(ArtworkType.PersonFanart)); " is 121.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowLayoutMenu,The length of the statement  "                var facade = GUIWindowManager.GetWindow(GUIWindowManager.ActiveWindow).GetControl((int)TraktGUIControls.Facade) as GUIFacadeControl; " is 132.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowLayoutMenu,The length of the statement  "                GUIControl.SetControlLabel(GUIWindowManager.ActiveWindow' (int)TraktGUIControls.Layout' GetLayoutTranslation(newLayout)); " is 121.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowMovieTrailersMenu,The length of the statement  "                        TraktLogger.Warning("Parental controls pin code has not successfully been entered. Window ID = {0}"' GUIWindowManager.ActiveWindow); " is 132.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTVShowTrailersMenu,The length of the statement  "                        TraktLogger.Warning("Parental controls pin code has not successfully been entered. Window ID = {0}"' GUIWindowManager.ActiveWindow); " is 132.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTVSeasonTrailersPluginMenu,The length of the statement  "                    TraktLogger.Warning("Parental controls pin code has not successfully been entered. Window ID = {0}"' GUIWindowManager.ActiveWindow); " is 132.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The length of the statement  "                    TraktLogger.Info("Displaying rate dialog for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString()' imdbid.ToLogString()); " is 148.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The length of the statement  "                    TraktLogger.Info("Displaying Shouts for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString()' imdbid.ToLogString()); " is 143.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The length of the statement  "                    TraktLogger.Info("Displaying Related Movies for. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString()' imdbid.ToLogString()); " is 145.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The length of the statement  "                    TraktLogger.Info("Adding movie to Watchlist. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString()' imdbid.ToLogString()); " is 141.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The length of the statement  "                    TraktLogger.Info("Adding movie to Custom List. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString()' imdbid.ToLogString()); " is 143.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The length of the statement  "                    TraktLogger.Info("Displaying Cast for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString()' imdbid.ToLogString()); " is 141.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The length of the statement  "                    TraktLogger.Info("Displaying Crew for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString()' imdbid.ToLogString()); " is 141.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "                    TraktLogger.Info("Displaying rate dialog for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString()' tvdbid.ToLogString()); " is 150.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "                    TraktLogger.Info("Displaying Shouts for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'' IMDb ID = '{3}'"' title' year.ToLogString()' tvdbid.ToLogString()' imdbid.ToLogString()); " is 184.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "                    TraktLogger.Info("Displaying Related shows for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString()' tvdbid.ToLogString()); " is 152.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "                    TraktHelper.ShowRelatedShows(title' year.ToNullableInt32()' tvdbid.ToNullableInt32()' imdbid.ToNullIfEmpty()' null' null); " is 122.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "                    TraktLogger.Info("Displaying Season Info for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString()' tvdbid.ToLogString()); " is 150.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "                    TraktLogger.Info("Adding tv show to Watchlist. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString()' tvdbid.ToLogString()); " is 143.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "                    TraktHelper.AddShowToWatchList(title' year.ToNullableInt32()' tvdbid.ToNullableInt32()' imdbid.ToNullIfEmpty()' null' null); " is 124.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "                    TraktLogger.Info("Adding tv show to Custom List. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString()' tvdbid.ToLogString()); " is 145.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "                    TraktLogger.Info("Displaying Cast for show. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString()' imdbid.ToLogString()); " is 140.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "                    TraktLogger.Info("Displaying Crew for show. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString()' imdbid.ToLogString()); " is 140.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The length of the statement  "                    TraktLogger.Info("Displaying rate dialog for tv season. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'' Season = '{3}'"' title' year.ToLogString()' tvdbid.ToLogString()' season); " is 176.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The length of the statement  "                    TraktLogger.Info("Displaying Shouts for tv season. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'' IMDb ID = '{3}'' Season = '{4}'"' title' year.ToLogString()' tvdbid.ToLogString()' imdbid.ToLogString()' season); " is 210.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The length of the statement  "                    TraktHelper.ShowTVSeasonShouts(title' year.ToNullableInt32()' tvdbid.ToNullableInt32()' null' imdbid' seasonNumber' false' fanart); " is 131.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The length of the statement  "                    TraktLogger.Info("Adding tv season to Watchlist. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}' Season = '{3}'"' title' year.ToLogString()' tvdbid.ToLogString()' season); " is 168.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The length of the statement  "                    TraktHelper.AddSeasonToWatchList(title' year.ToNullableInt32()' seasonNumber' tvdbid.ToNullableInt32()' imdbid.ToNullIfEmpty()' null' null); " is 140.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The length of the statement  "                    TraktLogger.Info("Adding tv season to Custom List. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'' Season = '{3}'"' title' year.ToLogString()' tvdbid.ToLogString()' season); " is 171.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The length of the statement  "            return ShowTraktExtEpisodeMenu(title' year' season' episode' tvdbid' null' episodetvdbid' isWatched' fanart' people' showAll); " is 126.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The length of the statement  "                    TraktLogger.Info("Displaying rate dialog for tv episode. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'' Show ID = '{4}'' Episode ID = '{5}'"' title' year.ToLogString()' season' episode' tvdbid.ToLogString()' episodetvdbid.ToLogString()); " is 252.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The length of the statement  "                    TraktLogger.Info("Displaying Shouts for tv episode. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'"' title' year.ToLogString()' season' episode); " is 159.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The length of the statement  "                    TraktHelper.ShowEpisodeShouts(title' year.ToNullableInt32()' tvdbid.ToNullableInt32()' null' imdbid.ToNullIfEmpty()' season.ToInt()' episode.ToInt()' isWatched' fanart); " is 169.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The length of the statement  "                    TraktLogger.Info("Adding tv episode to Watchlist. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'"' title' year.ToLogString()' season' episode); " is 157.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The length of the statement  "                    TraktLogger.Info("Adding tv episode to Custom List. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'' Episode ID = '{4}'"' title' year.ToLogString()' season' episode' episodetvdbid.ToLogString()); " is 208.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The length of the statement  "                        TraktHelper.AddRemoveEpisodeInUserList(new TraktEpisode { Ids = new TraktEpisodeId { Tvdb = episodetvdbid.ToNullableInt32() } }' false); " is 136.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityItemName,The length of the statement  "                            name = string.Format("{0} - {1}x{2}{3}"' activity.Show.Title' activity.Episode.Season.ToString()' activity.Episode.Number.ToString()' episodeName); " is 147.
Long Statement,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityItemName,The length of the statement  "                                    name = string.Format("{0} - {1} {2}"' activity.ListItem.Show.Title' Translation.Season' activity.ListItem.Season.Number); " is 121.
Long Statement,TraktPlugin.GUI,GUIListItems,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnShowContextMenu,The length of the statement  "                        loadingParam = string.Format("search:{0} S{1}E{2}"' selectedListItem.Show.Title' selectedListItem.Episode.Season.ToString("D2")' selectedListItem.Episode.Number.ToString("D2")); " is 177.
Long Statement,TraktPlugin.GUI,GUIListItems,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnShowContextMenu,The length of the statement  "                        loadPar = string.Format("{0} S{1}E{2}"' selectedListItem.Show.Title' selectedListItem.Episode.Season.ToString("D2")' selectedListItem.Episode.Number.ToString("D2")); " is 165.
Long Statement,TraktPlugin.GUI,GUIListItems,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,SendListItemsToFacade,The length of the statement  "                string itemName = CurrentList.DisplayNumbers ? string.Format("{0}. {1}"' itemId' GetListItemLabel(listItem)) : GetListItemLabel(listItem); " is 138.
Long Statement,TraktPlugin.GUI,GUIListItems,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,SendListItemsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' listItems.Count().ToString()' listItems.Count() > 1 ? Translation.Items : Translation.Item)); " is 155.
Long Statement,TraktPlugin.GUI,GUIListItems,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,GetListItemLabel,The length of the statement  "                    retValue = string.Format("{0} - {1}x{2}{3}"' listItem.Show.Title' listItem.Episode.Season' listItem.Episode.Number' string.IsNullOrEmpty(listItem.Episode.Title) ? string.Empty : " - " + listItem.Episode.Title); " is 210.
Long Statement,TraktPlugin.GUI,GUICustomListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUICustomListItem.cs,GetImages,The length of the statement  "                for (int j = groupSize * i; j < groupSize * i + (groupSize * (i + 1) > itemsWithThumbs.Count ? itemsWithThumbs.Count - groupSize * i : groupSize); j++) " is 151.
Long Statement,TraktPlugin.GUI,GUICustomListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUICustomListItem.cs,SetImageToGui,The length of the statement  "            string suffix = mainOverlay.ToString().Replace("' "' string.Empty) + Enum.GetName(typeof(RatingOverlayImage)' ratingOverlay); " is 125.
Long Statement,TraktPlugin.GUI,GUIEpisodeListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,GetImages,The length of the statement  "                for (int j = groupSize * i; j < groupSize * i + (groupSize * (i + 1) > itemsWithThumbs.Count ? itemsWithThumbs.Count - groupSize * i : groupSize); j++) " is 151.
Long Statement,TraktPlugin.GUI,GUIEpisodeListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,GetImages,The length of the statement  "                //    int x = Convert.ToInt32(File.Exists(s1.EpisodeImages.ScreenShot.LocalImageFilename(ArtworkType.EpisodeImage))) + (s1.ShowImages == null ? 0 : Convert.ToInt32(File.Exists(s1.ShowImages.Fanart.LocalImageFilename(ArtworkType.ShowFanart)))); " is 243.
Long Statement,TraktPlugin.GUI,GUIEpisodeListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,GetImages,The length of the statement  "                //    int y = Convert.ToInt32(File.Exists(s2.EpisodeImages.ScreenShot.LocalImageFilename(ArtworkType.EpisodeImage))) + (s2.ShowImages == null ? 0 : Convert.ToInt32(File.Exists(s2.ShowImages.Fanart.LocalImageFilename(ArtworkType.ShowFanart)))); " is 243.
Long Statement,TraktPlugin.GUI,GUIEpisodeListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,GetImages,The length of the statement  "                        if (item.EpisodeImages.AirDate != null && item.EpisodeImages.AirDate.ToDateTime() <= Convert.ToDateTime(DateTime.Now.ToShortDateString())) " is 138.
Long Statement,TraktPlugin.GUI,GUIEpisodeListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,GetImages,The length of the statement  "                            episodeImages = TmdbCache.GetEpisodeImages(item.EpisodeImages.Id' item.EpisodeImages.Season' item.EpisodeImages.Episode); " is 121.
Long Statement,TraktPlugin.GUI,GUIEpisodeListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,SetImageToGui,The length of the statement  "            string suffix = mainOverlay.ToString().Replace("' "' string.Empty) + Enum.GetName(typeof(RatingOverlayImage)' ratingOverlay); " is 125.
Long Statement,TraktPlugin.GUI,GUIMovieListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIMovieListItem.cs,GetImages,The length of the statement  "                for (int j = groupSize * i; j < groupSize * i + (groupSize * (i + 1) > itemsWithThumbs.Count ? itemsWithThumbs.Count - groupSize * i : groupSize); j++) " is 151.
Long Statement,TraktPlugin.GUI,GUIMovieListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIMovieListItem.cs,GetImages,The length of the statement  "                //    int x = Convert.ToInt32(File.Exists(m1.MovieImages.Poster.LocalImageFilename(ArtworkType.MoviePoster))) + Convert.ToInt32(File.Exists(m1.MovieImages.Fanart.LocalImageFilename(ArtworkType.MovieFanart))); " is 208.
Long Statement,TraktPlugin.GUI,GUIMovieListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIMovieListItem.cs,GetImages,The length of the statement  "                //    int y = Convert.ToInt32(File.Exists(m2.MovieImages.Poster.LocalImageFilename(ArtworkType.MoviePoster))) + Convert.ToInt32(File.Exists(m2.MovieImages.Fanart.LocalImageFilename(ArtworkType.MovieFanart))); " is 208.
Long Statement,TraktPlugin.GUI,GUIMovieListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIMovieListItem.cs,SetImageToGui,The length of the statement  "            string suffix = mainOverlay.ToString().Replace("' "' string.Empty) + Enum.GetName(typeof(RatingOverlayImage)' ratingOverlay); " is 125.
Long Statement,TraktPlugin.GUI,GUIPersonListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIPersonListItem.cs,GetImages,The length of the statement  "                for (int j = groupSize * i; j < groupSize * i + (groupSize * (i + 1) > itemsWithThumbs.Count ? itemsWithThumbs.Count - groupSize * i : groupSize); j++) " is 151.
Long Statement,TraktPlugin.GUI,GUIPersonListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIPersonListItem.cs,GetImages,The length of the statement  "                            //    remoteThumb = TraktSettings.DownloadFullSizeFanart ? item.PeopleImages.Fanart.FullSize : item.PeopleImages.Fanart.MediumSize; " is 131.
Long Statement,TraktPlugin.GUI,GUISeasonListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUISeasonListItem.cs,GetImages,The length of the statement  "                for (int j = groupSize * i; j < groupSize * i + (groupSize * (i + 1) > itemsWithThumbs.Count ? itemsWithThumbs.Count - groupSize * i : groupSize); j++) " is 151.
Long Statement,TraktPlugin.GUI,GUISeasonListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUISeasonListItem.cs,SetImageToGui,The length of the statement  "            string suffix = Enum.GetName(typeof(MainOverlayImage)' mainOverlay) + Enum.GetName(typeof(RatingOverlayImage)' ratingOverlay); " is 126.
Long Statement,TraktPlugin.GUI,GUIShowListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIShowListItem.cs,GetImages,The length of the statement  "                for (int j = groupSize * i; j < groupSize * i + (groupSize * (i + 1) > itemsWithThumbs.Count ? itemsWithThumbs.Count - groupSize * i : groupSize); j++) " is 151.
Long Statement,TraktPlugin.GUI,GUIShowListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIShowListItem.cs,GetImages,The length of the statement  "                //    int x = Convert.ToInt32(File.Exists(s1.ShowImages.Poster.LocalImageFilename(ArtworkType.ShowPoster))) + Convert.ToInt32(File.Exists(s1.ShowImages.Fanart.LocalImageFilename(ArtworkType.ShowFanart))); " is 204.
Long Statement,TraktPlugin.GUI,GUIShowListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIShowListItem.cs,GetImages,The length of the statement  "                //    int y = Convert.ToInt32(File.Exists(s2.ShowImages.Poster.LocalImageFilename(ArtworkType.ShowPoster))) + Convert.ToInt32(File.Exists(s2.ShowImages.Fanart.LocalImageFilename(ArtworkType.ShowFanart))); " is 204.
Long Statement,TraktPlugin.GUI,GUIShowListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIShowListItem.cs,SetImageToGui,The length of the statement  "            string suffix = Enum.GetName(typeof(MainOverlayImage)' mainOverlay) + Enum.GetName(typeof(RatingOverlayImage)' ratingOverlay); " is 126.
Long Statement,TraktPlugin.GUI,GUIUserListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIUserListItem.cs,GetImages,The length of the statement  "                for (int j = groupSize * i; j < groupSize * i + (groupSize * (i + 1) > itemsWithThumbs.Count ? itemsWithThumbs.Count - groupSize * i : groupSize); j++) " is 151.
Long Statement,TraktPlugin.GUI,GUILists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,CopyList,The length of the statement  "                TraktLogger.Info("Creating new list online. Privacy = '{0}'' Name = '{1}'"' copyParams.Destination.Privacy' copyParams.Destination.Name); " is 137.
Long Statement,TraktPlugin.GUI,GUILists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,CopyList,The length of the statement  "                var userListItems = TraktAPI.TraktAPI.GetUserListItems(copyParams.Source.User.Ids.Slug' copyParams.Source.Ids.Trakt.ToString()' "min"); " is 135.
Long Statement,TraktPlugin.GUI,GUILists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,CopyList,The length of the statement  "                    TraktLogger.Error("Failed to get user list items. List Name = '{0}'' ID = '{1}'"' copyParams.Destination.Name' copyParams.Source.Ids.Trakt); " is 140.
Long Statement,TraktPlugin.GUI,GUILists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,SendTrendingListsToFacade,The length of the statement  "                item.Label2 = string.Format("{0} {1}"' trending.List.ItemCount' trending.List.ItemCount != 1 ? Translation.Items : Translation.Item); " is 133.
Long Statement,TraktPlugin.GUI,GUILists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,SendTrendingListsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' lists.Count().ToString()' lists.Count() > 1 ? Translation.Lists : Translation.List)); " is 147.
Long Statement,TraktPlugin.GUI,GUILists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,SendPopularListsToFacade,The length of the statement  "                item.Label2 = string.Format("{0} {1}"' popular.List.ItemCount' popular.List.ItemCount != 1 ? Translation.Items : Translation.Item); " is 131.
Long Statement,TraktPlugin.GUI,GUILists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,SendPopularListsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' lists.Count().ToString()' lists.Count() > 1 ? Translation.Lists : Translation.List)); " is 147.
Long Statement,TraktPlugin.GUI,GUILists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,SendLikedListsToFacade,The length of the statement  "                item.Label2 = string.Format("{0} {1}"' likedItem.List.ItemCount' likedItem.List.ItemCount != 1 ? Translation.Items : Translation.Item); " is 135.
Long Statement,TraktPlugin.GUI,GUILists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,SendLikedListsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' likedItems.Count().ToString()' likedItems.Count() > 1 ? Translation.Lists : Translation.List)); " is 157.
Long Statement,TraktPlugin.GUI,GUILists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,SendUserListsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' lists.Count().ToString()' lists.Count() > 1 ? Translation.Lists : Translation.List)); " is 147.
Long Statement,TraktPlugin.GUI,GUIPersonMovieCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,SendCrewToFacade,The length of the statement  "            filteredCrew.Sort(new GUIListItemMovieSorter(TraktSettings.SortByCreditMovies.Field' TraktSettings.SortByCreditMovies.Direction)); " is 130.
Long Statement,TraktPlugin.GUI,GUIPersonMovieCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,SendCrewToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' filteredCrew.Count' filteredCrew.Count > 1 ? Translation.Movies : Translation.Movie)); " is 148.
Long Statement,TraktPlugin.GUI,GUIPersonMovieCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,SendCastToFacade,The length of the statement  "            filteredCast.Sort(new GUIListItemMovieSorter(TraktSettings.SortByCreditMovies.Field' TraktSettings.SortByCreditMovies.Direction)); " is 130.
Long Statement,TraktPlugin.GUI,GUIPersonMovieCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,SendCastToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' filteredCast.Count' filteredCast.Count > 1 ? Translation.Movies : Translation.Movie)); " is 148.
Long Statement,TraktPlugin.GUI,GUIPersonMovieCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,PublishCrewSkinProperties,The length of the statement  "            GUICommon.SetProperty("#Trakt.Person.Movie.CreditValue"' GUICommon.GetTranslatedCreditJob(creditItem.Jobs.FirstOrDefault())); " is 125.
Long Statement,TraktPlugin.GUI,GUIPersonMovieCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnCrewSelected,The length of the statement  "            GUIImageHandler.LoadFanart(backdrop' TmdbCache.GetMovieBackdropFilename((item as GUIMovieListItem).Images.MovieImages)); " is 120.
Long Statement,TraktPlugin.GUI,GUIPersonMovieCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnCastSelected,The length of the statement  "            GUIImageHandler.LoadFanart(backdrop' TmdbCache.GetMovieBackdropFilename((item as GUIMovieListItem).Images.MovieImages)); " is 120.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnShowContextMenu,The length of the statement  "                    if (GUIUtils.ShowYesNoDialog(Translation.Network' string.Format(Translation.SendFollowRequest' selectedItem.Label)' true)) " is 122.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnShowContextMenu,The length of the statement  "                    if (GUIUtils.ShowYesNoDialog(Translation.FollowerRequest' string.Format(Translation.ApproveFollowerMessage' selectedItem.Label)' true)) " is 135.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnShowContextMenu,The length of the statement  "                    if (GUIUtils.ShowYesNoDialog(Translation.FollowerRequest' string.Format(Translation.ApproveFollowerAndFollowBackMessage' selectedItem.Label)' true)) " is 148.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnShowContextMenu,The length of the statement  "                        TraktCache.FollowerRequests = TraktCache.FollowerRequests.Except(TraktCache.FollowerRequests.Where(f => f.User.Username == selectedItem.Label)); " is 144.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnShowContextMenu,The length of the statement  "                    if (GUIUtils.ShowYesNoDialog(Translation.FollowerRequest' string.Format(Translation.DenyFollowRequest' selectedItem.Label)' true)) " is 130.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnShowContextMenu,The length of the statement  "                        TraktCache.FollowerRequests = TraktCache.FollowerRequests.Except(TraktCache.FollowerRequests.Where(f => f.User.Username == selectedItem.Label)); " is 144.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,InitProperties,The length of the statement  "            if (CurrentSelectedUser == null || LastRequest < DateTime.UtcNow.Subtract(new TimeSpan(0' TraktSettings.WebRequestCacheMinutes' 0))) " is 132.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,SendFriendsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' friendCount.ToString()' friendCount > 1 ? Translation.Friends : Translation.Friend)); " is 147.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,SendFollowerToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' followerCount.ToString()' followerCount > 1 ? Translation.Follower : Translation.Followers)); " is 155.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,SendFollowerRequestsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' followerReqCount.ToString()' followerReqCount > 1 ? Translation.FollowerRequest : Translation.FollowerRequests)); " is 175.
Long Statement,TraktPlugin.GUI,GUIPersonShowCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,SendCrewToFacade,The length of the statement  "            filteredCrew.Sort(new GUIListItemShowSorter(TraktSettings.SortByCreditShows.Field' TraktSettings.SortByCreditShows.Direction)); " is 127.
Long Statement,TraktPlugin.GUI,GUIPersonShowCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,SendCrewToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' filteredCrew.Count' filteredCrew.Count > 1 ? Translation.Shows : Translation.Show)); " is 146.
Long Statement,TraktPlugin.GUI,GUIPersonShowCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,SendCastToFacade,The length of the statement  "            filteredCast.Sort(new GUIListItemShowSorter(TraktSettings.SortByCreditShows.Field' TraktSettings.SortByCreditShows.Direction)); " is 127.
Long Statement,TraktPlugin.GUI,GUIPersonShowCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,SendCastToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' filteredCast.Count' filteredCast.Count > 1 ? Translation.Shows : Translation.Show)); " is 146.
Long Statement,TraktPlugin.GUI,GUIPersonShowCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,PublishCrewSkinProperties,The length of the statement  "            GUICommon.SetProperty("#Trakt.Person.Show.CreditValue"' GUICommon.GetTranslatedCreditJob(creditItem.Jobs.FirstOrDefault())); " is 124.
Long Statement,TraktPlugin.GUI,GUIPopularMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,GetPopularMovies,The length of the statement  "            if (PopularMoviePages == null || LastRequest < DateTime.UtcNow.Subtract(new TimeSpan(0' TraktSettings.WebRequestCacheMinutes' 0))) " is 130.
Long Statement,TraktPlugin.GUI,GUIPopularMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,SendPopularMoviesToFacade,The length of the statement  "            filteredPopularList.Sort(new GUIListItemMovieSorter(TraktSettings.SortByPopularMovies.Field' TraktSettings.SortByPopularMovies.Direction)); " is 139.
Long Statement,TraktPlugin.GUI,GUIPopularMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,SendPopularMoviesToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' filteredPopularList.Count()' filteredPopularList.Count() > 1 ? Translation.Movies : Translation.Movie)); " is 166.
Long Statement,TraktPlugin.GUI,GUIPopularMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnMovieSelected,The length of the statement  "            GUIImageHandler.LoadFanart(backdrop' TmdbCache.GetMovieBackdropFilename((item as GUIMovieListItem).Images.MovieImages)); " is 120.
Long Statement,TraktPlugin.GUI,GUIPopularShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,GetPopularShows,The length of the statement  "            if (PopularShowPages == null || LastRequest < DateTime.UtcNow.Subtract(new TimeSpan(0' TraktSettings.WebRequestCacheMinutes' 0))) " is 129.
Long Statement,TraktPlugin.GUI,GUIPopularShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,SendPopularShowsToFacade,The length of the statement  "            filteredPopularList.Sort(new GUIListItemShowSorter(TraktSettings.SortByPopularShows.Field' TraktSettings.SortByPopularShows.Direction)); " is 136.
Long Statement,TraktPlugin.GUI,GUIPopularShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,SendPopularShowsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' filteredPopularList.Count()' filteredPopularList.Count() > 1 ? Translation.SeriesPlural : Translation.Series)); " is 173.
Long Statement,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,OnShowContextMenu,The length of the statement  "                    string loadingParam = string.Format("search:{0} S{1}E{2}"' selectedShow.Title' selectedEpisode.Season.ToString("D2")' selectedEpisode.Number.ToString("D2")); " is 157.
Long Statement,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,OnShowContextMenu,The length of the statement  "                    string loadPar = string.Format("{0} S{1}E{2}"' selectedShow.Title' selectedEpisode.Season.ToString("D2")' selectedEpisode.Number.ToString("D2")); " is 145.
Long Statement,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,SendRecentlyAddedToFacade,The length of the statement  "                            AirDate = episodeSummary.Episode.FirstAired == null ? null : episodeSummary.Episode.FirstAired.FromISO8601().ToLocalTime().ToShortDateString() " is 142.
Long Statement,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,SendRecentlyAddedToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' episodeCount.ToString()' episodeCount > 1 ? Translation.Episodes : Translation.Episode)); " is 151.
Long Statement,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,OnEpisodeSelected,The length of the statement  "            GUIImageHandler.LoadFanart(backdrop' TmdbCache.GetShowBackdropFilename((item as GUIEpisodeListItem).Images.ShowImages)); " is 120.
Long Statement,TraktPlugin.GUI,GUIRecentAddedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedMovies.cs,SendRecentlyAddedToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' activities.Count().ToString()' activities.Count() > 1 ? Translation.Movies : Translation.Movie)); " is 159.
Long Statement,TraktPlugin.GUI,GUIRecentAddedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedMovies.cs,OnMovieSelected,The length of the statement  "            GUIImageHandler.LoadFanart(backdrop' TmdbCache.GetMovieBackdropFilename((item as GUIMovieListItem).Images.MovieImages)); " is 120.
Long Statement,TraktPlugin.GUI,GUIRecentShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,SendRecentCommentsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' comments.Count().ToString()' comments.Count() > 1 ? Translation.Comment : Translation.Comments)); " is 159.
Long Statement,TraktPlugin.GUI,GUIRecentShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,GetCommentItemTitle,The length of the statement  "                    title = string.Format("{0} - {1}x{2} - {3}"' comment.Show.Title' comment.Episode.Season' comment.Episode.Number' comment.Episode.Title ?? string.Format("{0} {1}"' Translation.Episode' comment.Episode.Number)); " is 209.
Long Statement,TraktPlugin.GUI,GUIRelatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,SendRelatedMoviesToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' movies.Count().ToString()' movies.Count() > 1 ? Translation.Movies : Translation.Movie));             " is 151.
Long Statement,TraktPlugin.GUI,GUIRelatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,OnMovieSelected,The length of the statement  "            GUIImageHandler.LoadFanart(backdrop' TmdbCache.GetMovieBackdropFilename((item as GUIMovieListItem).Images.MovieImages)); " is 120.
Long Statement,TraktPlugin.GUI,GUIRelatedShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedShows.cs,SendRelatedShowsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' shows.Count().ToString()' shows.Count() > 1 ? Translation.SeriesPlural : Translation.Series)); " is 156.
Long Statement,TraktPlugin.GUI,GUISearch,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,InitProperties,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Search.SearchTerm"' string.IsNullOrEmpty(SearchTerm) ? Translation.EnterSearchTerm : SearchTerm); " is 126.
Long Statement,TraktPlugin.GUI,GUISearchEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchEpisodes.cs,OnShowContextMenu,The length of the statement  "                    string loadingParam = string.Format("search:{0} S{1}E{2}"' selectedShow.Title' selectedEpisode.Season.ToString("D2")' selectedEpisode.Number.ToString("D2")); " is 157.
Long Statement,TraktPlugin.GUI,GUISearchEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchEpisodes.cs,OnShowContextMenu,The length of the statement  "                    string loadPar = string.Format("{0} S{1}E{2}"' selectedShow.Title' selectedEpisode.Season.ToString("D2")' selectedEpisode.Number.ToString("D2")); " is 145.
Long Statement,TraktPlugin.GUI,GUISearchEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchEpisodes.cs,SendSearchResultsToFacade,The length of the statement  "                        AirDate = episodeSummary.Episode.FirstAired == null ? null : episodeSummary.Episode.FirstAired.FromISO8601().ToLocalTime().ToShortDateString() " is 142.
Long Statement,TraktPlugin.GUI,GUISearchEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchEpisodes.cs,SendSearchResultsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' episodes.Count().ToString()' episodes.Count() > 1 ? Translation.Episodes : Translation.Episode)); " is 159.
Long Statement,TraktPlugin.GUI,GUISearchMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchMovies.cs,SendSearchResultsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' movies.Count().ToString()' movies.Count() > 1 ? Translation.Movies : Translation.Movie)); " is 151.
Long Statement,TraktPlugin.GUI,GUISearchMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchMovies.cs,OnMovieSelected,The length of the statement  "            GUIImageHandler.LoadFanart(backdrop' TmdbCache.GetMovieBackdropFilename((item as GUIMovieListItem).Images.MovieImages)); " is 120.
Long Statement,TraktPlugin.GUI,GUISearchPeople,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchPeople.cs,SendSearchResultsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' people.Count().ToString()' people.Count() > 1 ? Translation.People : Translation.Person)); " is 152.
Long Statement,TraktPlugin.GUI,GUISearchShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchShows.cs,SendSearchResultsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' shows.Count().ToString()' shows.Count() > 1 ? Translation.TVShows : Translation.TVShow)); " is 151.
Long Statement,TraktPlugin.GUI,GUISearchUsers,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchUsers.cs,OnClicked,The length of the statement  "                            if (GUIUtils.ShowYesNoDialog(Translation.Network' string.Format(Translation.SendFollowRequest' selectedUser.Username)' true)) " is 125.
Long Statement,TraktPlugin.GUI,GUISearchUsers,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchUsers.cs,OnShowContextMenu,The length of the statement  "                    if (GUIUtils.ShowYesNoDialog(Translation.Network' string.Format(Translation.SendFollowRequest' selectedItem.Label)' true)) " is 122.
Long Statement,TraktPlugin.GUI,GUISearchUsers,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchUsers.cs,SendSearchResultsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' users.Count().ToString()' users.Count() > 1 ? Translation.Users : Translation.User)); " is 147.
Long Statement,TraktPlugin.GUI,GUISeasonEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISeasonEpisodes.cs,OnShowContextMenu,The length of the statement  "                    string loadingParam = string.Format("search:{0} S{1}E{2}"' Show.Title' selectedEpisode.Season.ToString("D2")' selectedEpisode.Number.ToString("D2")); " is 149.
Long Statement,TraktPlugin.GUI,GUISeasonEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISeasonEpisodes.cs,OnShowContextMenu,The length of the statement  "                    string loadPar = string.Format("{0} S{1}E{2}"' Show.Title' selectedEpisode.Season.ToString("D2")' selectedEpisode.Number.ToString("D2")); " is 137.
Long Statement,TraktPlugin.GUI,GUISeasonEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISeasonEpisodes.cs,SendSeasonEpisodesToFacade,The length of the statement  "                string itemLabel = string.Format("{0}. {1}"' episode.Number.ToString()' string.IsNullOrEmpty(episode.Title) ? Translation.Episode + " " + episode.Number.ToString() : episode.Title); " is 181.
Long Statement,TraktPlugin.GUI,GUISeasonEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISeasonEpisodes.cs,SendSeasonEpisodesToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' itemCount.ToString()' itemCount > 1 ? Translation.Episodes : Translation.Episode)); " is 145.
Long Statement,TraktPlugin.GUI,GUISettingsAccount,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsAccount.cs,OnClicked,The length of the statement  "                            TraktLogger.Info("Successfully got device code from trakt.tv' presenting code '{0}' to user for activation at '{1}'. Code expires in '{2}' secs"' code.UserCode' code.VerificationUrl' code.ExpiresIn); " is 199.
Long Statement,TraktPlugin.GUI,GUISettingsAccount,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsAccount.cs,OnClicked,The length of the statement  "                            GUIUtils.SetProperty("#Trakt.Settings.Account.ScanQRCode"' string.Format(Translation.ScanQRCode' code.VerificationUrl' code.UserCode)); " is 135.
Long Statement,TraktPlugin.GUI,GUISettingsAccount,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsAccount.cs,InitProperties,The length of the statement  "                GUIControl.SetControlLabel(GetID' btnAuthoriseOrDisconnect.GetID' string.Format(Translation.DisconnectAccount' TraktSettings.Username)); " is 136.
Long Statement,TraktPlugin.GUI,GUISettingsPlugins,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsPlugins.cs,OnPageDestroy,The length of the statement  "            if (btnMyRecordedTV.IsSelected(TraktSettings.MyTVRecordings >= 0) && MyRecordedTV < 0) { MyRecordedTV = intArray.Max() + i; i++; } " is 130.
Long Statement,TraktPlugin.GUI,GUISettingsPlugins,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsPlugins.cs,OnPageDestroy,The length of the statement  "            if (btnArgusRecordings.IsSelected(TraktSettings.ArgusRecordings >= 0) && ArgusRecordings < 0) { ArgusRecordings = intArray.Max() + i; i++; } " is 140.
Long Statement,TraktPlugin.GUI,GUISettingsPlugins,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsPlugins.cs,OnPageDestroy,The length of the statement  "            if (btnArgusLiveTV.IsSelected(TraktSettings.ArgusTVLive >= 0) && ArgusLiveTV < 0) { ArgusLiveTV = intArray.Max() + i; i++; } " is 124.
Long Statement,TraktPlugin.GUI,GUIShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,SendCommentsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' distinctComments.Count()' distinctComments.Count() > 1 ? Translation.Comments : Translation.Shout)); " is 162.
Long Statement,TraktPlugin.GUI,GUIShowSeasons,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShowSeasons.cs,OnShowContextMenu,The length of the statement  "            listItem = new GUIListItem(TraktSettings.SortSeasonsAscending ? Translation.SortSeasonsDescending : Translation.SortSeasonsAscending); " is 134.
Long Statement,TraktPlugin.GUI,GUIShowSeasons,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShowSeasons.cs,SendShowSeasonsToFacade,The length of the statement  "                string itemLabel = season.Number == 0 ? Translation.Specials : string.Format("{0} {1}"' Translation.Season' season.Number.ToString()); " is 134.
Long Statement,TraktPlugin.GUI,GUIShowSeasons,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShowSeasons.cs,SendShowSeasonsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' seasons.Count().ToString()' seasons.Count() > 1 ? Translation.Seasons : Translation.Season));             " is 155.
Long Statement,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,OnShowContextMenu,The length of the statement  "                    string loadingParam = string.Format("search:{0} S{1}E{2}"' selectedShow.Title' selectedEpisode.Season.ToString("D2")' selectedEpisode.Number.ToString("D2")); " is 157.
Long Statement,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,OnShowContextMenu,The length of the statement  "                    string loadPar = string.Format("{0} S{1}E{2}"' selectedShow.Title' selectedEpisode.Season.ToString("D2")' selectedEpisode.Number.ToString("D2")); " is 145.
Long Statement,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,SendRecentlyWatchedToFacade,The length of the statement  "                string episodeName = string.Format("{0} - {1}x{2} - {3}"' recent.Show.Title' recent.Episode.Season' recent.Episode.Number' recent.Episode.Title ?? string.Format("{0} {1}"' Translation.Episode' recent.Episode.Number)); " is 217.
Long Statement,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,SendRecentlyWatchedToFacade,The length of the statement  "                        AirDate = recent.Episode.FirstAired == null ? null : recent.Episode.FirstAired.FromISO8601().ToLocalTime().ToShortDateString() " is 126.
Long Statement,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,SendRecentlyWatchedToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' recentlyWatched.Count().ToString()' recentlyWatched.Count() > 1 ? Translation.Episodes : Translation.Episode)); " is 173.
Long Statement,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,OnEpisodeSelected,The length of the statement  "            GUIImageHandler.LoadFanart(backdrop' TmdbCache.GetShowBackdropFilename((item as GUIEpisodeListItem).Images.ShowImages)); " is 120.
Long Statement,TraktPlugin.GUI,GUIRecentWatchedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedMovies.cs,SendRecentlyWatchedToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' recentlyWatched.Count().ToString()' recentlyWatched.Count() > 1 ? Translation.Movies : Translation.Movie)); " is 169.
Long Statement,TraktPlugin.GUI,GUIRecentWatchedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedMovies.cs,OnMovieSelected,The length of the statement  "            GUIImageHandler.LoadFanart(backdrop' TmdbCache.GetMovieBackdropFilename((item as GUIMovieListItem).Images.MovieImages)); " is 120.
Long Statement,TraktPlugin.GUI,GUIWatchListEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,OnShowContextMenu,The length of the statement  "                    string loadingParam = string.Format("search:{0} S{1}E{2}"' selectedShow.Title' selectedEpisode.Season.ToString("D2")' selectedEpisode.Number.ToString("D2")); " is 157.
Long Statement,TraktPlugin.GUI,GUIWatchListEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,OnShowContextMenu,The length of the statement  "                    string loadPar = string.Format("{0} S{1}E{2}"' selectedShow.Title' selectedEpisode.Season.ToString("D2")' selectedEpisode.Number.ToString("D2")); " is 145.
Long Statement,TraktPlugin.GUI,GUIWatchListEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,SendWatchListEpisodesToFacade,The length of the statement  "                        AirDate = watchlistItem.Episode.FirstAired == null ? null : watchlistItem.Episode.FirstAired.FromISO8601().ToLocalTime().ToShortDateString() " is 140.
Long Statement,TraktPlugin.GUI,GUIWatchListEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,SendWatchListEpisodesToFacade,The length of the statement  "                item.Label2 = watchlistItem.Episode.FirstAired == null ? " " : watchlistItem.Episode.FirstAired.FromISO8601().ToLocalTime().ToShortDateString(); " is 144.
Long Statement,TraktPlugin.GUI,GUIWatchListEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,SendWatchListEpisodesToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' itemCount.ToString()' itemCount > 1 ? Translation.Episodes : Translation.Episode)); " is 145.
Long Statement,TraktPlugin.GUI,GUIRecommendationsMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,SendRecommendedMoviesToFacade,The length of the statement  "            movieList.Sort(new GUIListItemMovieSorter(TraktSettings.SortByRecommendedMovies.Field' TraktSettings.SortByRecommendedMovies.Direction)); " is 137.
Long Statement,TraktPlugin.GUI,GUIRecommendationsMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,SendRecommendedMoviesToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' movies.Count().ToString()' movies.Count() > 1 ? Translation.Movies : Translation.Movie)); " is 151.
Long Statement,TraktPlugin.GUI,GUIRecommendationsMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,SetRecommendationProperties,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Recommendations.EndYear"' EndYear == 0 ? DateTime.Now.AddYears(3).Year.ToString() : EndYear.ToString()); " is 133.
Long Statement,TraktPlugin.GUI,GUIRecommendationsMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnMovieSelected,The length of the statement  "            GUIImageHandler.LoadFanart(backdrop' TmdbCache.GetMovieBackdropFilename((item as GUIMovieListItem).Images.MovieImages)); " is 120.
Long Statement,TraktPlugin.GUI,GUIRecommendationsShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,SendRecommendedShowsToFacade,The length of the statement  "            showList.Sort(new GUIListItemShowSorter(TraktSettings.SortByRecommendedShows.Field' TraktSettings.SortByRecommendedShows.Direction)); " is 133.
Long Statement,TraktPlugin.GUI,GUIRecommendationsShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,SendRecommendedShowsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' shows.Count().ToString()' shows.Count() > 1 ? Translation.SeriesPlural : Translation.Series)); " is 156.
Long Statement,TraktPlugin.GUI,GUIRecommendationsShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,SetRecommendationProperties,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Recommendations.EndYear"' EndYear == 0 ? DateTime.Now.AddYears(3).Year.ToString() : EndYear.ToString()); " is 133.
Long Statement,TraktPlugin.GUI,GUITrendingShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,GetTrendingShows,The length of the statement  "            if (TrendingShowPages == null || LastRequest < DateTime.UtcNow.Subtract(new TimeSpan(0' TraktSettings.WebRequestCacheMinutes' 0))) " is 130.
Long Statement,TraktPlugin.GUI,GUITrendingShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,SendTrendingShowsToFacade,The length of the statement  "            var filteredTrendingList = GUICommon.FilterTrendingShows(trendingItems.Shows).Where(s => !string.IsNullOrEmpty(s.Show.Title)).ToList(); " is 135.
Long Statement,TraktPlugin.GUI,GUITrendingShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,SendTrendingShowsToFacade,The length of the statement  "            filteredTrendingList.Sort(new GUIListItemShowSorter(TraktSettings.SortByTrendingShows.Field' TraktSettings.SortByTrendingShows.Direction)); " is 139.
Long Statement,TraktPlugin.GUI,GUITrendingShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,SendTrendingShowsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' filteredTrendingList.Count()' filteredTrendingList.Count() > 1 ? Translation.SeriesPlural : Translation.Series)); " is 175.
Long Statement,TraktPlugin.GUI,GUITrendingShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,SendTrendingShowsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Trending.Description"' string.Format(Translation.TrendingTVShowsPeople' trendingItems.TotalWatchers.ToString()' trendingItems.TotalItems.ToString())); " is 179.
Long Statement,TraktPlugin.GUI,GUITrendingShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,PublishShowSkinProperties,The length of the statement  "            GUICommon.SetProperty("#Trakt.Show.Watchers.Extra"' trendingItem.Watchers > 1 ? string.Format(Translation.PeopleWatching' trendingItem.Watchers) : Translation.PersonWatching); " is 175.
Long Statement,TraktPlugin.GUI,GUIRateDialog,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,UpdateRating,The length of the statement  "            lblRatingAdvanced.Label = Rated == TraktRateValue.unrate ? GetRatingDescription() : string.Format("({0}) {1} / 10"' GetRatingDescription()' (int)Rated); " is 152.
Long Statement,TraktPlugin.GUI,GUITrendingMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,GetTrendingMovies,The length of the statement  "            if (TrendingMoviePages == null || LastRequest < DateTime.UtcNow.Subtract(new TimeSpan(0' TraktSettings.WebRequestCacheMinutes' 0))) " is 131.
Long Statement,TraktPlugin.GUI,GUITrendingMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,SendTrendingMoviesToFacade,The length of the statement  "            var filteredTrendingList = GUICommon.FilterTrendingMovies(trendingItems.Movies).Where(m => !string.IsNullOrEmpty(m.Movie.Title)).ToList(); " is 138.
Long Statement,TraktPlugin.GUI,GUITrendingMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,SendTrendingMoviesToFacade,The length of the statement  "            filteredTrendingList.Sort(new GUIListItemMovieSorter(TraktSettings.SortByTrendingMovies.Field' TraktSettings.SortByTrendingMovies.Direction)); " is 142.
Long Statement,TraktPlugin.GUI,GUITrendingMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,SendTrendingMoviesToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' filteredTrendingList.Count()' filteredTrendingList.Count() > 1 ? Translation.Movies : Translation.Movie)); " is 168.
Long Statement,TraktPlugin.GUI,GUITrendingMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,SendTrendingMoviesToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Trending.Description"' string.Format(Translation.TrendingMoviePeople' trendingItems.TotalWatchers.ToString()' trendingItems.TotalItems.ToString())); " is 177.
Long Statement,TraktPlugin.GUI,GUITrendingMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,PublishMovieSkinProperties,The length of the statement  "            GUICommon.SetProperty("#Trakt.Movie.Watchers.Extra"' trendingItem.Watchers > 1 ? string.Format(Translation.PeopleWatching' trendingItem.Watchers) : Translation.PersonWatching); " is 176.
Long Statement,TraktPlugin.GUI,GUITrendingMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnMovieSelected,The length of the statement  "            GUIImageHandler.LoadFanart(backdrop' TmdbCache.GetMovieBackdropFilename((item as GUIMovieListItem).Images.MovieImages)); " is 120.
Long Statement,TraktPlugin.GUI,GUIBackgroundTask,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBackgroundTask.cs,ExecuteTaskResultHandler,The length of the statement  "                            GUIUtils.ShowNotifyDialog(GUIUtils.PluginName()' string.Format("{0} {1}"' Translation.Timeout' _CurrentTaskDescription)); " is 121.
Long Statement,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,GetCalendarShows,The length of the statement  "                    result = TraktAPI.TraktAPI.GetCalendarUserSeasonPremieresShows(GetStartDate().ToString("yyyy-MM-dd")' GetDaysForward()); " is 120.
Long Statement,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,GetCalendarShowsFromCache,The length of the statement  "            if (TVShowCalendar == null || LastRequest < DateTime.UtcNow.Subtract(new TimeSpan(0' TraktSettings.WebRequestCacheMinutes' 0))) " is 127.
Long Statement,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,SendCalendarToFacade,The length of the statement  "                                AirDate = calendarItem.Episode.FirstAired == null ? null : calendarItem.Episode.FirstAired.FromISO8601().ToLocalTime().ToShortDateString() " is 138.
Long Statement,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,SendCalendarToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' itemCount.ToString()' itemCount > 1 ? Translation.Episodes : Translation.Episode)); " is 145.
Long Statement,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,OnEpisodeSelected,The length of the statement  "            GUIImageHandler.LoadFanart(backdrop' TmdbCache.GetShowBackdropFilename((item as GUIEpisodeListItem).Images.ShowImages)); " is 120.
Long Statement,TraktPlugin.GUI,GUIWindowExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIExtensions.cs,SelectIndex,The length of the statement  "            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_ITEM_SELECT' self.WindowId' 0' self.GetID' index' 0' null); " is 122.
Long Statement,TraktPlugin.GUI,GUIWindowExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIExtensions.cs,UpdateItemIfSelected,The length of the statement  "                    GUIWindowManager.SendThreadMessage(new GUIMessage(GUIMessage.MessageType.GUI_MSG_ITEM_SELECT' GUIWindowManager.ActiveWindow' 0' controlId' index' 0' null)); " is 156.
Long Statement,TraktPlugin.GUI,GUIImageHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,DrawOverlayOnPoster,The length of the statement  "            string mainOverlayImage = TraktHelper.GetThemedSkinFile(SkinThemeType.Image' string.Format("trakt{0}.png"' mainType.ToString().Replace("' "' string.Empty))); " is 157.
Long Statement,TraktPlugin.GUI,GUIImageHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,DrawOverlayOnPoster,The length of the statement  "            string ratingOverlayImage = TraktHelper.GetThemedSkinFile(SkinThemeType.Image' string.Format("trakt{0}.png"' Enum.GetName(typeof(RatingOverlayImage)' ratingType))); " is 164.
Long Statement,TraktPlugin.GUI,GUIImageHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,DrawOverlayOnEpisodeThumb,The length of the statement  "            string mainOverlayImage = TraktHelper.GetThemedSkinFile(SkinThemeType.Image' string.Format("trakt{0}.png"' mainType.ToString().Replace("' "' string.Empty))); " is 157.
Long Statement,TraktPlugin.GUI,GUIImageHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,DrawOverlayOnEpisodeThumb,The length of the statement  "            string ratingOverlayImage = TraktHelper.GetThemedSkinFile(SkinThemeType.Image' string.Format("trakt{0}.png"' Enum.GetName(typeof(RatingOverlayImage)' ratingType))); " is 164.
Long Statement,TraktPlugin.GUI,GUIImageHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,DrawOverlayOnEpisodeThumb,The length of the statement  "                gph.DrawImage(newThumb' TraktSkinSettings.EpisodeThumbRatingOverlayPosX' TraktSkinSettings.EpisodeThumbRatingOverlayPosY); " is 122.
Long Statement,TraktPlugin.GUI,GUIImageHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,DrawOverlayOnAvatar,The length of the statement  "            string ratingOverlayImage = TraktHelper.GetThemedSkinFile(SkinThemeType.Image' string.Format("trakt{0}.png"' Enum.GetName(typeof(RatingOverlayImage)' ratingType))); " is 164.
Long Statement,TraktPlugin.GUI,GUIWatchListMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListMovies.cs,SendWatchListMoviesToFacade,The length of the statement  "            sortedList.Sort(new GUIListItemMovieSorter(TraktSettings.SortByWatchListMovies.Field' TraktSettings.SortByWatchListMovies.Direction)); " is 134.
Long Statement,TraktPlugin.GUI,GUIWatchListMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListMovies.cs,SendWatchListMoviesToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' movieWatchlist.Count().ToString()' movieWatchlist.Count() > 1 ? Translation.Movies : Translation.Movie)); " is 167.
Long Statement,TraktPlugin.GUI,GUIWatchListShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListShows.cs,SendWatchListShowsToFacade,The length of the statement  "            sortedList.Sort(new GUIListItemShowSorter(TraktSettings.SortByWatchListShows.Field' TraktSettings.SortByWatchListShows.Direction)); " is 131.
Long Statement,TraktPlugin.GUI,GUIWatchListShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListShows.cs,SendWatchListShowsToFacade,The length of the statement  "            GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' sortedList.Count().ToString()' sortedList.Count() > 1 ? Translation.SeriesPlural : Translation.Series)); " is 166.
Long Statement,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowNotifyDialog,The length of the statement  "                            // Only if ID is 4 and we have our custom text and if button already has label (in case the skin "hides" the button by emptying the label) " is 138.
Long Statement,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowRateDialog,The length of the statement  "                ratingDlg.SetLine(1' string.Format("{0} - {1}x{2}"' item.Title' item.Seasons[0].Number' item.Seasons[0].Episodes[0].Number)); " is 125.
Long Statement,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowRateDialog,The length of the statement  "                ratingDlg.Rated = item.Seasons[0].Episodes[0].Rating == 0 ? TraktRateValue.seven : (TraktRateValue)Convert.ToInt32(item.Seasons[0].Episodes[0].Rating); " is 151.
Long Statement,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowRateDialog,The length of the statement  "                ratingDlg.Rated = item.Seasons[0].Rating == 0 ? TraktRateValue.seven : (TraktRateValue)Convert.ToInt32(item.Seasons[0].Rating); " is 127.
Long Statement,TraktPlugin.Extensions,DateExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\DateExtensions.cs,ToPrettyTime,The length of the statement  "                return string.Format("{0} day{1}' {2} hour{3} and {4} minute{5}"' span.Days' span.Days > 1 ? "s" : ""' span.Hours' span.Hours != 1 ? "s" : ""' span.Minutes' span.Minutes != 1 ? "s" : ""); " is 187.
Long Statement,TraktPlugin.Extensions,DateExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\DateExtensions.cs,ToPrettyTime,The length of the statement  "                return string.Format("{0} hour{1}' {2} minute{3} and {4} second{5}"' span.Hours' span.Hours > 1 ? "s" : ""' span.Minutes' span.Minutes != 1 ? "s" : ""' span.Seconds' span.Seconds != 1 ? "s" : ""); " is 196.
Long Statement,TraktPlugin.Extensions,DateExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\DateExtensions.cs,ToPrettyTime,The length of the statement  "                return string.Format("{0} minute{1} and {2} second{3}"' span.Minutes' span.Minutes > 1 ? "s" : ""' span.Seconds' span.Seconds != 1 ? "s" : ""); " is 143.
Long Statement,TraktPlugin.Extensions,StringExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The length of the statement  "            // for now' this allows better usage of clipping. This can be removed' once the skin engine can properly render unicode without falling back to sprites " is 151.
Long Statement,TraktPlugin.Extensions,StringExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The length of the statement  "            // as unicode is more widely used' this will hit us more with existing font rendering only allowing cached font textures with clipping " is 134.
Long Statement,TraktPlugin.TmdbAPI,TmdbAPI,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TmdbAPI\TmdbAPI.cs,GetFromTmdb,The length of the statement  "                    errorMessage = string.Format("Protocol Error' Code = '{0}'' Description = '{1}'' Url = '{2}'' Headers = '{3}'"' (int)response.StatusCode' response.StatusDescription' address' headers.TrimEnd(new char[] { '''' ' ' })); " is 217.
Long Statement,TraktPlugin.TmdbAPI,TmdbAPI,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TmdbAPI\TmdbAPI.cs,GetFromTmdb,The length of the statement  "                        errorMessage = string.Format("Request Rate Limiting is in effect' retrying request in {0} seconds. Url = '{1}'"' retry' address); " is 129.
Long Statement,TraktPlugin.TmdbAPI,TmdbAPI,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TmdbAPI\TmdbAPI.cs,GetFromTmdb,The length of the statement  "                string errorMessage = string.Format("Request failed due to an IO error' Description = '{0}'' Url = '{1}'' Method = 'GET'"' ioe.Message' address); " is 145.
Long Statement,TraktPlugin.TraktHandlers,ArgusTVRecordings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusRecordings.cs,Scrobble,The length of the statement  "            TraktLogger.Info("Current program details. Title='{0}'' Year='{1}'' Season='{2}'' Episode='{3}'' StartTime='{4}'' Runtime='{5}'"' CurrentRecording.Title' CurrentRecording.Year.ToLogString()' CurrentRecording.SeasonIdx.ToLogString()' CurrentRecording.EpisodeIdx.ToLogString()' CurrentRecording.StartTime == null ? "<empty>" : CurrentRecording.StartTime.ToString()' CurrentRecording.Runtime); " is 390.
Long Statement,TraktPlugin.TraktHandlers,ArgusTVRecordings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusRecordings.cs,StopScrobble,The length of the statement  "            TraktLogger.Info("Video recording has stopped' checking progress. Title = '{0}'' Current Position = '{1}'' Duration = '{2}'' Progress = '{3}%'"' " is 144.
Long Statement,TraktPlugin.TraktHandlers,ArgusTVRecordings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusRecordings.cs,StopScrobble,The length of the statement  "                               CurrentRecording.Title' g_Player.CurrentPosition.ToString()' g_Player.Duration.ToString()' progress > 100.0 ? "100" : progress.ToString()); " is 139.
Long Statement,TraktPlugin.TraktHandlers,ArgusTVLive,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusTVLive.cs,Scrobble,The length of the statement  "                        TraktLogger.Info("Detected new tv program has started. Previous Program =  '{0}'' New Program = '{1}'"' CurrentProgram.ToString()' videoInfo.ToString()); " is 153.
Long Statement,TraktPlugin.TraktHandlers,ArgusTVLive,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusTVLive.cs,GetCurrentProgram,The length of the statement  "                TraktLogger.Info("Current program details. Title='{0}'' Year='{1}'' Season='{2}'' Episode='{3}'' StartTime='{4}'' Runtime='{5}'"' videoInfo.Title' videoInfo.Year.ToLogString()' videoInfo.SeasonIdx.ToLogString()' videoInfo.EpisodeIdx.ToLogString()' videoInfo.StartTime == null ? "<empty>" : videoInfo.StartTime.ToString()' videoInfo.Runtime); " is 341.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                collectedMovies.RemoveAll(m => TraktSettings.BlockedFolders.Any(f => m.File.ToLowerInvariant().Contains(f.ToLowerInvariant()))); " is 128.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                //    // allow movies to re-sync again after 7-days in the case user has addressed issue ie. edited movie or added to themoviedb.org " is 132.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                //            TraktLogger.Info("Skipping {0} movies due to invalid data or movies don't exist on http://themoviedb.org. Next check will be {1}."' TraktSettings.SkippedMovies.Movies.Count' TraktSettings.SkippedMovies.LastSkippedSync.FromEpoch().Add(new TimeSpan(7' 0' 0' 0))); " is 275.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                //                TraktLogger.Info("Skipping movie' Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 126.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                //                MovieList.RemoveAll(m => (m.Title == movie.Title) && (m.Year.ToString() == movie.Year) && (m.IMDBNumber == movie.IMDBID)); " is 140.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                // we need to fallback to title matching. When we sync aka names are sometimes accepted if defined on themoviedb.org so we need to  " is 130.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                //if (TraktSettings.AlreadyExistMovies != null && TraktSettings.AlreadyExistMovies.Movies != null && TraktSettings.AlreadyExistMovies.Movies.Count > 0) " is 151.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                //    TraktLogger.Debug("Skipping {0} movies as they already exist in trakt library but failed local match previously."' TraktSettings.AlreadyExistMovies.Movies.Count.ToString()); " is 179.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                //        Predicate<MFMovie> criteria = m => (m.Title == movie.Title) && (m.Year.ToString() == movie.Year) && (m.IMDBNumber == movie.IMDBID); " is 141.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                //            TraktLogger.Debug("Skipping movie' Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 123.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                //                TraktLogger.Debug("Removing 'AlreadyExists' movie' Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 143.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                        TraktLogger.Info("Marking movie as unwatched in local database' movie is not watched on trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' " is 161.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                                          movie.Title' movie.Year.HasValue ? movie.Year.ToString() : "<empty>"' movie.Ids.Imdb ?? "<empty>"' movie.Ids.Tmdb.HasValue ? movie.Ids.Tmdb.ToString() : "<empty>"); " is 164.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                            TraktLogger.Info("Updating local movie watched state / play count to match trakt.tv. Plays = '{0}'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' " is 163.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                                              twm.Plays' twm.Movie.Title' twm.Movie.Year.HasValue ? twm.Movie.Year.ToString() : "<empty>"' twm.Movie.Ids.Imdb ?? "<empty>"' twm.Movie.Ids.Tmdb.HasValue ? twm.Movie.Ids.Tmdb.ToString() : "<empty>"); " is 199.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                            pagedMovies.ForEach(s => TraktLogger.Info("Adding movie to trakt.tv watched history. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Watched = '{4}'"' " is 170.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                                                                             s.Title' s.Year.HasValue ? s.Year.ToString() : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString() : "<empty>"' s.WatchedAt)); " is 154.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                            pagedMovies.ForEach(s => TraktLogger.Info("Adding movie to trakt.tv collection. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Added = '{4}'' MediaType = '{5}'' Resolution = '{6}'' Audio Codec = '{7}'' Audio Channels = '{8}'"' " is 247.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                                                                        s.Title' s.Year.HasValue ? s.Year.ToString() : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString() : "<empty>"' " is 139.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                                                                        s.CollectedAt' s.MediaType ?? "<empty>"' s.Resolution ?? "<empty>"' s.AudioCodec ?? "<empty>"' s.AudioChannels ?? "<empty>")); " is 126.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                            pagedMovies.ForEach(a => TraktLogger.Info("Adding movie to trakt.tv ratings. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Rating = '{4}/10'"' " is 159.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                                                                        a.Title' a.Year.HasValue ? a.Year.ToString() : "<empty>"' a.Ids.Imdb ?? "<empty>"' a.Ids.Tmdb.HasValue ? a.Ids.Tmdb.ToString() : "<empty>"' a.Rating)); " is 151.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                        int currentRating = Convert.ToInt32(Math.Round(Convert.ToDecimal(localMovie.RatingUser)' MidpointRounding.AwayFromZero)); " is 121.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                            TraktLogger.Info("Adding movie rating to match trakt.tv. Rated = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' " is 138.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                                              trm.Rating' trm.Movie.Title' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString() : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString() : "<empty>"); " is 200.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                            pagedMovies.ForEach(s => TraktLogger.Info("Removing movie from trakt.tv collection' movie no longer exists locally. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' " is 179.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                                                                        s.Title' s.Year.HasValue ? s.Year.ToString() : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString() : "<empty>")); " is 141.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                TraktLogger.Info("Found {0} trakt-categorised movies available in My Films database"' categoryTraktList.Count.ToString()); " is 122.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                        TraktLogger.Debug("Processing trakt watchlist movie. Title = '{0}'' Year = '{1}' = IMDb ID '{2}'' TMDb ID = '{3}'"' trm.Movie.Title ?? "<empty>"' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString() : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString() : "<empty>"); " is 317.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                                TraktLogger.Info("Inserting trakt category for movie. Category = '{0}'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' category' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 233.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                        TraktLogger.Info("Removing trakt category for movie. Category = '{0}'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' category' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 232.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                        TraktLogger.Info("Processing trakt user list. Name = '{0}'' Tag = '{1}'' Items = '{2}'"' list.Key.Name' userListName' list.Value.Count); " is 136.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                            TraktLogger.Debug("Processing trakt user list movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' trm.Movie.Title ?? "null"' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString() : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString() : "<empty>"); " is 315.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                                    TraktLogger.Info("Inserting trakt user list for movie. Category = '{0}'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' userListName' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 238.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                            TraktLogger.Info("Removing trakt user list for movie. Category = '{0}'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' userListName' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 237.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                        TraktLogger.Debug("Processing trakt recommendations movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' trm.Title ?? "<empty>"' trm.Year.HasValue ? trm.Year.ToString() : "<empty>"' trm.Ids.Imdb ?? "<empty>"' trm.Ids.Tmdb.HasValue ? trm.Ids.Tmdb.ToString() : "<empty>"); " is 288.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                                TraktLogger.Info("Inserting trakt category for movie. Category = '{0}'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' category' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 233.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "                        TraktLogger.Info("Removing trakt category for movie. Category = '{0}'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' category' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 232.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,Scrobble,The length of the statement  "                TraktLogger.Info("Sending start scrobble of movie to trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' tScrobbleData.Movie.Title' tScrobbleData.Movie.Year' tScrobbleData.Movie.Ids.Imdb ?? "<empty>"' tScrobbleData.Movie.Ids.Tmdb.HasValue ? tScrobbleData.Movie.Ids.Tmdb.ToString() : "<empty>"); " is 316.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnStartedMovie,The length of the statement  "            if (!TraktSettings.BlockedFilenames.Contains(movie.File) && !TraktSettings.BlockedFolders.Any(f => movie.File.ToLowerInvariant().Contains(f.ToLowerInvariant()))) " is 161.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnStartedMovie,The length of the statement  "                TraktLogger.Info("Starting My Films movie playback. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 203.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnStoppedMovie,The length of the statement  "            if (!TraktSettings.BlockedFilenames.Contains(movie.File) && !TraktSettings.BlockedFolders.Any(f => movie.File.ToLowerInvariant().Contains(f.ToLowerInvariant()))) " is 161.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnStoppedMovie,The length of the statement  "                TraktLogger.Info("Stopped My Films movie playback. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 202.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnWatchedMovie,The length of the statement  "            if (!TraktSettings.BlockedFilenames.Contains(movie.File) && !TraktSettings.BlockedFolders.Any(f => movie.File.ToLowerInvariant().Contains(f.ToLowerInvariant()))) " is 161.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnWatchedMovie,The length of the statement  "                TraktLogger.Info("My Films movie considered watched. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 204.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnRateItem,The length of the statement  "            TraktLogger.Info("Received rating event from MyFilms. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 205.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnRateItem,The length of the statement  "            if (TraktSettings.BlockedFilenames.Contains(movie.File) || TraktSettings.BlockedFolders.Any(f => movie.File.ToLowerInvariant().Contains(f.ToLowerInvariant()))) " is 159.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnToggleWatched,The length of the statement  "            TraktLogger.Info("Received togglewatched event from My Films. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 213.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnToggleWatched,The length of the statement  "            if (TraktSettings.BlockedFilenames.Contains(movie.File) || TraktSettings.BlockedFolders.Any(f => movie.File.ToLowerInvariant().Contains(f.ToLowerInvariant()))) " is 159.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,FindMovie,The length of the statement  "            MFMovie movie = movies.Find(m => BasicHandler.GetProperImdbId(m.IMDBNumber) == imdbid || (string.Compare(m.Title' title' true) == 0 && m.Year == year)); " is 152.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,FindMovie,The length of the statement  "            MFMovie movie = movies.Find(m => BasicHandler.GetProperImdbId(m.IMDBNumber) == imdbid || (string.Compare(m.Title' title' true) == 0 && m.Year == year)); " is 152.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,MovieMatch,The length of the statement  "            if (!string.IsNullOrEmpty(traktMovie.Ids.Imdb) && !string.IsNullOrEmpty(BasicHandler.GetProperImdbId(mfMovie.IMDBNumber))) " is 122.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,MovieMatch,The length of the statement  "            return string.Compare(mfMovie.Title' traktMovie.Title' true) == 0 && mfMovie.Year.ToString() == traktMovie.Year.ToString(); " is 123.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,ShowRateDialog,The length of the statement  "            TraktLogger.Debug("Showing rate dialog for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 201.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,RemoveMovieFromRecommendations,The length of the statement  "                TraktLogger.Info("Removing movie from trakt reommendations. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 211.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,RemoveMovieFromWatchlist,The length of the statement  "                TraktLogger.Info("Removing movie from trakt watchlist. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 206.
Long Statement,TraktPlugin.TraktHandlers,MyTVLive,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVLive.cs,Scrobble,The length of the statement  "                        TraktLogger.Info("Detected new tv program has started. Previous Program = '{0}'' New Program = '{1}'"' CurrentProgram.ToString()' videoInfo.ToString()); " is 152.
Long Statement,TraktPlugin.TraktHandlers,MyTVLive,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVLive.cs,GetCurrentProgram,The length of the statement  "                    Type = !string.IsNullOrEmpty(program.EpisodeNum) || !string.IsNullOrEmpty(program.SeriesNum) ? VideoType.Series : VideoType.Movie' " is 130.
Long Statement,TraktPlugin.TraktHandlers,MyTVLive,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVLive.cs,GetCurrentProgram,The length of the statement  "                TraktLogger.Info("Current program details. Title='{0}'' Year='{1}'' Season='{2}'' Episode='{3}'' StartTime='{4}'' Runtime='{5}'"' videoInfo.Title' videoInfo.Year.ToLogString()' videoInfo.SeasonIdx.ToLogString()' videoInfo.EpisodeIdx.ToLogString()' videoInfo.StartTime == null ? "<empty>" : videoInfo.StartTime.ToString()' videoInfo.Runtime); " is 341.
Long Statement,TraktPlugin.TraktHandlers,MyTVRecordings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVRecordings.cs,Scrobble,The length of the statement  "                Type = !string.IsNullOrEmpty(recording.EpisodeNum) || !string.IsNullOrEmpty(recording.SeriesNum) ? VideoType.Series : VideoType.Movie' " is 134.
Long Statement,TraktPlugin.TraktHandlers,MyTVRecordings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVRecordings.cs,Scrobble,The length of the statement  "            TraktLogger.Info("Current program details. Title='{0}'' Year='{1}'' Season='{2}'' Episode='{3}'' StartTime='{4}'' Runtime='{5}'"' CurrentRecording.Title' CurrentRecording.Year.ToLogString()' CurrentRecording.SeasonIdx.ToLogString()' CurrentRecording.EpisodeIdx.ToLogString()' CurrentRecording.StartTime == null ? "<empty>" : CurrentRecording.StartTime.ToString()' CurrentRecording.Runtime); " is 390.
Long Statement,TraktPlugin.TraktHandlers,MyTVRecordings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVRecordings.cs,StopScrobble,The length of the statement  "            TraktLogger.Info("Video recording has stopped' checking progress. Title = '{0}'' Current Position = '{1}'' Duration = '{2}'' Progress = '{3}%'"' " is 144.
Long Statement,TraktPlugin.TraktHandlers,MyTVRecordings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVRecordings.cs,StopScrobble,The length of the statement  "                               CurrentRecording.Title' g_Player.CurrentPosition.ToString()' g_Player.Duration.ToString()' progress > 100.0 ? "100" : progress.ToString());             " is 139.
Long Statement,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,Scrobble,The length of the statement  "                TraktLogger.Info("Detected tv series playing in OnlineVideos. Title = '{0} - {1}x{2}'' Year = '{3}'' IMDb ID = '{4}'' TMDb ID = '{5}'' TVDb ID = '{6}'"' CurrentVideo.Title' CurrentVideo.Season' CurrentVideo.Episode' CurrentVideo.Year == 0 ? "<empty>" : CurrentVideo.Year.ToString()' CurrentVideo.ID_IMDB.ToLogString()' CurrentVideo.ID_TMDB.ToLogString()' CurrentVideo.ID_TVDB.ToLogString()); " is 391.
Long Statement,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,Scrobble,The length of the statement  "                TraktLogger.Info("Detected movie playing in OnlineVideos. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' CurrentVideo.Title' CurrentVideo.Year' CurrentVideo.ID_IMDB.ToLogString()' CurrentVideo.ID_TMDB.ToLogString()); " is 233.
Long Statement,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The length of the statement  "                        TraktLogger.Info("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round(progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition); " is 228.
Long Statement,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The length of the statement  "                    TraktLogger.Info("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round(percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString()' info.ID_IMDB.ToLogString()' info.ID_TMDB.ToLogString()' info.ID_TVDB.ToLogString()); " is 395.
Long Statement,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The length of the statement  "                    TraktLogger.Info("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round(percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString()' info.ID_TMDB.ToLogString()); " is 271.
Long Statement,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,CreateEpisodeScrobbleData,The length of the statement  "                    Ids = new TraktShowId { Imdb = info.ID_IMDB' Tmdb = info.ID_TMDB.ToNullableInt32()' Tvdb = info.ID_TVDB.ToNullableInt32() }' " is 124.
Long Statement,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,ShowRateDialog,The length of the statement  "                    TraktLogger.Info("Showing rate dialog for episode. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Season = '{4}'' Episode = '{5}'"' itemToRate.Title' itemToRate.Year == 0 ? "<empty>" : itemToRate.Year.ToString()' itemToRate.ID_IMDB.ToLogString()' itemToRate.ID_TMDB.ToLogString()' itemToRate.Episode' itemToRate.Season); " is 336.
Long Statement,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,ShowRateDialog,The length of the statement  "                    TraktLogger.Info("Showing rate dialog for movie. Title = '{0}'' Year = '{1}'' IMDb Id = '{2}'' TMDb ID = '{3}'"' itemToRate.Title' itemToRate.Year' itemToRate.ID_IMDB.ToLogString()' itemToRate.ID_TMDB.ToLogString()); " is 216.
Long Statement,TraktPlugin.TraktHandlers,BasicHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,InsertSkippedMovies,The length of the statement  "            //    TraktLogger.Info("Inserting movie into skipped movie list: Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 139.
Long Statement,TraktPlugin.TraktHandlers,BasicHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,InsertAlreadyExistMovies,The length of the statement  "            //    TraktLogger.Info("Inserting movie into already-exist list: Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 139.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "            collectedMovies.RemoveAll(m => TraktSettings.BlockedFolders.Any(f => m.LocalMedia[0].FullPath.ToLowerInvariant().Contains(f.ToLowerInvariant()))); " is 146.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "            //    // allow movies to re-sync again after 7-days in the case user has addressed issue ie. edited movie or added to themoviedb.org " is 132.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "            //            TraktLogger.Info("Skipping {0} movies due to invalid data or movies don't exist on http://themoviedb.org. Next check will be {1}"' TraktSettings.SkippedMovies.Movies.Count' TraktSettings.SkippedMovies.LastSkippedSync.FromEpoch().Add(new TimeSpan(7' 0' 0' 0))); " is 274.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "            //                TraktLogger.Info("Skipping movie' Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 126.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "            //                collectedMovies.RemoveAll(m => (m.Title == movie.Title) && (m.Year.ToString() == movie.Year) && (m.ImdbID == movie.IMDBID)); " is 142.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "            // we need to fallback to title matching. When we sync aka names' they're sometimes accepted if defined on themoviedb.org so we need to  " is 135.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "            //if (TraktSettings.AlreadyExistMovies != null && TraktSettings.AlreadyExistMovies.Movies != null && TraktSettings.AlreadyExistMovies.Movies.Count > 0) " is 151.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "            //    TraktLogger.Debug("Skipping {0} movies as they already exist in trakt library but failed local match previously"' TraktSettings.AlreadyExistMovies.Movies.Count.ToString()); " is 178.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "            //        Predicate<DBMovieInfo> criteria = m => (m.Title == movie.Title) && (m.Year.ToString() == movie.Year) && (m.ImdbID == movie.IMDBID); " is 141.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "            //            TraktLogger.Debug("Skipping movie' Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 123.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "            //                TraktLogger.Debug("Removing 'AlreadyExists' movie' Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 143.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "                var ratedMovies = collectedMovies.Where(m => (AdvancedRatings && HasAdvancedRating(m)) || m.ActiveUserSettings.UserRating.GetValueOrDefault(0) > 0).ToList(); " is 157.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "                        TraktLogger.Info("Marking movie as unwatched in local database' movie is not watched on trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' " is 161.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "                                          movie.Title' movie.Year.HasValue ? movie.Year.ToString() : "<empty>"' movie.Ids.Imdb ?? "<empty>"' movie.Ids.Tmdb.HasValue ? movie.Ids.Tmdb.ToString() : "<empty>" ); " is 165.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "                            TraktLogger.Info("Updating local movie watched state / play count to match trakt.tv. Plays = '{0}'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' " is 163.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "                                              twm.Plays' twm.Movie.Title' twm.Movie.Year.HasValue ? twm.Movie.Year.ToString() : "<empty>"' twm.Movie.Ids.Imdb ?? "<empty>"' twm.Movie.Ids.Tmdb.HasValue ? twm.Movie.Ids.Tmdb.ToString() : "<empty>"); " is 199.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "                            pagedMovies.ForEach(s => TraktLogger.Info("Adding movie to trakt.tv watched history. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Watched = '{4}'"' " is 170.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "                                                                             s.Title' s.Year.HasValue ? s.Year.ToString() : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString() : "<empty>"' s.WatchedAt)); " is 154.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "                            pagedMovies.ForEach(s => TraktLogger.Info("Adding movie to trakt.tv collection. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Added = '{4}'' MediaType = '{5}'' Resolution = '{6}'' Audio Codec = '{7}'' Audio Channels = '{8}'"' " is 247.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "                                                                        s.Title' s.Year.HasValue ? s.Year.ToString() : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString() : "<empty>"' " is 139.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "                                                                        s.CollectedAt' s.MediaType ?? "<empty>"' s.Resolution ?? "<empty>"' s.AudioCodec ?? "<empty>"' s.AudioChannels ?? "<empty>")); " is 126.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "                            pagedMovies.ForEach(a => TraktLogger.Info("Adding movie to trakt.tv ratings. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Rating = '{4}/10'"' " is 159.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "                                                                        a.Title' a.Year.HasValue ? a.Year.ToString() : "<empty>"' a.Ids.Imdb ?? "<empty>"' a.Ids.Tmdb.HasValue ? a.Ids.Tmdb.ToString() : "<empty>"' a.Rating)); " is 151.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "                                TraktLogger.Info("Adding movie rating to match trakt.tv. Rated = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' " is 138.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "                                                  trm.Rating' trm.Movie.Title' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString() : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString() : "<empty>"); " is 200.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "                                TraktLogger.Info("Adding movie rating to match trakt.tv. Rated = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' " is 138.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "                                                  trm.Rating' trm.Movie.Title' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString() : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString() : "<empty>"); " is 200.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "                            pagedMovies.ForEach(s => TraktLogger.Info("Removing movie from trakt.tv collection' movie no longer exists locally. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' " is 179.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "                                                                        s.Title' s.Year.HasValue ? s.Year.ToString() : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString() : "<empty>")); " is 141.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,Scrobble,The length of the statement  "                if (VideoUtility.GetVideoFormat(filename) == VideoFormat.DVD || VideoUtility.GetVideoFormat(filename) == VideoFormat.Bluray) " is 124.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,Scrobble,The length of the statement  "                        TraktLogger.Info("Not enough information from MediaPortal play skin properties to get a movie match' missing Title and/or Year!"); " is 130.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,Scrobble,The length of the statement  "                        TraktLogger.Info("Could not find movie in MovingPictures library. Filename = '{0}'' Title = '{1}'' Year = '{2}'"' filename' title' year); " is 137.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,StopScrobble,The length of the statement  "                    TraktLogger.Info("DVD/Bluray stopped' checking if considered watched. Movie: '{0}'' Current Position: '{1}'' Duration: '{2}'"' currentMovie.Title' g_Player.CurrentPosition' g_Player.Duration); " is 192.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,The length of the statement  "            TraktLogger.Info("Found {0} movies on trakt.tv with resume data' processing paused movies after {1}"' playbackData.Where(p => p.Type == "movie").Count()' lastPausedAtMovie); " is 173.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,The length of the statement  "                var movie = DBMovieInfo.GetAll().FirstOrDefault(m => ((m.ImdbID == item.Movie.Ids.Imdb) && !string.IsNullOrEmpty(item.Movie.Ids.Imdb)) || " is 137.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,The length of the statement  "                    TraktLogger.Warning("Skipping item with invalid runtime in database. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb); " is 172.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,The length of the statement  "                if (TraktSettings.BlockedFilenames.Any(f => f == filename) || TraktSettings.BlockedFolders.Any(f => f == Path.GetDirectoryName(filename))) " is 138.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,The length of the statement  "                    TraktLogger.Info("Ignoring resume data sync for movie' filename/folder is ignored by user. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' Filename = '{3}'"' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb' filename); " is 222.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,The length of the statement  "                var resumeData = Convert.ToInt32((movie.LocalMedia.First().Duration / 1000.0) * (item.Progress / 100.0)) - TraktSettings.SyncResumeDelta; " is 137.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,The length of the statement  "                    TraktLogger.Info("Setting resume time '{0}' for movie. Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'"' new TimeSpan(0' 0' 0' resumeData)' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb); " is 193.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,StartMovieScrobble,The length of the statement  "                TraktLogger.Info("Sending start scrobble of movie to trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' scrobbleMovie.Title' scrobbleMovie.Year' scrobbleMovie.ImdbID ?? "<empty>"' GetTmdbID(scrobbleMovie) ?? "<empty>"); " is 242.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,StopMovieScrobble,The length of the statement  "                    TraktLogger.Info("Sending 'stop' scrobble of movie to trakt.tv. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' scrobbleData.Progress' scrobbleMovie.Title' movie.Year' scrobbleMovie.ImdbID ?? "<empty>"' GetTmdbID(scrobbleMovie) ?? "<empty>"); " is 277.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,StopMovieScrobble,The length of the statement  "                    TraktLogger.Info("Sending 'pause' scrobble of movie to trakt.tv. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' scrobbleData.Progress' scrobbleMovie.Title' movie.Year' scrobbleMovie.ImdbID ?? "<empty>"' GetTmdbID(scrobbleMovie) ?? "<empty>"); " is 278.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectDeleted,The length of the statement  "                TraktLogger.Info("Removing movie from trakt.tv collection' Title = '{0}'' Year = '{1}'' IMDB ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID(movie) ?? "<empty>"); " is 206.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectUpdatedEx,The length of the statement  "            if (TraktSettings.BlockedFilenames.Contains(movie.LocalMedia[0].FullPath) || TraktSettings.BlockedFolders.Any(f => movie.LocalMedia[0].FullPath.ToLowerInvariant().Contains(f.ToLowerInvariant()))) " is 195.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectUpdatedEx,The length of the statement  "                TraktLogger.Info("Movie is on the blocked list so we didn't update trakt.tv. Title = '{0}'' Year = '{1}'' IMDB ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID(movie) ?? "<empty>"); " is 224.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectUpdatedEx,The length of the statement  "                    TraktLogger.Info("Received Un-Watched event in MovingPictures for movie. Title = '{0}'' Year = '{1}'' IMDB ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID(movie) ?? "<empty>"); " is 220.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectUpdatedEx,The length of the statement  "                    TraktLogger.Info("Received Watched event in MovingPictures for movie. Title = '{0}'' Year = '{1}'' IMDB ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID(movie) ?? "<empty>"); " is 217.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectUpdatedEx,The length of the statement  "                TraktLogger.Info("Received Rate event in MovingPictures for movie. Rating = '{0}/5'' Title = '{1}'' Year = '{2}'' IMDB ID = '{3}'' TMDb ID = '{4}'"' userMovieSettings.UserRating' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID(movie) ?? "<empty>"); " is 262.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectInserted,The length of the statement  "                if (!TraktSettings.BlockedFilenames.Contains(watchedEvent.Movie.LocalMedia[0].FullPath) && !TraktSettings.BlockedFolders.Any(f => watchedEvent.Movie.LocalMedia[0].FullPath.ToLowerInvariant().Contains(f.ToLowerInvariant()))) " is 223.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectInserted,The length of the statement  "                    TraktLogger.Info("Watched History updated in MovingPictures. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' watchedEvent.Movie.Title' watchedEvent.Movie.Year' watchedEvent.Movie.ImdbID ?? "<empty>"' GetTmdbID(watchedEvent.Movie) ?? "<empty>"); " is 260.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectInserted,The length of the statement  "                    TraktLogger.Info("Movie was blocked and not added to watched history on trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' watchedEvent.Movie.Title' watchedEvent.Movie.Year' watchedEvent.Movie.ImdbID ?? "<empty>"' GetTmdbID(watchedEvent.Movie) ?? "<empty>"); " is 281.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectInserted,The length of the statement  "                if (!TraktSettings.BlockedFilenames.Contains(insertedMovie.LocalMedia[0].FullPath) && !TraktSettings.BlockedFolders.Any(f => insertedMovie.LocalMedia[0].FullPath.ToLowerInvariant().Contains(f.ToLowerInvariant()))) " is 213.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectInserted,The length of the statement  "                        TraktLogger.Info("New movie added into MovingPictures' adding to trakt.tv collection. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Added = '{4}'' MediaType = '{5}'' Resolution = '{6}'' Audio Codec = '{7}'' Audio Channels = '{8}'"' " is 253.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectInserted,The length of the statement  "                                            traktMovie.Title' traktMovie.Year.HasValue ? traktMovie.Year.ToString() : "<empty>"' traktMovie.Ids.Imdb ?? "<empty>"' traktMovie.Ids.Tmdb.HasValue ? traktMovie.Ids.Tmdb.ToString() : "<empty>"' " is 193.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectInserted,The length of the statement  "                                            traktMovie.CollectedAt' traktMovie.MediaType ?? "<empty>"' traktMovie.Resolution ?? "<empty>"' traktMovie.AudioCodec ?? "<empty>"' traktMovie.AudioChannels ?? "<empty>"); " is 170.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectInserted,The length of the statement  "                    TraktLogger.Info("Movie was blocked and not added to collection on trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' insertedMovie.Title' insertedMovie.Year' insertedMovie.ImdbID ?? "<empty>"' GetTmdbID(insertedMovie) ?? "<empty>"); " is 256.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetFirstWatchedDate,The length of the statement  "                    TraktLogger.Error("Failed to get first watched date from watched movie. Title = '{0}'' Year = '{1}'' Error = '{2}'"' movie.Title' movie.Year' e.Message); " is 153.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,MovieMatch,The length of the statement  "            if (!string.IsNullOrEmpty(traktMovie.Ids.Imdb) && !string.IsNullOrEmpty(BasicHandler.GetProperImdbId(movPicsMovie.ImdbID))) " is 123.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,MovieMatch,The length of the statement  "            return string.Compare(movPicsMovie.Title' traktMovie.Title' true) == 0 && movPicsMovie.Year.ToString() == traktMovie.Year.ToString(); " is 133.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The length of the statement  "                TraktLogger.Info("Showing rate dialog for movie. Title = '{0}'' Year = '{1}'' IMDB ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID(movie) ?? "<empty>"); " is 196.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The length of the statement  "                    TraktLogger.Info("Applying rating for movie. Rating = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDB ID = '{3}'' TMDb ID = '{4}'"' rating'  movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID(movie) ?? "<empty>"); " is 220.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The length of the statement  "                            GUICommon.SetProperty("#MovingPictures.UserMovieSettings.user_rating"' movieToRate.ActiveUserSettings.UserRating.ToString()); " is 125.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The length of the statement  "                            GUICommon.SetProperty("#MovingPictures.UserMovieSettings.10point_user_rating"' (movieToRate.ActiveUserSettings.UserRating * 2).ToString()); " is 139.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The length of the statement  "                    TraktLogger.Info("Removing rating for movie. Title = '{0}'' Year = '{1}'' IMDB ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID(movie) ?? "<empty>"); " is 192.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DisposeEvents,The length of the statement  "            MovingPicturesCore.DatabaseManager.ObjectInserted -= new DatabaseManager.ObjectAffectedDelegate(DatabaseManager_ObjectInserted); " is 128.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DisposeEvents,The length of the statement  "            MovingPicturesCore.DatabaseManager.ObjectUpdatedEx -= new DatabaseManager.ObjectUpdatedDelegate(DatabaseManager_ObjectUpdatedEx); " is 129.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DisposeEvents,The length of the statement  "            MovingPicturesCore.DatabaseManager.ObjectDeleted -= new DatabaseManager.ObjectAffectedDelegate(DatabaseManager_ObjectDeleted); " is 126.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,FindMovieID,The length of the statement  "                TraktLogger.Info("Found no movies for search criteria. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' title' year' imdbid.ToLogString()' tmdbid.ToLogString()); " is 176.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,RemoveNode,The length of the statement  "                TraktLogger.Error("Failed to remove node from MovingPictures' ParentNode='{0}'' Name='{1}'' Error='{2}'"' rootNode' name' ex.Message); " is 134.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,RemoveMovieCriteriaFromCustomlistNode,The length of the statement  "                TraktLogger.Debug("Removing movie from the custom list in the categories menu. Node = '{0}'' Criteria = '{1}'"' listName' movieId); " is 131.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,RemoveMovieCriteriaFromCustomlistNode,The length of the statement  "                TraktLogger.Debug("Removing movie from the custom list in the filters menu. Node = '{0}'' Criteria = '{1}'"' listName' movieId); " is 128.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,UpdateCategoriesMenu,The length of the statement  "                    TraktLogger.Info("Adding custom list from trakt.tv to the categories menu. Name = '{0}' Total Movie Items = '{1}'"' listName' listItems.Where(i => i.Movie != null).Count()); " is 173.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,UpdateFiltersMenu,The length of the statement  "                    TraktLogger.Info("Adding custom list from trakt.tv to the filters menu. Name = '{0}' Total Movie Items = '{1}'"' listName' listItems.Where(i => i.Movie != null).Count()); " is 170.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                collectedMovies.RemoveAll(m => TraktSettings.BlockedFolders.Any(f => m.Path.ToLowerInvariant().Contains(f.ToLowerInvariant()))); " is 128.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                //    // allow movies to re-sync again after 7-days in the case user has addressed issue ie. edited movie or added to themoviedb.org " is 132.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                //            TraktLogger.Info("Skipping {0} movies due to invalid data or movies don't exist on http://themoviedb.org. Next check will be {1}."' TraktSettings.SkippedMovies.Movies.Count' TraktSettings.SkippedMovies.LastSkippedSync.FromEpoch().Add(new TimeSpan(7' 0' 0' 0))); " is 275.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                //                TraktLogger.Info("Skipping movie' Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 126.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                //                MovieList.RemoveAll(m => (m.Title == movie.Title) && (m.Year.ToString() == movie.Year) && (m.IMDBNumber == movie.IMDBID)); " is 140.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                // we need to fallback to title matching. When we sync aka names are sometimes accepted if defined on themoviedb.org so we need to  " is 130.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                //if (TraktSettings.AlreadyExistMovies != null && TraktSettings.AlreadyExistMovies.Movies != null && TraktSettings.AlreadyExistMovies.Movies.Count > 0) " is 151.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                //    TraktLogger.Debug("Skipping {0} movies as they already exist in trakt library but failed local match previously."' TraktSettings.AlreadyExistMovies.Movies.Count.ToString()); " is 179.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                //        Predicate<IMDBMovie> criteria = m => (m.Title == movie.Title) && (m.Year.ToString() == movie.Year) && (m.IMDBNumber == movie.IMDBID); " is 143.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                //            TraktLogger.Debug("Skipping movie' Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 123.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                //                TraktLogger.Debug("Removing 'AlreadyExists' movie' Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 143.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                        TraktLogger.Info("Marking movie as unwatched in local database' movie is not watched on trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' " is 161.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                                          movie.Title' movie.Year.HasValue ? movie.Year.ToString() : "<empty>"' movie.Ids.Imdb ?? "<empty>"' movie.Ids.Tmdb.HasValue ? movie.Ids.Tmdb.ToString() : "<empty>"); " is 164.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                            TraktLogger.Info($"Updating local movie watched state / play count to match trakt.tv. Plays = '{twm.Plays}'' Date Watched = '{twm.LastWatchedAt}'' Title = '{twm.Movie.Title}'' Year = '{twm.Movie.Year.ToLogString()}'' IMDb ID = '{twm.Movie.Ids.Imdb.ToLogString()}'' TMDb ID = '{twm.Movie.Ids.Tmdb.ToLogString()}'"); " is 314.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                            pagedMovies.ForEach(s => TraktLogger.Info("Adding movie to trakt.tv watched history. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Watched = '{4}'"' " is 170.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                                                                             s.Title' s.Year.HasValue ? s.Year.ToString() : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString() : "<empty>"' s.WatchedAt)); " is 154.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                            pagedMovies.ForEach(s => TraktLogger.Info("Adding movie to trakt.tv collection. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Added = '{4}'' MediaType = '{5}'' Resolution = '{6}'' Audio Codec = '{7}'' Audio Channels = '{8}'"' " is 247.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                                                                        s.Title' s.Year.HasValue ? s.Year.ToString() : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString() : "<empty>"' " is 139.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                                                                        s.CollectedAt' s.MediaType ?? "<empty>"' s.Resolution ?? "<empty>"' s.AudioCodec ?? "<empty>"' s.AudioChannels ?? "<empty>")); " is 126.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                            pagedMovies.ForEach(a => TraktLogger.Info("Adding movie to trakt.tv ratings. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Rating = '{4}/10'"' " is 159.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                                                                        a.Title' a.Year.HasValue ? a.Year.ToString() : "<empty>"' a.Ids.Imdb ?? "<empty>"' a.Ids.Tmdb.HasValue ? a.Ids.Tmdb.ToString() : "<empty>"' a.Rating)); " is 151.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                        TraktLogger.Info("Adding movie rating to match trakt.tv. Rated = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' " is 138.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                                            trm.Rating' trm.Movie.Title' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString() : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString() : "<empty>"); " is 200.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                            pagedMovies.ForEach(s => TraktLogger.Info("Removing movie from trakt.tv collection' movie no longer exists locally. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' " is 179.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "                                                                        s.Title' s.Year.HasValue ? s.Year.ToString() : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString() : "<empty>")); " is 141.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,Scrobble,The length of the statement  "                TraktLogger.Info("Sending start scrobble of movie to trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' tScrobbleData.Movie.Title' tScrobbleData.Movie.Year' tScrobbleData.Movie.Ids.Imdb.ToLogString()' tScrobbleData.Movie.Ids.Tmdb.ToLogString()); " is 268.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,StopScrobble,The length of the statement  "                    TraktLogger.Info("Sending 'stop' scrobble of movie to trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' tScrobbleData.Movie.Title' tScrobbleData.Movie.Year' tScrobbleData.Movie.Ids.Imdb.ToLogString()' tScrobbleData.Movie.Ids.Tmdb.ToLogString()); " is 269.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,StopScrobble,The length of the statement  "                    TraktLogger.Info("Sending 'pause' scrobble of movie to trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' tScrobbleData.Movie.Title' tScrobbleData.Movie.Year' tScrobbleData.Movie.Ids.Imdb.ToLogString()' tScrobbleData.Movie.Ids.Tmdb.ToLogString()); " is 270.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncProgress,The length of the statement  "            TraktLogger.Info("Found {0} movies on trakt.tv with resume data' processing paused movies after {1}"' playbackData.Where(p => p.Type == "movie").Count()' lastPausedAtMovie); " is 173.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncProgress,The length of the statement  "                var movie = GetMovies().FirstOrDefault(m => (m.IMDBNumber == item.Movie.Ids.Imdb && !string.IsNullOrEmpty(item.Movie.Ids.Imdb)) ||  " is 130.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncProgress,The length of the statement  "                    TraktLogger.Warning("Skipping item with invalid runtime in database' Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb.ToLogString()' item.Movie.Ids.Tmdb.ToLogString()); " is 238.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncProgress,The length of the statement  "                    TraktLogger.Warning("Skipping item with invalid filename in database' Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb.ToLogString()' item.Movie.Ids.Tmdb.ToLogString()); " is 239.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncProgress,The length of the statement  "                if (TraktSettings.BlockedFilenames.Any(f => f == movie.VideoFileName) || TraktSettings.BlockedFolders.Any(f => f == Path.GetDirectoryName(movie.VideoFileName))) " is 160.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncProgress,The length of the statement  "                    TraktLogger.Info("Ignoring resume data sync for movie' filename/folder is ignored by user. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Filename = '{4}'"' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb.ToLogString()' item.Movie.Ids.Tmdb.ToLogString()' movie.VideoFileName); " is 299.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncProgress,The length of the statement  "                    TraktLogger.Info("Setting resume time '{0}' for movie' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' new TimeSpan(0' 0' 0' resumeData)' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb.ToLogString()' item.Movie.Ids.Tmdb.ToLogString()); " is 259.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,CreateScrobbleData,The length of the statement  "            double progress = (g_Player.CurrentPosition / (g_Player.Duration == 0.0 ? movie.RunTime * 60.0 : g_Player.Duration)) * 100.0; " is 125.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,MovieMatch,The length of the statement  "            if (!string.IsNullOrEmpty(traktMovie.Ids.Imdb) && !string.IsNullOrEmpty(BasicHandler.GetProperImdbId(localMovie.IMDBNumber))) " is 125.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,MovieMatch,The length of the statement  "            return string.Compare(localMovie.Title' traktMovie.Title' true) == 0 && localMovie.Year.ToString() == traktMovie.Year.ToString(); " is 129.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,ShowRateDialog,The length of the statement  "            if (!TraktSettings.ShowRateDlgForPlaylists && PlayListPlayer.SingletonPlayer.CurrentPlaylistType == PlayListType.PLAYLIST_VIDEO) return; " is 136.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,ShowRateDialog,The length of the statement  "            TraktLogger.Debug("Showing rate dialog for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 201.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,ShowRateDialog,The length of the statement  "                    Ids = new TraktMovieId { Imdb = movieToRate.IMDBNumber.ToNullIfEmpty()' Tmdb = movieToRate.TMDBNumber.ToNullableInt32() }' " is 122.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                // now get all episodes on trakt that are marked as 'seen' or 'watched' (this will be cached already when working out unwatched) " is 128.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                TraktLogger.Info("Getting local episodes from tvseries database' Ignoring {0} tv show(s) set by user"' IgnoredSeries.Count); " is 124.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                TraktLogger.Info("Found {0} total episodes in tvseries database{1}"' episodeCount' IgnoredSeries.Count > 0 ? string.Format(" and {0} ignored episodes"' episodeCount - localEpisodes.Count) : ""); " is 194.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                var localCollectedEpisodes = localEpisodes.Where(e => !string.IsNullOrEmpty(e[DBEpisode.cFilename].ToString())).ToList(); " is 121.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                    localRatedShows.AddRange(shows.Where(s => s[DBOnlineSeries.cMyRating] > 0 && !IgnoredSeries.Contains(s[DBOnlineSeries.cID]))); " is 126.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                            TraktLogger.Info("Marking episode as unwatched in local database' episode is not watched on trakt.tv. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'' Show TVDb ID = '{4}'' Show IMDb ID = '{5}'"' " is 208.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                                episode.ShowTitle' episode.ShowYear.HasValue ? episode.ShowYear.ToString() : "<empty>"' episode.Season' episode.Number' episode.ShowTvdbId.HasValue ? episode.ShowTvdbId.ToString() : "<empty>"' episode.ShowImdbId ?? "<empty>"); " is 226.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                            TraktLogger.Info("Marking episode as watched in local database' episode is watched on trakt.tv. Plays = '{0}'' Title = '{1}'' Year = '{2}'' Season = '{3}'' Episode = '{4}'' Show TVDb ID = '{5}'' Show IMDb ID = '{6}'' Last Watched = '{7}'"' " is 239.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                                traktEpisode.Plays' traktEpisode.ShowTitle' traktEpisode.ShowYear.HasValue ? traktEpisode.ShowYear.ToString() : "<empty>"' traktEpisode.Season' traktEpisode.Number' traktEpisode.ShowTvdbId.HasValue ? traktEpisode.ShowTvdbId.ToString() : "<empty>"' traktEpisode.ShowImdbId ?? "<empty>"' traktEpisode.WatchedAt); " is 310.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                                TraktLogger.Info("Inserting rating for tv episode in local database' episode is rated on trakt.tv. Rating = '{0}/10'' Title = '{1}'' Year = '{2}' Season = '{3}'' Episode = '{4}'' Show TVDb ID = '{5}'' Show IMDb ID = '{6}'' Episode TVDb ID = '{7}'"' " is 248.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                                    traktEpisode.Rating' traktEpisode.Show.Title' traktEpisode.Show.Year.HasValue ? traktEpisode.Show.Year.ToString() : "<empty>"' traktEpisode.Episode.Season' traktEpisode.Episode.Number' traktEpisode.Show.Ids.Tvdb.HasValue ? traktEpisode.Show.Ids.Tvdb.ToString() : "<empty>"' traktEpisode.Show.Ids.Imdb ?? "<empty>"' traktEpisode.Episode.Ids.Tvdb.HasValue ? traktEpisode.Episode.Ids.Tvdb.ToString() : "<empty>"); " is 410.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                            TraktLogger.Info("Inserting rating for tv show in local database' show is rated on trakt.tv. Rating = '{0}/10'' Title = '{1}'' Year = '{1}'' Show TVDb ID = '{2}'"' " is 163.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                                traktShow.Rating' traktShow.Show.Title' traktShow.Show.Year.HasValue ? traktShow.Show.Year.ToString() : "<empty>" ' traktShow.Show.Ids.Tvdb.HasValue ? traktShow.Show.Ids.Tvdb.ToString() : "<empty>"); " is 199.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                    TraktLogger.Info("Found {0} local tv show(s) with {1} watched episode(s) to add to trakt.tv watched history"' syncWatchedShows.Shows.Count' syncWatchedShows.Shows.Sum(sh => sh.Seasons.Sum(se => se.Episodes.Count()))); " is 217.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                        TraktLogger.Info("Adding tv show [{0}/{1}] to trakt.tv episode watched history' Episode Count = '{2}'' Show Title = '{3}'' Show Year = '{4}'' Show TVDb ID = '{5}'' Show IMDb ID = '{6}'"' " is 186.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                                            ++iSyncCounter' showCount' showEpisodeCount' show.Title' show.Year.HasValue ? show.Year.ToString() : "<empty>"' show.Ids.Tvdb' show.Ids.Imdb ?? "<empty>"); " is 155.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                            TraktLogger.Info("Adding episode to trakt.tv watched history' Title = '{0} - {1}x{2}'' Watched At = '{3}'"' show.Title' s.Number' e.Number' e.WatchedAt.ToLogString()); " is 167.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                    TraktLogger.Info("Found {0} local tv show(s) with {1} collected episode(s) to add to trakt.tv collection"' syncCollectedShows.Shows.Count' syncCollectedShows.Shows.Sum(sh => sh.Seasons.Sum(se => se.Episodes.Count()))); " is 218.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                        TraktLogger.Info("Adding tv show [{0}/{1}] to trakt.tv episode collection' Episode Count = '{2}'' Show Title = '{3}'' Show Year = '{4}'' Show TVDb ID = '{5}'' Show IMDb ID = '{6}'"' " is 181.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                                            ++iSyncCounter' showCount' showEpisodeCount' show.Title' show.Year.HasValue ? show.Year.ToString() : "<empty>"' show.Ids.Tvdb' show.Ids.Imdb ?? "<empty>"); " is 155.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                            TraktLogger.Info($"Adding episode to trakt.tv collection' Title = '{show.Title} - {s.Number}x{e.Number}'' Collected At = '{e.CollectedAt.ToLogString()}'' Audio Channels = '{e.AudioChannels.ToLogString()}'' Audio Codec = '{e.AudioCodec.ToLogString()}'' Resolution = '{e.Resolution.ToLogString()}'' HDR = '{e.HdrType.ToLogString()}'' Media Type = '{e.MediaType.ToLogString()}'' Is 3D = '{e.Is3D}'"); " is 397.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                        TraktLogger.Info("Found {0} local tv show(s) with {1} rated episode(s) to add to trakt.tv ratings"' syncRatedShowsEx.Shows.Count' syncRatedShowsEx.Shows.Sum(sh => sh.Seasons.Sum(se => se.Episodes.Count()))); " is 207.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                            TraktLogger.Info("Adding tv show [{0}/{1}] to trakt.tv episode ratings' Episode Count = '{2}'' Show Title = '{3}'' Show Year = '{4}'' Show TVDb ID = '{5}'' Show IMDb ID = '{6}'"' " is 178.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                                                ++iSyncCounter' showCount' showEpisodeCount' show.Title' show.Year.HasValue ? show.Year.ToString() : "<empty>"' show.Ids.Tvdb' show.Ids.Imdb ?? "<empty>"); " is 155.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                                TraktLogger.Info("Adding episode to trakt.tv ratings' Title = '{0} - {1}x{2}'' Rating = '{3}'' Rated At = '{4}'"' show.Title' s.Number' e.Number' e.Rating' e.RatedAt.ToLogString()); " is 181.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                                    TraktLogger.Info("Adding tv show to trakt.tv ratings' Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'' IMDb ID = '{3}'' Rating = '{4}'' Rated At = '{5}'"' s.Title' s.Year.ToLogString()' s.Ids.Tvdb.ToLogString()' s.Ids.Imdb.ToLogString()' s.Rating' s.RatedAt.ToLogString()); " is 270.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                    TraktLogger.Info("Found {0} local tv show(s) with {1} episode(s) to remove from trakt.tv collection"' syncRemovedShows.Shows.Count' syncRemovedShows.Shows.Sum(sh => sh.Seasons.Sum(se => se.Episodes.Count()))); " is 209.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                        TraktLogger.Info("Removing tv show [{0}/{1}] from trakt.tv episode collection' Episode Count = '{2}'' Show Title = '{3}'' Show Year = '{4}'' Show TVDb ID = '{5}'' Show IMDb ID = '{6}'"' " is 185.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                                            ++iSyncCounter' showCount' showEpisodeCount' show.Title' show.Year.HasValue ? show.Year.ToString() : "<empty>"' show.Ids.Tvdb' show.Ids.Imdb ?? "<empty>"); " is 155.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "                    TraktLogger.Info("Updating episode counts in local database for series. Title = '{0}'' Year = '{1}'' Show TVDb ID = '{2}'"' series.ToString()' series.Year ?? "<empty>"' series[DBSeries.cID]); " is 191.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,Scrobble,The length of the statement  "                        TraktLogger.Error("Unable to retrieve double episode information from tvseries database for current playing episode. Title = '{0}'"' scrobbleEpisode.ToString()); " is 161.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,Scrobble,The length of the statement  "                        TraktLogger.Info("Sending start scrobble of second part of episode to trakt.tv. Show Title = '{0}'' Season = '{1}'' Episode = '{2}'' Episode Title = '{3}'' Show TVDb ID = '{4}'' Episode TVDb ID = '{5}'"' " is 203.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,Scrobble,The length of the statement  "                                    show[DBOnlineSeries.cOriginalName]' episodes[1][DBOnlineEpisode.cSeasonIndex]' episodes[1][DBOnlineEpisode.cEpisodeIndex]' episodes[1][DBOnlineEpisode.cEpisodeName]' episodes[1][DBOnlineEpisode.cSeriesID]' episodes[1][DBOnlineEpisode.cID]); " is 240.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,Scrobble,The length of the statement  "                TraktLogger.Info("Sending start scrobble of episode to trakt.tv. Show Title = '{0}'' Season = '{1}'' Episode = '{2}'' Episode Title = '{3}'' Show TVDb ID = '{4}'' Episode TVDb ID = '{5}'"' " is 188.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,Scrobble,The length of the statement  "                                    show[DBOnlineSeries.cOriginalName]' scrobbleEpisode[DBOnlineEpisode.cSeasonIndex]' scrobbleEpisode[DBOnlineEpisode.cEpisodeIndex]' scrobbleEpisode[DBOnlineEpisode.cEpisodeName]' scrobbleEpisode[DBOnlineEpisode.cSeriesID]' scrobbleEpisode[DBOnlineEpisode.cID]); " is 260.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The length of the statement  "            TraktLogger.Info("Found {0} tv episodes on trakt.tv with resume data' processing paused episodes after {1}"' playbackData.Where(p => p.Type == "episode").Count()' lastPausedAtEpisode); " is 184.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The length of the statement  "                    TraktLogger.Warning("Skipping item with invalid TVDb ID' TV Show = '{0}'' Season='{1}'' Episode='{2}'"' item.Show.Title' item.Episode.Season' item.Episode.Number); " is 163.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The length of the statement  "                    TraktLogger.Info("Ignoring resume data sync for episode' series is ignored by user. TV Show = '{0}'' Season='{1}'' Episode='{2}'"' item.Show.Title' item.Episode.Season' item.Episode.Number); " is 190.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The length of the statement  "                    TraktLogger.Warning("Skipping item with invalid runtime in database' TV Show = '{0}'' Season='{1}'' Episode='{2}'"' item.Show.Title' item.Episode.Season' item.Episode.Number); " is 175.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The length of the statement  "                if (TraktSettings.SyncPlaybackOnEnterPlugin && LastEpisode != null && LastEpisode[DBEpisode.cFilename] == episode[DBEpisode.cFilename]) " is 135.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The length of the statement  "                var resumeData = Convert.ToInt32((episode[DBEpisode.cLocalPlaytime] / 1000.0) * (item.Progress / 100.0)) - TraktSettings.SyncResumeDelta; " is 137.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The length of the statement  "                    TraktLogger.Info("Setting resume time '{0}' for episode' Title = '{1} - {2}x{3}'' Paused At = '{4}'"' new TimeSpan(0' 0' 0' resumeData)' item.Show.Title' item.Episode.Season' item.Episode.Number' item.PausedAt); " is 211.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,PlayEpisode,The length of the statement  "            var episode = episodes.FirstOrDefault(e => (e[DBEpisode.cEpisodeIndex] == episodeid || e[DBEpisode.cEpisodeIndex2] == episodeid) && !string.IsNullOrEmpty(e[DBEpisode.cFilename])); " is 179.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodePersonInfo,The length of the statement  "                searchPeople.Directors.AddRange(episode[DBOnlineEpisode.cDirector].ToString().Split('|').Where(s => s.Trim().Length > 0)); " is 122.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodePersonInfo,The length of the statement  "                searchPeople.GuestStars.AddRange(episode[DBOnlineEpisode.cGuestStars].ToString().Split('|').Where(s => s.Trim().Length > 0)); " is 125.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetWatchedShowsForSyncEx,The length of the statement  "                    var syncShow = syncWatchedEpisodes.Shows.FirstOrDefault(swe => swe.Ids != null && swe.Ids.Tvdb == episode[DBOnlineEpisode.cSeriesID]); " is 134.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetCollectedShowsForSyncEx,The length of the statement  "                    var syncShow = syncCollectedEpisodes.Shows.FirstOrDefault(sce => sce.Ids != null && sce.Ids.Tvdb == episode[DBOnlineEpisode.cSeriesID]); " is 136.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetRatedEpisodesForSyncEx,The length of the statement  "                    var syncShow = syncRatedEpisodes.Shows.FirstOrDefault(sre => sre.Ids != null && sre.Ids.Tvdb == episode[DBOnlineEpisode.cSeriesID]); " is 132.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetRemovedShowsForSyncEx,The length of the statement  "                    var syncShow = syncUnCollectedEpisodes.Shows.FirstOrDefault(suce => suce.Ids != null && suce.Ids.Trakt == episode.ShowId); " is 122.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,CreateLookupKey,The length of the statement  "            return string.Format("{0}_{1}_{2}"' episode[DBOnlineEpisode.cSeriesID]' episode[DBOnlineEpisode.cSeasonIndex]' episode[DBOnlineEpisode.cEpisodeIndex]); " is 151.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,EpisodeMatch,The length of the statement  "                return BasicHandler.IsTitleMatch(show[DBOnlineSeries.cOriginalName]' onlineEpisode.ShowTitle' show.Year.ToNullableInt32()) && " is 125.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,EpisodeMatch,The length of the statement  "            //else if (BasicHandler.IsValidImdb(onlineEpisode.Ids.ImdbId) && BasicHandler.IsValidImdb(localEpisode[DBOnlineEpisode.cIMDBID])) " is 129.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,RateEpisode,The length of the statement  "                TraktLogger.Info("Received a Rate Episode event from tvseries. Show Title = '{0}'' Show Year = '{1}'' Season = '{2}'' Episode = '{3}'' Episode Title = '{4}'' Show TVDb ID = '{5}'' Episode TVDb ID = '{6}'"' " is 205.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,RateEpisode,The length of the statement  "                                    show[DBOnlineSeries.cOriginalName]' show.Year ?? "<empty>"' episode[DBOnlineEpisode.cSeasonIndex]' episode[DBOnlineEpisode.cEpisodeIndex]' episode[DBOnlineEpisode.cEpisodeName]' episode[DBOnlineEpisode.cSeriesID]' episode[DBOnlineEpisode.cID]); " is 244.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,RateShow,The length of the statement  "                TraktLogger.Info("Received a Rate Show event from tvseries. Show Title = '{0}'' Show Year = '{1}'' Show TVDb ID = '{2}'"' show[DBOnlineSeries.cOriginalName]' show.Year' show[DBSeries.cID]); " is 189.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnEpisodeWatched,The length of the statement  "            TraktLogger.Info("Playback of MP-TVSeries episode stopped and considered watched. Title = '{0}'' PlayList Item = '{1}'"' episode.ToString()' isPlaylist); " is 153.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnToggleWatched,The length of the statement  "            TraktLogger.Info("Received a Toggle Watched event from tvseries. Show Title = '{0}'' Episodes = '{1}'' Watched = '{2}'"' show[DBOnlineSeries.cOriginalName]' episodes.Count' watched.ToString()); " is 193.
Complex Conditional,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadActivity,The conditional expression  "facade.Count == 0 && PreviousActivity != null && PreviousActivity.Activities != null && PreviousActivity.Activities.Count > 0"  is complex.
Complex Conditional,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,The conditional expression  "PreviousActivity == null || PreviousActivity.Activities == null || ActivityStartTime <= 0 || GetFullActivityLoad"  is complex.
Complex Conditional,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The conditional expression  "(windowID < (int)TraktGUIWindows.Settings || windowID > (int)TraktGUIWindows.SettingsGeneral) &&                  (PreviousWindow >= (int)TraktGUIWindows.Settings && PreviousWindow <= (int)TraktGUIWindows.SettingsGeneral)"  is complex.
Complex Conditional,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The conditional expression  "(!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)) || imdbid.StartsWith("tt") || !string.IsNullOrEmpty(tmdbid)"  is complex.
Complex Conditional,TraktPlugin.GUI,GUIShowSeasons,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShowSeasons.cs,GetLoadingParameter,The conditional expression  "Show != null && (Show.Ids.Trakt != null || Show.Ids.Imdb != null || Show.Title != null)"  is complex.
Complex Conditional,TraktPlugin.GUI,GUIBackgroundTask,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBackgroundTask.cs,StopBackgroundTask,The conditional expression  "IsBusy && _CurrentTaskSuccess == null && backgroundThread != null && backgroundThread.IsAlive"  is complex.
Complex Conditional,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,UpdateCategoriesMenu,The conditional expression  "node.Name == string.Format("${{{0}}}"' GUI.Translation.WatchList) ||                          node.Name == string.Format("${{{0}}}"' GUI.Translation.Recommendations) ||                          node.Name == "$(Watchlist)" || node.Name == "${Recommendations}""  is complex.
Complex Conditional,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,UpdateFiltersMenu,The conditional expression  "node.Name == string.Format("${{{0}}}"' GUI.Translation.WatchList) ||                          node.Name == string.Format("${{{0}}}"' GUI.Translation.Recommendations) ||                          node.Name == "$(Watchlist)" || node.Name == "${Recommendations}""  is complex.
Empty Catch Block,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingMoviesFacade,The method has an empty catch block.
Empty Catch Block,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingShowsFacade,The method has an empty catch block.
Empty Catch Block,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,SetUpdateAnimation,The method has an empty catch block.
Empty Catch Block,TraktPlugin,TraktLogger,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,DeleteFile,The method has an empty catch block.
Empty Catch Block,TraktPlugin,TraktLogger,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,MoveFile,The method has an empty catch block.
Empty Catch Block,TraktPlugin,TraktLogger,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,WriteToFile,The method has an empty catch block.
Empty Catch Block,TraktPlugin,TraktLogger,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,WriteLatency,The method has an empty catch block.
Empty Catch Block,TraktPlugin.GUI,AsyncImageResource,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cornerstone.MP\AsyncImageResource.cs,loadResource,The method has an empty catch block.
Empty Catch Block,TraktPlugin.GUI,GUIImageHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,DownloadImage,The method has an empty catch block.
Empty Catch Block,TraktPlugin.GUI,GUIImageHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,LoadImage,The method has an empty catch block.
Magic Number,TraktPlugin.Cache,TmdbCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetTmdbConfiguration,The following statement contains a magic number: var tmdbConfigThread = new Thread((o) =>              {                  // determine age of the last requested TMDb configuration                  // if older than 2 weeks request again' should rarily change.                    DateTime lastRequestedDate = TraktSettings.TmdbConfigurationAge.ToDateTime();                  if (TraktSettings.TmdbConfiguration == null || TraktSettings.TmdbConfiguration.Images == null || DateTime.Now.Subtract(new TimeSpan(14' 0' 0' 0' 0)) > lastRequestedDate)                  {                      var latestConfig = TmdbAPI.TmdbAPI.GetConfiguration();                      if (latestConfig != null && latestConfig.Images != null && latestConfig.Images.BaseUrl != null)                      {                          TraktSettings.TmdbConfiguration = latestConfig;                      }                      else                      {                          TraktSettings.TmdbConfiguration = new TmdbConfiguration                          {                              Images = new TmdbConfiguration.ImageConfiguration { BaseUrl = "http://image.tmdb.org/t/p/" }                          };                      }                      TraktSettings.TmdbConfigurationAge = DateTime.Now.ToString();                  }              })              {                  IsBackground = true'                  Name = "GetTmdbConfiguration"              };
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.pathTextBox.Location = new System.Drawing.Point(12' 33);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.pathTextBox.Location = new System.Drawing.Point(12' 33);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.pathTextBox.Size = new System.Drawing.Size(277' 20);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.pathTextBox.Size = new System.Drawing.Size(277' 20);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 14);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 14);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(134' 13);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(134' 13);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.Location = new System.Drawing.Point(295' 31);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.Location = new System.Drawing.Point(295' 31);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.Size = new System.Drawing.Size(75' 23);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.Size = new System.Drawing.Size(75' 23);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.TabIndex = 2;
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point(214' 69);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point(214' 69);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.okButton.TabIndex = 4;
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(295' 69);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(295' 69);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.TabIndex = 5;
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(16' 60);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(16' 60);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(350' 3);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(350' 3);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.TabIndex = 3;
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(382' 101);
Magic Number,TraktPlugin,AddPathPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(382' 101);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,AuthWorker_DoWork,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.pbQRCode.Location = new System.Drawing.Point(16' 119);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.pbQRCode.Location = new System.Drawing.Point(16' 119);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.pbQRCode.MaximumSize = new System.Drawing.Size(330' 330);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.pbQRCode.MaximumSize = new System.Drawing.Size(330' 330);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.pbQRCode.MinimumSize = new System.Drawing.Size(330' 330);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.pbQRCode.MinimumSize = new System.Drawing.Size(330' 330);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.pbQRCode.Size = new System.Drawing.Size(330' 330);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.pbQRCode.Size = new System.Drawing.Size(330' 330);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.lblScanQRCode.Location = new System.Drawing.Point(12' 13);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.lblScanQRCode.Location = new System.Drawing.Point(12' 13);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.lblScanQRCode.Size = new System.Drawing.Size(330' 40);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.lblScanQRCode.Size = new System.Drawing.Size(330' 40);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.lblUserCode.Font = new System.Drawing.Font("Microsoft Sans Serif"' 26F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.lblUserCode.Location = new System.Drawing.Point(12' 464);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.lblUserCode.Location = new System.Drawing.Point(12' 464);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.lblUserCode.Size = new System.Drawing.Size(330' 68);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.lblUserCode.Size = new System.Drawing.Size(330' 68);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.lblUserCode.TabIndex = 2;
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.pbAuthorizationPoll.Location = new System.Drawing.Point(12' 547);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.pbAuthorizationPoll.Location = new System.Drawing.Point(12' 547);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.pbAuthorizationPoll.Size = new System.Drawing.Size(330' 36);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.pbAuthorizationPoll.Size = new System.Drawing.Size(330' 36);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.pbAuthorizationPoll.Step = 5;
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.pbAuthorizationPoll.TabIndex = 3;
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.lnkActivate.Location = new System.Drawing.Point(13' 71);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.lnkActivate.Location = new System.Drawing.Point(13' 71);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.lnkActivate.Size = new System.Drawing.Size(164' 20);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.lnkActivate.Size = new System.Drawing.Size(164' 20);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.lnkActivate.TabIndex = 4;
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(9F' 20F);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(9F' 20F);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(360' 595);
Magic Number,TraktPlugin,AuthorizationPopup,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AuthorizationPopup.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(360' 595);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,CloseConfig,The following statement contains a magic number: txtPinCode.TextLength < 4
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,txtPinCode_TextChanged,The following statement contains a magic number: txtPinCode.TextLength < 4
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbTraktAccount.Location = new System.Drawing.Point(18' 18);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbTraktAccount.Location = new System.Drawing.Point(18' 18);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbTraktAccount.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbTraktAccount.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbTraktAccount.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbTraktAccount.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbTraktAccount.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbTraktAccount.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbTraktAccount.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbTraktAccount.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbTraktAccount.Size = new System.Drawing.Size(474' 149);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbTraktAccount.Size = new System.Drawing.Size(474' 149);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.linkTrakt.Location = new System.Drawing.Point(402' 112);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.linkTrakt.Location = new System.Drawing.Point(402' 112);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.linkTrakt.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.linkTrakt.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.linkTrakt.Size = new System.Drawing.Size(57' 20);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.linkTrakt.Size = new System.Drawing.Size(57' 20);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.linkTrakt.TabIndex = 4;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbPlugins.Location = new System.Drawing.Point(18' 177);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbPlugins.Location = new System.Drawing.Point(18' 177);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbPlugins.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbPlugins.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbPlugins.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbPlugins.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbPlugins.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbPlugins.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbPlugins.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbPlugins.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbPlugins.Size = new System.Drawing.Size(483' 191);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbPlugins.Size = new System.Drawing.Size(483' 191);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnDown.Location = new System.Drawing.Point(430' 82);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnDown.Location = new System.Drawing.Point(430' 82);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnDown.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnDown.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnDown.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnDown.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnDown.Size = new System.Drawing.Size(44' 46);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnDown.Size = new System.Drawing.Size(44' 46);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnDown.TabIndex = 2;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Location = new System.Drawing.Point(430' 29);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Location = new System.Drawing.Point(430' 29);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Size = new System.Drawing.Size(44' 45);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Size = new System.Drawing.Size(44' 45);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.clbPlugins.ColumnWidth = 132;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.clbPlugins.Location = new System.Drawing.Point(14' 29);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.clbPlugins.Location = new System.Drawing.Point(14' 29);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.clbPlugins.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.clbPlugins.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.clbPlugins.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.clbPlugins.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.clbPlugins.Size = new System.Drawing.Size(406' 130);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.clbPlugins.Size = new System.Drawing.Size(406' 130);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbSync.Location = new System.Drawing.Point(510' 18);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbSync.Location = new System.Drawing.Point(510' 18);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbSync.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbSync.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbSync.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbSync.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbSync.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbSync.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbSync.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbSync.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbSync.Size = new System.Drawing.Size(483' 377);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbSync.Size = new System.Drawing.Size(483' 377);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbSync.TabIndex = 3;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlaybackOnEnterPlugin.Location = new System.Drawing.Point(14' 295);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlaybackOnEnterPlugin.Location = new System.Drawing.Point(14' 295);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlaybackOnEnterPlugin.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlaybackOnEnterPlugin.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlaybackOnEnterPlugin.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlaybackOnEnterPlugin.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlaybackOnEnterPlugin.Size = new System.Drawing.Size(357' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlaybackOnEnterPlugin.Size = new System.Drawing.Size(357' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlaybackOnEnterPlugin.TabIndex = 10;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(286' 34);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(286' 34);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label2.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label2.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(49' 20);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(49' 20);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 2;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncInterval.Location = new System.Drawing.Point(194' 29);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncInterval.Location = new System.Drawing.Point(194' 29);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncInterval.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncInterval.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncInterval.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncInterval.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncInterval.Maximum = new decimal(new int[] {              168'              0'              0'              0});
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncInterval.Size = new System.Drawing.Size(82' 26);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncInterval.Size = new System.Drawing.Size(82' 26);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncResumeDelta.Location = new System.Drawing.Point(10' 329);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncResumeDelta.Location = new System.Drawing.Point(10' 329);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncResumeDelta.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncResumeDelta.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncResumeDelta.Size = new System.Drawing.Size(295' 20);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncResumeDelta.Size = new System.Drawing.Size(295' 20);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncResumeDelta.TabIndex = 11;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncResumeDelta.Location = new System.Drawing.Point(378' 326);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncResumeDelta.Location = new System.Drawing.Point(378' 326);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncResumeDelta.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncResumeDelta.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncResumeDelta.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncResumeDelta.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncResumeDelta.Maximum = new decimal(new int[] {              600'              0'              0'              0});
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncResumeDelta.Size = new System.Drawing.Size(92' 26);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncResumeDelta.Size = new System.Drawing.Size(92' 26);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncResumeDelta.TabIndex = 12;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlayback.Location = new System.Drawing.Point(14' 263);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlayback.Location = new System.Drawing.Point(14' 263);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlayback.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlayback.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlayback.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlayback.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlayback.Size = new System.Drawing.Size(383' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlayback.Size = new System.Drawing.Size(383' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlayback.TabIndex = 9;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncRatings.Location = new System.Drawing.Point(14' 198);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncRatings.Location = new System.Drawing.Point(14' 198);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncRatings.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncRatings.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncRatings.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncRatings.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncRatings.Size = new System.Drawing.Size(181' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncRatings.Size = new System.Drawing.Size(181' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncRatings.TabIndex = 7;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncLibrary.Location = new System.Drawing.Point(14' 166);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncLibrary.Location = new System.Drawing.Point(14' 166);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncLibrary.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncLibrary.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncLibrary.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncLibrary.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncLibrary.Size = new System.Drawing.Size(300' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncLibrary.Size = new System.Drawing.Size(300' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncLibrary.TabIndex = 6;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMyFilmsCategories.Location = new System.Drawing.Point(14' 134);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMyFilmsCategories.Location = new System.Drawing.Point(14' 134);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMyFilmsCategories.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMyFilmsCategories.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMyFilmsCategories.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMyFilmsCategories.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMyFilmsCategories.Size = new System.Drawing.Size(290' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMyFilmsCategories.Size = new System.Drawing.Size(290' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMyFilmsCategories.TabIndex = 5;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesFilters.Location = new System.Drawing.Point(14' 102);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesFilters.Location = new System.Drawing.Point(14' 102);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesFilters.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesFilters.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesFilters.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesFilters.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesFilters.Size = new System.Drawing.Size(306' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesFilters.Size = new System.Drawing.Size(306' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesFilters.TabIndex = 4;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesCategories.Location = new System.Drawing.Point(14' 69);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesCategories.Location = new System.Drawing.Point(14' 69);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesCategories.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesCategories.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesCategories.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesCategories.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesCategories.Size = new System.Drawing.Size(340' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesCategories.Size = new System.Drawing.Size(340' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesCategories.TabIndex = 3;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lbSyncTimerLength.Location = new System.Drawing.Point(10' 34);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lbSyncTimerLength.Location = new System.Drawing.Point(10' 34);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lbSyncTimerLength.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lbSyncTimerLength.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lbSyncTimerLength.Size = new System.Drawing.Size(173' 20);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lbSyncTimerLength.Size = new System.Drawing.Size(173' 20);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbKeepInSync.Location = new System.Drawing.Point(14' 231);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbKeepInSync.Location = new System.Drawing.Point(14' 231);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbKeepInSync.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbKeepInSync.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbKeepInSync.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbKeepInSync.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbKeepInSync.Size = new System.Drawing.Size(411' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbKeepInSync.Size = new System.Drawing.Size(411' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbKeepInSync.TabIndex = 8;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(834' 717);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(834' 717);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(159' 35);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(159' 35);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.TabIndex = 8;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.ttpConfig.AutoPopDelay = 18000;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.ttpConfig.InitialDelay = 500;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.ttpConfig.ReshowDelay = 100;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnTVSeriesRestrictions.Location = new System.Drawing.Point(14' 86);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnTVSeriesRestrictions.Location = new System.Drawing.Point(14' 86);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnTVSeriesRestrictions.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnTVSeriesRestrictions.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnTVSeriesRestrictions.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnTVSeriesRestrictions.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnTVSeriesRestrictions.Size = new System.Drawing.Size(224' 35);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnTVSeriesRestrictions.Size = new System.Drawing.Size(224' 35);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentControls.Location = new System.Drawing.Point(15' 29);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentControls.Location = new System.Drawing.Point(15' 29);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentControls.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentControls.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentControls.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentControls.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentControls.Size = new System.Drawing.Size(283' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentControls.Size = new System.Drawing.Size(283' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.txtPinCode.Location = new System.Drawing.Point(378' 25);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.txtPinCode.Location = new System.Drawing.Point(378' 25);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.txtPinCode.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.txtPinCode.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.txtPinCode.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.txtPinCode.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.txtPinCode.MaxLength = 4;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.txtPinCode.Size = new System.Drawing.Size(91' 26);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.txtPinCode.Size = new System.Drawing.Size(91' 26);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbRestrictions.Location = new System.Drawing.Point(18' 377);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbRestrictions.Location = new System.Drawing.Point(18' 377);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbRestrictions.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbRestrictions.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbRestrictions.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbRestrictions.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbRestrictions.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbRestrictions.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbRestrictions.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbRestrictions.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbRestrictions.Size = new System.Drawing.Size(483' 137);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbRestrictions.Size = new System.Drawing.Size(483' 137);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbRestrictions.TabIndex = 2;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Location = new System.Drawing.Point(16' 29);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Location = new System.Drawing.Point(16' 29);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Size = new System.Drawing.Size(447' 55);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Size = new System.Drawing.Size(447' 55);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnMovieRestrictions.Location = new System.Drawing.Point(246' 86);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnMovieRestrictions.Location = new System.Drawing.Point(246' 86);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnMovieRestrictions.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnMovieRestrictions.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnMovieRestrictions.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnMovieRestrictions.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnMovieRestrictions.Size = new System.Drawing.Size(228' 35);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnMovieRestrictions.Size = new System.Drawing.Size(228' 35);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnMovieRestrictions.TabIndex = 2;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.progressBarSync.Location = new System.Drawing.Point(18' 617);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.progressBarSync.Location = new System.Drawing.Point(18' 617);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.progressBarSync.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.progressBarSync.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.progressBarSync.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.progressBarSync.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.progressBarSync.Size = new System.Drawing.Size(975' 35);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.progressBarSync.Size = new System.Drawing.Size(975' 35);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.progressBarSync.TabIndex = 5;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncStatus.Location = new System.Drawing.Point(18' 722);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncStatus.Location = new System.Drawing.Point(18' 722);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncStatus.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncStatus.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncStatus.Size = new System.Drawing.Size(807' 22);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncStatus.Size = new System.Drawing.Size(807' 22);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncStatus.TabIndex = 7;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnStartLibrarySync.Location = new System.Drawing.Point(18' 662);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnStartLibrarySync.Location = new System.Drawing.Point(18' 662);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnStartLibrarySync.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnStartLibrarySync.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnStartLibrarySync.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnStartLibrarySync.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnStartLibrarySync.Size = new System.Drawing.Size(975' 37);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnStartLibrarySync.Size = new System.Drawing.Size(975' 37);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnStartLibrarySync.TabIndex = 6;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Location = new System.Drawing.Point(339' 58);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Location = new System.Drawing.Point(339' 58);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Size = new System.Drawing.Size(130' 26);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Size = new System.Drawing.Size(130' 26);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.TabIndex = 3;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Value = new System.DateTime(2016' 3' 25' 21' 0' 0' 0);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Value = new System.DateTime(2016' 3' 25' 21' 0' 0' 0);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Value = new System.DateTime(2016' 3' 25' 21' 0' 0' 0);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Value = new System.DateTime(2016' 3' 25' 21' 0' 0' 0);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalControlsTime.Location = new System.Drawing.Point(15' 66);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalControlsTime.Location = new System.Drawing.Point(15' 66);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalControlsTime.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalControlsTime.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalControlsTime.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalControlsTime.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalControlsTime.Size = new System.Drawing.Size(244' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalControlsTime.Size = new System.Drawing.Size(244' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalControlsTime.TabIndex = 2;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbParentalControls.Location = new System.Drawing.Point(510' 406);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbParentalControls.Location = new System.Drawing.Point(510' 406);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbParentalControls.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbParentalControls.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbParentalControls.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbParentalControls.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbParentalControls.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbParentalControls.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbParentalControls.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbParentalControls.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbParentalControls.Size = new System.Drawing.Size(480' 194);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbParentalControls.Size = new System.Drawing.Size(480' 194);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbParentalControls.TabIndex = 4;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboMovieCertifications.Location = new System.Drawing.Point(378' 128);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboMovieCertifications.Location = new System.Drawing.Point(378' 128);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboMovieCertifications.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboMovieCertifications.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboMovieCertifications.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboMovieCertifications.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboMovieCertifications.Size = new System.Drawing.Size(90' 28);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboMovieCertifications.Size = new System.Drawing.Size(90' 28);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboMovieCertifications.TabIndex = 7;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreMovieCertifications.Location = new System.Drawing.Point(15' 138);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreMovieCertifications.Location = new System.Drawing.Point(15' 138);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreMovieCertifications.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreMovieCertifications.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreMovieCertifications.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreMovieCertifications.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreMovieCertifications.Size = new System.Drawing.Size(276' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreMovieCertifications.Size = new System.Drawing.Size(276' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreMovieCertifications.TabIndex = 6;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboTVCertifications.Location = new System.Drawing.Point(378' 92);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboTVCertifications.Location = new System.Drawing.Point(378' 92);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboTVCertifications.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboTVCertifications.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboTVCertifications.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboTVCertifications.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboTVCertifications.Size = new System.Drawing.Size(90' 28);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboTVCertifications.Size = new System.Drawing.Size(90' 28);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboTVCertifications.TabIndex = 5;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreShowCertifications.Location = new System.Drawing.Point(15' 102);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreShowCertifications.Location = new System.Drawing.Point(15' 102);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreShowCertifications.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreShowCertifications.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreShowCertifications.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreShowCertifications.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreShowCertifications.Size = new System.Drawing.Size(275' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreShowCertifications.Size = new System.Drawing.Size(275' 24);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreShowCertifications.TabIndex = 4;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbImages.Location = new System.Drawing.Point(18' 525);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbImages.Location = new System.Drawing.Point(18' 525);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbImages.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbImages.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbImages.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbImages.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbImages.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbImages.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbImages.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbImages.Padding = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbImages.Size = new System.Drawing.Size(483' 75);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbImages.Size = new System.Drawing.Size(483' 75);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbImages.TabIndex = 9;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboPreferredImageLanguage.Location = new System.Drawing.Point(183' 25);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboPreferredImageLanguage.Location = new System.Drawing.Point(183' 25);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboPreferredImageLanguage.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboPreferredImageLanguage.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboPreferredImageLanguage.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboPreferredImageLanguage.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboPreferredImageLanguage.Size = new System.Drawing.Size(289' 28);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboPreferredImageLanguage.Size = new System.Drawing.Size(289' 28);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(16' 31);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(16' 31);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label1.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label1.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(155' 20);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(155' 20);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnAuthoriseApplication.Location = new System.Drawing.Point(14' 29);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnAuthoriseApplication.Location = new System.Drawing.Point(14' 29);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnAuthoriseApplication.Size = new System.Drawing.Size(445' 44);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnAuthoriseApplication.Size = new System.Drawing.Size(445' 44);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnAuthoriseApplication.TabIndex = 5;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblAuthorizeApplication.Location = new System.Drawing.Point(12' 80);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblAuthorizeApplication.Location = new System.Drawing.Point(12' 80);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblAuthorizeApplication.Size = new System.Drawing.Size(445' 40);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblAuthorizeApplication.Size = new System.Drawing.Size(445' 40);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblAuthorizeApplication.TabIndex = 6;
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(9F' 20F);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(9F' 20F);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1008' 771);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1008' 771);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(1021' 799);
Magic Number,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(1021' 799);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.listFolders.Location = new System.Drawing.Point(13' 39);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.listFolders.Location = new System.Drawing.Point(13' 39);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.listFolders.Size = new System.Drawing.Size(278' 212);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.listFolders.Size = new System.Drawing.Size(278' 212);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 12);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 12);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(279' 13);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(279' 13);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(216' 257);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(216' 257);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(75' 23);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(75' 23);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.TabIndex = 4;
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.Location = new System.Drawing.Point(300' 39);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.Location = new System.Drawing.Point(300' 39);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.Size = new System.Drawing.Size(26' 23);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.Size = new System.Drawing.Size(26' 23);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.TabIndex = 2;
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnDelete.Location = new System.Drawing.Point(300' 69);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnDelete.Location = new System.Drawing.Point(300' 69);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnDelete.Size = new System.Drawing.Size(26' 23);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnDelete.Size = new System.Drawing.Size(26' 23);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnDelete.TabIndex = 3;
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(336' 293);
Magic Number,TraktPlugin,FolderList,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(336' 293);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,MovieSelect_Load,The following statement contains a magic number: string filename = string.Concat(DatabaseUtility.Get(results' row' 1)' DatabaseUtility.Get(results' row' 2));
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.checkedListBoxMovies.Location = new System.Drawing.Point(12' 27);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.checkedListBoxMovies.Location = new System.Drawing.Point(12' 27);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.checkedListBoxMovies.Size = new System.Drawing.Size(269' 304);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.checkedListBoxMovies.Size = new System.Drawing.Size(269' 304);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnOk.Location = new System.Drawing.Point(206' 337);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnOk.Location = new System.Drawing.Point(206' 337);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnOk.Size = new System.Drawing.Size(75' 23);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnOk.Size = new System.Drawing.Size(75' 23);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.lbSelectMoviesLabel.Location = new System.Drawing.Point(12' 9);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.lbSelectMoviesLabel.Location = new System.Drawing.Point(12' 9);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.lbSelectMoviesLabel.Size = new System.Drawing.Size(173' 13);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.lbSelectMoviesLabel.Size = new System.Drawing.Size(173' 13);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.lbSelectMoviesLabel.TabIndex = 2;
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnFolderRestrictions.Location = new System.Drawing.Point(12' 337);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnFolderRestrictions.Location = new System.Drawing.Point(12' 337);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnFolderRestrictions.Size = new System.Drawing.Size(137' 23);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnFolderRestrictions.Size = new System.Drawing.Size(137' 23);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnFolderRestrictions.TabIndex = 3;
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(293' 368);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(293' 368);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(309' 406);
Magic Number,TraktPlugin,MovieSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(309' 406);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.checkedListBoxSeries.Location = new System.Drawing.Point(13' 28);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.checkedListBoxSeries.Location = new System.Drawing.Point(13' 28);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.checkedListBoxSeries.Size = new System.Drawing.Size(272' 304);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.checkedListBoxSeries.Size = new System.Drawing.Size(272' 304);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(210' 340);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(210' 340);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(75' 23);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(75' 23);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxToggleAll.Location = new System.Drawing.Point(13' 344);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxToggleAll.Location = new System.Drawing.Point(13' 344);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxToggleAll.Size = new System.Drawing.Size(70' 17);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxToggleAll.Size = new System.Drawing.Size(70' 17);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxToggleAll.TabIndex = 3;
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.labelSeriesSelected.Location = new System.Drawing.Point(98' 345);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.labelSeriesSelected.Location = new System.Drawing.Point(98' 345);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.labelSeriesSelected.Size = new System.Drawing.Size(93' 13);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.labelSeriesSelected.Size = new System.Drawing.Size(93' 13);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.labelSeriesSelected.TabIndex = 2;
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 9);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 9);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(161' 13);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(161' 13);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 4;
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(297' 385);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(297' 385);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(313' 423);
Magic Number,TraktPlugin,SeriesSelect,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(313' 423);
Magic Number,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetHiddenMoviesFromTrakt,The following statement contains a magic number: var onlineItems = TraktAPI.TraktAPI.GetHiddenItems("calendar"' "movie"' "min"' currentPage' 100);
Magic Number,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetHiddenMoviesFromTrakt,The following statement contains a magic number: var onlineItems = TraktAPI.TraktAPI.GetHiddenItems("recommendations"' "movie"' "min"' currentPage' 100);
Magic Number,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetHiddenSeasonsFromTrakt,The following statement contains a magic number: var onlineItems = TraktAPI.TraktAPI.GetHiddenItems("progress_collected"' "season"' "min"' currentPage' 100);
Magic Number,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetHiddenSeasonsFromTrakt,The following statement contains a magic number: var onlineItems = TraktAPI.TraktAPI.GetHiddenItems("progress_watched"' "season"' "min"' currentPage' 100);
Magic Number,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetHiddenShowsFromTrakt,The following statement contains a magic number: var onlineItems = TraktAPI.TraktAPI.GetHiddenItems("calendar"' "show"' "min"' currentPage' 100);
Magic Number,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetHiddenShowsFromTrakt,The following statement contains a magic number: var onlineItems = TraktAPI.TraktAPI.GetHiddenItems("recommendations"' "show"' "min"' currentPage' 100);
Magic Number,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetHiddenShowsFromTrakt,The following statement contains a magic number: var onlineItems = TraktAPI.TraktAPI.GetHiddenItems("progress_collected"' "show"' "min"' currentPage' 100);
Magic Number,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetHiddenShowsFromTrakt,The following statement contains a magic number: var onlineItems = TraktAPI.TraktAPI.GetHiddenItems("progress_watched"' "show"' "min"' currentPage' 100);
Magic Number,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,StatsMoviesLoved,The following statement contains a magic number: return RatedMovies.Where(m => m.Rating >= 6).Count();
Magic Number,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,StatsMoviesHated,The following statement contains a magic number: return RatedMovies.Where(m => m.Rating < 6).Count();
Magic Number,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,StatsShowsLoved,The following statement contains a magic number: return RatedShows.Where(s => s.Rating >= 6).Count();
Magic Number,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,StatsShowsHated,The following statement contains a magic number: return RatedShows.Where(s => s.Rating < 6).Count();
Magic Number,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,StatsEpisodesLoved,The following statement contains a magic number: return RatedEpisodes.Where(e => e.Rating >= 6).Count();
Magic Number,TraktPlugin,TraktCache,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,StatsEpisodesHated,The following statement contains a magic number: return RatedEpisodes.Where(e => e.Rating < 6).Count();
Magic Number,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetFacade,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishActivityProperties,The following statement contains a magic number: GUIUtils.SetProperty(string.Format("#Trakt.Activity.{0}.Day"' i)' activities[i].Timestamp.FromISO8601().ToLocalTime().DayOfWeek.ToString().Substring(0' 3));
Magic Number,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The following statement contains a magic number: GUICommon.SetProperty(string.Format("#Trakt.Movie.{0}.Ratings.Icon"' i)' (trendingItem.Movie.Rating >= 6) ? "love" : "hate");
Magic Number,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The following statement contains a magic number: GUICommon.SetProperty(string.Format("#Trakt.Show.{0}.Ratings.Icon"' i)' (trendingItem.Show.Rating >= 6) ? "love" : "hate");
Magic Number,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivityImage,The following statement contains a magic number: switch (action)              {                  case ActivityAction.checkin:                  case ActivityAction.watching:                  case ActivityAction.pause:                      imageFilename = "traktActivityWatching.png";                      break;                    case ActivityAction.seen:                  case ActivityAction.scrobble:                      imageFilename = "traktActivityWatched.png";                      break;                    case ActivityAction.collection:                      imageFilename = "traktActivityCollected.png";                      break;                    case ActivityAction.rating:                      imageFilename = activity.Rating > 5 ? "traktActivityLove.png" : "traktActivityHate.png";                      break;                    case ActivityAction.watchlist:                      imageFilename = "traktActivityWatchlist.png";                      break;                    case ActivityAction.shout:                  case ActivityAction.review:                      imageFilename = "traktActivityShout.png";                      break;                    case ActivityAction.item_added:                  case ActivityAction.created:                  case ActivityAction.updated:                      imageFilename = "traktActivityList.png";                      break;                    case ActivityAction.like:                      imageFilename = "traktActivityLike.png";                      break;                    case ActivityAction.hide_calendar:                  case ActivityAction.hide_recommendations:                  case ActivityAction.hide_progress_collected:                  case ActivityAction.hide_progress_watched:                      imageFilename = "traktHide.png";                      break;              }
Magic Number,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetTrendingMovies,The following statement contains a magic number: var trendingResult = TraktAPI.TraktAPI.GetTrendingMovies(1' TraktSettings.FilterTrendingOnDashboard ? 100 : TraktSkinSettings.MaxTrendingItems);
Magic Number,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetTrendingShows,The following statement contains a magic number: var trendingItems = TraktAPI.TraktAPI.GetTrendingShows(1' TraktSettings.FilterTrendingOnDashboard ? 100 : TraktSkinSettings.MaxTrendingItems);
Magic Number,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)              {                  case ((int)ActivityContextMenuItem.FilterActions):                      if (ShowActivityFilterActionsMenu())                      {                          ReloadActivityView = true;                          StartActivityPolling();                      }                      break;                    case ((int)ActivityContextMenuItem.FilterTypes):                      if (ShowActivityFilterTypesMenu())                      {                          ReloadActivityView = true;                          StartActivityPolling();                      }                      break;                    case ((int)ActivityContextMenuItem.ChangeView):                      if (ShowActivityViewMenu())                      {                          GetFullActivityLoad = true;                          StartActivityPolling();                      }                      else                      {                          ShowActivityContextMenu();                          return;                      }                      break;                    case ((int)ActivityContextMenuItem.UserProfile):                      GUIUserProfile.CurrentUser = activity.User.Username;                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.UserProfile);                      break;                    case ((int)ActivityContextMenuItem.FollowUser):                      if (GUIUtils.ShowYesNoDialog(Translation.Network' string.Format(Translation.SendFollowRequest' activity.User.Username)' true))                      {                          GUINetwork.FollowUser(activity.User);                          GUINetwork.ClearCache();                          (activityFacade.SelectedListItem as GUIUserListItem).IsFollowed = true;                      }                      break;                  case ((int)ActivityContextMenuItem.ShowSeasonInfo):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' activity.Show.ToJSON());                      break;                    case ((int)ActivityContextMenuItem.AddToList):                      if (activity.Movie != null)                          TraktHelper.AddRemoveMovieInUserList(activity.Movie' false);                      else if (activity.Episode != null)                          TraktHelper.AddRemoveEpisodeInUserList(activity.Episode' false);                      else if (activity.Season != null)                          TraktHelper.AddRemoveSeasonInUserList(activity.Season' false);                      else                          TraktHelper.AddRemoveShowInUserList(activity.Show' false);                      break;                    case ((int)ActivityContextMenuItem.AddToWatchList):                      if (activity.Movie != null)                          TraktHelper.AddMovieToWatchList(activity.Movie' true);                      else if (activity.Episode != null)                          TraktHelper.AddEpisodeToWatchList(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.AddEpisodeToWatchList(activity.Show' activity.Episodes.First());                      else if (activity.Season != null)                          TraktHelper.AddSeasonToWatchList(activity.Show' activity.Season.Number);                      else                          TraktHelper.AddShowToWatchList(activity.Show);                      break;                    case ((int)ActivityContextMenuItem.RemoveFromWatchList):                      if (activity.Movie != null)                          TraktHelper.RemoveMovieFromWatchList(activity.Movie' true);                      else if (activity.Episode != null)                          TraktHelper.RemoveEpisodeFromWatchList(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.RemoveEpisodeFromWatchList(activity.Show' activity.Episodes.First());                      else if (activity.Season != null)                          TraktHelper.RemoveSeasonFromWatchList(activity.Show' activity.Season.Number);                      else                          TraktHelper.RemoveShowFromWatchList(activity.Show);                        // force reload of activity view as we only check if the most recent item has changed                      ReloadActivityView = true;                      break;                    case ((int)ActivityContextMenuItem.MarkAsWatched):                      if (activity.Movie != null)                          TraktHelper.AddMovieToWatchHistory(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.AddEpisodeToWatchHistory(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.AddEpisodeToWatchHistory(activity.Show' activity.Episodes.First());                      break;                    case ((int)ActivityContextMenuItem.MarkAsUnwatched):                      if (activity.Movie != null)                          TraktHelper.RemoveMovieFromWatchHistory(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.RemoveEpisodeFromWatchHistory(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.RemoveEpisodeFromWatchHistory(activity.Show' activity.Episodes.First());                        ReloadActivityView = true;                      break;                    case ((int)ActivityContextMenuItem.AddToCollection):                      if (activity.Movie != null)                          TraktHelper.AddMovieToCollection(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.AddEpisodeToCollection(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.AddEpisodeToCollection(activity.Show' activity.Episodes.First());                      break;                    case ((int)ActivityContextMenuItem.RemoveFromCollection):                       if (activity.Movie != null)                          TraktHelper.RemoveMovieFromCollection(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.RemoveEpisodeFromCollection(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.RemoveEpisodeFromCollection(activity.Show' activity.Episodes.First());                        ReloadActivityView = true;                      break;                    case ((int)ActivityContextMenuItem.Shouts):                      if (activity.List != null)                          TraktHelper.ShowListShouts(activity.List);                      else if (activity.Movie != null)                          TraktHelper.ShowMovieShouts(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.ShowEpisodeShouts(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.ShowEpisodeShouts(activity.Show' activity.Episodes.First());                      else                          TraktHelper.ShowTVShowShouts(activity.Show);                      break;                    case ((int)ActivityContextMenuItem.Rate):                      if (activity.Movie != null)                          GUICommon.RateMovie(activity.Movie);                      else if (activity.Episode != null)                          GUICommon.RateEpisode(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          GUICommon.RateEpisode(activity.Show' activity.Episodes.First());                      else if (activity.Season != null)                          GUICommon.RateSeason(activity.Show' activity.Season);                      else                          GUICommon.RateShow(activity.Show);                      break;                    case (int)ActivityContextMenuItem.Unlike:                      if (activity.Shout != null)                          GUICommon.UnLikeComment(activity.Shout);                      else if (activity.List != null)                          GUICommon.UnLikeList(activity.List);                        ReloadActivityView = true;                      break;                    case ((int)ActivityContextMenuItem.Cast):                      if (activity.Movie != null)                      {                          var images = TmdbCache.GetMovieImages(activity.Movie.Ids.Tmdb' true);                            GUICreditsMovie.Movie = activity.Movie;                          GUICreditsMovie.Type = GUICreditsMovie.CreditType.Cast;                          GUICreditsMovie.Fanart = TmdbCache.GetMovieBackdropFilename(images);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsMovie);                      }                      else if (activity.Show != null)                      {                          var images = TmdbCache.GetShowImages(activity.Show.Ids.Tmdb' true);                            GUICreditsShow.Show = activity.Show;                          GUICreditsShow.Type = GUICreditsShow.CreditType.Cast;                          GUICreditsShow.Fanart = TmdbCache.GetShowBackdropFilename(images);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsShow);                      }                      break;                    case ((int)ActivityContextMenuItem.Crew):                      if (activity.Movie != null)                      {                          var images = TmdbCache.GetMovieImages(activity.Movie.Ids.Tmdb' true);                            GUICreditsMovie.Movie = activity.Movie;                          GUICreditsMovie.Type = GUICreditsMovie.CreditType.Crew;                          GUICreditsMovie.Fanart = TmdbCache.GetMovieBackdropFilename(images);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsMovie);                      }                      else if (activity.Show != null)                      {                          var images = TmdbCache.GetShowImages(activity.Show.Ids.Tmdb' true);                            GUICreditsShow.Show = activity.Show;                          GUICreditsShow.Type = GUICreditsShow.CreditType.Crew;                          GUICreditsShow.Fanart = TmdbCache.GetShowBackdropFilename(images);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsShow);                      }                      break;                                    case ((int)ActivityContextMenuItem.UnHide):                      if (activity.Movie != null)                      {                          TraktHelper.RemoveHiddenMovie(activity.Movie' activity.Action.Substring(5));                      }                      else if (activity.Season != null)                      {                          TraktHelper.RemoveHiddenSeason(activity.Season' activity.Action.Substring(5));                      }                      else if (activity.Show != null)                      {                          TraktHelper.RemoveHiddenShow(activity.Show' activity.Action.Substring(5));                      }                      ReloadActivityView = true;                      StartActivityPolling();                      break;                    case ((int)ActivityContextMenuItem.Trailers):                      if (activity.Movie != null)                           GUICommon.ShowMovieTrailersMenu(activity.Movie);                       else if (activity.Episodes != null && activity.Episodes.Count == 1)                          GUICommon.ShowTVShowTrailersMenu(activity.Show' activity.Episodes.First());                      else                                                  GUICommon.ShowTVShowTrailersMenu(activity.Show' activity.Episode);                      break;              }
Magic Number,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)              {                  case ((int)ActivityContextMenuItem.FilterActions):                      if (ShowActivityFilterActionsMenu())                      {                          ReloadActivityView = true;                          StartActivityPolling();                      }                      break;                    case ((int)ActivityContextMenuItem.FilterTypes):                      if (ShowActivityFilterTypesMenu())                      {                          ReloadActivityView = true;                          StartActivityPolling();                      }                      break;                    case ((int)ActivityContextMenuItem.ChangeView):                      if (ShowActivityViewMenu())                      {                          GetFullActivityLoad = true;                          StartActivityPolling();                      }                      else                      {                          ShowActivityContextMenu();                          return;                      }                      break;                    case ((int)ActivityContextMenuItem.UserProfile):                      GUIUserProfile.CurrentUser = activity.User.Username;                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.UserProfile);                      break;                    case ((int)ActivityContextMenuItem.FollowUser):                      if (GUIUtils.ShowYesNoDialog(Translation.Network' string.Format(Translation.SendFollowRequest' activity.User.Username)' true))                      {                          GUINetwork.FollowUser(activity.User);                          GUINetwork.ClearCache();                          (activityFacade.SelectedListItem as GUIUserListItem).IsFollowed = true;                      }                      break;                  case ((int)ActivityContextMenuItem.ShowSeasonInfo):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' activity.Show.ToJSON());                      break;                    case ((int)ActivityContextMenuItem.AddToList):                      if (activity.Movie != null)                          TraktHelper.AddRemoveMovieInUserList(activity.Movie' false);                      else if (activity.Episode != null)                          TraktHelper.AddRemoveEpisodeInUserList(activity.Episode' false);                      else if (activity.Season != null)                          TraktHelper.AddRemoveSeasonInUserList(activity.Season' false);                      else                          TraktHelper.AddRemoveShowInUserList(activity.Show' false);                      break;                    case ((int)ActivityContextMenuItem.AddToWatchList):                      if (activity.Movie != null)                          TraktHelper.AddMovieToWatchList(activity.Movie' true);                      else if (activity.Episode != null)                          TraktHelper.AddEpisodeToWatchList(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.AddEpisodeToWatchList(activity.Show' activity.Episodes.First());                      else if (activity.Season != null)                          TraktHelper.AddSeasonToWatchList(activity.Show' activity.Season.Number);                      else                          TraktHelper.AddShowToWatchList(activity.Show);                      break;                    case ((int)ActivityContextMenuItem.RemoveFromWatchList):                      if (activity.Movie != null)                          TraktHelper.RemoveMovieFromWatchList(activity.Movie' true);                      else if (activity.Episode != null)                          TraktHelper.RemoveEpisodeFromWatchList(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.RemoveEpisodeFromWatchList(activity.Show' activity.Episodes.First());                      else if (activity.Season != null)                          TraktHelper.RemoveSeasonFromWatchList(activity.Show' activity.Season.Number);                      else                          TraktHelper.RemoveShowFromWatchList(activity.Show);                        // force reload of activity view as we only check if the most recent item has changed                      ReloadActivityView = true;                      break;                    case ((int)ActivityContextMenuItem.MarkAsWatched):                      if (activity.Movie != null)                          TraktHelper.AddMovieToWatchHistory(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.AddEpisodeToWatchHistory(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.AddEpisodeToWatchHistory(activity.Show' activity.Episodes.First());                      break;                    case ((int)ActivityContextMenuItem.MarkAsUnwatched):                      if (activity.Movie != null)                          TraktHelper.RemoveMovieFromWatchHistory(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.RemoveEpisodeFromWatchHistory(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.RemoveEpisodeFromWatchHistory(activity.Show' activity.Episodes.First());                        ReloadActivityView = true;                      break;                    case ((int)ActivityContextMenuItem.AddToCollection):                      if (activity.Movie != null)                          TraktHelper.AddMovieToCollection(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.AddEpisodeToCollection(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.AddEpisodeToCollection(activity.Show' activity.Episodes.First());                      break;                    case ((int)ActivityContextMenuItem.RemoveFromCollection):                       if (activity.Movie != null)                          TraktHelper.RemoveMovieFromCollection(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.RemoveEpisodeFromCollection(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.RemoveEpisodeFromCollection(activity.Show' activity.Episodes.First());                        ReloadActivityView = true;                      break;                    case ((int)ActivityContextMenuItem.Shouts):                      if (activity.List != null)                          TraktHelper.ShowListShouts(activity.List);                      else if (activity.Movie != null)                          TraktHelper.ShowMovieShouts(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.ShowEpisodeShouts(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.ShowEpisodeShouts(activity.Show' activity.Episodes.First());                      else                          TraktHelper.ShowTVShowShouts(activity.Show);                      break;                    case ((int)ActivityContextMenuItem.Rate):                      if (activity.Movie != null)                          GUICommon.RateMovie(activity.Movie);                      else if (activity.Episode != null)                          GUICommon.RateEpisode(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          GUICommon.RateEpisode(activity.Show' activity.Episodes.First());                      else if (activity.Season != null)                          GUICommon.RateSeason(activity.Show' activity.Season);                      else                          GUICommon.RateShow(activity.Show);                      break;                    case (int)ActivityContextMenuItem.Unlike:                      if (activity.Shout != null)                          GUICommon.UnLikeComment(activity.Shout);                      else if (activity.List != null)                          GUICommon.UnLikeList(activity.List);                        ReloadActivityView = true;                      break;                    case ((int)ActivityContextMenuItem.Cast):                      if (activity.Movie != null)                      {                          var images = TmdbCache.GetMovieImages(activity.Movie.Ids.Tmdb' true);                            GUICreditsMovie.Movie = activity.Movie;                          GUICreditsMovie.Type = GUICreditsMovie.CreditType.Cast;                          GUICreditsMovie.Fanart = TmdbCache.GetMovieBackdropFilename(images);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsMovie);                      }                      else if (activity.Show != null)                      {                          var images = TmdbCache.GetShowImages(activity.Show.Ids.Tmdb' true);                            GUICreditsShow.Show = activity.Show;                          GUICreditsShow.Type = GUICreditsShow.CreditType.Cast;                          GUICreditsShow.Fanart = TmdbCache.GetShowBackdropFilename(images);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsShow);                      }                      break;                    case ((int)ActivityContextMenuItem.Crew):                      if (activity.Movie != null)                      {                          var images = TmdbCache.GetMovieImages(activity.Movie.Ids.Tmdb' true);                            GUICreditsMovie.Movie = activity.Movie;                          GUICreditsMovie.Type = GUICreditsMovie.CreditType.Crew;                          GUICreditsMovie.Fanart = TmdbCache.GetMovieBackdropFilename(images);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsMovie);                      }                      else if (activity.Show != null)                      {                          var images = TmdbCache.GetShowImages(activity.Show.Ids.Tmdb' true);                            GUICreditsShow.Show = activity.Show;                          GUICreditsShow.Type = GUICreditsShow.CreditType.Crew;                          GUICreditsShow.Fanart = TmdbCache.GetShowBackdropFilename(images);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsShow);                      }                      break;                                    case ((int)ActivityContextMenuItem.UnHide):                      if (activity.Movie != null)                      {                          TraktHelper.RemoveHiddenMovie(activity.Movie' activity.Action.Substring(5));                      }                      else if (activity.Season != null)                      {                          TraktHelper.RemoveHiddenSeason(activity.Season' activity.Action.Substring(5));                      }                      else if (activity.Show != null)                      {                          TraktHelper.RemoveHiddenShow(activity.Show' activity.Action.Substring(5));                      }                      ReloadActivityView = true;                      StartActivityPolling();                      break;                    case ((int)ActivityContextMenuItem.Trailers):                      if (activity.Movie != null)                           GUICommon.ShowMovieTrailersMenu(activity.Movie);                       else if (activity.Episodes != null && activity.Episodes.Count == 1)                          GUICommon.ShowTVShowTrailersMenu(activity.Show' activity.Episodes.First());                      else                                                  GUICommon.ShowTVShowTrailersMenu(activity.Show' activity.Episode);                      break;              }
Magic Number,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)              {                  case ((int)ActivityContextMenuItem.FilterActions):                      if (ShowActivityFilterActionsMenu())                      {                          ReloadActivityView = true;                          StartActivityPolling();                      }                      break;                    case ((int)ActivityContextMenuItem.FilterTypes):                      if (ShowActivityFilterTypesMenu())                      {                          ReloadActivityView = true;                          StartActivityPolling();                      }                      break;                    case ((int)ActivityContextMenuItem.ChangeView):                      if (ShowActivityViewMenu())                      {                          GetFullActivityLoad = true;                          StartActivityPolling();                      }                      else                      {                          ShowActivityContextMenu();                          return;                      }                      break;                    case ((int)ActivityContextMenuItem.UserProfile):                      GUIUserProfile.CurrentUser = activity.User.Username;                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.UserProfile);                      break;                    case ((int)ActivityContextMenuItem.FollowUser):                      if (GUIUtils.ShowYesNoDialog(Translation.Network' string.Format(Translation.SendFollowRequest' activity.User.Username)' true))                      {                          GUINetwork.FollowUser(activity.User);                          GUINetwork.ClearCache();                          (activityFacade.SelectedListItem as GUIUserListItem).IsFollowed = true;                      }                      break;                  case ((int)ActivityContextMenuItem.ShowSeasonInfo):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' activity.Show.ToJSON());                      break;                    case ((int)ActivityContextMenuItem.AddToList):                      if (activity.Movie != null)                          TraktHelper.AddRemoveMovieInUserList(activity.Movie' false);                      else if (activity.Episode != null)                          TraktHelper.AddRemoveEpisodeInUserList(activity.Episode' false);                      else if (activity.Season != null)                          TraktHelper.AddRemoveSeasonInUserList(activity.Season' false);                      else                          TraktHelper.AddRemoveShowInUserList(activity.Show' false);                      break;                    case ((int)ActivityContextMenuItem.AddToWatchList):                      if (activity.Movie != null)                          TraktHelper.AddMovieToWatchList(activity.Movie' true);                      else if (activity.Episode != null)                          TraktHelper.AddEpisodeToWatchList(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.AddEpisodeToWatchList(activity.Show' activity.Episodes.First());                      else if (activity.Season != null)                          TraktHelper.AddSeasonToWatchList(activity.Show' activity.Season.Number);                      else                          TraktHelper.AddShowToWatchList(activity.Show);                      break;                    case ((int)ActivityContextMenuItem.RemoveFromWatchList):                      if (activity.Movie != null)                          TraktHelper.RemoveMovieFromWatchList(activity.Movie' true);                      else if (activity.Episode != null)                          TraktHelper.RemoveEpisodeFromWatchList(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.RemoveEpisodeFromWatchList(activity.Show' activity.Episodes.First());                      else if (activity.Season != null)                          TraktHelper.RemoveSeasonFromWatchList(activity.Show' activity.Season.Number);                      else                          TraktHelper.RemoveShowFromWatchList(activity.Show);                        // force reload of activity view as we only check if the most recent item has changed                      ReloadActivityView = true;                      break;                    case ((int)ActivityContextMenuItem.MarkAsWatched):                      if (activity.Movie != null)                          TraktHelper.AddMovieToWatchHistory(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.AddEpisodeToWatchHistory(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.AddEpisodeToWatchHistory(activity.Show' activity.Episodes.First());                      break;                    case ((int)ActivityContextMenuItem.MarkAsUnwatched):                      if (activity.Movie != null)                          TraktHelper.RemoveMovieFromWatchHistory(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.RemoveEpisodeFromWatchHistory(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.RemoveEpisodeFromWatchHistory(activity.Show' activity.Episodes.First());                        ReloadActivityView = true;                      break;                    case ((int)ActivityContextMenuItem.AddToCollection):                      if (activity.Movie != null)                          TraktHelper.AddMovieToCollection(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.AddEpisodeToCollection(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.AddEpisodeToCollection(activity.Show' activity.Episodes.First());                      break;                    case ((int)ActivityContextMenuItem.RemoveFromCollection):                       if (activity.Movie != null)                          TraktHelper.RemoveMovieFromCollection(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.RemoveEpisodeFromCollection(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.RemoveEpisodeFromCollection(activity.Show' activity.Episodes.First());                        ReloadActivityView = true;                      break;                    case ((int)ActivityContextMenuItem.Shouts):                      if (activity.List != null)                          TraktHelper.ShowListShouts(activity.List);                      else if (activity.Movie != null)                          TraktHelper.ShowMovieShouts(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.ShowEpisodeShouts(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.ShowEpisodeShouts(activity.Show' activity.Episodes.First());                      else                          TraktHelper.ShowTVShowShouts(activity.Show);                      break;                    case ((int)ActivityContextMenuItem.Rate):                      if (activity.Movie != null)                          GUICommon.RateMovie(activity.Movie);                      else if (activity.Episode != null)                          GUICommon.RateEpisode(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          GUICommon.RateEpisode(activity.Show' activity.Episodes.First());                      else if (activity.Season != null)                          GUICommon.RateSeason(activity.Show' activity.Season);                      else                          GUICommon.RateShow(activity.Show);                      break;                    case (int)ActivityContextMenuItem.Unlike:                      if (activity.Shout != null)                          GUICommon.UnLikeComment(activity.Shout);                      else if (activity.List != null)                          GUICommon.UnLikeList(activity.List);                        ReloadActivityView = true;                      break;                    case ((int)ActivityContextMenuItem.Cast):                      if (activity.Movie != null)                      {                          var images = TmdbCache.GetMovieImages(activity.Movie.Ids.Tmdb' true);                            GUICreditsMovie.Movie = activity.Movie;                          GUICreditsMovie.Type = GUICreditsMovie.CreditType.Cast;                          GUICreditsMovie.Fanart = TmdbCache.GetMovieBackdropFilename(images);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsMovie);                      }                      else if (activity.Show != null)                      {                          var images = TmdbCache.GetShowImages(activity.Show.Ids.Tmdb' true);                            GUICreditsShow.Show = activity.Show;                          GUICreditsShow.Type = GUICreditsShow.CreditType.Cast;                          GUICreditsShow.Fanart = TmdbCache.GetShowBackdropFilename(images);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsShow);                      }                      break;                    case ((int)ActivityContextMenuItem.Crew):                      if (activity.Movie != null)                      {                          var images = TmdbCache.GetMovieImages(activity.Movie.Ids.Tmdb' true);                            GUICreditsMovie.Movie = activity.Movie;                          GUICreditsMovie.Type = GUICreditsMovie.CreditType.Crew;                          GUICreditsMovie.Fanart = TmdbCache.GetMovieBackdropFilename(images);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsMovie);                      }                      else if (activity.Show != null)                      {                          var images = TmdbCache.GetShowImages(activity.Show.Ids.Tmdb' true);                            GUICreditsShow.Show = activity.Show;                          GUICreditsShow.Type = GUICreditsShow.CreditType.Crew;                          GUICreditsShow.Fanart = TmdbCache.GetShowBackdropFilename(images);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsShow);                      }                      break;                                    case ((int)ActivityContextMenuItem.UnHide):                      if (activity.Movie != null)                      {                          TraktHelper.RemoveHiddenMovie(activity.Movie' activity.Action.Substring(5));                      }                      else if (activity.Season != null)                      {                          TraktHelper.RemoveHiddenSeason(activity.Season' activity.Action.Substring(5));                      }                      else if (activity.Show != null)                      {                          TraktHelper.RemoveHiddenShow(activity.Show' activity.Action.Substring(5));                      }                      ReloadActivityView = true;                      StartActivityPolling();                      break;                    case ((int)ActivityContextMenuItem.Trailers):                      if (activity.Movie != null)                           GUICommon.ShowMovieTrailersMenu(activity.Movie);                       else if (activity.Episodes != null && activity.Episodes.Count == 1)                          GUICommon.ShowTVShowTrailersMenu(activity.Show' activity.Episodes.First());                      else                                                  GUICommon.ShowTVShowTrailersMenu(activity.Show' activity.Episode);                      break;              }
Magic Number,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.Message)              {                                     case GUIMessage.MessageType.GUI_MSG_CLICKED:                      if (message.Param1 != 7) return; // mouse click' enter key' remote ok' only                        if (message.SenderControlId == (int)TraktDashboardControls.ActivityFacade)                      {                          var activityFacade = GetFacade((int)TraktDashboardControls.ActivityFacade);                          if (activityFacade == null) return;                            var activity = activityFacade.SelectedListItem.TVTag as TraktActivity.Activity;                          if (activity == null || string.IsNullOrEmpty(activity.Action) || string.IsNullOrEmpty(activity.Type))                              return;                            var action = (ActivityAction)Enum.Parse(typeof(ActivityAction)' activity.Action);                          var type = (ActivityType)Enum.Parse(typeof(ActivityType)' activity.Type);                            switch (action)                          {                              case ActivityAction.review:                              case ActivityAction.shout:                                  // view shout in shouts window                                  ViewShout(activity);                                  break;                                case ActivityAction.item_added:                              case ActivityAction.updated:                                  // load users list                                  GUIListItems.CurrentList = activity.List;                                  GUIListItems.CurrentUser = activity.User.Username;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CustomListItems);                                  break;                                case ActivityAction.created:                                  // load lists menu                                  GUILists.CurrentUser = activity.User.Username;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CustomLists);                                  break;                                case ActivityAction.watchlist:                                  // load users watchlist                                  if (type == ActivityType.movie)                                  {                                      GUIWatchListMovies.CurrentUser = activity.User.Username;                                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListMovies);                                  }                                  else if (type == ActivityType.show)                                  {                                      GUIWatchListShows.CurrentUser = activity.User.Username;                                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListShows);                                  }                                  else                                  {                                      GUIWatchListEpisodes.CurrentUser = activity.User.Username;                                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListEpisodes);                                  }                                  break;                                case ActivityAction.like:                                  if (type == ActivityType.comment)                                  {                                      // view comment                                      GUIUtils.ShowTextDialog(Translation.Comment' activity.Shout.Text);                                  }                                  else if (type == ActivityType.list)                                  {                                      // load the liked list                                      if (activity.List.User != null)                                      {                                          GUIListItems.CurrentList = activity.List;                                          GUIListItems.CurrentUser = activity.List.User.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CustomListItems);                                      }                                      else                                      {                                          TraktLogger.Warning("No user associated with liked list. ID = '{0}'' Name = '{1}'' Privacy = '{2}'"' activity.List.Ids.Trakt' activity.List.Name' activity.List.Privacy);                                       }                                  }                                  break;                                default:                                  PlayActivityItem(true);                                  break;                          }                      }                      if (message.SenderControlId == (int)TraktDashboardControls.TrendingShowsFacade)                      {                          if (TraktSettings.EnableJumpToForTVShows)                          {                              PlayShow(true);                          }                          else                          {                              var facade = GetFacade((int)TraktDashboardControls.TrendingShowsFacade);                              if (facade == null) return;                                var trendingItem = facade.SelectedListItem.TVTag as TraktShowTrending;                              if (trendingItem == null) return;                                GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' trendingItem.Show.ToJSON());                          }                      }                      if (message.SenderControlId == (int)TraktDashboardControls.TrendingMoviesFacade)                      {                          PlayMovie(true);                      }                      break;                    case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:                      // doesn't work' only if overridden from a guiwindow class                      break;                    default:                      break;              }
Magic Number,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GUIWindowManager_OnNewAction,The following statement contains a magic number: switch (action.wID)              {                  case Action.ActionType.ACTION_CONTEXT_MENU:                      if (activeWindow.GetFocusControlId() == (int)TraktDashboardControls.ActivityFacade)                      {                          TrendingContextMenuIsActive = true;                          ShowActivityContextMenu();                      }                      else if (activeWindow.GetFocusControlId() == (int)TraktDashboardControls.TrendingMoviesFacade)                      {                          TrendingContextMenuIsActive = true;                          ShowTrendingMoviesContextMenu();                      }                      else if (activeWindow.GetFocusControlId() == (int)TraktDashboardControls.TrendingShowsFacade)                      {                          TrendingContextMenuIsActive = true;                          ShowTrendingShowsContextMenu();                      }                      TrendingContextMenuIsActive = false;                      break;                    case Action.ActionType.ACTION_PLAY:                  case Action.ActionType.ACTION_MUSIC_PLAY:                      if (activeWindow.GetFocusControlId() == (int)TraktDashboardControls.ActivityFacade)                      {                          PlayActivityItem(false);                      }                      if (activeWindow.GetFocusControlId() == (int)TraktDashboardControls.TrendingShowsFacade)                      {                          PlayShow(false);                      }                      if (activeWindow.GetFocusControlId() == (int)TraktDashboardControls.TrendingMoviesFacade)                      {                          PlayMovie(false);                      }                      break;                                    case Action.ActionType.ACTION_MOVE_DOWN:                      // handle ondown for filmstrips as mediaportal skin navigation for ondown is broken                      // issue has been resolved in MP 1.5.0 so only do it for earlier releases                      if (TraktSettings.MPVersion < new Version(1' 5' 0' 0))                      {                          if (!TrendingContextMenuIsActive && activeWindow.GetFocusControlId() == (int)TraktDashboardControls.TrendingShowsFacade)                          {                              var control = GetFacade(activeWindow.GetFocusControlId());                              if (control == null) return;                                if (control.CurrentLayout != GUIFacadeControl.Layout.Filmstrip) return;                                // set focus on correct control                              GUIControl.FocusControl(GUIWindowManager.ActiveWindow' (int)TraktDashboardControls.TrendingMoviesFacade);                          }                          else if (!TrendingContextMenuIsActive && activeWindow.GetFocusControlId() == (int)TraktDashboardControls.TrendingMoviesFacade)                          {                              var control = GetFacade(activeWindow.GetFocusControlId());                              if (control == null) return;                                if (control.CurrentLayout != GUIFacadeControl.Layout.Filmstrip) return;                                // set focus on correct control                              GUIControl.FocusControl(GUIWindowManager.ActiveWindow' (int)TraktDashboardControls.ActivityFacade);                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,Init,The following statement contains a magic number: StatisticsTimer = new Timer(new TimerCallback((o) => { GetStatistics(); })' null' 3000' 3600000);
Magic Number,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,Init,The following statement contains a magic number: StatisticsTimer = new Timer(new TimerCallback((o) => { GetStatistics(); })' null' 3000' 3600000);
Magic Number,TraktPlugin,TraktLists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLists.cs,GetListDetailsFromUser,The following statement contains a magic number: selectedItem = 2;
Magic Number,TraktPlugin,TraktLogger,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,TraktLogger,The following statement contains a magic number: TraktSettings.LogLevel = 2;
Magic Number,TraktPlugin,TraktLogger,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,TraktLogger,The following statement contains a magic number: int maxLogFiles = 5;
Magic Number,TraktPlugin,TraktLogger,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,Info,The following statement contains a magic number: TraktSettings.LogLevel >= 2
Magic Number,TraktPlugin,TraktLogger,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,Debug,The following statement contains a magic number: TraktSettings.LogLevel >= 3
Magic Number,TraktPlugin,TraktLogger,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,CreatePrefix,The following statement contains a magic number: return DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff") + " [{0}] " + String.Format("[{0}][{1}]"' Thread.CurrentThread.Name' Thread.CurrentThread.ManagedThreadId.ToString().PadLeft(2''0')) +  ": {1}";
Magic Number,TraktPlugin,TraktLogger,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,TraktAPI_OnDataReceived,The following statement contains a magic number: TraktSettings.LogLevel >= 3
Magic Number,TraktPlugin,TraktLogger,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,TraktAPI_OnLatency,The following statement contains a magic number: serverRuntime *= 1000.0;
Magic Number,TraktPlugin,TraktLogger,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,TmdbAPI_OnDataReceived,The following statement contains a magic number: TraktSettings.LogLevel >= 3
Magic Number,TraktPlugin,TraktLogger,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,LogTraktResponse,The following statement contains a magic number: TraktSettings.LogLevel < 3
Magic Number,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,Init,The following statement contains a magic number: syncLibraryTimer = new Timer(new TimerCallback((o) => { SyncLibrary(); })' null' TraktSettings.SyncStartDelay' TraktSettings.SyncTimerLength * 3600000);
Magic Number,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,StartSync,The following statement contains a magic number: ChangeSyncTimer(0' TraktSettings.SyncTimerLength * 3600000);
Magic Number,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: var checkStatus = new Thread(() =>                  {                      if (TraktSettings.AccountStatus == ConnectionState.Invalid)                      {                          TraktSettings.AccountStatus = ConnectionState.Pending;                                                    // Re-Check and Notify                          if (TraktSettings.AccountStatus == ConnectionState.UnAuthorised)                          {                              Thread.Sleep(10000);                              GUIUtils.ShowNotifyDialog(Translation.Error' Translation.UnAuthorized);                          }                          else if (TraktSettings.AccountStatus == ConnectionState.Invalid)                          {                              Thread.Sleep(10000);                              GUIUtils.ShowNotifyDialog(Translation.Error' Translation.LoginFailedServerError);                          }                      }                  })                  {                      IsBackground = true'                      Name = "CheckConnection"                  };
Magic Number,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: var checkStatus = new Thread(() =>                  {                      if (TraktSettings.AccountStatus == ConnectionState.Invalid)                      {                          TraktSettings.AccountStatus = ConnectionState.Pending;                                                    // Re-Check and Notify                          if (TraktSettings.AccountStatus == ConnectionState.UnAuthorised)                          {                              Thread.Sleep(10000);                              GUIUtils.ShowNotifyDialog(Translation.Error' Translation.UnAuthorized);                          }                          else if (TraktSettings.AccountStatus == ConnectionState.Invalid)                          {                              Thread.Sleep(10000);                              GUIUtils.ShowNotifyDialog(Translation.Error' Translation.LoginFailedServerError);                          }                      }                  })                  {                      IsBackground = true'                      Name = "CheckConnection"                  };
Magic Number,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: Thread pluginHandlerCheckThread = new Thread(delegate(object obj)                {                  if (GUISettingsPlugins.PluginHandlersChanged)                  {                    LoadPluginHandlers();                  }                    // Help user get started if no plugins enabled                  if (TraktHandlers.Count == 0)                  {                    if (GUIUtils.ShowYesNoDialog(Translation.Plugins' Translation.NoPluginsEnabled' true))                    {                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.SettingsPlugins);                    }                    return;                  }                    if (GUISettingsPlugins.PluginHandlersAdded)                  {                    if (GUIUtils.ShowYesNoDialog(Translation.Synchronize' Translation.SynchronizeNow' true))                        ChangeSyncTimer(0' TraktSettings.SyncTimerLength * 3600000);                  }                    GUISettingsPlugins.PluginHandlersAdded = false;                  GUISettingsPlugins.PluginHandlersChanged = false;                })                {                  IsBackground = true'                  Name = "PluginCheck"                };
Magic Number,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: var followerReqThread = new Thread((o) =>                  {                      if (TraktSettings.AccountStatus == ConnectionState.Connected)                      {                          var followerRequests = TraktCache.FollowerRequests;                          if (followerRequests == null)                          {                              TraktLogger.Error("Failed to retrieve follower requests");                              return;                          }                            TraktLogger.Info("Found {0} follower requests for user"' followerRequests.Count());                          if (followerRequests.Count() > 0)                          {                              Thread.Sleep(10000);                              GUIUtils.ShowNotifyDialog(Translation.FollowerRequests' string.Format(Translation.FollowerRequestMessage' followerRequests.Count().ToString()));                          }                      }                  })                  {                      IsBackground = true'                      Name = "FollowReq"                  };
Magic Number,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.Message)              {                  case GUIMessage.MessageType.GUI_MSG_CLICKED:                      switch (GUIWindowManager.ActiveWindow)                      {                          case (int)ExternalPluginWindows.OnlineVideos:                              #region WatchList/CustomList Button                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                      // Confirm we are in IMDB/iTunes Trailer Details view                                      // This will give us enough information to send to trakt                                      bool isDetails = GUIPropertyManager.GetProperty("#OnlineVideos.state").ToLowerInvariant() == "details";                                      string siteUtil = GUIPropertyManager.GetProperty("#OnlineVideos.selectedSiteUtil").ToLowerInvariant();                                      if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers"))                                      {                                          title = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Title").Trim();                                          year = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Year").Trim();                                          if (siteUtil == "imdb")                                          {                                              // IMDb site exposes IMDb ID' use this to get a better match on trakt                                              // this property is new' check for null in case user hasn't updated site                                              imdbid = GUIPropertyManager.GetProperty("#OnlineVideos.Details.IMDbId");                                              if (imdbid == null) imdbid = string.Empty;                                                // could be a TV Show                                              type = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Type").ToLowerInvariant();                                          }                                          if ((!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)) || imdbid.StartsWith("tt"))                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          }                                          // Return focus to details list now so we dont go in a loop                                          GUIControl.FocusControl((int)ExternalPluginWindows.OnlineVideos' 51);                                      }                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.Showtimes:                              #region WatchList/CustomList Button                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                      // Confirm we are in Showtimes Details view                                      // This will give us enough information to send to trakt                                      bool isDetails = GUIWindowManager.GetWindow(GUIWindowManager.ActiveWindow).GetControl(24).Visible;                                      if (isDetails)                                      {                                          title = GUIPropertyManager.GetProperty("#st_title").Trim();                                          DateTime releaseDate = DateTime.MinValue;                                            if (DateTime.TryParse(GUIPropertyManager.GetProperty("#st_releasedate").Trim()' out releaseDate))                                          {                                              year = releaseDate.Year.ToString();                                          }                                                                                                                           imdbid = GUIPropertyManager.GetProperty("#st_imdb");                                          if (imdbid == null) imdbid = string.Empty;                                            tmdbid = GUIPropertyManager.GetProperty("#st_tmdb");                                          if (tmdbid == null) imdbid = string.Empty;                                            if ((!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)) || imdbid.StartsWith("tt") || !string.IsNullOrEmpty(tmdbid))                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          }                                          // set focus to next button so we dont go in a loop                                          GUIControl.FocusControl((int)ExternalPluginWindows.Showtimes' 42);                                      }                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.VideoInfo:                              #region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      type = "movie";                                      title = GUIPropertyManager.GetProperty("#title").Trim();                                      year = GUIPropertyManager.GetProperty("#year").Trim();                                      imdbid = GUIPropertyManager.GetProperty("#imdbnumber").Trim();                                      tmdbid = (GUIPropertyManager.GetProperty("#tmdbnumber") ?? string.Empty).Trim();                                        MediaPortal.Util.FanArt.GetFanArtfilename(title' 0' out fanart);                                      if (fanart.ToLowerInvariant().Equals("unknown"))                                      {                                          string movieid = GUIPropertyManager.GetProperty("#movieid").Trim();                                          MediaPortal.Util.FanArt.GetFanArtfilename(movieid' 0' out fanart);                                      }                                                                            searchPeople = new SearchPeople();                                      string people = GUIPropertyManager.GetProperty("#cast").Trim();                                      if (people != string.Empty && people != "unknown")                                      {                                          // actors seperated by newlines                                          var peopleAndRoles = people.Split('\n').Select(s => s.Trim());                                            // each actor string also includes the role: {0} as {1} &#10;                                          // get the seperator from the localised string and then reverse the formatted string                                          string roleSepString = GUILocalizeStrings.Get(1320).Split(' ')[1].Trim();                                            foreach (var personAndRole in peopleAndRoles)                                          {                                              var personAndRoleStrings = personAndRole.Split(new string[] { string.Format(" {0} "' roleSepString) }' StringSplitOptions.None);                                              searchPeople.Actors.Add(personAndRoleStrings.First());                                          }                                      }                                        people = GUIPropertyManager.GetProperty("#director").Trim();                                      if (people != string.Empty && people != "unknown") searchPeople.Directors.AddRange(people.Split(''').Select(s => s.Trim()));                                        people = GUIPropertyManager.GetProperty("#credits").Trim();                                      if (people != string.Empty && people != "unknown")                                      {                                          var writers = people.Split(''').Select(s => s.Trim());                                          foreach(var writer in writers)                                          {                                              // remove the writer type e.g. (Story)' (Screenplay)                                              searchPeople.Writers.Add(writer.Split('(').First().Trim());                                          }                                      }                                        if (!string.IsNullOrEmpty(imdbid) || (!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)))                                      {                                          if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                      }                                        // Set focus to Play Button now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.VideoInfo' 2);                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.MovingPictures:                              #region WatchList/CustomList/Rate/Shouts/RelatedItem/Search                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      type = "movie";                                      updatePluginFilters = true;                                      title = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.title").Trim();                                      year = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.year").Trim();                                      imdbid = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.imdb_id").Trim();                                      fanart = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.backdropfullpath").Trim();                                      isWatched = GUIPropertyManager.GetProperty("#MovingPictures.UserMovieSettings.watched").Trim() != "0";                                        // get movie people from database                                      searchPeople = new SearchPeople();                                      if (TraktHelper.IsMovingPicturesAvailableAndEnabled)                                      {                                          int? movieID = null;                                          int iYear = 0; int.TryParse(year' out iYear);                                          if (MovingPictures.FindMovieID(title' iYear' imdbid' tmdbid.ToNullableInt32()' ref movieID))                                              MovingPictures.GetMoviePersonInfo(movieID' out searchPeople);                                      }                                                                            if (!string.IsNullOrEmpty(imdbid) || (!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)))                                      {                                          if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.SearchBy) validSearchItem = true;                                      }                                        // Set focus to Play Button now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.MovingPictures' 6);                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.TVSeries:                              #region WatchList/CustomList/Rate/Shouts/Related                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      Object obj = TVSeries.SelectedObject;                                      bool validItem = false;                                      if (obj != null)                                      {                                          searchPeople = new SearchPeople();                                            switch (TVSeries.GetSelectedType(obj))                                          {                                              case TVSeries.SelectedType.Episode:                                                  type = "episode";                                                  validItem = TVSeries.GetEpisodeInfo(obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);                                                  validItem |= TVSeries.GetEpisodePersonInfo(obj' out searchPeople);                                                  break;                                                case TVSeries.SelectedType.Series:                                                  type = "series";                                                  validItem =  TVSeries.GetSeriesInfo(obj' out title' out year' out showtvdbid);                                                  validItem |= TVSeries.GetSeriesPersonInfo(obj' out searchPeople);                                                  break;                                                default:                                                  break;                                          }                                            fanart = GUIPropertyManager.GetProperty("#TVSeries.Current.Fanart").Trim();                                            if (validItem)                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.SearchBy) validSearchItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                          }                                      }                                        // Set focus to Facade now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.TVSeries' 50);                                      break;                              }                              #endregion                                                          break;                      }                      break;                                    default:                      break;              }
Magic Number,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.Message)              {                  case GUIMessage.MessageType.GUI_MSG_CLICKED:                      switch (GUIWindowManager.ActiveWindow)                      {                          case (int)ExternalPluginWindows.OnlineVideos:                              #region WatchList/CustomList Button                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                      // Confirm we are in IMDB/iTunes Trailer Details view                                      // This will give us enough information to send to trakt                                      bool isDetails = GUIPropertyManager.GetProperty("#OnlineVideos.state").ToLowerInvariant() == "details";                                      string siteUtil = GUIPropertyManager.GetProperty("#OnlineVideos.selectedSiteUtil").ToLowerInvariant();                                      if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers"))                                      {                                          title = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Title").Trim();                                          year = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Year").Trim();                                          if (siteUtil == "imdb")                                          {                                              // IMDb site exposes IMDb ID' use this to get a better match on trakt                                              // this property is new' check for null in case user hasn't updated site                                              imdbid = GUIPropertyManager.GetProperty("#OnlineVideos.Details.IMDbId");                                              if (imdbid == null) imdbid = string.Empty;                                                // could be a TV Show                                              type = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Type").ToLowerInvariant();                                          }                                          if ((!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)) || imdbid.StartsWith("tt"))                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          }                                          // Return focus to details list now so we dont go in a loop                                          GUIControl.FocusControl((int)ExternalPluginWindows.OnlineVideos' 51);                                      }                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.Showtimes:                              #region WatchList/CustomList Button                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                      // Confirm we are in Showtimes Details view                                      // This will give us enough information to send to trakt                                      bool isDetails = GUIWindowManager.GetWindow(GUIWindowManager.ActiveWindow).GetControl(24).Visible;                                      if (isDetails)                                      {                                          title = GUIPropertyManager.GetProperty("#st_title").Trim();                                          DateTime releaseDate = DateTime.MinValue;                                            if (DateTime.TryParse(GUIPropertyManager.GetProperty("#st_releasedate").Trim()' out releaseDate))                                          {                                              year = releaseDate.Year.ToString();                                          }                                                                                                                           imdbid = GUIPropertyManager.GetProperty("#st_imdb");                                          if (imdbid == null) imdbid = string.Empty;                                            tmdbid = GUIPropertyManager.GetProperty("#st_tmdb");                                          if (tmdbid == null) imdbid = string.Empty;                                            if ((!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)) || imdbid.StartsWith("tt") || !string.IsNullOrEmpty(tmdbid))                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          }                                          // set focus to next button so we dont go in a loop                                          GUIControl.FocusControl((int)ExternalPluginWindows.Showtimes' 42);                                      }                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.VideoInfo:                              #region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      type = "movie";                                      title = GUIPropertyManager.GetProperty("#title").Trim();                                      year = GUIPropertyManager.GetProperty("#year").Trim();                                      imdbid = GUIPropertyManager.GetProperty("#imdbnumber").Trim();                                      tmdbid = (GUIPropertyManager.GetProperty("#tmdbnumber") ?? string.Empty).Trim();                                        MediaPortal.Util.FanArt.GetFanArtfilename(title' 0' out fanart);                                      if (fanart.ToLowerInvariant().Equals("unknown"))                                      {                                          string movieid = GUIPropertyManager.GetProperty("#movieid").Trim();                                          MediaPortal.Util.FanArt.GetFanArtfilename(movieid' 0' out fanart);                                      }                                                                            searchPeople = new SearchPeople();                                      string people = GUIPropertyManager.GetProperty("#cast").Trim();                                      if (people != string.Empty && people != "unknown")                                      {                                          // actors seperated by newlines                                          var peopleAndRoles = people.Split('\n').Select(s => s.Trim());                                            // each actor string also includes the role: {0} as {1} &#10;                                          // get the seperator from the localised string and then reverse the formatted string                                          string roleSepString = GUILocalizeStrings.Get(1320).Split(' ')[1].Trim();                                            foreach (var personAndRole in peopleAndRoles)                                          {                                              var personAndRoleStrings = personAndRole.Split(new string[] { string.Format(" {0} "' roleSepString) }' StringSplitOptions.None);                                              searchPeople.Actors.Add(personAndRoleStrings.First());                                          }                                      }                                        people = GUIPropertyManager.GetProperty("#director").Trim();                                      if (people != string.Empty && people != "unknown") searchPeople.Directors.AddRange(people.Split(''').Select(s => s.Trim()));                                        people = GUIPropertyManager.GetProperty("#credits").Trim();                                      if (people != string.Empty && people != "unknown")                                      {                                          var writers = people.Split(''').Select(s => s.Trim());                                          foreach(var writer in writers)                                          {                                              // remove the writer type e.g. (Story)' (Screenplay)                                              searchPeople.Writers.Add(writer.Split('(').First().Trim());                                          }                                      }                                        if (!string.IsNullOrEmpty(imdbid) || (!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)))                                      {                                          if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                      }                                        // Set focus to Play Button now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.VideoInfo' 2);                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.MovingPictures:                              #region WatchList/CustomList/Rate/Shouts/RelatedItem/Search                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      type = "movie";                                      updatePluginFilters = true;                                      title = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.title").Trim();                                      year = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.year").Trim();                                      imdbid = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.imdb_id").Trim();                                      fanart = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.backdropfullpath").Trim();                                      isWatched = GUIPropertyManager.GetProperty("#MovingPictures.UserMovieSettings.watched").Trim() != "0";                                        // get movie people from database                                      searchPeople = new SearchPeople();                                      if (TraktHelper.IsMovingPicturesAvailableAndEnabled)                                      {                                          int? movieID = null;                                          int iYear = 0; int.TryParse(year' out iYear);                                          if (MovingPictures.FindMovieID(title' iYear' imdbid' tmdbid.ToNullableInt32()' ref movieID))                                              MovingPictures.GetMoviePersonInfo(movieID' out searchPeople);                                      }                                                                            if (!string.IsNullOrEmpty(imdbid) || (!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)))                                      {                                          if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.SearchBy) validSearchItem = true;                                      }                                        // Set focus to Play Button now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.MovingPictures' 6);                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.TVSeries:                              #region WatchList/CustomList/Rate/Shouts/Related                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      Object obj = TVSeries.SelectedObject;                                      bool validItem = false;                                      if (obj != null)                                      {                                          searchPeople = new SearchPeople();                                            switch (TVSeries.GetSelectedType(obj))                                          {                                              case TVSeries.SelectedType.Episode:                                                  type = "episode";                                                  validItem = TVSeries.GetEpisodeInfo(obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);                                                  validItem |= TVSeries.GetEpisodePersonInfo(obj' out searchPeople);                                                  break;                                                case TVSeries.SelectedType.Series:                                                  type = "series";                                                  validItem =  TVSeries.GetSeriesInfo(obj' out title' out year' out showtvdbid);                                                  validItem |= TVSeries.GetSeriesPersonInfo(obj' out searchPeople);                                                  break;                                                default:                                                  break;                                          }                                            fanart = GUIPropertyManager.GetProperty("#TVSeries.Current.Fanart").Trim();                                            if (validItem)                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.SearchBy) validSearchItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                          }                                      }                                        // Set focus to Facade now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.TVSeries' 50);                                      break;                              }                              #endregion                                                          break;                      }                      break;                                    default:                      break;              }
Magic Number,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.Message)              {                  case GUIMessage.MessageType.GUI_MSG_CLICKED:                      switch (GUIWindowManager.ActiveWindow)                      {                          case (int)ExternalPluginWindows.OnlineVideos:                              #region WatchList/CustomList Button                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                      // Confirm we are in IMDB/iTunes Trailer Details view                                      // This will give us enough information to send to trakt                                      bool isDetails = GUIPropertyManager.GetProperty("#OnlineVideos.state").ToLowerInvariant() == "details";                                      string siteUtil = GUIPropertyManager.GetProperty("#OnlineVideos.selectedSiteUtil").ToLowerInvariant();                                      if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers"))                                      {                                          title = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Title").Trim();                                          year = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Year").Trim();                                          if (siteUtil == "imdb")                                          {                                              // IMDb site exposes IMDb ID' use this to get a better match on trakt                                              // this property is new' check for null in case user hasn't updated site                                              imdbid = GUIPropertyManager.GetProperty("#OnlineVideos.Details.IMDbId");                                              if (imdbid == null) imdbid = string.Empty;                                                // could be a TV Show                                              type = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Type").ToLowerInvariant();                                          }                                          if ((!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)) || imdbid.StartsWith("tt"))                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          }                                          // Return focus to details list now so we dont go in a loop                                          GUIControl.FocusControl((int)ExternalPluginWindows.OnlineVideos' 51);                                      }                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.Showtimes:                              #region WatchList/CustomList Button                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                      // Confirm we are in Showtimes Details view                                      // This will give us enough information to send to trakt                                      bool isDetails = GUIWindowManager.GetWindow(GUIWindowManager.ActiveWindow).GetControl(24).Visible;                                      if (isDetails)                                      {                                          title = GUIPropertyManager.GetProperty("#st_title").Trim();                                          DateTime releaseDate = DateTime.MinValue;                                            if (DateTime.TryParse(GUIPropertyManager.GetProperty("#st_releasedate").Trim()' out releaseDate))                                          {                                              year = releaseDate.Year.ToString();                                          }                                                                                                                           imdbid = GUIPropertyManager.GetProperty("#st_imdb");                                          if (imdbid == null) imdbid = string.Empty;                                            tmdbid = GUIPropertyManager.GetProperty("#st_tmdb");                                          if (tmdbid == null) imdbid = string.Empty;                                            if ((!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)) || imdbid.StartsWith("tt") || !string.IsNullOrEmpty(tmdbid))                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          }                                          // set focus to next button so we dont go in a loop                                          GUIControl.FocusControl((int)ExternalPluginWindows.Showtimes' 42);                                      }                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.VideoInfo:                              #region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      type = "movie";                                      title = GUIPropertyManager.GetProperty("#title").Trim();                                      year = GUIPropertyManager.GetProperty("#year").Trim();                                      imdbid = GUIPropertyManager.GetProperty("#imdbnumber").Trim();                                      tmdbid = (GUIPropertyManager.GetProperty("#tmdbnumber") ?? string.Empty).Trim();                                        MediaPortal.Util.FanArt.GetFanArtfilename(title' 0' out fanart);                                      if (fanart.ToLowerInvariant().Equals("unknown"))                                      {                                          string movieid = GUIPropertyManager.GetProperty("#movieid").Trim();                                          MediaPortal.Util.FanArt.GetFanArtfilename(movieid' 0' out fanart);                                      }                                                                            searchPeople = new SearchPeople();                                      string people = GUIPropertyManager.GetProperty("#cast").Trim();                                      if (people != string.Empty && people != "unknown")                                      {                                          // actors seperated by newlines                                          var peopleAndRoles = people.Split('\n').Select(s => s.Trim());                                            // each actor string also includes the role: {0} as {1} &#10;                                          // get the seperator from the localised string and then reverse the formatted string                                          string roleSepString = GUILocalizeStrings.Get(1320).Split(' ')[1].Trim();                                            foreach (var personAndRole in peopleAndRoles)                                          {                                              var personAndRoleStrings = personAndRole.Split(new string[] { string.Format(" {0} "' roleSepString) }' StringSplitOptions.None);                                              searchPeople.Actors.Add(personAndRoleStrings.First());                                          }                                      }                                        people = GUIPropertyManager.GetProperty("#director").Trim();                                      if (people != string.Empty && people != "unknown") searchPeople.Directors.AddRange(people.Split(''').Select(s => s.Trim()));                                        people = GUIPropertyManager.GetProperty("#credits").Trim();                                      if (people != string.Empty && people != "unknown")                                      {                                          var writers = people.Split(''').Select(s => s.Trim());                                          foreach(var writer in writers)                                          {                                              // remove the writer type e.g. (Story)' (Screenplay)                                              searchPeople.Writers.Add(writer.Split('(').First().Trim());                                          }                                      }                                        if (!string.IsNullOrEmpty(imdbid) || (!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)))                                      {                                          if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                      }                                        // Set focus to Play Button now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.VideoInfo' 2);                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.MovingPictures:                              #region WatchList/CustomList/Rate/Shouts/RelatedItem/Search                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      type = "movie";                                      updatePluginFilters = true;                                      title = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.title").Trim();                                      year = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.year").Trim();                                      imdbid = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.imdb_id").Trim();                                      fanart = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.backdropfullpath").Trim();                                      isWatched = GUIPropertyManager.GetProperty("#MovingPictures.UserMovieSettings.watched").Trim() != "0";                                        // get movie people from database                                      searchPeople = new SearchPeople();                                      if (TraktHelper.IsMovingPicturesAvailableAndEnabled)                                      {                                          int? movieID = null;                                          int iYear = 0; int.TryParse(year' out iYear);                                          if (MovingPictures.FindMovieID(title' iYear' imdbid' tmdbid.ToNullableInt32()' ref movieID))                                              MovingPictures.GetMoviePersonInfo(movieID' out searchPeople);                                      }                                                                            if (!string.IsNullOrEmpty(imdbid) || (!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)))                                      {                                          if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.SearchBy) validSearchItem = true;                                      }                                        // Set focus to Play Button now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.MovingPictures' 6);                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.TVSeries:                              #region WatchList/CustomList/Rate/Shouts/Related                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      Object obj = TVSeries.SelectedObject;                                      bool validItem = false;                                      if (obj != null)                                      {                                          searchPeople = new SearchPeople();                                            switch (TVSeries.GetSelectedType(obj))                                          {                                              case TVSeries.SelectedType.Episode:                                                  type = "episode";                                                  validItem = TVSeries.GetEpisodeInfo(obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);                                                  validItem |= TVSeries.GetEpisodePersonInfo(obj' out searchPeople);                                                  break;                                                case TVSeries.SelectedType.Series:                                                  type = "series";                                                  validItem =  TVSeries.GetSeriesInfo(obj' out title' out year' out showtvdbid);                                                  validItem |= TVSeries.GetSeriesPersonInfo(obj' out searchPeople);                                                  break;                                                default:                                                  break;                                          }                                            fanart = GUIPropertyManager.GetProperty("#TVSeries.Current.Fanart").Trim();                                            if (validItem)                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.SearchBy) validSearchItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                          }                                      }                                        // Set focus to Facade now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.TVSeries' 50);                                      break;                              }                              #endregion                                                          break;                      }                      break;                                    default:                      break;              }
Magic Number,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.Message)              {                  case GUIMessage.MessageType.GUI_MSG_CLICKED:                      switch (GUIWindowManager.ActiveWindow)                      {                          case (int)ExternalPluginWindows.OnlineVideos:                              #region WatchList/CustomList Button                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                      // Confirm we are in IMDB/iTunes Trailer Details view                                      // This will give us enough information to send to trakt                                      bool isDetails = GUIPropertyManager.GetProperty("#OnlineVideos.state").ToLowerInvariant() == "details";                                      string siteUtil = GUIPropertyManager.GetProperty("#OnlineVideos.selectedSiteUtil").ToLowerInvariant();                                      if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers"))                                      {                                          title = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Title").Trim();                                          year = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Year").Trim();                                          if (siteUtil == "imdb")                                          {                                              // IMDb site exposes IMDb ID' use this to get a better match on trakt                                              // this property is new' check for null in case user hasn't updated site                                              imdbid = GUIPropertyManager.GetProperty("#OnlineVideos.Details.IMDbId");                                              if (imdbid == null) imdbid = string.Empty;                                                // could be a TV Show                                              type = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Type").ToLowerInvariant();                                          }                                          if ((!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)) || imdbid.StartsWith("tt"))                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          }                                          // Return focus to details list now so we dont go in a loop                                          GUIControl.FocusControl((int)ExternalPluginWindows.OnlineVideos' 51);                                      }                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.Showtimes:                              #region WatchList/CustomList Button                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                      // Confirm we are in Showtimes Details view                                      // This will give us enough information to send to trakt                                      bool isDetails = GUIWindowManager.GetWindow(GUIWindowManager.ActiveWindow).GetControl(24).Visible;                                      if (isDetails)                                      {                                          title = GUIPropertyManager.GetProperty("#st_title").Trim();                                          DateTime releaseDate = DateTime.MinValue;                                            if (DateTime.TryParse(GUIPropertyManager.GetProperty("#st_releasedate").Trim()' out releaseDate))                                          {                                              year = releaseDate.Year.ToString();                                          }                                                                                                                           imdbid = GUIPropertyManager.GetProperty("#st_imdb");                                          if (imdbid == null) imdbid = string.Empty;                                            tmdbid = GUIPropertyManager.GetProperty("#st_tmdb");                                          if (tmdbid == null) imdbid = string.Empty;                                            if ((!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)) || imdbid.StartsWith("tt") || !string.IsNullOrEmpty(tmdbid))                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          }                                          // set focus to next button so we dont go in a loop                                          GUIControl.FocusControl((int)ExternalPluginWindows.Showtimes' 42);                                      }                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.VideoInfo:                              #region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      type = "movie";                                      title = GUIPropertyManager.GetProperty("#title").Trim();                                      year = GUIPropertyManager.GetProperty("#year").Trim();                                      imdbid = GUIPropertyManager.GetProperty("#imdbnumber").Trim();                                      tmdbid = (GUIPropertyManager.GetProperty("#tmdbnumber") ?? string.Empty).Trim();                                        MediaPortal.Util.FanArt.GetFanArtfilename(title' 0' out fanart);                                      if (fanart.ToLowerInvariant().Equals("unknown"))                                      {                                          string movieid = GUIPropertyManager.GetProperty("#movieid").Trim();                                          MediaPortal.Util.FanArt.GetFanArtfilename(movieid' 0' out fanart);                                      }                                                                            searchPeople = new SearchPeople();                                      string people = GUIPropertyManager.GetProperty("#cast").Trim();                                      if (people != string.Empty && people != "unknown")                                      {                                          // actors seperated by newlines                                          var peopleAndRoles = people.Split('\n').Select(s => s.Trim());                                            // each actor string also includes the role: {0} as {1} &#10;                                          // get the seperator from the localised string and then reverse the formatted string                                          string roleSepString = GUILocalizeStrings.Get(1320).Split(' ')[1].Trim();                                            foreach (var personAndRole in peopleAndRoles)                                          {                                              var personAndRoleStrings = personAndRole.Split(new string[] { string.Format(" {0} "' roleSepString) }' StringSplitOptions.None);                                              searchPeople.Actors.Add(personAndRoleStrings.First());                                          }                                      }                                        people = GUIPropertyManager.GetProperty("#director").Trim();                                      if (people != string.Empty && people != "unknown") searchPeople.Directors.AddRange(people.Split(''').Select(s => s.Trim()));                                        people = GUIPropertyManager.GetProperty("#credits").Trim();                                      if (people != string.Empty && people != "unknown")                                      {                                          var writers = people.Split(''').Select(s => s.Trim());                                          foreach(var writer in writers)                                          {                                              // remove the writer type e.g. (Story)' (Screenplay)                                              searchPeople.Writers.Add(writer.Split('(').First().Trim());                                          }                                      }                                        if (!string.IsNullOrEmpty(imdbid) || (!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)))                                      {                                          if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                      }                                        // Set focus to Play Button now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.VideoInfo' 2);                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.MovingPictures:                              #region WatchList/CustomList/Rate/Shouts/RelatedItem/Search                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      type = "movie";                                      updatePluginFilters = true;                                      title = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.title").Trim();                                      year = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.year").Trim();                                      imdbid = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.imdb_id").Trim();                                      fanart = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.backdropfullpath").Trim();                                      isWatched = GUIPropertyManager.GetProperty("#MovingPictures.UserMovieSettings.watched").Trim() != "0";                                        // get movie people from database                                      searchPeople = new SearchPeople();                                      if (TraktHelper.IsMovingPicturesAvailableAndEnabled)                                      {                                          int? movieID = null;                                          int iYear = 0; int.TryParse(year' out iYear);                                          if (MovingPictures.FindMovieID(title' iYear' imdbid' tmdbid.ToNullableInt32()' ref movieID))                                              MovingPictures.GetMoviePersonInfo(movieID' out searchPeople);                                      }                                                                            if (!string.IsNullOrEmpty(imdbid) || (!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)))                                      {                                          if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.SearchBy) validSearchItem = true;                                      }                                        // Set focus to Play Button now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.MovingPictures' 6);                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.TVSeries:                              #region WatchList/CustomList/Rate/Shouts/Related                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      Object obj = TVSeries.SelectedObject;                                      bool validItem = false;                                      if (obj != null)                                      {                                          searchPeople = new SearchPeople();                                            switch (TVSeries.GetSelectedType(obj))                                          {                                              case TVSeries.SelectedType.Episode:                                                  type = "episode";                                                  validItem = TVSeries.GetEpisodeInfo(obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);                                                  validItem |= TVSeries.GetEpisodePersonInfo(obj' out searchPeople);                                                  break;                                                case TVSeries.SelectedType.Series:                                                  type = "series";                                                  validItem =  TVSeries.GetSeriesInfo(obj' out title' out year' out showtvdbid);                                                  validItem |= TVSeries.GetSeriesPersonInfo(obj' out searchPeople);                                                  break;                                                default:                                                  break;                                          }                                            fanart = GUIPropertyManager.GetProperty("#TVSeries.Current.Fanart").Trim();                                            if (validItem)                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.SearchBy) validSearchItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                          }                                      }                                        // Set focus to Facade now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.TVSeries' 50);                                      break;                              }                              #endregion                                                          break;                      }                      break;                                    default:                      break;              }
Magic Number,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.Message)              {                  case GUIMessage.MessageType.GUI_MSG_CLICKED:                      switch (GUIWindowManager.ActiveWindow)                      {                          case (int)ExternalPluginWindows.OnlineVideos:                              #region WatchList/CustomList Button                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                      // Confirm we are in IMDB/iTunes Trailer Details view                                      // This will give us enough information to send to trakt                                      bool isDetails = GUIPropertyManager.GetProperty("#OnlineVideos.state").ToLowerInvariant() == "details";                                      string siteUtil = GUIPropertyManager.GetProperty("#OnlineVideos.selectedSiteUtil").ToLowerInvariant();                                      if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers"))                                      {                                          title = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Title").Trim();                                          year = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Year").Trim();                                          if (siteUtil == "imdb")                                          {                                              // IMDb site exposes IMDb ID' use this to get a better match on trakt                                              // this property is new' check for null in case user hasn't updated site                                              imdbid = GUIPropertyManager.GetProperty("#OnlineVideos.Details.IMDbId");                                              if (imdbid == null) imdbid = string.Empty;                                                // could be a TV Show                                              type = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Type").ToLowerInvariant();                                          }                                          if ((!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)) || imdbid.StartsWith("tt"))                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          }                                          // Return focus to details list now so we dont go in a loop                                          GUIControl.FocusControl((int)ExternalPluginWindows.OnlineVideos' 51);                                      }                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.Showtimes:                              #region WatchList/CustomList Button                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                      // Confirm we are in Showtimes Details view                                      // This will give us enough information to send to trakt                                      bool isDetails = GUIWindowManager.GetWindow(GUIWindowManager.ActiveWindow).GetControl(24).Visible;                                      if (isDetails)                                      {                                          title = GUIPropertyManager.GetProperty("#st_title").Trim();                                          DateTime releaseDate = DateTime.MinValue;                                            if (DateTime.TryParse(GUIPropertyManager.GetProperty("#st_releasedate").Trim()' out releaseDate))                                          {                                              year = releaseDate.Year.ToString();                                          }                                                                                                                           imdbid = GUIPropertyManager.GetProperty("#st_imdb");                                          if (imdbid == null) imdbid = string.Empty;                                            tmdbid = GUIPropertyManager.GetProperty("#st_tmdb");                                          if (tmdbid == null) imdbid = string.Empty;                                            if ((!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)) || imdbid.StartsWith("tt") || !string.IsNullOrEmpty(tmdbid))                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          }                                          // set focus to next button so we dont go in a loop                                          GUIControl.FocusControl((int)ExternalPluginWindows.Showtimes' 42);                                      }                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.VideoInfo:                              #region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      type = "movie";                                      title = GUIPropertyManager.GetProperty("#title").Trim();                                      year = GUIPropertyManager.GetProperty("#year").Trim();                                      imdbid = GUIPropertyManager.GetProperty("#imdbnumber").Trim();                                      tmdbid = (GUIPropertyManager.GetProperty("#tmdbnumber") ?? string.Empty).Trim();                                        MediaPortal.Util.FanArt.GetFanArtfilename(title' 0' out fanart);                                      if (fanart.ToLowerInvariant().Equals("unknown"))                                      {                                          string movieid = GUIPropertyManager.GetProperty("#movieid").Trim();                                          MediaPortal.Util.FanArt.GetFanArtfilename(movieid' 0' out fanart);                                      }                                                                            searchPeople = new SearchPeople();                                      string people = GUIPropertyManager.GetProperty("#cast").Trim();                                      if (people != string.Empty && people != "unknown")                                      {                                          // actors seperated by newlines                                          var peopleAndRoles = people.Split('\n').Select(s => s.Trim());                                            // each actor string also includes the role: {0} as {1} &#10;                                          // get the seperator from the localised string and then reverse the formatted string                                          string roleSepString = GUILocalizeStrings.Get(1320).Split(' ')[1].Trim();                                            foreach (var personAndRole in peopleAndRoles)                                          {                                              var personAndRoleStrings = personAndRole.Split(new string[] { string.Format(" {0} "' roleSepString) }' StringSplitOptions.None);                                              searchPeople.Actors.Add(personAndRoleStrings.First());                                          }                                      }                                        people = GUIPropertyManager.GetProperty("#director").Trim();                                      if (people != string.Empty && people != "unknown") searchPeople.Directors.AddRange(people.Split(''').Select(s => s.Trim()));                                        people = GUIPropertyManager.GetProperty("#credits").Trim();                                      if (people != string.Empty && people != "unknown")                                      {                                          var writers = people.Split(''').Select(s => s.Trim());                                          foreach(var writer in writers)                                          {                                              // remove the writer type e.g. (Story)' (Screenplay)                                              searchPeople.Writers.Add(writer.Split('(').First().Trim());                                          }                                      }                                        if (!string.IsNullOrEmpty(imdbid) || (!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)))                                      {                                          if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                      }                                        // Set focus to Play Button now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.VideoInfo' 2);                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.MovingPictures:                              #region WatchList/CustomList/Rate/Shouts/RelatedItem/Search                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      type = "movie";                                      updatePluginFilters = true;                                      title = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.title").Trim();                                      year = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.year").Trim();                                      imdbid = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.imdb_id").Trim();                                      fanart = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.backdropfullpath").Trim();                                      isWatched = GUIPropertyManager.GetProperty("#MovingPictures.UserMovieSettings.watched").Trim() != "0";                                        // get movie people from database                                      searchPeople = new SearchPeople();                                      if (TraktHelper.IsMovingPicturesAvailableAndEnabled)                                      {                                          int? movieID = null;                                          int iYear = 0; int.TryParse(year' out iYear);                                          if (MovingPictures.FindMovieID(title' iYear' imdbid' tmdbid.ToNullableInt32()' ref movieID))                                              MovingPictures.GetMoviePersonInfo(movieID' out searchPeople);                                      }                                                                            if (!string.IsNullOrEmpty(imdbid) || (!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)))                                      {                                          if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.SearchBy) validSearchItem = true;                                      }                                        // Set focus to Play Button now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.MovingPictures' 6);                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.TVSeries:                              #region WatchList/CustomList/Rate/Shouts/Related                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      Object obj = TVSeries.SelectedObject;                                      bool validItem = false;                                      if (obj != null)                                      {                                          searchPeople = new SearchPeople();                                            switch (TVSeries.GetSelectedType(obj))                                          {                                              case TVSeries.SelectedType.Episode:                                                  type = "episode";                                                  validItem = TVSeries.GetEpisodeInfo(obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);                                                  validItem |= TVSeries.GetEpisodePersonInfo(obj' out searchPeople);                                                  break;                                                case TVSeries.SelectedType.Series:                                                  type = "series";                                                  validItem =  TVSeries.GetSeriesInfo(obj' out title' out year' out showtvdbid);                                                  validItem |= TVSeries.GetSeriesPersonInfo(obj' out searchPeople);                                                  break;                                                default:                                                  break;                                          }                                            fanart = GUIPropertyManager.GetProperty("#TVSeries.Current.Fanart").Trim();                                            if (validItem)                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.SearchBy) validSearchItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                          }                                      }                                        // Set focus to Facade now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.TVSeries' 50);                                      break;                              }                              #endregion                                                          break;                      }                      break;                                    default:                      break;              }
Magic Number,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.Message)              {                  case GUIMessage.MessageType.GUI_MSG_CLICKED:                      switch (GUIWindowManager.ActiveWindow)                      {                          case (int)ExternalPluginWindows.OnlineVideos:                              #region WatchList/CustomList Button                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                      // Confirm we are in IMDB/iTunes Trailer Details view                                      // This will give us enough information to send to trakt                                      bool isDetails = GUIPropertyManager.GetProperty("#OnlineVideos.state").ToLowerInvariant() == "details";                                      string siteUtil = GUIPropertyManager.GetProperty("#OnlineVideos.selectedSiteUtil").ToLowerInvariant();                                      if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers"))                                      {                                          title = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Title").Trim();                                          year = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Year").Trim();                                          if (siteUtil == "imdb")                                          {                                              // IMDb site exposes IMDb ID' use this to get a better match on trakt                                              // this property is new' check for null in case user hasn't updated site                                              imdbid = GUIPropertyManager.GetProperty("#OnlineVideos.Details.IMDbId");                                              if (imdbid == null) imdbid = string.Empty;                                                // could be a TV Show                                              type = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Type").ToLowerInvariant();                                          }                                          if ((!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)) || imdbid.StartsWith("tt"))                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          }                                          // Return focus to details list now so we dont go in a loop                                          GUIControl.FocusControl((int)ExternalPluginWindows.OnlineVideos' 51);                                      }                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.Showtimes:                              #region WatchList/CustomList Button                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                      // Confirm we are in Showtimes Details view                                      // This will give us enough information to send to trakt                                      bool isDetails = GUIWindowManager.GetWindow(GUIWindowManager.ActiveWindow).GetControl(24).Visible;                                      if (isDetails)                                      {                                          title = GUIPropertyManager.GetProperty("#st_title").Trim();                                          DateTime releaseDate = DateTime.MinValue;                                            if (DateTime.TryParse(GUIPropertyManager.GetProperty("#st_releasedate").Trim()' out releaseDate))                                          {                                              year = releaseDate.Year.ToString();                                          }                                                                                                                           imdbid = GUIPropertyManager.GetProperty("#st_imdb");                                          if (imdbid == null) imdbid = string.Empty;                                            tmdbid = GUIPropertyManager.GetProperty("#st_tmdb");                                          if (tmdbid == null) imdbid = string.Empty;                                            if ((!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)) || imdbid.StartsWith("tt") || !string.IsNullOrEmpty(tmdbid))                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          }                                          // set focus to next button so we dont go in a loop                                          GUIControl.FocusControl((int)ExternalPluginWindows.Showtimes' 42);                                      }                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.VideoInfo:                              #region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      type = "movie";                                      title = GUIPropertyManager.GetProperty("#title").Trim();                                      year = GUIPropertyManager.GetProperty("#year").Trim();                                      imdbid = GUIPropertyManager.GetProperty("#imdbnumber").Trim();                                      tmdbid = (GUIPropertyManager.GetProperty("#tmdbnumber") ?? string.Empty).Trim();                                        MediaPortal.Util.FanArt.GetFanArtfilename(title' 0' out fanart);                                      if (fanart.ToLowerInvariant().Equals("unknown"))                                      {                                          string movieid = GUIPropertyManager.GetProperty("#movieid").Trim();                                          MediaPortal.Util.FanArt.GetFanArtfilename(movieid' 0' out fanart);                                      }                                                                            searchPeople = new SearchPeople();                                      string people = GUIPropertyManager.GetProperty("#cast").Trim();                                      if (people != string.Empty && people != "unknown")                                      {                                          // actors seperated by newlines                                          var peopleAndRoles = people.Split('\n').Select(s => s.Trim());                                            // each actor string also includes the role: {0} as {1} &#10;                                          // get the seperator from the localised string and then reverse the formatted string                                          string roleSepString = GUILocalizeStrings.Get(1320).Split(' ')[1].Trim();                                            foreach (var personAndRole in peopleAndRoles)                                          {                                              var personAndRoleStrings = personAndRole.Split(new string[] { string.Format(" {0} "' roleSepString) }' StringSplitOptions.None);                                              searchPeople.Actors.Add(personAndRoleStrings.First());                                          }                                      }                                        people = GUIPropertyManager.GetProperty("#director").Trim();                                      if (people != string.Empty && people != "unknown") searchPeople.Directors.AddRange(people.Split(''').Select(s => s.Trim()));                                        people = GUIPropertyManager.GetProperty("#credits").Trim();                                      if (people != string.Empty && people != "unknown")                                      {                                          var writers = people.Split(''').Select(s => s.Trim());                                          foreach(var writer in writers)                                          {                                              // remove the writer type e.g. (Story)' (Screenplay)                                              searchPeople.Writers.Add(writer.Split('(').First().Trim());                                          }                                      }                                        if (!string.IsNullOrEmpty(imdbid) || (!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)))                                      {                                          if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                      }                                        // Set focus to Play Button now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.VideoInfo' 2);                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.MovingPictures:                              #region WatchList/CustomList/Rate/Shouts/RelatedItem/Search                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      type = "movie";                                      updatePluginFilters = true;                                      title = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.title").Trim();                                      year = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.year").Trim();                                      imdbid = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.imdb_id").Trim();                                      fanart = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.backdropfullpath").Trim();                                      isWatched = GUIPropertyManager.GetProperty("#MovingPictures.UserMovieSettings.watched").Trim() != "0";                                        // get movie people from database                                      searchPeople = new SearchPeople();                                      if (TraktHelper.IsMovingPicturesAvailableAndEnabled)                                      {                                          int? movieID = null;                                          int iYear = 0; int.TryParse(year' out iYear);                                          if (MovingPictures.FindMovieID(title' iYear' imdbid' tmdbid.ToNullableInt32()' ref movieID))                                              MovingPictures.GetMoviePersonInfo(movieID' out searchPeople);                                      }                                                                            if (!string.IsNullOrEmpty(imdbid) || (!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)))                                      {                                          if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.SearchBy) validSearchItem = true;                                      }                                        // Set focus to Play Button now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.MovingPictures' 6);                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.TVSeries:                              #region WatchList/CustomList/Rate/Shouts/Related                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      Object obj = TVSeries.SelectedObject;                                      bool validItem = false;                                      if (obj != null)                                      {                                          searchPeople = new SearchPeople();                                            switch (TVSeries.GetSelectedType(obj))                                          {                                              case TVSeries.SelectedType.Episode:                                                  type = "episode";                                                  validItem = TVSeries.GetEpisodeInfo(obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);                                                  validItem |= TVSeries.GetEpisodePersonInfo(obj' out searchPeople);                                                  break;                                                case TVSeries.SelectedType.Series:                                                  type = "series";                                                  validItem =  TVSeries.GetSeriesInfo(obj' out title' out year' out showtvdbid);                                                  validItem |= TVSeries.GetSeriesPersonInfo(obj' out searchPeople);                                                  break;                                                default:                                                  break;                                          }                                            fanart = GUIPropertyManager.GetProperty("#TVSeries.Current.Fanart").Trim();                                            if (validItem)                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.SearchBy) validSearchItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                          }                                      }                                        // Set focus to Facade now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.TVSeries' 50);                                      break;                              }                              #endregion                                                          break;                      }                      break;                                    default:                      break;              }
Magic Number,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.Message)              {                  case GUIMessage.MessageType.GUI_MSG_CLICKED:                      switch (GUIWindowManager.ActiveWindow)                      {                          case (int)ExternalPluginWindows.OnlineVideos:                              #region WatchList/CustomList Button                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                      // Confirm we are in IMDB/iTunes Trailer Details view                                      // This will give us enough information to send to trakt                                      bool isDetails = GUIPropertyManager.GetProperty("#OnlineVideos.state").ToLowerInvariant() == "details";                                      string siteUtil = GUIPropertyManager.GetProperty("#OnlineVideos.selectedSiteUtil").ToLowerInvariant();                                      if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers"))                                      {                                          title = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Title").Trim();                                          year = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Year").Trim();                                          if (siteUtil == "imdb")                                          {                                              // IMDb site exposes IMDb ID' use this to get a better match on trakt                                              // this property is new' check for null in case user hasn't updated site                                              imdbid = GUIPropertyManager.GetProperty("#OnlineVideos.Details.IMDbId");                                              if (imdbid == null) imdbid = string.Empty;                                                // could be a TV Show                                              type = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Type").ToLowerInvariant();                                          }                                          if ((!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)) || imdbid.StartsWith("tt"))                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          }                                          // Return focus to details list now so we dont go in a loop                                          GUIControl.FocusControl((int)ExternalPluginWindows.OnlineVideos' 51);                                      }                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.Showtimes:                              #region WatchList/CustomList Button                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                      // Confirm we are in Showtimes Details view                                      // This will give us enough information to send to trakt                                      bool isDetails = GUIWindowManager.GetWindow(GUIWindowManager.ActiveWindow).GetControl(24).Visible;                                      if (isDetails)                                      {                                          title = GUIPropertyManager.GetProperty("#st_title").Trim();                                          DateTime releaseDate = DateTime.MinValue;                                            if (DateTime.TryParse(GUIPropertyManager.GetProperty("#st_releasedate").Trim()' out releaseDate))                                          {                                              year = releaseDate.Year.ToString();                                          }                                                                                                                           imdbid = GUIPropertyManager.GetProperty("#st_imdb");                                          if (imdbid == null) imdbid = string.Empty;                                            tmdbid = GUIPropertyManager.GetProperty("#st_tmdb");                                          if (tmdbid == null) imdbid = string.Empty;                                            if ((!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)) || imdbid.StartsWith("tt") || !string.IsNullOrEmpty(tmdbid))                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          }                                          // set focus to next button so we dont go in a loop                                          GUIControl.FocusControl((int)ExternalPluginWindows.Showtimes' 42);                                      }                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.VideoInfo:                              #region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      type = "movie";                                      title = GUIPropertyManager.GetProperty("#title").Trim();                                      year = GUIPropertyManager.GetProperty("#year").Trim();                                      imdbid = GUIPropertyManager.GetProperty("#imdbnumber").Trim();                                      tmdbid = (GUIPropertyManager.GetProperty("#tmdbnumber") ?? string.Empty).Trim();                                        MediaPortal.Util.FanArt.GetFanArtfilename(title' 0' out fanart);                                      if (fanart.ToLowerInvariant().Equals("unknown"))                                      {                                          string movieid = GUIPropertyManager.GetProperty("#movieid").Trim();                                          MediaPortal.Util.FanArt.GetFanArtfilename(movieid' 0' out fanart);                                      }                                                                            searchPeople = new SearchPeople();                                      string people = GUIPropertyManager.GetProperty("#cast").Trim();                                      if (people != string.Empty && people != "unknown")                                      {                                          // actors seperated by newlines                                          var peopleAndRoles = people.Split('\n').Select(s => s.Trim());                                            // each actor string also includes the role: {0} as {1} &#10;                                          // get the seperator from the localised string and then reverse the formatted string                                          string roleSepString = GUILocalizeStrings.Get(1320).Split(' ')[1].Trim();                                            foreach (var personAndRole in peopleAndRoles)                                          {                                              var personAndRoleStrings = personAndRole.Split(new string[] { string.Format(" {0} "' roleSepString) }' StringSplitOptions.None);                                              searchPeople.Actors.Add(personAndRoleStrings.First());                                          }                                      }                                        people = GUIPropertyManager.GetProperty("#director").Trim();                                      if (people != string.Empty && people != "unknown") searchPeople.Directors.AddRange(people.Split(''').Select(s => s.Trim()));                                        people = GUIPropertyManager.GetProperty("#credits").Trim();                                      if (people != string.Empty && people != "unknown")                                      {                                          var writers = people.Split(''').Select(s => s.Trim());                                          foreach(var writer in writers)                                          {                                              // remove the writer type e.g. (Story)' (Screenplay)                                              searchPeople.Writers.Add(writer.Split('(').First().Trim());                                          }                                      }                                        if (!string.IsNullOrEmpty(imdbid) || (!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)))                                      {                                          if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                      }                                        // Set focus to Play Button now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.VideoInfo' 2);                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.MovingPictures:                              #region WatchList/CustomList/Rate/Shouts/RelatedItem/Search                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      type = "movie";                                      updatePluginFilters = true;                                      title = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.title").Trim();                                      year = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.year").Trim();                                      imdbid = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.imdb_id").Trim();                                      fanart = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.backdropfullpath").Trim();                                      isWatched = GUIPropertyManager.GetProperty("#MovingPictures.UserMovieSettings.watched").Trim() != "0";                                        // get movie people from database                                      searchPeople = new SearchPeople();                                      if (TraktHelper.IsMovingPicturesAvailableAndEnabled)                                      {                                          int? movieID = null;                                          int iYear = 0; int.TryParse(year' out iYear);                                          if (MovingPictures.FindMovieID(title' iYear' imdbid' tmdbid.ToNullableInt32()' ref movieID))                                              MovingPictures.GetMoviePersonInfo(movieID' out searchPeople);                                      }                                                                            if (!string.IsNullOrEmpty(imdbid) || (!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)))                                      {                                          if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.SearchBy) validSearchItem = true;                                      }                                        // Set focus to Play Button now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.MovingPictures' 6);                                      break;                              }                              #endregion                              break;                          case (int)ExternalPluginWindows.TVSeries:                              #region WatchList/CustomList/Rate/Shouts/Related                              switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      Object obj = TVSeries.SelectedObject;                                      bool validItem = false;                                      if (obj != null)                                      {                                          searchPeople = new SearchPeople();                                            switch (TVSeries.GetSelectedType(obj))                                          {                                              case TVSeries.SelectedType.Episode:                                                  type = "episode";                                                  validItem = TVSeries.GetEpisodeInfo(obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);                                                  validItem |= TVSeries.GetEpisodePersonInfo(obj' out searchPeople);                                                  break;                                                case TVSeries.SelectedType.Series:                                                  type = "series";                                                  validItem =  TVSeries.GetSeriesInfo(obj' out title' out year' out showtvdbid);                                                  validItem |= TVSeries.GetSeriesPersonInfo(obj' out searchPeople);                                                  break;                                                default:                                                  break;                                          }                                            fanart = GUIPropertyManager.GetProperty("#TVSeries.Current.Fanart").Trim();                                            if (validItem)                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.SearchBy) validSearchItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                          }                                      }                                        // Set focus to Facade now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.TVSeries' 50);                                      break;                              }                              #endregion                                                          break;                      }                      break;                                    default:                      break;              }
Magic Number,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,SystemEvents_PowerModeChanged,The following statement contains a magic number: ChangeSyncTimer(startDelay' TraktSettings.SyncTimerLength * 3600000);
Magic Number,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,StartScrobble,The following statement contains a magic number: var scrobbleThread = new Thread(() =>              {                  if (TraktSettings.AccountStatus != ConnectionState.Connected) return;                    StopScrobble();                    // Workaround for any Race Conditions from custom event handled plugin handlers                  // Sleep to ensure that custom event gets fired first e.g. OnlineVideos VideoTracking Info.                  Thread.Sleep(500);                    if (!TraktSettings.BlockedFilenames.Contains(filename) && !TraktSettings.BlockedFolders.Any(f => filename.ToLowerInvariant().Contains(f.ToLowerInvariant())))                  {                      TraktLogger.Debug("Searching through enabled plugin handlers for now playing media. Filename = '{0}'"' filename);                      foreach (ITraktHandler traktHandler in TraktHandlers)                      {                          try                          {                              if (traktHandler.Scrobble(filename))                              {                                  TraktLogger.Debug("File was recognised by an enabled plugin handler and is now scrobbling. Plugin = '{0}'"' traktHandler.Name);                                  return;                              }                          }                          catch                          {                              TraktLogger.Error("Error starting scrobble from plugin handler. Plugin = '{0}'"' traktHandler.Name);                          }                      }                      TraktLogger.Info("File was not recognised in any enabled plugin handlers' no scrobble will occur");                  }                  else                      TraktLogger.Info("Filename was blocked by user' no scrobble will occur");              })              {                  IsBackground = true'                  Name = "Scrobble"              };
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncTimerLength = GetValueAsIntAndValidate(cTrakt' cSyncTimerLength' 24' 1' 168);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncTimerLength = GetValueAsIntAndValidate(cTrakt' cSyncTimerLength' 24' 1' 168);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncStartDelay = GetValueAsIntAndValidate(cTrakt' cSyncStartDelay' 5000' 0' 300000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncStartDelay = GetValueAsIntAndValidate(cTrakt' cSyncStartDelay' 5000' 0' 300000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: WebRequestCacheMinutes = GetValueAsIntAndValidate(cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: WebRequestCacheMinutes = GetValueAsIntAndValidate(cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: WebRequestTimeout = GetValueAsIntAndValidate(cTrakt' cWebRequestTimeout' 30000' 15000' 90000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: WebRequestTimeout = GetValueAsIntAndValidate(cTrakt' cWebRequestTimeout' 30000' 15000' 90000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: WebRequestTimeout = GetValueAsIntAndValidate(cTrakt' cWebRequestTimeout' 30000' 15000' 90000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: DashboardActivityPollInterval = GetValueAsIntAndValidate(cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: DashboardActivityPollInterval = GetValueAsIntAndValidate(cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: DashboardActivityPollInterval = GetValueAsIntAndValidate(cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: DashboardTrendingPollInterval = GetValueAsIntAndValidate(cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: DashboardTrendingPollInterval = GetValueAsIntAndValidate(cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: DashboardTrendingPollInterval = GetValueAsIntAndValidate(cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: DashboardLoadDelay = GetValueAsIntAndValidate(cTrakt' cDashboardLoadDelay' 200' 100' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: DashboardLoadDelay = GetValueAsIntAndValidate(cTrakt' cDashboardLoadDelay' 200' 100' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: DashboardLoadDelay = GetValueAsIntAndValidate(cTrakt' cDashboardLoadDelay' 200' 100' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MovPicsRatingDlgDelay = GetValueAsIntAndValidate(cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MovPicsRatingDlgDelay = GetValueAsIntAndValidate(cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MovPicsRatingDlgDelay = GetValueAsIntAndValidate(cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxSearchResults = GetValueAsIntAndValidate(cTrakt' cMaxSearchResults' 30' 1' 200);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxSearchResults = GetValueAsIntAndValidate(cTrakt' cMaxSearchResults' 30' 1' 200);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: ActivityStreamView = xmlreader.GetValueAsInt(cTrakt' cActivityStreamView' 5);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncBatchSize = GetValueAsIntAndValidate(cTrakt' cSyncBatchSize' 100' 25' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncBatchSize = GetValueAsIntAndValidate(cTrakt' cSyncBatchSize' 100' 25' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncBatchSize = GetValueAsIntAndValidate(cTrakt' cSyncBatchSize' 100' 25' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncResumeDelta = GetValueAsIntAndValidate(cTrakt' cSyncResumeDelta' 5' 0' 600);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncResumeDelta = GetValueAsIntAndValidate(cTrakt' cSyncResumeDelta' 5' 0' 600);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncPlaybackCacheExpiry = GetValueAsIntAndValidate(cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncPlaybackCacheExpiry = GetValueAsIntAndValidate(cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxTrendingMoviesRequest = GetValueAsIntAndValidate(cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxTrendingMoviesRequest = GetValueAsIntAndValidate(cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxTrendingShowsRequest = GetValueAsIntAndValidate(cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxTrendingShowsRequest = GetValueAsIntAndValidate(cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxPopularMoviesRequest = GetValueAsIntAndValidate(cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxPopularMoviesRequest = GetValueAsIntAndValidate(cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxPopularShowsRequest = GetValueAsIntAndValidate(cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxPopularShowsRequest = GetValueAsIntAndValidate(cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate(cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate(cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxAnticipatedShowsRequest = GetValueAsIntAndValidate(cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxAnticipatedShowsRequest = GetValueAsIntAndValidate(cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxRelatedMoviesRequest = GetValueAsIntAndValidate(cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxRelatedMoviesRequest = GetValueAsIntAndValidate(cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxRelatedShowsRequest = GetValueAsIntAndValidate(cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxRelatedShowsRequest = GetValueAsIntAndValidate(cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate(cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate(cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate(cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate(cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxUserCommentsRequest = GetValueAsIntAndValidate(cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxUserCommentsRequest = GetValueAsIntAndValidate(cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate(cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate(cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate(cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate(cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate(cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate(cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate(cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate(cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate(cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate(cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TvCalendarMaxDays = xmlreader.GetValueAsInt(cTrakt' cTvCalendarMaxDays' 7);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MovieCalendarMaxDays = xmlreader.GetValueAsInt(cTrakt' cMovieCalendarMaxDays' 7);
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Magic Number,TraktPlugin,ExtensionSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,AddHooksIntoMPEISettings,The following statement contains a magic number: Thread.Sleep(10000);
Magic Number,TraktPlugin,ExtensionSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,Extensions_OnSettingsChanged,The following statement contains a magic number: TraktPlugin.ChangeSyncTimer(startDelay' TraktSettings.SyncTimerLength * 3600000);
Magic Number,TraktPlugin.GUI,AsyncImageResource,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cornerstone.MP\AsyncImageResource.cs,setFilenameWorker,The following statement contains a magic number: Thread.Sleep(_delay / 5);
Magic Number,TraktPlugin.GUI,AsyncImageResource,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cornerstone.MP\AsyncImageResource.cs,setFilenameWorker,The following statement contains a magic number: i < 5
Magic Number,TraktPlugin.GUI,AsyncImageResource,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cornerstone.MP\AsyncImageResource.cs,setFilenameWorker,The following statement contains a magic number: Thread.Sleep(5000);
Magic Number,TraktPlugin.GUI,GUIAnticipatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIMovieListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadAnticipatedMovies(CurrentPage);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByAnticipatedMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByAnticipatedMovies.Field)                          {                              TraktSettings.SortByAnticipatedMovies = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadAnticipatedMovies(CurrentPage);                          }                      }                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.AnticipatedMoviesHideWatchlisted = !TraktSettings.AnticipatedMoviesHideWatchlisted;                      UpdateButtonState();                      LoadAnticipatedMovies(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIAnticipatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIMovieListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadAnticipatedMovies(CurrentPage);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByAnticipatedMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByAnticipatedMovies.Field)                          {                              TraktSettings.SortByAnticipatedMovies = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadAnticipatedMovies(CurrentPage);                          }                      }                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.AnticipatedMoviesHideWatchlisted = !TraktSettings.AnticipatedMoviesHideWatchlisted;                      UpdateButtonState();                      LoadAnticipatedMovies(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIAnticipatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIMovieListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadAnticipatedMovies(CurrentPage);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByAnticipatedMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByAnticipatedMovies.Field)                          {                              TraktSettings.SortByAnticipatedMovies = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadAnticipatedMovies(CurrentPage);                          }                      }                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.AnticipatedMoviesHideWatchlisted = !TraktSettings.AnticipatedMoviesHideWatchlisted;                      UpdateButtonState();                      LoadAnticipatedMovies(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIAnticipatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIMovieListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadAnticipatedMovies(CurrentPage);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByAnticipatedMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByAnticipatedMovies.Field)                          {                              TraktSettings.SortByAnticipatedMovies = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadAnticipatedMovies(CurrentPage);                          }                      }                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.AnticipatedMoviesHideWatchlisted = !TraktSettings.AnticipatedMoviesHideWatchlisted;                      UpdateButtonState();                      LoadAnticipatedMovies(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIBoxOffice,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBoxOffice.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIBoxOffice,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBoxOffice.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIListItem;                            // Is a group header                          if (item != null && item.IsFolder)                          {                              if (item.TVTag.ToString() == "next")                              {                                  CurrentPage++;                                  if (CurrentPage == 0) CurrentPage = 1;                              }                              else                              {                                  CurrentPage--;                                  if (CurrentPage == 0) CurrentPage = -1;                              }                                // load next 7 days in calendar                              LoadCalendar();                          }                            // Is a movie                          if (item != null && !item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                      }                      break;                    // View Button                  case (2):                      ShowViewMenu();                      break;                    // Start Date Button                  case (3):                      ShowStartDateMenu();                      break;                                        // Max Days                  case (5):                      ShowMaxDaysMenu();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIListItem;                            // Is a group header                          if (item != null && item.IsFolder)                          {                              if (item.TVTag.ToString() == "next")                              {                                  CurrentPage++;                                  if (CurrentPage == 0) CurrentPage = 1;                              }                              else                              {                                  CurrentPage--;                                  if (CurrentPage == 0) CurrentPage = -1;                              }                                // load next 7 days in calendar                              LoadCalendar();                          }                            // Is a movie                          if (item != null && !item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                      }                      break;                    // View Button                  case (2):                      ShowViewMenu();                      break;                    // Start Date Button                  case (3):                      ShowStartDateMenu();                      break;                                        // Max Days                  case (5):                      ShowMaxDaysMenu();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIListItem;                            // Is a group header                          if (item != null && item.IsFolder)                          {                              if (item.TVTag.ToString() == "next")                              {                                  CurrentPage++;                                  if (CurrentPage == 0) CurrentPage = 1;                              }                              else                              {                                  CurrentPage--;                                  if (CurrentPage == 0) CurrentPage = -1;                              }                                // load next 7 days in calendar                              LoadCalendar();                          }                            // Is a movie                          if (item != null && !item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                      }                      break;                    // View Button                  case (2):                      ShowViewMenu();                      break;                    // Start Date Button                  case (3):                      ShowStartDateMenu();                      break;                                        // Max Days                  case (5):                      ShowMaxDaysMenu();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIListItem;                            // Is a group header                          if (item != null && item.IsFolder)                          {                              if (item.TVTag.ToString() == "next")                              {                                  CurrentPage++;                                  if (CurrentPage == 0) CurrentPage = 1;                              }                              else                              {                                  CurrentPage--;                                  if (CurrentPage == 0) CurrentPage = -1;                              }                                // load next 7 days in calendar                              LoadCalendar();                          }                            // Is a movie                          if (item != null && !item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                      }                      break;                    // View Button                  case (2):                      ShowViewMenu();                      break;                    // Start Date Button                  case (3):                      ShowStartDateMenu();                      break;                                        // Max Days                  case (5):                      ShowMaxDaysMenu();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,ShowMaxDaysMenu,The following statement contains a magic number: day < 31
Magic Number,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,GetDaysForward,The following statement contains a magic number: return 31;
Magic Number,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,GetDaysForward,The following statement contains a magic number: TraktSettings.MovieCalendarMaxDays >= 30
Magic Number,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,GetDaysForward,The following statement contains a magic number: return TraktSettings.MovieCalendarMaxDays + 2;
Magic Number,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,GetStartDate,The following statement contains a magic number: switch (CurrentStartDate)              {                  case StartDates.Today:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(1' 0' 0' 0));                      break;                  case StartDates.Yesterday:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(2' 0' 0' 0));                      break;                  case StartDates.OneWeekAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(8' 0' 0' 0));                      break;                  case StartDates.TwoWeeksAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(15' 0' 0' 0));                      break;                  case StartDates.OneMonthAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(31' 0' 0' 0));                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,GetStartDate,The following statement contains a magic number: switch (CurrentStartDate)              {                  case StartDates.Today:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(1' 0' 0' 0));                      break;                  case StartDates.Yesterday:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(2' 0' 0' 0));                      break;                  case StartDates.OneWeekAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(8' 0' 0' 0));                      break;                  case StartDates.TwoWeeksAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(15' 0' 0' 0));                      break;                  case StartDates.OneMonthAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(31' 0' 0' 0));                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,GetStartDate,The following statement contains a magic number: switch (CurrentStartDate)              {                  case StartDates.Today:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(1' 0' 0' 0));                      break;                  case StartDates.Yesterday:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(2' 0' 0' 0));                      break;                  case StartDates.OneWeekAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(8' 0' 0' 0));                      break;                  case StartDates.TwoWeeksAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(15' 0' 0' 0));                      break;                  case StartDates.OneMonthAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(31' 0' 0' 0));                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,GetStartDate,The following statement contains a magic number: switch (CurrentStartDate)              {                  case StartDates.Today:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(1' 0' 0' 0));                      break;                  case StartDates.Yesterday:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(2' 0' 0' 0));                      break;                  case StartDates.OneWeekAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(8' 0' 0' 0));                      break;                  case StartDates.TwoWeeksAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(15' 0' 0' 0));                      break;                  case StartDates.OneMonthAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(31' 0' 0' 0));                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,GetCurrentLocalStartDate,The following statement contains a magic number: switch (CurrentStartDate)              {                  case StartDates.Today:                      startDate = DateTime.Today;                      break;                  case StartDates.Yesterday:                      startDate = DateTime.Today.Subtract(new TimeSpan(1' 0' 0' 0));                      break;                  case StartDates.OneWeekAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(7' 0' 0' 0));                      break;                  case StartDates.TwoWeeksAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(14' 0' 0' 0));                      break;                  case StartDates.OneMonthAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(30' 0' 0' 0));                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,GetCurrentLocalStartDate,The following statement contains a magic number: switch (CurrentStartDate)              {                  case StartDates.Today:                      startDate = DateTime.Today;                      break;                  case StartDates.Yesterday:                      startDate = DateTime.Today.Subtract(new TimeSpan(1' 0' 0' 0));                      break;                  case StartDates.OneWeekAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(7' 0' 0' 0));                      break;                  case StartDates.TwoWeeksAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(14' 0' 0' 0));                      break;                  case StartDates.OneMonthAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(30' 0' 0' 0));                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,GetCurrentLocalStartDate,The following statement contains a magic number: switch (CurrentStartDate)              {                  case StartDates.Today:                      startDate = DateTime.Today;                      break;                  case StartDates.Yesterday:                      startDate = DateTime.Today.Subtract(new TimeSpan(1' 0' 0' 0));                      break;                  case StartDates.OneWeekAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(7' 0' 0' 0));                      break;                  case StartDates.TwoWeeksAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(14' 0' 0' 0));                      break;                  case StartDates.OneMonthAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(30' 0' 0' 0));                      break;              }
Magic Number,TraktPlugin.GUI,GUICreditsMovie,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsMovie.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var selectedItem = Facade.SelectedListItem as GUIPersonListItem;                      if (selectedItem == null) return;                        GUIWindowManager.ActivateWindow((int)TraktGUIWindows.PersonSummary' selectedItem.Person.Ids.Trakt.ToString());                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUICreditsMovie,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsMovie.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var selectedItem = Facade.SelectedListItem as GUIPersonListItem;                      if (selectedItem == null) return;                        GUIWindowManager.ActivateWindow((int)TraktGUIWindows.PersonSummary' selectedItem.Person.Ids.Trakt.ToString());                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUICreditsShow,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsShow.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var selectedItem = Facade.SelectedListItem as GUIPersonListItem;                      if (selectedItem == null) return;                        GUIWindowManager.ActivateWindow((int)TraktGUIWindows.PersonSummary' selectedItem.Person.Ids.Trakt.ToString());                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUICreditsShow,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsShow.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var selectedItem = Facade.SelectedListItem as GUIPersonListItem;                      if (selectedItem == null) return;                        GUIWindowManager.ActivateWindow((int)TraktGUIWindows.PersonSummary' selectedItem.Person.Ids.Trakt.ToString());                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIAnticipatedShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIShowListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              if (TraktSettings.EnableJumpToForTVShows)                              {                                  CheckAndPlayEpisode(true);                              }                              else                              {                                  if (item.Show == null) return;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                              }                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadAnticipatedShows(CurrentPage);                          }                        }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByAnticipatedShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByAnticipatedShows.Field)                          {                              TraktSettings.SortByAnticipatedShows = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadAnticipatedShows(CurrentPage);                          }                      }                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.AnticipatedShowsHideWatchlisted = !TraktSettings.AnticipatedShowsHideWatchlisted;                      UpdateButtonState();                      LoadAnticipatedShows(CurrentPage);                      break;                                        default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIAnticipatedShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIShowListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              if (TraktSettings.EnableJumpToForTVShows)                              {                                  CheckAndPlayEpisode(true);                              }                              else                              {                                  if (item.Show == null) return;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                              }                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadAnticipatedShows(CurrentPage);                          }                        }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByAnticipatedShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByAnticipatedShows.Field)                          {                              TraktSettings.SortByAnticipatedShows = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadAnticipatedShows(CurrentPage);                          }                      }                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.AnticipatedShowsHideWatchlisted = !TraktSettings.AnticipatedShowsHideWatchlisted;                      UpdateButtonState();                      LoadAnticipatedShows(CurrentPage);                      break;                                        default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIAnticipatedShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIShowListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              if (TraktSettings.EnableJumpToForTVShows)                              {                                  CheckAndPlayEpisode(true);                              }                              else                              {                                  if (item.Show == null) return;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                              }                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadAnticipatedShows(CurrentPage);                          }                        }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByAnticipatedShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByAnticipatedShows.Field)                          {                              TraktSettings.SortByAnticipatedShows = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadAnticipatedShows(CurrentPage);                          }                      }                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.AnticipatedShowsHideWatchlisted = !TraktSettings.AnticipatedShowsHideWatchlisted;                      UpdateButtonState();                      LoadAnticipatedShows(CurrentPage);                      break;                                        default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIAnticipatedShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIShowListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              if (TraktSettings.EnableJumpToForTVShows)                              {                                  CheckAndPlayEpisode(true);                              }                              else                              {                                  if (item.Show == null) return;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                              }                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadAnticipatedShows(CurrentPage);                          }                        }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByAnticipatedShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByAnticipatedShows.Field)                          {                              TraktSettings.SortByAnticipatedShows = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadAnticipatedShows(CurrentPage);                          }                      }                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.AnticipatedShowsHideWatchlisted = !TraktSettings.AnticipatedShowsHideWatchlisted;                      UpdateButtonState();                      LoadAnticipatedShows(CurrentPage);                      break;                                        default:                      break;              }
Magic Number,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetMovieProperties,The following statement contains a magic number: SetProperty("#Trakt.Movie.Ratings.Icon"' (movie.Rating >= 6) ? "love" : "hate");
Magic Number,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetSeasonProperties,The following statement contains a magic number: SetProperty("#Trakt.Season.Ratings.Icon"' (season.Rating >= 6) ? "love" : "hate");
Magic Number,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetShowProperties,The following statement contains a magic number: SetProperty("#Trakt.Show.Ratings.Icon"' (show.Rating > 6) ? "love" : "hate");
Magic Number,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetEpisodeProperties,The following statement contains a magic number: SetProperty("#Trakt.Episode.Ratings.Icon"' (episode.Rating >= 6) ? "love" : "hate");
Magic Number,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowLayoutMenu,The following statement contains a magic number: (int)layout > 3
Magic Number,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetLayoutTranslation,The following statement contains a magic number: switch (layout)              {                  case GUIFacadeControl.Layout.List:                      strLine = GUILocalizeStrings.Get(101);                      break;                  case GUIFacadeControl.Layout.SmallIcons:                      strLine = GUILocalizeStrings.Get(100);                      break;                  case GUIFacadeControl.Layout.LargeIcons:                      strLine = GUILocalizeStrings.Get(417);                      break;                  case GUIFacadeControl.Layout.Filmstrip:                      strLine = GUILocalizeStrings.Get(733);                      break;              }
Magic Number,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetLayoutTranslation,The following statement contains a magic number: switch (layout)              {                  case GUIFacadeControl.Layout.List:                      strLine = GUILocalizeStrings.Get(101);                      break;                  case GUIFacadeControl.Layout.SmallIcons:                      strLine = GUILocalizeStrings.Get(100);                      break;                  case GUIFacadeControl.Layout.LargeIcons:                      strLine = GUILocalizeStrings.Get(417);                      break;                  case GUIFacadeControl.Layout.Filmstrip:                      strLine = GUILocalizeStrings.Get(733);                      break;              }
Magic Number,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetLayoutTranslation,The following statement contains a magic number: switch (layout)              {                  case GUIFacadeControl.Layout.List:                      strLine = GUILocalizeStrings.Get(101);                      break;                  case GUIFacadeControl.Layout.SmallIcons:                      strLine = GUILocalizeStrings.Get(100);                      break;                  case GUIFacadeControl.Layout.LargeIcons:                      strLine = GUILocalizeStrings.Get(417);                      break;                  case GUIFacadeControl.Layout.Filmstrip:                      strLine = GUILocalizeStrings.Get(733);                      break;              }
Magic Number,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetLayoutTranslation,The following statement contains a magic number: switch (layout)              {                  case GUIFacadeControl.Layout.List:                      strLine = GUILocalizeStrings.Get(101);                      break;                  case GUIFacadeControl.Layout.SmallIcons:                      strLine = GUILocalizeStrings.Get(100);                      break;                  case GUIFacadeControl.Layout.LargeIcons:                      strLine = GUILocalizeStrings.Get(417);                      break;                  case GUIFacadeControl.Layout.Filmstrip:                      strLine = GUILocalizeStrings.Get(733);                      break;              }
Magic Number,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowSortMenu,The following statement contains a magic number: dlg.SetHeading(495);
Magic Number,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityItemName,The following statement contains a magic number: switch (type)                  {                      case ActivityType.episode:                          if (action == ActivityAction.seen || action == ActivityAction.collection)                          {                              if (activity.Episodes.Count > 1)                              {                                  // just return show name                                  name = activity.Show.Title;                              }                              else                              {                                  //  get the first and only item in collection of episodes                                  string episodeIndex = activity.Episodes.First().Number.ToString();                                  string seasonIndex = activity.Episodes.First().Season.ToString();                                  string episodeName = activity.Episodes.First().Title;                                    if (!string.IsNullOrEmpty(episodeName))                                      episodeName = string.Format(" - {0}"' episodeName);                                    name = string.Format("{0} - {1}x{2}{3}"' activity.Show.Title' seasonIndex' episodeIndex' episodeName);                              }                          }                          else                          {                              string episodeName = activity.Episode.Title;                                if (!string.IsNullOrEmpty(episodeName))                                  episodeName = string.Format(" - {0}"' episodeName);                                name = string.Format("{0} - {1}x{2}{3}"' activity.Show.Title' activity.Episode.Season.ToString()' activity.Episode.Number.ToString()' episodeName);                          }                          break;                        case ActivityType.show:                          name = activity.Show.Title;                          break;                        case ActivityType.season:                          name = string.Format("{0} - {1} {2}"' activity.Show.Title' Translation.Season' activity.Season.Number);                          break;                        case ActivityType.movie:                          name = string.Format("{0} ({1})"' activity.Movie.Title' activity.Movie.Year);                          break;                        case ActivityType.person:                          name = string.Format("{0}"' activity.Person.Name);                          break;                        case ActivityType.list:                          if (action == ActivityAction.item_added)                          {                              // return the name of the item added to the list                              switch (activity.ListItem.Type)                              {                                  case "show":                                      name = activity.ListItem.Show.Title;                                      break;                                    case "season":                                      name = string.Format("{0} - {1} {2}"' activity.ListItem.Show.Title' Translation.Season' activity.ListItem.Season.Number);                                      break;                                    case "episode":                                      string episodeIndex = activity.ListItem.Episode.Number.ToString();                                      string seasonIndex = activity.ListItem.Episode.Season.ToString();                                      string episodeName = activity.ListItem.Episode.Title;                                        if (string.IsNullOrEmpty(episodeName))                                          episodeName = string.Format("{0} {1}"' Translation.Episode' episodeIndex);                                        name = string.Format("{0} - {1}x{2} - {3}"' activity.ListItem.Show.Title' seasonIndex' episodeIndex' episodeName);                                      break;                                    case "movie":                                      name = string.Format("{0} ({1})"' activity.ListItem.Movie.Title' activity.ListItem.Movie.Year);                                      break;                                    case "person":                                      name = string.Format("{0}"' activity.Person.Name);                                      break;                                }                          }                          else                          {                              // return the list name                              name = activity.List.Name;                          }                          break;                        case ActivityType.comment:                          name = activity.Shout.Text.Truncate(30);                          break;                  }
Magic Number,TraktPlugin.GUI,GUIListItems,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          if (SelectedType == TraktItemType.movie)                          {                              CheckAndPlayMovie(true);                          }                          else if (TraktSettings.EnableJumpToForTVShows || SelectedType == TraktItemType.episode)                          {                              CheckAndPlayEpisode(true);                          }                          else if (SelectedType == TraktItemType.show)                          {                              var selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                                var listItem = selectedItem.TVTag as TraktListItem;                              if (listItem == null) return;                                GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' listItem.Show.ToJSON());                          }                          else if (SelectedType == TraktItemType.season)                          {                              var selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                                var listItem = selectedItem.TVTag as TraktListItem;                              if (listItem == null) return;                                // create loading parameter for episode listing                              var loadingParam = new SeasonLoadingParameter                              {                                  Season = listItem.Season'                                  Show = listItem.Show                              };                              GUIWindowManager.ActivateWindow((int)TraktGUIWindows.SeasonEpisodes' loadingParam.ToJSON());                          }                          else if (SelectedType == TraktItemType.person)                          {                              var selectedItem = Facade.SelectedListItem;                              if (selectedItem == null) return;                                var listItem = selectedItem.TVTag as TraktListItem;                              if (listItem == null) return;                                // if we already have the person summary' parse it along to the window                              GUIPersonSummary.CurrentPerson = listItem.Person;                              GUIWindowManager.ActivateWindow((int)TraktGUIWindows.PersonSummary);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIListItems,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          if (SelectedType == TraktItemType.movie)                          {                              CheckAndPlayMovie(true);                          }                          else if (TraktSettings.EnableJumpToForTVShows || SelectedType == TraktItemType.episode)                          {                              CheckAndPlayEpisode(true);                          }                          else if (SelectedType == TraktItemType.show)                          {                              var selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                                var listItem = selectedItem.TVTag as TraktListItem;                              if (listItem == null) return;                                GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' listItem.Show.ToJSON());                          }                          else if (SelectedType == TraktItemType.season)                          {                              var selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                                var listItem = selectedItem.TVTag as TraktListItem;                              if (listItem == null) return;                                // create loading parameter for episode listing                              var loadingParam = new SeasonLoadingParameter                              {                                  Season = listItem.Season'                                  Show = listItem.Show                              };                              GUIWindowManager.ActivateWindow((int)TraktGUIWindows.SeasonEpisodes' loadingParam.ToJSON());                          }                          else if (SelectedType == TraktItemType.person)                          {                              var selectedItem = Facade.SelectedListItem;                              if (selectedItem == null) return;                                var listItem = selectedItem.TVTag as TraktListItem;                              if (listItem == null) return;                                // if we already have the person summary' parse it along to the window                              GUIPersonSummary.CurrentPerson = listItem.Person;                              GUIWindowManager.ActivateWindow((int)TraktGUIWindows.PersonSummary);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUICustomListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUICustomListItem.cs,GetImages,The following statement contains a magic number: int groupSize = (int)Math.Max(1' Math.Floor((double)itemsWithThumbs.Count / 5));
Magic Number,TraktPlugin.GUI,GUIEpisodeListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,GetImages,The following statement contains a magic number: int groupSize = (int)Math.Max(1' Math.Floor((double)itemsWithThumbs.Count / 5));
Magic Number,TraktPlugin.GUI,GUIEpisodeListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,SetImageToGui,The following statement contains a magic number: memoryImage = GUIImageHandler.DrawOverlayOnEpisodeThumb(imageFilePath' mainOverlay' ratingOverlay' new Size(400' 225));
Magic Number,TraktPlugin.GUI,GUIEpisodeListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,SetImageToGui,The following statement contains a magic number: memoryImage = GUIImageHandler.DrawOverlayOnEpisodeThumb(imageFilePath' mainOverlay' ratingOverlay' new Size(400' 225));
Magic Number,TraktPlugin.GUI,GUIMovieListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIMovieListItem.cs,GetImages,The following statement contains a magic number: int groupSize = (int)Math.Max(1' Math.Floor((double)itemsWithThumbs.Count / 5));
Magic Number,TraktPlugin.GUI,GUIPersonListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIPersonListItem.cs,GetImages,The following statement contains a magic number: int groupSize = (int)Math.Max(1' Math.Floor((double)itemsWithThumbs.Count / 5));
Magic Number,TraktPlugin.GUI,GUISeasonListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUISeasonListItem.cs,GetImages,The following statement contains a magic number: int groupSize = (int)Math.Max(1' Math.Floor((double)itemsWithThumbs.Count / 5));
Magic Number,TraktPlugin.GUI,GUIShowListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIShowListItem.cs,GetImages,The following statement contains a magic number: int groupSize = (int)Math.Max(1' Math.Floor((double)itemsWithThumbs.Count / 5));
Magic Number,TraktPlugin.GUI,GUIUserListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIUserListItem.cs,GetImages,The following statement contains a magic number: int groupSize = (int)Math.Max(1' Math.Floor((double)itemsWithThumbs.Count / 5));
Magic Number,TraktPlugin.GUI,GUIUserListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIUserListItem.cs,SetImageToGui,The following statement contains a magic number: memoryImage = GUIImageHandler.DrawOverlayOnAvatar(imageFilePath' ratingOverlay' new Size(140' 140));
Magic Number,TraktPlugin.GUI,GUIUserListItem,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIUserListItem.cs,SetImageToGui,The following statement contains a magic number: memoryImage = GUIImageHandler.DrawOverlayOnAvatar(imageFilePath' ratingOverlay' new Size(140' 140));
Magic Number,TraktPlugin.GUI,GUILists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          GUIListItem selectedItem = this.Facade.SelectedListItem;                          if (selectedItem == null) return;                            TraktListDetail selectedList = null;                          string username = CurrentUser;                            if (selectedItem.TVTag is TraktListDetail)                          {                              selectedList = selectedItem.TVTag as TraktListDetail;                          }                          else if (selectedItem.TVTag is TraktListTrending)                          {                              var trending = selectedItem.TVTag as TraktListTrending;                              selectedList = trending.List;                              username = trending.List.User.Username;                          }                          else if (selectedItem.TVTag is TraktListPopular)                          {                              var popular = selectedItem.TVTag as TraktListPopular;                              selectedList = popular.List;                              username = popular.List.User.Username;                          }                          else if (selectedItem.TVTag is TraktLike)                          {                              var likedItem = selectedItem.TVTag as TraktLike;                              selectedList = likedItem.List;                              username = likedItem.List.User.Username;                          }                            // Load current selected list                          GUIListItems.CurrentList = selectedList;                          GUIListItems.CurrentUser = username;                          ReturningFromListItemsOrComments = true;                            GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CustomListItems);                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPersonMovieCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var item = Facade.SelectedListItem as GUIMovieListItem;                      if (item == null) return;                        CheckAndPlayMovie(true);                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByCreditMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByCreditMovies.Field)                          {                              TraktSettings.SortByCreditMovies = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadCredits();                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideWatched = !TraktSettings.CreditMoviesHideWatched;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideWatchlisted = !TraktSettings.CreditMoviesHideWatchlisted;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideCollected = !TraktSettings.CreditMoviesHideCollected;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideRated = !TraktSettings.CreditMoviesHideRated;                      UpdateButtonState();                      LoadCredits();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPersonMovieCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var item = Facade.SelectedListItem as GUIMovieListItem;                      if (item == null) return;                        CheckAndPlayMovie(true);                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByCreditMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByCreditMovies.Field)                          {                              TraktSettings.SortByCreditMovies = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadCredits();                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideWatched = !TraktSettings.CreditMoviesHideWatched;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideWatchlisted = !TraktSettings.CreditMoviesHideWatchlisted;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideCollected = !TraktSettings.CreditMoviesHideCollected;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideRated = !TraktSettings.CreditMoviesHideRated;                      UpdateButtonState();                      LoadCredits();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPersonMovieCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var item = Facade.SelectedListItem as GUIMovieListItem;                      if (item == null) return;                        CheckAndPlayMovie(true);                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByCreditMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByCreditMovies.Field)                          {                              TraktSettings.SortByCreditMovies = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadCredits();                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideWatched = !TraktSettings.CreditMoviesHideWatched;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideWatchlisted = !TraktSettings.CreditMoviesHideWatchlisted;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideCollected = !TraktSettings.CreditMoviesHideCollected;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideRated = !TraktSettings.CreditMoviesHideRated;                      UpdateButtonState();                      LoadCredits();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPersonMovieCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var item = Facade.SelectedListItem as GUIMovieListItem;                      if (item == null) return;                        CheckAndPlayMovie(true);                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByCreditMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByCreditMovies.Field)                          {                              TraktSettings.SortByCreditMovies = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadCredits();                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideWatched = !TraktSettings.CreditMoviesHideWatched;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideWatchlisted = !TraktSettings.CreditMoviesHideWatchlisted;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideCollected = !TraktSettings.CreditMoviesHideCollected;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideRated = !TraktSettings.CreditMoviesHideRated;                      UpdateButtonState();                      LoadCredits();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPersonMovieCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var item = Facade.SelectedListItem as GUIMovieListItem;                      if (item == null) return;                        CheckAndPlayMovie(true);                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByCreditMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByCreditMovies.Field)                          {                              TraktSettings.SortByCreditMovies = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadCredits();                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideWatched = !TraktSettings.CreditMoviesHideWatched;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideWatchlisted = !TraktSettings.CreditMoviesHideWatchlisted;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideCollected = !TraktSettings.CreditMoviesHideCollected;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideRated = !TraktSettings.CreditMoviesHideRated;                      UpdateButtonState();                      LoadCredits();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPersonMovieCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var item = Facade.SelectedListItem as GUIMovieListItem;                      if (item == null) return;                        CheckAndPlayMovie(true);                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByCreditMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByCreditMovies.Field)                          {                              TraktSettings.SortByCreditMovies = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadCredits();                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideWatched = !TraktSettings.CreditMoviesHideWatched;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideWatchlisted = !TraktSettings.CreditMoviesHideWatchlisted;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideCollected = !TraktSettings.CreditMoviesHideCollected;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideRated = !TraktSettings.CreditMoviesHideRated;                      UpdateButtonState();                      LoadCredits();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPersonMovieCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var item = Facade.SelectedListItem as GUIMovieListItem;                      if (item == null) return;                        CheckAndPlayMovie(true);                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByCreditMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByCreditMovies.Field)                          {                              TraktSettings.SortByCreditMovies = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadCredits();                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideWatched = !TraktSettings.CreditMoviesHideWatched;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideWatchlisted = !TraktSettings.CreditMoviesHideWatchlisted;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideCollected = !TraktSettings.CreditMoviesHideCollected;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditMoviesHideRated = !TraktSettings.CreditMoviesHideRated;                      UpdateButtonState();                      LoadCredits();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  case (2):                      GUIControl.FocusControl(GetID' Facade.GetID);                      ShowViewMenu();                      break;                    case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      //TODOGUIControl.FocusControl(GetID' Facade.GetID);                      //TODOSearchForUser();                      break;                    case (4):                      GUIControl.FocusControl(GetID' Facade.GetID);                      ClearCache();                      LoadView();                      break;                    case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          switch (CurrentViewLevel)                          {                              case ViewLevel.Network:                                  var selectedItem = Facade.SelectedListItem as GUIUserListItem;                                  if (selectedItem.IsFolder)                                  {                                      // return to previous view list                                      LoadView();                                  }                                  else                                  {                                      if (!CurrentSelectedUser.IsPrivate || CurrentView == View.Friends)                                      {                                          LoadActivityTypes();                                      }                                      else                                      {                                          GUIUtils.ShowOKDialog(Translation.Protected' Translation.UserIsProtected);                                      }                                  }                                  break;                                case ViewLevel.ActivityTypes:                                  // Launch Corresponding Activity window                                  switch (SelectedActivity)                                  {                                      case (ActivityType.UserProfile):                                          GUIUserProfile.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.UserProfile);                                          break;                                        case (ActivityType.RecentWatchedMovies):                                          GUIRecentWatchedMovies.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedMovies);                                          break;                                        case (ActivityType.RecentWatchedEpisodes):                                          GUIRecentWatchedEpisodes.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedEpisodes);                                          break;                                        case (ActivityType.RecentAddedEpisodes):                                          GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                          //TODOGUIRecentAddedEpisodes.CurrentUser = CurrentSelectedUser.Username;                                          //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);                                          break;                                        case (ActivityType.RecentAddedMovies):                                          GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                          //TODOGUIRecentAddedMovies.CurrentUser = CurrentSelectedUser.Username;                                          //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);                                          break;                                        case (ActivityType.RecentComments):                                          GUIRecentShouts.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentShouts);                                          break;                                        case (ActivityType.MovieWatchList):                                          GUIWatchListMovies.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListMovies);                                          break;                                        case (ActivityType.ShowWatchList):                                          GUIWatchListShows.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListShows);                                          break;                                        case (ActivityType.EpisodeWatchList):                                          GUIWatchListEpisodes.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListEpisodes);                                          break;                                        case (ActivityType.Lists):                                          GUILists.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CustomLists);                                          break;                                  }                                  break;                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  case (2):                      GUIControl.FocusControl(GetID' Facade.GetID);                      ShowViewMenu();                      break;                    case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      //TODOGUIControl.FocusControl(GetID' Facade.GetID);                      //TODOSearchForUser();                      break;                    case (4):                      GUIControl.FocusControl(GetID' Facade.GetID);                      ClearCache();                      LoadView();                      break;                    case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          switch (CurrentViewLevel)                          {                              case ViewLevel.Network:                                  var selectedItem = Facade.SelectedListItem as GUIUserListItem;                                  if (selectedItem.IsFolder)                                  {                                      // return to previous view list                                      LoadView();                                  }                                  else                                  {                                      if (!CurrentSelectedUser.IsPrivate || CurrentView == View.Friends)                                      {                                          LoadActivityTypes();                                      }                                      else                                      {                                          GUIUtils.ShowOKDialog(Translation.Protected' Translation.UserIsProtected);                                      }                                  }                                  break;                                case ViewLevel.ActivityTypes:                                  // Launch Corresponding Activity window                                  switch (SelectedActivity)                                  {                                      case (ActivityType.UserProfile):                                          GUIUserProfile.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.UserProfile);                                          break;                                        case (ActivityType.RecentWatchedMovies):                                          GUIRecentWatchedMovies.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedMovies);                                          break;                                        case (ActivityType.RecentWatchedEpisodes):                                          GUIRecentWatchedEpisodes.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedEpisodes);                                          break;                                        case (ActivityType.RecentAddedEpisodes):                                          GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                          //TODOGUIRecentAddedEpisodes.CurrentUser = CurrentSelectedUser.Username;                                          //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);                                          break;                                        case (ActivityType.RecentAddedMovies):                                          GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                          //TODOGUIRecentAddedMovies.CurrentUser = CurrentSelectedUser.Username;                                          //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);                                          break;                                        case (ActivityType.RecentComments):                                          GUIRecentShouts.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentShouts);                                          break;                                        case (ActivityType.MovieWatchList):                                          GUIWatchListMovies.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListMovies);                                          break;                                        case (ActivityType.ShowWatchList):                                          GUIWatchListShows.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListShows);                                          break;                                        case (ActivityType.EpisodeWatchList):                                          GUIWatchListEpisodes.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListEpisodes);                                          break;                                        case (ActivityType.Lists):                                          GUILists.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CustomLists);                                          break;                                  }                                  break;                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  case (2):                      GUIControl.FocusControl(GetID' Facade.GetID);                      ShowViewMenu();                      break;                    case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      //TODOGUIControl.FocusControl(GetID' Facade.GetID);                      //TODOSearchForUser();                      break;                    case (4):                      GUIControl.FocusControl(GetID' Facade.GetID);                      ClearCache();                      LoadView();                      break;                    case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          switch (CurrentViewLevel)                          {                              case ViewLevel.Network:                                  var selectedItem = Facade.SelectedListItem as GUIUserListItem;                                  if (selectedItem.IsFolder)                                  {                                      // return to previous view list                                      LoadView();                                  }                                  else                                  {                                      if (!CurrentSelectedUser.IsPrivate || CurrentView == View.Friends)                                      {                                          LoadActivityTypes();                                      }                                      else                                      {                                          GUIUtils.ShowOKDialog(Translation.Protected' Translation.UserIsProtected);                                      }                                  }                                  break;                                case ViewLevel.ActivityTypes:                                  // Launch Corresponding Activity window                                  switch (SelectedActivity)                                  {                                      case (ActivityType.UserProfile):                                          GUIUserProfile.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.UserProfile);                                          break;                                        case (ActivityType.RecentWatchedMovies):                                          GUIRecentWatchedMovies.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedMovies);                                          break;                                        case (ActivityType.RecentWatchedEpisodes):                                          GUIRecentWatchedEpisodes.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedEpisodes);                                          break;                                        case (ActivityType.RecentAddedEpisodes):                                          GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                          //TODOGUIRecentAddedEpisodes.CurrentUser = CurrentSelectedUser.Username;                                          //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);                                          break;                                        case (ActivityType.RecentAddedMovies):                                          GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                          //TODOGUIRecentAddedMovies.CurrentUser = CurrentSelectedUser.Username;                                          //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);                                          break;                                        case (ActivityType.RecentComments):                                          GUIRecentShouts.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentShouts);                                          break;                                        case (ActivityType.MovieWatchList):                                          GUIWatchListMovies.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListMovies);                                          break;                                        case (ActivityType.ShowWatchList):                                          GUIWatchListShows.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListShows);                                          break;                                        case (ActivityType.EpisodeWatchList):                                          GUIWatchListEpisodes.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListEpisodes);                                          break;                                        case (ActivityType.Lists):                                          GUILists.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CustomLists);                                          break;                                  }                                  break;                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  case (2):                      GUIControl.FocusControl(GetID' Facade.GetID);                      ShowViewMenu();                      break;                    case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      //TODOGUIControl.FocusControl(GetID' Facade.GetID);                      //TODOSearchForUser();                      break;                    case (4):                      GUIControl.FocusControl(GetID' Facade.GetID);                      ClearCache();                      LoadView();                      break;                    case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          switch (CurrentViewLevel)                          {                              case ViewLevel.Network:                                  var selectedItem = Facade.SelectedListItem as GUIUserListItem;                                  if (selectedItem.IsFolder)                                  {                                      // return to previous view list                                      LoadView();                                  }                                  else                                  {                                      if (!CurrentSelectedUser.IsPrivate || CurrentView == View.Friends)                                      {                                          LoadActivityTypes();                                      }                                      else                                      {                                          GUIUtils.ShowOKDialog(Translation.Protected' Translation.UserIsProtected);                                      }                                  }                                  break;                                case ViewLevel.ActivityTypes:                                  // Launch Corresponding Activity window                                  switch (SelectedActivity)                                  {                                      case (ActivityType.UserProfile):                                          GUIUserProfile.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.UserProfile);                                          break;                                        case (ActivityType.RecentWatchedMovies):                                          GUIRecentWatchedMovies.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedMovies);                                          break;                                        case (ActivityType.RecentWatchedEpisodes):                                          GUIRecentWatchedEpisodes.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedEpisodes);                                          break;                                        case (ActivityType.RecentAddedEpisodes):                                          GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                          //TODOGUIRecentAddedEpisodes.CurrentUser = CurrentSelectedUser.Username;                                          //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);                                          break;                                        case (ActivityType.RecentAddedMovies):                                          GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                          //TODOGUIRecentAddedMovies.CurrentUser = CurrentSelectedUser.Username;                                          //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);                                          break;                                        case (ActivityType.RecentComments):                                          GUIRecentShouts.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentShouts);                                          break;                                        case (ActivityType.MovieWatchList):                                          GUIWatchListMovies.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListMovies);                                          break;                                        case (ActivityType.ShowWatchList):                                          GUIWatchListShows.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListShows);                                          break;                                        case (ActivityType.EpisodeWatchList):                                          GUIWatchListEpisodes.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListEpisodes);                                          break;                                        case (ActivityType.Lists):                                          GUILists.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CustomLists);                                          break;                                  }                                  break;                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,LoadActivityTypes,The following statement contains a magic number: GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' Facade.Count.ToString()' GUILocalizeStrings.Get(507)));
Magic Number,TraktPlugin.GUI,GUIPersonShowCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var item = Facade.SelectedListItem as GUIShowListItem;                      if (item == null) return;                        if (TraktSettings.EnableJumpToForTVShows)                      {                          CheckAndPlayEpisode(true);                      }                      else                      {                          if (item.Show == null) return;                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByCreditShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByCreditShows.Field)                          {                              TraktSettings.SortByCreditShows = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadCredits();                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideWatched = !TraktSettings.CreditShowsHideWatched;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideWatchlisted = !TraktSettings.CreditShowsHideWatchlisted;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideCollected = !TraktSettings.CreditShowsHideCollected;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideRated = !TraktSettings.CreditShowsHideRated;                      UpdateButtonState();                      LoadCredits();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPersonShowCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var item = Facade.SelectedListItem as GUIShowListItem;                      if (item == null) return;                        if (TraktSettings.EnableJumpToForTVShows)                      {                          CheckAndPlayEpisode(true);                      }                      else                      {                          if (item.Show == null) return;                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByCreditShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByCreditShows.Field)                          {                              TraktSettings.SortByCreditShows = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadCredits();                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideWatched = !TraktSettings.CreditShowsHideWatched;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideWatchlisted = !TraktSettings.CreditShowsHideWatchlisted;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideCollected = !TraktSettings.CreditShowsHideCollected;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideRated = !TraktSettings.CreditShowsHideRated;                      UpdateButtonState();                      LoadCredits();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPersonShowCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var item = Facade.SelectedListItem as GUIShowListItem;                      if (item == null) return;                        if (TraktSettings.EnableJumpToForTVShows)                      {                          CheckAndPlayEpisode(true);                      }                      else                      {                          if (item.Show == null) return;                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByCreditShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByCreditShows.Field)                          {                              TraktSettings.SortByCreditShows = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadCredits();                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideWatched = !TraktSettings.CreditShowsHideWatched;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideWatchlisted = !TraktSettings.CreditShowsHideWatchlisted;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideCollected = !TraktSettings.CreditShowsHideCollected;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideRated = !TraktSettings.CreditShowsHideRated;                      UpdateButtonState();                      LoadCredits();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPersonShowCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var item = Facade.SelectedListItem as GUIShowListItem;                      if (item == null) return;                        if (TraktSettings.EnableJumpToForTVShows)                      {                          CheckAndPlayEpisode(true);                      }                      else                      {                          if (item.Show == null) return;                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByCreditShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByCreditShows.Field)                          {                              TraktSettings.SortByCreditShows = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadCredits();                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideWatched = !TraktSettings.CreditShowsHideWatched;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideWatchlisted = !TraktSettings.CreditShowsHideWatchlisted;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideCollected = !TraktSettings.CreditShowsHideCollected;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideRated = !TraktSettings.CreditShowsHideRated;                      UpdateButtonState();                      LoadCredits();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPersonShowCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var item = Facade.SelectedListItem as GUIShowListItem;                      if (item == null) return;                        if (TraktSettings.EnableJumpToForTVShows)                      {                          CheckAndPlayEpisode(true);                      }                      else                      {                          if (item.Show == null) return;                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByCreditShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByCreditShows.Field)                          {                              TraktSettings.SortByCreditShows = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadCredits();                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideWatched = !TraktSettings.CreditShowsHideWatched;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideWatchlisted = !TraktSettings.CreditShowsHideWatchlisted;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideCollected = !TraktSettings.CreditShowsHideCollected;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideRated = !TraktSettings.CreditShowsHideRated;                      UpdateButtonState();                      LoadCredits();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPersonShowCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var item = Facade.SelectedListItem as GUIShowListItem;                      if (item == null) return;                        if (TraktSettings.EnableJumpToForTVShows)                      {                          CheckAndPlayEpisode(true);                      }                      else                      {                          if (item.Show == null) return;                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByCreditShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByCreditShows.Field)                          {                              TraktSettings.SortByCreditShows = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadCredits();                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideWatched = !TraktSettings.CreditShowsHideWatched;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideWatchlisted = !TraktSettings.CreditShowsHideWatchlisted;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideCollected = !TraktSettings.CreditShowsHideCollected;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideRated = !TraktSettings.CreditShowsHideRated;                      UpdateButtonState();                      LoadCredits();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPersonShowCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var item = Facade.SelectedListItem as GUIShowListItem;                      if (item == null) return;                        if (TraktSettings.EnableJumpToForTVShows)                      {                          CheckAndPlayEpisode(true);                      }                      else                      {                          if (item.Show == null) return;                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByCreditShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByCreditShows.Field)                          {                              TraktSettings.SortByCreditShows = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadCredits();                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideWatched = !TraktSettings.CreditShowsHideWatched;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideWatchlisted = !TraktSettings.CreditShowsHideWatchlisted;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideCollected = !TraktSettings.CreditShowsHideCollected;                      UpdateButtonState();                      LoadCredits();                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = 0;                      TraktSettings.CreditShowsHideRated = !TraktSettings.CreditShowsHideRated;                      UpdateButtonState();                      LoadCredits();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPersonSummary,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonSummary.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var selectedItem = Facade.SelectedListItem;                      if (selectedItem == null) return;                        if (CurrentView == View.Summary)                      {                          if (selectedItem.TVTag as string == View.MovieCredits.ToString())                          {                              LoadMovieCredits();                          }                          else if (selectedItem.TVTag as string == View.ShowCredits.ToString())                          {                              LoadShowCredits();                          }                      }                      else if (CurrentView == View.MovieCredits)                      {                          GUIPersonMovieCredits.CurrentPerson = CurrentPerson;                          GUIPersonMovieCredits.CurrentCredits = selectedItem.MusicTag as TraktPersonMovieCredits;                          GUIPersonMovieCredits.CurrentCreditType = (Credit)selectedItem.TVTag;                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.PersonCreditMovies);                      }                      else if (CurrentView == View.ShowCredits)                      {                          GUIPersonShowCredits.CurrentPerson = CurrentPerson;                          GUIPersonShowCredits.CurrentCredits = selectedItem.MusicTag as TraktPersonShowCredits;                          GUIPersonShowCredits.CurrentCreditType = (Credit)selectedItem.TVTag;                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.PersonCreditShows);                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,Reset,The following statement contains a magic number: SetLine(2' "");
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,Reset,The following statement contains a magic number: SetLine(3' "");
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,Reset,The following statement contains a magic number: SetLine(4' "");
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,DoModal,The following statement contains a magic number: SetLine(2' Translation.PinCodeDlgLabel2);
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID)              {                  case Action.ActionType.REMOTE_1:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "1";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_2:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "2";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_3:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "3";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_4:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "4";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_5:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "5";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_6:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "6";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_7:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "7";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_8:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "8";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_9:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "9";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_0:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "0";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.ACTION_KEY_PRESSED:                      // some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands                      if (EnteredPinCode.Length >= 4) return;                      if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9')                      {                          char key = (char)action.m_key.KeyChar;                          EnteredPinCode = EnteredPinCode + key;                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_DELETE_ITEM:                  case Action.ActionType.ACTION_MOVE_DOWN:                  case Action.ActionType.ACTION_MOVE_LEFT:                      if (EnteredPinCode.Length > 0)                      {                          EnteredPinCode = EnteredPinCode.Substring(0' EnteredPinCode.Length - 1);                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_SELECT_ITEM:                      PageDestroy();                      return;                  case Action.ActionType.ACTION_PREVIOUS_MENU:                  case Action.ActionType.ACTION_CLOSE_DIALOG:                  case Action.ActionType.ACTION_CONTEXT_MENU:                      PageDestroy();                      return;              }
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID)              {                  case Action.ActionType.REMOTE_1:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "1";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_2:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "2";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_3:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "3";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_4:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "4";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_5:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "5";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_6:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "6";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_7:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "7";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_8:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "8";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_9:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "9";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_0:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "0";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.ACTION_KEY_PRESSED:                      // some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands                      if (EnteredPinCode.Length >= 4) return;                      if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9')                      {                          char key = (char)action.m_key.KeyChar;                          EnteredPinCode = EnteredPinCode + key;                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_DELETE_ITEM:                  case Action.ActionType.ACTION_MOVE_DOWN:                  case Action.ActionType.ACTION_MOVE_LEFT:                      if (EnteredPinCode.Length > 0)                      {                          EnteredPinCode = EnteredPinCode.Substring(0' EnteredPinCode.Length - 1);                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_SELECT_ITEM:                      PageDestroy();                      return;                  case Action.ActionType.ACTION_PREVIOUS_MENU:                  case Action.ActionType.ACTION_CLOSE_DIALOG:                  case Action.ActionType.ACTION_CONTEXT_MENU:                      PageDestroy();                      return;              }
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID)              {                  case Action.ActionType.REMOTE_1:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "1";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_2:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "2";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_3:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "3";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_4:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "4";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_5:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "5";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_6:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "6";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_7:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "7";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_8:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "8";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_9:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "9";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_0:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "0";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.ACTION_KEY_PRESSED:                      // some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands                      if (EnteredPinCode.Length >= 4) return;                      if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9')                      {                          char key = (char)action.m_key.KeyChar;                          EnteredPinCode = EnteredPinCode + key;                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_DELETE_ITEM:                  case Action.ActionType.ACTION_MOVE_DOWN:                  case Action.ActionType.ACTION_MOVE_LEFT:                      if (EnteredPinCode.Length > 0)                      {                          EnteredPinCode = EnteredPinCode.Substring(0' EnteredPinCode.Length - 1);                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_SELECT_ITEM:                      PageDestroy();                      return;                  case Action.ActionType.ACTION_PREVIOUS_MENU:                  case Action.ActionType.ACTION_CLOSE_DIALOG:                  case Action.ActionType.ACTION_CONTEXT_MENU:                      PageDestroy();                      return;              }
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID)              {                  case Action.ActionType.REMOTE_1:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "1";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_2:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "2";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_3:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "3";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_4:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "4";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_5:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "5";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_6:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "6";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_7:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "7";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_8:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "8";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_9:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "9";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_0:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "0";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.ACTION_KEY_PRESSED:                      // some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands                      if (EnteredPinCode.Length >= 4) return;                      if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9')                      {                          char key = (char)action.m_key.KeyChar;                          EnteredPinCode = EnteredPinCode + key;                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_DELETE_ITEM:                  case Action.ActionType.ACTION_MOVE_DOWN:                  case Action.ActionType.ACTION_MOVE_LEFT:                      if (EnteredPinCode.Length > 0)                      {                          EnteredPinCode = EnteredPinCode.Substring(0' EnteredPinCode.Length - 1);                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_SELECT_ITEM:                      PageDestroy();                      return;                  case Action.ActionType.ACTION_PREVIOUS_MENU:                  case Action.ActionType.ACTION_CLOSE_DIALOG:                  case Action.ActionType.ACTION_CONTEXT_MENU:                      PageDestroy();                      return;              }
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID)              {                  case Action.ActionType.REMOTE_1:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "1";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_2:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "2";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_3:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "3";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_4:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "4";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_5:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "5";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_6:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "6";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_7:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "7";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_8:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "8";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_9:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "9";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_0:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "0";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.ACTION_KEY_PRESSED:                      // some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands                      if (EnteredPinCode.Length >= 4) return;                      if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9')                      {                          char key = (char)action.m_key.KeyChar;                          EnteredPinCode = EnteredPinCode + key;                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_DELETE_ITEM:                  case Action.ActionType.ACTION_MOVE_DOWN:                  case Action.ActionType.ACTION_MOVE_LEFT:                      if (EnteredPinCode.Length > 0)                      {                          EnteredPinCode = EnteredPinCode.Substring(0' EnteredPinCode.Length - 1);                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_SELECT_ITEM:                      PageDestroy();                      return;                  case Action.ActionType.ACTION_PREVIOUS_MENU:                  case Action.ActionType.ACTION_CLOSE_DIALOG:                  case Action.ActionType.ACTION_CONTEXT_MENU:                      PageDestroy();                      return;              }
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID)              {                  case Action.ActionType.REMOTE_1:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "1";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_2:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "2";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_3:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "3";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_4:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "4";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_5:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "5";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_6:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "6";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_7:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "7";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_8:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "8";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_9:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "9";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_0:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "0";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.ACTION_KEY_PRESSED:                      // some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands                      if (EnteredPinCode.Length >= 4) return;                      if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9')                      {                          char key = (char)action.m_key.KeyChar;                          EnteredPinCode = EnteredPinCode + key;                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_DELETE_ITEM:                  case Action.ActionType.ACTION_MOVE_DOWN:                  case Action.ActionType.ACTION_MOVE_LEFT:                      if (EnteredPinCode.Length > 0)                      {                          EnteredPinCode = EnteredPinCode.Substring(0' EnteredPinCode.Length - 1);                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_SELECT_ITEM:                      PageDestroy();                      return;                  case Action.ActionType.ACTION_PREVIOUS_MENU:                  case Action.ActionType.ACTION_CLOSE_DIALOG:                  case Action.ActionType.ACTION_CONTEXT_MENU:                      PageDestroy();                      return;              }
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID)              {                  case Action.ActionType.REMOTE_1:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "1";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_2:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "2";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_3:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "3";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_4:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "4";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_5:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "5";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_6:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "6";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_7:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "7";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_8:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "8";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_9:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "9";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_0:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "0";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.ACTION_KEY_PRESSED:                      // some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands                      if (EnteredPinCode.Length >= 4) return;                      if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9')                      {                          char key = (char)action.m_key.KeyChar;                          EnteredPinCode = EnteredPinCode + key;                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_DELETE_ITEM:                  case Action.ActionType.ACTION_MOVE_DOWN:                  case Action.ActionType.ACTION_MOVE_LEFT:                      if (EnteredPinCode.Length > 0)                      {                          EnteredPinCode = EnteredPinCode.Substring(0' EnteredPinCode.Length - 1);                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_SELECT_ITEM:                      PageDestroy();                      return;                  case Action.ActionType.ACTION_PREVIOUS_MENU:                  case Action.ActionType.ACTION_CLOSE_DIALOG:                  case Action.ActionType.ACTION_CONTEXT_MENU:                      PageDestroy();                      return;              }
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID)              {                  case Action.ActionType.REMOTE_1:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "1";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_2:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "2";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_3:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "3";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_4:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "4";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_5:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "5";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_6:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "6";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_7:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "7";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_8:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "8";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_9:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "9";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_0:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "0";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.ACTION_KEY_PRESSED:                      // some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands                      if (EnteredPinCode.Length >= 4) return;                      if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9')                      {                          char key = (char)action.m_key.KeyChar;                          EnteredPinCode = EnteredPinCode + key;                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_DELETE_ITEM:                  case Action.ActionType.ACTION_MOVE_DOWN:                  case Action.ActionType.ACTION_MOVE_LEFT:                      if (EnteredPinCode.Length > 0)                      {                          EnteredPinCode = EnteredPinCode.Substring(0' EnteredPinCode.Length - 1);                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_SELECT_ITEM:                      PageDestroy();                      return;                  case Action.ActionType.ACTION_PREVIOUS_MENU:                  case Action.ActionType.ACTION_CLOSE_DIALOG:                  case Action.ActionType.ACTION_CONTEXT_MENU:                      PageDestroy();                      return;              }
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID)              {                  case Action.ActionType.REMOTE_1:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "1";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_2:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "2";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_3:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "3";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_4:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "4";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_5:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "5";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_6:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "6";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_7:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "7";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_8:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "8";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_9:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "9";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_0:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "0";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.ACTION_KEY_PRESSED:                      // some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands                      if (EnteredPinCode.Length >= 4) return;                      if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9')                      {                          char key = (char)action.m_key.KeyChar;                          EnteredPinCode = EnteredPinCode + key;                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_DELETE_ITEM:                  case Action.ActionType.ACTION_MOVE_DOWN:                  case Action.ActionType.ACTION_MOVE_LEFT:                      if (EnteredPinCode.Length > 0)                      {                          EnteredPinCode = EnteredPinCode.Substring(0' EnteredPinCode.Length - 1);                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_SELECT_ITEM:                      PageDestroy();                      return;                  case Action.ActionType.ACTION_PREVIOUS_MENU:                  case Action.ActionType.ACTION_CLOSE_DIALOG:                  case Action.ActionType.ACTION_CONTEXT_MENU:                      PageDestroy();                      return;              }
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID)              {                  case Action.ActionType.REMOTE_1:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "1";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_2:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "2";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_3:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "3";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_4:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "4";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_5:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "5";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_6:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "6";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_7:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "7";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_8:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "8";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_9:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "9";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_0:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "0";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.ACTION_KEY_PRESSED:                      // some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands                      if (EnteredPinCode.Length >= 4) return;                      if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9')                      {                          char key = (char)action.m_key.KeyChar;                          EnteredPinCode = EnteredPinCode + key;                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_DELETE_ITEM:                  case Action.ActionType.ACTION_MOVE_DOWN:                  case Action.ActionType.ACTION_MOVE_LEFT:                      if (EnteredPinCode.Length > 0)                      {                          EnteredPinCode = EnteredPinCode.Substring(0' EnteredPinCode.Length - 1);                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_SELECT_ITEM:                      PageDestroy();                      return;                  case Action.ActionType.ACTION_PREVIOUS_MENU:                  case Action.ActionType.ACTION_CLOSE_DIALOG:                  case Action.ActionType.ACTION_CONTEXT_MENU:                      PageDestroy();                      return;              }
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID)              {                  case Action.ActionType.REMOTE_1:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "1";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_2:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "2";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_3:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "3";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_4:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "4";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_5:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "5";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_6:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "6";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_7:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "7";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_8:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "8";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_9:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "9";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_0:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "0";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.ACTION_KEY_PRESSED:                      // some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands                      if (EnteredPinCode.Length >= 4) return;                      if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9')                      {                          char key = (char)action.m_key.KeyChar;                          EnteredPinCode = EnteredPinCode + key;                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_DELETE_ITEM:                  case Action.ActionType.ACTION_MOVE_DOWN:                  case Action.ActionType.ACTION_MOVE_LEFT:                      if (EnteredPinCode.Length > 0)                      {                          EnteredPinCode = EnteredPinCode.Substring(0' EnteredPinCode.Length - 1);                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_SELECT_ITEM:                      PageDestroy();                      return;                  case Action.ActionType.ACTION_PREVIOUS_MENU:                  case Action.ActionType.ACTION_CLOSE_DIALOG:                  case Action.ActionType.ACTION_CONTEXT_MENU:                      PageDestroy();                      return;              }
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,UpdatePinCode,The following statement contains a magic number: GUIImage[] imagePins = new GUIImage[4] { imagePin1' imagePin2' imagePin3' imagePin4 };
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,UpdatePinCode,The following statement contains a magic number: pinLength == 4
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,ClearPinCode,The following statement contains a magic number: GUIImage[] imagePins = new GUIImage[4] { imagePin1' imagePin2' imagePin3' imagePin4 };
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,ClearPinCode,The following statement contains a magic number: i < 4
Magic Number,TraktPlugin.GUI,GUIPopularMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIMovieListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadPopularMovies(CurrentPage);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByPopularMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByPopularMovies.Field)                          {                              TraktSettings.SortByPopularMovies = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadPopularMovies(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideWatched = !TraktSettings.PopularMoviesHideWatched;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideWatchlisted = !TraktSettings.PopularMoviesHideWatchlisted;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideCollected = !TraktSettings.PopularMoviesHideCollected;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideRated = !TraktSettings.PopularMoviesHideRated;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPopularMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIMovieListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadPopularMovies(CurrentPage);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByPopularMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByPopularMovies.Field)                          {                              TraktSettings.SortByPopularMovies = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadPopularMovies(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideWatched = !TraktSettings.PopularMoviesHideWatched;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideWatchlisted = !TraktSettings.PopularMoviesHideWatchlisted;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideCollected = !TraktSettings.PopularMoviesHideCollected;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideRated = !TraktSettings.PopularMoviesHideRated;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPopularMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIMovieListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadPopularMovies(CurrentPage);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByPopularMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByPopularMovies.Field)                          {                              TraktSettings.SortByPopularMovies = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadPopularMovies(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideWatched = !TraktSettings.PopularMoviesHideWatched;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideWatchlisted = !TraktSettings.PopularMoviesHideWatchlisted;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideCollected = !TraktSettings.PopularMoviesHideCollected;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideRated = !TraktSettings.PopularMoviesHideRated;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPopularMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIMovieListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadPopularMovies(CurrentPage);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByPopularMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByPopularMovies.Field)                          {                              TraktSettings.SortByPopularMovies = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadPopularMovies(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideWatched = !TraktSettings.PopularMoviesHideWatched;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideWatchlisted = !TraktSettings.PopularMoviesHideWatchlisted;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideCollected = !TraktSettings.PopularMoviesHideCollected;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideRated = !TraktSettings.PopularMoviesHideRated;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPopularMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIMovieListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadPopularMovies(CurrentPage);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByPopularMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByPopularMovies.Field)                          {                              TraktSettings.SortByPopularMovies = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadPopularMovies(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideWatched = !TraktSettings.PopularMoviesHideWatched;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideWatchlisted = !TraktSettings.PopularMoviesHideWatchlisted;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideCollected = !TraktSettings.PopularMoviesHideCollected;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideRated = !TraktSettings.PopularMoviesHideRated;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPopularMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIMovieListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadPopularMovies(CurrentPage);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByPopularMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByPopularMovies.Field)                          {                              TraktSettings.SortByPopularMovies = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadPopularMovies(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideWatched = !TraktSettings.PopularMoviesHideWatched;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideWatchlisted = !TraktSettings.PopularMoviesHideWatchlisted;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideCollected = !TraktSettings.PopularMoviesHideCollected;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideRated = !TraktSettings.PopularMoviesHideRated;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPopularMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIMovieListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadPopularMovies(CurrentPage);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByPopularMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByPopularMovies.Field)                          {                              TraktSettings.SortByPopularMovies = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadPopularMovies(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideWatched = !TraktSettings.PopularMoviesHideWatched;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideWatchlisted = !TraktSettings.PopularMoviesHideWatchlisted;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideCollected = !TraktSettings.PopularMoviesHideCollected;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularMoviesHideRated = !TraktSettings.PopularMoviesHideRated;                      UpdateButtonState();                      LoadPopularMovies(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPopularShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIShowListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              if (TraktSettings.EnableJumpToForTVShows)                              {                                  CheckAndPlayEpisode(true);                              }                              else                              {                                  if (item.Show == null) return;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                              }                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadPopularShows(CurrentPage);                          }                        }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByPopularShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByPopularShows.Field)                          {                              TraktSettings.SortByPopularShows = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadPopularShows(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideWatched = !TraktSettings.PopularShowsHideWatched;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideWatchlisted = !TraktSettings.PopularShowsHideWatchlisted;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideCollected = !TraktSettings.PopularShowsHideCollected;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideRated = !TraktSettings.PopularShowsHideRated;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPopularShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIShowListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              if (TraktSettings.EnableJumpToForTVShows)                              {                                  CheckAndPlayEpisode(true);                              }                              else                              {                                  if (item.Show == null) return;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                              }                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadPopularShows(CurrentPage);                          }                        }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByPopularShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByPopularShows.Field)                          {                              TraktSettings.SortByPopularShows = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadPopularShows(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideWatched = !TraktSettings.PopularShowsHideWatched;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideWatchlisted = !TraktSettings.PopularShowsHideWatchlisted;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideCollected = !TraktSettings.PopularShowsHideCollected;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideRated = !TraktSettings.PopularShowsHideRated;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPopularShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIShowListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              if (TraktSettings.EnableJumpToForTVShows)                              {                                  CheckAndPlayEpisode(true);                              }                              else                              {                                  if (item.Show == null) return;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                              }                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadPopularShows(CurrentPage);                          }                        }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByPopularShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByPopularShows.Field)                          {                              TraktSettings.SortByPopularShows = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadPopularShows(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideWatched = !TraktSettings.PopularShowsHideWatched;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideWatchlisted = !TraktSettings.PopularShowsHideWatchlisted;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideCollected = !TraktSettings.PopularShowsHideCollected;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideRated = !TraktSettings.PopularShowsHideRated;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPopularShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIShowListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              if (TraktSettings.EnableJumpToForTVShows)                              {                                  CheckAndPlayEpisode(true);                              }                              else                              {                                  if (item.Show == null) return;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                              }                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadPopularShows(CurrentPage);                          }                        }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByPopularShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByPopularShows.Field)                          {                              TraktSettings.SortByPopularShows = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadPopularShows(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideWatched = !TraktSettings.PopularShowsHideWatched;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideWatchlisted = !TraktSettings.PopularShowsHideWatchlisted;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideCollected = !TraktSettings.PopularShowsHideCollected;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideRated = !TraktSettings.PopularShowsHideRated;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPopularShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIShowListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              if (TraktSettings.EnableJumpToForTVShows)                              {                                  CheckAndPlayEpisode(true);                              }                              else                              {                                  if (item.Show == null) return;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                              }                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadPopularShows(CurrentPage);                          }                        }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByPopularShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByPopularShows.Field)                          {                              TraktSettings.SortByPopularShows = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadPopularShows(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideWatched = !TraktSettings.PopularShowsHideWatched;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideWatchlisted = !TraktSettings.PopularShowsHideWatchlisted;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideCollected = !TraktSettings.PopularShowsHideCollected;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideRated = !TraktSettings.PopularShowsHideRated;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPopularShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIShowListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              if (TraktSettings.EnableJumpToForTVShows)                              {                                  CheckAndPlayEpisode(true);                              }                              else                              {                                  if (item.Show == null) return;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                              }                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadPopularShows(CurrentPage);                          }                        }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByPopularShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByPopularShows.Field)                          {                              TraktSettings.SortByPopularShows = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadPopularShows(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideWatched = !TraktSettings.PopularShowsHideWatched;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideWatchlisted = !TraktSettings.PopularShowsHideWatchlisted;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideCollected = !TraktSettings.PopularShowsHideCollected;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideRated = !TraktSettings.PopularShowsHideRated;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIPopularShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIShowListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              if (TraktSettings.EnableJumpToForTVShows)                              {                                  CheckAndPlayEpisode(true);                              }                              else                              {                                  if (item.Show == null) return;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                              }                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadPopularShows(CurrentPage);                          }                        }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByPopularShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByPopularShows.Field)                          {                              TraktSettings.SortByPopularShows = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadPopularShows(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideWatched = !TraktSettings.PopularShowsHideWatched;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideWatchlisted = !TraktSettings.PopularShowsHideWatchlisted;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideCollected = !TraktSettings.PopularShowsHideCollected;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.PopularShowsHideRated = !TraktSettings.PopularShowsHideRated;                      UpdateButtonState();                      LoadPopularShows(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          PreviousUser = CurrentUser;                          CheckAndPlayEpisode(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          PreviousUser = CurrentUser;                          CheckAndPlayEpisode(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,SendRecentlyAddedToFacade,The following statement contains a magic number: episodeCount >= 100
Magic Number,TraktPlugin.GUI,GUIRecentAddedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          PreviousUser = CurrentUser;                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecentAddedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          PreviousUser = CurrentUser;                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecentShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          PreviousUser = CurrentUser;                          PlayCommentItem(true);                      }                      break;                    // Hide Spoilers Button                  case (2):                      TraktSettings.HideSpoilersOnShouts = !TraktSettings.HideSpoilersOnShouts;                      PublishCommentSkinProperties(Facade.SelectedListItem.TVTag as TraktCommentItem);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecentShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          PreviousUser = CurrentUser;                          PlayCommentItem(true);                      }                      break;                    // Hide Spoilers Button                  case (2):                      TraktSettings.HideSpoilersOnShouts = !TraktSettings.HideSpoilersOnShouts;                      PublishCommentSkinProperties(Facade.SelectedListItem.TVTag as TraktCommentItem);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRelatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                                    // Hide Watched Button                  case (3):                      HideWatched = hideWatchedButton.Selected;                      dictRelatedMovies.Remove(relatedMovie.Slug);                      LoadRelatedMovies();                      GUIControl.FocusControl((int)TraktGUIWindows.RelatedMovies' Facade.GetID);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRelatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                                    // Hide Watched Button                  case (3):                      HideWatched = hideWatchedButton.Selected;                      dictRelatedMovies.Remove(relatedMovie.Slug);                      LoadRelatedMovies();                      GUIControl.FocusControl((int)TraktGUIWindows.RelatedMovies' Facade.GetID);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRelatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                                    // Hide Watched Button                  case (3):                      HideWatched = hideWatchedButton.Selected;                      dictRelatedMovies.Remove(relatedMovie.Slug);                      LoadRelatedMovies();                      GUIControl.FocusControl((int)TraktGUIWindows.RelatedMovies' Facade.GetID);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRelatedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,LoadRelatedMovies,The following statement contains a magic number: GUIBackgroundTask.Instance.ExecuteInBackgroundAndCallback(() =>              {                  if (hideWatchedButton != null)                  {                      GUIControl.DisableControl((int)TraktGUIWindows.RelatedMovies' hideWatchedButton.GetID);                  }                    if (HideWatched)                  {                      // wait until watched item has been sent to trakt or timesout (10secs)                      while (SendingWatchedToTrakt)                      {                           Thread.Sleep(500);                      }                  }                  return RelatedMovies;              }'              delegate(bool success' object result)              {                  if (hideWatchedButton != null)                  {                      GUIControl.EnableControl((int)TraktGUIWindows.RelatedMovies' hideWatchedButton.GetID);                  }                    if (success)                  {                      var movies = result as IEnumerable<TraktMovieSummary>;                      SendRelatedMoviesToFacade(movies);                  }              }' Translation.GettingRelatedMovies' true);
Magic Number,TraktPlugin.GUI,GUIRelatedShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          if (TraktSettings.EnableJumpToForTVShows)                          {                              CheckAndPlayEpisode(true);                          }                          else                          {                              GUIListItem selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                                var selectedShow = (TraktShowSummary)selectedItem.TVTag;                              GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON());                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Hide Watched Button                  case (3):                      HideWatched = hideWatchedButton.Selected;                      dictRelatedShows.Remove(relatedShow.Slug);                      LoadRelatedShows();                      GUIControl.FocusControl((int)TraktGUIWindows.RelatedShows' Facade.GetID);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRelatedShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          if (TraktSettings.EnableJumpToForTVShows)                          {                              CheckAndPlayEpisode(true);                          }                          else                          {                              GUIListItem selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                                var selectedShow = (TraktShowSummary)selectedItem.TVTag;                              GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON());                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Hide Watched Button                  case (3):                      HideWatched = hideWatchedButton.Selected;                      dictRelatedShows.Remove(relatedShow.Slug);                      LoadRelatedShows();                      GUIControl.FocusControl((int)TraktGUIWindows.RelatedShows' Facade.GetID);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRelatedShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          if (TraktSettings.EnableJumpToForTVShows)                          {                              CheckAndPlayEpisode(true);                          }                          else                          {                              GUIListItem selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                                var selectedShow = (TraktShowSummary)selectedItem.TVTag;                              GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON());                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Hide Watched Button                  case (3):                      HideWatched = hideWatchedButton.Selected;                      dictRelatedShows.Remove(relatedShow.Slug);                      LoadRelatedShows();                      GUIControl.FocusControl((int)TraktGUIWindows.RelatedShows' Facade.GetID);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUISearch,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          GUIListItem selectedItem = this.Facade.SelectedListItem;                          if (selectedItem == null) return;                            // Load selected search results                          SendSearchResultsToWindow(SearchResults);                      }                      break;                    // Search                  case (2):                      // check if there is any types selected                      SetSearchTypes();                      if (SearchTypes.Count > 0)                      {                          string searchTerm = SearchTerm ?? string.Empty;                          if (GUIUtils.GetStringFromKeyboard(ref searchTerm))                          {                              if (!string.IsNullOrEmpty(searchTerm))                              {                                  GUIUtils.SetProperty("#Trakt.Search.SearchTerm"' searchTerm);                                    SearchTerm = searchTerm;                                  LoadSearchResults();                              }                          }                      }                      else                      {                          GUIUtils.ShowOKDialog(Translation.Search' Translation.NoSearchTypesSelected);                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUISearch,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          GUIListItem selectedItem = this.Facade.SelectedListItem;                          if (selectedItem == null) return;                            // Load selected search results                          SendSearchResultsToWindow(SearchResults);                      }                      break;                    // Search                  case (2):                      // check if there is any types selected                      SetSearchTypes();                      if (SearchTypes.Count > 0)                      {                          string searchTerm = SearchTerm ?? string.Empty;                          if (GUIUtils.GetStringFromKeyboard(ref searchTerm))                          {                              if (!string.IsNullOrEmpty(searchTerm))                              {                                  GUIUtils.SetProperty("#Trakt.Search.SearchTerm"' searchTerm);                                    SearchTerm = searchTerm;                                  LoadSearchResults();                              }                          }                      }                      else                      {                          GUIUtils.ShowOKDialog(Translation.Search' Translation.NoSearchTypesSelected);                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUISearchEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayEpisode(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUISearchEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayEpisode(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUISearchMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUISearchMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUISearchPeople,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchPeople.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var selectedItem = Facade.SelectedListItem;                      if (selectedItem == null) return;                        var person = selectedItem.TVTag as TraktPersonSummary;                      if (person == null) return;                                            GUIWindowManager.ActivateWindow((int)TraktGUIWindows.PersonSummary' person.Ids.Trakt.ToString());                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUISearchPeople,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchPeople.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      var selectedItem = Facade.SelectedListItem;                      if (selectedItem == null) return;                        var person = selectedItem.TVTag as TraktPersonSummary;                      if (person == null) return;                                            GUIWindowManager.ActivateWindow((int)TraktGUIWindows.PersonSummary' person.Ids.Trakt.ToString());                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUISearchShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          if (TraktSettings.EnableJumpToForTVShows)                          {                              CheckAndPlayEpisode(true);                          }                          else                          {                              GUIListItem selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                              var selectedShow = (TraktShowSummary)selectedItem.TVTag;                              GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON());                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUISearchShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          if (TraktSettings.EnableJumpToForTVShows)                          {                              CheckAndPlayEpisode(true);                          }                          else                          {                              GUIListItem selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                              var selectedShow = (TraktShowSummary)selectedItem.TVTag;                              GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON());                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUISearchUsers,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchUsers.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var selectedUser = Facade.SelectedListItem.TVTag as TraktUserSummary;                          if (selectedUser == null) break;                            if (!selectedUser.IsPrivate)                          {                              GUIUserProfile.CurrentUser = selectedUser.Username;                              GUIWindowManager.ActivateWindow((int)TraktGUIWindows.UserProfile);                          }                          else                          {                              if (GUIUtils.ShowYesNoDialog(Translation.Network' string.Format(Translation.SendFollowRequest' selectedUser.Username)' true))                              {                                  GUINetwork.FollowUser(selectedUser);                                  GUINetwork.ClearCache();                              }                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                                        default:                      break;              }
Magic Number,TraktPlugin.GUI,GUISearchUsers,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchUsers.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var selectedUser = Facade.SelectedListItem.TVTag as TraktUserSummary;                          if (selectedUser == null) break;                            if (!selectedUser.IsPrivate)                          {                              GUIUserProfile.CurrentUser = selectedUser.Username;                              GUIWindowManager.ActivateWindow((int)TraktGUIWindows.UserProfile);                          }                          else                          {                              if (GUIUtils.ShowYesNoDialog(Translation.Network' string.Format(Translation.SendFollowRequest' selectedUser.Username)' true))                              {                                  GUINetwork.FollowUser(selectedUser);                                  GUINetwork.ClearCache();                              }                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                                        default:                      break;              }
Magic Number,TraktPlugin.GUI,GUISeasonEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISeasonEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayEpisode();                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUISeasonEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISeasonEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayEpisode();                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUISettingsPlugins,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsPlugins.cs,OnPageDestroy,The following statement contains a magic number: int[] intArray = new int[9] { TVSeries' MovingPictures' MyVideos' MyFilms' OnlineVideos'                                             MyRecordedTV' MyLiveTV' ArgusLiveTV' ArgusRecordings };
Magic Number,TraktPlugin.GUI,GUIShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Hide Spoilers Button                  case (2):                      TraktSettings.HideSpoilersOnShouts = !TraktSettings.HideSpoilersOnShouts;                      PublishCommentSkinProperties(Facade.SelectedListItem.TVTag as TraktComment);                      break;                    // Next Episode                  case (3):                      GetNextEpisodeComments();                      break;                    // Previous Episode                  case (4):                      GetPrevEpisodeComments();                      break;                    // Comments                  case (50):                      // re-act to comment e.g. view replies if any' like a comment etc.                      var selectedComment = Facade.SelectedListItem.TVTag as TraktComment;                      if (selectedComment != null)                      {                          if (selectedComment.Replies > 0)                          {                              // remember position for level                              if (SelectedParentItems.ContainsKey(CurrentLevel))                              {                                  SelectedParentItems[CurrentLevel] = selectedComment.Id;                              }                              else                              {                                  SelectedParentItems.Add(CurrentLevel' selectedComment.Id);                              }                              CurrentLevel++;                              LoadCommentReplies(selectedComment.Id);                          }                          else                          {                              // let user do something else                              OnShowContextMenu();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Hide Spoilers Button                  case (2):                      TraktSettings.HideSpoilersOnShouts = !TraktSettings.HideSpoilersOnShouts;                      PublishCommentSkinProperties(Facade.SelectedListItem.TVTag as TraktComment);                      break;                    // Next Episode                  case (3):                      GetNextEpisodeComments();                      break;                    // Previous Episode                  case (4):                      GetPrevEpisodeComments();                      break;                    // Comments                  case (50):                      // re-act to comment e.g. view replies if any' like a comment etc.                      var selectedComment = Facade.SelectedListItem.TVTag as TraktComment;                      if (selectedComment != null)                      {                          if (selectedComment.Replies > 0)                          {                              // remember position for level                              if (SelectedParentItems.ContainsKey(CurrentLevel))                              {                                  SelectedParentItems[CurrentLevel] = selectedComment.Id;                              }                              else                              {                                  SelectedParentItems.Add(CurrentLevel' selectedComment.Id);                              }                              CurrentLevel++;                              LoadCommentReplies(selectedComment.Id);                          }                          else                          {                              // let user do something else                              OnShowContextMenu();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Hide Spoilers Button                  case (2):                      TraktSettings.HideSpoilersOnShouts = !TraktSettings.HideSpoilersOnShouts;                      PublishCommentSkinProperties(Facade.SelectedListItem.TVTag as TraktComment);                      break;                    // Next Episode                  case (3):                      GetNextEpisodeComments();                      break;                    // Previous Episode                  case (4):                      GetPrevEpisodeComments();                      break;                    // Comments                  case (50):                      // re-act to comment e.g. view replies if any' like a comment etc.                      var selectedComment = Facade.SelectedListItem.TVTag as TraktComment;                      if (selectedComment != null)                      {                          if (selectedComment.Replies > 0)                          {                              // remember position for level                              if (SelectedParentItems.ContainsKey(CurrentLevel))                              {                                  SelectedParentItems[CurrentLevel] = selectedComment.Id;                              }                              else                              {                                  SelectedParentItems.Add(CurrentLevel' selectedComment.Id);                              }                              CurrentLevel++;                              LoadCommentReplies(selectedComment.Id);                          }                          else                          {                              // let user do something else                              OnShowContextMenu();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Hide Spoilers Button                  case (2):                      TraktSettings.HideSpoilersOnShouts = !TraktSettings.HideSpoilersOnShouts;                      PublishCommentSkinProperties(Facade.SelectedListItem.TVTag as TraktComment);                      break;                    // Next Episode                  case (3):                      GetNextEpisodeComments();                      break;                    // Previous Episode                  case (4):                      GetPrevEpisodeComments();                      break;                    // Comments                  case (50):                      // re-act to comment e.g. view replies if any' like a comment etc.                      var selectedComment = Facade.SelectedListItem.TVTag as TraktComment;                      if (selectedComment != null)                      {                          if (selectedComment.Replies > 0)                          {                              // remember position for level                              if (SelectedParentItems.ContainsKey(CurrentLevel))                              {                                  SelectedParentItems[CurrentLevel] = selectedComment.Id;                              }                              else                              {                                  SelectedParentItems.Add(CurrentLevel' selectedComment.Id);                              }                              CurrentLevel++;                              LoadCommentReplies(selectedComment.Id);                          }                          else                          {                              // let user do something else                              OnShowContextMenu();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIShowSeasons,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShowSeasons.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var selectedItem = this.Facade.SelectedListItem;                          if (selectedItem == null) return;                            var selectedSeason = selectedItem.TVTag as TraktSeasonSummary;                          if (selectedSeason == null) return;                            // don't bother loading seasons view if there is no episodes to display                          if (selectedSeason.EpisodeCount > 0)                          {                              // create loading parameter for episode listing                              var loadingParam = new SeasonLoadingParameter                              {                                  Season = selectedSeason'                                  Show = Show                              };                              GUIWindowManager.ActivateWindow((int)TraktGUIWindows.SeasonEpisodes' loadingParam.ToJSON());                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIShowSeasons,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShowSeasons.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var selectedItem = this.Facade.SelectedListItem;                          if (selectedItem == null) return;                            var selectedSeason = selectedItem.TVTag as TraktSeasonSummary;                          if (selectedSeason == null) return;                            // don't bother loading seasons view if there is no episodes to display                          if (selectedSeason.EpisodeCount > 0)                          {                              // create loading parameter for episode listing                              var loadingParam = new SeasonLoadingParameter                              {                                  Season = selectedSeason'                                  Show = Show                              };                              GUIWindowManager.ActivateWindow((int)TraktGUIWindows.SeasonEpisodes' loadingParam.ToJSON());                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          PreviousUser = CurrentUser;                          CheckAndPlayEpisode(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          PreviousUser = CurrentUser;                          CheckAndPlayEpisode(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecentWatchedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          PreviousUser = CurrentUser;                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecentWatchedMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          PreviousUser = CurrentUser;                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIUserProfile,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUserProfile.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          // Launch Corresponding Activity window                          switch (SelectedActivity)                          {                              case (ActivityType.RecentWatchedMovies):                                  GUIRecentWatchedMovies.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedMovies);                                  break;                                case (ActivityType.RecentWatchedEpisodes):                                  GUIRecentWatchedEpisodes.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedEpisodes);                                  break;                                case (ActivityType.RecentAddedEpisodes):                                  GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                  //TODOGUIRecentAddedEpisodes.CurrentUser = CurrentUser;                                  //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);                                  break;                                case (ActivityType.RecentAddedMovies):                                  GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                  //TODOGUIRecentAddedMovies.CurrentUser = CurrentUser;                                  //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);                                  break;                                case (ActivityType.RecentComments):                                  GUIRecentShouts.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentShouts);                                  break;                                case (ActivityType.MovieWatchList):                                  GUIWatchListMovies.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListMovies);                                  break;                                case (ActivityType.ShowWatchList):                                  GUIWatchListShows.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListShows);                                  break;                                case (ActivityType.EpisodeWatchList):                                  GUIWatchListEpisodes.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListEpisodes);                                  break;                                case (ActivityType.Lists):                                  GUILists.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CustomLists);                                  break;                          }                      }                      break;                    case (4):                      GUIControl.FocusControl(GetID' Facade.GetID);                      if (Users.Keys.Contains(CurrentUser)) Users.Remove(CurrentUser);                      LoadUserProfile();                      break;              }
Magic Number,TraktPlugin.GUI,GUIUserProfile,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUserProfile.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          // Launch Corresponding Activity window                          switch (SelectedActivity)                          {                              case (ActivityType.RecentWatchedMovies):                                  GUIRecentWatchedMovies.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedMovies);                                  break;                                case (ActivityType.RecentWatchedEpisodes):                                  GUIRecentWatchedEpisodes.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedEpisodes);                                  break;                                case (ActivityType.RecentAddedEpisodes):                                  GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                  //TODOGUIRecentAddedEpisodes.CurrentUser = CurrentUser;                                  //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);                                  break;                                case (ActivityType.RecentAddedMovies):                                  GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                  //TODOGUIRecentAddedMovies.CurrentUser = CurrentUser;                                  //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);                                  break;                                case (ActivityType.RecentComments):                                  GUIRecentShouts.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentShouts);                                  break;                                case (ActivityType.MovieWatchList):                                  GUIWatchListMovies.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListMovies);                                  break;                                case (ActivityType.ShowWatchList):                                  GUIWatchListShows.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListShows);                                  break;                                case (ActivityType.EpisodeWatchList):                                  GUIWatchListEpisodes.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListEpisodes);                                  break;                                case (ActivityType.Lists):                                  GUILists.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CustomLists);                                  break;                          }                      }                      break;                    case (4):                      GUIControl.FocusControl(GetID' Facade.GetID);                      if (Users.Keys.Contains(CurrentUser)) Users.Remove(CurrentUser);                      LoadUserProfile();                      break;              }
Magic Number,TraktPlugin.GUI,GUIUserProfile,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUserProfile.cs,LoadActivityTypes,The following statement contains a magic number: GUIUtils.SetProperty("#Trakt.Items"' string.Format("{0} {1}"' Facade.Count.ToString()' GUILocalizeStrings.Get(507)));
Magic Number,TraktPlugin.GUI,GUIWatchListEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayEpisode();                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIWatchListEpisodes,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayEpisode();                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Genre Button                  case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //ShowGenreMenu();                      //break;                                    // Hide Collected Toggle Button                  case (4):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideCollected = hideCollectedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Hide Watchlisted Toggle Button                  case (5):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideWatchlisted = hideWatchlistedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Start Year Button                  case (6):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string startYear = StartYear.ToString();                      //if (startYear == "0") startYear = "1888";                      //if (GUIUtils.GetStringFromKeyboard(ref startYear))                      //{                      //    int result;                      //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))                      //    {                      //        StartYear = result;                      //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // End Year Button                  case (7):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string endYear = EndYear.ToString();                      //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();                      //if (GUIUtils.GetStringFromKeyboard(ref endYear))                      //{                      //    int result;                      //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))                      //    {                      //        EndYear = result;                      //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByRecommendedMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByRecommendedMovies.Field)                          {                              TraktSettings.SortByRecommendedMovies = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadRecommendedMovies();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Genre Button                  case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //ShowGenreMenu();                      //break;                                    // Hide Collected Toggle Button                  case (4):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideCollected = hideCollectedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Hide Watchlisted Toggle Button                  case (5):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideWatchlisted = hideWatchlistedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Start Year Button                  case (6):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string startYear = StartYear.ToString();                      //if (startYear == "0") startYear = "1888";                      //if (GUIUtils.GetStringFromKeyboard(ref startYear))                      //{                      //    int result;                      //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))                      //    {                      //        StartYear = result;                      //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // End Year Button                  case (7):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string endYear = EndYear.ToString();                      //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();                      //if (GUIUtils.GetStringFromKeyboard(ref endYear))                      //{                      //    int result;                      //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))                      //    {                      //        EndYear = result;                      //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByRecommendedMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByRecommendedMovies.Field)                          {                              TraktSettings.SortByRecommendedMovies = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadRecommendedMovies();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Genre Button                  case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //ShowGenreMenu();                      //break;                                    // Hide Collected Toggle Button                  case (4):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideCollected = hideCollectedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Hide Watchlisted Toggle Button                  case (5):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideWatchlisted = hideWatchlistedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Start Year Button                  case (6):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string startYear = StartYear.ToString();                      //if (startYear == "0") startYear = "1888";                      //if (GUIUtils.GetStringFromKeyboard(ref startYear))                      //{                      //    int result;                      //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))                      //    {                      //        StartYear = result;                      //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // End Year Button                  case (7):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string endYear = EndYear.ToString();                      //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();                      //if (GUIUtils.GetStringFromKeyboard(ref endYear))                      //{                      //    int result;                      //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))                      //    {                      //        EndYear = result;                      //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByRecommendedMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByRecommendedMovies.Field)                          {                              TraktSettings.SortByRecommendedMovies = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadRecommendedMovies();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Genre Button                  case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //ShowGenreMenu();                      //break;                                    // Hide Collected Toggle Button                  case (4):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideCollected = hideCollectedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Hide Watchlisted Toggle Button                  case (5):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideWatchlisted = hideWatchlistedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Start Year Button                  case (6):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string startYear = StartYear.ToString();                      //if (startYear == "0") startYear = "1888";                      //if (GUIUtils.GetStringFromKeyboard(ref startYear))                      //{                      //    int result;                      //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))                      //    {                      //        StartYear = result;                      //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // End Year Button                  case (7):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string endYear = EndYear.ToString();                      //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();                      //if (GUIUtils.GetStringFromKeyboard(ref endYear))                      //{                      //    int result;                      //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))                      //    {                      //        EndYear = result;                      //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByRecommendedMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByRecommendedMovies.Field)                          {                              TraktSettings.SortByRecommendedMovies = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadRecommendedMovies();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Genre Button                  case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //ShowGenreMenu();                      //break;                                    // Hide Collected Toggle Button                  case (4):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideCollected = hideCollectedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Hide Watchlisted Toggle Button                  case (5):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideWatchlisted = hideWatchlistedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Start Year Button                  case (6):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string startYear = StartYear.ToString();                      //if (startYear == "0") startYear = "1888";                      //if (GUIUtils.GetStringFromKeyboard(ref startYear))                      //{                      //    int result;                      //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))                      //    {                      //        StartYear = result;                      //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // End Year Button                  case (7):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string endYear = EndYear.ToString();                      //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();                      //if (GUIUtils.GetStringFromKeyboard(ref endYear))                      //{                      //    int result;                      //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))                      //    {                      //        EndYear = result;                      //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByRecommendedMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByRecommendedMovies.Field)                          {                              TraktSettings.SortByRecommendedMovies = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadRecommendedMovies();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Genre Button                  case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //ShowGenreMenu();                      //break;                                    // Hide Collected Toggle Button                  case (4):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideCollected = hideCollectedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Hide Watchlisted Toggle Button                  case (5):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideWatchlisted = hideWatchlistedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Start Year Button                  case (6):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string startYear = StartYear.ToString();                      //if (startYear == "0") startYear = "1888";                      //if (GUIUtils.GetStringFromKeyboard(ref startYear))                      //{                      //    int result;                      //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))                      //    {                      //        StartYear = result;                      //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // End Year Button                  case (7):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string endYear = EndYear.ToString();                      //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();                      //if (GUIUtils.GetStringFromKeyboard(ref endYear))                      //{                      //    int result;                      //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))                      //    {                      //        EndYear = result;                      //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByRecommendedMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByRecommendedMovies.Field)                          {                              TraktSettings.SortByRecommendedMovies = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadRecommendedMovies();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Genre Button                  case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //ShowGenreMenu();                      //break;                                    // Hide Collected Toggle Button                  case (4):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideCollected = hideCollectedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Hide Watchlisted Toggle Button                  case (5):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideWatchlisted = hideWatchlistedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Start Year Button                  case (6):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string startYear = StartYear.ToString();                      //if (startYear == "0") startYear = "1888";                      //if (GUIUtils.GetStringFromKeyboard(ref startYear))                      //{                      //    int result;                      //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))                      //    {                      //        StartYear = result;                      //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // End Year Button                  case (7):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string endYear = EndYear.ToString();                      //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();                      //if (GUIUtils.GetStringFromKeyboard(ref endYear))                      //{                      //    int result;                      //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))                      //    {                      //        EndYear = result;                      //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByRecommendedMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByRecommendedMovies.Field)                          {                              TraktSettings.SortByRecommendedMovies = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadRecommendedMovies();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Genre Button                  case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //ShowGenreMenu();                      //break;                                    // Hide Collected Toggle Button                  case (4):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideCollected = hideCollectedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Hide Watchlisted Toggle Button                  case (5):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideWatchlisted = hideWatchlistedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Start Year Button                  case (6):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string startYear = StartYear.ToString();                      //if (startYear == "0") startYear = "1888";                      //if (GUIUtils.GetStringFromKeyboard(ref startYear))                      //{                      //    int result;                      //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))                      //    {                      //        StartYear = result;                      //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // End Year Button                  case (7):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string endYear = EndYear.ToString();                      //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();                      //if (GUIUtils.GetStringFromKeyboard(ref endYear))                      //{                      //    int result;                      //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))                      //    {                      //        EndYear = result;                      //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByRecommendedMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByRecommendedMovies.Field)                          {                              TraktSettings.SortByRecommendedMovies = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadRecommendedMovies();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,GetStartYearTitle,The following statement contains a magic number: return string.Format(Translation.StartYear' 1888);
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,GetEndYearTitle,The following statement contains a magic number: return string.Format(Translation.EndYear' DateTime.Now.AddYears(3).Year);
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,SetRecommendationProperties,The following statement contains a magic number: GUIUtils.SetProperty("#Trakt.Recommendations.EndYear"' EndYear == 0 ? DateTime.Now.AddYears(3).Year.ToString() : EndYear.ToString());
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          if (TraktSettings.EnableJumpToForTVShows)                          {                              CheckAndPlayEpisode(true);                          }                          else                          {                              GUIListItem selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                                var selectedShow = selectedItem.TVTag as TraktShowSummary;                              if (selectedShow == null) return;                                GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON());                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Genre Button                  case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //ShowGenreMenu();                      //break;                    // Hide Collected Toggle Button                  case (4):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideCollected = hideCollectedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Hide Watchlisted Toggle Button                  case (5):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideWatchlisted = hideWatchlistedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Start Year Button                  case (6):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string startYear = StartYear.ToString();                      //if (startYear == "0") startYear = "1919";                      //if (GUIUtils.GetStringFromKeyboard(ref startYear))                      //{                      //    int result;                      //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))                      //    {                      //        StartYear = result;                      //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // End Year Button                  case (7):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string endYear = EndYear.ToString();                      //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();                      //if (GUIUtils.GetStringFromKeyboard(ref endYear))                      //{                      //    int result;                      //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))                      //    {                      //        EndYear = result;                      //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByRecommendedShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByRecommendedShows.Field)                          {                              TraktSettings.SortByRecommendedShows = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadRecommendedShows();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          if (TraktSettings.EnableJumpToForTVShows)                          {                              CheckAndPlayEpisode(true);                          }                          else                          {                              GUIListItem selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                                var selectedShow = selectedItem.TVTag as TraktShowSummary;                              if (selectedShow == null) return;                                GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON());                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Genre Button                  case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //ShowGenreMenu();                      //break;                    // Hide Collected Toggle Button                  case (4):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideCollected = hideCollectedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Hide Watchlisted Toggle Button                  case (5):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideWatchlisted = hideWatchlistedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Start Year Button                  case (6):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string startYear = StartYear.ToString();                      //if (startYear == "0") startYear = "1919";                      //if (GUIUtils.GetStringFromKeyboard(ref startYear))                      //{                      //    int result;                      //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))                      //    {                      //        StartYear = result;                      //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // End Year Button                  case (7):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string endYear = EndYear.ToString();                      //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();                      //if (GUIUtils.GetStringFromKeyboard(ref endYear))                      //{                      //    int result;                      //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))                      //    {                      //        EndYear = result;                      //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByRecommendedShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByRecommendedShows.Field)                          {                              TraktSettings.SortByRecommendedShows = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadRecommendedShows();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          if (TraktSettings.EnableJumpToForTVShows)                          {                              CheckAndPlayEpisode(true);                          }                          else                          {                              GUIListItem selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                                var selectedShow = selectedItem.TVTag as TraktShowSummary;                              if (selectedShow == null) return;                                GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON());                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Genre Button                  case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //ShowGenreMenu();                      //break;                    // Hide Collected Toggle Button                  case (4):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideCollected = hideCollectedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Hide Watchlisted Toggle Button                  case (5):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideWatchlisted = hideWatchlistedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Start Year Button                  case (6):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string startYear = StartYear.ToString();                      //if (startYear == "0") startYear = "1919";                      //if (GUIUtils.GetStringFromKeyboard(ref startYear))                      //{                      //    int result;                      //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))                      //    {                      //        StartYear = result;                      //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // End Year Button                  case (7):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string endYear = EndYear.ToString();                      //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();                      //if (GUIUtils.GetStringFromKeyboard(ref endYear))                      //{                      //    int result;                      //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))                      //    {                      //        EndYear = result;                      //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByRecommendedShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByRecommendedShows.Field)                          {                              TraktSettings.SortByRecommendedShows = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadRecommendedShows();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          if (TraktSettings.EnableJumpToForTVShows)                          {                              CheckAndPlayEpisode(true);                          }                          else                          {                              GUIListItem selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                                var selectedShow = selectedItem.TVTag as TraktShowSummary;                              if (selectedShow == null) return;                                GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON());                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Genre Button                  case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //ShowGenreMenu();                      //break;                    // Hide Collected Toggle Button                  case (4):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideCollected = hideCollectedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Hide Watchlisted Toggle Button                  case (5):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideWatchlisted = hideWatchlistedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Start Year Button                  case (6):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string startYear = StartYear.ToString();                      //if (startYear == "0") startYear = "1919";                      //if (GUIUtils.GetStringFromKeyboard(ref startYear))                      //{                      //    int result;                      //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))                      //    {                      //        StartYear = result;                      //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // End Year Button                  case (7):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string endYear = EndYear.ToString();                      //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();                      //if (GUIUtils.GetStringFromKeyboard(ref endYear))                      //{                      //    int result;                      //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))                      //    {                      //        EndYear = result;                      //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByRecommendedShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByRecommendedShows.Field)                          {                              TraktSettings.SortByRecommendedShows = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadRecommendedShows();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          if (TraktSettings.EnableJumpToForTVShows)                          {                              CheckAndPlayEpisode(true);                          }                          else                          {                              GUIListItem selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                                var selectedShow = selectedItem.TVTag as TraktShowSummary;                              if (selectedShow == null) return;                                GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON());                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Genre Button                  case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //ShowGenreMenu();                      //break;                    // Hide Collected Toggle Button                  case (4):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideCollected = hideCollectedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Hide Watchlisted Toggle Button                  case (5):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideWatchlisted = hideWatchlistedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Start Year Button                  case (6):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string startYear = StartYear.ToString();                      //if (startYear == "0") startYear = "1919";                      //if (GUIUtils.GetStringFromKeyboard(ref startYear))                      //{                      //    int result;                      //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))                      //    {                      //        StartYear = result;                      //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // End Year Button                  case (7):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string endYear = EndYear.ToString();                      //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();                      //if (GUIUtils.GetStringFromKeyboard(ref endYear))                      //{                      //    int result;                      //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))                      //    {                      //        EndYear = result;                      //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByRecommendedShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByRecommendedShows.Field)                          {                              TraktSettings.SortByRecommendedShows = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadRecommendedShows();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          if (TraktSettings.EnableJumpToForTVShows)                          {                              CheckAndPlayEpisode(true);                          }                          else                          {                              GUIListItem selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                                var selectedShow = selectedItem.TVTag as TraktShowSummary;                              if (selectedShow == null) return;                                GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON());                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Genre Button                  case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //ShowGenreMenu();                      //break;                    // Hide Collected Toggle Button                  case (4):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideCollected = hideCollectedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Hide Watchlisted Toggle Button                  case (5):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideWatchlisted = hideWatchlistedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Start Year Button                  case (6):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string startYear = StartYear.ToString();                      //if (startYear == "0") startYear = "1919";                      //if (GUIUtils.GetStringFromKeyboard(ref startYear))                      //{                      //    int result;                      //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))                      //    {                      //        StartYear = result;                      //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // End Year Button                  case (7):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string endYear = EndYear.ToString();                      //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();                      //if (GUIUtils.GetStringFromKeyboard(ref endYear))                      //{                      //    int result;                      //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))                      //    {                      //        EndYear = result;                      //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByRecommendedShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByRecommendedShows.Field)                          {                              TraktSettings.SortByRecommendedShows = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadRecommendedShows();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          if (TraktSettings.EnableJumpToForTVShows)                          {                              CheckAndPlayEpisode(true);                          }                          else                          {                              GUIListItem selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                                var selectedShow = selectedItem.TVTag as TraktShowSummary;                              if (selectedShow == null) return;                                GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON());                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Genre Button                  case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //ShowGenreMenu();                      //break;                    // Hide Collected Toggle Button                  case (4):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideCollected = hideCollectedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Hide Watchlisted Toggle Button                  case (5):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideWatchlisted = hideWatchlistedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Start Year Button                  case (6):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string startYear = StartYear.ToString();                      //if (startYear == "0") startYear = "1919";                      //if (GUIUtils.GetStringFromKeyboard(ref startYear))                      //{                      //    int result;                      //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))                      //    {                      //        StartYear = result;                      //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // End Year Button                  case (7):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string endYear = EndYear.ToString();                      //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();                      //if (GUIUtils.GetStringFromKeyboard(ref endYear))                      //{                      //    int result;                      //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))                      //    {                      //        EndYear = result;                      //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByRecommendedShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByRecommendedShows.Field)                          {                              TraktSettings.SortByRecommendedShows = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadRecommendedShows();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          if (TraktSettings.EnableJumpToForTVShows)                          {                              CheckAndPlayEpisode(true);                          }                          else                          {                              GUIListItem selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                                var selectedShow = selectedItem.TVTag as TraktShowSummary;                              if (selectedShow == null) return;                                GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON());                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Genre Button                  case (3):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //ShowGenreMenu();                      //break;                    // Hide Collected Toggle Button                  case (4):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideCollected = hideCollectedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Hide Watchlisted Toggle Button                  case (5):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //HideWatchlisted = hideWatchlistedButton.Selected;                      //ReloadRecommendations();                      //break;                    // Start Year Button                  case (6):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string startYear = StartYear.ToString();                      //if (startYear == "0") startYear = "1919";                      //if (GUIUtils.GetStringFromKeyboard(ref startYear))                      //{                      //    int result;                      //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))                      //    {                      //        StartYear = result;                      //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // End Year Button                  case (7):                      GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                      break;                      //TODO                      //string endYear = EndYear.ToString();                      //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();                      //if (GUIUtils.GetStringFromKeyboard(ref endYear))                      //{                      //    int result;                      //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))                      //    {                      //        EndYear = result;                      //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));                      //        ReloadRecommendations();                      //    }                      //}                      //break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByRecommendedShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByRecommendedShows.Field)                          {                              TraktSettings.SortByRecommendedShows = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadRecommendedShows();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,GetStartYearTitle,The following statement contains a magic number: return string.Format(Translation.StartYear' 1919);
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,GetEndYearTitle,The following statement contains a magic number: return string.Format(Translation.EndYear' DateTime.Now.AddYears(3).Year);
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,SetRecommendationProperties,The following statement contains a magic number: GUIUtils.SetProperty("#Trakt.Recommendations.EndYear"' EndYear == 0 ? DateTime.Now.AddYears(3).Year.ToString() : EndYear.ToString());
Magic Number,TraktPlugin.GUI,GUITrendingShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIShowListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              if (TraktSettings.EnableJumpToForTVShows)                              {                                  CheckAndPlayEpisode(true);                              }                              else                              {                                  if (item.Show == null) return;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                              }                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadTrendingShows(CurrentPage);                          }                                                }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByTrendingShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByTrendingShows.Field)                          {                              TraktSettings.SortByTrendingShows = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadTrendingShows(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideWatched = !TraktSettings.TrendingShowsHideWatched;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideWatchlisted = !TraktSettings.TrendingShowsHideWatchlisted;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideCollected = !TraktSettings.TrendingShowsHideCollected;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideRated = !TraktSettings.TrendingShowsHideRated;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUITrendingShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIShowListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              if (TraktSettings.EnableJumpToForTVShows)                              {                                  CheckAndPlayEpisode(true);                              }                              else                              {                                  if (item.Show == null) return;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                              }                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadTrendingShows(CurrentPage);                          }                                                }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByTrendingShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByTrendingShows.Field)                          {                              TraktSettings.SortByTrendingShows = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadTrendingShows(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideWatched = !TraktSettings.TrendingShowsHideWatched;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideWatchlisted = !TraktSettings.TrendingShowsHideWatchlisted;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideCollected = !TraktSettings.TrendingShowsHideCollected;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideRated = !TraktSettings.TrendingShowsHideRated;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUITrendingShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIShowListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              if (TraktSettings.EnableJumpToForTVShows)                              {                                  CheckAndPlayEpisode(true);                              }                              else                              {                                  if (item.Show == null) return;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                              }                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadTrendingShows(CurrentPage);                          }                                                }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByTrendingShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByTrendingShows.Field)                          {                              TraktSettings.SortByTrendingShows = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadTrendingShows(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideWatched = !TraktSettings.TrendingShowsHideWatched;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideWatchlisted = !TraktSettings.TrendingShowsHideWatchlisted;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideCollected = !TraktSettings.TrendingShowsHideCollected;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideRated = !TraktSettings.TrendingShowsHideRated;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUITrendingShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIShowListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              if (TraktSettings.EnableJumpToForTVShows)                              {                                  CheckAndPlayEpisode(true);                              }                              else                              {                                  if (item.Show == null) return;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                              }                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadTrendingShows(CurrentPage);                          }                                                }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByTrendingShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByTrendingShows.Field)                          {                              TraktSettings.SortByTrendingShows = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadTrendingShows(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideWatched = !TraktSettings.TrendingShowsHideWatched;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideWatchlisted = !TraktSettings.TrendingShowsHideWatchlisted;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideCollected = !TraktSettings.TrendingShowsHideCollected;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideRated = !TraktSettings.TrendingShowsHideRated;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUITrendingShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIShowListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              if (TraktSettings.EnableJumpToForTVShows)                              {                                  CheckAndPlayEpisode(true);                              }                              else                              {                                  if (item.Show == null) return;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                              }                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadTrendingShows(CurrentPage);                          }                                                }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByTrendingShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByTrendingShows.Field)                          {                              TraktSettings.SortByTrendingShows = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadTrendingShows(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideWatched = !TraktSettings.TrendingShowsHideWatched;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideWatchlisted = !TraktSettings.TrendingShowsHideWatchlisted;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideCollected = !TraktSettings.TrendingShowsHideCollected;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideRated = !TraktSettings.TrendingShowsHideRated;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUITrendingShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIShowListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              if (TraktSettings.EnableJumpToForTVShows)                              {                                  CheckAndPlayEpisode(true);                              }                              else                              {                                  if (item.Show == null) return;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                              }                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadTrendingShows(CurrentPage);                          }                                                }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByTrendingShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByTrendingShows.Field)                          {                              TraktSettings.SortByTrendingShows = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadTrendingShows(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideWatched = !TraktSettings.TrendingShowsHideWatched;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideWatchlisted = !TraktSettings.TrendingShowsHideWatchlisted;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideCollected = !TraktSettings.TrendingShowsHideCollected;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideRated = !TraktSettings.TrendingShowsHideRated;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUITrendingShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIShowListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              if (TraktSettings.EnableJumpToForTVShows)                              {                                  CheckAndPlayEpisode(true);                              }                              else                              {                                  if (item.Show == null) return;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON());                              }                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadTrendingShows(CurrentPage);                          }                                                }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByTrendingShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByTrendingShows.Field)                          {                              TraktSettings.SortByTrendingShows = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadTrendingShows(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideWatched = !TraktSettings.TrendingShowsHideWatched;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideWatchlisted = !TraktSettings.TrendingShowsHideWatchlisted;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideCollected = !TraktSettings.TrendingShowsHideCollected;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingShowsHideRated = !TraktSettings.TrendingShowsHideRated;                      UpdateButtonState();                      LoadTrendingShows(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,Reset,The following statement contains a magic number: SetLine(2' "");
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,Reset,The following statement contains a magic number: SetLine(3' "");
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,Reset,The following statement contains a magic number: SetLine(4' "");
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnAction,The following statement contains a magic number: switch (action.wID)              {                  case Action.ActionType.REMOTE_1:                      Rated = TraktRateValue.one;                      UpdateRating();                      break;                    case Action.ActionType.REMOTE_2:                      Rated = TraktRateValue.two;                      UpdateRating();                      break;                                    case Action.ActionType.REMOTE_3:                      Rated = TraktRateValue.three;                      UpdateRating();                      break;                    case Action.ActionType.REMOTE_4:                      Rated = TraktRateValue.four;                      UpdateRating();                      break;                    case Action.ActionType.REMOTE_5:                      Rated = TraktRateValue.five;                      UpdateRating();                      break;                    case Action.ActionType.REMOTE_6:                      Rated = TraktRateValue.six;                      UpdateRating();                      break;                    case Action.ActionType.REMOTE_7:                      Rated = TraktRateValue.seven;                      UpdateRating();                      break;                    case Action.ActionType.REMOTE_8:                      Rated = TraktRateValue.eight;                      UpdateRating();                      break;                    case Action.ActionType.REMOTE_9:                      Rated = TraktRateValue.nine;                      UpdateRating();                      break;                    case Action.ActionType.REMOTE_0:                      Rated = TraktRateValue.ten;                      UpdateRating();                      break;                    case Action.ActionType.ACTION_KEY_PRESSED:                      // some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands                      if (action.m_key != null)                      {                          int key = action.m_key.KeyChar;                          if (key >= '0' && key <= '9')                          {                              if (key == 0) key = 10;                              Rated = (TraktRateValue)key;                              UpdateRating();                          }                      }                      break;                    case Action.ActionType.ACTION_SELECT_ITEM:                      IsSubmitted = true;                      PageDestroy();                      return;                    case Action.ActionType.ACTION_PREVIOUS_MENU:                  case Action.ActionType.ACTION_CLOSE_DIALOG:                  case Action.ActionType.ACTION_CONTEXT_MENU:                      IsSubmitted = false;                      PageDestroy();                      return;              }
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnMessage,The following statement contains a magic number: switch (message.Message)              {                  case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:                      // store old rating so default control in skin does override                      TraktRateValue rating = Rated;                        base.OnMessage(message);                        // read just rating and default control focus                      int defaultControlId = 1000 + (int)rating;                      GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_SETFOCUS' GetID' 0' defaultControlId' 0' 0' null);                      OnMessage(msg);                        IsSubmitted = false;                      UpdateRating();                      return true;                    case GUIMessage.MessageType.GUI_MSG_SETFOCUS:                      if (btnUnRate != null && message.TargetControlId == btnUnRate.GetID)                      {                          Rated = TraktRateValue.unrate;                          UpdateRating();                          break;                      }                        if (message.TargetControlId < 1001 || message.TargetControlId > 1010)                          break;                                            Rated = (TraktRateValue)(message.TargetControlId - 1000);                      UpdateRating();                      break;              }
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnMessage,The following statement contains a magic number: switch (message.Message)              {                  case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:                      // store old rating so default control in skin does override                      TraktRateValue rating = Rated;                        base.OnMessage(message);                        // read just rating and default control focus                      int defaultControlId = 1000 + (int)rating;                      GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_SETFOCUS' GetID' 0' defaultControlId' 0' 0' null);                      OnMessage(msg);                        IsSubmitted = false;                      UpdateRating();                      return true;                    case GUIMessage.MessageType.GUI_MSG_SETFOCUS:                      if (btnUnRate != null && message.TargetControlId == btnUnRate.GetID)                      {                          Rated = TraktRateValue.unrate;                          UpdateRating();                          break;                      }                        if (message.TargetControlId < 1001 || message.TargetControlId > 1010)                          break;                                            Rated = (TraktRateValue)(message.TargetControlId - 1000);                      UpdateRating();                      break;              }
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnMessage,The following statement contains a magic number: switch (message.Message)              {                  case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:                      // store old rating so default control in skin does override                      TraktRateValue rating = Rated;                        base.OnMessage(message);                        // read just rating and default control focus                      int defaultControlId = 1000 + (int)rating;                      GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_SETFOCUS' GetID' 0' defaultControlId' 0' 0' null);                      OnMessage(msg);                        IsSubmitted = false;                      UpdateRating();                      return true;                    case GUIMessage.MessageType.GUI_MSG_SETFOCUS:                      if (btnUnRate != null && message.TargetControlId == btnUnRate.GetID)                      {                          Rated = TraktRateValue.unrate;                          UpdateRating();                          break;                      }                        if (message.TargetControlId < 1001 || message.TargetControlId > 1010)                          break;                                            Rated = (TraktRateValue)(message.TargetControlId - 1000);                      UpdateRating();                      break;              }
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnMessage,The following statement contains a magic number: switch (message.Message)              {                  case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:                      // store old rating so default control in skin does override                      TraktRateValue rating = Rated;                        base.OnMessage(message);                        // read just rating and default control focus                      int defaultControlId = 1000 + (int)rating;                      GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_SETFOCUS' GetID' 0' defaultControlId' 0' 0' null);                      OnMessage(msg);                        IsSubmitted = false;                      UpdateRating();                      return true;                    case GUIMessage.MessageType.GUI_MSG_SETFOCUS:                      if (btnUnRate != null && message.TargetControlId == btnUnRate.GetID)                      {                          Rated = TraktRateValue.unrate;                          UpdateRating();                          break;                      }                        if (message.TargetControlId < 1001 || message.TargetControlId > 1010)                          break;                                            Rated = (TraktRateValue)(message.TargetControlId - 1000);                      UpdateRating();                      break;              }
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,UpdateRating,The following statement contains a magic number: GUICheckMarkControl[] btnHearts = new GUICheckMarkControl[10]              {                   btnOneHeart' btnTwoHeart' btnThreeHeart' btnFourHeart' btnFiveHeart'  				btnSixHeart' btnSevenHeart' btnEightHeart' btnNineHeart' btnTenHeart              };
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,UpdateRating,The following statement contains a magic number: i < 10
Magic Number,TraktPlugin.GUI,GUITrendingMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIMovieListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadTrendingMovies(CurrentPage);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByTrendingMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByTrendingMovies.Field)                          {                              TraktSettings.SortByTrendingMovies = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadTrendingMovies(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideWatched = !TraktSettings.TrendingMoviesHideWatched;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideWatchlisted = !TraktSettings.TrendingMoviesHideWatchlisted;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideCollected = !TraktSettings.TrendingMoviesHideCollected;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideRated = !TraktSettings.TrendingMoviesHideRated;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUITrendingMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIMovieListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadTrendingMovies(CurrentPage);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByTrendingMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByTrendingMovies.Field)                          {                              TraktSettings.SortByTrendingMovies = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadTrendingMovies(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideWatched = !TraktSettings.TrendingMoviesHideWatched;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideWatchlisted = !TraktSettings.TrendingMoviesHideWatchlisted;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideCollected = !TraktSettings.TrendingMoviesHideCollected;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideRated = !TraktSettings.TrendingMoviesHideRated;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUITrendingMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIMovieListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadTrendingMovies(CurrentPage);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByTrendingMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByTrendingMovies.Field)                          {                              TraktSettings.SortByTrendingMovies = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadTrendingMovies(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideWatched = !TraktSettings.TrendingMoviesHideWatched;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideWatchlisted = !TraktSettings.TrendingMoviesHideWatchlisted;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideCollected = !TraktSettings.TrendingMoviesHideCollected;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideRated = !TraktSettings.TrendingMoviesHideRated;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUITrendingMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIMovieListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadTrendingMovies(CurrentPage);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByTrendingMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByTrendingMovies.Field)                          {                              TraktSettings.SortByTrendingMovies = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadTrendingMovies(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideWatched = !TraktSettings.TrendingMoviesHideWatched;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideWatchlisted = !TraktSettings.TrendingMoviesHideWatchlisted;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideCollected = !TraktSettings.TrendingMoviesHideCollected;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideRated = !TraktSettings.TrendingMoviesHideRated;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUITrendingMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIMovieListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadTrendingMovies(CurrentPage);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByTrendingMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByTrendingMovies.Field)                          {                              TraktSettings.SortByTrendingMovies = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadTrendingMovies(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideWatched = !TraktSettings.TrendingMoviesHideWatched;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideWatchlisted = !TraktSettings.TrendingMoviesHideWatchlisted;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideCollected = !TraktSettings.TrendingMoviesHideCollected;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideRated = !TraktSettings.TrendingMoviesHideRated;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUITrendingMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIMovieListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadTrendingMovies(CurrentPage);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByTrendingMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByTrendingMovies.Field)                          {                              TraktSettings.SortByTrendingMovies = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadTrendingMovies(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideWatched = !TraktSettings.TrendingMoviesHideWatched;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideWatchlisted = !TraktSettings.TrendingMoviesHideWatchlisted;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideCollected = !TraktSettings.TrendingMoviesHideCollected;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideRated = !TraktSettings.TrendingMoviesHideRated;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUITrendingMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIMovieListItem;                          if (item == null) return;                            if (!item.IsFolder)                          {                              CheckAndPlayMovie(true);                          }                          else                          {                              if (item.IsPrevPageItem)                                  CurrentPage--;                              else                                  CurrentPage++;                                if (CurrentPage == 1)                                  PreviousSelectedIndex = 0;                              else                                  PreviousSelectedIndex = 1;                                // load next / previous page                              LoadTrendingMovies(CurrentPage);                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByTrendingMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByTrendingMovies.Field)                          {                              TraktSettings.SortByTrendingMovies = newSortBy;                              PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                              UpdateButtonState();                              LoadTrendingMovies(CurrentPage);                          }                      }                      break;                    // Hide Watched                  case (9):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideWatched = !TraktSettings.TrendingMoviesHideWatched;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Watchlisted                  case (10):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideWatchlisted = !TraktSettings.TrendingMoviesHideWatchlisted;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Collected                  case (11):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideCollected = !TraktSettings.TrendingMoviesHideCollected;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    // Hide Rated                  case (12):                      PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;                      TraktSettings.TrendingMoviesHideRated = !TraktSettings.TrendingMoviesHideRated;                      UpdateButtonState();                      LoadTrendingMovies(CurrentPage);                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIListItem;                            // Is a group header                          if (item != null && item.IsFolder)                          {                              if (item.TVTag.ToString() == "next")                              {                                  CurrentPage++;                                  if (CurrentPage == 0) CurrentPage = 1;                              }                              else                              {                                  CurrentPage--;                                  if (CurrentPage == 0) CurrentPage = -1;                              }                                // load next 7 days in calendar                              LoadCalendar();                          }                            // Is an episode                          if (item != null && !item.IsFolder)                          {                              CheckAndPlayEpisode();                          }                      }                      break;                    // View Button                  case (2):                      ShowViewMenu();                      break;                    // Start Date Button                  case (3):                      ShowStartDateMenu();                      break;                    // Hide Watchlisted                  case (4):                      TraktSettings.CalendarHideTVShowsInWatchList = !TraktSettings.CalendarHideTVShowsInWatchList;                      LoadCalendar();                      break;                    // Max Days                  case (5):                      ShowMaxDaysMenu();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIListItem;                            // Is a group header                          if (item != null && item.IsFolder)                          {                              if (item.TVTag.ToString() == "next")                              {                                  CurrentPage++;                                  if (CurrentPage == 0) CurrentPage = 1;                              }                              else                              {                                  CurrentPage--;                                  if (CurrentPage == 0) CurrentPage = -1;                              }                                // load next 7 days in calendar                              LoadCalendar();                          }                            // Is an episode                          if (item != null && !item.IsFolder)                          {                              CheckAndPlayEpisode();                          }                      }                      break;                    // View Button                  case (2):                      ShowViewMenu();                      break;                    // Start Date Button                  case (3):                      ShowStartDateMenu();                      break;                    // Hide Watchlisted                  case (4):                      TraktSettings.CalendarHideTVShowsInWatchList = !TraktSettings.CalendarHideTVShowsInWatchList;                      LoadCalendar();                      break;                    // Max Days                  case (5):                      ShowMaxDaysMenu();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIListItem;                            // Is a group header                          if (item != null && item.IsFolder)                          {                              if (item.TVTag.ToString() == "next")                              {                                  CurrentPage++;                                  if (CurrentPage == 0) CurrentPage = 1;                              }                              else                              {                                  CurrentPage--;                                  if (CurrentPage == 0) CurrentPage = -1;                              }                                // load next 7 days in calendar                              LoadCalendar();                          }                            // Is an episode                          if (item != null && !item.IsFolder)                          {                              CheckAndPlayEpisode();                          }                      }                      break;                    // View Button                  case (2):                      ShowViewMenu();                      break;                    // Start Date Button                  case (3):                      ShowStartDateMenu();                      break;                    // Hide Watchlisted                  case (4):                      TraktSettings.CalendarHideTVShowsInWatchList = !TraktSettings.CalendarHideTVShowsInWatchList;                      LoadCalendar();                      break;                    // Max Days                  case (5):                      ShowMaxDaysMenu();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIListItem;                            // Is a group header                          if (item != null && item.IsFolder)                          {                              if (item.TVTag.ToString() == "next")                              {                                  CurrentPage++;                                  if (CurrentPage == 0) CurrentPage = 1;                              }                              else                              {                                  CurrentPage--;                                  if (CurrentPage == 0) CurrentPage = -1;                              }                                // load next 7 days in calendar                              LoadCalendar();                          }                            // Is an episode                          if (item != null && !item.IsFolder)                          {                              CheckAndPlayEpisode();                          }                      }                      break;                    // View Button                  case (2):                      ShowViewMenu();                      break;                    // Start Date Button                  case (3):                      ShowStartDateMenu();                      break;                    // Hide Watchlisted                  case (4):                      TraktSettings.CalendarHideTVShowsInWatchList = !TraktSettings.CalendarHideTVShowsInWatchList;                      LoadCalendar();                      break;                    // Max Days                  case (5):                      ShowMaxDaysMenu();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          var item = Facade.SelectedListItem as GUIListItem;                            // Is a group header                          if (item != null && item.IsFolder)                          {                              if (item.TVTag.ToString() == "next")                              {                                  CurrentPage++;                                  if (CurrentPage == 0) CurrentPage = 1;                              }                              else                              {                                  CurrentPage--;                                  if (CurrentPage == 0) CurrentPage = -1;                              }                                // load next 7 days in calendar                              LoadCalendar();                          }                            // Is an episode                          if (item != null && !item.IsFolder)                          {                              CheckAndPlayEpisode();                          }                      }                      break;                    // View Button                  case (2):                      ShowViewMenu();                      break;                    // Start Date Button                  case (3):                      ShowStartDateMenu();                      break;                    // Hide Watchlisted                  case (4):                      TraktSettings.CalendarHideTVShowsInWatchList = !TraktSettings.CalendarHideTVShowsInWatchList;                      LoadCalendar();                      break;                    // Max Days                  case (5):                      ShowMaxDaysMenu();                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,ShowMaxDaysMenu,The following statement contains a magic number: day < 31
Magic Number,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,GetDaysForward,The following statement contains a magic number: return 31;
Magic Number,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,GetDaysForward,The following statement contains a magic number: TraktSettings.TvCalendarMaxDays >= 30
Magic Number,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,GetDaysForward,The following statement contains a magic number: return TraktSettings.TvCalendarMaxDays + 2;
Magic Number,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,GetStartDate,The following statement contains a magic number: switch (CurrentStartDate)              {                  case StartDates.Today:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(1' 0' 0' 0));                      break;                  case StartDates.Yesterday:                      startDate =  DateTime.UtcNow.Subtract(new TimeSpan(2' 0' 0' 0));                      break;                  case StartDates.OneWeekAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(8' 0' 0' 0));                      break;                  case StartDates.TwoWeeksAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(15' 0' 0' 0));                      break;                  case StartDates.OneMonthAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(31' 0' 0' 0));                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,GetStartDate,The following statement contains a magic number: switch (CurrentStartDate)              {                  case StartDates.Today:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(1' 0' 0' 0));                      break;                  case StartDates.Yesterday:                      startDate =  DateTime.UtcNow.Subtract(new TimeSpan(2' 0' 0' 0));                      break;                  case StartDates.OneWeekAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(8' 0' 0' 0));                      break;                  case StartDates.TwoWeeksAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(15' 0' 0' 0));                      break;                  case StartDates.OneMonthAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(31' 0' 0' 0));                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,GetStartDate,The following statement contains a magic number: switch (CurrentStartDate)              {                  case StartDates.Today:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(1' 0' 0' 0));                      break;                  case StartDates.Yesterday:                      startDate =  DateTime.UtcNow.Subtract(new TimeSpan(2' 0' 0' 0));                      break;                  case StartDates.OneWeekAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(8' 0' 0' 0));                      break;                  case StartDates.TwoWeeksAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(15' 0' 0' 0));                      break;                  case StartDates.OneMonthAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(31' 0' 0' 0));                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,GetStartDate,The following statement contains a magic number: switch (CurrentStartDate)              {                  case StartDates.Today:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(1' 0' 0' 0));                      break;                  case StartDates.Yesterday:                      startDate =  DateTime.UtcNow.Subtract(new TimeSpan(2' 0' 0' 0));                      break;                  case StartDates.OneWeekAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(8' 0' 0' 0));                      break;                  case StartDates.TwoWeeksAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(15' 0' 0' 0));                      break;                  case StartDates.OneMonthAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(31' 0' 0' 0));                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,GetCurrentLocalStartDate,The following statement contains a magic number: switch (CurrentStartDate)              {                  case StartDates.Today:                      startDate = DateTime.Today;                      break;                  case StartDates.Yesterday:                      startDate = DateTime.Today.Subtract(new TimeSpan(1' 0' 0' 0));                      break;                  case StartDates.OneWeekAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(7' 0' 0' 0));                      break;                  case StartDates.TwoWeeksAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(14' 0' 0' 0));                      break;                  case StartDates.OneMonthAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(30' 0' 0' 0));                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,GetCurrentLocalStartDate,The following statement contains a magic number: switch (CurrentStartDate)              {                  case StartDates.Today:                      startDate = DateTime.Today;                      break;                  case StartDates.Yesterday:                      startDate = DateTime.Today.Subtract(new TimeSpan(1' 0' 0' 0));                      break;                  case StartDates.OneWeekAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(7' 0' 0' 0));                      break;                  case StartDates.TwoWeeksAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(14' 0' 0' 0));                      break;                  case StartDates.OneMonthAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(30' 0' 0' 0));                      break;              }
Magic Number,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,GetCurrentLocalStartDate,The following statement contains a magic number: switch (CurrentStartDate)              {                  case StartDates.Today:                      startDate = DateTime.Today;                      break;                  case StartDates.Yesterday:                      startDate = DateTime.Today.Subtract(new TimeSpan(1' 0' 0' 0));                      break;                  case StartDates.OneWeekAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(7' 0' 0' 0));                      break;                  case StartDates.TwoWeeksAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(14' 0' 0' 0));                      break;                  case StartDates.OneMonthAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(30' 0' 0' 0));                      break;              }
Magic Number,TraktPlugin.GUI,GUIWatchListMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByWatchListMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByWatchListMovies.Field)                          {                              TraktSettings.SortByWatchListMovies = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadWatchListMovies();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIWatchListMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByWatchListMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByWatchListMovies.Field)                          {                              TraktSettings.SortByWatchListMovies = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadWatchListMovies();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIWatchListMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          CheckAndPlayMovie(true);                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByWatchListMovies);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByWatchListMovies.Field)                          {                              TraktSettings.SortByWatchListMovies = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadWatchListMovies();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIWatchListShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          if (TraktSettings.EnableJumpToForTVShows)                          {                              CheckAndPlayEpisode(true);                          }                          else                          {                              var selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                                var selectedWatchlistItem = selectedItem.TVTag as TraktShowWatchList;                              if (selectedWatchlistItem == null) return;                                GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' selectedWatchlistItem.Show.ToJSON());                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByWatchListShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByWatchListShows.Field)                          {                              TraktSettings.SortByWatchListShows = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadWatchListShows();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIWatchListShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          if (TraktSettings.EnableJumpToForTVShows)                          {                              CheckAndPlayEpisode(true);                          }                          else                          {                              var selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                                var selectedWatchlistItem = selectedItem.TVTag as TraktShowWatchList;                              if (selectedWatchlistItem == null) return;                                GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' selectedWatchlistItem.Show.ToJSON());                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByWatchListShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByWatchListShows.Field)                          {                              TraktSettings.SortByWatchListShows = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadWatchListShows();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,GUIWatchListShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListShows.cs,OnClicked,The following statement contains a magic number: switch (controlId)              {                  // Facade                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          if (TraktSettings.EnableJumpToForTVShows)                          {                              CheckAndPlayEpisode(true);                          }                          else                          {                              var selectedItem = this.Facade.SelectedListItem;                              if (selectedItem == null) return;                                var selectedWatchlistItem = selectedItem.TVTag as TraktShowWatchList;                              if (selectedWatchlistItem == null) return;                                GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' selectedWatchlistItem.Show.ToJSON());                          }                      }                      break;                    // Layout Button                  case (2):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;                    // Sort Button                  case (8):                      var newSortBy = GUICommon.ShowSortMenu(TraktSettings.SortByWatchListShows);                      if (newSortBy != null)                      {                          if (newSortBy.Field != TraktSettings.SortByWatchListShows.Field)                          {                              TraktSettings.SortByWatchListShows = newSortBy;                              PreviousSelectedIndex = 0;                              UpdateButtonState();                              LoadWatchListShows();                          }                      }                      break;                    default:                      break;              }
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetDashboardSkinSettings,The following statement contains a magic number: DashboardActivityFacadeMaxItems = 25;
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetDashboardSkinSettings,The following statement contains a magic number: MaxTrendingItems = 10;
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetDashboardSkinSettings,The following statement contains a magic number: var trendingItem = new DashboardTrendingSettings                      {                          TVShowWindows = new List<string>()'                          MovieWindows = new List<string>()'                          PropertiesMaxItems = 0'                          FacadeMaxItems = 10'                          FacadeType = "None"                      };
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: PosterMainOverlayPosX = 222;
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: posx = 222;
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: posx == 178
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: EpisodeThumbMainOverlayPosX = 278;
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: PosterRatingOverlayPosX = 222;
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: posx = 222;
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: posx == 178
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: EpisodeThumbRatingOverlayPosX = 278;
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: AvatarRatingOverlayPosX = 18;
Magic Number,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: dlgYesNo.SetLine(2' linesArray[1]);
Magic Number,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: dlgYesNo.SetLine(3' linesArray[2]);
Magic Number,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: dlgYesNo.SetLine(3' linesArray[2]);
Magic Number,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: linesArray.Length > 2
Magic Number,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: dlgYesNo.SetLine(4' linesArray[3]);
Magic Number,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: dlgYesNo.SetLine(4' linesArray[3]);
Magic Number,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: linesArray.Length > 3
Magic Number,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: btn.GetID == 11 && !string.IsNullOrEmpty(yesLabel)
Magic Number,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowOKDialog,The following statement contains a magic number: i <= 4
Magic Number,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowNotifyDialog,The following statement contains a magic number: btn.GetID == 4 && !string.IsNullOrEmpty(buttonText) && !string.IsNullOrEmpty(btn.Label)
Magic Number,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowMultiSelectionDialog,The following statement contains a magic number: GUIWindow dlgMultiSelectOld = (GUIWindow)GUIWindowManager.GetWindow(2100);
Magic Number,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowMultiSelectionDialog,The following statement contains a magic number: GUIWindowManager.Replace(2100' dlgMultiSelect);
Magic Number,TraktPlugin.GUI,GUIUtils,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowRateDialog,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,TraktPlugin.Extensions,MathExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\MathExtensions.cs,ToPercentage,The following statement contains a magic number: return Convert.ToInt16(value * 10);
Magic Number,TraktPlugin.Extensions,SecurityExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\SecurityExtensions.cs,Encrypt,The following statement contains a magic number: byte[] keyBytes = password.GetBytes(keysize / 8);
Magic Number,TraktPlugin.Extensions,SecurityExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\SecurityExtensions.cs,Decrypt,The following statement contains a magic number: byte[] keyBytes = password.GetBytes(keysize / 8);
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,ToSlug,The following statement contains a magic number: s = s.Substring(0' s.Length <= 45 ? s.Length : 45).Trim();
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,ToSlug,The following statement contains a magic number: s = s.Substring(0' s.Length <= 45 ? s.Length : 45).Trim();
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace(((char)8211).ToString()' "--");
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace(((char)8212).ToString()' "---");
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace((char)8216' '\'');
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace((char)8217' '\'');
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace((char)8220' '"');
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace((char)8221' '"');
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace((char)8223' '"');
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace((char)8226' '*');
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace(((char)8230).ToString()' "...");
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace(((char)8482).ToString()' string.Empty);
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace(((char)10139).ToString()' "->");
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace(((char)10084).ToString()' string.Empty);
Magic Number,TraktPlugin.TmdbAPI,TmdbAPI,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TmdbAPI\TmdbAPI.cs,GetFromTmdb,The following statement contains a magic number: Thread.Sleep(1000 + delayRequest);
Magic Number,TraktPlugin.TmdbAPI,TmdbAPI,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TmdbAPI\TmdbAPI.cs,GetFromTmdb,The following statement contains a magic number: request.Timeout = 120000;
Magic Number,TraktPlugin.TraktHandlers,ArgusTVRecordings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusRecordings.cs,StopScrobble,The following statement contains a magic number: progress = Math.Round((g_Player.CurrentPosition / g_Player.Duration) * 100.0' 2);
Magic Number,TraktPlugin.TraktHandlers,ArgusTVRecordings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusRecordings.cs,StopScrobble,The following statement contains a magic number: progress = Math.Round((g_Player.CurrentPosition / g_Player.Duration) * 100.0' 2);
Magic Number,TraktPlugin.TraktHandlers,ArgusTVRecordings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusRecordings.cs,StopScrobble,The following statement contains a magic number: TraktLogger.Info("Video recording has stopped' checking progress. Title = '{0}'' Current Position = '{1}'' Duration = '{2}'' Progress = '{3}%'"'                                 CurrentRecording.Title' g_Player.CurrentPosition.ToString()' g_Player.Duration.ToString()' progress > 100.0 ? "100" : progress.ToString());
Magic Number,TraktPlugin.TraktHandlers,ArgusTVRecordings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusRecordings.cs,StopScrobble,The following statement contains a magic number: progress == 0.0 || progress >= 80.0
Magic Number,TraktPlugin.TraktHandlers,ArgusTVLive,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusTVLive.cs,Scrobble,The following statement contains a magic number: TraktTimer = new Timer(new TimerCallback((stateInfo) =>              {                  Thread.CurrentThread.Name = "Scrobble";                    // get the current program airing on tv now                  // this may have changed since last status update on trakt                  VideoInfo videoInfo = GetCurrentProgram();                    if (videoInfo != null)                  {                      // if we are watching something different'                       // check if we should mark previous as watched                      if (!videoInfo.Equals(CurrentProgram))                      {                          TraktLogger.Info("Detected new tv program has started. Previous Program =  '{0}'' New Program = '{1}'"' CurrentProgram.ToString()' videoInfo.ToString());                          if (IsProgramWatched(CurrentProgram) && CurrentProgram.IsScrobbling)                          {                              TraktLogger.Info("Playback of program on Live TV is considered watched. Title = '{0}'"' CurrentProgram.ToString());                              BasicHandler.StopScrobble(CurrentProgram' true);                          }                          CurrentProgram.IsScrobbling = true;                      }                        // continue watching new program                      // dont try to scrobble if previous attempt failed                      if (CurrentProgram.IsScrobbling)                      {                          if (videoInfo.Type == VideoType.Series)                          {                              videoInfo.IsScrobbling = BasicHandler.StartScrobbleEpisode(videoInfo);                          }                          else                          {                              videoInfo.IsScrobbling = BasicHandler.StartScrobbleMovie(videoInfo);                          }                            // set current program to new program                          CurrentProgram = videoInfo;                      }                  }              })' null' 1000' 300000);
Magic Number,TraktPlugin.TraktHandlers,ArgusTVLive,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusTVLive.cs,Scrobble,The following statement contains a magic number: TraktTimer = new Timer(new TimerCallback((stateInfo) =>              {                  Thread.CurrentThread.Name = "Scrobble";                    // get the current program airing on tv now                  // this may have changed since last status update on trakt                  VideoInfo videoInfo = GetCurrentProgram();                    if (videoInfo != null)                  {                      // if we are watching something different'                       // check if we should mark previous as watched                      if (!videoInfo.Equals(CurrentProgram))                      {                          TraktLogger.Info("Detected new tv program has started. Previous Program =  '{0}'' New Program = '{1}'"' CurrentProgram.ToString()' videoInfo.ToString());                          if (IsProgramWatched(CurrentProgram) && CurrentProgram.IsScrobbling)                          {                              TraktLogger.Info("Playback of program on Live TV is considered watched. Title = '{0}'"' CurrentProgram.ToString());                              BasicHandler.StopScrobble(CurrentProgram' true);                          }                          CurrentProgram.IsScrobbling = true;                      }                        // continue watching new program                      // dont try to scrobble if previous attempt failed                      if (CurrentProgram.IsScrobbling)                      {                          if (videoInfo.Type == VideoType.Series)                          {                              videoInfo.IsScrobbling = BasicHandler.StartScrobbleEpisode(videoInfo);                          }                          else                          {                              videoInfo.IsScrobbling = BasicHandler.StartScrobbleMovie(videoInfo);                          }                            // set current program to new program                          CurrentProgram = videoInfo;                      }                  }              })' null' 1000' 300000);
Magic Number,TraktPlugin.TraktHandlers,ArgusTVLive,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusTVLive.cs,IsProgramWatched,The following statement contains a magic number: return percentPlayed >= 0.8;
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,CreateScrobbleData,The following statement contains a magic number: progress = (g_Player.CurrentPosition / duration) * 100.0;
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,CreateScrobbleData,The following statement contains a magic number: var scrobbleData = new TraktScrobbleMovie              {                  Movie = new TraktMovie                  {                      Ids = new TraktMovieId { Imdb = movie.IMDBNumber.ToNullIfEmpty()' Tmdb = movie.TMDBNumber.ToNullableInt32() }'                      Title = movie.Title'                      Year = movie.Year                  }'                  Progress = Math.Round(progress' 2)'                  AppVersion = TraktSettings.Version'                  AppDate = TraktSettings.BuildDate              };
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnWatchedMovie,The following statement contains a magic number: var stopScrobble = new Thread(objScrobble =>                  {                      var tScrobbleData = objScrobble as TraktScrobbleMovie;                      if (tScrobbleData == null) return;                        // check progress is enough to mark as watched online                      if (tScrobbleData.Progress < 80)                          tScrobbleData.Progress = 100;                        var response = TraktAPI.TraktAPI.StopMovieScrobble(tScrobbleData);                      TraktLogger.LogTraktResponse(response);                        if (response != null && response.Movie != null && response.Action == "scrobble")                      {                          // add to cache                          TraktCache.AddMovieToWatchHistory(response.Movie);                      }                  })                  {                      IsBackground = true'                      Name = "Scrobble"                  };
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnWatchedMovie,The following statement contains a magic number: var stopScrobble = new Thread(objScrobble =>                  {                      var tScrobbleData = objScrobble as TraktScrobbleMovie;                      if (tScrobbleData == null) return;                        // check progress is enough to mark as watched online                      if (tScrobbleData.Progress < 80)                          tScrobbleData.Progress = 100;                        var response = TraktAPI.TraktAPI.StopMovieScrobble(tScrobbleData);                      TraktLogger.LogTraktResponse(response);                        if (response != null && response.Movie != null && response.Action == "scrobble")                      {                          // add to cache                          TraktCache.AddMovieToWatchHistory(response.Movie);                      }                  })                  {                      IsBackground = true'                      Name = "Scrobble"                  };
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnImportComplete,The following statement contains a magic number: var syncThread = new Thread(() =>              {                  while (SyncInProgress)                  {                      // only do one sync at a time                      TraktLogger.Debug("My Films sync still in progress' waiting to complete. Trying again in 60 secs");                      Thread.Sleep(60000);                  }                    TraktCache.ClearLastActivityCache(true);                    SyncLibrary();              })              {                  IsBackground = true'                  Name = "Sync"              };
Magic Number,TraktPlugin.TraktHandlers,MyTVLive,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVLive.cs,Scrobble,The following statement contains a magic number: TraktTimer = new Timer(new TimerCallback((stateInfo) =>              {                  Thread.CurrentThread.Name = "Scrobble";                    // get the current program airing on tv now                  // this may have changed since last status update on trakt                  VideoInfo videoInfo = GetCurrentProgram();                    if (videoInfo != null)                  {                      // if we are watching something different'                       // check if we should mark previous as watched                      if (!videoInfo.Equals(CurrentProgram))                      {                          TraktLogger.Info("Detected new tv program has started. Previous Program = '{0}'' New Program = '{1}'"' CurrentProgram.ToString()' videoInfo.ToString());                          if (IsProgramWatched(CurrentProgram) && CurrentProgram.IsScrobbling)                          {                              TraktLogger.Info("Playback of program on Live TV is considered watched. Title = '{0}'"' CurrentProgram.ToString());                              BasicHandler.StopScrobble(CurrentProgram' true);                          }                          CurrentProgram.IsScrobbling = true;                      }                        // continue watching new program                      // dont try to scrobble if previous attempt failed                      if (CurrentProgram.IsScrobbling)                      {                          if (videoInfo.Type == VideoType.Series)                          {                              videoInfo.IsScrobbling = BasicHandler.StartScrobbleEpisode(videoInfo);                          }                          else                          {                              videoInfo.IsScrobbling = BasicHandler.StartScrobbleMovie(videoInfo);                          }                            // set current program to new program                          CurrentProgram = videoInfo;                      }                  }              })' null' 1000' 300000);
Magic Number,TraktPlugin.TraktHandlers,MyTVLive,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVLive.cs,Scrobble,The following statement contains a magic number: TraktTimer = new Timer(new TimerCallback((stateInfo) =>              {                  Thread.CurrentThread.Name = "Scrobble";                    // get the current program airing on tv now                  // this may have changed since last status update on trakt                  VideoInfo videoInfo = GetCurrentProgram();                    if (videoInfo != null)                  {                      // if we are watching something different'                       // check if we should mark previous as watched                      if (!videoInfo.Equals(CurrentProgram))                      {                          TraktLogger.Info("Detected new tv program has started. Previous Program = '{0}'' New Program = '{1}'"' CurrentProgram.ToString()' videoInfo.ToString());                          if (IsProgramWatched(CurrentProgram) && CurrentProgram.IsScrobbling)                          {                              TraktLogger.Info("Playback of program on Live TV is considered watched. Title = '{0}'"' CurrentProgram.ToString());                              BasicHandler.StopScrobble(CurrentProgram' true);                          }                          CurrentProgram.IsScrobbling = true;                      }                        // continue watching new program                      // dont try to scrobble if previous attempt failed                      if (CurrentProgram.IsScrobbling)                      {                          if (videoInfo.Type == VideoType.Series)                          {                              videoInfo.IsScrobbling = BasicHandler.StartScrobbleEpisode(videoInfo);                          }                          else                          {                              videoInfo.IsScrobbling = BasicHandler.StartScrobbleMovie(videoInfo);                          }                            // set current program to new program                          CurrentProgram = videoInfo;                      }                  }              })' null' 1000' 300000);
Magic Number,TraktPlugin.TraktHandlers,MyTVLive,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVLive.cs,IsProgramWatched,The following statement contains a magic number: return percentPlayed >= 0.8;
Magic Number,TraktPlugin.TraktHandlers,MyTVRecordings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVRecordings.cs,StopScrobble,The following statement contains a magic number: progress = Math.Round((g_Player.CurrentPosition / g_Player.Duration) * 100.0' 2);
Magic Number,TraktPlugin.TraktHandlers,MyTVRecordings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVRecordings.cs,StopScrobble,The following statement contains a magic number: progress = Math.Round((g_Player.CurrentPosition / g_Player.Duration) * 100.0' 2);
Magic Number,TraktPlugin.TraktHandlers,MyTVRecordings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVRecordings.cs,StopScrobble,The following statement contains a magic number: TraktLogger.Info("Video recording has stopped' checking progress. Title = '{0}'' Current Position = '{1}'' Duration = '{2}'' Progress = '{3}%'"'                                 CurrentRecording.Title' g_Player.CurrentPosition.ToString()' g_Player.Duration.ToString()' progress > 100.0 ? "100" : progress.ToString());
Magic Number,TraktPlugin.TraktHandlers,MyTVRecordings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVRecordings.cs,StopScrobble,The following statement contains a magic number: progress == 0.0 || progress >= 80.0
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: TraktLogger.Info("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round(progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: TraktLogger.Info("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round(progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: var scrobbleEpisodeData = CreateEpisodeScrobbleData(CurrentVideo' Math.Round(progress * 100' 2));
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: var scrobbleEpisodeData = CreateEpisodeScrobbleData(CurrentVideo' Math.Round(progress * 100' 2));
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: progress < 0.8
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: var scrobbleEpisodeData = CreateEpisodeScrobbleData(info' Math.Round(percentPlayed * 100' 2));
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: var scrobbleEpisodeData = CreateEpisodeScrobbleData(info' Math.Round(percentPlayed * 100' 2));
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: percentPlayed < 0.8
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: TraktLogger.Info("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round(percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString()' info.ID_IMDB.ToLogString()' info.ID_TMDB.ToLogString()' info.ID_TVDB.ToLogString());
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: TraktLogger.Info("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round(percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString()' info.ID_IMDB.ToLogString()' info.ID_TMDB.ToLogString()' info.ID_TVDB.ToLogString());
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: var scrobbleEpisodeData = CreateEpisodeScrobbleData(info' Math.Round(percentPlayed * 100' 2));
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: var scrobbleEpisodeData = CreateEpisodeScrobbleData(info' Math.Round(percentPlayed * 100' 2));
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetPlayerProgress,The following statement contains a magic number: double duration = videoInfo.Runtime > 0.0 ? videoInfo.Runtime : g_Player.Duration / 60;
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetPlayerProgress,The following statement contains a magic number: double position = g_Player.CurrentPosition / 60;
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetPlayerProgress,The following statement contains a magic number: progress = (position / duration) * 100.0;
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetPlayerProgress,The following statement contains a magic number: progress = 100;
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetPlayerProgress,The following statement contains a magic number: progress > 100
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetPlayerProgress,The following statement contains a magic number: return Math.Round(progress' 2);
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,StopScrobbleMovie,The following statement contains a magic number: scrobbleData.Progress = 100;
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,StopScrobbleMovie,The following statement contains a magic number: watched && scrobbleData.Progress < 80
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,StopScrobbleEpisode,The following statement contains a magic number: scrobbleData.Progress = 100;
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,StopScrobbleEpisode,The following statement contains a magic number: watched && scrobbleData.Progress < 80
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,IsValidImdb,The following statement contains a magic number: id.Length < 9
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetProperImdbId,The following statement contains a magic number: imdbid = string.Format("tt{0}"' id.Substring(2).PadLeft(7' '0'));
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetProperImdbId,The following statement contains a magic number: imdbid = string.Format("tt{0}"' id.Substring(2).PadLeft(7' '0'));
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetProperImdbId,The following statement contains a magic number: id.Length != 9
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The following statement contains a magic number: syncRatedMovies = (from movie in ratedMovies                                         where !traktRatedMovies.ToList().Exists(c => MovieMatch(movie' c.Movie))                                         select new TraktSyncMovieRated                                         {                                              Ids = new TraktMovieId { Imdb = movie.ImdbID.ToNullIfEmpty()' Tmdb = GetTmdbID(movie).ToNullableInt32() }'                                              Title = movie.Title'                                              Year = movie.Year'                                              Rating = AdvancedRatings ? GetAdvancedUserRating(movie) : (int)movie.UserSettings.First().UserRating * 2'                                              RatedAt = null'                                         }).ToList();
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The following statement contains a magic number: int rating = (int)(Math.Round(trm.Rating / 2.0' MidpointRounding.AwayFromZero));
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,StopScrobble,The following statement contains a magic number: Double watchPercent = MovingPicturesCore.Settings.MinimumWatchPercentage / 100.0;
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,The following statement contains a magic number: var resumeData = Convert.ToInt32((movie.LocalMedia.First().Duration / 1000.0) * (item.Progress / 100.0)) - TraktSettings.SyncResumeDelta;
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,The following statement contains a magic number: var resumeData = Convert.ToInt32((movie.LocalMedia.First().Duration / 1000.0) * (item.Progress / 100.0)) - TraktSettings.SyncResumeDelta;
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,StopMovieScrobble,The following statement contains a magic number: var scrobbleThread = new Thread(movieObj =>              {                  var scrobbleMovie = movieObj as DBMovieInfo;                  if (scrobbleMovie == null) return;                    var scrobbleData = CreateScrobbleData(scrobbleMovie);                  if (forceWatched)                  {                      // override the percentage so it's marked as watched                      scrobbleData.Progress = 100;                  }                    TraktScrobbleResponse response = null;                    // only mark as watched if progress is greater than user setting                  if (scrobbleData.Progress >= MovingPicturesCore.Settings.MinimumWatchPercentage)                  {                      TraktLogger.Info("Sending 'stop' scrobble of movie to trakt.tv. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' scrobbleData.Progress' scrobbleMovie.Title' movie.Year' scrobbleMovie.ImdbID ?? "<empty>"' GetTmdbID(scrobbleMovie) ?? "<empty>");                      response = TraktAPI.TraktAPI.StopMovieScrobble(scrobbleData);                        if (response != null && response.Movie != null && response.Action == "scrobble")                      {                          // update local cache                          TraktCache.AddMovieToWatchHistory(scrobbleData.Movie);                      }                  }                  else                  {                      TraktLogger.Info("Sending 'pause' scrobble of movie to trakt.tv. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' scrobbleData.Progress' scrobbleMovie.Title' movie.Year' scrobbleMovie.ImdbID ?? "<empty>"' GetTmdbID(scrobbleMovie) ?? "<empty>");                      response = TraktAPI.TraktAPI.PauseMovieScrobble(scrobbleData);                        if (response != null && response.Movie != null && response.Action == "pause")                      {                          // add to cache                          TraktCache.AddMovieToPausedData(response.Movie' response.Progress);                      }                  }                                    TraktLogger.LogTraktResponse(response);              })              {                  Name = "Scrobble"'                  IsBackground = true              };
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectUpdatedEx,The following statement contains a magic number: var syncThread = new Thread((objMovie) =>                  {                      var tMovie = objMovie as DBMovieInfo;                        var traktMovie = new TraktSyncMovieRated                      {                          Ids = new TraktMovieId { Imdb = tMovie.ImdbID' Tmdb = GetTmdbID(tMovie).ToNullableInt32() }'                          Title = tMovie.Title'                          Year = tMovie.Year'                          RatedAt = DateTime.UtcNow.ToISO8601()'                          Rating = (int)userMovieSettings.UserRating * 2                      };                        var response = TraktAPI.TraktAPI.AddMovieToRatings(traktMovie);                      TraktLogger.LogTraktResponse(response);                  })                  {                      IsBackground = true'                      Name = "Sync"                  };
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: duration = movie.ActualRuntime / 1000.0;
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: duration = movie.Runtime * 60.0;
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: isDVD && duration > (4 * 60 * 60)
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: isDVD && duration > (4 * 60 * 60)
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: isDVD && duration > (4 * 60 * 60)
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: duration = 120 * 60;
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: duration = 120 * 60;
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: isDVD && duration < 900.0
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,CreateScrobbleData,The following statement contains a magic number: double progress = duration != 0.0 ? (currentPosition / duration * 100.0) : 0.0;
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,CreateScrobbleData,The following statement contains a magic number: var scrobbleData = new TraktScrobbleMovie              {                  Movie = new TraktMovie                  {                      Ids = new TraktMovieId { Imdb = movie.ImdbID.ToNullIfEmpty()' Tmdb = GetTmdbID(movie).ToNullableInt32() }'                      Title = movie.Title'                      Year = movie.Year                  }'                  Progress = Math.Round(progress' 2)'                  AppVersion = TraktSettings.Version'                  AppDate = TraktSettings.BuildDate              };
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The following statement contains a magic number: var rateThread = new Thread((objMovie) =>              {                  TraktLogger.Info("Showing rate dialog for movie. Title = '{0}'' Year = '{1}'' IMDB ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID(movie) ?? "<empty>");                    // added a delay due to bug in MovingPictures blocking OnPageLoad()                  // a call to GUIWindowManager.Process() causes MediaPortal to wait until any modal dialog is closed.                  // the value may need to be tweaked on some systems                  // visible symtoms of issue is wrong backdrop / progress in background whilst dialog is modal                  Thread.Sleep(TraktSettings.MovPicsRatingDlgDelay);                    var movieToRate = objMovie as DBMovieInfo;                  if (movieToRate == null) return;                    var rateObject = new TraktSyncMovieRated                  {                      Ids = new TraktMovieId { Imdb = movieToRate.ImdbID.ToNullIfEmpty()' Tmdb = GetTmdbID(movieToRate).ToNullableInt32() }'                      Title = movieToRate.Title'                      Year = movieToRate.Year'                      RatedAt = DateTime.UtcNow.ToISO8601()                  };                    // get the rating submitted to trakt                  int rating = GUIUtils.ShowRateDialog<TraktSyncMovieRated>(rateObject);                  if (rating == -1) return;                    // flag to ignore event handler                  TraktRateSent = true;                    if (rating > 0)                  {                      TraktLogger.Info("Applying rating for movie. Rating = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDB ID = '{3}'' TMDb ID = '{4}'"' rating'  movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID(movie) ?? "<empty>");                      if (!AdvancedRatings)                      {                          movieToRate.ActiveUserSettings.UserRating = (int)(Math.Round(rating / 2.0' MidpointRounding.AwayFromZero));                      }                      else                      {                          SetAdvancedRating(movieToRate' rating);                      }                        // update local cache                      TraktCache.AddMovieToRatings(rateObject' rating);                        // Publish to skin - same as how MovingPictures does it i.e. lose precision due to rounding                      // Make sure we're still showing the active movie                      if (GUIUtils.GetProperty("#MovingPictures.SelectedMovie.title").Equals(movieToRate.Title))                      {                          if (!AdvancedRatings)                          {                              GUICommon.SetProperty("#MovingPictures.UserMovieSettings.user_rating"' movieToRate.ActiveUserSettings.UserRating.ToString());                              GUICommon.SetProperty("#MovingPictures.UserMovieSettings.10point_user_rating"' (movieToRate.ActiveUserSettings.UserRating * 2).ToString());                          }                          else                          {                              GUICommon.SetProperty("#MovingPictures.UserMovieSettings.10point_user_rating"' rating);                          }                      }                        if (movieToRate.Popularity == 0 && movieToRate.Score == 0)                      {                          movieToRate.Score = rating;                          movieToRate.Popularity = 1;                      }                  }                  else                  {                      // unrate                      TraktLogger.Info("Removing rating for movie. Title = '{0}'' Year = '{1}'' IMDB ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID(movie) ?? "<empty>");                      movieToRate.ActiveUserSettings.UserRating = 0;                      if (AdvancedRatings) SetAdvancedRating(movieToRate' 0);                        // update local cache                      TraktCache.RemoveMovieFromRatings(rateObject);                        // Make sure we're still showing the active movie                      if (GUIUtils.GetProperty("#MovingPictures.SelectedMovie.title").Equals(movieToRate.Title))                      {                          GUICommon.SetProperty("#MovingPictures.UserMovieSettings.user_rating"' " ");                          GUICommon.SetProperty("#MovingPictures.UserMovieSettings.10point_user_rating"' " ");                      }                  }                    movieToRate.Commit();                  TraktRateSent = false;              })              {                  Name = "Rate"'                  IsBackground = true              };
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The following statement contains a magic number: var rateThread = new Thread((objMovie) =>              {                  TraktLogger.Info("Showing rate dialog for movie. Title = '{0}'' Year = '{1}'' IMDB ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID(movie) ?? "<empty>");                    // added a delay due to bug in MovingPictures blocking OnPageLoad()                  // a call to GUIWindowManager.Process() causes MediaPortal to wait until any modal dialog is closed.                  // the value may need to be tweaked on some systems                  // visible symtoms of issue is wrong backdrop / progress in background whilst dialog is modal                  Thread.Sleep(TraktSettings.MovPicsRatingDlgDelay);                    var movieToRate = objMovie as DBMovieInfo;                  if (movieToRate == null) return;                    var rateObject = new TraktSyncMovieRated                  {                      Ids = new TraktMovieId { Imdb = movieToRate.ImdbID.ToNullIfEmpty()' Tmdb = GetTmdbID(movieToRate).ToNullableInt32() }'                      Title = movieToRate.Title'                      Year = movieToRate.Year'                      RatedAt = DateTime.UtcNow.ToISO8601()                  };                    // get the rating submitted to trakt                  int rating = GUIUtils.ShowRateDialog<TraktSyncMovieRated>(rateObject);                  if (rating == -1) return;                    // flag to ignore event handler                  TraktRateSent = true;                    if (rating > 0)                  {                      TraktLogger.Info("Applying rating for movie. Rating = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDB ID = '{3}'' TMDb ID = '{4}'"' rating'  movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID(movie) ?? "<empty>");                      if (!AdvancedRatings)                      {                          movieToRate.ActiveUserSettings.UserRating = (int)(Math.Round(rating / 2.0' MidpointRounding.AwayFromZero));                      }                      else                      {                          SetAdvancedRating(movieToRate' rating);                      }                        // update local cache                      TraktCache.AddMovieToRatings(rateObject' rating);                        // Publish to skin - same as how MovingPictures does it i.e. lose precision due to rounding                      // Make sure we're still showing the active movie                      if (GUIUtils.GetProperty("#MovingPictures.SelectedMovie.title").Equals(movieToRate.Title))                      {                          if (!AdvancedRatings)                          {                              GUICommon.SetProperty("#MovingPictures.UserMovieSettings.user_rating"' movieToRate.ActiveUserSettings.UserRating.ToString());                              GUICommon.SetProperty("#MovingPictures.UserMovieSettings.10point_user_rating"' (movieToRate.ActiveUserSettings.UserRating * 2).ToString());                          }                          else                          {                              GUICommon.SetProperty("#MovingPictures.UserMovieSettings.10point_user_rating"' rating);                          }                      }                        if (movieToRate.Popularity == 0 && movieToRate.Score == 0)                      {                          movieToRate.Score = rating;                          movieToRate.Popularity = 1;                      }                  }                  else                  {                      // unrate                      TraktLogger.Info("Removing rating for movie. Title = '{0}'' Year = '{1}'' IMDB ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID(movie) ?? "<empty>");                      movieToRate.ActiveUserSettings.UserRating = 0;                      if (AdvancedRatings) SetAdvancedRating(movieToRate' 0);                        // update local cache                      TraktCache.RemoveMovieFromRatings(rateObject);                        // Make sure we're still showing the active movie                      if (GUIUtils.GetProperty("#MovingPictures.SelectedMovie.title").Equals(movieToRate.Title))                      {                          GUICommon.SetProperty("#MovingPictures.UserMovieSettings.user_rating"' " ");                          GUICommon.SetProperty("#MovingPictures.UserMovieSettings.10point_user_rating"' " ");                      }                  }                    movieToRate.Commit();                  TraktRateSent = false;              })              {                  Name = "Rate"'                  IsBackground = true              };
Magic Number,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,MyVideos,The following statement contains a magic number: new Version(version) < new Version(1' 15' 100' 0)
Magic Number,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,MyVideos,The following statement contains a magic number: new Version(version) < new Version(1' 15' 100' 0)
Magic Number,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncProgress,The following statement contains a magic number: var resumeData = Convert.ToInt32(movie.Duration * (item.Progress / 100.0)) - TraktSettings.SyncResumeDelta;
Magic Number,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,CreateScrobbleData,The following statement contains a magic number: double progress = (g_Player.CurrentPosition / (g_Player.Duration == 0.0 ? movie.RunTime * 60.0 : g_Player.Duration)) * 100.0;
Magic Number,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,CreateScrobbleData,The following statement contains a magic number: double progress = (g_Player.CurrentPosition / (g_Player.Duration == 0.0 ? movie.RunTime * 60.0 : g_Player.Duration)) * 100.0;
Magic Number,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,CreateScrobbleData,The following statement contains a magic number: var scrobbleData = new TraktScrobbleMovie              {                  Movie = new TraktMovie                  {                      Ids = new TraktMovieId { Imdb = movie.IMDBNumber.ToNullIfEmpty()' Tmdb = movie.TMDBNumber.ToNullableInt32() }'                      Title = movie.Title'                      Year = movie.Year                  }'                  AppDate = TraktSettings.BuildDate'                  AppVersion = TraktSettings.Version'                  Progress = Math.Round(progress' 2)              };
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,Scrobble,The following statement contains a magic number: var scrobbleThread = new Thread((episodeObj) =>              {                  var scrobbleEpisode = episodeObj as DBEpisode;                  if (scrobbleEpisode == null) return;                    var show = Helper.getCorrespondingSeries(scrobbleEpisode[DBEpisode.cSeriesID]);                  if (show == null || show[DBOnlineSeries.cTraktIgnore]) return;                    // get the current player progress                  double progress = GetPlayerProgress(scrobbleEpisode);                    // check if it's a double episode and handle accordingly based on start time                  TraktScrobbleEpisode scrobbleData = null;                  if (scrobbleEpisode.IsDoubleEpisode)                  {                      // get both episodes from filename query                      var condition = new SQLCondition();                      condition.Add(new DBEpisode()' DBEpisode.cFilename' scrobbleEpisode[DBEpisode.cFilename]' SQLConditionType.Equal);                      var episodes = DBEpisode.Get(condition' false);                      if (episodes == null || episodes.Count != 2)                      {                          TraktLogger.Error("Unable to retrieve double episode information from tvseries database for current playing episode. Title = '{0}'"' scrobbleEpisode.ToString());                          return;                      }                        // store the second episode so we can use seperately                      SecondEpisode = episodes[1];                        // if we're already past the half way mark scrobble the second part only                      if (progress > 50)                      {                          // don't scrobble the first part when we stop                          FirstEpisodeWatched = true;                            TraktLogger.Info("Sending start scrobble of second part of episode to trakt.tv. Show Title = '{0}'' Season = '{1}'' Episode = '{2}'' Episode Title = '{3}'' Show TVDb ID = '{4}'' Episode TVDb ID = '{5}'"'                                      show[DBOnlineSeries.cOriginalName]' episodes[1][DBOnlineEpisode.cSeasonIndex]' episodes[1][DBOnlineEpisode.cEpisodeIndex]' episodes[1][DBOnlineEpisode.cEpisodeName]' episodes[1][DBOnlineEpisode.cSeriesID]' episodes[1][DBOnlineEpisode.cID]);                            scrobbleData = CreateScrobbleData(episodes[1]' progress);                          if (scrobbleData == null) return;                            var response = TraktAPI.TraktAPI.StartEpisodeScrobble(scrobbleData);                          TraktLogger.LogTraktResponse(response);                            return;                      }                  }                    TraktLogger.Info("Sending start scrobble of episode to trakt.tv. Show Title = '{0}'' Season = '{1}'' Episode = '{2}'' Episode Title = '{3}'' Show TVDb ID = '{4}'' Episode TVDb ID = '{5}'"'                                      show[DBOnlineSeries.cOriginalName]' scrobbleEpisode[DBOnlineEpisode.cSeasonIndex]' scrobbleEpisode[DBOnlineEpisode.cEpisodeIndex]' scrobbleEpisode[DBOnlineEpisode.cEpisodeName]' scrobbleEpisode[DBOnlineEpisode.cSeriesID]' scrobbleEpisode[DBOnlineEpisode.cID]);                    scrobbleData = CreateScrobbleData(scrobbleEpisode' progress);                  if (scrobbleData == null) return;                    TraktLogger.LogTraktResponse(TraktAPI.TraktAPI.StartEpisodeScrobble(scrobbleData));              })              {                  Name = "Scrobble"'                  IsBackground = true              };
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,Scrobble,The following statement contains a magic number: var scrobbleThread = new Thread((episodeObj) =>              {                  var scrobbleEpisode = episodeObj as DBEpisode;                  if (scrobbleEpisode == null) return;                    var show = Helper.getCorrespondingSeries(scrobbleEpisode[DBEpisode.cSeriesID]);                  if (show == null || show[DBOnlineSeries.cTraktIgnore]) return;                    // get the current player progress                  double progress = GetPlayerProgress(scrobbleEpisode);                    // check if it's a double episode and handle accordingly based on start time                  TraktScrobbleEpisode scrobbleData = null;                  if (scrobbleEpisode.IsDoubleEpisode)                  {                      // get both episodes from filename query                      var condition = new SQLCondition();                      condition.Add(new DBEpisode()' DBEpisode.cFilename' scrobbleEpisode[DBEpisode.cFilename]' SQLConditionType.Equal);                      var episodes = DBEpisode.Get(condition' false);                      if (episodes == null || episodes.Count != 2)                      {                          TraktLogger.Error("Unable to retrieve double episode information from tvseries database for current playing episode. Title = '{0}'"' scrobbleEpisode.ToString());                          return;                      }                        // store the second episode so we can use seperately                      SecondEpisode = episodes[1];                        // if we're already past the half way mark scrobble the second part only                      if (progress > 50)                      {                          // don't scrobble the first part when we stop                          FirstEpisodeWatched = true;                            TraktLogger.Info("Sending start scrobble of second part of episode to trakt.tv. Show Title = '{0}'' Season = '{1}'' Episode = '{2}'' Episode Title = '{3}'' Show TVDb ID = '{4}'' Episode TVDb ID = '{5}'"'                                      show[DBOnlineSeries.cOriginalName]' episodes[1][DBOnlineEpisode.cSeasonIndex]' episodes[1][DBOnlineEpisode.cEpisodeIndex]' episodes[1][DBOnlineEpisode.cEpisodeName]' episodes[1][DBOnlineEpisode.cSeriesID]' episodes[1][DBOnlineEpisode.cID]);                            scrobbleData = CreateScrobbleData(episodes[1]' progress);                          if (scrobbleData == null) return;                            var response = TraktAPI.TraktAPI.StartEpisodeScrobble(scrobbleData);                          TraktLogger.LogTraktResponse(response);                            return;                      }                  }                    TraktLogger.Info("Sending start scrobble of episode to trakt.tv. Show Title = '{0}'' Season = '{1}'' Episode = '{2}'' Episode Title = '{3}'' Show TVDb ID = '{4}'' Episode TVDb ID = '{5}'"'                                      show[DBOnlineSeries.cOriginalName]' scrobbleEpisode[DBOnlineEpisode.cSeasonIndex]' scrobbleEpisode[DBOnlineEpisode.cEpisodeIndex]' scrobbleEpisode[DBOnlineEpisode.cEpisodeName]' scrobbleEpisode[DBOnlineEpisode.cSeriesID]' scrobbleEpisode[DBOnlineEpisode.cID]);                    scrobbleData = CreateScrobbleData(scrobbleEpisode' progress);                  if (scrobbleData == null) return;                    TraktLogger.LogTraktResponse(TraktAPI.TraktAPI.StartEpisodeScrobble(scrobbleData));              })              {                  Name = "Scrobble"'                  IsBackground = true              };
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The following statement contains a magic number: var resumeData = Convert.ToInt32((episode[DBEpisode.cLocalPlaytime] / 1000.0) * (item.Progress / 100.0)) - TraktSettings.SyncResumeDelta;
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The following statement contains a magic number: var resumeData = Convert.ToInt32((episode[DBEpisode.cLocalPlaytime] / 1000.0) * (item.Progress / 100.0)) - TraktSettings.SyncResumeDelta;
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,CreateScrobbleData,The following statement contains a magic number: progress = 100;
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,CreateScrobbleData,The following statement contains a magic number: progress > 100
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,CreateScrobbleData,The following statement contains a magic number: var scrobbleData = new TraktScrobbleEpisode              {                  Episode = new TraktEpisode                  {                      Ids = new TraktEpisodeId                      {                           Tvdb = episode[DBOnlineEpisode.cID]'                          Imdb = BasicHandler.GetProperImdbId(episode[DBOnlineEpisode.cIMDBID])                      }'                      Title = episode[DBOnlineEpisode.cEpisodeName]'                      Season = episode[DBOnlineEpisode.cSeasonIndex]'                      Number = episode[DBOnlineEpisode.cEpisodeIndex]                  }'                  Show = new TraktShow                  {                      Ids = new TraktShowId                      {                          Tvdb = show[DBSeries.cID]'                          Imdb = BasicHandler.GetProperImdbId(show[DBOnlineSeries.cIMDBID])                      }'                      Title = show[DBOnlineSeries.cOriginalName]'                      Year = show.Year.ToNullableInt32()                  }'                  Progress = Math.Round(progress' 2)'                  AppVersion = TraktSettings.Version'                  AppDate = TraktSettings.BuildDate              };
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetPlayerProgress,The following statement contains a magic number: double duration = episode[DBEpisode.cLocalPlaytime] / 60000;
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetPlayerProgress,The following statement contains a magic number: progress = ((g_Player.CurrentPosition / 60.0) / duration) * 100.0;
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetPlayerProgress,The following statement contains a magic number: progress = ((g_Player.CurrentPosition / 60.0) / duration) * 100.0;
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetPlayerProgress,The following statement contains a magic number: progress = 100;
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetPlayerProgress,The following statement contains a magic number: progress > 100.0
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetPlayerProgress,The following statement contains a magic number: return Math.Round(progress' 2);
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: (videoWidth <= 3840 && videoWidth > 3000) || videoHeight == 2160
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: (videoWidth <= 3840 && videoWidth > 3000) || videoHeight == 2160
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: (videoWidth <= 3840 && videoWidth > 3000) || videoHeight == 2160
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: (videoWidth <= 1920 && videoWidth > 1800) || videoHeight == 1080
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: (videoWidth <= 1920 && videoWidth > 1800) || videoHeight == 1080
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: (videoWidth <= 1920 && videoWidth > 1800) || videoHeight == 1080
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: (videoWidth <= 1280 && videoWidth > 1100 ) || videoHeight == 720
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: (videoWidth <= 1280 && videoWidth > 1100 ) || videoHeight == 720
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: (videoWidth <= 1280 && videoWidth > 1100 ) || videoHeight == 720
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: videoWidth == 704 || videoHeight == 576
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: videoWidth == 704 || videoHeight == 576
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: videoWidth == 704 || videoHeight == 480
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: videoWidth == 704 || videoHeight == 480
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnImportCompleted,The following statement contains a magic number: var syncThread = new Thread(obj =>                  {                      TraktLogger.Info("New episodes added in MP-TVSeries' starting sync");                        while (TraktPlugin.LibrarySyncRunning)                      {                          // only do one sync at a time                          TraktLogger.Debug("MP-TVSeries sync still in progress' trying again in 60 secs");                          Thread.Sleep(60000);                      }                      try                      {                          TraktCache.ClearLastActivityCache(true);                            SyncLibrary();                      }                      catch (Exception ex)                      {                          TraktLogger.Error("MP-TVSeries sync failed' Reason = '{0}'' StackTrace = {1}"' ex.Message' ex.StackTrace);                      }                  })                  {                      IsBackground = true'                      Name = "Sync"                  };
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnEpisodeWatched,The following statement contains a magic number: progress = 100;
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnEpisodeWatched,The following statement contains a magic number: progress < 80
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnEpisodeWatched,The following statement contains a magic number: var stopWatching = new Thread((objEpisode) =>              {                  var stoppedEpisode = objEpisode as DBEpisode;                  if (stoppedEpisode == null) return;                    TraktScrobbleResponse response = null;                  TraktScrobbleEpisode scrobbleData = null;                    #region Double Episode Handling                    // if its a double episode we may need to mark two episodes as watched                  if (stoppedEpisode.IsDoubleEpisode)                  {                      // check if we should mark the first episode as watched                      if (!FirstEpisodeWatched)                      {                          scrobbleData = CreateScrobbleData(stoppedEpisode' 100);                          if (scrobbleData == null) return;                            // update local cache                          TraktCache.AddEpisodeToWatchHistory(scrobbleData.Show' scrobbleData.Episode);                            response = TraktAPI.TraktAPI.StopEpisodeScrobble(scrobbleData);                          TraktLogger.LogTraktResponse(response);                      }                        // scrobble the second                       scrobbleData = CreateScrobbleData(SecondEpisode' progress);                      if (scrobbleData == null) return;                        // prompt to rate second episode                      ShowRateDialog(SecondEpisode' isPlaylist);                        TraktLogger.LogTraktResponse(TraktAPI.TraktAPI.StopEpisodeScrobble(scrobbleData));                      return;                  }                    #endregion                    scrobbleData = CreateScrobbleData(stoppedEpisode' progress);                  if (scrobbleData == null) return;                    // prompt to rate episode                  ShowRateDialog(stoppedEpisode' isPlaylist);                    response = TraktAPI.TraktAPI.StopEpisodeScrobble(scrobbleData);                  TraktLogger.LogTraktResponse(response);                    if (response != null && response.Show != null && response.Action == "scrobble")                  {                      // add to cache                      TraktCache.AddEpisodeToWatchHistory(response.Show' response.Episode);                  }              })              {                  IsBackground = true'                  Name = "Scrobble"              };
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnEpisodeStopped,The following statement contains a magic number: var stopWatching = new Thread((objEpisode) =>              {                  TraktScrobbleResponse response = null;                  TraktScrobbleEpisode scrobbleData = null;                    var stoppedEpisode = objEpisode as DBEpisode;                  if (stoppedEpisode == null) return;                    #region Double Episode Handling                    if (stoppedEpisode.IsDoubleEpisode && progress > 50.0)                  {                      // first episode can be marked as watched                      if (!FirstEpisodeWatched)                      {                          TraktLogger.Info("Marking first episode of double episode as watched");                            // fake progress so it's marked as watched online                          scrobbleData = CreateScrobbleData(stoppedEpisode' 100);                          if (scrobbleData == null) return;                            // prompt to rate episode                          ShowRateDialog(stoppedEpisode' false);                            // update local cache                          TraktCache.AddEpisodeToWatchHistory(scrobbleData.Show' scrobbleData.Episode);                          TraktLogger.LogTraktResponse(TraktAPI.TraktAPI.StopEpisodeScrobble(scrobbleData));                            return;                      }                      else                      {                          // stop the second                           scrobbleData = CreateScrobbleData(SecondEpisode' progress);                          if (scrobbleData == null) return;                            // only mark as watched online if percentage watched is greater than user setting                          response = TraktAPI.TraktAPI.PauseEpisodeScrobble(scrobbleData);                          TraktLogger.LogTraktResponse(response);                            if (response != null && response.Show != null && response.Action == "pause")                          {                              // add to cache                              TraktCache.AddEpisodeToPausedData(response.Show' response.Episode' response.Progress);                          }                          return;                      }                  }                    #endregion                    scrobbleData = CreateScrobbleData(stoppedEpisode' progress);                  response = TraktAPI.TraktAPI.PauseEpisodeScrobble(scrobbleData);                    TraktLogger.LogTraktResponse(response);                    if (response != null && response.Show != null && response.Action == "pause")                  {                      // add to cache                      TraktCache.AddEpisodeToPausedData(response.Show' response.Episode' response.Progress);                  }              })              {                  IsBackground = true'                  Name = "Scrobble"              };
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnEpisodeStopped,The following statement contains a magic number: var stopWatching = new Thread((objEpisode) =>              {                  TraktScrobbleResponse response = null;                  TraktScrobbleEpisode scrobbleData = null;                    var stoppedEpisode = objEpisode as DBEpisode;                  if (stoppedEpisode == null) return;                    #region Double Episode Handling                    if (stoppedEpisode.IsDoubleEpisode && progress > 50.0)                  {                      // first episode can be marked as watched                      if (!FirstEpisodeWatched)                      {                          TraktLogger.Info("Marking first episode of double episode as watched");                            // fake progress so it's marked as watched online                          scrobbleData = CreateScrobbleData(stoppedEpisode' 100);                          if (scrobbleData == null) return;                            // prompt to rate episode                          ShowRateDialog(stoppedEpisode' false);                            // update local cache                          TraktCache.AddEpisodeToWatchHistory(scrobbleData.Show' scrobbleData.Episode);                          TraktLogger.LogTraktResponse(TraktAPI.TraktAPI.StopEpisodeScrobble(scrobbleData));                            return;                      }                      else                      {                          // stop the second                           scrobbleData = CreateScrobbleData(SecondEpisode' progress);                          if (scrobbleData == null) return;                            // only mark as watched online if percentage watched is greater than user setting                          response = TraktAPI.TraktAPI.PauseEpisodeScrobble(scrobbleData);                          TraktLogger.LogTraktResponse(response);                            if (response != null && response.Show != null && response.Action == "pause")                          {                              // add to cache                              TraktCache.AddEpisodeToPausedData(response.Show' response.Episode' response.Progress);                          }                          return;                      }                  }                    #endregion                    scrobbleData = CreateScrobbleData(stoppedEpisode' progress);                  response = TraktAPI.TraktAPI.PauseEpisodeScrobble(scrobbleData);                    TraktLogger.LogTraktResponse(response);                    if (response != null && response.Show != null && response.Action == "pause")                  {                      // add to cache                      TraktCache.AddEpisodeToPausedData(response.Show' response.Episode' response.Progress);                  }              })              {                  IsBackground = true'                  Name = "Scrobble"              };
Duplicate Code,TraktPlugin.GUI,GUIWatchListMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListMovies.cs,OnShowContextMenu,The method contains a code clone-set at the following line numbers (starting from the method definition): ((143' 163)' (183' 203))
Missing Default,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,ParseCommandLine,The following switch statement is missing a default case: switch (argument.ToLower().TrimStart('-'))                  {                      case "silentmode":                          SilentMode = true;                          break;                        case "sync":                          AutoSync = true;                          break;                        case "closeaftersync":                          AutoCloseAfterSync = true;                          break;                  }
Missing Default,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,SetPriorityOrder,The following switch statement is missing a default case: switch (item.ToString())                  {                      case "Moving Pictures":                          TraktSettings.MovingPictures = clbPlugins.GetItemChecked(i) ? i : -1;                          break;                      case "MP-TVSeries":                          TraktSettings.TVSeries = clbPlugins.GetItemChecked(i) ? i : -1;                          break;                      case "My Videos":                          TraktSettings.MyVideos = clbPlugins.GetItemChecked(i) ? i : -1;                          break;                      case "My Films":                          TraktSettings.MyFilms = clbPlugins.GetItemChecked(i) ? i : -1;                          break;                      case "OnlineVideos":                          TraktSettings.OnlineVideos = clbPlugins.GetItemChecked(i) ? i : -1;                          break;                      case "My TV Recordings":                          TraktSettings.MyTVRecordings = clbPlugins.GetItemChecked(i) ? i : -1;                          break;                      case "My TV Live":                          TraktSettings.MyTVLive = clbPlugins.GetItemChecked(i) ? i : -1;                          break;                      case "Argus TV Recordings":                          TraktSettings.ArgusRecordings = clbPlugins.GetItemChecked(i) ? i : -1;                          break;                      case "Argus TV Live":                          TraktSettings.ArgusTVLive = clbPlugins.GetItemChecked(i) ? i : -1;                          break;                  }
Missing Default,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,clbPlugins_ItemCheck,The following switch statement is missing a default case: switch (plugin)              {                  case "Moving Pictures":                      TraktSettings.MovingPictures = clbPlugins.GetItemChecked(ndx) ? -1 : ndx;                      break;                  case "MP-TVSeries":                      TraktSettings.TVSeries = clbPlugins.GetItemChecked(ndx) ? -1 : ndx;                      break;                  case "My Videos":                      TraktSettings.MyVideos = clbPlugins.GetItemChecked(ndx) ? -1 : ndx;                      break;                  case "My Films":                      TraktSettings.MyFilms = clbPlugins.GetItemChecked(ndx) ? -1 : ndx;                      break;                  case "OnlineVideos":                      TraktSettings.OnlineVideos = clbPlugins.GetItemChecked(ndx) ? -1 : ndx;                      break;                  case "My TV Recordings":                      TraktSettings.MyTVRecordings = clbPlugins.GetItemChecked(ndx) ? -1 : ndx;                      break;                  case "My TV Live":                      TraktSettings.MyTVLive = clbPlugins.GetItemChecked(ndx) ? -1 : ndx;                      break;                  case "Argus TV Recordings":                      TraktSettings.ArgusRecordings = clbPlugins.GetItemChecked(ndx) ? -1 : ndx;                      break;                  case "Argus TV Live":                      TraktSettings.ArgusTVLive = clbPlugins.GetItemChecked(ndx) ? -1 : ndx;                      break;              }
Missing Default,TraktPlugin,Configuration,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,StartSync,The following switch statement is missing a default case: switch (item.ToString())                              {                                  case "Moving Pictures":                                      var movingPictures = new MovingPictures(TraktSettings.MovingPictures);                                      movingPictures.SyncLibrary();                                      movingPictures.SyncProgress();                                      break;                                    case "MP-TVSeries":                                      var tvSeries = new TVSeries(TraktSettings.TVSeries);                                      tvSeries.SyncLibrary();                                      tvSeries.SyncProgress();                                      break;                                    case "My Videos":                                      var myVideos = new MyVideos(TraktSettings.MyVideos);                                      myVideos.SyncLibrary();                                      myVideos.SyncProgress();                                      break;                                    case "My Films":                                      var myFilms = new MyFilmsHandler(TraktSettings.MyFilms);                                      myFilms.SyncLibrary();                                      myFilms.SyncProgress();                                      break;                              }
Missing Default,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivityDescription,The following switch statement is missing a default case: switch (activityView)              {                  case ActivityView.community:                      description = Translation.ActivityCommunityDesc;                      break;                    case ActivityView.followers:                      description = Translation.ActivityFollowersDesc;                      break;                    case ActivityView.following:                      description = Translation.ActivityFollowingDesc;                      break;                    case ActivityView.friends:                      description = Translation.ActivityFriendsDesc;                      break;                    case ActivityView.friendsandme:                      description = Translation.ActivityFriendsAndMeDesc;                      break;                    case ActivityView.me:                      description = Translation.ActivityMeDesc;                      break;              }
Missing Default,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivityImage,The following switch statement is missing a default case: switch (action)              {                  case ActivityAction.checkin:                  case ActivityAction.watching:                  case ActivityAction.pause:                      imageFilename = "traktActivityWatching.png";                      break;                    case ActivityAction.seen:                  case ActivityAction.scrobble:                      imageFilename = "traktActivityWatched.png";                      break;                    case ActivityAction.collection:                      imageFilename = "traktActivityCollected.png";                      break;                    case ActivityAction.rating:                      imageFilename = activity.Rating > 5 ? "traktActivityLove.png" : "traktActivityHate.png";                      break;                    case ActivityAction.watchlist:                      imageFilename = "traktActivityWatchlist.png";                      break;                    case ActivityAction.shout:                  case ActivityAction.review:                      imageFilename = "traktActivityShout.png";                      break;                    case ActivityAction.item_added:                  case ActivityAction.created:                  case ActivityAction.updated:                      imageFilename = "traktActivityList.png";                      break;                    case ActivityAction.like:                      imageFilename = "traktActivityLike.png";                      break;                    case ActivityAction.hide_calendar:                  case ActivityAction.hide_recommendations:                  case ActivityAction.hide_progress_collected:                  case ActivityAction.hide_progress_watched:                      imageFilename = "traktHide.png";                      break;              }
Missing Default,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,The following switch statement is missing a default case: switch (activityView)                  {                      case ActivityView.community:                          //PreviousActivity = TraktAPI.TraktAPI.GetCommunityActivity();                          break;                        case ActivityView.followers:                          //PreviousActivity = TraktAPI.TraktAPI.GetFollowersActivity();                          break;                        case ActivityView.following:                          //PreviousActivity = TraktAPI.TraktAPI.GetFollowingActivity();                          break;                        case ActivityView.friends:                          //PreviousActivity = TraktAPI.TraktAPI.GetFriendActivity(false);                          break;                        case ActivityView.friendsandme:                          //PreviousActivity = TraktAPI.TraktAPI.GetFriendActivity(true);                          break;                        case ActivityView.me:                          //PreviousActivity = GetMyActivityFromCache();                          break;                  }
Missing Default,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,The following switch statement is missing a default case: switch (activityView)                  {                      case ActivityView.community:                          //incrementalActivity = TraktAPI.TraktAPI.GetCommunityActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch());                          break;                        case ActivityView.followers:                          //incrementalActivity = TraktAPI.TraktAPI.GetFollowersActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch());                          break;                        case ActivityView.following:                          //incrementalActivity = TraktAPI.TraktAPI.GetFollowingActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch());                          break;                        case ActivityView.friends:                          //incrementalActivity = TraktAPI.TraktAPI.GetFriendActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch()' false);                          break;                        case ActivityView.friendsandme:                          //incrementalActivity = TraktAPI.TraktAPI.GetFriendActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch()' true);                          break;                        case ActivityView.me:                          //incrementalActivity = GetMyActivityFromCache();                          break;                  }
Missing Default,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityFilterActionsMenu,The following switch statement is missing a default case: switch ((ActivityAction)Enum.Parse(typeof(ActivityAction)' item.ItemID' true))                  {                      case ActivityAction.scrobble:                          TraktSettings.DashboardActivityFilter.Actions.Watched = !TraktSettings.DashboardActivityFilter.Actions.Watched;                          break;                        case ActivityAction.collection:                          TraktSettings.DashboardActivityFilter.Actions.Collected = !TraktSettings.DashboardActivityFilter.Actions.Collected;                          break;                        case ActivityAction.rating:                          TraktSettings.DashboardActivityFilter.Actions.Rated = !TraktSettings.DashboardActivityFilter.Actions.Rated;                          break;                        case ActivityAction.watchlist:                          TraktSettings.DashboardActivityFilter.Actions.Watchlisted = !TraktSettings.DashboardActivityFilter.Actions.Watchlisted;                          break;                        case ActivityAction.pause:                          TraktSettings.DashboardActivityFilter.Actions.Paused = !TraktSettings.DashboardActivityFilter.Actions.Paused;                          break;                        case ActivityAction.shout:                          TraktSettings.DashboardActivityFilter.Actions.Commented = !TraktSettings.DashboardActivityFilter.Actions.Commented;                          break;                        case ActivityAction.like:                          TraktSettings.DashboardActivityFilter.Actions.Liked = !TraktSettings.DashboardActivityFilter.Actions.Liked;                          break;                        case ActivityAction.item_added:                          TraktSettings.DashboardActivityFilter.Actions.Added = !TraktSettings.DashboardActivityFilter.Actions.Added;                          break;                        case ActivityAction.updated:                          TraktSettings.DashboardActivityFilter.Actions.Updated = !TraktSettings.DashboardActivityFilter.Actions.Updated;                          break;                        case ActivityAction.hide_calendar:                          TraktSettings.DashboardActivityFilter.Actions.HiddenCalendarItems = !TraktSettings.DashboardActivityFilter.Actions.HiddenCalendarItems;                          break;                        case ActivityAction.hide_recommendations:                          TraktSettings.DashboardActivityFilter.Actions.HiddenRecommendations = !TraktSettings.DashboardActivityFilter.Actions.HiddenRecommendations;                          break;                        case ActivityAction.hide_progress_collected:                          TraktSettings.DashboardActivityFilter.Actions.HiddedCollectedProgress = !TraktSettings.DashboardActivityFilter.Actions.HiddedCollectedProgress;                          break;                        case ActivityAction.hide_progress_watched:                          TraktSettings.DashboardActivityFilter.Actions.HiddenWatchedProgress = !TraktSettings.DashboardActivityFilter.Actions.HiddenWatchedProgress;                          break;                  }
Missing Default,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityFilterTypesMenu,The following switch statement is missing a default case: switch ((ActivityType)Enum.Parse(typeof(ActivityType)' item.ItemID' true))                  {                      case ActivityType.movie:                          TraktSettings.DashboardActivityFilter.Types.Movies = !TraktSettings.DashboardActivityFilter.Types.Movies;                          break;                        case ActivityType.show:                          TraktSettings.DashboardActivityFilter.Types.Shows = !TraktSettings.DashboardActivityFilter.Types.Shows;                          break;                        case ActivityType.season:                          TraktSettings.DashboardActivityFilter.Types.Seasons = !TraktSettings.DashboardActivityFilter.Types.Seasons;                          break;                        case ActivityType.episode:                          TraktSettings.DashboardActivityFilter.Types.Episodes = !TraktSettings.DashboardActivityFilter.Types.Episodes;                          break;                        case ActivityType.list:                          TraktSettings.DashboardActivityFilter.Types.Lists = !TraktSettings.DashboardActivityFilter.Types.Lists;                          break;                        case ActivityType.comment:                          TraktSettings.DashboardActivityFilter.Types.Comments = !TraktSettings.DashboardActivityFilter.Types.Comments;                          break;                        case ActivityType.person:                          TraktSettings.DashboardActivityFilter.Types.People = !TraktSettings.DashboardActivityFilter.Types.People;                          break;                  }
Missing Default,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)              {                  case ((int)ActivityContextMenuItem.FilterActions):                      if (ShowActivityFilterActionsMenu())                      {                          ReloadActivityView = true;                          StartActivityPolling();                      }                      break;                    case ((int)ActivityContextMenuItem.FilterTypes):                      if (ShowActivityFilterTypesMenu())                      {                          ReloadActivityView = true;                          StartActivityPolling();                      }                      break;                    case ((int)ActivityContextMenuItem.ChangeView):                      if (ShowActivityViewMenu())                      {                          GetFullActivityLoad = true;                          StartActivityPolling();                      }                      else                      {                          ShowActivityContextMenu();                          return;                      }                      break;                    case ((int)ActivityContextMenuItem.UserProfile):                      GUIUserProfile.CurrentUser = activity.User.Username;                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.UserProfile);                      break;                    case ((int)ActivityContextMenuItem.FollowUser):                      if (GUIUtils.ShowYesNoDialog(Translation.Network' string.Format(Translation.SendFollowRequest' activity.User.Username)' true))                      {                          GUINetwork.FollowUser(activity.User);                          GUINetwork.ClearCache();                          (activityFacade.SelectedListItem as GUIUserListItem).IsFollowed = true;                      }                      break;                  case ((int)ActivityContextMenuItem.ShowSeasonInfo):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' activity.Show.ToJSON());                      break;                    case ((int)ActivityContextMenuItem.AddToList):                      if (activity.Movie != null)                          TraktHelper.AddRemoveMovieInUserList(activity.Movie' false);                      else if (activity.Episode != null)                          TraktHelper.AddRemoveEpisodeInUserList(activity.Episode' false);                      else if (activity.Season != null)                          TraktHelper.AddRemoveSeasonInUserList(activity.Season' false);                      else                          TraktHelper.AddRemoveShowInUserList(activity.Show' false);                      break;                    case ((int)ActivityContextMenuItem.AddToWatchList):                      if (activity.Movie != null)                          TraktHelper.AddMovieToWatchList(activity.Movie' true);                      else if (activity.Episode != null)                          TraktHelper.AddEpisodeToWatchList(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.AddEpisodeToWatchList(activity.Show' activity.Episodes.First());                      else if (activity.Season != null)                          TraktHelper.AddSeasonToWatchList(activity.Show' activity.Season.Number);                      else                          TraktHelper.AddShowToWatchList(activity.Show);                      break;                    case ((int)ActivityContextMenuItem.RemoveFromWatchList):                      if (activity.Movie != null)                          TraktHelper.RemoveMovieFromWatchList(activity.Movie' true);                      else if (activity.Episode != null)                          TraktHelper.RemoveEpisodeFromWatchList(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.RemoveEpisodeFromWatchList(activity.Show' activity.Episodes.First());                      else if (activity.Season != null)                          TraktHelper.RemoveSeasonFromWatchList(activity.Show' activity.Season.Number);                      else                          TraktHelper.RemoveShowFromWatchList(activity.Show);                        // force reload of activity view as we only check if the most recent item has changed                      ReloadActivityView = true;                      break;                    case ((int)ActivityContextMenuItem.MarkAsWatched):                      if (activity.Movie != null)                          TraktHelper.AddMovieToWatchHistory(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.AddEpisodeToWatchHistory(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.AddEpisodeToWatchHistory(activity.Show' activity.Episodes.First());                      break;                    case ((int)ActivityContextMenuItem.MarkAsUnwatched):                      if (activity.Movie != null)                          TraktHelper.RemoveMovieFromWatchHistory(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.RemoveEpisodeFromWatchHistory(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.RemoveEpisodeFromWatchHistory(activity.Show' activity.Episodes.First());                        ReloadActivityView = true;                      break;                    case ((int)ActivityContextMenuItem.AddToCollection):                      if (activity.Movie != null)                          TraktHelper.AddMovieToCollection(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.AddEpisodeToCollection(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.AddEpisodeToCollection(activity.Show' activity.Episodes.First());                      break;                    case ((int)ActivityContextMenuItem.RemoveFromCollection):                       if (activity.Movie != null)                          TraktHelper.RemoveMovieFromCollection(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.RemoveEpisodeFromCollection(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.RemoveEpisodeFromCollection(activity.Show' activity.Episodes.First());                        ReloadActivityView = true;                      break;                    case ((int)ActivityContextMenuItem.Shouts):                      if (activity.List != null)                          TraktHelper.ShowListShouts(activity.List);                      else if (activity.Movie != null)                          TraktHelper.ShowMovieShouts(activity.Movie);                      else if (activity.Episode != null)                          TraktHelper.ShowEpisodeShouts(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          TraktHelper.ShowEpisodeShouts(activity.Show' activity.Episodes.First());                      else                          TraktHelper.ShowTVShowShouts(activity.Show);                      break;                    case ((int)ActivityContextMenuItem.Rate):                      if (activity.Movie != null)                          GUICommon.RateMovie(activity.Movie);                      else if (activity.Episode != null)                          GUICommon.RateEpisode(activity.Show' activity.Episode);                      else if (activity.Episodes != null && activity.Episodes.Count == 1)                          GUICommon.RateEpisode(activity.Show' activity.Episodes.First());                      else if (activity.Season != null)                          GUICommon.RateSeason(activity.Show' activity.Season);                      else                          GUICommon.RateShow(activity.Show);                      break;                    case (int)ActivityContextMenuItem.Unlike:                      if (activity.Shout != null)                          GUICommon.UnLikeComment(activity.Shout);                      else if (activity.List != null)                          GUICommon.UnLikeList(activity.List);                        ReloadActivityView = true;                      break;                    case ((int)ActivityContextMenuItem.Cast):                      if (activity.Movie != null)                      {                          var images = TmdbCache.GetMovieImages(activity.Movie.Ids.Tmdb' true);                            GUICreditsMovie.Movie = activity.Movie;                          GUICreditsMovie.Type = GUICreditsMovie.CreditType.Cast;                          GUICreditsMovie.Fanart = TmdbCache.GetMovieBackdropFilename(images);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsMovie);                      }                      else if (activity.Show != null)                      {                          var images = TmdbCache.GetShowImages(activity.Show.Ids.Tmdb' true);                            GUICreditsShow.Show = activity.Show;                          GUICreditsShow.Type = GUICreditsShow.CreditType.Cast;                          GUICreditsShow.Fanart = TmdbCache.GetShowBackdropFilename(images);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsShow);                      }                      break;                    case ((int)ActivityContextMenuItem.Crew):                      if (activity.Movie != null)                      {                          var images = TmdbCache.GetMovieImages(activity.Movie.Ids.Tmdb' true);                            GUICreditsMovie.Movie = activity.Movie;                          GUICreditsMovie.Type = GUICreditsMovie.CreditType.Crew;                          GUICreditsMovie.Fanart = TmdbCache.GetMovieBackdropFilename(images);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsMovie);                      }                      else if (activity.Show != null)                      {                          var images = TmdbCache.GetShowImages(activity.Show.Ids.Tmdb' true);                            GUICreditsShow.Show = activity.Show;                          GUICreditsShow.Type = GUICreditsShow.CreditType.Crew;                          GUICreditsShow.Fanart = TmdbCache.GetShowBackdropFilename(images);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsShow);                      }                      break;                                    case ((int)ActivityContextMenuItem.UnHide):                      if (activity.Movie != null)                      {                          TraktHelper.RemoveHiddenMovie(activity.Movie' activity.Action.Substring(5));                      }                      else if (activity.Season != null)                      {                          TraktHelper.RemoveHiddenSeason(activity.Season' activity.Action.Substring(5));                      }                      else if (activity.Show != null)                      {                          TraktHelper.RemoveHiddenShow(activity.Show' activity.Action.Substring(5));                      }                      ReloadActivityView = true;                      StartActivityPolling();                      break;                    case ((int)ActivityContextMenuItem.Trailers):                      if (activity.Movie != null)                           GUICommon.ShowMovieTrailersMenu(activity.Movie);                       else if (activity.Episodes != null && activity.Episodes.Count == 1)                          GUICommon.ShowTVShowTrailersMenu(activity.Show' activity.Episodes.First());                      else                                                  GUICommon.ShowTVShowTrailersMenu(activity.Show' activity.Episode);                      break;              }
Missing Default,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PlayActivityItem,The following switch statement is missing a default case: switch (type)              {                  case ActivityType.episode:                      if (action == ActivityAction.seen || action == ActivityAction.collection)                      {                          if (activity.Episodes.Count > 1)                          {                              GUICommon.CheckAndPlayFirstUnwatchedEpisode(activity.Show' jumpTo);                              return;                          }                          else if (activity.Episodes != null && activity.Episodes.Count == 1)                          {                              GUICommon.CheckAndPlayEpisode(activity.Show' activity.Episodes.First());                          }                      }                       GUICommon.CheckAndPlayEpisode(activity.Show' activity.Episode);                      break;                    case ActivityType.show:                      GUICommon.CheckAndPlayFirstUnwatchedEpisode(activity.Show' jumpTo);                      break;                    case ActivityType.movie:                      GUICommon.CheckAndPlayMovie(jumpTo' activity.Movie);                      break;                    case ActivityType.list:                      if (action == ActivityAction.item_added)                      {                          // return the name of the item added to the list                          switch (activity.ListItem.Type)                          {                              case "show":                                  GUICommon.CheckAndPlayFirstUnwatchedEpisode(activity.ListItem.Show' jumpTo);                                  break;                                case "episode":                                  GUICommon.CheckAndPlayEpisode(activity.ListItem.Show' activity.ListItem.Episode);                                  break;                                case "movie":                                  GUICommon.CheckAndPlayMovie(jumpTo' activity.ListItem.Movie);                                  break;                          }                      }                      break;              }
Missing Default,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PlayActivityItem,The following switch statement is missing a default case: switch (activity.ListItem.Type)                          {                              case "show":                                  GUICommon.CheckAndPlayFirstUnwatchedEpisode(activity.ListItem.Show' jumpTo);                                  break;                                case "episode":                                  GUICommon.CheckAndPlayEpisode(activity.ListItem.Show' activity.ListItem.Episode);                                  break;                                case "movie":                                  GUICommon.CheckAndPlayMovie(jumpTo' activity.ListItem.Movie);                                  break;                          }
Missing Default,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,OnActivitySelected,The following switch statement is missing a default case: switch (type)              {                  case ActivityType.episode:                      if (action == ActivityAction.seen || action == ActivityAction.collection)                      {                          if (activity.Episodes.Count > 1)                          {                              GUICommon.SetEpisodeProperties(activity.Show' activity.Episodes.First());                          }                          else                          {                              GUICommon.SetEpisodeProperties(activity.Show' activity.Episode);                          }                      }                      else                      {                          GUICommon.SetEpisodeProperties(activity.Show' activity.Episode);                      }                      GUICommon.SetShowProperties(activity.Show);                      break;                    case ActivityType.show:                      GUICommon.SetShowProperties(activity.Show);                      break;                    case ActivityType.season:                      GUICommon.SetShowProperties(activity.Show);                      GUICommon.SetSeasonProperties(activity.Show' activity.Season);                      break;                    case ActivityType.movie:                      GUICommon.SetMovieProperties(activity.Movie);                      break;                    case ActivityType.list:                      if (action == ActivityAction.item_added)                      {                          // return the name of the item added to the list                          switch (activity.ListItem.Type)                          {                              case "show":                                  GUICommon.SetShowProperties(activity.ListItem.Show);                                  break;                                                            case "season":                                  GUICommon.SetShowProperties(activity.ListItem.Show);                                  GUICommon.SetSeasonProperties(activity.ListItem.Show' activity.ListItem.Season);                                  break;                                case "episode":                                  GUICommon.SetShowProperties(activity.ListItem.Show);                                  GUICommon.SetEpisodeProperties(activity.ListItem.Show' activity.ListItem.Episode);                                  break;                                case "movie":                                  GUICommon.SetMovieProperties(activity.ListItem.Movie);                                  break;                          }                      }                      break;                    case ActivityType.comment:                      GUICommon.SetCommentProperties(activity.Shout' false);                      break;              }
Missing Default,TraktPlugin,TraktDashboard,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,OnActivitySelected,The following switch statement is missing a default case: switch (activity.ListItem.Type)                          {                              case "show":                                  GUICommon.SetShowProperties(activity.ListItem.Show);                                  break;                                                            case "season":                                  GUICommon.SetShowProperties(activity.ListItem.Show);                                  GUICommon.SetSeasonProperties(activity.ListItem.Show' activity.ListItem.Season);                                  break;                                case "episode":                                  GUICommon.SetShowProperties(activity.ListItem.Show);                                  GUICommon.SetEpisodeProperties(activity.ListItem.Show' activity.ListItem.Episode);                                  break;                                case "movie":                                  GUICommon.SetMovieProperties(activity.ListItem.Movie);                                  break;                          }
Missing Default,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following switch statement is missing a default case: switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                      // Confirm we are in IMDB/iTunes Trailer Details view                                      // This will give us enough information to send to trakt                                      bool isDetails = GUIPropertyManager.GetProperty("#OnlineVideos.state").ToLowerInvariant() == "details";                                      string siteUtil = GUIPropertyManager.GetProperty("#OnlineVideos.selectedSiteUtil").ToLowerInvariant();                                      if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers"))                                      {                                          title = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Title").Trim();                                          year = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Year").Trim();                                          if (siteUtil == "imdb")                                          {                                              // IMDb site exposes IMDb ID' use this to get a better match on trakt                                              // this property is new' check for null in case user hasn't updated site                                              imdbid = GUIPropertyManager.GetProperty("#OnlineVideos.Details.IMDbId");                                              if (imdbid == null) imdbid = string.Empty;                                                // could be a TV Show                                              type = GUIPropertyManager.GetProperty("#OnlineVideos.Details.Type").ToLowerInvariant();                                          }                                          if ((!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)) || imdbid.StartsWith("tt"))                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          }                                          // Return focus to details list now so we dont go in a loop                                          GUIControl.FocusControl((int)ExternalPluginWindows.OnlineVideos' 51);                                      }                                      break;                              }
Missing Default,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following switch statement is missing a default case: switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                      // Confirm we are in Showtimes Details view                                      // This will give us enough information to send to trakt                                      bool isDetails = GUIWindowManager.GetWindow(GUIWindowManager.ActiveWindow).GetControl(24).Visible;                                      if (isDetails)                                      {                                          title = GUIPropertyManager.GetProperty("#st_title").Trim();                                          DateTime releaseDate = DateTime.MinValue;                                            if (DateTime.TryParse(GUIPropertyManager.GetProperty("#st_releasedate").Trim()' out releaseDate))                                          {                                              year = releaseDate.Year.ToString();                                          }                                                                                                                           imdbid = GUIPropertyManager.GetProperty("#st_imdb");                                          if (imdbid == null) imdbid = string.Empty;                                            tmdbid = GUIPropertyManager.GetProperty("#st_tmdb");                                          if (tmdbid == null) imdbid = string.Empty;                                            if ((!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)) || imdbid.StartsWith("tt") || !string.IsNullOrEmpty(tmdbid))                                          {                                              if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                              if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          }                                          // set focus to next button so we dont go in a loop                                          GUIControl.FocusControl((int)ExternalPluginWindows.Showtimes' 42);                                      }                                      break;                              }
Missing Default,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following switch statement is missing a default case: switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      type = "movie";                                      title = GUIPropertyManager.GetProperty("#title").Trim();                                      year = GUIPropertyManager.GetProperty("#year").Trim();                                      imdbid = GUIPropertyManager.GetProperty("#imdbnumber").Trim();                                      tmdbid = (GUIPropertyManager.GetProperty("#tmdbnumber") ?? string.Empty).Trim();                                        MediaPortal.Util.FanArt.GetFanArtfilename(title' 0' out fanart);                                      if (fanart.ToLowerInvariant().Equals("unknown"))                                      {                                          string movieid = GUIPropertyManager.GetProperty("#movieid").Trim();                                          MediaPortal.Util.FanArt.GetFanArtfilename(movieid' 0' out fanart);                                      }                                                                            searchPeople = new SearchPeople();                                      string people = GUIPropertyManager.GetProperty("#cast").Trim();                                      if (people != string.Empty && people != "unknown")                                      {                                          // actors seperated by newlines                                          var peopleAndRoles = people.Split('\n').Select(s => s.Trim());                                            // each actor string also includes the role: {0} as {1} &#10;                                          // get the seperator from the localised string and then reverse the formatted string                                          string roleSepString = GUILocalizeStrings.Get(1320).Split(' ')[1].Trim();                                            foreach (var personAndRole in peopleAndRoles)                                          {                                              var personAndRoleStrings = personAndRole.Split(new string[] { string.Format(" {0} "' roleSepString) }' StringSplitOptions.None);                                              searchPeople.Actors.Add(personAndRoleStrings.First());                                          }                                      }                                        people = GUIPropertyManager.GetProperty("#director").Trim();                                      if (people != string.Empty && people != "unknown") searchPeople.Directors.AddRange(people.Split(''').Select(s => s.Trim()));                                        people = GUIPropertyManager.GetProperty("#credits").Trim();                                      if (people != string.Empty && people != "unknown")                                      {                                          var writers = people.Split(''').Select(s => s.Trim());                                          foreach(var writer in writers)                                          {                                              // remove the writer type e.g. (Story)' (Screenplay)                                              searchPeople.Writers.Add(writer.Split('(').First().Trim());                                          }                                      }                                        if (!string.IsNullOrEmpty(imdbid) || (!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)))                                      {                                          if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                      }                                        // Set focus to Play Button now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.VideoInfo' 2);                                      break;                              }
Missing Default,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following switch statement is missing a default case: switch (message.SenderControlId)                              {                                  case ((int)ExternalPluginControls.WatchList):                                  case ((int)ExternalPluginControls.CustomList):                                  case ((int)ExternalPluginControls.Rate):                                  case ((int)ExternalPluginControls.Shouts):                                  case ((int)ExternalPluginControls.RelatedItems):                                  case ((int)ExternalPluginControls.SearchBy):                                  case ((int)ExternalPluginControls.TraktMenu):                                      type = "movie";                                      updatePluginFilters = true;                                      title = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.title").Trim();                                      year = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.year").Trim();                                      imdbid = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.imdb_id").Trim();                                      fanart = GUIPropertyManager.GetProperty("#MovingPictures.SelectedMovie.backdropfullpath").Trim();                                      isWatched = GUIPropertyManager.GetProperty("#MovingPictures.UserMovieSettings.watched").Trim() != "0";                                        // get movie people from database                                      searchPeople = new SearchPeople();                                      if (TraktHelper.IsMovingPicturesAvailableAndEnabled)                                      {                                          int? movieID = null;                                          int iYear = 0; int.TryParse(year' out iYear);                                          if (MovingPictures.FindMovieID(title' iYear' imdbid' tmdbid.ToNullableInt32()' ref movieID))                                              MovingPictures.GetMoviePersonInfo(movieID' out searchPeople);                                      }                                                                            if (!string.IsNullOrEmpty(imdbid) || (!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(year)))                                      {                                          if (message.SenderControlId == (int)ExternalPluginControls.WatchList) validWatchListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.CustomList) validCustomListItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Rate) validRateItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.Shouts) validShoutItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems) validRelatedItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu) validTraktMenuItem = true;                                          if (message.SenderControlId == (int)ExternalPluginControls.SearchBy) validSearchItem = true;                                      }                                        // Set focus to Play Button now so we dont go in a loop                                      GUIControl.FocusControl((int)ExternalPluginWindows.MovingPictures' 6);                                      break;                              }
Missing Default,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following switch statement is missing a default case: switch (type)                  {                      case "movie":                          TraktLogger.Info("Showing rate dialog for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year' imdbid);                          GUIUtils.ShowRateDialog<TraktSyncMovieRated>(new TraktSyncMovieRated                          {                              Ids = new TraktMovieId { Imdb = imdbid.ToNullIfEmpty()' Tmdb = tmdbid.ToNullableInt32() }'                              Title = title'                              Year = year.ToNullableInt32()                          });                          break;                        case "series":                          TraktLogger.Info("Showing rate dialog for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year' showtvdbid);                          GUIUtils.ShowRateDialog<TraktSyncShowRated>(new TraktSyncShowRated                          {                              Ids = new TraktShowId { Tvdb = showtvdbid.ToNullableInt32()' Imdb = imdbid.ToNullIfEmpty() }'                              Title = title'                              Year = year.ToNullableInt32()                          });                          break;                        case "episode":                          TraktLogger.Info("Showing rate dialog for tv episode. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'' Episode TVDb ID = '{4}'"' title' year' season' episode' epTvdbId);                          GUIUtils.ShowRateDialog<TraktSyncEpisodeRated>(new TraktSyncEpisodeRated                          {                              Ids = new TraktEpisodeId { Tvdb = showtvdbid.ToNullableInt32() }'                              Number = episode.ToInt()'                              Season = season.ToInt()'                              RatedAt = DateTime.UtcNow.ToISO8601()                          });                          break;                  }
Missing Default,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following switch statement is missing a default case: switch (type)                  {                      #region movie                      case "movie":                          TraktLogger.Info("Displaying Shouts for {0}. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year' imdbid);                          TraktHelper.ShowMovieShouts(title' year' imdbid' isWatched' fanart);                          break;                      #endregion                      #region episode                      case "episode":                          TraktLogger.Info("Displaying Shouts for {0}. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year' showtvdbid);                          TraktHelper.ShowEpisodeShouts(title' showtvdbid' season' episode' isWatched' fanart);                          break;                      #endregion                      #region series                      case "series":                          TraktLogger.Info("Displaying Shouts for {0}. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year' showtvdbid);                          TraktHelper.ShowTVShowShouts(title' showtvdbid.ToNullableInt32()' null' isWatched' fanart);                          break;                      #endregion                  }
Missing Default,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following switch statement is missing a default case: switch (type)                  {                      #region movie                      case "movie":                          TraktLogger.Info("Displaying Related Movies for {0}. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year' imdbid);                          TraktHelper.ShowRelatedMovies(title' year' imdbid);                          break;                      #endregion                      #region series                      case "series":                          TraktLogger.Info("Displaying Related Shows for {0}. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year' showtvdbid);                          TraktHelper.ShowRelatedShows(title' showtvdbid);                          break;                      #endregion                  }
Missing Default,TraktPlugin,TraktPlugin,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following switch statement is missing a default case: switch (type)                  {                      case "movie":                          GUICommon.ShowTraktExtMovieMenu(title' year' imdbid' isWatched' fanart' searchPeople' false);                          break;                        case "series":                          GUICommon.ShowTraktExtTVShowMenu(title' year' showtvdbid' imdbid' fanart' searchPeople' false);                          break;                        case "episode":                          GUICommon.ShowTraktExtEpisodeMenu(title' year' season' episode' showtvdbid' isWatched' fanart' searchPeople' false);                          break;                  }
Missing Default,TraktPlugin,TraktSettings,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following switch statement is missing a default case: switch (currentSettingsVersion)                      {                          case 0:                              xmlreader.RemoveEntry(cTrakt' cLastActivityLoad);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingMovies);                              xmlreader.RemoveEntry(cTrakt' cLastTrendingShows);                              xmlreader.RemoveEntry(cTrakt' cLastStatistics);                              currentSettingsVersion++;                              break;                            case 1:                              // trailers plugin now supports tvshows' seasons and episodes.                              xmlreader.SetValueAsBool(cTrakt' "UseTrailersPlugin"' true);                              currentSettingsVersion++;                              break;                            case 2:                              // Only use Trailers plugin now for Trailers functionality.                              xmlreader.RemoveEntry(cTrakt' "UseTrailersPlugin");                              xmlreader.RemoveEntry(cTrakt' "DefaultTVShowTrailerSite");                              xmlreader.RemoveEntry(cTrakt' "DefaultMovieTrailerSite");                                         // Remove old activity settings                              xmlreader.RemoveEntry(cTrakt' "ShowCommunityActivity");                              xmlreader.RemoveEntry(cTrakt' "IncludeMeInFriendsActivity");                                // Remove old category/filter node ids for MovingPictures (not needed)                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesCategoryId");                              xmlreader.RemoveEntry(cTrakt' "MovingPicturesFilterId");                                currentSettingsVersion++;                              break;                            case 3:                              // Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordRecordings");                              xmlreader.RemoveEntry(cTrakt' "ForTheRecordTVLive");                              xmlreader.RemoveEntry(cTrakt' "MyAnime");                                // Clear existing passwords as they're no longer hashed in new API v2                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // Remove Advanced Rating setting' there is only one now                              xmlreader.RemoveEntry(cTrakt' "ShowAdvancedRatingsDialog");                                // Remove SkippedMovies and AlreadyExistMovies as data structures changed                              xmlreader.RemoveEntry(cTrakt' "SkippedMovies");                              xmlreader.RemoveEntry(cTrakt' "AlreadyExistMovies");                                // Remove old show collection cache                              xmlreader.RemoveEntry(cTrakt' "ShowsInCollection");                                // Reset some defaults                              xmlreader.RemoveEntry(cTrakt' cSyncRatings);                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardTrendingPollInterval);                              xmlreader.RemoveEntry(cTrakt' cDashboardLoadDelay);                              xmlreader.RemoveEntry(cTrakt' cShowRateDlgForPlaylists);                              xmlreader.RemoveEntry(cTrakt' cSearchTypes);                                // Remove any persisted data that has changed with with new API v2                              try                              {                                  if (File.Exists(cLastActivityFileCache)) File.Delete(cLastActivityFileCache);                                  if (File.Exists(cLastTrendingShowFileCache)) File.Delete(cLastTrendingShowFileCache);                                  if (File.Exists(cLastTrendingMovieFileCache)) File.Delete(cLastTrendingMovieFileCache);                                  if (File.Exists(cLastStatisticsFileCache)) File.Delete(cLastStatisticsFileCache);                                    // Remove old artwork - filenames have changed                                  string imagePath = Config.GetFolder(Config.Dir.Thumbs) + "\\Trakt";                                  if (Directory.Exists(imagePath))                                  {                                      Directory.Delete(imagePath' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                                currentSettingsVersion++;                              break;                            case 4:                              try                              {                                  // Fix bad upgrade from previous release                                  string dashboardPersistence = Config.GetFolder(Config.Dir.Config) + "\\Trakt\\Dashboard";                                  if (Directory.Exists(dashboardPersistence))                                  {                                      Directory.Delete(dashboardPersistence' true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 5:                              // Clear existing passwords' change of encryption/decryption technique                              xmlreader.RemoveEntry(cTrakt' "Password");                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                              currentSettingsVersion++;                              break;                            case 6:                              // Save Sync Interval in Hours from Milliseconds                              int syncTimerLength = xmlreader.GetValueAsInt(cTrakt' cSyncTimerLength' 24);                              if (syncTimerLength > 24)                              {                                  // requires upgrade                                  xmlreader.SetValue(cTrakt' cSyncTimerLength' syncTimerLength / 3600000);                              }                              currentSettingsVersion++;                              break;                            case 7:                              // upgrade last activity view                              xmlreader.RemoveEntry(cTrakt' cActivityStreamView);                                                            // remove last paused item processed - stored in last activities                              xmlreader.RemoveEntry(cTrakt' "LastPausedItemProcessed");                                currentSettingsVersion++;                              break;                            case 8:                              // cleanup cached likes' API changed to include a user object for lists                              // i.e. the user that owns the list                              try                              {                                  var folderName = Path.Combine(Config.GetFolder(Config.Dir.Config)' @"Trakt");                                    var matches = Directory.GetFiles(folderName' "Liked.json"' SearchOption.AllDirectories);                                  foreach (string file in matches)                                  {                                      File.Delete(file);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);                              }                              currentSettingsVersion++;                              break;                            case 9:                              // remove old thumbs folder                              try                              {                                  DirectoryInfo di = new DirectoryInfo(Path.Combine(Config.GetFolder(Config.Dir.Thumbs)' @"Trakt"));                                    foreach (FileInfo file in di.GetFiles())                                  {                                      file.Delete();                                  }                                  foreach (DirectoryInfo dir in di.GetDirectories())                                  {                                      dir.Delete(true);                                  }                              }                              catch (Exception e)                              {                                  TraktLogger.Error("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);                              }                                // update default sizes for requests so we dont hit any limits from TMDb by default                              xmlreader.SetValue(cTrakt' cMaxAnticipatedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxAnticipatedShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxPopularShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxTrendingShowsRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedEpisodesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserWatchedMoviesRequest' 40);                              xmlreader.SetValue(cTrakt' cMaxUserCommentsRequest' 40);                                currentSettingsVersion++;                              break;                          case 10:                              // remove old authentication info                              xmlreader.RemoveEntry(cTrakt' cUsername);                              xmlreader.RemoveEntry(cTrakt' cUserLogins);                                // keep password for mp-tvseries check when downloading community rating                              // future version will only check for user access token                              //xmlreader.RemoveEntry(cTrakt' "Password");                                currentSettingsVersion++;                              break;                          case 11:                              // new settings for the dashboard activity filter                              xmlreader.RemoveEntry(cTrakt' cDashboardActivityFilter);                              currentSettingsVersion++;                                // new tv calendar views                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarStartDate");                              xmlreader.RemoveEntry(cTrakt' "DefaultCalendarView");                              break;                      }
Missing Default,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,GetCalendarMovies,The following switch statement is missing a default case: switch (CurrentCalendar)              {                  case CalendarType.UserMovies:                      result = TraktAPI.TraktAPI.GetCalendarUserMovies(GetStartDate().ToString("yyyy-MM-dd")' GetDaysForward());                      break;                  case CalendarType.UserDVDs:                      result = TraktAPI.TraktAPI.GetCalendarUserDVDs(GetStartDate().ToString("yyyy-MM-dd")' GetDaysForward());                      break;                  case CalendarType.AllMovies:                      result = TraktAPI.TraktAPI.GetCalendarMovies(GetStartDate().ToString("yyyy-MM-dd")' GetDaysForward());                      break;                  case CalendarType.AllDVDs:                      result = TraktAPI.TraktAPI.GetCalendarDVDs(GetStartDate().ToString("yyyy-MM-dd")' GetDaysForward());                      break;              }
Missing Default,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)              {                  case Action.ActionType.ACTION_PLAY:                  case Action.ActionType.ACTION_MUSIC_PLAY:                      CheckAndPlayMovie(false);                      break;                    case Action.ActionType.ACTION_PREVIOUS_MENU:                      break;                    case Action.ActionType.ACTION_MOVE_UP:                  case Action.ActionType.ACTION_PAGE_UP:                      LastMoved = FacadeMovement.Up;                      break;                    case Action.ActionType.ACTION_MOVE_DOWN:                  case Action.ActionType.ACTION_PAGE_DOWN:                      LastMoved = FacadeMovement.Down;                      break;              }
Missing Default,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,GetStartDate,The following switch statement is missing a default case: switch (CurrentStartDate)              {                  case StartDates.Today:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(1' 0' 0' 0));                      break;                  case StartDates.Yesterday:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(2' 0' 0' 0));                      break;                  case StartDates.OneWeekAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(8' 0' 0' 0));                      break;                  case StartDates.TwoWeeksAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(15' 0' 0' 0));                      break;                  case StartDates.OneMonthAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(31' 0' 0' 0));                      break;              }
Missing Default,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,GetCurrentLocalStartDate,The following switch statement is missing a default case: switch (CurrentStartDate)              {                  case StartDates.Today:                      startDate = DateTime.Today;                      break;                  case StartDates.Yesterday:                      startDate = DateTime.Today.Subtract(new TimeSpan(1' 0' 0' 0));                      break;                  case StartDates.OneWeekAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(7' 0' 0' 0));                      break;                  case StartDates.TwoWeeksAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(14' 0' 0' 0));                      break;                  case StartDates.OneMonthAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(30' 0' 0' 0));                      break;              }
Missing Default,TraktPlugin.GUI,GUICalendarMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarMovies.cs,SetCurrentView,The following switch statement is missing a default case: switch (CurrentCalendar)              {                  case CalendarType.UserMovies:                      GUICommon.SetProperty("#Trakt.CurrentView"' Translation.CalendarMyMovies);                      break;                  case CalendarType.UserDVDs:                      GUICommon.SetProperty("#Trakt.CurrentView"' Translation.CalendarMyDVDs);                      break;                  case CalendarType.AllMovies:                      GUICommon.SetProperty("#Trakt.CurrentView"' Translation.CalendarAllMovies);                      break;                  case CalendarType.AllDVDs:                      GUICommon.SetProperty("#Trakt.CurrentView"' Translation.CalendarAllDVDs);                      break;              }
Missing Default,TraktPlugin.GUI,GUICreditsMovie,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsMovie.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)              {                  case ((int)ContextMenuItem.ChangeLayout):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;              }
Missing Default,TraktPlugin.GUI,GUICreditsShow,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsShow.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)              {                  case ((int)ContextMenuItem.ChangeLayout):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;              }
Missing Default,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetLayoutTranslation,The following switch statement is missing a default case: switch (layout)              {                  case GUIFacadeControl.Layout.List:                      strLine = GUILocalizeStrings.Get(101);                      break;                  case GUIFacadeControl.Layout.SmallIcons:                      strLine = GUILocalizeStrings.Get(100);                      break;                  case GUIFacadeControl.Layout.LargeIcons:                      strLine = GUILocalizeStrings.Get(417);                      break;                  case GUIFacadeControl.Layout.Filmstrip:                      strLine = GUILocalizeStrings.Get(733);                      break;              }
Missing Default,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)              {                  case ((int)TraktMenuItems.Rate):                      TraktLogger.Info("Displaying rate dialog for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString()' imdbid.ToLogString());                      var movie = new TraktSyncMovieRated                          {                              Ids = new TraktMovieId { Imdb = imdbid.ToNullIfEmpty() }'                              Title = title'                              Year = year.ToNullableInt32()                          };                        int rating = GUIUtils.ShowRateDialog<TraktSyncMovieRated>(movie);                                            // update local databases                      if (rating >= 0)                      {                          switch (GUIWindowManager.ActiveWindow)                          {                              case (int)ExternalPluginWindows.MovingPictures:                                  TraktHandlers.MovingPictures.SetUserRating(rating);                                  break;                              case (int)ExternalPluginWindows.MyFilms:                                  TraktHandlers.MyFilmsHandler.SetUserRating(rating' title' year.ToNullableInt32()' imdbid.ToNullIfEmpty());                                  break;                          }                            if (rating == 0)                              TraktCache.RemoveMovieFromRatings(movie);                          else                              TraktCache.AddMovieToRatings(movie' rating);                      }                      break;                    case ((int)TraktMenuItems.Shouts):                      TraktLogger.Info("Displaying Shouts for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString()' imdbid.ToLogString());                      TraktHelper.ShowMovieShouts(imdbid' title' year' fanart);                      break;                    case ((int)TraktMenuItems.Related):                      TraktLogger.Info("Displaying Related Movies for. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString()' imdbid.ToLogString());                      TraktHelper.ShowRelatedMovies(title' year' imdbid);                      break;                    case ((int)TraktMenuItems.AddToWatchList):                      TraktLogger.Info("Adding movie to Watchlist. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString()' imdbid.ToLogString());                      TraktHelper.AddMovieToWatchList(title' year' imdbid' true);                      break;                    case ((int)TraktMenuItems.AddToCustomList):                      TraktLogger.Info("Adding movie to Custom List. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString()' imdbid.ToLogString());                      TraktHelper.AddRemoveMovieInUserList(title' year' imdbid' false);                      break;                    case ((int)TraktMenuItems.Cast):                      TraktLogger.Info("Displaying Cast for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString()' imdbid.ToLogString());                      GUICreditsMovie.Movie = null;                      GUICreditsMovie.Type = GUICreditsMovie.CreditType.Cast;                      GUICreditsMovie.Fanart = fanart;                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsMovie' imdbid);                      break;                        case ((int)TraktMenuItems.Crew):                      TraktLogger.Info("Displaying Crew for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString()' imdbid.ToLogString());                      GUICreditsMovie.Movie = null;                      GUICreditsMovie.Type = GUICreditsMovie.CreditType.Crew;                      GUICreditsMovie.Fanart = fanart;                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsMovie' imdbid);                      break;                    case ((int)TraktMenuItems.SearchBy):                      ShowSearchByMenu(people' title' fanart);                      break;                    case ((int)TraktMenuItems.UserProfile):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.UserProfile);                      break;                    case ((int)TraktMenuItems.Network):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.Network);                      break;                    case ((int)TraktMenuItems.Recommendations):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecommendationsMovies);                      break;                    case ((int)TraktMenuItems.Trending):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.TrendingMovies);                      break;                    case ((int)TraktMenuItems.Popular):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.PopularMovies);                      break;                    case ((int)TraktMenuItems.Anticipated):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.AnticipatedMovies);                      break;                    case ((int)TraktMenuItems.WatchList):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListMovies);                      break;                    case ((int)TraktMenuItems.Lists):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CustomLists);                      break;              }
Missing Default,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The following switch statement is missing a default case: switch (GUIWindowManager.ActiveWindow)                          {                              case (int)ExternalPluginWindows.MovingPictures:                                  TraktHandlers.MovingPictures.SetUserRating(rating);                                  break;                              case (int)ExternalPluginWindows.MyFilms:                                  TraktHandlers.MyFilmsHandler.SetUserRating(rating' title' year.ToNullableInt32()' imdbid.ToNullIfEmpty());                                  break;                          }
Missing Default,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)              {                  case ((int)TraktMenuItems.Rate):                      TraktLogger.Info("Displaying rate dialog for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString()' tvdbid.ToLogString());                      var show = new TraktSyncShowRated                      {                          Ids = new TraktShowId { Tvdb = tvdbid.ToNullableInt32()' Imdb = imdbid.ToNullIfEmpty() }'                          Title = title'                          Year = year.ToNullableInt32()                      };                      int rating = GUIUtils.ShowRateDialog<TraktSyncShowRated>(show);                        // update local databases                      if (rating >= 0)                      {                          switch (GUIWindowManager.ActiveWindow)                          {                              case (int)ExternalPluginWindows.TVSeries:                                  TraktHandlers.TVSeries.SetShowUserRating(rating);                                  break;                          }                            if (rating == 0)                              TraktCache.RemoveShowFromRatings(show);                          else                              TraktCache.AddShowToRatings(show' rating);                      }                      break;                    case ((int)TraktMenuItems.Shouts):                      TraktLogger.Info("Displaying Shouts for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'' IMDb ID = '{3}'"' title' year.ToLogString()' tvdbid.ToLogString()' imdbid.ToLogString());                      TraktHelper.ShowTVShowShouts(title' year.ToNullableInt32()' tvdbid.ToNullableInt32()' null' imdbid' false' fanart);                      break;                    case ((int)TraktMenuItems.Related):                      TraktLogger.Info("Displaying Related shows for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString()' tvdbid.ToLogString());                      TraktHelper.ShowRelatedShows(title' year.ToNullableInt32()' tvdbid.ToNullableInt32()' imdbid.ToNullIfEmpty()' null' null);                      break;                    case ((int)TraktMenuItems.ShowSeasonInfo):                      TraktLogger.Info("Displaying Season Info for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString()' tvdbid.ToLogString());                      var showSummary = new TraktShowSummary                      {                          Ids = new TraktShowId                          {                              Imdb = imdbid.ToNullIfEmpty()'                              Tvdb = tvdbid.ToNullableInt32()                          }'                          Title = title'                          Year = year.ToNullableInt32()                      };                      GUIShowSeasons.Fanart = fanart;                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' showSummary.ToJSON());                      break;                    case ((int)TraktMenuItems.AddToWatchList):                      TraktLogger.Info("Adding tv show to Watchlist. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString()' tvdbid.ToLogString());                      TraktHelper.AddShowToWatchList(title' year.ToNullableInt32()' tvdbid.ToNullableInt32()' imdbid.ToNullIfEmpty()' null' null);                      break;                    case ((int)TraktMenuItems.AddToCustomList):                      TraktLogger.Info("Adding tv show to Custom List. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString()' tvdbid.ToLogString());                      TraktHelper.AddRemoveShowInUserList(title' year' tvdbid' false);                      break;                    case ((int)TraktMenuItems.Cast):                      TraktLogger.Info("Displaying Cast for show. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString()' imdbid.ToLogString());                      GUICreditsShow.Show = null;                      GUICreditsShow.Type = GUICreditsShow.CreditType.Cast;                      GUICreditsShow.Fanart = fanart;                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsShow' imdbid);                      break;                    case ((int)TraktMenuItems.Crew):                      TraktLogger.Info("Displaying Crew for show. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString()' imdbid.ToLogString());                      GUICreditsShow.Show = null;                      GUICreditsShow.Type = GUICreditsShow.CreditType.Crew;                      GUICreditsShow.Fanart = fanart;                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsShow' imdbid);                      break;                  case ((int)TraktMenuItems.SearchBy):                      ShowSearchByMenu(people' title' fanart);                      break;                    case ((int)TraktMenuItems.UserProfile):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.UserProfile);                      break;                    case ((int)TraktMenuItems.Network):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.Network);                      break;                    case ((int)TraktMenuItems.Calendar):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CalendarTV);                      break;                    case ((int)TraktMenuItems.Recommendations):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecommendationsShows);                      break;                    case ((int)TraktMenuItems.Trending):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.TrendingShows);                      break;                    case ((int)TraktMenuItems.Popular):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.PopularShows);                      break;                    case ((int)TraktMenuItems.Anticipated):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.AnticipatedShows);                        break;                  case ((int)TraktMenuItems.WatchList):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListShows);                      break;                    case ((int)TraktMenuItems.Lists):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CustomLists);                      break;              }
Missing Default,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The following switch statement is missing a default case: switch (GUIWindowManager.ActiveWindow)                          {                              case (int)ExternalPluginWindows.TVSeries:                                  TraktHandlers.TVSeries.SetShowUserRating(rating);                                  break;                          }
Missing Default,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)              {                  case ((int)TraktMenuItems.Rate):                      TraktLogger.Info("Displaying rate dialog for tv season. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'' Season = '{3}'"' title' year.ToLogString()' tvdbid.ToLogString()' season);                      GUIUtils.ShowRateDialog<TraktSyncSeasonRatedEx>(new TraktSyncSeasonRatedEx                      {                          Ids = new TraktShowId { Tvdb = tvdbid.ToNullableInt32()' Imdb = imdbid.ToNullIfEmpty() }'                          Title = title'                          Year = year.ToNullableInt32()'                          Seasons = new List<TraktSyncSeasonRatedEx.Season>                          {                              new TraktSyncSeasonRatedEx.Season                              {                                  Number = seasonNumber'                                  RatedAt = DateTime.UtcNow.ToISO8601()                              }                          }                      });                      break;                    case ((int)TraktMenuItems.Shouts):                      TraktLogger.Info("Displaying Shouts for tv season. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'' IMDb ID = '{3}'' Season = '{4}'"' title' year.ToLogString()' tvdbid.ToLogString()' imdbid.ToLogString()' season);                      TraktHelper.ShowTVSeasonShouts(title' year.ToNullableInt32()' tvdbid.ToNullableInt32()' null' imdbid' seasonNumber' false' fanart);                      break;                    case ((int)TraktMenuItems.AddToWatchList):                      TraktLogger.Info("Adding tv season to Watchlist. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}' Season = '{3}'"' title' year.ToLogString()' tvdbid.ToLogString()' season);                      TraktHelper.AddSeasonToWatchList(title' year.ToNullableInt32()' seasonNumber' tvdbid.ToNullableInt32()' imdbid.ToNullIfEmpty()' null' null);                      break;                    case ((int)TraktMenuItems.AddToCustomList):                      TraktLogger.Info("Adding tv season to Custom List. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'' Season = '{3}'"' title' year.ToLogString()' tvdbid.ToLogString()' season);                      //TraktHelper.AddRemoveSeasonInUserList(title' year' tvdbid' false);                      break;                    case ((int)TraktMenuItems.UserProfile):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.UserProfile);                      break;                    case ((int)TraktMenuItems.Network):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.Network);                      break;                    case ((int)TraktMenuItems.Calendar):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CalendarTV);                      break;                    case ((int)TraktMenuItems.Recommendations):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecommendationsShows);                      break;                    case ((int)TraktMenuItems.Trending):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.TrendingShows);                      break;                    case ((int)TraktMenuItems.WatchList):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListShows);                      break;                    case ((int)TraktMenuItems.Lists):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CustomLists);                      break;              }
Missing Default,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)              {                  case ((int)TraktMenuItems.Rate):                      TraktLogger.Info("Displaying rate dialog for tv episode. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'' Show ID = '{4}'' Episode ID = '{5}'"' title' year.ToLogString()' season' episode' tvdbid.ToLogString()' episodetvdbid.ToLogString());                      var show = new TraktSyncShowRatedEx                      {                          Ids = new TraktShowId { Tvdb = tvdbid.ToNullableInt32()' Imdb = imdbid.ToNullIfEmpty() }'                          Title = title'                          Year = year.ToNullableInt32()'                          Seasons = new List<TraktSyncShowRatedEx.Season>                          {                              new TraktSyncShowRatedEx.Season                              {                                  Number = season.ToInt()'                                  Episodes = new List<TraktSyncShowRatedEx.Season.Episode>                                  {                                      new TraktSyncShowRatedEx.Season.Episode                                      {                                          Number = episode.ToInt()'                                          RatedAt = DateTime.UtcNow.ToISO8601()                                      }                                  }                              }                          }                      };                      int rating = GUIUtils.ShowRateDialog<TraktSyncShowRatedEx>(show);                        // update local databases                      if (rating >= 0)                      {                          switch (GUIWindowManager.ActiveWindow)                          {                              case (int)ExternalPluginWindows.TVSeries:                                  TraktHandlers.TVSeries.SetEpisodeUserRating(rating);                                  break;                          }                      }                      break;                    case ((int)TraktMenuItems.Shouts):                      TraktLogger.Info("Displaying Shouts for tv episode. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'"' title' year.ToLogString()' season' episode);                      TraktHelper.ShowEpisodeShouts(title' year.ToNullableInt32()' tvdbid.ToNullableInt32()' null' imdbid.ToNullIfEmpty()' season.ToInt()' episode.ToInt()' isWatched' fanart);                      break;                    case ((int)TraktMenuItems.AddToWatchList):                      TraktLogger.Info("Adding tv episode to Watchlist. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'"' title' year.ToLogString()' season' episode);                      TraktHelper.AddEpisodeToWatchList(title' season.ToInt()' episode.ToInt()' tvdbid.ToNullableInt32()' null' null' null);                      break;                    case ((int)TraktMenuItems.AddToCustomList):                      TraktLogger.Info("Adding tv episode to Custom List. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'' Episode ID = '{4}'"' title' year.ToLogString()' season' episode' episodetvdbid.ToLogString());                      if (string.IsNullOrEmpty(episodetvdbid))                      {                          TraktHelper.AddRemoveEpisodeInUserList(new TraktEpisode { Ids = new TraktEpisodeId { Tvdb = episodetvdbid.ToNullableInt32() } }' false);                      }                      break;                    case ((int)TraktMenuItems.SearchBy):                      ShowSearchByMenu(people' title' fanart);                      break;                    case ((int)TraktMenuItems.UserProfile):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.UserProfile);                      break;                    case ((int)TraktMenuItems.Calendar):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CalendarTV);                      break;                    case ((int)TraktMenuItems.Network):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.Network);                      break;                    case ((int)TraktMenuItems.WatchList):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListEpisodes);                      break;                    case ((int)TraktMenuItems.Lists):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CustomLists);                      break;              }
Missing Default,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The following switch statement is missing a default case: switch (GUIWindowManager.ActiveWindow)                          {                              case (int)ExternalPluginWindows.TVSeries:                                  TraktHandlers.TVSeries.SetEpisodeUserRating(rating);                                  break;                          }
Missing Default,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowMovieFiltersMenu,The following switch statement is missing a default case: switch ((Filters)Enum.Parse(typeof(Filters)' item.ItemID' true))                  {                      case Filters.Watched:                          TraktSettings.TrendingMoviesHideWatched = !TraktSettings.TrendingMoviesHideWatched;                          break;                      case Filters.Watchlisted:                          TraktSettings.TrendingMoviesHideWatchlisted = !TraktSettings.TrendingMoviesHideWatchlisted;                          break;                      case Filters.Collected:                          TraktSettings.TrendingMoviesHideCollected = !TraktSettings.TrendingMoviesHideCollected;                          break;                      case Filters.Rated:                          TraktSettings.TrendingMoviesHideRated = !TraktSettings.TrendingMoviesHideRated;                          break;                  }
Missing Default,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTVShowFiltersMenu,The following switch statement is missing a default case: switch ((Filters)Enum.Parse(typeof(Filters)' item.ItemID' true))                  {                      case Filters.Watched:                          TraktSettings.TrendingShowsHideWatched = !TraktSettings.TrendingShowsHideWatched;                          break;                      case Filters.Watchlisted:                          TraktSettings.TrendingShowsHideWatchlisted = !TraktSettings.TrendingShowsHideWatchlisted;                          break;                      case Filters.Collected:                          TraktSettings.TrendingShowsHideCollected = !TraktSettings.TrendingShowsHideCollected;                          break;                      case Filters.Rated:                          TraktSettings.TrendingShowsHideRated = !TraktSettings.TrendingShowsHideRated;                          break;                  }
Missing Default,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityListItemTitle,The following switch statement is missing a default case: switch (action)              {                  case ActivityAction.watching:                      title = string.Format(Translation.ActivityWatching' userName' itemName);                      break;                    case ActivityAction.scrobble:                      if (activity.Plays() > 1)                      {                          title = string.Format(Translation.ActivityWatchedWithPlays' userName' itemName' activity.Plays());                      }                      else                      {                          title = string.Format(Translation.ActivityWatched' userName' itemName);                      }                      break;                    case ActivityAction.checkin:                      title = string.Format(Translation.ActivityCheckedIn' userName' itemName);                      break;                    case ActivityAction.seen:                      if (type == ActivityType.episode && activity.Episodes.Count > 1)                      {                          title = string.Format(Translation.ActivitySeenEpisodes' userName' activity.Episodes.Count' itemName);                      }                      else                      {                          title = string.Format(Translation.ActivitySeen' userName' itemName);                      }                      break;                    case ActivityAction.collection:                      if (type == ActivityType.episode && activity.Episodes.Count > 1)                      {                          title = string.Format(Translation.ActivityCollectedEpisodes' userName' activity.Episodes.Count' itemName);                      }                      else                      {                          title = string.Format(Translation.ActivityCollected' userName' itemName);                      }                      break;                    case ActivityAction.rating:                      title = string.Format(Translation.ActivityRatingAdvanced' userName' itemName' activity.Rating);                      break;                    case ActivityAction.watchlist:                      if (view != ActivityView.me)                      {                          title = string.Format(Translation.ActivityWatchlist' userName' itemName);                      }                      else                      {                          title = string.Format(Translation.ActivityYourWatchlist' userName' itemName);                      }                      break;                    case ActivityAction.review:                      title = string.Format(Translation.ActivityReview' userName' itemName);                      break;                    case ActivityAction.shout:                      title = string.Format(Translation.ActivityShouts' userName' itemName);                      break;                    case ActivityAction.pause:                      title = string.Format(Translation.ActivityPaused' userName' itemName' Math.Round(activity.Progress' 0));                      break;                    case ActivityAction.created: // created list                      title = string.Format(Translation.ActivityCreatedList' userName' itemName);                      break;                    case ActivityAction.updated: // updated list                      if (activity.List.ItemCount == 0)                      {                          title = string.Format(Translation.ActivityUpdatedList' userName' itemName);                      }                      else if (activity.List.ItemCount == 1)                      {                          title = string.Format(Translation.ActivityUpdatedListWithItemCountSingular' userName' itemName' 1);                      }                      else                      {                          title = string.Format(Translation.ActivityUpdatedListWithItemCount' userName' itemName' activity.List.ItemCount);                      }                      break;                    case ActivityAction.item_added: // added item to list                      title = string.Format(Translation.ActivityAddToList' userName' itemName' activity.List.Name);                      break;                    case ActivityAction.like:                      if (type == ActivityType.comment)                      {                          title = string.Format(Translation.ActivityLikedComment' userName' activity.Shout.User.Username' itemName);                      }                      else if (type == ActivityType.list)                      {                          title = string.Format(Translation.ActivityLikedList' userName' itemName);                      }                      break;                  case ActivityAction.hide_calendar:                      title = string.Format(Translation.ActivityHidCalendarItem' itemName);                      break;                  case ActivityAction.hide_recommendations:                      title = string.Format(Translation.ActivityHidRecommendation' itemName);                      break;                  case ActivityAction.hide_progress_collected:                      title = string.Format(Translation.ActivityHidProgressCollection' itemName);                      break;                  case ActivityAction.hide_progress_watched:                      title = string.Format(Translation.ActivityHidProgressWatched' itemName);                      break;              }
Missing Default,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityItemName,The following switch statement is missing a default case: switch (type)                  {                      case ActivityType.episode:                          if (action == ActivityAction.seen || action == ActivityAction.collection)                          {                              if (activity.Episodes.Count > 1)                              {                                  // just return show name                                  name = activity.Show.Title;                              }                              else                              {                                  //  get the first and only item in collection of episodes                                  string episodeIndex = activity.Episodes.First().Number.ToString();                                  string seasonIndex = activity.Episodes.First().Season.ToString();                                  string episodeName = activity.Episodes.First().Title;                                    if (!string.IsNullOrEmpty(episodeName))                                      episodeName = string.Format(" - {0}"' episodeName);                                    name = string.Format("{0} - {1}x{2}{3}"' activity.Show.Title' seasonIndex' episodeIndex' episodeName);                              }                          }                          else                          {                              string episodeName = activity.Episode.Title;                                if (!string.IsNullOrEmpty(episodeName))                                  episodeName = string.Format(" - {0}"' episodeName);                                name = string.Format("{0} - {1}x{2}{3}"' activity.Show.Title' activity.Episode.Season.ToString()' activity.Episode.Number.ToString()' episodeName);                          }                          break;                        case ActivityType.show:                          name = activity.Show.Title;                          break;                        case ActivityType.season:                          name = string.Format("{0} - {1} {2}"' activity.Show.Title' Translation.Season' activity.Season.Number);                          break;                        case ActivityType.movie:                          name = string.Format("{0} ({1})"' activity.Movie.Title' activity.Movie.Year);                          break;                        case ActivityType.person:                          name = string.Format("{0}"' activity.Person.Name);                          break;                        case ActivityType.list:                          if (action == ActivityAction.item_added)                          {                              // return the name of the item added to the list                              switch (activity.ListItem.Type)                              {                                  case "show":                                      name = activity.ListItem.Show.Title;                                      break;                                    case "season":                                      name = string.Format("{0} - {1} {2}"' activity.ListItem.Show.Title' Translation.Season' activity.ListItem.Season.Number);                                      break;                                    case "episode":                                      string episodeIndex = activity.ListItem.Episode.Number.ToString();                                      string seasonIndex = activity.ListItem.Episode.Season.ToString();                                      string episodeName = activity.ListItem.Episode.Title;                                        if (string.IsNullOrEmpty(episodeName))                                          episodeName = string.Format("{0} {1}"' Translation.Episode' episodeIndex);                                        name = string.Format("{0} - {1}x{2} - {3}"' activity.ListItem.Show.Title' seasonIndex' episodeIndex' episodeName);                                      break;                                    case "movie":                                      name = string.Format("{0} ({1})"' activity.ListItem.Movie.Title' activity.ListItem.Movie.Year);                                      break;                                    case "person":                                      name = string.Format("{0}"' activity.Person.Name);                                      break;                                }                          }                          else                          {                              // return the list name                              name = activity.List.Name;                          }                          break;                        case ActivityType.comment:                          name = activity.Shout.Text.Truncate(30);                          break;                  }
Missing Default,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityItemName,The following switch statement is missing a default case: switch (activity.ListItem.Type)                              {                                  case "show":                                      name = activity.ListItem.Show.Title;                                      break;                                    case "season":                                      name = string.Format("{0} - {1} {2}"' activity.ListItem.Show.Title' Translation.Season' activity.ListItem.Season.Number);                                      break;                                    case "episode":                                      string episodeIndex = activity.ListItem.Episode.Number.ToString();                                      string seasonIndex = activity.ListItem.Episode.Season.ToString();                                      string episodeName = activity.ListItem.Episode.Title;                                        if (string.IsNullOrEmpty(episodeName))                                          episodeName = string.Format("{0} {1}"' Translation.Episode' episodeIndex);                                        name = string.Format("{0} - {1}x{2} - {3}"' activity.ListItem.Show.Title' seasonIndex' episodeIndex' episodeName);                                      break;                                    case "movie":                                      name = string.Format("{0} ({1})"' activity.ListItem.Movie.Title' activity.ListItem.Movie.Year);                                      break;                                    case "person":                                      name = string.Format("{0}"' activity.Person.Name);                                      break;                                }
Missing Default,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckRatingOnMovie,The following switch statement is missing a default case: switch (CurrentMovie.Certification)              {                  case "R":                      if (allowedRating == "R") return true;                      break;                    case "PG-13":                      if (allowedRating == "R")       return true;                      if (allowedRating == "PG-13")   return true;                      break;                    case "PG":                      if (allowedRating == "R")       return true;                      if (allowedRating == "PG-13")   return true;                      if (allowedRating == "PG")      return true;                      break;                    case "G":                      if (allowedRating == "R")       return true;                      if (allowedRating == "PG-13")   return true;                      if (allowedRating == "PG")      return true;                      if (allowedRating == "G")       return true;                      break;              }
Missing Default,TraktPlugin.GUI,GUICommon,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckRatingOnShow,The following switch statement is missing a default case: switch (CurrentShow.Certification)              {                  case "M":                      if (allowedRating == "M") return true;                      break;                    case "TV-14":                      if (allowedRating == "M")       return true;                      if (allowedRating == "TV-14")   return true;                      break;                    case "TV-PG":                      if (allowedRating == "M")       return true;                      if (allowedRating == "TV-14")   return true;                      if (allowedRating == "TV-PG")   return true;                      break;                    case "TV-G":                      if (allowedRating == "M")       return true;                      if (allowedRating == "TV-14")   return true;                      if (allowedRating == "TV-PG")   return true;                      if (allowedRating == "TV-G")    return true;                      break;                    case "TV-Y7":                      if (allowedRating == "M")       return true;                      if (allowedRating == "TV-14")   return true;                      if (allowedRating == "TV-PG")   return true;                      if (allowedRating == "TV-G")    return true;                      if (allowedRating == "TV-Y7")   return true;                      break;                    case "TV-Y":                      if (allowedRating == "M")       return true;                      if (allowedRating == "TV-14")   return true;                      if (allowedRating == "TV-PG")   return true;                      if (allowedRating == "TV-G")    return true;                      if (allowedRating == "TV-Y7")   return true;                      if (allowedRating == "TV-Y")    return true;                      break;              }
Missing Default,TraktPlugin.GUI,GUIListItems,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,GetSyncItems,The following switch statement is missing a default case: switch (listItem.Type)              {                  case "movie":                      var movie = new TraktMovie                      {                          Ids = new TraktMovieId { Trakt = listItem.Movie.Ids.Trakt }                      };                      syncItems.Movies = new List<TraktMovie>();                      syncItems.Movies.Add(movie);                      break;                    case "show":                      var show = new TraktShow                      {                          Ids = new TraktShowId { Trakt = listItem.Show.Ids.Trakt }                      };                      syncItems.Shows = new List<TraktShow>();                      syncItems.Shows.Add(show);                      break;                    case "season":                      var season = new TraktSeason                      {                          Ids = new TraktSeasonId { Trakt = listItem.Season.Ids.Trakt }                      };                      syncItems.Seasons = new List<TraktSeason>();                      syncItems.Seasons.Add(season);                      break;                    case "episode":                      var episode = new TraktEpisode                      {                          Ids = new TraktEpisodeId { Trakt = listItem.Episode.Ids.Trakt }                      };                      syncItems.Episodes = new List<TraktEpisode>();                      syncItems.Episodes.Add(episode);                      break;                    case "person":                      var person = new TraktPerson                      {                          Ids = new TraktPersonId { Trakt = listItem.Person.Ids.Trakt }                      };                      syncItems.People = new List<TraktPerson>();                      syncItems.People.Add(person);                      break;              }
Missing Default,TraktPlugin.GUI,GUIListItems,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,ListItemMatch,The following switch statement is missing a default case: switch (itemToMatch.Type)              {                  case "movie":                      if (currentItem.Movie == null) return false;                      return currentItem.Movie.Ids.Trakt == itemToMatch.Movie.Ids.Trakt;                                    case "show":                      if (currentItem.Show == null) return false;                      return currentItem.Show.Ids.Trakt == itemToMatch.Show.Ids.Trakt;                    case "season":                      if (currentItem.Season == null) return false;                      return currentItem.Season.Ids.Trakt == itemToMatch.Season.Ids.Trakt;                    case "episode":                      if (currentItem.Episode == null) return false;                      return currentItem.Episode.Ids.Trakt == itemToMatch.Episode.Ids.Trakt;                    case "person":                      if (currentItem.Person == null) return false;                      return currentItem.Person.Ids.Trakt == itemToMatch.Person.Ids.Trakt;              }
Missing Default,TraktPlugin.GUI,GUIListItems,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,GetListItemLabel,The following switch statement is missing a default case: switch (listItem.Type)              {                  case "movie":                      retValue = listItem.Movie.Title;                      break;                    case "show":                      retValue = listItem.Show.Title;                      break;                    case "season":                      retValue = string.Format("{0} {1} {2}"' listItem.Show.Title' GUI.Translation.Season' listItem.Season.Number);                      break;                    case "episode":                      retValue = string.Format("{0} - {1}x{2}{3}"' listItem.Show.Title' listItem.Episode.Season' listItem.Episode.Number' string.IsNullOrEmpty(listItem.Episode.Title) ? string.Empty : " - " + listItem.Episode.Title);                      break;                    case "person":                      retValue = listItem.Person.Name;                      break;              }
Missing Default,TraktPlugin.GUI,GUIListItems,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,GetListItemSecondLabel,The following switch statement is missing a default case: switch (listItem.Type)              {                  case "movie":                      retValue = listItem.Movie.Year == null ? "----" : listItem.Movie.Year.ToString();                      break;                    case "show":                      retValue = listItem.Show.Year == null ? "----" : listItem.Show.Year.ToString();                      break;                    case "season":                      retValue = string.Format("{0} {1}"' listItem.Season.EpisodeCount' Translation.Episodes);                      break;                    case "episode":                      retValue = listItem.Episode.FirstAired.FromISO8601().ToShortDateString();                      break;                    case "person":                      retValue = listItem.Person.Birthday;                      break;              }
Missing Default,TraktPlugin.GUI,GUIListItems,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,GetTmdbImage,The following switch statement is missing a default case: switch (listItem.Type)              {                  case "movie":                      images.MovieImages = new TmdbMovieImages { Id = listItem.Movie.Ids.Tmdb };                      break;                    case "show":                      images.ShowImages = new TmdbShowImages { Id = listItem.Show.Ids.Tmdb };                      break;                  case "season":                      images.ShowImages = new TmdbShowImages { Id = listItem.Show.Ids.Tmdb };                      images.SeasonImages = new TmdbSeasonImages                      {                          Id = listItem.Show.Ids.Tmdb'                          Season = listItem.Season.Number                      };                      break;                  case "episode":                      images.ShowImages = new TmdbShowImages { Id = listItem.Show.Ids.Tmdb };                      images.SeasonImages = new TmdbSeasonImages                      {                          Id = listItem.Show.Ids.Tmdb'                          Season = listItem.Episode.Season                      };                      break;                  case "person":                      images.PeopleImages = new TmdbPeopleImages { Id = listItem.Person.Ids.TmdbId };                      break;              }
Missing Default,TraktPlugin.GUI,GUIListItems,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnItemSelected,The following switch statement is missing a default case: switch (listItem.Type)              {                  case "movie":                      SelectedType = TraktItemType.movie;                      PublishMovieSkinProperties(listItem);                      string fanart = TmdbCache.GetMovieBackdropFilename((item as GUICustomListItem).Images.MovieImages);                      if (!string.IsNullOrEmpty(fanart))                      {                          GUIImageHandler.LoadFanart(backdrop' fanart);                      }                      break;                    case "show":                      SelectedType = TraktItemType.show;                      PublishShowSkinProperties(listItem);                      fanart = TmdbCache.GetShowBackdropFilename((item as GUICustomListItem).Images.ShowImages);                      if (!string.IsNullOrEmpty(fanart))                      {                          GUIImageHandler.LoadFanart(backdrop' fanart);                      }                      break;                    case "season":                      SelectedType = TraktItemType.season;                      PublishSeasonSkinProperties(listItem);                      fanart = TmdbCache.GetShowBackdropFilename((item as GUICustomListItem).Images.ShowImages);                      if (!string.IsNullOrEmpty(fanart))                      {                          GUIImageHandler.LoadFanart(backdrop' fanart);                      }                      break;                    case "episode":                      SelectedType = TraktItemType.episode;                      PublishEpisodeSkinProperties(listItem);                      fanart = TmdbCache.GetShowBackdropFilename((item as GUICustomListItem).Images.ShowImages);                      if (!string.IsNullOrEmpty(fanart))                      {                          GUIImageHandler.LoadFanart(backdrop' fanart);                      }                      break;                    case "person":                      SelectedType = TraktItemType.person;                      PublishPersonSkinProperties(listItem);                      break;              }
Missing Default,TraktPlugin.GUI,GUILists,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,CopyList,The following switch statement is missing a default case: switch (item.Type)                      {                          case "movie":                              if (itemsToAdd.Movies == null)                                  itemsToAdd.Movies = new List<TraktMovie>();                                itemsToAdd.Movies.Add(new TraktMovie { Ids = item.Movie.Ids });                              break;                            case "show":                              if (itemsToAdd.Shows == null)                                  itemsToAdd.Shows = new List<TraktShow>();                                itemsToAdd.Shows.Add(new TraktShow { Ids = item.Show.Ids });                              break;                            case "season":                              if (itemsToAdd.Seasons == null)                                  itemsToAdd.Seasons = new List<TraktSeason>();                                itemsToAdd.Seasons.Add(new TraktSeason { Ids = item.Season.Ids });                              break;                            case "episode":                              if (itemsToAdd.Episodes == null)                                  itemsToAdd.Episodes = new List<TraktEpisode>();                                itemsToAdd.Episodes.Add(new TraktEpisode { Ids = item.Episode.Ids });                              break;                            case "person":                              if (itemsToAdd.People == null)                                  itemsToAdd.People = new List<TraktPerson>();                                itemsToAdd.People.Add(new TraktPerson { Ids = item.Person.Ids });                              break;                      }
Missing Default,TraktPlugin.GUI,GUIPersonMovieCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,LoadCredits,The following switch statement is missing a default case: switch (CurrentCreditType)                          {                              case Credit.Art:                                  SendCrewToFacade(credits.Crew.Art);                                  break;                              case Credit.Camera:                                  SendCrewToFacade(credits.Crew.Camera);                                  break;                              case Credit.CostumeAndMakeUp:                                  SendCrewToFacade(credits.Crew.CostumeAndMakeUp);                                  break;                              case Credit.Directing:                                  SendCrewToFacade(credits.Crew.Directing);                                  break;                              case Credit.Production:                                  SendCrewToFacade(credits.Crew.Production);                                  break;                              case Credit.Sound:                                  SendCrewToFacade(credits.Crew.Sound);                                  break;                              case Credit.Writing:                                  SendCrewToFacade(credits.Crew.Writing);                                  break;                          }
Missing Default,TraktPlugin.GUI,GUIPersonMovieCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,ShowMovieFiltersMenu,The following switch statement is missing a default case: switch ((Filters)Enum.Parse(typeof(Filters)' item.ItemID' true))                  {                      case Filters.Watched:                          TraktSettings.CreditMoviesHideWatched = !TraktSettings.CreditMoviesHideWatched;                          break;                      case Filters.Watchlisted:                          TraktSettings.CreditMoviesHideWatchlisted = !TraktSettings.CreditMoviesHideWatchlisted;                          break;                      case Filters.Collected:                          TraktSettings.CreditMoviesHideCollected = !TraktSettings.CreditMoviesHideCollected;                          break;                      case Filters.Rated:                          TraktSettings.CreditMoviesHideRated = !TraktSettings.CreditMoviesHideRated;                          break;                  }
Missing Default,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnClicked,The following switch statement is missing a default case: switch (CurrentViewLevel)                          {                              case ViewLevel.Network:                                  var selectedItem = Facade.SelectedListItem as GUIUserListItem;                                  if (selectedItem.IsFolder)                                  {                                      // return to previous view list                                      LoadView();                                  }                                  else                                  {                                      if (!CurrentSelectedUser.IsPrivate || CurrentView == View.Friends)                                      {                                          LoadActivityTypes();                                      }                                      else                                      {                                          GUIUtils.ShowOKDialog(Translation.Protected' Translation.UserIsProtected);                                      }                                  }                                  break;                                case ViewLevel.ActivityTypes:                                  // Launch Corresponding Activity window                                  switch (SelectedActivity)                                  {                                      case (ActivityType.UserProfile):                                          GUIUserProfile.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.UserProfile);                                          break;                                        case (ActivityType.RecentWatchedMovies):                                          GUIRecentWatchedMovies.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedMovies);                                          break;                                        case (ActivityType.RecentWatchedEpisodes):                                          GUIRecentWatchedEpisodes.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedEpisodes);                                          break;                                        case (ActivityType.RecentAddedEpisodes):                                          GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                          //TODOGUIRecentAddedEpisodes.CurrentUser = CurrentSelectedUser.Username;                                          //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);                                          break;                                        case (ActivityType.RecentAddedMovies):                                          GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                          //TODOGUIRecentAddedMovies.CurrentUser = CurrentSelectedUser.Username;                                          //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);                                          break;                                        case (ActivityType.RecentComments):                                          GUIRecentShouts.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentShouts);                                          break;                                        case (ActivityType.MovieWatchList):                                          GUIWatchListMovies.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListMovies);                                          break;                                        case (ActivityType.ShowWatchList):                                          GUIWatchListShows.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListShows);                                          break;                                        case (ActivityType.EpisodeWatchList):                                          GUIWatchListEpisodes.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListEpisodes);                                          break;                                        case (ActivityType.Lists):                                          GUILists.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CustomLists);                                          break;                                  }                                  break;                          }
Missing Default,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnClicked,The following switch statement is missing a default case: switch (SelectedActivity)                                  {                                      case (ActivityType.UserProfile):                                          GUIUserProfile.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.UserProfile);                                          break;                                        case (ActivityType.RecentWatchedMovies):                                          GUIRecentWatchedMovies.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedMovies);                                          break;                                        case (ActivityType.RecentWatchedEpisodes):                                          GUIRecentWatchedEpisodes.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedEpisodes);                                          break;                                        case (ActivityType.RecentAddedEpisodes):                                          GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                          //TODOGUIRecentAddedEpisodes.CurrentUser = CurrentSelectedUser.Username;                                          //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);                                          break;                                        case (ActivityType.RecentAddedMovies):                                          GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                          //TODOGUIRecentAddedMovies.CurrentUser = CurrentSelectedUser.Username;                                          //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);                                          break;                                        case (ActivityType.RecentComments):                                          GUIRecentShouts.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentShouts);                                          break;                                        case (ActivityType.MovieWatchList):                                          GUIWatchListMovies.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListMovies);                                          break;                                        case (ActivityType.ShowWatchList):                                          GUIWatchListShows.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListShows);                                          break;                                        case (ActivityType.EpisodeWatchList):                                          GUIWatchListEpisodes.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListEpisodes);                                          break;                                        case (ActivityType.Lists):                                          GUILists.CurrentUser = CurrentSelectedUser.Username;                                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CustomLists);                                          break;                                  }
Missing Default,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)              {                  case Action.ActionType.ACTION_PREVIOUS_MENU:                      switch (CurrentViewLevel)                      {                          case ViewLevel.ActivityTypes:                              // go back one view level                              CurrentViewLevel = ViewLevel.Network;                              LoadView();                              return;                      }                      break;              }
Missing Default,TraktPlugin.GUI,GUINetwork,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnAction,The following switch statement is missing a default case: switch (CurrentViewLevel)                      {                          case ViewLevel.ActivityTypes:                              // go back one view level                              CurrentViewLevel = ViewLevel.Network;                              LoadView();                              return;                      }
Missing Default,TraktPlugin.GUI,GUIPersonShowCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,LoadCredits,The following switch statement is missing a default case: switch (CurrentCreditType)                          {                              case Credit.Art:                                  SendCrewToFacade(credits.Crew.Art);                                  break;                              case Credit.Camera:                                  SendCrewToFacade(credits.Crew.Camera);                                  break;                              case Credit.CostumeAndMakeUp:                                  SendCrewToFacade(credits.Crew.CostumeAndMakeUp);                                  break;                              case Credit.Directing:                                  SendCrewToFacade(credits.Crew.Directing);                                  break;                              case Credit.Production:                                  SendCrewToFacade(credits.Crew.Production);                                  break;                              case Credit.Sound:                                  SendCrewToFacade(credits.Crew.Sound);                                  break;                              case Credit.Writing:                                  SendCrewToFacade(credits.Crew.Writing);                                  break;                          }
Missing Default,TraktPlugin.GUI,GUIPersonShowCredits,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,ShowTVShowFiltersMenu,The following switch statement is missing a default case: switch ((Filters)Enum.Parse(typeof(Filters)' item.ItemID' true))                  {                      case Filters.Watched:                          TraktSettings.CreditShowsHideWatched = !TraktSettings.CreditShowsHideWatched;                          break;                      case Filters.Watchlisted:                          TraktSettings.CreditShowsHideWatchlisted = !TraktSettings.CreditShowsHideWatchlisted;                          break;                      case Filters.Collected:                          TraktSettings.CreditShowsHideCollected = !TraktSettings.CreditShowsHideCollected;                          break;                      case Filters.Rated:                          TraktSettings.CreditShowsHideRated = !TraktSettings.CreditShowsHideRated;                          break;                  }
Missing Default,TraktPlugin.GUI,GUIPersonSummary,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonSummary.cs,OnPageLoad,The following switch statement is missing a default case: switch (CurrentView)              {                  case View.Summary:                      LoadPersonSummary();                      break;                  case View.MovieCredits:                      LoadMovieCredits();                      break;                  case View.ShowCredits:                      LoadShowCredits();                      break;              }
Missing Default,TraktPlugin.GUI,GUIDialogPinCode,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)              {                  case Action.ActionType.REMOTE_1:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "1";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_2:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "2";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_3:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "3";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_4:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "4";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_5:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "5";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_6:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "6";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_7:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "7";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_8:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "8";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_9:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "9";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.REMOTE_0:                      if (EnteredPinCode.Length >= 4) return;                      EnteredPinCode = EnteredPinCode + "0";                      UpdatePinCode(EnteredPinCode.Length);                      break;                  case Action.ActionType.ACTION_KEY_PRESSED:                      // some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands                      if (EnteredPinCode.Length >= 4) return;                      if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9')                      {                          char key = (char)action.m_key.KeyChar;                          EnteredPinCode = EnteredPinCode + key;                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_DELETE_ITEM:                  case Action.ActionType.ACTION_MOVE_DOWN:                  case Action.ActionType.ACTION_MOVE_LEFT:                      if (EnteredPinCode.Length > 0)                      {                          EnteredPinCode = EnteredPinCode.Substring(0' EnteredPinCode.Length - 1);                          UpdatePinCode(EnteredPinCode.Length);                      }                      break;                  case Action.ActionType.ACTION_SELECT_ITEM:                      PageDestroy();                      return;                  case Action.ActionType.ACTION_PREVIOUS_MENU:                  case Action.ActionType.ACTION_CLOSE_DIALOG:                  case Action.ActionType.ACTION_CONTEXT_MENU:                      PageDestroy();                      return;              }
Missing Default,TraktPlugin.GUI,GUIPopularMovies,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,ShowMovieFiltersMenu,The following switch statement is missing a default case: switch ((Filters)Enum.Parse(typeof(Filters)' item.ItemID' true))                  {                      case Filters.Watched:                          TraktSettings.PopularMoviesHideWatched = !TraktSettings.PopularMoviesHideWatched;                          break;                      case Filters.Watchlisted:                          TraktSettings.PopularMoviesHideWatchlisted = !TraktSettings.PopularMoviesHideWatchlisted;                          break;                      case Filters.Collected:                          TraktSettings.PopularMoviesHideCollected = !TraktSettings.PopularMoviesHideCollected;                          break;                      case Filters.Rated:                          TraktSettings.PopularMoviesHideRated = !TraktSettings.PopularMoviesHideRated;                          break;                  }
Missing Default,TraktPlugin.GUI,GUIPopularShows,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,ShowTVShowFiltersMenu,The following switch statement is missing a default case: switch ((Filters)Enum.Parse(typeof(Filters)' item.ItemID' true))                  {                      case Filters.Watched:                          TraktSettings.PopularShowsHideWatched = !TraktSettings.PopularShowsHideWatched;                          break;                      case Filters.Watchlisted:                          TraktSettings.PopularShowsHideWatchlisted = !TraktSettings.PopularShowsHideWatchlisted;                          break;                      case Filters.Collected:                          TraktSettings.PopularShowsHideCollected = !TraktSettings.PopularShowsHideCollected;                          break;                      case Filters.Rated:                          TraktSettings.PopularShowsHideRated = !TraktSettings.PopularShowsHideRated;                          break;                  }
Missing Default,TraktPlugin.GUI,GUIRecentShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)              {                  case (int)ActivityContextMenuItem.Like:                      GUICommon.LikeComment(selectedComment.Comment);                      selectedComment.Comment.Likes++;                      PublishCommentSkinProperties(selectedComment);                      break;                    case (int)ActivityContextMenuItem.Unlike:                      GUICommon.UnLikeComment(selectedComment.Comment);                      if (selectedComment.Comment.Likes > 0)                      {                          selectedComment.Comment.Likes--;                          PublishCommentSkinProperties(selectedComment);                      }                      break;                    case ((int)ActivityContextMenuItem.Spoilers):                      TraktSettings.HideSpoilersOnShouts = !TraktSettings.HideSpoilersOnShouts;                      if (hideSpoilersButton != null) hideSpoilersButton.Selected = TraktSettings.HideSpoilersOnShouts;                      PublishCommentSkinProperties(selectedComment);                      break;                    case ((int)ActivityContextMenuItem.ShowSeasonInfo):                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.ShowSeasons' selectedComment.Show.ToJSON());                      break;                    case ((int)ActivityContextMenuItem.AddToList):                      if (selectedComment.Movie != null)                          TraktHelper.AddRemoveMovieInUserList(selectedComment.Movie' false);                      else if (selectedComment.Episode != null)                          TraktHelper.AddRemoveEpisodeInUserList(selectedComment.Episode' false);                      else                          TraktHelper.AddRemoveShowInUserList(selectedComment.Show' false);                      break;                    case ((int)ActivityContextMenuItem.AddToWatchList):                      if (selectedComment.Movie != null)                          TraktHelper.AddMovieToWatchList(selectedComment.Movie' true);                      else if (selectedComment.Episode != null)                          TraktHelper.AddEpisodeToWatchList(selectedComment.Episode);                      else                          TraktHelper.AddShowToWatchList(selectedComment.Show);                      break;                    case ((int)ActivityContextMenuItem.Shouts):                      if (selectedComment.Movie != null)                          TraktHelper.ShowMovieShouts(selectedComment.Movie);                      else if (selectedComment.Episode != null)                          TraktHelper.ShowEpisodeShouts(selectedComment.Show' selectedComment.Episode);                      else                          TraktHelper.ShowTVShowShouts(selectedComment.Show);                      break;                    case ((int)ActivityContextMenuItem.Rate):                      if (selectedComment.Movie != null)                          GUICommon.RateMovie(selectedComment.Movie);                      else if (selectedComment.Episode != null)                          GUICommon.RateEpisode(selectedComment.Show' selectedComment.Episode);                      else                          GUICommon.RateShow(selectedComment.Show);                      break;                    case ((int)ActivityContextMenuItem.Cast):                      if (selectedComment.Movie != null)                      {                          GUICreditsMovie.Movie = selectedComment.Movie;                          GUICreditsMovie.Type = GUICreditsMovie.CreditType.Cast;                          GUICreditsMovie.Fanart = TmdbCache.GetMovieBackdropFilename((selectedItem as GUIMovieListItem).Images.MovieImages);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsMovie);                      }                      else if (selectedComment.Show != null)                      {                          GUICreditsShow.Show = selectedComment.Show;                          GUICreditsShow.Type = GUICreditsShow.CreditType.Cast;                          GUICreditsShow.Fanart = TmdbCache.GetShowBackdropFilename((selectedItem as GUIShowListItem).Images.ShowImages);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsShow);                      }                      break;                    case ((int)ActivityContextMenuItem.Crew):                      if (selectedComment.Movie != null)                      {                          GUICreditsMovie.Movie = selectedComment.Movie;                          GUICreditsMovie.Type = GUICreditsMovie.CreditType.Crew;                          GUICreditsMovie.Fanart = TmdbCache.GetMovieBackdropFilename((selectedItem as GUIMovieListItem).Images.MovieImages);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsMovie);                      }                      else if (selectedComment.Show != null)                      {                          GUICreditsShow.Show = selectedComment.Show;                          GUICreditsShow.Type = GUICreditsShow.CreditType.Crew;                          GUICreditsShow.Fanart = TmdbCache.GetShowBackdropFilename((selectedItem as GUIShowListItem).Images.ShowImages);                          GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CreditsShow);                      }                      break;                    case ((int)ActivityContextMenuItem.Trailers):                      if (selectedComment.Movie != null)                          GUICommon.ShowMovieTrailersMenu(selectedComment.Movie);                      else                          GUICommon.ShowTVShowTrailersMenu(selectedComment.Show' selectedComment.Episode);                      break;              }
Missing Default,TraktPlugin.GUI,GUIRecentShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,PlayCommentItem,The following switch statement is missing a default case: switch (selectedComment.Type)              {                  case "episode":                      GUICommon.CheckAndPlayEpisode(selectedComment.Show' selectedComment.Episode);                      break;                    case "show":                  case "season":                                          GUICommon.CheckAndPlayFirstUnwatchedEpisode(selectedComment.Show' jumpTo);                      break;                    case "movie":                      GUICommon.CheckAndPlayMovie(jumpTo' selectedComment.Movie);                      break;              }
Missing Default,TraktPlugin.GUI,GUIRecentShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,GetTmdbImage,The following switch statement is missing a default case: switch (comment.Type)              {                  case "movie":                      images.MovieImages = new TmdbMovieImages { Id = comment.Movie.Ids.Tmdb };                      break;                    case "show":                      images.ShowImages = new TmdbShowImages { Id = comment.Show.Ids.Tmdb };                      break;                  case "season":                      images.ShowImages = new TmdbShowImages { Id = comment.Show.Ids.Tmdb };                      images.SeasonImages = new TmdbSeasonImages                      {                          Id = comment.Show.Ids.Tmdb'                          Season = comment.Season.Number                      };                      break;                  case "episode":                      images.ShowImages = new TmdbShowImages { Id = comment.Show.Ids.Tmdb };                      images.SeasonImages = new TmdbSeasonImages                      {                          Id = comment.Show.Ids.Tmdb'                          Season = comment.Episode.Season                      };                      break;                  case "list":                      break;              }
Missing Default,TraktPlugin.GUI,GUIRecentShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,GetCommentItemTitle,The following switch statement is missing a default case: switch (comment.Type)              {                  case "movie":                      title = comment.Movie.Title;                      break;                    case "show":                      title = comment.Show.Title;                      break;                                    case "season":                      title = string.Format("{0} - {1} {2}"' comment.Show.Title' Translation.Season' comment.Season.Number);                      break;                    case "episode":                      title = string.Format("{0} - {1}x{2} - {3}"' comment.Show.Title' comment.Episode.Season' comment.Episode.Number' comment.Episode.Title ?? string.Format("{0} {1}"' Translation.Episode' comment.Episode.Number));                      break;                    case "list":                      title = comment.List.Name;                      break;              }
Missing Default,TraktPlugin.GUI,GUIRecentShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,OnCommentSelected,The following switch statement is missing a default case: switch (commentItem.Type)              {                  case "movie":                      fanartFileName = TmdbCache.GetMovieBackdropFilename((item as GUICustomListItem).Images.MovieImages);                      break;                    case "show":                  case "season":                  case "episode":                      fanartFileName = TmdbCache.GetShowBackdropFilename((item as GUICustomListItem).Images.ShowImages);                      break;                    case "list":                      break;              }
Missing Default,TraktPlugin.GUI,GUISearch,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,GetSearchListName,The following switch statement is missing a default case: switch (type)              {                  case SearchType.movie:                      listName = Translation.Movies;                      break;                    case SearchType.show:                      listName = Translation.TVShows;                      break;                    case SearchType.episode:                      listName = Translation.Episodes;                      break;                    case SearchType.person:                      listName = Translation.People;                      break;                    case SearchType.user:                      listName = Translation.Users;                      break;                    case SearchType.list:                      listName = Translation.Lists;                      break;              }
Missing Default,TraktPlugin.GUI,GUISearch,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,SendSearchResultsToWindow,The following switch statement is missing a default case: switch (SelectedSearchType)              {                  case SearchType.movie:                      if (GetSearchResultCount(searchResults' SearchType.movie) == 0) break;                      GUISearchMovies.SearchTerm = SearchTerm;                      GUISearchMovies.Movies = SearchResults.Where(s => s.Type == SearchType.movie.ToString()).Select(m => m.Movie);                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.SearchMovies);                      break;                    case SearchType.show:                      if (GetSearchResultCount(searchResults' SearchType.show) == 0) break;                      GUISearchShows.SearchTerm = SearchTerm;                      GUISearchShows.Shows = SearchResults.Where(s => s.Type == SearchType.show.ToString()).Select(m => m.Show);                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.SearchShows);                      break;                    case SearchType.episode:                      if (GetSearchResultCount(searchResults' SearchType.episode) == 0) break;                      GUISearchEpisodes.SearchTerm = SearchTerm;                      GUISearchEpisodes.Episodes = SearchResults.Where(s => s.Type == SearchType.episode.ToString())                                                                .Select(e => new TraktEpisodeSummaryEx                                                                            {                                                                                Episode = e.Episode'                                                                                Show = e.Show                                                                            });                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.SearchEpisodes);                      break;                    case SearchType.person:                      if (GetSearchResultCount(searchResults' SearchType.person) == 0) break;                      GUISearchPeople.SearchTerm = SearchTerm;                      GUISearchPeople.People = SearchResults.Where(s => s.Type == SearchType.person.ToString()).Select(m => m.Person);                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.SearchPeople);                      break;                    case SearchType.user:                      if (GetSearchResultCount(searchResults' SearchType.user) == 0) break;                      GUISearchUsers.SearchTerm = SearchTerm;                      GUISearchUsers.Users = SearchResults.Where(s => s.Type == SearchType.user.ToString()).Select(m => m.User);                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.SearchUsers);                      break;                    case SearchType.list:                      if (GetSearchResultCount(searchResults' SearchType.list) == 0) break;                      //TODO                      break;              }
Missing Default,TraktPlugin.GUI,GUISearchPeople,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchPeople.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)              {                  case ((int)ContextMenuItem.ChangeLayout):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;              }
Missing Default,TraktPlugin.GUI,GUISearchUsers,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchUsers.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)              {                  case ((int)ContextMenuItem.FollowUser):                      if (GUIUtils.ShowYesNoDialog(Translation.Network' string.Format(Translation.SendFollowRequest' selectedItem.Label)' true))                      {                          GUINetwork.FollowUser(selectedUser);                          GUINetwork.ClearCache();                          (selectedItem as GUIUserListItem).IsFollowed = true;                      }                      break;                    case ((int)ContextMenuItem.UserProfile):                      GUIUserProfile.CurrentUser = selectedUser.Username;                      GUIWindowManager.ActivateWindow((int)TraktGUIWindows.UserProfile);                      break;                    case ((int)ContextMenuItem.ChangeLayout):                      CurrentLayout = GUICommon.ShowLayoutMenu(CurrentLayout' PreviousSelectedIndex);                      break;              }
Missing Default,TraktPlugin.GUI,GUISettingsAccount,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsAccount.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)              {                  case Action.ActionType.ACTION_PREVIOUS_MENU:                      if (GUIBackgroundTask.Instance.IsBusy)                      {                          TraktAPI.TraktAPI.AuthorisationCancelled = true;                          GUIBackgroundTask.Instance.StopBackgroundTask();                      }                      break;              }
Missing Default,TraktPlugin.GUI,GUIShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)              {                  case Action.ActionType.ACTION_PREVIOUS_MENU:                      // navigate back to parent if we are viewing replies                      var selectedComment = Facade.SelectedListItem.TVTag as TraktComment;                      if (selectedComment != null && selectedComment.ParentId > 0)                      {                          if (CurrentLevel > 1)                          {                              // load the previous list of replies                                                          LoadCommentReplies((int)selectedComment.ParentId);                          }                          else                          {                              // return the main list of comments                              LoadCommentsList();                          }                            // remove any previous selection for level returning from                          if (SelectedParentItems.ContainsKey(CurrentLevel))                              SelectedParentItems.Remove(CurrentLevel);                            CurrentLevel--;                          return;                      }                      break;              }
Missing Default,TraktPlugin.GUI,GUIShouts,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,SendCommentsToFacade,The following switch statement is missing a default case: switch (ShoutType)                  {                      case ShoutTypeEnum.movie:                          title = MovieInfo.Title;                          break;                      case ShoutTypeEnum.show:                          title = ShowInfo.Title;                          break;                      case ShoutTypeEnum.season:                          title = string.Format("{0} - {1} {2}"' SeasonInfo.Title' Translation.Season' SeasonInfo.SeasonIdx);                          break;                      case ShoutTypeEnum.episode:                          title = EpisodeInfo.ToString();                          break;                        case ShoutTypeEnum.list:                          title = ListInfo.Name;                          break;                  }
Missing Default,TraktPlugin.GUI,GUIUserProfile,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUserProfile.cs,OnClicked,The following switch statement is missing a default case: switch (controlId)              {                  case (50):                      if (actionType == Action.ActionType.ACTION_SELECT_ITEM)                      {                          // Launch Corresponding Activity window                          switch (SelectedActivity)                          {                              case (ActivityType.RecentWatchedMovies):                                  GUIRecentWatchedMovies.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedMovies);                                  break;                                case (ActivityType.RecentWatchedEpisodes):                                  GUIRecentWatchedEpisodes.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedEpisodes);                                  break;                                case (ActivityType.RecentAddedEpisodes):                                  GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                  //TODOGUIRecentAddedEpisodes.CurrentUser = CurrentUser;                                  //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);                                  break;                                case (ActivityType.RecentAddedMovies):                                  GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                  //TODOGUIRecentAddedMovies.CurrentUser = CurrentUser;                                  //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);                                  break;                                case (ActivityType.RecentComments):                                  GUIRecentShouts.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentShouts);                                  break;                                case (ActivityType.MovieWatchList):                                  GUIWatchListMovies.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListMovies);                                  break;                                case (ActivityType.ShowWatchList):                                  GUIWatchListShows.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListShows);                                  break;                                case (ActivityType.EpisodeWatchList):                                  GUIWatchListEpisodes.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListEpisodes);                                  break;                                case (ActivityType.Lists):                                  GUILists.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CustomLists);                                  break;                          }                      }                      break;                    case (4):                      GUIControl.FocusControl(GetID' Facade.GetID);                      if (Users.Keys.Contains(CurrentUser)) Users.Remove(CurrentUser);                      LoadUserProfile();                      break;              }
Missing Default,TraktPlugin.GUI,GUIUserProfile,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUserProfile.cs,OnClicked,The following switch statement is missing a default case: switch (SelectedActivity)                          {                              case (ActivityType.RecentWatchedMovies):                                  GUIRecentWatchedMovies.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedMovies);                                  break;                                case (ActivityType.RecentWatchedEpisodes):                                  GUIRecentWatchedEpisodes.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentWatchedEpisodes);                                  break;                                case (ActivityType.RecentAddedEpisodes):                                  GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                  //TODOGUIRecentAddedEpisodes.CurrentUser = CurrentUser;                                  //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);                                  break;                                case (ActivityType.RecentAddedMovies):                                  GUIUtils.ShowNotifyDialog("Trakt"' Translation.FeatureNotAvailable);                                  //TODOGUIRecentAddedMovies.CurrentUser = CurrentUser;                                  //TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);                                  break;                                case (ActivityType.RecentComments):                                  GUIRecentShouts.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentShouts);                                  break;                                case (ActivityType.MovieWatchList):                                  GUIWatchListMovies.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListMovies);                                  break;                                case (ActivityType.ShowWatchList):                                  GUIWatchListShows.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListShows);                                  break;                                case (ActivityType.EpisodeWatchList):                                  GUIWatchListEpisodes.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.WatchedListEpisodes);                                  break;                                case (ActivityType.Lists):                                  GUILists.CurrentUser = CurrentUser;                                  GUIWindowManager.ActivateWindow((int)TraktGUIWindows.CustomLists);                                  break;                          }
Missing Default,TraktPlugin.GUI,GUIRateDialog,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)              {                  case Action.ActionType.REMOTE_1:                      Rated = TraktRateValue.one;                      UpdateRating();                      break;                    case Action.ActionType.REMOTE_2:                      Rated = TraktRateValue.two;                      UpdateRating();                      break;                                    case Action.ActionType.REMOTE_3:                      Rated = TraktRateValue.three;                      UpdateRating();                      break;                    case Action.ActionType.REMOTE_4:                      Rated = TraktRateValue.four;                      UpdateRating();                      break;                    case Action.ActionType.REMOTE_5:                      Rated = TraktRateValue.five;                      UpdateRating();                      break;                    case Action.ActionType.REMOTE_6:                      Rated = TraktRateValue.six;                      UpdateRating();                      break;                    case Action.ActionType.REMOTE_7:                      Rated = TraktRateValue.seven;                      UpdateRating();                      break;                    case Action.ActionType.REMOTE_8:                      Rated = TraktRateValue.eight;                      UpdateRating();                      break;                    case Action.ActionType.REMOTE_9:                      Rated = TraktRateValue.nine;                      UpdateRating();                      break;                    case Action.ActionType.REMOTE_0:                      Rated = TraktRateValue.ten;                      UpdateRating();                      break;                    case Action.ActionType.ACTION_KEY_PRESSED:                      // some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands                      if (action.m_key != null)                      {                          int key = action.m_key.KeyChar;                          if (key >= '0' && key <= '9')                          {                              if (key == 0) key = 10;                              Rated = (TraktRateValue)key;                              UpdateRating();                          }                      }                      break;                    case Action.ActionType.ACTION_SELECT_ITEM:                      IsSubmitted = true;                      PageDestroy();                      return;                    case Action.ActionType.ACTION_PREVIOUS_MENU:                  case Action.ActionType.ACTION_CLOSE_DIALOG:                  case Action.ActionType.ACTION_CONTEXT_MENU:                      IsSubmitted = false;                      PageDestroy();                      return;              }
Missing Default,TraktPlugin.GUI,GUIRateDialog,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)              {                  case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:                      // store old rating so default control in skin does override                      TraktRateValue rating = Rated;                        base.OnMessage(message);                        // read just rating and default control focus                      int defaultControlId = 1000 + (int)rating;                      GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_SETFOCUS' GetID' 0' defaultControlId' 0' 0' null);                      OnMessage(msg);                        IsSubmitted = false;                      UpdateRating();                      return true;                    case GUIMessage.MessageType.GUI_MSG_SETFOCUS:                      if (btnUnRate != null && message.TargetControlId == btnUnRate.GetID)                      {                          Rated = TraktRateValue.unrate;                          UpdateRating();                          break;                      }                        if (message.TargetControlId < 1001 || message.TargetControlId > 1010)                          break;                                            Rated = (TraktRateValue)(message.TargetControlId - 1000);                      UpdateRating();                      break;              }
Missing Default,TraktPlugin.GUI,GUIRateDialog,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,GetRatingDescription,The following switch statement is missing a default case: switch (Rated)              {                  case TraktRateValue.unrate:                      description = Translation.UnRate;                      break;                  case TraktRateValue.ten:                      description = Translation.RateLove;                      break;                  case TraktRateValue.nine:                      description = Translation.RateNine;                      break;                  case TraktRateValue.eight:                      description = Translation.RateEight;                      break;                  case TraktRateValue.seven:                      description = Translation.RateSeven;                      break;                  case TraktRateValue.six:                      description = Translation.RateSix;                      break;                  case TraktRateValue.five:                      description = Translation.RateFive;                      break;                  case TraktRateValue.four:                      description = Translation.RateFour;                      break;                  case TraktRateValue.three:                      description = Translation.RateThree;                      break;                  case TraktRateValue.two:                      description = Translation.RateTwo;                      break;                  case TraktRateValue.one:                      description = Translation.RateHate;                      break;              }
Missing Default,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,GetCalendarShows,The following switch statement is missing a default case: switch (CurrentCalendar)              {                  case CalendarType.UserShows:                      result = TraktAPI.TraktAPI.GetCalendarUserShows(GetStartDate().ToString("yyyy-MM-dd")' GetDaysForward());                      break;                  case CalendarType.UserSeasonPremieres:                      result = TraktAPI.TraktAPI.GetCalendarUserSeasonPremieresShows(GetStartDate().ToString("yyyy-MM-dd")' GetDaysForward());                      break;                  case CalendarType.UserNewShows:                      result = TraktAPI.TraktAPI.GetCalendarUserNewShows(GetStartDate().ToString("yyyy-MM-dd")' GetDaysForward());                      break;                  case CalendarType.AllShows:                      result = TraktAPI.TraktAPI.GetCalendarShows(GetStartDate().ToString("yyyy-MM-dd")' GetDaysForward());                      break;                  case CalendarType.AllSeasonPremieres:                      result = TraktAPI.TraktAPI.GetCalendarSeasonPremieresShows(GetStartDate().ToString("yyyy-MM-dd")' GetDaysForward());                      break;                  case CalendarType.AllNewShows:                      result = TraktAPI.TraktAPI.GetCalendarNewShows(GetStartDate().ToString("yyyy-MM-dd")' GetDaysForward());                      break;              }
Missing Default,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)              {                  case Action.ActionType.ACTION_PLAY:                  case Action.ActionType.ACTION_MUSIC_PLAY:                      CheckAndPlayEpisode();                      break;                    case Action.ActionType.ACTION_PREVIOUS_MENU:                      break;                    case Action.ActionType.ACTION_MOVE_UP:                  case Action.ActionType.ACTION_PAGE_UP:                      LastMoved = FacadeMovement.Up;                                          break;                    case Action.ActionType.ACTION_MOVE_DOWN:                  case Action.ActionType.ACTION_PAGE_DOWN:                      LastMoved = FacadeMovement.Down;                      break;              }
Missing Default,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,GetStartDate,The following switch statement is missing a default case: switch (CurrentStartDate)              {                  case StartDates.Today:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(1' 0' 0' 0));                      break;                  case StartDates.Yesterday:                      startDate =  DateTime.UtcNow.Subtract(new TimeSpan(2' 0' 0' 0));                      break;                  case StartDates.OneWeekAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(8' 0' 0' 0));                      break;                  case StartDates.TwoWeeksAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(15' 0' 0' 0));                      break;                  case StartDates.OneMonthAgo:                      startDate = DateTime.UtcNow.Subtract(new TimeSpan(31' 0' 0' 0));                      break;              }
Missing Default,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,GetCurrentLocalStartDate,The following switch statement is missing a default case: switch (CurrentStartDate)              {                  case StartDates.Today:                      startDate = DateTime.Today;                      break;                  case StartDates.Yesterday:                      startDate = DateTime.Today.Subtract(new TimeSpan(1' 0' 0' 0));                      break;                  case StartDates.OneWeekAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(7' 0' 0' 0));                      break;                  case StartDates.TwoWeeksAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(14' 0' 0' 0));                      break;                  case StartDates.OneMonthAgo:                      startDate = DateTime.Today.Subtract(new TimeSpan(30' 0' 0' 0));                      break;              }
Missing Default,TraktPlugin.GUI,GUICalendarTV,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendarTV.cs,SetCurrentView,The following switch statement is missing a default case: switch (CurrentCalendar)              {                  case CalendarType.UserShows:                      GUICommon.SetProperty("#Trakt.CurrentView"' Translation.CalendarMyShows);                      break;                  case CalendarType.UserNewShows:                      GUICommon.SetProperty("#Trakt.CurrentView"' Translation.CalendarMyNewShows);                      break;                  case CalendarType.UserSeasonPremieres:                      GUICommon.SetProperty("#Trakt.CurrentView"' Translation.CalendarMySeasonPremieres);                      break;                  case CalendarType.AllShows:                      GUICommon.SetProperty("#Trakt.CurrentView"' Translation.CalendarAllShows);                      break;                  case CalendarType.AllNewShows:                      GUICommon.SetProperty("#Trakt.CurrentView"' Translation.CalendarAllNewShows);                      break;                  case CalendarType.AllSeasonPremieres:                      GUICommon.SetProperty("#Trakt.CurrentView"' Translation.CalendarAllSeasonPremieres);                      break;              }
Missing Default,TraktPlugin.GUI,GUIImageHandler,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,LocalImageFilename,The following switch statement is missing a default case: switch (type)              {                  case ArtworkType.Avatar:                      filename = image.FullSize.ToClearUrl();                      folder = Config.GetSubFolder(Config.Dir.Thumbs' @"Trakt\Avatars");                      break;                    case ArtworkType.PersonHeadshot:                      filename = image.ThumbSize.ToClearUrl();                      folder = Config.GetSubFolder(Config.Dir.Thumbs' @"Trakt\People");                      break;                    case ArtworkType.PersonFanart:                      filename = TraktSettings.DownloadFullSizeFanart ? image.FullSize.ToClearUrl() : image.MediumSize.ToClearUrl();                      folder = Config.GetSubFolder(Config.Dir.Thumbs' @"Trakt\People\Fanart");                      break;                    case ArtworkType.SeasonPoster:                      filename = image.ThumbSize.ToClearUrl();                      folder = Config.GetSubFolder(Config.Dir.Thumbs' @"Trakt\Shows\Seasons");                      break;                    case ArtworkType.MoviePoster:                      filename = image.ThumbSize.ToClearUrl();                      folder = Config.GetSubFolder(Config.Dir.Thumbs' @"Trakt\Movies\Posters");                      break;                    case ArtworkType.MovieFanart:                      filename = TraktSettings.DownloadFullSizeFanart ? image.FullSize.ToClearUrl() : image.MediumSize.ToClearUrl();                      folder = Config.GetSubFolder(Config.Dir.Thumbs' @"Trakt\Movies\Fanart");                      break;                    case ArtworkType.MovieBanner:                      filename = image.FullSize.ToClearUrl();                      folder = Config.GetSubFolder(Config.Dir.Thumbs' @"Trakt\Movies\Banners");                      break;                    case ArtworkType.ShowPoster:                      filename = image.ThumbSize.ToClearUrl();                      folder = Config.GetSubFolder(Config.Dir.Thumbs' @"Trakt\Shows\Posters");                      break;                    case ArtworkType.ShowBanner:                      filename = image.FullSize.ToClearUrl();                      folder = Config.GetSubFolder(Config.Dir.Thumbs' @"Trakt\Shows\Banners");                      break;                    case ArtworkType.ShowFanart:                      filename = TraktSettings.DownloadFullSizeFanart ? image.FullSize.ToClearUrl() : image.MediumSize.ToClearUrl();                      folder = Config.GetSubFolder(Config.Dir.Thumbs' @"Trakt\Shows\Fanart");                      break;                    case ArtworkType.EpisodeImage:                      filename = image.ThumbSize.ToClearUrl();                      folder = Config.GetSubFolder(Config.Dir.Thumbs' @"Trakt\Episodes");                      break;              }
Missing Default,TraktPlugin.TraktHandlers,MovingPictures,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieResolution,The following switch statement is missing a default case: switch (firstMovie.VideoResolution)              {                  case "1080p":                      return TraktResolution.hd_1080p.ToString();                  case "1080i":                      return TraktResolution.hd_1080i.ToString();                  case "720p":                      return TraktResolution.hd_720p.ToString();                  case "576p":                      return TraktResolution.sd_576p.ToString();                  case "576i":                      return TraktResolution.sd_576i.ToString();                  case "480p":                      return TraktResolution.sd_480p.ToString();                  case "480i":                      return TraktResolution.sd_480i.ToString();                  case "4K UHD":                      return TraktResolution.uhd_4k.ToString();              }
Missing Default,TraktPlugin.TraktHandlers,MyVideos,D:\research\architectureSmells\repos1\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,GetMovieResolution,The following switch statement is missing a default case: switch (movie.MediaInfo.VideoResolution)              {                  case "1080p":                      return TraktResolution.hd_1080p.ToString();                  case "1080i":                      return TraktResolution.hd_1080i.ToString();                  case "720p":                      return TraktResolution.hd_720p.ToString();                  case "576p":                      return TraktResolution.sd_576p.ToString();                  case "576i":                      return TraktResolution.sd_576i.ToString();                  case "480p":                      return TraktResolution.sd_480p.ToString();                  case "480i":                      return TraktResolution.sd_480i.ToString();                  case "4K UHD":                      return TraktResolution.uhd_4k.ToString();              }
