Implementation smell,Namespace,Class,File,Method,Description
Long Method,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The method has 92 lines of code.
Long Method,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,Configuration,The method has 74 lines of code.
Long Method,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The method has 630 lines of code.
Long Method,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The method has 79 lines of code.
Long Method,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The method has 69 lines of code.
Long Method,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The method has 83 lines of code.
Long Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadActivityFacade,The method has 83 lines of code.
Long Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The method has 596 lines of code.
Long Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,The method has 67 lines of code.
Long Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityFilterActionsMenu,The method has 93 lines of code.
Long Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityFilterTypesMenu,The method has 75 lines of code.
Long Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowTrendingShowsContextMenu,The method has 81 lines of code.
Long Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowTrendingMoviesContextMenu,The method has 94 lines of code.
Long Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityContextMenu,The method has 237 lines of code.
Long Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,OnActivitySelected,The method has 63 lines of code.
Long Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GUIWindowManager_Receivers,The method has 92 lines of code.
Long Method,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,UnLoadPluginHandlers,The method has 66 lines of code.
Long Method,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,LoadPluginHandlers,The method has 123 lines of code.
Long Method,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The method has 165 lines of code.
Long Method,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The method has 416 lines of code.
Long Method,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The method has 219 lines of code.
Long Method,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,SaveSettings,The method has 190 lines of code.
Long Method,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The method has 157 lines of code.
Long Method,TraktPlugin.GUI,GUIAnticipatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,OnShowContextMenu,The method has 107 lines of code.
Long Method,TraktPlugin.GUI,GUIAnticipatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,SendAnticipatedMoviesToFacade,The method has 77 lines of code.
Long Method,TraktPlugin.GUI,GUIBoxOffice,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBoxOffice.cs,OnShowContextMenu,The method has 177 lines of code.
Long Method,TraktPlugin.GUI,GUICreditsMovie,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsMovie.cs,SendCreditResultsToFacade,The method has 231 lines of code.
Long Method,TraktPlugin.GUI,GUICreditsShow,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsShow.cs,SendCreditResultsToFacade,The method has 231 lines of code.
Long Method,TraktPlugin.GUI,GUIAnticipatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,OnClicked,The method has 61 lines of code.
Long Method,TraktPlugin.GUI,GUIAnticipatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,OnShowContextMenu,The method has 94 lines of code.
Long Method,TraktPlugin.GUI,GUIAnticipatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,SendAnticipatedShowsToFacade,The method has 75 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayMovie,The method has 72 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,RateEpisode,The method has 67 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ClearStatisticProperties,The method has 68 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetStatisticProperties,The method has 83 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetContextMenuItemsForActivity,The method has 64 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CreateMoviesContextMenu,The method has 91 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CreateShowsContextMenu,The method has 77 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowSortMenu,The method has 92 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The method has 150 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The method has 170 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The method has 102 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The method has 116 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityListItemTitle,The method has 90 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityItemName,The method has 79 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckRatingOnShow,The method has 66 lines of code.
Long Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetTranslatedCreditJob,The method has 226 lines of code.
Long Method,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnShowContextMenu,The method has 297 lines of code.
Long Method,TraktPlugin.GUI,GUICustomListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUICustomListItem.cs,GetImages,The method has 156 lines of code.
Long Method,TraktPlugin.GUI,GUICustomListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUICustomListItem.cs,SetImageToGui,The method has 72 lines of code.
Long Method,TraktPlugin.GUI,GUIEpisodeListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,GetImages,The method has 83 lines of code.
Long Method,TraktPlugin.GUI,GUIMovieListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIMovieListItem.cs,GetImages,The method has 61 lines of code.
Long Method,TraktPlugin.GUI,GUISeasonListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUISeasonListItem.cs,GetImages,The method has 76 lines of code.
Long Method,TraktPlugin.GUI,GUIShowListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIShowListItem.cs,GetImages,The method has 63 lines of code.
Long Method,TraktPlugin.GUI,GUILists,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,OnShowContextMenu,The method has 102 lines of code.
Long Method,TraktPlugin.GUI,GUILists,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,CopyList,The method has 75 lines of code.
Long Method,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnClicked,The method has 61 lines of code.
Long Method,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnShowContextMenu,The method has 108 lines of code.
Long Method,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnClicked,The method has 90 lines of code.
Long Method,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnShowContextMenu,The method has 140 lines of code.
Long Method,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,LoadActivityTypes,The method has 97 lines of code.
Long Method,TraktPlugin.GUI,GUIPersonShowCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnClicked,The method has 67 lines of code.
Long Method,TraktPlugin.GUI,GUIPersonShowCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnShowContextMenu,The method has 95 lines of code.
Long Method,TraktPlugin.GUI,GUIPersonSummary,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonSummary.cs,SendMovieCreditsToFacade,The method has 206 lines of code.
Long Method,TraktPlugin.GUI,GUIPersonSummary,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonSummary.cs,SendShowCreditsToFacade,The method has 224 lines of code.
Long Method,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The method has 91 lines of code.
Long Method,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnClicked,The method has 76 lines of code.
Long Method,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnShowContextMenu,The method has 110 lines of code.
Long Method,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,SendPopularMoviesToFacade,The method has 77 lines of code.
Long Method,TraktPlugin.GUI,GUIPopularShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnClicked,The method has 82 lines of code.
Long Method,TraktPlugin.GUI,GUIPopularShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnShowContextMenu,The method has 97 lines of code.
Long Method,TraktPlugin.GUI,GUIPopularShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,SendPopularShowsToFacade,The method has 75 lines of code.
Long Method,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,OnShowContextMenu,The method has 174 lines of code.
Long Method,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,SendRecentlyAddedToFacade,The method has 76 lines of code.
Long Method,TraktPlugin.GUI,GUIRecentAddedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedMovies.cs,OnShowContextMenu,The method has 156 lines of code.
Long Method,TraktPlugin.GUI,GUIRecentShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,OnShowContextMenu,The method has 138 lines of code.
Long Method,TraktPlugin.GUI,GUIRecentShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,GetContextMenuItemsForComment,The method has 66 lines of code.
Long Method,TraktPlugin.GUI,GUIRelatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,OnShowContextMenu,The method has 203 lines of code.
Long Method,TraktPlugin.GUI,GUIRelatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedShows.cs,OnShowContextMenu,The method has 172 lines of code.
Long Method,TraktPlugin.GUI,GUISearchEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchEpisodes.cs,OnShowContextMenu,The method has 175 lines of code.
Long Method,TraktPlugin.GUI,GUISearchMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchMovies.cs,OnShowContextMenu,The method has 177 lines of code.
Long Method,TraktPlugin.GUI,GUISearchShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchShows.cs,OnShowContextMenu,The method has 148 lines of code.
Long Method,TraktPlugin.GUI,GUISeasonEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISeasonEpisodes.cs,OnShowContextMenu,The method has 143 lines of code.
Long Method,TraktPlugin.GUI,GUISeasonEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISeasonEpisodes.cs,SendSeasonEpisodesToFacade,The method has 62 lines of code.
Long Method,TraktPlugin.GUI,GUISettingsAccount,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsAccount.cs,OnClicked,The method has 72 lines of code.
Long Method,TraktPlugin.GUI,GUISettingsPlugins,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsPlugins.cs,OnPageDestroy,The method has 92 lines of code.
Long Method,TraktPlugin.GUI,GUIShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,OnShowContextMenu,The method has 86 lines of code.
Long Method,TraktPlugin.GUI,GUIShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,SendCommentsToFacade,The method has 77 lines of code.
Long Method,TraktPlugin.GUI,GUIShowSeasons,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShowSeasons.cs,OnShowContextMenu,The method has 95 lines of code.
Long Method,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,OnShowContextMenu,The method has 172 lines of code.
Long Method,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,SendRecentlyWatchedToFacade,The method has 63 lines of code.
Long Method,TraktPlugin.GUI,GUIRecentWatchedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedMovies.cs,OnShowContextMenu,The method has 173 lines of code.
Long Method,TraktPlugin.GUI,GUIUserProfile,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUserProfile.cs,LoadActivityTypes,The method has 89 lines of code.
Long Method,TraktPlugin.GUI,GUIWatchListEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,OnShowContextMenu,The method has 102 lines of code.
Long Method,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnClicked,The method has 91 lines of code.
Long Method,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnShowContextMenu,The method has 206 lines of code.
Long Method,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,SendRecommendedMoviesToFacade,The method has 67 lines of code.
Long Method,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,The method has 101 lines of code.
Long Method,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnShowContextMenu,The method has 163 lines of code.
Long Method,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,SendRecommendedShowsToFacade,The method has 62 lines of code.
Long Method,TraktPlugin.GUI,GUITrendingShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnClicked,The method has 82 lines of code.
Long Method,TraktPlugin.GUI,GUITrendingShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnShowContextMenu,The method has 97 lines of code.
Long Method,TraktPlugin.GUI,GUITrendingShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,SendTrendingShowsToFacade,The method has 83 lines of code.
Long Method,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnAction,The method has 67 lines of code.
Long Method,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnClicked,The method has 60 lines of code.
Long Method,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnClicked,The method has 76 lines of code.
Long Method,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnShowContextMenu,The method has 110 lines of code.
Long Method,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,SendTrendingMoviesToFacade,The method has 86 lines of code.
Long Method,TraktPlugin.GUI,GUIBackgroundTask,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBackgroundTask.cs,ExecuteInBackgroundAndCallback,The method has 62 lines of code.
Long Method,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The method has 65 lines of code.
Long Method,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnShowContextMenu,The method has 213 lines of code.
Long Method,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,SendCalendarToFacade,The method has 104 lines of code.
Long Method,TraktPlugin.GUI,GUIWatchListMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListMovies.cs,OnShowContextMenu,The method has 225 lines of code.
Long Method,TraktPlugin.GUI,GUIWatchListShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListShows.cs,OnShowContextMenu,The method has 154 lines of code.
Long Method,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetDashboardSkinSettings,The method has 86 lines of code.
Long Method,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The method has 75 lines of code.
Long Method,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowRateDialog,The method has 131 lines of code.
Long Method,TraktPlugin.TmdbAPI,TmdbAPI,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TmdbAPI\TmdbAPI.cs,GetFromTmdb,The method has 61 lines of code.
Long Method,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The method has 461 lines of code.
Long Method,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The method has 82 lines of code.
Long Method,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,ShowRateDialog,The method has 70 lines of code.
Long Method,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,ShowRateDialog,The method has 65 lines of code.
Long Method,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The method has 375 lines of code.
Long Method,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,The method has 61 lines of code.
Long Method,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectUpdatedEx,The method has 102 lines of code.
Long Method,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectInserted,The method has 70 lines of code.
Long Method,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The method has 83 lines of code.
Long Method,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The method has 356 lines of code.
Long Method,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncProgress,The method has 65 lines of code.
Long Method,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The method has 373 lines of code.
Long Method,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The method has 66 lines of code.
Long Method,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetCollectedShowsForSyncEx,The method has 61 lines of code.
Long Method,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,ShowRateDialog,The method has 93 lines of code.
Complex Method,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,Configuration,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,ParseCommandLine,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,SetPriorityOrder,Cyclomatic complexity of the method is 28
Complex Method,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,clbPlugins_ItemCheck,Cyclomatic complexity of the method is 27
Complex Method,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,MovieSelect_Load,Cyclomatic complexity of the method is 15
Complex Method,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,checkedListBoxMovies_ItemCheck,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,btnOk_Click,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,checkedListBoxSeries_ItemCheck,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetLikedListsFromTrakt,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedEpisodesFromTrakt,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedShowsFromTrakt,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedSeasonsFromTrakt,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedMoviesFromTrakt,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedListsFromTrakt,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetLikedCommentsFromTrakt,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivityDescription,Cyclomatic complexity of the method is 18
Complex Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadActivityFacade,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingMovies,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingShows,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivityImage,Cyclomatic complexity of the method is 30
Complex Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,Cyclomatic complexity of the method is 70
Complex Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,Cyclomatic complexity of the method is 27
Complex Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityFilterActionsMenu,Cyclomatic complexity of the method is 28
Complex Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityFilterTypesMenu,Cyclomatic complexity of the method is 22
Complex Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowTrendingShowsContextMenu,Cyclomatic complexity of the method is 62
Complex Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowTrendingMoviesContextMenu,Cyclomatic complexity of the method is 75
Complex Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityContextMenu,Cyclomatic complexity of the method is 111
Complex Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ViewShout,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PlayActivityItem,Cyclomatic complexity of the method is 25
Complex Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,OnActivitySelected,Cyclomatic complexity of the method is 37
Complex Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GUIWindowManager_Receivers,Cyclomatic complexity of the method is 41
Complex Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GUIWindowManager_OnNewAction,Cyclomatic complexity of the method is 24
Complex Method,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,Init,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin,TraktLogger,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,LogTraktResponse,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,UnLoadPluginHandlers,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,LoadPluginHandlers,Cyclomatic complexity of the method is 29
Complex Method,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,Cyclomatic complexity of the method is 59
Complex Method,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,Cyclomatic complexity of the method is 14
Complex Method,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,Cyclomatic complexity of the method is 95
Complex Method,TraktPlugin.GUI,AsyncImageResource,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cornerstone.MP\AsyncImageResource.cs,LoadImageSafe,Cyclomatic complexity of the method is 14
Complex Method,TraktPlugin.GUI,GUIAnticipatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,OnClicked,Cyclomatic complexity of the method is 24
Complex Method,TraktPlugin.GUI,GUIAnticipatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,OnAction,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUIAnticipatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,OnShowContextMenu,Cyclomatic complexity of the method is 83
Complex Method,TraktPlugin.GUI,GUIBoxOffice,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBoxOffice.cs,OnClicked,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUIBoxOffice,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBoxOffice.cs,OnAction,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUIBoxOffice,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBoxOffice.cs,OnShowContextMenu,Cyclomatic complexity of the method is 82
Complex Method,TraktPlugin.GUI,GUICreditsMovie,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsMovie.cs,OnClicked,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUICreditsMovie,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsMovie.cs,OnAction,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUICreditsMovie,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsMovie.cs,SendCreditResultsToFacade,Cyclomatic complexity of the method is 20
Complex Method,TraktPlugin.GUI,GUICreditsShow,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsShow.cs,OnClicked,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUICreditsShow,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsShow.cs,OnAction,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUICreditsShow,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsShow.cs,SendCreditResultsToFacade,Cyclomatic complexity of the method is 20
Complex Method,TraktPlugin.GUI,GUIAnticipatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,OnClicked,Cyclomatic complexity of the method is 25
Complex Method,TraktPlugin.GUI,GUIAnticipatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,OnAction,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUIAnticipatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,OnShowContextMenu,Cyclomatic complexity of the method is 70
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayMovie,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayFirstUnwatchedEpisode,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetContextMenuItemsForActivity,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CreateMoviesContextMenu,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CreateShowsContextMenu,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetLayoutTranslation,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowSortMenu,Cyclomatic complexity of the method is 40
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetSortByString,Cyclomatic complexity of the method is 30
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowSearchByMenu,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,Cyclomatic complexity of the method is 72
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,Cyclomatic complexity of the method is 78
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,Cyclomatic complexity of the method is 37
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,Cyclomatic complexity of the method is 42
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowMovieFiltersMenu,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTVShowFiltersMenu,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityListItemTitle,Cyclomatic complexity of the method is 51
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityItemName,Cyclomatic complexity of the method is 46
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckRatingOnMovie,Cyclomatic complexity of the method is 18
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckRatingOnShow,Cyclomatic complexity of the method is 33
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetTranslatedCreditJob,Cyclomatic complexity of the method is 111
Complex Method,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetTranslatedCreditType,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUIDialogMultiSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogMultiSelect.cs,OnClicked,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUIListItemMovieSorter,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItemSorter.cs,Compare,Cyclomatic complexity of the method is 27
Complex Method,TraktPlugin.GUI,GUIListItemShowSorter,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItemSorter.cs,Compare,Cyclomatic complexity of the method is 27
Complex Method,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnClicked,Cyclomatic complexity of the method is 14
Complex Method,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnAction,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnShowContextMenu,Cyclomatic complexity of the method is 126
Complex Method,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,GetSyncItems,Cyclomatic complexity of the method is 25
Complex Method,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,ListItemMatch,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,GetListItemLabel,Cyclomatic complexity of the method is 15
Complex Method,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,GetListItemSecondLabel,Cyclomatic complexity of the method is 15
Complex Method,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,GetTmdbImage,Cyclomatic complexity of the method is 17
Complex Method,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnItemSelected,Cyclomatic complexity of the method is 32
Complex Method,TraktPlugin.GUI,GUICustomListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUICustomListItem.cs,SetImageToGui,Cyclomatic complexity of the method is 18
Complex Method,TraktPlugin.GUI,GUIEpisodeListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,SetImageToGui,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUIMovieListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIMovieListItem.cs,SetImageToGui,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUIShowListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIShowListItem.cs,SetImageToGui,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUILists,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,OnAction,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUILists,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,OnShowContextMenu,Cyclomatic complexity of the method is 31
Complex Method,TraktPlugin.GUI,GUILists,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,SendListsToFacade,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnClicked,Cyclomatic complexity of the method is 40
Complex Method,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnAction,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnShowContextMenu,Cyclomatic complexity of the method is 86
Complex Method,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,ShowMovieFiltersMenu,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnClicked,Cyclomatic complexity of the method is 26
Complex Method,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnShowContextMenu,Cyclomatic complexity of the method is 37
Complex Method,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnActivityTypeSelected,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.GUI,GUIPersonShowCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnClicked,Cyclomatic complexity of the method is 41
Complex Method,TraktPlugin.GUI,GUIPersonShowCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnAction,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUIPersonShowCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnShowContextMenu,Cyclomatic complexity of the method is 73
Complex Method,TraktPlugin.GUI,GUIPersonShowCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,ShowTVShowFiltersMenu,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUIPersonSummary,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonSummary.cs,OnPageLoad,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUIPersonSummary,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonSummary.cs,OnClicked,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUIPersonSummary,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonSummary.cs,OnAction,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUIPersonSummary,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonSummary.cs,SendMovieCreditsToFacade,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUIPersonSummary,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonSummary.cs,SendShowCreditsToFacade,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,Cyclomatic complexity of the method is 67
Complex Method,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnClicked,Cyclomatic complexity of the method is 42
Complex Method,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnAction,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnShowContextMenu,Cyclomatic complexity of the method is 86
Complex Method,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,ShowMovieFiltersMenu,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUIPopularShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnClicked,Cyclomatic complexity of the method is 43
Complex Method,TraktPlugin.GUI,GUIPopularShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnAction,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUIPopularShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnShowContextMenu,Cyclomatic complexity of the method is 73
Complex Method,TraktPlugin.GUI,GUIPopularShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,ShowTVShowFiltersMenu,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,OnClicked,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,OnAction,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,OnShowContextMenu,Cyclomatic complexity of the method is 79
Complex Method,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,SendRecentlyAddedToFacade,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUIRecentAddedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedMovies.cs,OnClicked,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUIRecentAddedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedMovies.cs,OnAction,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUIRecentAddedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedMovies.cs,OnShowContextMenu,Cyclomatic complexity of the method is 71
Complex Method,TraktPlugin.GUI,GUIRecentShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,OnClicked,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUIRecentShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,OnAction,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUIRecentShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,OnShowContextMenu,Cyclomatic complexity of the method is 58
Complex Method,TraktPlugin.GUI,GUIRecentShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,GetContextMenuItemsForComment,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUIRecentShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,PlayCommentItem,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUIRecentShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,GetTmdbImage,Cyclomatic complexity of the method is 16
Complex Method,TraktPlugin.GUI,GUIRecentShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,GetCommentItemTitle,Cyclomatic complexity of the method is 15
Complex Method,TraktPlugin.GUI,GUIRecentShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,OnCommentSelected,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.GUI,GUIRelatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,OnClicked,Cyclomatic complexity of the method is 15
Complex Method,TraktPlugin.GUI,GUIRelatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,OnAction,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUIRelatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,OnShowContextMenu,Cyclomatic complexity of the method is 92
Complex Method,TraktPlugin.GUI,GUIRelatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedShows.cs,OnClicked,Cyclomatic complexity of the method is 16
Complex Method,TraktPlugin.GUI,GUIRelatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedShows.cs,OnAction,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUIRelatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedShows.cs,OnShowContextMenu,Cyclomatic complexity of the method is 76
Complex Method,TraktPlugin.GUI,GUISearch,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,OnPageDestroy,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUISearch,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,OnClicked,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUISearch,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,OnAction,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUISearch,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,GetSearchListName,Cyclomatic complexity of the method is 18
Complex Method,TraktPlugin.GUI,GUISearch,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,SetSearchTypes,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUISearch,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,SendSearchResultsToWindow,Cyclomatic complexity of the method is 39
Complex Method,TraktPlugin.GUI,GUISearch,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,InitProperties,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUISearchEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchEpisodes.cs,OnClicked,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUISearchEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchEpisodes.cs,OnAction,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUISearchEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchEpisodes.cs,OnShowContextMenu,Cyclomatic complexity of the method is 78
Complex Method,TraktPlugin.GUI,GUISearchMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchMovies.cs,OnClicked,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUISearchMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchMovies.cs,OnAction,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUISearchMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchMovies.cs,OnShowContextMenu,Cyclomatic complexity of the method is 82
Complex Method,TraktPlugin.GUI,GUISearchPeople,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchPeople.cs,OnClicked,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUISearchPeople,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchPeople.cs,OnAction,Cyclomatic complexity of the method is 15
Complex Method,TraktPlugin.GUI,GUISearchPeople,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchPeople.cs,InitProperties,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUISearchShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchShows.cs,OnClicked,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUISearchShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchShows.cs,OnAction,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUISearchShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchShows.cs,OnShowContextMenu,Cyclomatic complexity of the method is 65
Complex Method,TraktPlugin.GUI,GUISearchUsers,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchUsers.cs,OnClicked,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUISearchUsers,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchUsers.cs,OnAction,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUISearchUsers,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchUsers.cs,OnShowContextMenu,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUISeasonEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISeasonEpisodes.cs,OnClicked,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUISeasonEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISeasonEpisodes.cs,OnAction,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUISeasonEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISeasonEpisodes.cs,OnShowContextMenu,Cyclomatic complexity of the method is 69
Complex Method,TraktPlugin.GUI,GUISettingsAccount,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsAccount.cs,OnClicked,Cyclomatic complexity of the method is 39
Complex Method,TraktPlugin.GUI,GUISettingsGeneral,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsGeneral.cs,OnPageDestroy,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUISettingsPlugins,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsPlugins.cs,OnPageDestroy,Cyclomatic complexity of the method is 23
Complex Method,TraktPlugin.GUI,GUISettingsPlugins,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsPlugins.cs,OnClicked,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUISettingsPlugins,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsPlugins.cs,InitProperties,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.GUI,GUIShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,OnClicked,Cyclomatic complexity of the method is 19
Complex Method,TraktPlugin.GUI,GUIShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,OnAction,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUIShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,OnShowContextMenu,Cyclomatic complexity of the method is 33
Complex Method,TraktPlugin.GUI,GUIShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,SendCommentsToFacade,Cyclomatic complexity of the method is 18
Complex Method,TraktPlugin.GUI,GUIShowSeasons,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShowSeasons.cs,OnClicked,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUIShowSeasons,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShowSeasons.cs,OnShowContextMenu,Cyclomatic complexity of the method is 39
Complex Method,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,OnClicked,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,OnAction,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,OnShowContextMenu,Cyclomatic complexity of the method is 79
Complex Method,TraktPlugin.GUI,GUIRecentWatchedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedMovies.cs,OnClicked,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUIRecentWatchedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedMovies.cs,OnAction,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,GUIRecentWatchedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedMovies.cs,OnShowContextMenu,Cyclomatic complexity of the method is 83
Complex Method,TraktPlugin.GUI,GUIUserProfile,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUserProfile.cs,OnClicked,Cyclomatic complexity of the method is 43
Complex Method,TraktPlugin.GUI,GUIUserProfile,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUserProfile.cs,OnAction,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUIUserProfile,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUserProfile.cs,OnActivityTypeSelected,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUIWatchListEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,OnClicked,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.GUI,GUIWatchListEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,OnAction,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.GUI,GUIWatchListEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,OnShowContextMenu,Cyclomatic complexity of the method is 32
Complex Method,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnClicked,Cyclomatic complexity of the method is 30
Complex Method,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnAction,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnShowContextMenu,Cyclomatic complexity of the method is 84
Complex Method,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,SendRecommendedMoviesToFacade,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,InitProperties,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,Cyclomatic complexity of the method is 31
Complex Method,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnAction,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnShowContextMenu,Cyclomatic complexity of the method is 67
Complex Method,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,SendRecommendedShowsToFacade,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,InitProperties,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUITrendingShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnClicked,Cyclomatic complexity of the method is 43
Complex Method,TraktPlugin.GUI,GUITrendingShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnAction,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUITrendingShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnShowContextMenu,Cyclomatic complexity of the method is 73
Complex Method,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnAction,Cyclomatic complexity of the method is 54
Complex Method,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnClicked,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnMessage,Cyclomatic complexity of the method is 16
Complex Method,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,GetRatingDescription,Cyclomatic complexity of the method is 33
Complex Method,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnClicked,Cyclomatic complexity of the method is 42
Complex Method,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnAction,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnShowContextMenu,Cyclomatic complexity of the method is 86
Complex Method,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnPageDestroy,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,Cyclomatic complexity of the method is 29
Complex Method,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnAction,Cyclomatic complexity of the method is 14
Complex Method,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnShowContextMenu,Cyclomatic complexity of the method is 106
Complex Method,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,SendCalendarToFacade,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,SetCurrentView,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUIImageHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,LocalImageFilename,Cyclomatic complexity of the method is 44
Complex Method,TraktPlugin.GUI,GUIWatchListMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListMovies.cs,OnClicked,Cyclomatic complexity of the method is 15
Complex Method,TraktPlugin.GUI,GUIWatchListMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListMovies.cs,OnAction,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.GUI,GUIWatchListMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListMovies.cs,OnShowContextMenu,Cyclomatic complexity of the method is 90
Complex Method,TraktPlugin.GUI,GUIWatchListShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListShows.cs,OnClicked,Cyclomatic complexity of the method is 16
Complex Method,TraktPlugin.GUI,GUIWatchListShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListShows.cs,OnAction,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.GUI,GUIWatchListShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListShows.cs,OnShowContextMenu,Cyclomatic complexity of the method is 63
Complex Method,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetDashboardSkinSettings,Cyclomatic complexity of the method is 21
Complex Method,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.GUI,Translation,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktTranslations.cs,LoadTranslations,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,Cyclomatic complexity of the method is 10
Complex Method,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowRateDialog,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.Extensions,SecurityExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\SecurityExtensions.cs,Encrypt,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.Extensions,SecurityExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\SecurityExtensions.cs,Decrypt,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,Cyclomatic complexity of the method is 58
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,Cyclomatic complexity of the method is 43
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,Scrobble,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,StopScrobble,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieResolution,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieAudioCodec,Cyclomatic complexity of the method is 11
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieAudioChannels,Cyclomatic complexity of the method is 14
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,AddMoviesCriteriaToNode,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,UpdateCategoriesMenu,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,UpdateFiltersMenu,Cyclomatic complexity of the method is 9
Complex Method,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,Cyclomatic complexity of the method is 40
Complex Method,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncProgress,Cyclomatic complexity of the method is 12
Complex Method,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,GetMovieResolution,Cyclomatic complexity of the method is 8
Complex Method,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,GetMovieAudioCodec,Cyclomatic complexity of the method is 15
Complex Method,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,GetMovieAudioChannels,Cyclomatic complexity of the method is 7
Complex Method,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,Cyclomatic complexity of the method is 48
Complex Method,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeAudioCodec,Cyclomatic complexity of the method is 13
Complex Method,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeAudioChannels,Cyclomatic complexity of the method is 9
Long Parameter List,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetEpisodeImages,The method has 4 parameters.
Long Parameter List,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,AddEpisodeImagesToCache,The method has 4 parameters.
Long Parameter List,TraktPlugin,ConfigConnector,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\ConfigConnector.cs,GetHome,The method has 4 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddMovieToWatchList,The method has 4 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddMovieToWatchList,The method has 5 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddMovieToWatchList,The method has 6 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveMovieFromWatchList,The method has 5 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveMovieFromWatchList,The method has 6 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddShowToWatchList,The method has 6 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveShowFromWatchList,The method has 6 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddSeasonToWatchList,The method has 7 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveSeasonFromWatchList,The method has 7 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddEpisodeToWatchList,The method has 7 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveEpisodeFromWatchList,The method has 7 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddRemoveMovieInUserList,The method has 4 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddRemoveMovieInUserList,The method has 7 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddRemoveShowInUserList,The method has 4 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddRemoveShowInUserList,The method has 8 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowRelatedMovies,The method has 5 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowRelatedShows,The method has 6 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowMovieShouts,The method has 4 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowMovieShouts,The method has 5 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowMovieShouts,The method has 5 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowMovieShouts,The method has 7 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowTVShowShouts,The method has 6 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowTVShowShouts,The method has 8 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowTVSeasonShouts,The method has 9 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowEpisodeShouts,The method has 7 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowEpisodeShouts,The method has 8 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowEpisodeShouts,The method has 10 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddMovieToWatchHistory,The method has 5 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveMovieFromWatchHistory,The method has 5 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddEpisodeToWatchHistory,The method has 7 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveEpisodeFromWatchHistory,The method has 7 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddMovieToCollection,The method has 5 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveMovieFromLibrary,The method has 5 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddEpisodeToCollection,The method has 7 parameters.
Long Parameter List,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveEpisodeFromCollection,The method has 7 parameters.
Long Parameter List,TraktPlugin,TraktLogger,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,TraktAPI_OnLatency,The method has 4 parameters.
Long Parameter List,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,GetValueAsIntAndValidate,The method has 5 parameters.
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The method has 4 parameters.
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The method has 5 parameters.
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The method has 6 parameters.
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The method has 7 parameters.
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The method has 4 parameters.
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The method has 5 parameters.
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The method has 6 parameters.
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The method has 7 parameters.
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The method has 8 parameters.
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The method has 9 parameters.
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The method has 6 parameters.
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The method has 7 parameters.
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The method has 8 parameters.
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The method has 9 parameters.
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The method has 10 parameters.
Long Parameter List,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The method has 11 parameters.
Long Parameter List,TraktPlugin.GUI,GUIBackgroundTask,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBackgroundTask.cs,ExecuteInBackgroundAndCallback,The method has 4 parameters.
Long Parameter List,TraktPlugin.GUI,GUIWindowExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIExtensions.cs,UpdateItemIfSelected,The method has 4 parameters.
Long Parameter List,TraktPlugin.GUI,GUIImageHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,DrawOverlayOnPoster,The method has 4 parameters.
Long Parameter List,TraktPlugin.GUI,GUIImageHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,DrawOverlayOnEpisodeThumb,The method has 4 parameters.
Long Parameter List,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The method has 4 parameters.
Long Parameter List,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The method has 5 parameters.
Long Parameter List,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowOKDialog,The method has 5 parameters.
Long Parameter List,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowNotifyDialog,The method has 5 parameters.
Long Parameter List,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,FindMovie,The method has 5 parameters.
Long Parameter List,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SetUserRating,The method has 4 parameters.
Long Parameter List,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,FindMovieID,The method has 5 parameters.
Long Parameter List,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,FindMovieID,The method has 5 parameters.
Long Parameter List,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeInfo,The method has 8 parameters.
Long Parameter List,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetSeriesInfo,The method has 4 parameters.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetTmdbConfiguration,The length of the statement  "		if (TraktSettings.TmdbConfiguration == null || TraktSettings.TmdbConfiguration.Images == null || DateTime.Now.Subtract (new TimeSpan (14' 0' 0' 0' 0)) > lastRequestedDate) { " is 173.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,LoadFileCache,The length of the statement  "		TraktLogger.Error (string.Format ("Error loading file from disk. Filename = '{0}'' Error = '{1}'"' filename' e.Message)); " is 121.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetMovieImages,The length of the statement  "		if (DateTime.Now.Subtract (new TimeSpan (TraktSettings.TmdbMovieImageMaxCacheAge' 0' 0' 0' 0)) < Convert.ToDateTime (movieImages.RequestAge)) { " is 143.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetMoviePosterFilename,The length of the statement  "	return Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt\Movies\Posters\") + images.Id + "_" + TraktSettings.TmdbPreferredPosterSize + "_" + moviePoster.FilePath.TrimStart ('/'); " is 188.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetMovieBackdropFilename,The length of the statement  "	return Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt\Movies\Backdrops\") + images.Id + "_" + (TraktSettings.DownloadFullSizeFanart ? "original" : TraktSettings.TmdbPreferredBackdropSize) + "_" + movieBackdrop.FilePath.TrimStart ('/'); " is 248.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetMovieBackdropUrl,The length of the statement  "	return TraktSettings.TmdbConfiguration.Images.BaseUrl + (TraktSettings.DownloadFullSizeFanart ? "original" : TraktSettings.TmdbPreferredBackdropSize) + movieBackdrop.FilePath; " is 175.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetShowImages,The length of the statement  "		if (DateTime.Now.Subtract (new TimeSpan (TraktSettings.TmdbShowImageMaxCacheAge' 0' 0' 0' 0)) < Convert.ToDateTime (showImages.RequestAge)) { " is 141.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetShowPosterFilename,The length of the statement  "	return Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt\Shows\Posters\") + images.Id + "_" + TraktSettings.TmdbPreferredPosterSize + "_" + showPoster.FilePath.TrimStart ('/'); " is 186.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetShowBackdropFilename,The length of the statement  "	return Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt\Shows\Backdrops\") + images.Id + "_" + (TraktSettings.DownloadFullSizeFanart ? "original" : TraktSettings.TmdbPreferredBackdropSize) + "_" + showBackdrop.FilePath.TrimStart ('/'); " is 246.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetShowBackdropUrl,The length of the statement  "	return TraktSettings.TmdbConfiguration.Images.BaseUrl + (TraktSettings.DownloadFullSizeFanart ? "original" : TraktSettings.TmdbPreferredBackdropSize) + showBackdrop.FilePath; " is 174.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetEpisodeImages,The length of the statement  "		if (DateTime.Now.Subtract (new TimeSpan (TraktSettings.TmdbEpisodeImageMaxCacheAge' 0' 0' 0' 0)) < Convert.ToDateTime (episodeImages.RequestAge)) { " is 147.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetEpisodeImages,The length of the statement  "		TraktLogger.Info ("Episode image cache expired. TMDb ID = '{0}'' Season = '{1}'' Episode = '{2}'' Request Age = '{3}'"' id' season' episode' episodeImages.RequestAge); " is 167.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetEpisodeThumbFilename,The length of the statement  "	return Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt\Episodes\Thumbs\") + images.Id + "_" + TraktSettings.TmdbPreferredPosterSize + "_" + episodeThumb.FilePath.TrimStart ('/'); " is 190.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetSeasonImages,The length of the statement  "		if (DateTime.Now.Subtract (new TimeSpan (TraktSettings.TmdbSeasonImageMaxCacheAge' 0' 0' 0' 0)) < Convert.ToDateTime (seasonImages.RequestAge)) { " is 145.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetSeasonImages,The length of the statement  "		TraktLogger.Info ("Season image cache expired. TMDb ID = '{0}'' Season = '{1}'' Request Age = '{2}'"' id' season' seasonImages.RequestAge); " is 139.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetSeasonPosterFilename,The length of the statement  "	return Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt\Seasons\Thumbs\") + images.Id + "_" + TraktSettings.TmdbPreferredPosterSize + "_" + seasonThumb.FilePath.TrimStart ('/'); " is 188.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetPersonImages,The length of the statement  "		if (DateTime.Now.Subtract (new TimeSpan (TraktSettings.TmdbPersonImageMaxCacheAge' 0' 0' 0' 0)) < Convert.ToDateTime (personImages.RequestAge)) { " is 145.
Long Statement,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetPersonHeadshotFilename,The length of the statement  "	return Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt\People\Headshots\") + images.Id + "_" + TraktSettings.TmdbPreferredPosterSize + "_" + personThumb.FilePath.TrimStart ('/'); " is 190.
Long Statement,TraktPlugin,ConfigConnector,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\ConfigConnector.cs,Description,The length of the statement  "	return "Trakt actively keeps a record of what TV shows and movies you are watching. Based on your favourites' your friends' and the community' trakt recommends other TV shows and movies."; " is 188.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,ParseCommandLine,The length of the statement  "	TraktLogger.Info ("Command Line Options Set' SilentMode = '{0}'' AutoSync = '{1}'' CloseAfterSync = '{2}'"' SilentMode' AutoSync' AutoCloseAfterSync); " is 150.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,cbKeepInSync_CheckedChanged,The length of the statement  "	//IMPORTANT NOTE on support for more than one library backend for the same video type (i.e movies) we shouldn't keep in sync ever. " is 130.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,CloseConfig,The length of the statement  "	if (TraktSettings.KeepTraktLibraryClean && (TraktSettings.MoviePluginCount > 1 || TraktSettings.TvShowPluginCount > 1)) { " is 121.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,CloseConfig,The length of the statement  "		string message = "You can not have 'Clean Library' option enabled with more than one movie or show plugin enabled. Option will be disabled."; " is 141.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,btnTVSeriesRestrictions_Click,The length of the statement  "		MessageBox.Show ("Could not load series list' ensure that MP-TVSeries plugin is installed."' "Series Select"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 154.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(Configuration)); " is 134.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.gbSync.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 185.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.ttpConfig.SetToolTip (this.cbSyncPlaybackOnEnterPlugin' "Sync playback/resume data when entering an enabled plugin.\r\nThis is in addition t" + "o syncing when the system starts up and resumes from standby."); " is 214.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.cbSyncPlaybackOnEnterPlugin.CheckedChanged += new System.EventHandler (this.cbSyncPlaybackOnEnterPlugin_CheckedChanged); " is 125.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.ttpConfig.SetToolTip (this.numSyncInterval' "Enter the period in hours to sync with trakt.tv for your selected \r\nsync options " + "(Collection' Ratings' Watched etc)."); " is 176.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.ttpConfig.SetToolTip (this.numSyncResumeDelta' "You may wish to re-play X seconds from where you left off' this setting \r\nallows " + "you control how far back to start when prompted."); " is 192.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.ttpConfig.SetToolTip (this.cbSyncPlayback' "Sync playback / resume data for partially watched videos. This allows\r\nyou to con" + "tinue where you left off.\r\n\r\nThis is done when the system starts up or when you " + "resume from standby."); " is 249.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.ttpConfig.SetToolTip (this.cbSyncLibrary' "Enable this setting to synchronise your collection and watched states to and from" + " trakt.tv. \r\nIf disabled' only scrobbling will be active."); " is 196.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.ttpConfig.SetToolTip (this.lbSyncTimerLength' "Set this to the value in hours that you want to wait to resync with Trakt"); " is 128.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.btnOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.ttpConfig.SetToolTip (this.btnTVSeriesRestrictions' "Select the series you want to ignore from Syncronization and Scrobbling."); " is 133.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.ttpConfig.SetToolTip (this.txtPinCode' "Enter in a 4-digit pin code to prevent playback of inappropriate material."); " is 122.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.progressBarSync.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 197.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.lblSyncStatus.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 195.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.btnStartLibrarySync.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 201.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.gbParentalControls.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 197.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.cboMovieCertifications.SelectedValueChanged += new System.EventHandler (this.cboMovieCertifications_SelectedValueChanged); " is 127.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.cbParentalIgnoreMovieCertifications.CheckedChanged += new System.EventHandler (this.cbParentalIgnoreMovieCertifications_CheckedChanged); " is 141.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.cboTVCertifications.SelectedValueChanged += new System.EventHandler (this.cboTVCertifications_SelectedValueChanged); " is 121.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.cbParentalIgnoreShowCertifications.CheckedChanged += new System.EventHandler (this.cbParentalIgnoreShowCertifications_CheckedChanged); " is 139.
Long Statement,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The length of the statement  "	this.cboPreferredImageLanguage.SelectedIndexChanged += new System.EventHandler (this.cboPreferredImageLanguage_SelectedIndexChanged); " is 133.
Long Statement,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The length of the statement  "	this.listFolders.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 235.
Long Statement,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The length of the statement  "	this.btnOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The length of the statement  "	this.btnAdd.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 142.
Long Statement,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The length of the statement  "	this.btnDelete.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,MovieSelect_Load,The length of the statement  "	if (TraktSettings.MovingPictures > -1 && File.Exists (Path.Combine (Config.GetFolder (Config.Dir.Plugins)' @"Windows\MovingPictures.dll"))) { " is 141.
Long Statement,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,MovieSelect_Load,The length of the statement  "		string sql = "SELECT movieinfo.strTitle' path.strPath' files.strFilename " + "FROM movieInfo " + "LEFT JOIN files " + "ON movieInfo.idMovie=files.idMovie " + "LEFT JOIN path " + "ON files.idPath=path.idPath " + "ORDER BY strTitle"; " is 231.
Long Statement,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,MovieSelect_Load,The length of the statement  "	if (TraktSettings.MyFilms > -1 && File.Exists (Path.Combine (Config.GetFolder (Config.Dir.Plugins)' @"Windows\MyFilms.dll"))) { " is 127.
Long Statement,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,LoadMoviesFromMovingPictures,The length of the statement  "	List<MediaPortal.Plugins.MovingPictures.Database.DBMovieInfo> movies = MediaPortal.Plugins.MovingPictures.Database.DBMovieInfo.GetAll (); " is 137.
Long Statement,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The length of the statement  "	this.checkedListBoxMovies.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 244.
Long Statement,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The length of the statement  "	this.btnOk.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The length of the statement  "	this.btnFolderRestrictions.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 159.
Long Statement,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,OnLoad,The length of the statement  "	this.checkedListBoxSeries.ItemCheck += new System.Windows.Forms.ItemCheckEventHandler (this.checkedListBoxSeries_ItemCheck); " is 124.
Long Statement,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The length of the statement  "	this.checkedListBoxSeries.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 244.
Long Statement,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The length of the statement  "	this.buttonOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The length of the statement  "	this.chkBoxToggleAll.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 153.
Long Statement,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The length of the statement  "	this.labelSeriesSelected.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 158.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetUnWatchedMoviesFromTrakt,The length of the statement  "	TraktLogger.Debug ("Comparing previous watched movies against current watched movies such that unwatched can be determined"); " is 125.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetWatchedMoviesFromTrakt,The length of the statement  "	TraktLogger.Info ("Movie watched history cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Movies.Watched ?? "<empty>"' lastSyncActivities.Movies.Watched ?? "<empty>"); " is 240.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCollectedMoviesFromTrakt,The length of the statement  "	TraktLogger.Info ("Movie collection cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Movies.Collection ?? "<empty>"' lastSyncActivities.Movies.Collection ?? "<empty>"); " is 241.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetRatedMoviesFromTrakt,The length of the statement  "	TraktLogger.Info ("Movie ratings cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Movies.Rating ?? "<empty>"' lastSyncActivities.Movies.Rating ?? "<empty>"); " is 230.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCollectedEpisodesFromTrakt,The length of the statement  "	TraktLogger.Info ("TV episode collection cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Episodes.Collection ?? "<empty>"' lastSyncActivities.Episodes.Collection ?? "<empty>"); " is 250.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetWatchedEpisodesFromTrakt,The length of the statement  "	TraktLogger.Info ("TV episode watched history cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Episodes.Watched ?? "<empty>"' lastSyncActivities.Episodes.Watched ?? "<empty>"); " is 249.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetUnWatchedEpisodesFromTrakt,The length of the statement  "	TraktLogger.Debug ("Comparing previous watched episodes against current watched episodes such that unwatched can be determined"); " is 129.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetRatedEpisodesFromTrakt,The length of the statement  "	TraktLogger.Info ("TV episode ratings cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Episodes.Rating ?? "<empty>"' lastSyncActivities.Episodes.Rating ?? "<empty>"); " is 239.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetRatedSeasonsFromTrakt,The length of the statement  "	TraktLogger.Info ("TV season ratings cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Seasons.Rating ?? "<empty>"' lastSyncActivities.Seasons.Rating ?? "<empty>"); " is 236.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetRatedShowsFromTrakt,The length of the statement  "	TraktLogger.Info ("TV show ratings cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Shows.Rating ?? "<empty>"' lastSyncActivities.Shows.Rating ?? "<empty>"); " is 230.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetWatchlistedMoviesFromTrakt,The length of the statement  "		TraktLogger.Info ("Movie watchlist cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Movies.Watchlist ?? "<empty>"' lastSyncActivities.Movies.Watchlist ?? "<empty>"); " is 238.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetRecommendedMoviesFromTrakt,The length of the statement  "		if (_RecommendedMovies != null && (DateTime.Now - MovieRecommendationsAge) > TimeSpan.FromMinutes (TraktSettings.WebRequestCacheMinutes)) { " is 139.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetWatchlistedShowsFromTrakt,The length of the statement  "		TraktLogger.Info ("TV show watchlist cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Shows.Watchlist ?? "<empty>"' lastSyncActivities.Shows.Watchlist ?? "<empty>"); " is 238.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetWatchlistedSeasonsFromTrakt,The length of the statement  "		TraktLogger.Info ("TV seasons watchlist cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Seasons.Watchlist ?? "<empty>"' lastSyncActivities.Seasons.Watchlist ?? "<empty>"); " is 245.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetWatchlistedEpisodesFromTrakt,The length of the statement  "		TraktLogger.Info ("TV episode watchlist cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Episodes.Watchlist ?? "<empty>"' lastSyncActivities.Episodes.Watchlist ?? "<empty>"); " is 247.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCustomListsFromTrakt,The length of the statement  "	TraktLogger.Info ("Custom Lists cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Lists.UpdatedAt ?? "<empty>"' lastSyncActivities.Lists.UpdatedAt ?? "<empty>"); " is 233.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCustomLists,The length of the statement  "		if (_CustomListsAndItems == null || (DateTime.Now - CustomListAge) > TimeSpan.FromMinutes (TraktSettings.WebRequestCacheMinutes)) { " is 131.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCustomLists,The length of the statement  "				TraktLogger.Info ("Getting list details for custom list from local cache. Name = '{0}'' ID = '{1}'' Slug = '{2}'"' list.Name' list.Ids.Trakt' list.Ids.Slug); " is 157.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCustomLists,The length of the statement  "					TraktLogger.Info ("Getting list details for custom list from trakt.tv' local cache is out of date. Name = '{0}'' Total Items = '{1}'' ID = '{2}'' Slug = '{3}'' Last Updated = '{4}'"' list.Name' list.ItemCount' list.Ids.Trakt' list.Ids.Slug' list.UpdatedAt); " is 257.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetLikedListsFromTrakt,The length of the statement  "	TraktLogger.Info ("Liked lists cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Lists.LikedAt ?? "<empty>"' lastSyncActivities.Lists.LikedAt ?? "<empty>"); " is 228.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedEpisodesFromTrakt,The length of the statement  "	TraktLogger.Info ("TV episode comments cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Episodes.Comment ?? "<empty>"' lastSyncActivities.Episodes.Comment ?? "<empty>"); " is 242.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedShowsFromTrakt,The length of the statement  "	TraktLogger.Info ("TV show comments cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Shows.Comment ?? "<empty>"' lastSyncActivities.Shows.Comment ?? "<empty>"); " is 233.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedSeasonsFromTrakt,The length of the statement  "	TraktLogger.Info ("TV season comments cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Seasons.Comment ?? "<empty>"' lastSyncActivities.Seasons.Comment ?? "<empty>"); " is 239.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedMoviesFromTrakt,The length of the statement  "	TraktLogger.Info ("Movie comments cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Movies.Comment ?? "<empty>"' lastSyncActivities.Movies.Comment ?? "<empty>"); " is 233.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedListsFromTrakt,The length of the statement  "	TraktLogger.Info ("List comments cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Lists.Comment ?? "<empty>"' lastSyncActivities.Lists.Comment ?? "<empty>"); " is 230.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetLikedCommentsFromTrakt,The length of the statement  "	TraktLogger.Info ("Liked comments cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Comments.LikedAt ?? "<empty>"' lastSyncActivities.Comments.LikedAt ?? "<empty>"); " is 237.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetPausedMovies,The length of the statement  "	TraktLogger.Info ("Movie paused cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Movies.PausedAt ?? "<empty>"' lastSyncActivities.Movies.PausedAt ?? "<empty>"); " is 233.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetPausedEpisodes,The length of the statement  "	TraktLogger.Info ("TV episode paused cache is out of date' requesting updated data. Local Date = '{0}'' Online Date = '{1}'"' TraktSettings.LastSyncActivities.Episodes.PausedAt ?? "<empty>"' lastSyncActivities.Episodes.PausedAt ?? "<empty>"); " is 242.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,LoadFileCache,The length of the statement  "		TraktLogger.Error (string.Format ("Error loading file from disk. Filename = '{0}'' Error = '{1}'"' filename' e.Message)); " is 121.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsWatched,The length of the statement  "	return WatchedMovies.Any (m => ((m.Movie.Ids.Trakt == movie.Ids.Trakt) && m.Movie.Ids.Trakt != null) || ((m.Movie.Ids.Imdb == movie.Ids.Imdb) && m.Movie.Ids.Imdb.ToNullIfEmpty () != null) || ((m.Movie.Ids.Tmdb == movie.Ids.Tmdb) && m.Movie.Ids.Tmdb != null)); " is 259.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsCollected,The length of the statement  "	return CollectedMovies.Any (m => ((m.Movie.Ids.Trakt == movie.Ids.Trakt) && m.Movie.Ids.Trakt != null) || ((m.Movie.Ids.Imdb == movie.Ids.Imdb) && m.Movie.Ids.Imdb.ToNullIfEmpty () != null) || ((m.Movie.Ids.Tmdb == movie.Ids.Tmdb) && m.Movie.Ids.Tmdb != null)); " is 261.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsWatchlisted,The length of the statement  "	return WatchListMovies.Any (m => ((m.Movie.Ids.Trakt == movie.Ids.Trakt) && m.Movie.Ids.Trakt != null) || ((m.Movie.Ids.Imdb == movie.Ids.Imdb) && m.Movie.Ids.Imdb.ToNullIfEmpty () != null) || ((m.Movie.Ids.Tmdb == movie.Ids.Tmdb) && m.Movie.Ids.Tmdb != null)); " is 261.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,UserRating,The length of the statement  "	var ratedMovie = RatedMovies.FirstOrDefault (m => ((m.Movie.Ids.Trakt == movie.Ids.Trakt) && m.Movie.Ids.Trakt != null) || ((m.Movie.Ids.Imdb == movie.Ids.Imdb) && m.Movie.Ids.Imdb.ToNullIfEmpty () != null) || ((m.Movie.Ids.Tmdb == movie.Ids.Tmdb) && m.Movie.Ids.Tmdb != null)); " is 278.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,Plays,The length of the statement  "	var watchedMovies = WatchedMovies.Where (m => ((m.Movie.Ids.Trakt == movie.Ids.Trakt) && m.Movie.Ids.Trakt != null) || ((m.Movie.Ids.Imdb == movie.Ids.Imdb) && m.Movie.Ids.Imdb.ToNullIfEmpty () != null) || ((m.Movie.Ids.Tmdb == movie.Ids.Tmdb) && m.Movie.Ids.Tmdb != null)); " is 274.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsWatched,The length of the statement  "	int watchedEpisodeCount = watchedEpisodes.Where (e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && show.Ids.Tvdb != null)) && e.Season != 0).Count (); " is 196.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsCollected,The length of the statement  "	int collectedEpisodeCount = collectedEpisodes.Where (e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && show.Ids.Tvdb != null)) && e.Season != 0).Count (); " is 200.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsWatchlisted,The length of the statement  "	return WatchListShows.Any (s => (((s.Show.Ids.Trakt == show.Ids.Trakt) && s.Show.Ids.Trakt != null) || ((s.Show.Ids.Tvdb == show.Ids.Tvdb) && show.Ids.Tvdb != null))); " is 167.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,UserRating,The length of the statement  "	var ratedShow = RatedShows.FirstOrDefault (s => (((s.Show.Ids.Trakt == show.Ids.Trakt) && s.Show.Ids.Trakt != null) || ((s.Show.Ids.Tvdb == show.Ids.Tvdb) && show.Ids.Tvdb != null))); " is 183.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,Plays,The length of the statement  "	return watchedEpisodes.Where (e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || (e.ShowTvdbId == show.Ids.Tvdb) && e.ShowTvdbId != null)).Sum (e => e.Plays); " is 167.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,Collected,The length of the statement  "	return collectedEpisodes.Where (e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || (e.ShowTvdbId == show.Ids.Tvdb) && e.ShowTvdbId != null)).Count (); " is 159.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsWatchlisted,The length of the statement  "	return WatchListSeasons.Any (s => ((((s.Show.Ids.Trakt == show.Ids.Trakt) && s.Show.Ids.Trakt != null) || ((s.Show.Ids.Tvdb == show.Ids.Tvdb) && show.Ids.Tvdb != null))) && s.Season.Number == season.Number); " is 207.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsWatched,The length of the statement  "	int watchedEpisodeCount = watchedEpisodes.Where (e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && show.Ids.Tvdb != null)) && e.Season == season.Number).Count (); " is 208.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsCollected,The length of the statement  "	int collectedEpisodeCount = collectedEpisodes.Where (e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && show.Ids.Tvdb != null)) && e.Season == season.Number).Count (); " is 212.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,UserRating,The length of the statement  "	var ratedSeason = RatedSeasons.FirstOrDefault (s => ((((s.Show.Ids.Trakt == show.Ids.Trakt) && s.Show.Ids.Trakt != null) || ((s.Show.Ids.Tvdb == show.Ids.Tvdb) && show.Ids.Tvdb != null))) && s.Season.Number == season.Number); " is 225.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsWatched,The length of the statement  "	return WatchedEpisodes.Any (e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && show.Ids.Tvdb != null)) && e.Season == episode.Season && e.Number == episode.Number); " is 209.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsCollected,The length of the statement  "	return CollectedEpisodes.Any (e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && show.Ids.Tvdb != null)) && e.Season == episode.Season && e.Number == episode.Number); " is 211.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,IsWatchlisted,The length of the statement  "	return WatchListEpisodes.Any (e => (((e.Show.Ids.Trakt == show.Ids.Trakt) && e.Show.Ids.Trakt != null) || ((e.Show.Ids.Tvdb == show.Ids.Tvdb) && show.Ids.Tvdb != null)) && e.Episode.Season == episode.Season && e.Episode.Number == episode.Number); " is 246.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,UserRating,The length of the statement  "	// either match by episode id or if not available in cache (which could occur when added by sync caching) by show id and episode/season numbers " is 143.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,UserRating,The length of the statement  "	var ratedEpisode = RatedEpisodes.FirstOrDefault (re => ((re.Episode.Ids.Trakt == episode.Ids.Trakt) && re.Episode.Ids.Trakt != null) || (((re.Show.Ids.Tvdb == show.Ids.Tvdb) && show.Ids.Tvdb != null) && re.Episode.Season == episode.Season && re.Episode.Number == episode.Number)); " is 280.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,Plays,The length of the statement  "	var watchedEpisodes = WatchedEpisodes.Where (e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && show.Ids.Tvdb != null)) && e.Season == episode.Season && e.Number == episode.Number); " is 226.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,AddMovieToWatchHistory,The length of the statement  "	var existingWatchedMovie = watchedMovies.FirstOrDefault (m => ((m.Movie.Ids.Trakt == movie.Ids.Trakt) && movie.Ids.Trakt != null) || ((m.Movie.Ids.Imdb == movie.Ids.Imdb) && movie.Ids.Imdb.ToNullIfEmpty () != null) || ((m.Movie.Ids.Tmdb == movie.Ids.Tmdb) && movie.Ids.Tmdb != null)); " is 284.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,AddMovieToPausedData,The length of the statement  "	var existingPausedMovie = pausedMovies.FirstOrDefault (m => ((m.Movie.Ids.Trakt == movie.Ids.Trakt) && movie.Ids.Trakt != null) || ((m.Movie.Ids.Imdb == movie.Ids.Imdb) && movie.Ids.Imdb.ToNullIfEmpty () != null) || ((m.Movie.Ids.Tmdb == movie.Ids.Tmdb) && movie.Ids.Tmdb != null)); " is 282.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,AddEpisodeToWatchHistory,The length of the statement  "	var existingWatchedEpisode = watchedEpisodes.FirstOrDefault (e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && e.ShowTvdbId != null)) && e.Season == episode.Season && e.Number == episode.Number); " is 241.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,AddEpisodeToPausedData,The length of the statement  "	var existingPausedEpisode = pausedEpisodes.FirstOrDefault (e => (((e.Show.Ids.Trakt == show.Ids.Trakt) && e.Show.Ids.Trakt != null) || ((e.Show.Ids.Tvdb == show.Ids.Tvdb) && e.Show.Ids.Tvdb != null)) && e.Episode.Season == episode.Season && e.Episode.Number == episode.Number); " is 277.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveMovieFromWatchHistory,The length of the statement  "	watchedMovies.RemoveAll (m => ((m.Movie.Ids.Trakt == movie.Ids.Trakt) && m.Movie.Ids.Trakt != null) || ((m.Movie.Ids.Imdb == movie.Ids.Imdb) && m.Movie.Ids.Imdb.ToNullIfEmpty () != null) || ((m.Movie.Ids.Tmdb == movie.Ids.Tmdb) && m.Movie.Ids.Tmdb != null)); " is 258.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveMovieFromWatchHistory,The length of the statement  "		watchedMovies.RemoveAll (m => m.Movie.Title.ToLowerInvariant () == movie.Title.ToLower () && m.Movie.Year == movie.Year); " is 121.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveMovieFromWatchlist,The length of the statement  "	watchlistMovies.RemoveAll (m => ((m.Movie.Ids.Trakt == movie.Ids.Trakt) && m.Movie.Ids.Trakt != null) || ((m.Movie.Ids.Imdb == movie.Ids.Imdb) && m.Movie.Ids.Imdb.ToNullIfEmpty () != null) || ((m.Movie.Ids.Tmdb == movie.Ids.Tmdb) && m.Movie.Ids.Tmdb != null)); " is 260.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveMovieFromWatchlist,The length of the statement  "		watchlistMovies.RemoveAll (m => m.Movie.Title.ToLowerInvariant () == movie.Title.ToLower () && m.Movie.Year == movie.Year); " is 123.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveMovieFromCollection,The length of the statement  "	collectedMovies.RemoveAll (m => ((m.Movie.Ids.Trakt == movie.Ids.Trakt) && m.Movie.Ids.Trakt != null) || ((m.Movie.Ids.Imdb == movie.Ids.Imdb) && m.Movie.Ids.Imdb.ToNullIfEmpty () != null) || ((m.Movie.Ids.Tmdb == movie.Ids.Tmdb) && m.Movie.Ids.Tmdb != null)); " is 260.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveMovieFromCollection,The length of the statement  "		collectedMovies.RemoveAll (m => m.Movie.Title.ToLowerInvariant () == movie.Title.ToLower () && m.Movie.Year == movie.Year); " is 123.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveMovieFromRatings,The length of the statement  "	ratedMovies.RemoveAll (m => ((m.Movie.Ids.Trakt == movie.Ids.Trakt) && m.Movie.Ids.Trakt != null) || ((m.Movie.Ids.Imdb == movie.Ids.Imdb) && m.Movie.Ids.Imdb.ToNullIfEmpty () != null) || ((m.Movie.Ids.Tmdb == movie.Ids.Tmdb) && m.Movie.Ids.Tmdb != null)); " is 256.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveMovieFromPausedData,The length of the statement  "	pausedMovies.RemoveAll (m => ((m.Movie.Ids.Trakt == movie.Ids.Trakt) && m.Movie.Ids.Trakt != null) || ((m.Movie.Ids.Imdb == movie.Ids.Imdb) && m.Movie.Ids.Imdb.ToNullIfEmpty () != null) || ((m.Movie.Ids.Tmdb == movie.Ids.Tmdb) && m.Movie.Ids.Tmdb != null)); " is 257.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveMovieFromPausedData,The length of the statement  "		pausedMovies.RemoveAll (m => m.Movie.Title.ToLowerInvariant () == movie.Title.ToLower () && m.Movie.Year == movie.Year); " is 120.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveShowFromWatchedHistory,The length of the statement  "	watchedEpisodes.RemoveAll (s => ((s.ShowId == show.Ids.Trakt) && s.ShowId != null) || ((s.ShowImdbId == show.Ids.Imdb) && s.ShowImdbId.ToNullIfEmpty () != null) || ((s.ShowTvdbId == show.Ids.Tvdb) && s.ShowTvdbId != null)); " is 223.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveShowFromWatchlist,The length of the statement  "	watchlistShows.RemoveAll (s => ((s.Show.Ids.Trakt == show.Ids.Trakt) && s.Show.Ids.Trakt != null) || ((s.Show.Ids.Imdb == show.Ids.Imdb) && s.Show.Ids.Imdb.ToNullIfEmpty () != null) || ((s.Show.Ids.Tvdb == show.Ids.Tvdb) && s.Show.Ids.Tvdb != null)); " is 250.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveShowFromCollection,The length of the statement  "	collectedEpisodes.RemoveAll (s => ((s.ShowId == show.Ids.Trakt) && s.ShowId != null) || ((s.ShowImdbId == show.Ids.Imdb) && s.ShowImdbId.ToNullIfEmpty () != null) || ((s.ShowTvdbId == show.Ids.Tvdb) && s.ShowTvdbId != null)); " is 225.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveShowFromRatings,The length of the statement  "	ratedShows.RemoveAll (s => ((s.Show.Ids.Trakt == show.Ids.Trakt) && s.Show.Ids.Trakt != null) || ((s.Show.Ids.Imdb == show.Ids.Imdb) && s.Show.Ids.Imdb.ToNullIfEmpty () != null) || ((s.Show.Ids.Tvdb == show.Ids.Tvdb) && s.Show.Ids.Tvdb != null)); " is 246.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveSeasonFromWatchlist,The length of the statement  "	watchlistSeasons.RemoveAll (s => (((s.Show.Ids.Trakt == show.Ids.Trakt) && s.Show.Ids.Trakt != null) || ((s.Show.Ids.Imdb == show.Ids.Imdb) && s.Show.Ids.Imdb.ToNullIfEmpty () != null) || ((s.Show.Ids.Tvdb == show.Ids.Tvdb) && s.Show.Ids.Tvdb != null)) && s.Season.Number == season.Number); " is 290.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveSeasonFromWatchlist,The length of the statement  "		watchlistSeasons.RemoveAll (s => s.Show.Title.ToLowerInvariant () == show.Title.ToLower () && s.Show.Year == show.Year && s.Season.Number == season.Number); " is 156.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveSeasonFromRatings,The length of the statement  "	ratedSeasons.RemoveAll (s => (((s.Show.Ids.Trakt == show.Ids.Trakt) && s.Show.Ids.Trakt != null) || ((s.Show.Ids.Imdb == show.Ids.Imdb) && s.Show.Ids.Imdb.ToNullIfEmpty () != null) || ((s.Show.Ids.Tvdb == show.Ids.Tvdb) && s.Show.Ids.Tvdb != null)) && s.Season.Number == season.Number); " is 286.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveSeasonFromRatings,The length of the statement  "		ratedSeasons.RemoveAll (s => s.Show.Title.ToLowerInvariant () == show.Title.ToLower () && s.Show.Year == show.Year && s.Season.Number == season.Number); " is 152.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveEpisodeFromWatchHistory,The length of the statement  "	watchedEpisodes.RemoveAll (e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && e.ShowTvdbId != null)) && e.Season == episode.Season && e.Number == episode.Number); " is 207.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveEpisodeFromWatchHistory,The length of the statement  "		watchedEpisodes.RemoveAll (e => e.ShowTitle.ToLowerInvariant () == show.Title.ToLowerInvariant () && e.ShowYear == show.Year && e.Season == episode.Season && e.Number == episode.Number); " is 186.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveEpisodeFromWatchlist,The length of the statement  "	watchlistEpisodes.RemoveAll (e => ((e.Episode.Ids.Trakt == episode.Ids.Trakt) && e.Episode.Ids.Trakt != null) || ((e.Episode.Ids.Imdb == episode.Ids.Imdb) && e.Episode.Ids.Imdb != null) || ((e.Episode.Ids.Tvdb == episode.Ids.Tvdb && e.Episode.Ids.Tvdb != null))); " is 263.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveEpisodeFromWatchlist,The length of the statement  "	watchlistEpisodes.RemoveAll (e => (((e.Show.Ids.Trakt == show.Ids.Trakt) && e.Show.Ids.Trakt != null) || ((e.Show.Ids.Tvdb == show.Ids.Tvdb) && e.Show.Ids.Tvdb != null)) && e.Episode.Season == episode.Season && e.Episode.Number == episode.Number); " is 247.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveEpisodeFromWatchlist,The length of the statement  "		watchlistEpisodes.RemoveAll (e => e.Show.Title.ToLowerInvariant () == show.Title.ToLowerInvariant () && e.Show.Year == show.Year && e.Episode.Season == episode.Season && e.Episode.Number == episode.Number); " is 206.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveEpisodeFromCollection,The length of the statement  "	collectedEpisodes.RemoveAll (e => (((e.ShowId == show.Ids.Trakt) && e.ShowId != null) || ((e.ShowTvdbId == show.Ids.Tvdb) && e.ShowTvdbId != null)) && e.Season == episode.Season && e.Number == episode.Number); " is 209.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveEpisodeFromCollection,The length of the statement  "		collectedEpisodes.RemoveAll (e => e.ShowTitle.ToLowerInvariant () == show.Title.ToLowerInvariant () && e.ShowYear == show.Year && e.Season == episode.Season && e.Number == episode.Number); " is 188.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveEpisodeFromRatings,The length of the statement  "	ratedEpisodes.RemoveAll (e => ((e.Episode.Ids.Trakt == episode.Ids.Trakt) && e.Episode.Ids.Trakt != null) || ((e.Episode.Ids.Imdb == episode.Ids.Imdb) && e.Episode.Ids.Imdb.ToNullIfEmpty () != null) || ((e.Episode.Ids.Tvdb == episode.Ids.Tvdb) && e.Episode.Ids.Tvdb != null)); " is 276.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveEpisodeFromPausedData,The length of the statement  "	pausedEpisodes.RemoveAll (e => (((e.Show.Ids.Trakt == show.Ids.Trakt) && e.Show.Ids.Trakt != null) || ((e.Show.Ids.Tvdb == show.Ids.Tvdb) && e.Show.Ids.Tvdb != null)) && e.Episode.Season == episode.Season && e.Episode.Number == episode.Number); " is 244.
Long Statement,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,RemoveEpisodeFromPausedData,The length of the statement  "		pausedEpisodes.RemoveAll (e => e.Show.Title.ToLowerInvariant () == show.Title.ToLowerInvariant () && e.Show.Year == show.Year && e.Episode.Season == episode.Season && e.Episode.Number == episode.Number); " is 203.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetTrendingSettings,The length of the statement  "	// the whole point of having a collection is to define unique dashboard settings per window otherwise all windows share the same settings " is 137.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetTrendingSettings,The length of the statement  "	var trendingSettings = TraktSkinSettings.DashboardTrendingCollection.FirstOrDefault (d => d.MovieWindows.Contains (windowID) || d.TVShowWindows.Contains (windowID)); " is 165.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetFacade,The length of the statement  "			TraktLogger.Debug ("Unable to find facade control [id:{0}]' check that trakt skin settings are correctly defined!"' facadeID.ToString ()); " is 138.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ClearSelectedActivityProperties,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Activity.Description"' GetActivityDescription ((ActivityView)TraktSettings.ActivityStreamView)); " is 126.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadActivity,The length of the statement  "			if (facade.Count == 0 && PreviousActivity != null && PreviousActivity.Activities != null && PreviousActivity.Activities.Count > 0) { " is 132.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishActivityProperties,The length of the statement  "	int maxItems = activities.Count () < TraktSkinSettings.DashboardActivityFacadeMaxItems ? activities.Count () : TraktSkinSettings.DashboardActivityFacadeMaxItems; " is 161.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishActivityProperties,The length of the statement  "		GUIUtils.SetProperty (string.Format ("#Trakt.Activity.{0}.ActivityPinIconNoExt"' i)' GetActivityImage (activities [i]).Replace (".png"' string.Empty)); " is 151.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishActivityProperties,The length of the statement  "		GUIUtils.SetProperty (string.Format ("#Trakt.Activity.{0}.Time"' i)' activities [i].Timestamp.FromISO8601 ().ToLocalTime ().ToShortTimeString ()); " is 146.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishActivityProperties,The length of the statement  "		GUIUtils.SetProperty (string.Format ("#Trakt.Activity.{0}.Day"' i)' activities [i].Timestamp.FromISO8601 ().ToLocalTime ().DayOfWeek.ToString ().Substring (0' 3)); " is 163.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadActivityFacade,The length of the statement  "	if (TraktSkinSettings.DashBoardActivityWindows == null || !TraktSkinSettings.DashBoardActivityWindows.Contains (GUIWindowManager.ActiveWindow.ToString ())) " is 155.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadActivityFacade,The length of the statement  "			if (view == ActivityView.me && mostRecentActivity.Timestamp == activities.Activities.First ().Timestamp && lastActivity.Timestamp == activities.Activities.Last ().Timestamp) " is 173.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadActivityFacade,The length of the statement  "			if (mostRecentActivity.Timestamp == activities.Activities.First ().Timestamp && mostRecentActivity.User.Username == activities.Activities.First ().User.Username) { " is 163.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadActivityFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Activity.Items"' string.Format ("{0} {1}"' activities.Activities.Count ().ToString ()' activities.Activities.Count () > 1 ? Translation.Activities : Translation.Activity)); " is 202.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadActivityFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Activity.Description"' GetActivityDescription ((ActivityView)TraktSettings.ActivityStreamView)); " is 126.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "	int maxItems = trendingItems.Count () < GetMaxTrendingProperties () ? trendingItems.Count () : GetMaxTrendingProperties (); " is 123.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "		GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Watchers.Extra"' i)' trendingItem.Watchers > 1 ? string.Format (Translation.PeopleWatching' trendingItem.Watchers) : Translation.PersonWatching); " is 201.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "		GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Language"' i)' Translation.GetLanguageFromISOCode (trendingItem.Movie.Language)); " is 137.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "		GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Overview"' i)' string.IsNullOrEmpty (trendingItem.Movie.Overview) ? Translation.NoMovieSummary : trendingItem.Movie.Overview); " is 182.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "		GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Released"' i)' trendingItem.Movie.Released.FromISO8601 ().ToShortDateString ()); " is 136.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "		GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Url"' i)' string.Format ("http://trakt.tv/movies/{0}"' trendingItem.Movie.Ids.Slug)); " is 141.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "		GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Genres"' i)' string.Join ("' "' TraktGenres.Translate (trendingItem.Movie.Genres))); " is 140.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "		GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.InCollection"' i)' trendingItem.Movie.IsCollected ().ToString ()); " is 122.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "		GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.InWatchList"' i)' trendingItem.Movie.IsWatchlisted ().ToString ()); " is 123.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "		GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Ratings.Icon"' i)' (trendingItem.Movie.Rating >= 6) ? "love" : "hate"); " is 127.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "		GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Ratings.Percentage"' i)' trendingItem.Movie.Rating.ToPercentage ()); " is 124.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "			GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.PosterImageFilename"' i)' TmdbCache.GetMoviePosterFilename (images)); " is 125.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The length of the statement  "			GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.FanartImageFilename"' i)' TmdbCache.GetMovieBackdropFilename (images)); " is 127.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingMoviesFacade,The length of the statement  "	if (TraktSkinSettings.DashboardTrendingCollection == null || !TraktSkinSettings.DashboardTrendingCollection.Exists (d => d.MovieWindows.Contains (GUIWindowManager.ActiveWindow.ToString ()))) " is 190.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingMoviesFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Trending.Movies.Items"' string.Format ("{0} {1}"' trendingItems.Count ().ToString ()' trendingItems.Count () > 1 ? Translation.Movies : Translation.Movie)); " is 186.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingMoviesFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Trending.Movies.Description"' string.Format (Translation.TrendingTVShowsPeople' trendingItems.Sum (t => t.Watchers).ToString ()' trendingItems.Count ().ToString ())); " is 196.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The length of the statement  "	int maxItems = trendingItems.Count () < GetMaxTrendingProperties () ? trendingItems.Count () : GetMaxTrendingProperties (); " is 123.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The length of the statement  "		GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Watchers.Extra"' i)' trendingItem.Watchers > 1 ? string.Format (Translation.PeopleWatching' trendingItem.Watchers) : Translation.PersonWatching); " is 200.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The length of the statement  "		GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Url"' i)' string.Format ("http://trakt.tv/shows/{0}"' trendingItem.Show.Ids.Slug)); " is 138.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The length of the statement  "		GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.FirstAired"' i)' trendingItem.Show.FirstAired.FromISO8601 ().ToShortDateString ()); " is 138.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The length of the statement  "		GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Overview"' i)' string.IsNullOrEmpty (trendingItem.Show.Overview) ? Translation.NoShowSummary : trendingItem.Show.Overview); " is 178.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The length of the statement  "		GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Genres"' i)' string.Join ("' "' TraktGenres.Translate (trendingItem.Show.Genres))); " is 138.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The length of the statement  "		GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Ratings.Icon"' i)' (trendingItem.Show.Rating >= 6) ? "love" : "hate"); " is 125.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The length of the statement  "		GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Ratings.Percentage"' i)' trendingItem.Show.Rating.ToPercentage ()); " is 122.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The length of the statement  "			GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.PosterImageFilename"' i)' TmdbCache.GetShowPosterFilename (images)); " is 123.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The length of the statement  "			GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.FanartImageFilename"' i)' TmdbCache.GetShowBackdropFilename (images)); " is 125.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingShowsFacade,The length of the statement  "	if (TraktSkinSettings.DashboardTrendingCollection == null || !TraktSkinSettings.DashboardTrendingCollection.Exists (d => d.TVShowWindows.Contains (GUIWindowManager.ActiveWindow.ToString ()))) " is 191.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingShowsFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Trending.Shows.Items"' string.Format ("{0} {1}"' trendingItems.Count ().ToString ()' trendingItems.Count () > 1 ? Translation.SeriesPlural : Translation.Series)); " is 192.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingShowsFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Trending.Shows.Description"' string.Format (Translation.TrendingTVShowsPeople' trendingItems.Sum (t => t.Watchers).ToString ()' trendingItems.Count ().ToString ())); " is 195.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetTrendingMovies,The length of the statement  "		var trendingResult = TraktAPI.TraktAPI.GetTrendingMovies (1' TraktSettings.FilterTrendingOnDashboard ? 100 : TraktSkinSettings.MaxTrendingItems); " is 145.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetTrendingShows,The length of the statement  "		var trendingItems = TraktAPI.TraktAPI.GetTrendingShows (1' TraktSettings.FilterTrendingOnDashboard ? 100 : TraktSkinSettings.MaxTrendingItems); " is 143.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The length of the statement  "	if (TraktSettings.DashboardActivityFilter.Types.Episodes && TraktSettings.DashboardActivityFilter.Actions.Watchlisted) { " is 120.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetMyActivityFromCache,The length of the statement  "	activity.Activities = activity.Activities.OrderByDescending (a => a.Timestamp).Take (TraktSkinSettings.DashboardActivityFacadeMaxItems).ToList (); " is 146.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,The length of the statement  "			//incrementalActivity = TraktAPI.TraktAPI.GetCommunityActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch()); " is 121.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,The length of the statement  "			//incrementalActivity = TraktAPI.TraktAPI.GetFollowersActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch()); " is 121.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,The length of the statement  "			//incrementalActivity = TraktAPI.TraktAPI.GetFollowingActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch()); " is 121.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,The length of the statement  "			//incrementalActivity = TraktAPI.TraktAPI.GetFriendActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch()' false); " is 125.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,The length of the statement  "			//incrementalActivity = TraktAPI.TraktAPI.GetFriendActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch()' true); " is 124.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,The length of the statement  "			PreviousActivity.Activities = incrementalActivity.Activities.Union (PreviousActivity.Activities).Take (TraktSkinSettings.DashboardActivityFacadeMaxItems).ToList (); " is 164.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,IsDashBoardWindow,The length of the statement  "	if (TraktSkinSettings.DashBoardActivityWindows != null && TraktSkinSettings.DashBoardActivityWindows.Contains (GUIWindowManager.ActiveWindow.ToString ())) " is 154.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,IsDashBoardWindow,The length of the statement  "	if (TraktSkinSettings.DashboardTrendingCollection != null && TraktSkinSettings.DashboardTrendingCollection.Exists (d => d.MovieWindows.Contains (GUIWindowManager.ActiveWindow.ToString ()))) " is 189.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,IsDashBoardWindow,The length of the statement  "	if (TraktSkinSettings.DashboardTrendingCollection != null && TraktSkinSettings.DashboardTrendingCollection.Exists (d => d.TVShowWindows.Contains (GUIWindowManager.ActiveWindow.ToString ()))) " is 190.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityViewMenu,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Activity.Description"' GetActivityDescription ((ActivityView)TraktSettings.ActivityStreamView)); " is 126.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityContextMenu,The length of the statement  "		if (((ActivityView)TraktSettings.ActivityStreamView == ActivityView.community || (ActivityView)TraktSettings.ActivityStreamView == ActivityView.followers) && !((activityFacade.SelectedListItem as GUIUserListItem).IsFollowed)) { " is 227.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityContextMenu,The length of the statement  "		if (GUIUtils.ShowYesNoDialog (Translation.Network' string.Format (Translation.SendFollowRequest' activity.User.Username)' true)) { " is 130.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,OnTrendingShowSelected,The length of the statement  "	GUICommon.SetProperty ("#Trakt.Show.Watchers.Extra"' trendingItem.Watchers > 1 ? string.Format (Translation.PeopleWatching' trendingItem.Watchers) : Translation.PersonWatching); " is 177.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,OnTrendingMovieSelected,The length of the statement  "	GUICommon.SetProperty ("#Trakt.Movie.Watchers.Extra"' trendingItem.Watchers > 1 ? string.Format (Translation.PeopleWatching' trendingItem.Watchers) : Translation.PersonWatching); " is 178.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GUIWindowManager_Receivers,The length of the statement  "						TraktLogger.Warning ("No user associated with liked list. ID = '{0}'' Name = '{1}'' Privacy = '{2}'"' activity.List.Ids.Trakt' activity.List.Name' activity.List.Privacy); " is 170.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GUIWindowManager_OnNewAction,The length of the statement  "			if (!TrendingContextMenuIsActive && activeWindow.GetFocusControlId () == (int)TraktDashboardControls.TrendingShowsFacade) { " is 123.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GUIWindowManager_OnNewAction,The length of the statement  "			} else if (!TrendingContextMenuIsActive && activeWindow.GetFocusControlId () == (int)TraktDashboardControls.TrendingMoviesFacade) { " is 131.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,Init,The length of the statement  "	if (TraktSkinSettings.DashboardTrendingCollection != null && TraktSkinSettings.DashboardTrendingCollection.Exists (d => d.MovieWindows.Count > 0)) { " is 148.
Long Statement,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,Init,The length of the statement  "	if (TraktSkinSettings.DashboardTrendingCollection != null && TraktSkinSettings.DashboardTrendingCollection.Exists (d => d.TVShowWindows.Count > 0)) { " is 149.
Long Statement,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveMovieFromWatchList,The length of the statement  "	RemoveMovieFromWatchList (movie.Title' movie.Year' movie.Ids.Imdb' movie.Ids.Tmdb' movie.Ids.Trakt' updateMovingPicturesFilters); " is 129.
Long Statement,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddEpisodeToWatchList,The length of the statement  "	AddEpisodeToWatchList (episode.Title' episode.Season' episode.Number' episode.Ids.Tvdb' episode.Ids.Imdb' episode.Ids.Tmdb' episode.Ids.Trakt); " is 143.
Long Statement,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveEpisodeFromWatchList,The length of the statement  "	RemoveEpisodeFromWatchList (episode.Title' episode.Season' episode.Number' episode.Ids.Tvdb' episode.Ids.Imdb' episode.Ids.Tmdb' episode.Ids.Trakt); " is 148.
Long Statement,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddRemoveMovieInUserList,The length of the statement  "	AddRemoveMovieInUserList (TraktSettings.Username' movie.Title' movie.Year' movie.Ids.Imdb' movie.Ids.Tmdb' movie.Ids.Trakt' remove); " is 132.
Long Statement,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddRemoveShowInUserList,The length of the statement  "	AddRemoveShowInUserList (TraktSettings.Username' show.Title' show.Year' show.Ids.Tvdb' show.Ids.Imdb' show.Ids.Tmdb' show.Ids.Trakt' remove); " is 141.
Long Statement,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddRemoveShowInUserList,The length of the statement  "	AddRemoveShowInUserList (TraktSettings.Username' title' year.ToNullableInt32 ()' tvdbid.ToNullableInt32 ()' null' null' null' remove); " is 134.
Long Statement,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowMovieShouts,The length of the statement  "	ShowMovieShouts (movie.Title' movie.Year' movie.Ids.Imdb' movie.Ids.Trakt' movie.IsWatched ()' TmdbCache.GetMovieBackdropFilename (images)' TmdbCache.GetMovieBackdropUrl (images)); " is 180.
Long Statement,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowTVShowShouts,The length of the statement  "	ShowTVShowShouts (show.Title' show.Year' show.Ids.Tvdb' show.Ids.Trakt' show.Ids.Imdb' show.IsWatched ()' TmdbCache.GetShowBackdropFilename (images)' TmdbCache.GetShowBackdropUrl (images)); " is 189.
Long Statement,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowTVSeasonShouts,The length of the statement  "	ShowTVSeasonShouts (show.Title' show.Year' show.Ids.Tvdb' show.Ids.Trakt' show.Ids.Imdb' season.Number' season.IsWatched (show)' TmdbCache.GetShowBackdropFilename (showImages)' TmdbCache.GetShowBackdropUrl (showImages)); " is 220.
Long Statement,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowEpisodeShouts,The length of the statement  "	ShowEpisodeShouts (show.Title' show.Year' show.Ids.Tvdb' show.Ids.Trakt' show.Ids.Imdb' episode.Season' episode.Number' episode.IsWatched (show)' TmdbCache.GetShowBackdropFilename (showImages)' TmdbCache.GetShowBackdropUrl (showImages)); " is 237.
Long Statement,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,ShowEpisodeShouts,The length of the statement  "	ShowEpisodeShouts (title' tvdbid.ToNullableInt32 ()' null' season.ToInt ()' episode.ToInt ()' isWatched' fanart' onlineFanart); " is 127.
Long Statement,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddEpisodeToWatchHistory,The length of the statement  "	AddEpisodeToWatchHistory (episode.Title' episode.Season' episode.Number' episode.Ids.Tvdb' episode.Ids.Imdb' episode.Ids.Tmdb' episode.Ids.Trakt); " is 146.
Long Statement,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveEpisodeFromWatchHistory,The length of the statement  "	RemoveEpisodeFromWatchHistory (episode.Title' episode.Season' episode.Number' episode.Ids.Tvdb' episode.Ids.Imdb' episode.Ids.Tmdb' episode.Ids.Trakt); " is 151.
Long Statement,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,AddEpisodeToCollection,The length of the statement  "	AddEpisodeToCollection (episode.Title' episode.Season' episode.Number' episode.Ids.Tvdb' episode.Ids.Imdb' episode.Ids.Tmdb' episode.Ids.Trakt); " is 144.
Long Statement,TraktPlugin,TraktHelper,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHelper.cs,RemoveEpisodeFromCollection,The length of the statement  "	RemoveEpisodeFromCollection (episode.Title' episode.Season' episode.Number' episode.Ids.Tvdb' episode.Ids.Imdb' episode.Ids.Tmdb' episode.Ids.Trakt); " is 149.
Long Statement,TraktPlugin,TraktLists,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLists.cs,GetListsForUser,The length of the statement  "	if (!UserLists.Keys.Contains (username) || LastRequest < DateTime.UtcNow.Subtract (new TimeSpan (0' TraktSettings.WebRequestCacheMinutes' 0))) { " is 144.
Long Statement,TraktPlugin,TraktLists,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLists.cs,GetListItemsForUser,The length of the statement  "	if (!UserListItems.Keys.Contains (key) || LastRequest < DateTime.UtcNow.Subtract (new TimeSpan (0' TraktSettings.WebRequestCacheMinutes' 0))) { " is 143.
Long Statement,TraktPlugin,TraktLists,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLists.cs,GetListItemsForUser,The length of the statement  "		var listItems = TraktAPI.TraktAPI.GetUserListItems (username == TraktSettings.Username ? "me" : username' id.ToString ()' "full"); " is 130.
Long Statement,TraktPlugin,TraktLists,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLists.cs,ClearItemsInList,The length of the statement  "	if (GUIListItems.CurrentList != null && GUIListItems.CurrentList.Ids.Trakt == id && GUIListItems.CurrentUser == username) " is 121.
Long Statement,TraktPlugin,TraktLists,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLists.cs,GetUserListSelections,The length of the statement  "	List<MultiSelectionItem> selectedItems = GUIUtils.ShowMultiSelectionDialog (Translation.SelectLists' GetMultiSelectItems (lists)); " is 130.
Long Statement,TraktPlugin,TraktLogger,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,CreatePrefix,The length of the statement  "	return DateTime.Now.ToString ("yyyy-MM-dd HH:mm:ss.fff") + " [{0}] " + String.Format ("[{0}][{1}]"' Thread.CurrentThread.Name' Thread.CurrentThread.ManagedThreadId.ToString ().PadLeft (2' '0')) + ": {1}"; " is 204.
Long Statement,TraktPlugin,TraktLogger,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,CreateLatencyHeader,The length of the statement  "	string header = "TimeStamp (UTC)'Absolute Path'Query'Method'Status Code'Status Description'Data Sent (Bytes)'Data Received (Bytes)'Server Execution Time (ms)'Total Time Taken (ms)"; " is 181.
Long Statement,TraktPlugin,TraktLogger,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,TraktAPI_OnLatency,The length of the statement  "	WriteLatency (string.Format ("{0}'{1}'{2}'{3}'{4}'{5}'{6}'{7}'{8}'{9}"' DateTime.UtcNow.ToISO8601 ()' webResponse.ResponseUri.AbsolutePath' query' webResponse.Method' (int)webResponse.StatusCode' webResponse.StatusDescription' dataSent' dataReceived' serverRuntime' totalTimeTaken)); " is 283.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,Init,The length of the statement  "	TraktLogger.Info ("Starting Trakt plugin. Version = '{0}'' Date = '{1}'"' TraktSettings.Version' TraktSettings.BuildDate); " is 122.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,Init,The length of the statement  "	GUIWindowManager.OnDeActivateWindow += new GUIWindowManager.WindowActivationHandler (GUIWindowManager_OnDeActivateWindow); " is 122.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,Init,The length of the statement  "	Microsoft.Win32.SystemEvents.PowerModeChanged += new Microsoft.Win32.PowerModeChangedEventHandler (SystemEvents_PowerModeChanged); " is 130.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,syncLibraryWorker_RunWorkerCompleted,The length of the statement  "	TraktLogger.Info ("Finished 2-way sync of all enabled plugins' Time Taken = '{0}'"' DateTime.UtcNow.Subtract (SyncStartTime).ToPrettyTime ()); " is 142.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The length of the statement  "	if ((windowID < (int)TraktGUIWindows.Settings || windowID > (int)TraktGUIWindows.SettingsGeneral) && (PreviousWindow >= (int)TraktGUIWindows.Settings && PreviousWindow <= (int)TraktGUIWindows.SettingsGeneral)) { " is 211.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The length of the statement  "					GUIUtils.ShowNotifyDialog (Translation.FollowerRequests' string.Format (Translation.FollowerRequestMessage' followerRequests.Count ().ToString ())); " is 148.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The length of the statement  "	if (TraktSkinSettings.DashBoardActivityWindows != null && TraktSkinSettings.DashBoardActivityWindows.Contains (windowID.ToString ())) { " is 135.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The length of the statement  "	if (TraktSkinSettings.DashboardTrendingCollection != null && TraktSkinSettings.DashboardTrendingCollection.Exists (d => d.MovieWindows.Contains (windowID.ToString ()))) { " is 170.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The length of the statement  "	if (TraktSkinSettings.DashboardTrendingCollection != null && TraktSkinSettings.DashboardTrendingCollection.Exists (d => d.TVShowWindows.Contains (windowID.ToString ()))) { " is 171.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "					if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)) { " is 132.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "						validItem = TVSeries.GetEpisodeInfo (obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched); " is 133.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "			if (GUIUtils.ShowYesNoDialog (Translation.WatchList' string.Format ("{0}\n{1} ({2})"' Translation.AddThisItemToWatchList' title' year)' true)) { " is 144.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "				TraktHelper.AddMovieToWatchList (title' year.ToNullableInt32 ()' imdbid.ToNullIfEmpty ()' tmdbid.ToNullableInt32 ()' updatePluginFilters); " is 138.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "				TraktHelper.AddShowToWatchList (title' year.ToNullableInt32 ()' showtvdbid.ToNullableInt32 ()' imdbid.ToNullIfEmpty ()' tmdbid.ToNullableInt32 ()' null); " is 153.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "				TraktLogger.Info ("Adding episode to Watchlist. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'' Episode TVDb ID = '{4}'"' title' year' season' episode' epTvdbId); " is 176.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "				TraktHelper.AddEpisodeToWatchList (null' season.ToInt ()' episode.ToInt ()' epTvdbId.ToNullableInt32 ()' null' null' null); " is 123.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "			TraktLogger.Info ("Adding episode to Custom List. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'' Episode TVDb ID = '{4}'"' title' year' season' episode' epTvdbId); " is 178.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "			TraktLogger.Info ("Showing rate dialog for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year' showtvdbid); " is 124.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "			TraktLogger.Info ("Showing rate dialog for tv episode. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'' Episode TVDb ID = '{4}'"' title' year' season' episode' epTvdbId); " is 183.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "			TraktLogger.Info ("Displaying Related Movies for {0}. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year' imdbid); " is 122.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The length of the statement  "			TraktLogger.Info ("Displaying Related Shows for {0}. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year' showtvdbid); " is 125.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,SystemEvents_PowerModeChanged,The length of the statement  "		int startDelay = nextSyncDate <= DateTime.Now ? TraktSettings.SyncStartDelay : (int)(nextSyncDate.Subtract (DateTime.Now).TotalMilliseconds); " is 141.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,SystemEvents_PowerModeChanged,The length of the statement  "		TraktLogger.Info ("Last library sync started at {0}' next sync will start at {1}"' SyncStartTime' DateTime.Now.Add (new TimeSpan (0' 0' 0' 0' startDelay))); " is 156.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,StartScrobble,The length of the statement  "		if (!TraktSettings.BlockedFilenames.Contains (filename) && !TraktSettings.BlockedFolders.Any (f => filename.ToLowerInvariant ().Contains (f.ToLowerInvariant ()))) { " is 164.
Long Statement,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,StartScrobble,The length of the statement  "						TraktLogger.Debug ("File was recognised by an enabled plugin handler and is now scrobbling. Plugin = '{0}'"' traktHandler.Name); " is 128.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty)); " is 151.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty)); " is 205.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000); " is 120.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000); " is 124.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> (); " is 143.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> (); " is 141.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> (); " is 137.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> (); " is 135.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> (); " is 135.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> (); " is 133.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> (); " is 139.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> (); " is 137.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> (); " is 157.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> (); " is 126.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> (); " is 122.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> (); " is 133.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> (); " is 131.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> (); " is 143.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> (); " is 141.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The length of the statement  "		ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ()); " is 126.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,SaveSettings,The length of the statement  "		xmlwriter.SetValue (cTrakt' cPassword' Password.Encrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty))); " is 138.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,SaveSettings,The length of the statement  "		xmlwriter.SetValue (cTrakt' cUserLogins' UserLogins.Encrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty)).ToJSON ()); " is 152.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,SaveSettings,The length of the statement  "		TraktCache.SaveFileCache (cLastTrendingShowFileCache' (LastTrendingShows ?? "[]".FromJSONArray<TraktShowTrending> ()).ToList ().ToJSON ()); " is 139.
Long Statement,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,SaveSettings,The length of the statement  "		TraktCache.SaveFileCache (cLastTrendingMovieFileCache' (LastTrendingMovies ?? "[]".FromJSONArray<TraktMovieTrending> ()).ToList ().ToJSON ()); " is 142.
Long Statement,TraktPlugin,ExtensionSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,AddHooksIntoMPEISettings,The length of the statement  "	MPEIPlugin.GUISettings extensionSettings = (MPEIPlugin.GUISettings)GUIWindowManager.GetWindow ((int)GUI.ExternalPluginWindows.MPEISettings); " is 140.
Long Statement,TraktPlugin,ExtensionSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,AddHooksIntoMPEISettings,The length of the statement  "	extensionSettings.OnSettingsChanged += new MPEIPlugin.GUISettings.SettingsChangedHandler (Extensions_OnSettingsChanged); " is 120.
Long Statement,TraktPlugin,ExtensionSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,Extensions_OnSettingsChanged,The length of the statement  "		int startDelay = nextSyncDate <= DateTime.Now ? TraktSettings.SyncStartDelay : (int)(nextSyncDate.Subtract (DateTime.Now).TotalMilliseconds); " is 141.
Long Statement,TraktPlugin.GUI,AsyncImageResource,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cornerstone.MP\AsyncImageResource.cs,LoadImageFastFromFile,The length of the statement  "			image = (Image)typeof(Bitmap).InvokeMember ("FromGDIplus"' BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.InvokeMethod' null' null' new object[] { " is 159.
Long Statement,TraktPlugin.GUI,GUIAnticipatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,GetAnticipatedMovies,The length of the statement  "	if (AnticipatedMoviePages == null || LastRequest < DateTime.UtcNow.Subtract (new TimeSpan (0' TraktSettings.WebRequestCacheMinutes' 0))) { " is 138.
Long Statement,TraktPlugin.GUI,GUIAnticipatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,SendAnticipatedMoviesToFacade,The length of the statement  "	var filteredAnticipatedList = FilterAnticipatedMovies (anticipatedItems.Movies).Where (m => !string.IsNullOrEmpty (m.Movie.Title)).ToList (); " is 141.
Long Statement,TraktPlugin.GUI,GUIAnticipatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,SendAnticipatedMoviesToFacade,The length of the statement  "	filteredAnticipatedList.Sort (new GUIListItemMovieSorter (TraktSettings.SortByAnticipatedMovies.Field' TraktSettings.SortByAnticipatedMovies.Direction)); " is 153.
Long Statement,TraktPlugin.GUI,GUIAnticipatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,SendAnticipatedMoviesToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' filteredAnticipatedList.Count ()' filteredAnticipatedList.Count () > 1 ? Translation.Movies : Translation.Movie)); " is 178.
Long Statement,TraktPlugin.GUI,GUIAnticipatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,PublishMovieSkinProperties,The length of the statement  "	GUICommon.SetProperty ("#Trakt.Movie.ListCount.Extra"' string.Format (Translation.AppearsInList' anticipatedItem.ListCount)); " is 125.
Long Statement,TraktPlugin.GUI,GUIAnticipatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,OnMovieSelected,The length of the statement  "	GUIImageHandler.LoadFanart (backdrop' TmdbCache.GetMovieBackdropFilename ((item as GUIMovieListItem).Images.MovieImages)); " is 122.
Long Statement,TraktPlugin.GUI,GUIBoxOffice,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBoxOffice.cs,SendBoxOfficeToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' boxOffice.Count ().ToString ()' boxOffice.Count () > 1 ? Translation.Movies : Translation.Movie)); " is 162.
Long Statement,TraktPlugin.GUI,GUIBoxOffice,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBoxOffice.cs,OnMovieSelected,The length of the statement  "	GUIImageHandler.LoadFanart (backdrop' TmdbCache.GetMovieBackdropFilename ((item as GUIMovieListItem).Images.MovieImages)); " is 122.
Long Statement,TraktPlugin.GUI,GUICreditsMovie,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsMovie.cs,SendCreditResultsToFacade,The length of the statement  "			var item = new GUIPersonListItem (string.IsNullOrEmpty (person.Character) ? person.Person.Name : string.Format (Translation.ActorAndRole' person.Person.Name' person.Character)' (int)TraktGUIWindows.CreditsMovie); " is 212.
Long Statement,TraktPlugin.GUI,GUICreditsMovie,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsMovie.cs,SendCreditResultsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' Facade.Count.ToString ()' Facade.Count > 1 ? Translation.People : Translation.Person)); " is 151.
Long Statement,TraktPlugin.GUI,GUICreditsShow,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsShow.cs,SendCreditResultsToFacade,The length of the statement  "			var item = new GUIPersonListItem (string.IsNullOrEmpty (person.Character) ? person.Person.Name : string.Format (Translation.ActorAndRole' person.Person.Name' person.Character)' (int)TraktGUIWindows.CreditsShow); " is 211.
Long Statement,TraktPlugin.GUI,GUICreditsShow,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsShow.cs,SendCreditResultsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' Facade.Count.ToString ()' Facade.Count > 1 ? Translation.People : Translation.Person)); " is 151.
Long Statement,TraktPlugin.GUI,GUIAnticipatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,GetAnticipatedShows,The length of the statement  "	if (AnticipatedShowPages == null || LastRequest < DateTime.UtcNow.Subtract (new TimeSpan (0' TraktSettings.WebRequestCacheMinutes' 0))) { " is 137.
Long Statement,TraktPlugin.GUI,GUIAnticipatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,SendAnticipatedShowsToFacade,The length of the statement  "	var filteredAnticipatedList = FilterAnticipatedShows (anticipatedItems.Shows).Where (s => !string.IsNullOrEmpty (s.Show.Title)).ToList (); " is 138.
Long Statement,TraktPlugin.GUI,GUIAnticipatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,SendAnticipatedShowsToFacade,The length of the statement  "	filteredAnticipatedList.Sort (new GUIListItemShowSorter (TraktSettings.SortByAnticipatedShows.Field' TraktSettings.SortByAnticipatedShows.Direction)); " is 150.
Long Statement,TraktPlugin.GUI,GUIAnticipatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,SendAnticipatedShowsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' filteredAnticipatedList.Count ()' filteredAnticipatedList.Count () > 1 ? Translation.SeriesPlural : Translation.Series)); " is 185.
Long Statement,TraktPlugin.GUI,GUIAnticipatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,PublishShowSkinProperties,The length of the statement  "	GUICommon.SetProperty ("#Trakt.Show.ListCount.Extra"' string.Format (Translation.AppearsInList' anticipatedItem.ListCount)); " is 124.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayMovie,The length of the statement  "			TraktLogger.Warning ("Parental controls pin code has not successfully been entered. Window ID = {0}"' GUIWindowManager.ActiveWindow); " is 133.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayMovie,The length of the statement  "	TraktLogger.Info ("Attempting to play movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year.ToLogString ()' movie.Ids.Imdb.ToLogString ()' movie.Ids.Tmdb.ToLogString ()); " is 211.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayMovie,The length of the statement  "		bool movieExists = TraktHandlers.MovingPictures.FindMovieID (movie.Title' movie.Year.GetValueOrDefault ()' movie.Ids.Imdb' movie.Ids.Tmdb' ref movieid); " is 152.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayMovie,The length of the statement  "		if (TraktHandlers.MyVideos.FindMovieID (movie.Title' movie.Year.GetValueOrDefault ()' movie.Ids.Imdb' movie.Ids.Tmdb' ref imdbMovie)) { " is 135.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayMovie,The length of the statement  "		if (TraktHandlers.MyFilmsHandler.FindMovie (movie.Title' movie.Year.GetValueOrDefault ()' movie.Ids.Imdb' ref movieid' ref config)) { " is 133.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayMovie,The length of the statement  "		TraktLogger.Info ("There were no movies found in local plugin databases. Attempting to search and/or play trailer(s) from the Trailers plugin"); " is 144.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayEpisode,The length of the statement  "			TraktLogger.Warning ("Parental controls pin code has not successfully been entered. Window ID = {0}"' GUIWindowManager.ActiveWindow); " is 133.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayEpisode,The length of the statement  "		TraktLogger.Info ("There were no episodes found in local plugin databases. Attempting to search and/or play trailer(s) from the Trailers plugin"); " is 146.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayFirstUnwatchedEpisode,The length of the statement  "			TraktLogger.Warning ("Parental controls pin code has not successfully been entered. Window ID = {0}"' GUIWindowManager.ActiveWindow); " is 133.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayFirstUnwatchedEpisode,The length of the statement  "	TraktLogger.Info ("Attempting to play episodes for tv show. TVDb ID = '{0}'' IMDb ID = '{1}'"' show.Ids.Tvdb.ToLogString ()' show.Ids.Imdb.ToLogString ()); " is 155.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckAndPlayFirstUnwatchedEpisode,The length of the statement  "		TraktLogger.Info ("There were no episodes found in local plugin databases. Attempting to search and/or play trailer(s) from the Trailers plugin"); " is 146.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,MarkShowAsWatched,The length of the statement  "		TraktLogger.Info ("Adding all episodes from show to trakt.tv watched history. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TVDb ID = '{3}'' TMDb ID = '{4}'"' show.Title' show.Year.ToLogString ()' show.Ids.Imdb.ToLogString ()' show.Ids.Tvdb.ToLogString ()' show.Ids.Tmdb.ToLogString ()); " is 287.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,MarkSeasonAsWatched,The length of the statement  "		TraktLogger.Info ("Adding all episodes in season from show to trakt.tv watched history. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TVDb ID = '{3}'' TMDb ID = '{4}'' Season = '{5}'"' show.Title' show.Year.ToLogString ()' show.Ids.Imdb.ToLogString ()' show.Ids.Tvdb.ToLogString ()' show.Ids.Tmdb.ToLogString ()' season); " is 321.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,AddShowToCollection,The length of the statement  "		TraktLogger.Info ("Adding all episodes from show to trakt.tv collection. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TVDb ID = '{3}'' TMDb ID = '{4}'"' show.Title' show.Year.ToLogString ()' show.Ids.Imdb.ToLogString ()' show.Ids.Tvdb.ToLogString ()' show.Ids.Tmdb.ToLogString ()); " is 282.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,AddSeasonToLibrary,The length of the statement  "		TraktLogger.Info ("Adding all episodes in season from show to trakt.tv collection. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TVDb ID = '{3}'' TMDb ID = '{4}'' Season = '{5}'"' show.Title' show.Year.ToLogString ()' show.Ids.Imdb.ToLogString ()' show.Ids.Tvdb.ToLogString ()' show.Ids.Tmdb.ToLogString ()' season); " is 316.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetUserProperties,The length of the statement  "	SetProperty ("#Trakt.User.Gender"' string.IsNullOrEmpty (user.Gender) ? null : Translation.GetByName (string.Format ("Gender{0}"' user.Gender))); " is 145.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetStatisticProperties,The length of the statement  "		SetProperty ("#Trakt.Statistics.Shows.Loved"' Username == TraktSettings.Username ? TraktCache.StatsShowsLoved () : stats.Shows.Ratings); " is 136.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetStatisticProperties,The length of the statement  "		SetProperty ("#Trakt.Statistics.Episodes.Loved"' Username == TraktSettings.Username ? TraktCache.StatsEpisodesLoved () : stats.Episodes.Ratings); " is 145.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetStatisticProperties,The length of the statement  "		SetProperty ("#Trakt.Statistics.Episodes.Hated"' Username == TraktSettings.Username ? TraktCache.StatsEpisodesHated () : 0); " is 124.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetStatisticProperties,The length of the statement  "		SetProperty ("#Trakt.Statistics.Movies.Loved"' Username == TraktSettings.Username ? TraktCache.StatsMoviesLoved () : stats.Movies.Ratings); " is 139.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetStatisticProperties,The length of the statement  "		SetProperty ("#Trakt.Statistics.Movies.Hated"' Username == TraktSettings.Username ? TraktCache.StatsMoviesHated () : 0); " is 120.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetCommentProperties,The length of the statement  "		SetProperty ("#Trakt.Shout.Text"' System.Web.HttpUtility.HtmlDecode (comment.Text.RemapHighOrderChars ()).StripHTML ()); " is 120.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetMovieProperties,The length of the statement  "	SetProperty ("#Trakt.Movie.Overview"' movie.Overview.ToNullIfEmpty () == null ? Translation.NoMovieSummary : movie.Overview.RemapHighOrderChars ()); " is 148.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetSeasonProperties,The length of the statement  "	SetProperty ("#Trakt.Season.Url"' string.Format ("http://trakt.tv/shows/{0}/seasons/{1}"' show.Ids.Slug' season.Number)); " is 121.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetSeasonProperties,The length of the statement  "	//SetProperty("#Trakt.Season.PosterImageFilename"' season.Images == null ? string.Empty : season.Images.Poster.LocalImageFilename(ArtworkType.SeasonPoster)); " is 157.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetShowProperties,The length of the statement  "	SetProperty ("#Trakt.Show.Overview"' show.Overview.ToNullIfEmpty () == null ? Translation.NoShowSummary : show.Overview.RemapHighOrderChars ()); " is 144.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetEpisodeProperties,The length of the statement  "		SetProperty ("#Trakt.Episode.FirstAiredLocalized"' episode.FirstAired.FromISO8601 ().ToLocalTime ().ToShortDateString ()); " is 122.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetEpisodeProperties,The length of the statement  "		SetProperty ("#Trakt.Episode.FirstAiredLocalizedDayOfWeek"' episode.FirstAired.FromISO8601 ().ToLocalTime ().ToLocalisedDayOfWeek ()); " is 134.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetEpisodeProperties,The length of the statement  "		SetProperty ("#Trakt.Episode.FirstAiredLocalizedTime"' episode.FirstAired.FromISO8601 ().ToLocalTime ().ToShortTimeString ()); " is 126.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetEpisodeProperties,The length of the statement  "	SetProperty ("#Trakt.Episode.Title"' string.IsNullOrEmpty (episode.Title) ? string.Format ("{0} {1}"' Translation.Episode' episode.Number.ToString ()) : episode.Title.RemapHighOrderChars ()); " is 191.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetEpisodeProperties,The length of the statement  "	SetProperty ("#Trakt.Episode.Url"' string.Format ("http://trakt.tv/shows/{0}/seasons/{1}/episodes/{2}"' show.Ids.Slug' episode.Season' episode.Number)); " is 152.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetEpisodeProperties,The length of the statement  "	SetProperty ("#Trakt.Episode.Overview"' episode.Overview.ToNullIfEmpty () == null ? Translation.NoEpisodeSummary : episode.Overview.RemapHighOrderChars ()); " is 156.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetEpisodeProperties,The length of the statement  "	//    SetProperty("#Trakt.Episode.EpisodeImageFilename"' episode.Images.ScreenShot.LocalImageFilename(ArtworkType.EpisodeImage)); " is 129.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetPersonProperties,The length of the statement  "	//    SetProperty("#Trakt.Person.HeadshotFilename"' person.Images.HeadShot.LocalImageFilename(ArtworkType.PersonHeadshot)); " is 123.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetPersonProperties,The length of the statement  "	//    if (person.Images.Fanart != null && System.IO.File.Exists(person.Images.Fanart.LocalImageFilename(ArtworkType.PersonFanart))) " is 131.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetPersonProperties,The length of the statement  "	//        SetProperty("#Trakt.Person.FanartFilename"' person.Images.Fanart.LocalImageFilename(ArtworkType.PersonFanart)); " is 121.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowLayoutMenu,The length of the statement  "		var facade = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow).GetControl ((int)TraktGUIControls.Facade) as GUIFacadeControl; " is 134.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowLayoutMenu,The length of the statement  "		GUIControl.SetControlLabel (GUIWindowManager.ActiveWindow' (int)TraktGUIControls.Layout' GetLayoutTranslation (newLayout)); " is 123.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowSortMenu,The length of the statement  "	if (GUIWindowManager.ActiveWindow == (int)TraktGUIWindows.TrendingMovies || GUIWindowManager.ActiveWindow == (int)TraktGUIWindows.TrendingShows) { " is 146.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowSortMenu,The length of the statement  "	if (GUIWindowManager.ActiveWindow == (int)TraktGUIWindows.WatchedListMovies || GUIWindowManager.ActiveWindow == (int)TraktGUIWindows.WatchedListShows) { " is 152.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowSortMenu,The length of the statement  "	if (GUIWindowManager.ActiveWindow == (int)TraktGUIWindows.AnticipatedMovies || GUIWindowManager.ActiveWindow == (int)TraktGUIWindows.AnticipatedShows) { " is 152.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowMovieTrailersMenu,The length of the statement  "				TraktLogger.Warning ("Parental controls pin code has not successfully been entered. Window ID = {0}"' GUIWindowManager.ActiveWindow); " is 133.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTVShowTrailersMenu,The length of the statement  "				TraktLogger.Warning ("Parental controls pin code has not successfully been entered. Window ID = {0}"' GUIWindowManager.ActiveWindow); " is 133.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTVSeasonTrailersPluginMenu,The length of the statement  "			TraktLogger.Warning ("Parental controls pin code has not successfully been entered. Window ID = {0}"' GUIWindowManager.ActiveWindow); " is 133.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The length of the statement  "		TraktLogger.Info ("Displaying rate dialog for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString ()' imdbid.ToLogString ()); " is 151.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The length of the statement  "		TraktLogger.Info ("Displaying Shouts for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString ()' imdbid.ToLogString ()); " is 146.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The length of the statement  "		TraktLogger.Info ("Displaying Related Movies for. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString ()' imdbid.ToLogString ()); " is 148.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The length of the statement  "		TraktLogger.Info ("Adding movie to Watchlist. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString ()' imdbid.ToLogString ()); " is 144.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The length of the statement  "		TraktLogger.Info ("Adding movie to Custom List. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString ()' imdbid.ToLogString ()); " is 146.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The length of the statement  "		TraktLogger.Info ("Displaying Cast for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString ()' imdbid.ToLogString ()); " is 144.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The length of the statement  "		TraktLogger.Info ("Displaying Crew for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString ()' imdbid.ToLogString ()); " is 144.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "		TraktLogger.Info ("Displaying rate dialog for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString ()' tvdbid.ToLogString ()); " is 153.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "		TraktLogger.Info ("Displaying Shouts for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'' IMDb ID = '{3}'"' title' year.ToLogString ()' tvdbid.ToLogString ()' imdbid.ToLogString ()); " is 188.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "		TraktLogger.Info ("Displaying Related shows for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString ()' tvdbid.ToLogString ()); " is 155.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "		TraktHelper.ShowRelatedShows (title' year.ToNullableInt32 ()' tvdbid.ToNullableInt32 ()' imdbid.ToNullIfEmpty ()' null' null); " is 126.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "		TraktLogger.Info ("Displaying Season Info for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString ()' tvdbid.ToLogString ()); " is 153.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "		TraktLogger.Info ("Adding tv show to Watchlist. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString ()' tvdbid.ToLogString ()); " is 146.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "		TraktHelper.AddShowToWatchList (title' year.ToNullableInt32 ()' tvdbid.ToNullableInt32 ()' imdbid.ToNullIfEmpty ()' null' null); " is 128.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "		TraktLogger.Info ("Adding tv show to Custom List. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString ()' tvdbid.ToLogString ()); " is 148.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "		TraktLogger.Info ("Displaying Cast for show. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString ()' imdbid.ToLogString ()); " is 143.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The length of the statement  "		TraktLogger.Info ("Displaying Crew for show. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString ()' imdbid.ToLogString ()); " is 143.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The length of the statement  "		TraktLogger.Info ("Displaying rate dialog for tv season. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'' Season = '{3}'"' title' year.ToLogString ()' tvdbid.ToLogString ()' season); " is 179.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The length of the statement  "		TraktLogger.Info ("Displaying Shouts for tv season. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'' IMDb ID = '{3}'' Season = '{4}'"' title' year.ToLogString ()' tvdbid.ToLogString ()' imdbid.ToLogString ()' season); " is 214.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The length of the statement  "		TraktHelper.ShowTVSeasonShouts (title' year.ToNullableInt32 ()' tvdbid.ToNullableInt32 ()' null' imdbid' seasonNumber' false' fanart); " is 134.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The length of the statement  "		TraktLogger.Info ("Adding tv season to Watchlist. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}' Season = '{3}'"' title' year.ToLogString ()' tvdbid.ToLogString ()' season); " is 171.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The length of the statement  "		TraktHelper.AddSeasonToWatchList (title' year.ToNullableInt32 ()' seasonNumber' tvdbid.ToNullableInt32 ()' imdbid.ToNullIfEmpty ()' null' null); " is 144.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The length of the statement  "		TraktLogger.Info ("Adding tv season to Custom List. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'' Season = '{3}'"' title' year.ToLogString ()' tvdbid.ToLogString ()' season); " is 174.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The length of the statement  "	return ShowTraktExtEpisodeMenu (title' year' season' episode' tvdbid' null' episodetvdbid' isWatched' fanart' people' showAll); " is 127.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The length of the statement  "		TraktLogger.Info ("Displaying rate dialog for tv episode. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'' Show ID = '{4}'' Episode ID = '{5}'"' title' year.ToLogString ()' season' episode' tvdbid.ToLogString ()' episodetvdbid.ToLogString ()); " is 256.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The length of the statement  "		TraktLogger.Info ("Displaying Shouts for tv episode. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'"' title' year.ToLogString ()' season' episode); " is 161.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The length of the statement  "		TraktHelper.ShowEpisodeShouts (title' year.ToNullableInt32 ()' tvdbid.ToNullableInt32 ()' null' imdbid.ToNullIfEmpty ()' season.ToInt ()' episode.ToInt ()' isWatched' fanart); " is 175.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The length of the statement  "		TraktLogger.Info ("Adding tv episode to Watchlist. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'"' title' year.ToLogString ()' season' episode); " is 159.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The length of the statement  "		TraktHelper.AddEpisodeToWatchList (title' season.ToInt ()' episode.ToInt ()' tvdbid.ToNullableInt32 ()' null' null' null); " is 122.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The length of the statement  "		TraktLogger.Info ("Adding tv episode to Custom List. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'' Episode ID = '{4}'"' title' year.ToLogString ()' season' episode' episodetvdbid.ToLogString ()); " is 211.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityItemName,The length of the statement  "				name = string.Format ("{0} - {1}x{2}{3}"' activity.Show.Title' activity.Episode.Season.ToString ()' activity.Episode.Number.ToString ()' episodeName); " is 150.
Long Statement,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityItemName,The length of the statement  "					name = string.Format ("{0} - {1} {2}"' activity.ListItem.Show.Title' Translation.Season' activity.ListItem.Season.Number); " is 122.
Long Statement,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnShowContextMenu,The length of the statement  "		listItem = new GUIListItem (SelectedType == TraktItemType.movie ? Translation.RelatedMovies : Translation.RelatedShows); " is 120.
Long Statement,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnShowContextMenu,The length of the statement  "			loadingParam = string.Format ("search:{0} S{1}E{2}"' selectedListItem.Show.Title' selectedListItem.Episode.Season.ToString ("D2")' selectedListItem.Episode.Number.ToString ("D2")); " is 180.
Long Statement,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnShowContextMenu,The length of the statement  "			loadPar = string.Format ("{0} S{1}E{2}"' selectedListItem.Show.Title' selectedListItem.Episode.Season.ToString ("D2")' selectedListItem.Episode.Number.ToString ("D2")); " is 168.
Long Statement,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,SendListItemsToFacade,The length of the statement  "		string itemName = CurrentList.DisplayNumbers ? string.Format ("{0}. {1}"' itemId' GetListItemLabel (listItem)) : GetListItemLabel (listItem); " is 141.
Long Statement,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,SendListItemsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' listItems.Count ().ToString ()' listItems.Count () > 1 ? Translation.Items : Translation.Item)); " is 160.
Long Statement,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,GetListItemLabel,The length of the statement  "		retValue = string.Format ("{0} - {1}x{2}{3}"' listItem.Show.Title' listItem.Episode.Season' listItem.Episode.Number' string.IsNullOrEmpty (listItem.Episode.Title) ? string.Empty : " - " + listItem.Episode.Title); " is 212.
Long Statement,TraktPlugin.GUI,GUICustomListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUICustomListItem.cs,GetImages,The length of the statement  "		for (int j = groupSize * i; j < groupSize * i + (groupSize * (i + 1) > itemsWithThumbs.Count ? itemsWithThumbs.Count - groupSize * i : groupSize); j++) { " is 153.
Long Statement,TraktPlugin.GUI,GUICustomListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUICustomListItem.cs,SetImageToGui,The length of the statement  "	string suffix = mainOverlay.ToString ().Replace ("' "' string.Empty) + Enum.GetName (typeof(RatingOverlayImage)' ratingOverlay); " is 128.
Long Statement,TraktPlugin.GUI,GUIEpisodeListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,GetImages,The length of the statement  "		for (int j = groupSize * i; j < groupSize * i + (groupSize * (i + 1) > itemsWithThumbs.Count ? itemsWithThumbs.Count - groupSize * i : groupSize); j++) { " is 153.
Long Statement,TraktPlugin.GUI,GUIEpisodeListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,GetImages,The length of the statement  "		//    int x = Convert.ToInt32(File.Exists(s1.EpisodeImages.ScreenShot.LocalImageFilename(ArtworkType.EpisodeImage))) + (s1.ShowImages == null ? 0 : Convert.ToInt32(File.Exists(s1.ShowImages.Fanart.LocalImageFilename(ArtworkType.ShowFanart)))); " is 243.
Long Statement,TraktPlugin.GUI,GUIEpisodeListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,GetImages,The length of the statement  "		//    int y = Convert.ToInt32(File.Exists(s2.EpisodeImages.ScreenShot.LocalImageFilename(ArtworkType.EpisodeImage))) + (s2.ShowImages == null ? 0 : Convert.ToInt32(File.Exists(s2.ShowImages.Fanart.LocalImageFilename(ArtworkType.ShowFanart)))); " is 243.
Long Statement,TraktPlugin.GUI,GUIEpisodeListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,GetImages,The length of the statement  "				if (item.EpisodeImages.AirDate != null && Convert.ToDateTime (item.EpisodeImages.AirDate) <= Convert.ToDateTime (DateTime.Now.ToShortDateString ())) { " is 150.
Long Statement,TraktPlugin.GUI,GUIEpisodeListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,GetImages,The length of the statement  "					episodeImages = TmdbCache.GetEpisodeImages (item.EpisodeImages.Id' item.EpisodeImages.Season' item.EpisodeImages.Episode); " is 122.
Long Statement,TraktPlugin.GUI,GUIEpisodeListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,SetImageToGui,The length of the statement  "	string suffix = mainOverlay.ToString ().Replace ("' "' string.Empty) + Enum.GetName (typeof(RatingOverlayImage)' ratingOverlay); " is 128.
Long Statement,TraktPlugin.GUI,GUIEpisodeListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,SetImageToGui,The length of the statement  "		memoryImage = GUIImageHandler.DrawOverlayOnEpisodeThumb (imageFilePath' mainOverlay' ratingOverlay' new Size (400' 225)); " is 121.
Long Statement,TraktPlugin.GUI,GUIMovieListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIMovieListItem.cs,GetImages,The length of the statement  "		for (int j = groupSize * i; j < groupSize * i + (groupSize * (i + 1) > itemsWithThumbs.Count ? itemsWithThumbs.Count - groupSize * i : groupSize); j++) { " is 153.
Long Statement,TraktPlugin.GUI,GUIMovieListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIMovieListItem.cs,GetImages,The length of the statement  "		//    int x = Convert.ToInt32(File.Exists(m1.MovieImages.Poster.LocalImageFilename(ArtworkType.MoviePoster))) + Convert.ToInt32(File.Exists(m1.MovieImages.Fanart.LocalImageFilename(ArtworkType.MovieFanart))); " is 208.
Long Statement,TraktPlugin.GUI,GUIMovieListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIMovieListItem.cs,GetImages,The length of the statement  "		//    int y = Convert.ToInt32(File.Exists(m2.MovieImages.Poster.LocalImageFilename(ArtworkType.MoviePoster))) + Convert.ToInt32(File.Exists(m2.MovieImages.Fanart.LocalImageFilename(ArtworkType.MovieFanart))); " is 208.
Long Statement,TraktPlugin.GUI,GUIMovieListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIMovieListItem.cs,SetImageToGui,The length of the statement  "	string suffix = mainOverlay.ToString ().Replace ("' "' string.Empty) + Enum.GetName (typeof(RatingOverlayImage)' ratingOverlay); " is 128.
Long Statement,TraktPlugin.GUI,GUIPersonListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIPersonListItem.cs,GetImages,The length of the statement  "		for (int j = groupSize * i; j < groupSize * i + (groupSize * (i + 1) > itemsWithThumbs.Count ? itemsWithThumbs.Count - groupSize * i : groupSize); j++) { " is 153.
Long Statement,TraktPlugin.GUI,GUIPersonListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIPersonListItem.cs,GetImages,The length of the statement  "					//    remoteThumb = TraktSettings.DownloadFullSizeFanart ? item.PeopleImages.Fanart.FullSize : item.PeopleImages.Fanart.MediumSize; " is 131.
Long Statement,TraktPlugin.GUI,GUISeasonListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUISeasonListItem.cs,GetImages,The length of the statement  "		for (int j = groupSize * i; j < groupSize * i + (groupSize * (i + 1) > itemsWithThumbs.Count ? itemsWithThumbs.Count - groupSize * i : groupSize); j++) { " is 153.
Long Statement,TraktPlugin.GUI,GUISeasonListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUISeasonListItem.cs,SetImageToGui,The length of the statement  "	string suffix = Enum.GetName (typeof(MainOverlayImage)' mainOverlay) + Enum.GetName (typeof(RatingOverlayImage)' ratingOverlay); " is 128.
Long Statement,TraktPlugin.GUI,GUIShowListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIShowListItem.cs,GetImages,The length of the statement  "		for (int j = groupSize * i; j < groupSize * i + (groupSize * (i + 1) > itemsWithThumbs.Count ? itemsWithThumbs.Count - groupSize * i : groupSize); j++) { " is 153.
Long Statement,TraktPlugin.GUI,GUIShowListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIShowListItem.cs,GetImages,The length of the statement  "		//    int x = Convert.ToInt32(File.Exists(s1.ShowImages.Poster.LocalImageFilename(ArtworkType.ShowPoster))) + Convert.ToInt32(File.Exists(s1.ShowImages.Fanart.LocalImageFilename(ArtworkType.ShowFanart))); " is 204.
Long Statement,TraktPlugin.GUI,GUIShowListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIShowListItem.cs,GetImages,The length of the statement  "		//    int y = Convert.ToInt32(File.Exists(s2.ShowImages.Poster.LocalImageFilename(ArtworkType.ShowPoster))) + Convert.ToInt32(File.Exists(s2.ShowImages.Fanart.LocalImageFilename(ArtworkType.ShowFanart))); " is 204.
Long Statement,TraktPlugin.GUI,GUIShowListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIShowListItem.cs,SetImageToGui,The length of the statement  "	string suffix = Enum.GetName (typeof(MainOverlayImage)' mainOverlay) + Enum.GetName (typeof(RatingOverlayImage)' ratingOverlay); " is 128.
Long Statement,TraktPlugin.GUI,GUIUserListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIUserListItem.cs,GetImages,The length of the statement  "		for (int j = groupSize * i; j < groupSize * i + (groupSize * (i + 1) > itemsWithThumbs.Count ? itemsWithThumbs.Count - groupSize * i : groupSize); j++) { " is 153.
Long Statement,TraktPlugin.GUI,GUILists,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,CopyList,The length of the statement  "		TraktLogger.Info ("Creating new list online. Privacy = '{0}'' Name = '{1}'"' copyParams.Destination.Privacy' copyParams.Destination.Name); " is 138.
Long Statement,TraktPlugin.GUI,GUILists,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,CopyList,The length of the statement  "			var userListItems = TraktAPI.TraktAPI.GetUserListItems (copyParams.Username' copyParams.Source.Ids.Trakt.ToString ()' "min"); " is 125.
Long Statement,TraktPlugin.GUI,GUILists,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,SendListsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' lists.Count ().ToString ()' lists.Count () > 1 ? Translation.Lists : Translation.List)); " is 152.
Long Statement,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,SendCrewToFacade,The length of the statement  "	filteredCrew.Sort (new GUIListItemMovieSorter (TraktSettings.SortByCreditMovies.Field' TraktSettings.SortByCreditMovies.Direction)); " is 132.
Long Statement,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,SendCrewToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' filteredCrew.Count' filteredCrew.Count > 1 ? Translation.Movies : Translation.Movie)); " is 150.
Long Statement,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,SendCastToFacade,The length of the statement  "	filteredCast.Sort (new GUIListItemMovieSorter (TraktSettings.SortByCreditMovies.Field' TraktSettings.SortByCreditMovies.Direction)); " is 132.
Long Statement,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,SendCastToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' filteredCast.Count' filteredCast.Count > 1 ? Translation.Movies : Translation.Movie)); " is 150.
Long Statement,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnCrewSelected,The length of the statement  "	GUIImageHandler.LoadFanart (backdrop' TmdbCache.GetMovieBackdropFilename ((item as GUIMovieListItem).Images.MovieImages)); " is 122.
Long Statement,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnCastSelected,The length of the statement  "	GUIImageHandler.LoadFanart (backdrop' TmdbCache.GetMovieBackdropFilename ((item as GUIMovieListItem).Images.MovieImages)); " is 122.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnShowContextMenu,The length of the statement  "		if (GUIUtils.ShowYesNoDialog (Translation.Network' string.Format (Translation.SendFollowRequest' selectedItem.Label)' true)) { " is 126.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnShowContextMenu,The length of the statement  "		if (GUIUtils.ShowYesNoDialog (Translation.FollowerRequest' string.Format (Translation.ApproveFollowerMessage' selectedItem.Label)' true)) { " is 139.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnShowContextMenu,The length of the statement  "		if (GUIUtils.ShowYesNoDialog (Translation.FollowerRequest' string.Format (Translation.ApproveFollowerAndFollowBackMessage' selectedItem.Label)' true)) { " is 152.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnShowContextMenu,The length of the statement  "			TraktCache.FollowerRequests = TraktCache.FollowerRequests.Except (TraktCache.FollowerRequests.Where (f => f.User.Username == selectedItem.Label)); " is 146.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnShowContextMenu,The length of the statement  "		if (GUIUtils.ShowYesNoDialog (Translation.FollowerRequest' string.Format (Translation.DenyFollowRequest' selectedItem.Label)' true)) { " is 134.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnShowContextMenu,The length of the statement  "			TraktCache.FollowerRequests = TraktCache.FollowerRequests.Except (TraktCache.FollowerRequests.Where (f => f.User.Username == selectedItem.Label)); " is 146.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,InitProperties,The length of the statement  "	if (CurrentSelectedUser == null || LastRequest < DateTime.UtcNow.Subtract (new TimeSpan (0' TraktSettings.WebRequestCacheMinutes' 0))) " is 134.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,LoadActivityTypes,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' Facade.Count.ToString ()' GUILocalizeStrings.Get (507))); " is 121.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,SendFriendsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' friendCount.ToString ()' friendCount > 1 ? Translation.Friends : Translation.Friend)); " is 150.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,SendFollowerToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' followerCount.ToString ()' followerCount > 1 ? Translation.Follower : Translation.Followers)); " is 158.
Long Statement,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,SendFollowerRequestsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' followerReqCount.ToString ()' followerReqCount > 1 ? Translation.FollowerRequest : Translation.FollowerRequests)); " is 178.
Long Statement,TraktPlugin.GUI,GUIPersonShowCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,SendCrewToFacade,The length of the statement  "	filteredCrew.Sort (new GUIListItemShowSorter (TraktSettings.SortByCreditShows.Field' TraktSettings.SortByCreditShows.Direction)); " is 129.
Long Statement,TraktPlugin.GUI,GUIPersonShowCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,SendCrewToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' filteredCrew.Count' filteredCrew.Count > 1 ? Translation.Shows : Translation.Show)); " is 148.
Long Statement,TraktPlugin.GUI,GUIPersonShowCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,SendCastToFacade,The length of the statement  "	filteredCast.Sort (new GUIListItemShowSorter (TraktSettings.SortByCreditShows.Field' TraktSettings.SortByCreditShows.Direction)); " is 129.
Long Statement,TraktPlugin.GUI,GUIPersonShowCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,SendCastToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' filteredCast.Count' filteredCast.Count > 1 ? Translation.Shows : Translation.Show)); " is 148.
Long Statement,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,GetPopularMovies,The length of the statement  "	if (PopularMoviePages == null || LastRequest < DateTime.UtcNow.Subtract (new TimeSpan (0' TraktSettings.WebRequestCacheMinutes' 0))) { " is 134.
Long Statement,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,SendPopularMoviesToFacade,The length of the statement  "	var filteredPopularList = FilterPopularMovies (PopularItems.Movies).Where (m => !string.IsNullOrEmpty (m.Title)).ToList (); " is 123.
Long Statement,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,SendPopularMoviesToFacade,The length of the statement  "	filteredPopularList.Sort (new GUIListItemMovieSorter (TraktSettings.SortByPopularMovies.Field' TraktSettings.SortByPopularMovies.Direction)); " is 141.
Long Statement,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,SendPopularMoviesToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' filteredPopularList.Count ()' filteredPopularList.Count () > 1 ? Translation.Movies : Translation.Movie)); " is 170.
Long Statement,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnMovieSelected,The length of the statement  "	GUIImageHandler.LoadFanart (backdrop' TmdbCache.GetMovieBackdropFilename ((item as GUIMovieListItem).Images.MovieImages)); " is 122.
Long Statement,TraktPlugin.GUI,GUIPopularShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,GetPopularShows,The length of the statement  "	if (PopularShowPages == null || LastRequest < DateTime.UtcNow.Subtract (new TimeSpan (0' TraktSettings.WebRequestCacheMinutes' 0))) { " is 133.
Long Statement,TraktPlugin.GUI,GUIPopularShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,SendPopularShowsToFacade,The length of the statement  "	var filteredPopularList = FilterPopularShows (PopularItems.Shows).Where (s => !string.IsNullOrEmpty (s.Title)).ToList (); " is 121.
Long Statement,TraktPlugin.GUI,GUIPopularShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,SendPopularShowsToFacade,The length of the statement  "	filteredPopularList.Sort (new GUIListItemShowSorter (TraktSettings.SortByPopularShows.Field' TraktSettings.SortByPopularShows.Direction)); " is 138.
Long Statement,TraktPlugin.GUI,GUIPopularShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,SendPopularShowsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' filteredPopularList.Count ()' filteredPopularList.Count () > 1 ? Translation.SeriesPlural : Translation.Series)); " is 177.
Long Statement,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,OnShowContextMenu,The length of the statement  "		string loadingParam = string.Format ("search:{0} S{1}E{2}"' selectedShow.Title' selectedEpisode.Season.ToString ("D2")' selectedEpisode.Number.ToString ("D2")); " is 160.
Long Statement,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,OnShowContextMenu,The length of the statement  "		string loadPar = string.Format ("{0} S{1}E{2}"' selectedShow.Title' selectedEpisode.Season.ToString ("D2")' selectedEpisode.Number.ToString ("D2")); " is 148.
Long Statement,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,SendRecentlyAddedToFacade,The length of the statement  "					AirDate = episodeSummary.Episode.FirstAired == null ? null : episodeSummary.Episode.FirstAired.FromISO8601 ().ToLocalTime ().ToShortDateString () " is 145.
Long Statement,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,SendRecentlyAddedToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' episodeCount.ToString ()' episodeCount > 1 ? Translation.Episodes : Translation.Episode)); " is 154.
Long Statement,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,OnEpisodeSelected,The length of the statement  "	GUIImageHandler.LoadFanart (backdrop' TmdbCache.GetShowBackdropFilename ((item as GUIEpisodeListItem).Images.ShowImages)); " is 122.
Long Statement,TraktPlugin.GUI,GUIRecentAddedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedMovies.cs,SendRecentlyAddedToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' activities.Count ().ToString ()' activities.Count () > 1 ? Translation.Movies : Translation.Movie)); " is 164.
Long Statement,TraktPlugin.GUI,GUIRecentAddedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedMovies.cs,OnMovieSelected,The length of the statement  "	GUIImageHandler.LoadFanart (backdrop' TmdbCache.GetMovieBackdropFilename ((item as GUIMovieListItem).Images.MovieImages)); " is 122.
Long Statement,TraktPlugin.GUI,GUIRecentShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,SendRecentCommentsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' comments.Count ().ToString ()' comments.Count () > 1 ? Translation.Comment : Translation.Comments)); " is 164.
Long Statement,TraktPlugin.GUI,GUIRecentShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,GetCommentItemTitle,The length of the statement  "		title = string.Format ("{0} - {1}x{2} - {3}"' comment.Show.Title' comment.Episode.Season' comment.Episode.Number' comment.Episode.Title ?? string.Format ("{0} {1}"' Translation.Episode' comment.Episode.Number)); " is 211.
Long Statement,TraktPlugin.GUI,GUIRelatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,SendRelatedMoviesToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' movies.Count ().ToString ()' movies.Count () > 1 ? Translation.Movies : Translation.Movie)); " is 156.
Long Statement,TraktPlugin.GUI,GUIRelatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,OnMovieSelected,The length of the statement  "	GUIImageHandler.LoadFanart (backdrop' TmdbCache.GetMovieBackdropFilename ((item as GUIMovieListItem).Images.MovieImages)); " is 122.
Long Statement,TraktPlugin.GUI,GUIRelatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedShows.cs,SendRelatedShowsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' shows.Count ().ToString ()' shows.Count () > 1 ? Translation.SeriesPlural : Translation.Series)); " is 161.
Long Statement,TraktPlugin.GUI,GUISearch,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,SendSearchResultsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' SearchTypes.Count.ToString ()' Translation.SearchTypes)); " is 121.
Long Statement,TraktPlugin.GUI,GUISearch,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,SendSearchResultsToWindow,The length of the statement  "		GUISearchEpisodes.Episodes = SearchResults.Where (s => s.Type == SearchType.episode.ToString ()).Select (e => new TraktEpisodeSummaryEx { " is 137.
Long Statement,TraktPlugin.GUI,GUISearch,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,InitProperties,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Search.SearchTerm"' string.IsNullOrEmpty (SearchTerm) ? Translation.EnterSearchTerm : SearchTerm); " is 128.
Long Statement,TraktPlugin.GUI,GUISearchEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchEpisodes.cs,OnShowContextMenu,The length of the statement  "		string loadingParam = string.Format ("search:{0} S{1}E{2}"' selectedShow.Title' selectedEpisode.Season.ToString ("D2")' selectedEpisode.Number.ToString ("D2")); " is 160.
Long Statement,TraktPlugin.GUI,GUISearchEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchEpisodes.cs,OnShowContextMenu,The length of the statement  "		string loadPar = string.Format ("{0} S{1}E{2}"' selectedShow.Title' selectedEpisode.Season.ToString ("D2")' selectedEpisode.Number.ToString ("D2")); " is 148.
Long Statement,TraktPlugin.GUI,GUISearchEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchEpisodes.cs,SendSearchResultsToFacade,The length of the statement  "				AirDate = episodeSummary.Episode.FirstAired == null ? null : episodeSummary.Episode.FirstAired.FromISO8601 ().ToLocalTime ().ToShortDateString () " is 145.
Long Statement,TraktPlugin.GUI,GUISearchEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchEpisodes.cs,SendSearchResultsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' episodes.Count ().ToString ()' episodes.Count () > 1 ? Translation.Episodes : Translation.Episode)); " is 164.
Long Statement,TraktPlugin.GUI,GUISearchMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchMovies.cs,SendSearchResultsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' movies.Count ().ToString ()' movies.Count () > 1 ? Translation.Movies : Translation.Movie)); " is 156.
Long Statement,TraktPlugin.GUI,GUISearchMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchMovies.cs,OnMovieSelected,The length of the statement  "	GUIImageHandler.LoadFanart (backdrop' TmdbCache.GetMovieBackdropFilename ((item as GUIMovieListItem).Images.MovieImages)); " is 122.
Long Statement,TraktPlugin.GUI,GUISearchPeople,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchPeople.cs,SendSearchResultsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' people.Count ().ToString ()' people.Count () > 1 ? Translation.People : Translation.Person)); " is 157.
Long Statement,TraktPlugin.GUI,GUISearchShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchShows.cs,SendSearchResultsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' shows.Count ().ToString ()' shows.Count () > 1 ? Translation.TVShows : Translation.TVShow)); " is 156.
Long Statement,TraktPlugin.GUI,GUISearchUsers,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchUsers.cs,OnClicked,The length of the statement  "				if (GUIUtils.ShowYesNoDialog (Translation.Network' string.Format (Translation.SendFollowRequest' selectedUser.Username)' true)) { " is 129.
Long Statement,TraktPlugin.GUI,GUISearchUsers,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchUsers.cs,OnShowContextMenu,The length of the statement  "	if (!string.IsNullOrEmpty (TraktSettings.Username) && !string.IsNullOrEmpty (TraktSettings.Password) && !((selectedItem as GUIUserListItem).IsFollowed)) { " is 154.
Long Statement,TraktPlugin.GUI,GUISearchUsers,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchUsers.cs,OnShowContextMenu,The length of the statement  "		if (GUIUtils.ShowYesNoDialog (Translation.Network' string.Format (Translation.SendFollowRequest' selectedItem.Label)' true)) { " is 126.
Long Statement,TraktPlugin.GUI,GUISearchUsers,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchUsers.cs,SendSearchResultsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' users.Count ().ToString ()' users.Count () > 1 ? Translation.Users : Translation.User)); " is 152.
Long Statement,TraktPlugin.GUI,GUISeasonEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISeasonEpisodes.cs,OnShowContextMenu,The length of the statement  "		string loadingParam = string.Format ("search:{0} S{1}E{2}"' Show.Title' selectedEpisode.Season.ToString ("D2")' selectedEpisode.Number.ToString ("D2")); " is 152.
Long Statement,TraktPlugin.GUI,GUISeasonEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISeasonEpisodes.cs,OnShowContextMenu,The length of the statement  "		string loadPar = string.Format ("{0} S{1}E{2}"' Show.Title' selectedEpisode.Season.ToString ("D2")' selectedEpisode.Number.ToString ("D2")); " is 140.
Long Statement,TraktPlugin.GUI,GUISeasonEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISeasonEpisodes.cs,SendSeasonEpisodesToFacade,The length of the statement  "		string itemLabel = string.Format ("{0}. {1}"' episode.Number.ToString ()' string.IsNullOrEmpty (episode.Title) ? Translation.Episode + " " + episode.Number.ToString () : episode.Title); " is 185.
Long Statement,TraktPlugin.GUI,GUISeasonEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISeasonEpisodes.cs,SendSeasonEpisodesToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' itemCount.ToString ()' itemCount > 1 ? Translation.Episodes : Translation.Episode)); " is 148.
Long Statement,TraktPlugin.GUI,GUISettingsAccount,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsAccount.cs,IsValidEmail,The length of the statement  "	return Regex.IsMatch (emailAddress' @"^(?("")("".+?""@)|(([0-9a-zA-Z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-zA-Z])@))" + @"(?(\[)(\[(\d{1'3}\.){3}\d{1'3}\])|(([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2'6}))$"); " is 226.
Long Statement,TraktPlugin.GUI,GUISettingsAccount,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsAccount.cs,InitProperties,The length of the statement  "			GUIControl.SetControlLabel (GetID' btnDisconnectAccount.GetID' string.Format (Translation.DisconnectAccount' TraktSettings.Username)); " is 134.
Long Statement,TraktPlugin.GUI,GUIShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,SendCommentsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' distinctComments.Count ()' distinctComments.Count () > 1 ? Translation.Comments : Translation.Shout)); " is 166.
Long Statement,TraktPlugin.GUI,GUIShowSeasons,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShowSeasons.cs,OnShowContextMenu,The length of the statement  "	listItem = new GUIListItem (TraktSettings.SortSeasonsAscending ? Translation.SortSeasonsDescending : Translation.SortSeasonsAscending); " is 135.
Long Statement,TraktPlugin.GUI,GUIShowSeasons,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShowSeasons.cs,SendShowSeasonsToFacade,The length of the statement  "		string itemLabel = season.Number == 0 ? Translation.Specials : string.Format ("{0} {1}"' Translation.Season' season.Number.ToString ()); " is 136.
Long Statement,TraktPlugin.GUI,GUIShowSeasons,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShowSeasons.cs,SendShowSeasonsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' seasons.Count ().ToString ()' seasons.Count () > 1 ? Translation.Seasons : Translation.Season)); " is 160.
Long Statement,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,OnShowContextMenu,The length of the statement  "		string loadingParam = string.Format ("search:{0} S{1}E{2}"' selectedShow.Title' selectedEpisode.Season.ToString ("D2")' selectedEpisode.Number.ToString ("D2")); " is 160.
Long Statement,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,OnShowContextMenu,The length of the statement  "		string loadPar = string.Format ("{0} S{1}E{2}"' selectedShow.Title' selectedEpisode.Season.ToString ("D2")' selectedEpisode.Number.ToString ("D2")); " is 148.
Long Statement,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,SendRecentlyWatchedToFacade,The length of the statement  "		string episodeName = string.Format ("{0} - {1}x{2} - {3}"' recent.Show.Title' recent.Episode.Season' recent.Episode.Number' recent.Episode.Title ?? string.Format ("{0} {1}"' Translation.Episode' recent.Episode.Number)); " is 219.
Long Statement,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,SendRecentlyWatchedToFacade,The length of the statement  "				AirDate = recent.Episode.FirstAired == null ? null : recent.Episode.FirstAired.FromISO8601 ().ToLocalTime ().ToShortDateString () " is 129.
Long Statement,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,SendRecentlyWatchedToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' recentlyWatched.Count ().ToString ()' recentlyWatched.Count () > 1 ? Translation.Episodes : Translation.Episode)); " is 178.
Long Statement,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,OnEpisodeSelected,The length of the statement  "	GUIImageHandler.LoadFanart (backdrop' TmdbCache.GetShowBackdropFilename ((item as GUIEpisodeListItem).Images.ShowImages)); " is 122.
Long Statement,TraktPlugin.GUI,GUIRecentWatchedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedMovies.cs,SendRecentlyWatchedToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' recentlyWatched.Count ().ToString ()' recentlyWatched.Count () > 1 ? Translation.Movies : Translation.Movie)); " is 174.
Long Statement,TraktPlugin.GUI,GUIRecentWatchedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedMovies.cs,OnMovieSelected,The length of the statement  "	GUIImageHandler.LoadFanart (backdrop' TmdbCache.GetMovieBackdropFilename ((item as GUIMovieListItem).Images.MovieImages)); " is 122.
Long Statement,TraktPlugin.GUI,GUIUserProfile,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUserProfile.cs,LoadActivityTypes,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' Facade.Count.ToString ()' GUILocalizeStrings.Get (507))); " is 121.
Long Statement,TraktPlugin.GUI,GUIWatchListEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,OnShowContextMenu,The length of the statement  "		string loadingParam = string.Format ("search:{0} S{1}E{2}"' selectedShow.Title' selectedEpisode.Season.ToString ("D2")' selectedEpisode.Number.ToString ("D2")); " is 160.
Long Statement,TraktPlugin.GUI,GUIWatchListEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,OnShowContextMenu,The length of the statement  "		string loadPar = string.Format ("{0} S{1}E{2}"' selectedShow.Title' selectedEpisode.Season.ToString ("D2")' selectedEpisode.Number.ToString ("D2")); " is 148.
Long Statement,TraktPlugin.GUI,GUIWatchListEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,SendWatchListEpisodesToFacade,The length of the statement  "				AirDate = watchlistItem.Episode.FirstAired == null ? null : watchlistItem.Episode.FirstAired.FromISO8601 ().ToLocalTime ().ToShortDateString () " is 143.
Long Statement,TraktPlugin.GUI,GUIWatchListEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,SendWatchListEpisodesToFacade,The length of the statement  "		item.Label2 = watchlistItem.Episode.FirstAired == null ? " " : watchlistItem.Episode.FirstAired.FromISO8601 ().ToLocalTime ().ToShortDateString (); " is 147.
Long Statement,TraktPlugin.GUI,GUIWatchListEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,SendWatchListEpisodesToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' itemCount.ToString ()' itemCount > 1 ? Translation.Episodes : Translation.Episode)); " is 148.
Long Statement,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,SendRecommendedMoviesToFacade,The length of the statement  "	movieList.Sort (new GUIListItemMovieSorter (TraktSettings.SortByRecommendedMovies.Field' TraktSettings.SortByRecommendedMovies.Direction)); " is 139.
Long Statement,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,SendRecommendedMoviesToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' movies.Count ().ToString ()' movies.Count () > 1 ? Translation.Movies : Translation.Movie)); " is 156.
Long Statement,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,SetRecommendationProperties,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Recommendations.EndYear"' EndYear == 0 ? DateTime.Now.AddYears (3).Year.ToString () : EndYear.ToString ()); " is 137.
Long Statement,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnMovieSelected,The length of the statement  "	GUIImageHandler.LoadFanart (backdrop' TmdbCache.GetMovieBackdropFilename ((item as GUIMovieListItem).Images.MovieImages)); " is 122.
Long Statement,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,SendRecommendedShowsToFacade,The length of the statement  "	showList.Sort (new GUIListItemShowSorter (TraktSettings.SortByRecommendedShows.Field' TraktSettings.SortByRecommendedShows.Direction)); " is 135.
Long Statement,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,SendRecommendedShowsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' shows.Count ().ToString ()' shows.Count () > 1 ? Translation.SeriesPlural : Translation.Series)); " is 161.
Long Statement,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,SetRecommendationProperties,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Recommendations.EndYear"' EndYear == 0 ? DateTime.Now.AddYears (3).Year.ToString () : EndYear.ToString ()); " is 137.
Long Statement,TraktPlugin.GUI,GUITrendingShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,GetTrendingShows,The length of the statement  "	if (TrendingShowPages == null || LastRequest < DateTime.UtcNow.Subtract (new TimeSpan (0' TraktSettings.WebRequestCacheMinutes' 0))) { " is 134.
Long Statement,TraktPlugin.GUI,GUITrendingShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,SendTrendingShowsToFacade,The length of the statement  "	var filteredTrendingList = GUICommon.FilterTrendingShows (trendingItems.Shows).Where (s => !string.IsNullOrEmpty (s.Show.Title)).ToList (); " is 139.
Long Statement,TraktPlugin.GUI,GUITrendingShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,SendTrendingShowsToFacade,The length of the statement  "	filteredTrendingList.Sort (new GUIListItemShowSorter (TraktSettings.SortByTrendingShows.Field' TraktSettings.SortByTrendingShows.Direction)); " is 141.
Long Statement,TraktPlugin.GUI,GUITrendingShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,SendTrendingShowsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' filteredTrendingList.Count ()' filteredTrendingList.Count () > 1 ? Translation.SeriesPlural : Translation.Series)); " is 179.
Long Statement,TraktPlugin.GUI,GUITrendingShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,SendTrendingShowsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Trending.Description"' string.Format (Translation.TrendingTVShowsPeople' trendingItems.TotalWatchers.ToString ()' trendingItems.TotalItems.ToString ())); " is 183.
Long Statement,TraktPlugin.GUI,GUITrendingShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,PublishShowSkinProperties,The length of the statement  "	GUICommon.SetProperty ("#Trakt.Show.Watchers.Extra"' trendingItem.Watchers > 1 ? string.Format (Translation.PeopleWatching' trendingItem.Watchers) : Translation.PersonWatching); " is 177.
Long Statement,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,UpdateRating,The length of the statement  "	lblRatingAdvanced.Label = Rated == TraktRateValue.unrate ? GetRatingDescription () : string.Format ("({0}) {1} / 10"' GetRatingDescription ()' (int)Rated); " is 155.
Long Statement,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,GetTrendingMovies,The length of the statement  "	if (TrendingMoviePages == null || LastRequest < DateTime.UtcNow.Subtract (new TimeSpan (0' TraktSettings.WebRequestCacheMinutes' 0))) { " is 135.
Long Statement,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,SendTrendingMoviesToFacade,The length of the statement  "	var filteredTrendingList = GUICommon.FilterTrendingMovies (trendingItems.Movies).Where (m => !string.IsNullOrEmpty (m.Movie.Title)).ToList (); " is 142.
Long Statement,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,SendTrendingMoviesToFacade,The length of the statement  "	filteredTrendingList.Sort (new GUIListItemMovieSorter (TraktSettings.SortByTrendingMovies.Field' TraktSettings.SortByTrendingMovies.Direction)); " is 144.
Long Statement,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,SendTrendingMoviesToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' filteredTrendingList.Count ()' filteredTrendingList.Count () > 1 ? Translation.Movies : Translation.Movie)); " is 172.
Long Statement,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,SendTrendingMoviesToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Trending.Description"' string.Format (Translation.TrendingMoviePeople' trendingItems.TotalWatchers.ToString ()' trendingItems.TotalItems.ToString ())); " is 181.
Long Statement,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,PublishMovieSkinProperties,The length of the statement  "	GUICommon.SetProperty ("#Trakt.Movie.Watchers.Extra"' trendingItem.Watchers > 1 ? string.Format (Translation.PeopleWatching' trendingItem.Watchers) : Translation.PersonWatching); " is 178.
Long Statement,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnMovieSelected,The length of the statement  "	GUIImageHandler.LoadFanart (backdrop' TmdbCache.GetMovieBackdropFilename ((item as GUIMovieListItem).Images.MovieImages)); " is 122.
Long Statement,TraktPlugin.GUI,GUIBackgroundTask,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBackgroundTask.cs,ExecuteTaskResultHandler,The length of the statement  "					GUIUtils.ShowNotifyDialog (GUIUtils.PluginName ()' string.Format ("{0} {1}"' Translation.Error' _CurrentTaskDescription)); " is 122.
Long Statement,TraktPlugin.GUI,GUIBackgroundTask,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBackgroundTask.cs,ExecuteTaskResultHandler,The length of the statement  "					GUIUtils.ShowNotifyDialog (GUIUtils.PluginName ()' string.Format ("{0} {1}"' Translation.Timeout' _CurrentTaskDescription)); " is 124.
Long Statement,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,SendCalendarToFacade,The length of the statement  "						AirDate = calendarItem.Episode.FirstAired == null ? null : calendarItem.Episode.FirstAired.FromISO8601 ().ToLocalTime ().ToShortDateString () " is 141.
Long Statement,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,SendCalendarToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' itemCount.ToString ()' itemCount > 1 ? Translation.Episodes : Translation.Episode)); " is 148.
Long Statement,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnEpisodeSelected,The length of the statement  "	GUIImageHandler.LoadFanart (backdrop' TmdbCache.GetShowBackdropFilename ((item as GUIEpisodeListItem).Images.ShowImages)); " is 122.
Long Statement,TraktPlugin.GUI,GUIWindowExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIExtensions.cs,SelectIndex,The length of the statement  "	GUIMessage msg = new GUIMessage (GUIMessage.MessageType.GUI_MSG_ITEM_SELECT' self.WindowId' 0' self.GetID' index' 0' null); " is 123.
Long Statement,TraktPlugin.GUI,GUIWindowExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIExtensions.cs,UpdateItemIfSelected,The length of the statement  "			GUIWindowManager.SendThreadMessage (new GUIMessage (GUIMessage.MessageType.GUI_MSG_ITEM_SELECT' GUIWindowManager.ActiveWindow' 0' controlId' index' 0' null)); " is 158.
Long Statement,TraktPlugin.GUI,GUIImageHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,DrawOverlayOnPoster,The length of the statement  "	string mainOverlayImage = TraktHelper.GetThemedSkinFile (SkinThemeType.Image' string.Format ("trakt{0}.png"' mainType.ToString ().Replace ("' "' string.Empty))); " is 161.
Long Statement,TraktPlugin.GUI,GUIImageHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,DrawOverlayOnPoster,The length of the statement  "	string ratingOverlayImage = TraktHelper.GetThemedSkinFile (SkinThemeType.Image' string.Format ("trakt{0}.png"' Enum.GetName (typeof(RatingOverlayImage)' ratingType))); " is 167.
Long Statement,TraktPlugin.GUI,GUIImageHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,DrawOverlayOnEpisodeThumb,The length of the statement  "	string mainOverlayImage = TraktHelper.GetThemedSkinFile (SkinThemeType.Image' string.Format ("trakt{0}.png"' mainType.ToString ().Replace ("' "' string.Empty))); " is 161.
Long Statement,TraktPlugin.GUI,GUIImageHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,DrawOverlayOnEpisodeThumb,The length of the statement  "	string ratingOverlayImage = TraktHelper.GetThemedSkinFile (SkinThemeType.Image' string.Format ("trakt{0}.png"' Enum.GetName (typeof(RatingOverlayImage)' ratingType))); " is 167.
Long Statement,TraktPlugin.GUI,GUIImageHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,DrawOverlayOnEpisodeThumb,The length of the statement  "		gph.DrawImage (newThumb' TraktSkinSettings.EpisodeThumbRatingOverlayPosX' TraktSkinSettings.EpisodeThumbRatingOverlayPosY); " is 123.
Long Statement,TraktPlugin.GUI,GUIImageHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,DrawOverlayOnAvatar,The length of the statement  "	string ratingOverlayImage = TraktHelper.GetThemedSkinFile (SkinThemeType.Image' string.Format ("trakt{0}.png"' Enum.GetName (typeof(RatingOverlayImage)' ratingType))); " is 167.
Long Statement,TraktPlugin.GUI,GUIWatchListMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListMovies.cs,SendWatchListMoviesToFacade,The length of the statement  "	sortedList.Sort (new GUIListItemMovieSorter (TraktSettings.SortByWatchListMovies.Field' TraktSettings.SortByWatchListMovies.Direction)); " is 136.
Long Statement,TraktPlugin.GUI,GUIWatchListMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListMovies.cs,SendWatchListMoviesToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' movieWatchlist.Count ().ToString ()' movieWatchlist.Count () > 1 ? Translation.Movies : Translation.Movie)); " is 172.
Long Statement,TraktPlugin.GUI,GUIWatchListShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListShows.cs,SendWatchListShowsToFacade,The length of the statement  "	sortedList.Sort (new GUIListItemShowSorter (TraktSettings.SortByWatchListShows.Field' TraktSettings.SortByWatchListShows.Direction)); " is 133.
Long Statement,TraktPlugin.GUI,GUIWatchListShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListShows.cs,SendWatchListShowsToFacade,The length of the statement  "	GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' sortedList.Count ().ToString ()' sortedList.Count () > 1 ? Translation.SeriesPlural : Translation.Series)); " is 171.
Long Statement,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowNotifyDialog,The length of the statement  "					// Only if ID is 4 and we have our custom text and if button already has label (in case the skin "hides" the button by emtying the label) " is 137.
Long Statement,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowRateDialog,The length of the statement  "		ratingDlg.SetLine (1' string.Format ("{0} - {1}x{2}"' item.Title' item.Seasons [0].Number' item.Seasons [0].Episodes [0].Number)); " is 130.
Long Statement,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowRateDialog,The length of the statement  "		ratingDlg.Rated = item.Seasons [0].Episodes [0].Rating == 0 ? TraktRateValue.seven : (TraktRateValue)Convert.ToInt32 (item.Seasons [0].Episodes [0].Rating); " is 156.
Long Statement,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowRateDialog,The length of the statement  "		ratingDlg.Rated = item.Seasons [0].Rating == 0 ? TraktRateValue.seven : (TraktRateValue)Convert.ToInt32 (item.Seasons [0].Rating); " is 130.
Long Statement,TraktPlugin.Extensions,DateExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\DateExtensions.cs,ToPrettyTime,The length of the statement  "		return string.Format ("{0} day{1}' {2} hour{3} and {4} minute{5}"' span.Days' span.Days > 1 ? "s" : ""' span.Hours' span.Hours != 1 ? "s" : ""' span.Minutes' span.Minutes != 1 ? "s" : ""); " is 188.
Long Statement,TraktPlugin.Extensions,DateExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\DateExtensions.cs,ToPrettyTime,The length of the statement  "		return string.Format ("{0} hour{1}' {2} minute{3} and {4} second{5}"' span.Hours' span.Hours > 1 ? "s" : ""' span.Minutes' span.Minutes != 1 ? "s" : ""' span.Seconds' span.Seconds != 1 ? "s" : ""); " is 197.
Long Statement,TraktPlugin.Extensions,DateExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\DateExtensions.cs,ToPrettyTime,The length of the statement  "		return string.Format ("{0} minute{1} and {2} second{3}"' span.Minutes' span.Minutes > 1 ? "s" : ""' span.Seconds' span.Seconds != 1 ? "s" : ""); " is 144.
Long Statement,TraktPlugin.Extensions,DateExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\DateExtensions.cs,ToPrettyDateTime,The length of the statement  "		return dateTimestamp.ToLocalTime ().DayOfWeek.ToShortDayName () + "' " + dateTimestamp.ToLocalTime ().ToShortTimeString (); " is 123.
Long Statement,TraktPlugin.Extensions,StringExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,ToCountryName,The length of the statement  "		TraktLogger.Debug ("Failed to convert two letter country code to country name. Two Letter Code = '{0}'"' twoLetterCode); " is 120.
Long Statement,TraktPlugin.Extensions,StringExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The length of the statement  "	// for now' this allows better usage of clipping. This can be removed' once the skin engine can properly render unicode without falling back to sprites " is 151.
Long Statement,TraktPlugin.Extensions,StringExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The length of the statement  "	// as unicode is more widely used' this will hit us more with existing font rendering only allowing cached font textures with clipping " is 134.
Long Statement,TraktPlugin.TmdbAPI,TmdbAPI,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TmdbAPI\TmdbAPI.cs,GetFromTmdb,The length of the statement  "			errorMessage = string.Format ("Protocol Error' Code = '{0}'' Description = '{1}'' Url = '{2}'' Headers = '{3}'"' (int)response.StatusCode' response.StatusDescription' address' headers.TrimEnd (new char[] { " is 205.
Long Statement,TraktPlugin.TmdbAPI,TmdbAPI,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TmdbAPI\TmdbAPI.cs,GetFromTmdb,The length of the statement  "				errorMessage = string.Format ("Request Rate Limiting is in effect' retrying request in {0} seconds. Url = '{1}'"' retry' address); " is 130.
Long Statement,TraktPlugin.TmdbAPI,TmdbAPI,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TmdbAPI\TmdbAPI.cs,GetFromTmdb,The length of the statement  "		string errorMessage = string.Format ("Request failed due to an IO error' Description = '{0}'' Url = '{1}'' Method = 'GET'"' ioe.Message' address); " is 146.
Long Statement,TraktPlugin.TraktHandlers,ArgusTVRecordings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusRecordings.cs,Scrobble,The length of the statement  "	TraktLogger.Info ("Current program details. Title='{0}'' Year='{1}'' Season='{2}'' Episode='{3}'' StartTime='{4}'' Runtime='{5}'"' CurrentRecording.Title' CurrentRecording.Year.ToLogString ()' CurrentRecording.SeasonIdx.ToLogString ()' CurrentRecording.EpisodeIdx.ToLogString ()' CurrentRecording.StartTime == null ? "<empty>" : CurrentRecording.StartTime.ToString ()' CurrentRecording.Runtime); " is 395.
Long Statement,TraktPlugin.TraktHandlers,ArgusTVRecordings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusRecordings.cs,StopScrobble,The length of the statement  "	TraktLogger.Info ("Video recording has stopped' checking progress. Title = '{0}'' Current Position = '{1}'' Duration = '{2}'' Progress = '{3}%'"' CurrentRecording.Title' g_Player.CurrentPosition.ToString ()' g_Player.Duration.ToString ()' progress > 100.0 ? "100" : progress.ToString ()); " is 288.
Long Statement,TraktPlugin.TraktHandlers,ArgusTVLive,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusTVLive.cs,Scrobble,The length of the statement  "				TraktLogger.Info ("Detected new tv program has started. Previous Program =  '{0}'' New Program = '{1}'"' CurrentProgram.ToString ()' videoInfo.ToString ()); " is 156.
Long Statement,TraktPlugin.TraktHandlers,ArgusTVLive,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusTVLive.cs,GetCurrentProgram,The length of the statement  "		TraktLogger.Info ("Current program details. Title='{0}'' Year='{1}'' Season='{2}'' Episode='{3}'' StartTime='{4}'' Runtime='{5}'"' videoInfo.Title' videoInfo.Year.ToLogString ()' videoInfo.SeasonIdx.ToLogString ()' videoInfo.EpisodeIdx.ToLogString ()' videoInfo.StartTime == null ? "<empty>" : videoInfo.StartTime.ToString ()' videoInfo.Runtime); " is 346.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "		collectedMovies.RemoveAll (m => TraktSettings.BlockedFolders.Any (f => m.File.ToLowerInvariant ().Contains (f.ToLowerInvariant ()))); " is 133.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "		//    // allow movies to re-sync again after 7-days in the case user has addressed issue ie. edited movie or added to themoviedb.org " is 132.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "		//            TraktLogger.Info("Skipping {0} movies due to invalid data or movies don't exist on http://themoviedb.org. Next check will be {1}."' TraktSettings.SkippedMovies.Movies.Count' TraktSettings.SkippedMovies.LastSkippedSync.FromEpoch().Add(new TimeSpan(7' 0' 0' 0))); " is 275.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "		//                TraktLogger.Info("Skipping movie' Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 126.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "		//                MovieList.RemoveAll(m => (m.Title == movie.Title) && (m.Year.ToString() == movie.Year) && (m.IMDBNumber == movie.IMDBID)); " is 140.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "		// we need to fallback to title matching. When we sync aka names are sometimes accepted if defined on themoviedb.org so we need to  " is 130.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "		//if (TraktSettings.AlreadyExistMovies != null && TraktSettings.AlreadyExistMovies.Movies != null && TraktSettings.AlreadyExistMovies.Movies.Count > 0) " is 151.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "		//    TraktLogger.Debug("Skipping {0} movies as they already exist in trakt library but failed local match previously."' TraktSettings.AlreadyExistMovies.Movies.Count.ToString()); " is 179.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "		//        Predicate<MFMovie> criteria = m => (m.Title == movie.Title) && (m.Year.ToString() == movie.Year) && (m.IMDBNumber == movie.IMDBID); " is 141.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "		//            TraktLogger.Debug("Skipping movie' Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 123.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "		//                TraktLogger.Debug("Removing 'AlreadyExists' movie' Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 143.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "				TraktLogger.Info ("Marking movie as unwatched in local database' movie is not watched on trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year.HasValue ? movie.Year.ToString () : "<empty>"' movie.Ids.Imdb ?? "<empty>"' movie.Ids.Tmdb.HasValue ? movie.Ids.Tmdb.ToString () : "<empty>"); " is 329.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "					TraktLogger.Info ("Updating local movie watched state / play count to match trakt.tv. Plays = '{0}'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' twm.Plays' twm.Movie.Title' twm.Movie.Year.HasValue ? twm.Movie.Year.ToString () : "<empty>"' twm.Movie.Ids.Imdb ?? "<empty>"' twm.Movie.Ids.Tmdb.HasValue ? twm.Movie.Ids.Tmdb.ToString () : "<empty>"); " is 366.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "					pagedMovies.ForEach (s => TraktLogger.Info ("Adding movie to trakt.tv watched history. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Watched = '{4}'"' s.Title' s.Year.HasValue ? s.Year.ToString () : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString () : "<empty>"' s.WatchedAt)); " is 329.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "					pagedMovies.ForEach (s => TraktLogger.Info ("Adding movie to trakt.tv collection. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Added = '{4}'' MediaType = '{5}'' Resolution = '{6}'' Audio Codec = '{7}'' Audio Channels = '{8}'"' s.Title' s.Year.HasValue ? s.Year.ToString () : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString () : "<empty>"' s.CollectedAt' s.MediaType ?? "<empty>"' s.Resolution ?? "<empty>"' s.AudioCodec ?? "<empty>"' s.AudioChannels ?? "<empty>")); " is 518.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "					pagedMovies.ForEach (a => TraktLogger.Info ("Adding movie to trakt.tv ratings. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Rating = '{4}/10'"' a.Title' a.Year.HasValue ? a.Year.ToString () : "<empty>"' a.Ids.Imdb ?? "<empty>"' a.Ids.Tmdb.HasValue ? a.Ids.Tmdb.ToString () : "<empty>"' a.Rating)); " is 315.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "				int currentRating = Convert.ToInt32 (Math.Round (Convert.ToDecimal (localMovie.RatingUser)' MidpointRounding.AwayFromZero)); " is 124.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "					TraktLogger.Info ("Adding movie rating to match trakt.tv. Rated = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' trm.Rating' trm.Movie.Title' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString () : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString () : "<empty>"); " is 342.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "					pagedMovies.ForEach (s => TraktLogger.Info ("Removing movie from trakt.tv collection' movie no longer exists locally. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' s.Title' s.Year.HasValue ? s.Year.ToString () : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString () : "<empty>")); " is 325.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "		TraktLogger.Info ("Found {0} trakt-categorised movies available in My Films database"' categoryTraktList.Count.ToString ()); " is 124.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "				TraktLogger.Debug ("Processing trakt watchlist movie. Title = '{0}'' Year = '{1}' = IMDb ID '{2}'' TMDb ID = '{3}'"' trm.Movie.Title ?? "<empty>"' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString () : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString () : "<empty>"); " is 320.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "						TraktLogger.Info ("Inserting trakt category for movie. Category = '{0}'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' category' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 234.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "				TraktLogger.Info ("Removing trakt category for movie. Category = '{0}'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' category' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 233.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "				TraktLogger.Info ("Processing trakt user list. Name = '{0}'' Tag = '{1}'' Items = '{2}'"' list.Key.Name' userListName' list.Value.Count); " is 137.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "					TraktLogger.Debug ("Processing trakt user list movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' trm.Movie.Title ?? "null"' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString () : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString () : "<empty>"); " is 318.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "							TraktLogger.Info ("Inserting trakt user list for movie. Category = '{0}'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' userListName' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 239.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "					TraktLogger.Info ("Removing trakt user list for movie. Category = '{0}'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' userListName' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 238.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "				TraktLogger.Debug ("Processing trakt recommendations movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' trm.Title ?? "<empty>"' trm.Year.HasValue ? trm.Year.ToString () : "<empty>"' trm.Ids.Imdb ?? "<empty>"' trm.Ids.Tmdb.HasValue ? trm.Ids.Tmdb.ToString () : "<empty>"); " is 291.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "						TraktLogger.Info ("Inserting trakt category for movie. Category = '{0}'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' category' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 234.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,SyncLibrary,The length of the statement  "				TraktLogger.Info ("Removing trakt category for movie. Category = '{0}'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' category' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 233.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,Scrobble,The length of the statement  "		TraktLogger.Info ("Sending start scrobble of movie to trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' tScrobbleData.Movie.Title' tScrobbleData.Movie.Year' tScrobbleData.Movie.Ids.Imdb ?? "<empty>"' tScrobbleData.Movie.Ids.Tmdb.HasValue ? tScrobbleData.Movie.Ids.Tmdb.ToString () : "<empty>"); " is 318.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnStartedMovie,The length of the statement  "	if (!TraktSettings.BlockedFilenames.Contains (movie.File) && !TraktSettings.BlockedFolders.Any (f => movie.File.ToLowerInvariant ().Contains (f.ToLowerInvariant ()))) { " is 168.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnStartedMovie,The length of the statement  "		TraktLogger.Info ("Starting My Films movie playback. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 204.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnStoppedMovie,The length of the statement  "	if (!TraktSettings.BlockedFilenames.Contains (movie.File) && !TraktSettings.BlockedFolders.Any (f => movie.File.ToLowerInvariant ().Contains (f.ToLowerInvariant ()))) { " is 168.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnStoppedMovie,The length of the statement  "		TraktLogger.Info ("Stopped My Films movie playback. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 203.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnWatchedMovie,The length of the statement  "	if (!TraktSettings.BlockedFilenames.Contains (movie.File) && !TraktSettings.BlockedFolders.Any (f => movie.File.ToLowerInvariant ().Contains (f.ToLowerInvariant ()))) { " is 168.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnWatchedMovie,The length of the statement  "		TraktLogger.Info ("My Films movie considered watched. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 205.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnRateItem,The length of the statement  "	TraktLogger.Info ("Received rating event from MyFilms. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 206.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnRateItem,The length of the statement  "	if (TraktSettings.BlockedFilenames.Contains (movie.File) || TraktSettings.BlockedFolders.Any (f => movie.File.ToLowerInvariant ().Contains (f.ToLowerInvariant ()))) { " is 166.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnToggleWatched,The length of the statement  "	TraktLogger.Info ("Received togglewatched event from My Films. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 214.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnToggleWatched,The length of the statement  "	if (TraktSettings.BlockedFilenames.Contains (movie.File) || TraktSettings.BlockedFolders.Any (f => movie.File.ToLowerInvariant ().Contains (f.ToLowerInvariant ()))) { " is 166.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,FindMovie,The length of the statement  "	MFMovie movie = movies.Find (m => BasicHandler.GetProperImdbId (m.IMDBNumber) == imdbid || (string.Compare (m.Title' title' true) == 0 && m.Year == year)); " is 155.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,FindMovie,The length of the statement  "	MFMovie movie = movies.Find (m => BasicHandler.GetProperImdbId (m.IMDBNumber) == imdbid || (string.Compare (m.Title' title' true) == 0 && m.Year == year)); " is 155.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,MovieMatch,The length of the statement  "	if (!string.IsNullOrEmpty (traktMovie.Ids.Imdb) && !string.IsNullOrEmpty (BasicHandler.GetProperImdbId (mfMovie.IMDBNumber))) { " is 127.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,MovieMatch,The length of the statement  "	return string.Compare (mfMovie.Title' traktMovie.Title' true) == 0 && mfMovie.Year.ToString () == traktMovie.Year.ToString (); " is 126.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,ShowRateDialog,The length of the statement  "	TraktLogger.Debug ("Showing rate dialog for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 202.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,RemoveMovieFromRecommendations,The length of the statement  "		TraktLogger.Info ("Removing movie from trakt reommendations. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 212.
Long Statement,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,RemoveMovieFromWatchlist,The length of the statement  "		TraktLogger.Info ("Removing movie from trakt watchlist. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 207.
Long Statement,TraktPlugin.TraktHandlers,MyTVLive,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVLive.cs,Scrobble,The length of the statement  "				TraktLogger.Info ("Detected new tv program has started. Previous Program = '{0}'' New Program = '{1}'"' CurrentProgram.ToString ()' videoInfo.ToString ()); " is 155.
Long Statement,TraktPlugin.TraktHandlers,MyTVLive,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVLive.cs,GetCurrentProgram,The length of the statement  "			Type = !string.IsNullOrEmpty (program.EpisodeNum) || !string.IsNullOrEmpty (program.SeriesNum) ? VideoType.Series : VideoType.Movie' " is 132.
Long Statement,TraktPlugin.TraktHandlers,MyTVLive,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVLive.cs,GetCurrentProgram,The length of the statement  "		TraktLogger.Info ("Current program details. Title='{0}'' Year='{1}'' Season='{2}'' Episode='{3}'' StartTime='{4}'' Runtime='{5}'"' videoInfo.Title' videoInfo.Year.ToLogString ()' videoInfo.SeasonIdx.ToLogString ()' videoInfo.EpisodeIdx.ToLogString ()' videoInfo.StartTime == null ? "<empty>" : videoInfo.StartTime.ToString ()' videoInfo.Runtime); " is 346.
Long Statement,TraktPlugin.TraktHandlers,MyTVRecordings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVRecordings.cs,Scrobble,The length of the statement  "		Type = !string.IsNullOrEmpty (recording.EpisodeNum) || !string.IsNullOrEmpty (recording.SeriesNum) ? VideoType.Series : VideoType.Movie' " is 136.
Long Statement,TraktPlugin.TraktHandlers,MyTVRecordings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVRecordings.cs,Scrobble,The length of the statement  "	TraktLogger.Info ("Current program details. Title='{0}'' Year='{1}'' Season='{2}'' Episode='{3}'' StartTime='{4}'' Runtime='{5}'"' CurrentRecording.Title' CurrentRecording.Year.ToLogString ()' CurrentRecording.SeasonIdx.ToLogString ()' CurrentRecording.EpisodeIdx.ToLogString ()' CurrentRecording.StartTime == null ? "<empty>" : CurrentRecording.StartTime.ToString ()' CurrentRecording.Runtime); " is 395.
Long Statement,TraktPlugin.TraktHandlers,MyTVRecordings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVRecordings.cs,StopScrobble,The length of the statement  "	TraktLogger.Info ("Video recording has stopped' checking progress. Title = '{0}'' Current Position = '{1}'' Duration = '{2}'' Progress = '{3}%'"' CurrentRecording.Title' g_Player.CurrentPosition.ToString ()' g_Player.Duration.ToString ()' progress > 100.0 ? "100" : progress.ToString ()); " is 288.
Long Statement,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,Scrobble,The length of the statement  "		TraktLogger.Info ("Detected tv series playing in OnlineVideos. Title = '{0} - {1}x{2}'' Year = '{3}'' IMDb ID = '{4}'' TMDb ID = '{5}'' TVDb ID = '{6}'"' CurrentVideo.Title' CurrentVideo.Season' CurrentVideo.Episode' CurrentVideo.Year == 0 ? "<empty>" : CurrentVideo.Year.ToString ()' CurrentVideo.ID_IMDB.ToLogString ()' CurrentVideo.ID_TMDB.ToLogString ()' CurrentVideo.ID_TVDB.ToLogString ()); " is 396.
Long Statement,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,Scrobble,The length of the statement  "		TraktLogger.Info ("Detected movie playing in OnlineVideos. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' CurrentVideo.Title' CurrentVideo.Year' CurrentVideo.ID_IMDB.ToLogString ()' CurrentVideo.ID_TMDB.ToLogString ()); " is 236.
Long Statement,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The length of the statement  "				TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition); " is 230.
Long Statement,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The length of the statement  "			TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ()); " is 401.
Long Statement,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The length of the statement  "			TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()); " is 275.
Long Statement,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,ShowRateDialog,The length of the statement  "			TraktLogger.Info ("Showing rate dialog for episode. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Season = '{4}'' Episode = '{5}'"' itemToRate.Title' itemToRate.Year == 0 ? "<empty>" : itemToRate.Year.ToString ()' itemToRate.ID_IMDB.ToLogString ()' itemToRate.ID_TMDB.ToLogString ()' itemToRate.Episode' itemToRate.Season); " is 340.
Long Statement,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,ShowRateDialog,The length of the statement  "			TraktLogger.Info ("Showing rate dialog for movie. Title = '{0}'' Year = '{1}'' IMDb Id = '{2}'' TMDb ID = '{3}'"' itemToRate.Title' itemToRate.Year' itemToRate.ID_IMDB.ToLogString ()' itemToRate.ID_TMDB.ToLogString ()); " is 219.
Long Statement,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,InsertSkippedMovies,The length of the statement  "	//    TraktLogger.Info("Inserting movie into skipped movie list: Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 139.
Long Statement,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,InsertAlreadyExistMovies,The length of the statement  "	//    TraktLogger.Info("Inserting movie into already-exist list: Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 139.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "	collectedMovies.RemoveAll (m => TraktSettings.BlockedFolders.Any (f => m.LocalMedia [0].FullPath.ToLowerInvariant ().Contains (f.ToLowerInvariant ()))); " is 152.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "	//    // allow movies to re-sync again after 7-days in the case user has addressed issue ie. edited movie or added to themoviedb.org " is 132.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "	//            TraktLogger.Info("Skipping {0} movies due to invalid data or movies don't exist on http://themoviedb.org. Next check will be {1}"' TraktSettings.SkippedMovies.Movies.Count' TraktSettings.SkippedMovies.LastSkippedSync.FromEpoch().Add(new TimeSpan(7' 0' 0' 0))); " is 274.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "	//                TraktLogger.Info("Skipping movie' Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 126.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "	//                collectedMovies.RemoveAll(m => (m.Title == movie.Title) && (m.Year.ToString() == movie.Year) && (m.ImdbID == movie.IMDBID)); " is 142.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "	// we need to fallback to title matching. When we sync aka names' they're sometimes accepted if defined on themoviedb.org so we need to  " is 135.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "	//if (TraktSettings.AlreadyExistMovies != null && TraktSettings.AlreadyExistMovies.Movies != null && TraktSettings.AlreadyExistMovies.Movies.Count > 0) " is 151.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "	//    TraktLogger.Debug("Skipping {0} movies as they already exist in trakt library but failed local match previously"' TraktSettings.AlreadyExistMovies.Movies.Count.ToString()); " is 178.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "	//        Predicate<DBMovieInfo> criteria = m => (m.Title == movie.Title) && (m.Year.ToString() == movie.Year) && (m.ImdbID == movie.IMDBID); " is 141.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "	//            TraktLogger.Debug("Skipping movie' Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 123.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "	//                TraktLogger.Debug("Removing 'AlreadyExists' movie' Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 143.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "		var ratedMovies = collectedMovies.Where (m => (AdvancedRatings && HasAdvancedRating (m)) || m.ActiveUserSettings.UserRating.GetValueOrDefault (0) > 0).ToList (); " is 161.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "				TraktLogger.Info ("Marking movie as unwatched in local database' movie is not watched on trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year.HasValue ? movie.Year.ToString () : "<empty>"' movie.Ids.Imdb ?? "<empty>"' movie.Ids.Tmdb.HasValue ? movie.Ids.Tmdb.ToString () : "<empty>"); " is 329.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "					TraktLogger.Info ("Updating local movie watched state / play count to match trakt.tv. Plays = '{0}'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' twm.Plays' twm.Movie.Title' twm.Movie.Year.HasValue ? twm.Movie.Year.ToString () : "<empty>"' twm.Movie.Ids.Imdb ?? "<empty>"' twm.Movie.Ids.Tmdb.HasValue ? twm.Movie.Ids.Tmdb.ToString () : "<empty>"); " is 366.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "					pagedMovies.ForEach (s => TraktLogger.Info ("Adding movie to trakt.tv watched history. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Watched = '{4}'"' s.Title' s.Year.HasValue ? s.Year.ToString () : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString () : "<empty>"' s.WatchedAt)); " is 329.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "					pagedMovies.ForEach (s => TraktLogger.Info ("Adding movie to trakt.tv collection. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Added = '{4}'' MediaType = '{5}'' Resolution = '{6}'' Audio Codec = '{7}'' Audio Channels = '{8}'"' s.Title' s.Year.HasValue ? s.Year.ToString () : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString () : "<empty>"' s.CollectedAt' s.MediaType ?? "<empty>"' s.Resolution ?? "<empty>"' s.AudioCodec ?? "<empty>"' s.AudioChannels ?? "<empty>")); " is 518.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "					pagedMovies.ForEach (a => TraktLogger.Info ("Adding movie to trakt.tv ratings. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Rating = '{4}/10'"' a.Title' a.Year.HasValue ? a.Year.ToString () : "<empty>"' a.Ids.Imdb ?? "<empty>"' a.Ids.Tmdb.HasValue ? a.Ids.Tmdb.ToString () : "<empty>"' a.Rating)); " is 315.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "						TraktLogger.Info ("Adding movie rating to match trakt.tv. Rated = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' trm.Rating' trm.Movie.Title' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString () : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString () : "<empty>"); " is 342.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "						TraktLogger.Info ("Adding movie rating to match trakt.tv. Rated = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' trm.Rating' trm.Movie.Title' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString () : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString () : "<empty>"); " is 342.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The length of the statement  "					pagedMovies.ForEach (s => TraktLogger.Info ("Removing movie from trakt.tv collection' movie no longer exists locally. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' s.Title' s.Year.HasValue ? s.Year.ToString () : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString () : "<empty>")); " is 325.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,Scrobble,The length of the statement  "		if (VideoUtility.GetVideoFormat (filename) == VideoFormat.DVD || VideoUtility.GetVideoFormat (filename) == VideoFormat.Bluray) { " is 128.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,Scrobble,The length of the statement  "				TraktLogger.Info ("Not enough information from MediaPortal play skin properties to get a movie match' missing Title and/or Year!"); " is 131.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,Scrobble,The length of the statement  "				TraktLogger.Info ("Could not find movie in MovingPictures library. Filename = '{0}'' Title = '{1}'' Year = '{2}'"' filename' title' year); " is 138.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,StopScrobble,The length of the statement  "			TraktLogger.Info ("DVD/Bluray stopped' checking if considered watched. Movie: '{0}'' Current Position: '{1}'' Duration: '{2}'"' currentMovie.Title' g_Player.CurrentPosition' g_Player.Duration); " is 193.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,The length of the statement  "	TraktLogger.Info ("Found {0} movies on trakt.tv with resume data' processing paused movies after {1}"' playbackData.Where (p => p.Type == "movie").Count ()' lastPausedAtMovie); " is 176.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,The length of the statement  "		var movie = DBMovieInfo.GetAll ().FirstOrDefault (m => ((m.ImdbID == item.Movie.Ids.Imdb) && !string.IsNullOrEmpty (item.Movie.Ids.Imdb)) || m.Title.ToLowerInvariant () == item.Movie.Title.ToLowerInvariant () && m.Year == item.Movie.Year); " is 239.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,The length of the statement  "			TraktLogger.Warning ("Skipping item with invalid runtime in database. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb); " is 173.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,The length of the statement  "		if (TraktSettings.BlockedFilenames.Any (f => f == filename) || TraktSettings.BlockedFolders.Any (f => f == Path.GetDirectoryName (filename))) { " is 143.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,The length of the statement  "			TraktLogger.Info ("Ignoring resume data sync for movie' filename/folder is ignored by user. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' Filename = '{3}'"' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb' filename); " is 223.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,The length of the statement  "		var resumeData = Convert.ToInt32 ((movie.LocalMedia.First ().Duration / 1000.0) * (item.Progress / 100.0)) - TraktSettings.SyncResumeDelta; " is 139.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,The length of the statement  "			TraktLogger.Info ("Setting resume time '{0}' for movie. Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'"' new TimeSpan (0' 0' 0' resumeData)' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb); " is 195.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,StartMovieScrobble,The length of the statement  "		TraktLogger.Info ("Sending start scrobble of movie to trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' scrobbleMovie.Title' scrobbleMovie.Year' scrobbleMovie.ImdbID ?? "<empty>"' GetTmdbID (scrobbleMovie) ?? "<empty>"); " is 244.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,StopMovieScrobble,The length of the statement  "			TraktLogger.Info ("Sending 'stop' scrobble of movie to trakt.tv. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' scrobbleData.Progress' scrobbleMovie.Title' movie.Year' scrobbleMovie.ImdbID ?? "<empty>"' GetTmdbID (scrobbleMovie) ?? "<empty>"); " is 279.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,StopMovieScrobble,The length of the statement  "			TraktLogger.Info ("Sending 'pause' scrobble of movie to trakt.tv. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' scrobbleData.Progress' scrobbleMovie.Title' movie.Year' scrobbleMovie.ImdbID ?? "<empty>"' GetTmdbID (scrobbleMovie) ?? "<empty>"); " is 280.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectDeleted,The length of the statement  "		TraktLogger.Info ("Removing movie from trakt.tv collection' Title = '{0}'' Year = '{1}'' IMDB ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID (movie) ?? "<empty>"); " is 208.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectUpdatedEx,The length of the statement  "	if (TraktSettings.BlockedFilenames.Contains (movie.LocalMedia [0].FullPath) || TraktSettings.BlockedFolders.Any (f => movie.LocalMedia [0].FullPath.ToLowerInvariant ().Contains (f.ToLowerInvariant ()))) { " is 204.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectUpdatedEx,The length of the statement  "		TraktLogger.Info ("Movie is on the blocked list so we didn't update trakt.tv. Title = '{0}'' Year = '{1}'' IMDB ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID (movie) ?? "<empty>"); " is 226.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectUpdatedEx,The length of the statement  "			TraktLogger.Info ("Received Un-Watched event in MovingPictures for movie. Title = '{0}'' Year = '{1}'' IMDB ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID (movie) ?? "<empty>"); " is 222.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectUpdatedEx,The length of the statement  "			TraktLogger.Info ("Received Watched event in MovingPictures for movie. Title = '{0}'' Year = '{1}'' IMDB ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID (movie) ?? "<empty>"); " is 219.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectUpdatedEx,The length of the statement  "		TraktLogger.Info ("Received Rate event in MovingPictures for movie. Rating = '{0}/5'' Title = '{1}'' Year = '{2}'' IMDB ID = '{3}'' TMDb ID = '{4}'"' userMovieSettings.UserRating' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID (movie) ?? "<empty>"); " is 264.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectInserted,The length of the statement  "		if (!TraktSettings.BlockedFilenames.Contains (watchedEvent.Movie.LocalMedia [0].FullPath) && !TraktSettings.BlockedFolders.Any (f => watchedEvent.Movie.LocalMedia [0].FullPath.ToLowerInvariant ().Contains (f.ToLowerInvariant ()))) { " is 232.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectInserted,The length of the statement  "			TraktLogger.Info ("Watched History updated in MovingPictures. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' watchedEvent.Movie.Title' watchedEvent.Movie.Year' watchedEvent.Movie.ImdbID ?? "<empty>"' GetTmdbID (watchedEvent.Movie) ?? "<empty>"); " is 262.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectInserted,The length of the statement  "			TraktLogger.Info ("Movie was blocked and not added to watched history on trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' watchedEvent.Movie.Title' watchedEvent.Movie.Year' watchedEvent.Movie.ImdbID ?? "<empty>"' GetTmdbID (watchedEvent.Movie) ?? "<empty>"); " is 283.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectInserted,The length of the statement  "		if (!TraktSettings.BlockedFilenames.Contains (insertedMovie.LocalMedia [0].FullPath) && !TraktSettings.BlockedFolders.Any (f => insertedMovie.LocalMedia [0].FullPath.ToLowerInvariant ().Contains (f.ToLowerInvariant ()))) { " is 222.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectInserted,The length of the statement  "				TraktLogger.Info ("New movie added into MovingPictures' adding to trakt.tv collection. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Added = '{4}'' MediaType = '{5}'' Resolution = '{6}'' Audio Codec = '{7}'' Audio Channels = '{8}'"' traktMovie.Title' traktMovie.Year.HasValue ? traktMovie.Year.ToString () : "<empty>"' traktMovie.Ids.Imdb ?? "<empty>"' traktMovie.Ids.Tmdb.HasValue ? traktMovie.Ids.Tmdb.ToString () : "<empty>"' traktMovie.CollectedAt' traktMovie.MediaType ?? "<empty>"' traktMovie.Resolution ?? "<empty>"' traktMovie.AudioCodec ?? "<empty>"' traktMovie.AudioChannels ?? "<empty>"); " is 621.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectInserted,The length of the statement  "			TraktLogger.Info ("Movie was blocked and not added to collection on trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' insertedMovie.Title' insertedMovie.Year' insertedMovie.ImdbID ?? "<empty>"' GetTmdbID (insertedMovie) ?? "<empty>"); " is 258.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetFirstWatchedDate,The length of the statement  "			TraktLogger.Error ("Failed to get first watched date from watched movie. Title = '{0}'' Year = '{1}'' Error = '{2}'"' movie.Title' movie.Year' e.Message); " is 154.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,MovieMatch,The length of the statement  "	if (!string.IsNullOrEmpty (traktMovie.Ids.Imdb) && !string.IsNullOrEmpty (BasicHandler.GetProperImdbId (movPicsMovie.ImdbID))) { " is 128.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,MovieMatch,The length of the statement  "	return string.Compare (movPicsMovie.Title' traktMovie.Title' true) == 0 && movPicsMovie.Year.ToString () == traktMovie.Year.ToString (); " is 136.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The length of the statement  "		TraktLogger.Info ("Showing rate dialog for movie. Title = '{0}'' Year = '{1}'' IMDB ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID (movie) ?? "<empty>"); " is 198.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The length of the statement  "			TraktLogger.Info ("Applying rating for movie. Rating = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDB ID = '{3}'' TMDb ID = '{4}'"' rating' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID (movie) ?? "<empty>"); " is 221.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The length of the statement  "					GUICommon.SetProperty ("#MovingPictures.UserMovieSettings.user_rating"' movieToRate.ActiveUserSettings.UserRating.ToString ()); " is 127.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The length of the statement  "					GUICommon.SetProperty ("#MovingPictures.UserMovieSettings.10point_user_rating"' (movieToRate.ActiveUserSettings.UserRating * 2).ToString ()); " is 141.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The length of the statement  "			TraktLogger.Info ("Removing rating for movie. Title = '{0}'' Year = '{1}'' IMDB ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID (movie) ?? "<empty>"); " is 194.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DisposeEvents,The length of the statement  "	MovingPicturesCore.DatabaseManager.ObjectInserted -= new DatabaseManager.ObjectAffectedDelegate (DatabaseManager_ObjectInserted); " is 129.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DisposeEvents,The length of the statement  "	MovingPicturesCore.DatabaseManager.ObjectUpdatedEx -= new DatabaseManager.ObjectUpdatedDelegate (DatabaseManager_ObjectUpdatedEx); " is 130.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DisposeEvents,The length of the statement  "	MovingPicturesCore.DatabaseManager.ObjectDeleted -= new DatabaseManager.ObjectAffectedDelegate (DatabaseManager_ObjectDeleted); " is 127.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,FindMovieID,The length of the statement  "	DBMovieInfo movie = movies.Find (m => (BasicHandler.GetProperImdbId (m.ImdbID) == imdbid) || (GetTmdbID (m).ToNullableInt32 () == tmdbid) || (string.Compare (m.Title' title' true) == 0 && m.Year == year)); " is 205.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,FindMovieID,The length of the statement  "		TraktLogger.Info ("Found no movies for search criteria. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' title' year' imdbid.ToLogString ()' tmdbid.ToLogString ()); " is 179.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,RemoveNode,The length of the statement  "		TraktLogger.Error ("Failed to remove node from MovingPictures' ParentNode='{0}'' Name='{1}'' Error='{2}'"' rootNode' name' ex.Message); " is 135.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,RemoveMovieCriteriaFromCustomlistNode,The length of the statement  "		TraktLogger.Debug ("Removing movie from the custom list in the categories menu. Node = '{0}'' Criteria = '{1}'"' listName' movieId); " is 132.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,RemoveMovieCriteriaFromCustomlistNode,The length of the statement  "		TraktLogger.Debug ("Removing movie from the custom list in the filters menu. Node = '{0}'' Criteria = '{1}'"' listName' movieId); " is 129.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,UpdateCategoriesMenu,The length of the statement  "			TraktLogger.Info ("Adding custom list from trakt.tv to the categories menu. Name = '{0}' Total Movie Items = '{1}'"' listName' listItems.Where (i => i.Movie != null).Count ()); " is 176.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,UpdateCategoriesMenu,The length of the statement  "			if (node.Name == string.Format ("${{{0}}}"' GUI.Translation.WatchList) || node.Name == string.Format ("${{{0}}}"' GUI.Translation.Recommendations) || node.Name == "$(Watchlist)" || node.Name == "${Recommendations}") " is 215.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,UpdateFiltersMenu,The length of the statement  "			TraktLogger.Info ("Adding custom list from trakt.tv to the filters menu. Name = '{0}' Total Movie Items = '{1}'"' listName' listItems.Where (i => i.Movie != null).Count ()); " is 173.
Long Statement,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,UpdateFiltersMenu,The length of the statement  "			if (node.Name == string.Format ("${{{0}}}"' GUI.Translation.WatchList) || node.Name == string.Format ("${{{0}}}"' GUI.Translation.Recommendations) || node.Name == "$(Watchlist)" || node.Name == "${Recommendations}") " is 215.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "		collectedMovies.RemoveAll (m => TraktSettings.BlockedFolders.Any (f => m.Path.ToLowerInvariant ().Contains (f.ToLowerInvariant ()))); " is 133.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "		//    // allow movies to re-sync again after 7-days in the case user has addressed issue ie. edited movie or added to themoviedb.org " is 132.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "		//            TraktLogger.Info("Skipping {0} movies due to invalid data or movies don't exist on http://themoviedb.org. Next check will be {1}."' TraktSettings.SkippedMovies.Movies.Count' TraktSettings.SkippedMovies.LastSkippedSync.FromEpoch().Add(new TimeSpan(7' 0' 0' 0))); " is 275.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "		//                TraktLogger.Info("Skipping movie' Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 126.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "		//                MovieList.RemoveAll(m => (m.Title == movie.Title) && (m.Year.ToString() == movie.Year) && (m.IMDBNumber == movie.IMDBID)); " is 140.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "		// we need to fallback to title matching. When we sync aka names are sometimes accepted if defined on themoviedb.org so we need to  " is 130.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "		//if (TraktSettings.AlreadyExistMovies != null && TraktSettings.AlreadyExistMovies.Movies != null && TraktSettings.AlreadyExistMovies.Movies.Count > 0) " is 151.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "		//    TraktLogger.Debug("Skipping {0} movies as they already exist in trakt library but failed local match previously."' TraktSettings.AlreadyExistMovies.Movies.Count.ToString()); " is 179.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "		//        Predicate<IMDBMovie> criteria = m => (m.Title == movie.Title) && (m.Year.ToString() == movie.Year) && (m.IMDBNumber == movie.IMDBID); " is 143.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "		//            TraktLogger.Debug("Skipping movie' Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 123.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "		//                TraktLogger.Debug("Removing 'AlreadyExists' movie' Title: {0}' Year: {1}' IMDb: {2}"' movie.Title' movie.Year' movie.IMDBID); " is 143.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "				TraktLogger.Info ("Marking movie as unwatched in local database' movie is not watched on trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year.HasValue ? movie.Year.ToString () : "<empty>"' movie.Ids.Imdb ?? "<empty>"' movie.Ids.Tmdb.HasValue ? movie.Ids.Tmdb.ToString () : "<empty>"); " is 329.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "					TraktLogger.Info ("Updating local movie watched state / play count to match trakt.tv. Plays = '{0}'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' twm.Plays' twm.Movie.Title' twm.Movie.Year.HasValue ? twm.Movie.Year.ToString () : "<empty>"' twm.Movie.Ids.Imdb ?? "<empty>"' twm.Movie.Ids.Tmdb.HasValue ? twm.Movie.Ids.Tmdb.ToString () : "<empty>"); " is 366.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "					pagedMovies.ForEach (s => TraktLogger.Info ("Adding movie to trakt.tv watched history. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Watched = '{4}'"' s.Title' s.Year.HasValue ? s.Year.ToString () : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString () : "<empty>"' s.WatchedAt)); " is 329.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "					pagedMovies.ForEach (s => TraktLogger.Info ("Adding movie to trakt.tv collection. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Added = '{4}'' MediaType = '{5}'' Resolution = '{6}'' Audio Codec = '{7}'' Audio Channels = '{8}'"' s.Title' s.Year.HasValue ? s.Year.ToString () : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString () : "<empty>"' s.CollectedAt' s.MediaType ?? "<empty>"' s.Resolution ?? "<empty>"' s.AudioCodec ?? "<empty>"' s.AudioChannels ?? "<empty>")); " is 518.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "					pagedMovies.ForEach (a => TraktLogger.Info ("Adding movie to trakt.tv ratings. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Rating = '{4}/10'"' a.Title' a.Year.HasValue ? a.Year.ToString () : "<empty>"' a.Ids.Imdb ?? "<empty>"' a.Ids.Tmdb.HasValue ? a.Ids.Tmdb.ToString () : "<empty>"' a.Rating)); " is 315.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "				TraktLogger.Info ("Adding movie rating to match trakt.tv. Rated = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' trm.Rating' trm.Movie.Title' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString () : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString () : "<empty>"); " is 342.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncLibrary,The length of the statement  "					pagedMovies.ForEach (s => TraktLogger.Info ("Removing movie from trakt.tv collection' movie no longer exists locally. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' s.Title' s.Year.HasValue ? s.Year.ToString () : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString () : "<empty>")); " is 325.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,Scrobble,The length of the statement  "		TraktLogger.Info ("Sending start scrobble of movie to trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' tScrobbleData.Movie.Title' tScrobbleData.Movie.Year' tScrobbleData.Movie.Ids.Imdb.ToLogString ()' tScrobbleData.Movie.Ids.Tmdb.ToLogString ()); " is 271.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,StopScrobble,The length of the statement  "			TraktLogger.Info ("Sending 'stop' scrobble of movie to trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' tScrobbleData.Movie.Title' tScrobbleData.Movie.Year' tScrobbleData.Movie.Ids.Imdb.ToLogString ()' tScrobbleData.Movie.Ids.Tmdb.ToLogString ()); " is 272.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,StopScrobble,The length of the statement  "			TraktLogger.Info ("Sending 'pause' scrobble of movie to trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' tScrobbleData.Movie.Title' tScrobbleData.Movie.Year' tScrobbleData.Movie.Ids.Imdb.ToLogString ()' tScrobbleData.Movie.Ids.Tmdb.ToLogString ()); " is 273.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncProgress,The length of the statement  "	TraktLogger.Info ("Found {0} movies on trakt.tv with resume data' processing paused movies after {1}"' playbackData.Where (p => p.Type == "movie").Count ()' lastPausedAtMovie); " is 176.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncProgress,The length of the statement  "		var movie = GetMovies ().FirstOrDefault (m => (m.IMDBNumber == item.Movie.Ids.Imdb && !string.IsNullOrEmpty (item.Movie.Ids.Imdb)) || (m.TMDBNumber.ToNullableInt32 () == item.Movie.Ids.Tmdb && item.Movie.Ids.Tmdb != null) || (m.Title.ToLowerInvariant () == item.Movie.Title.ToLowerInvariant () && m.Year == item.Movie.Year)); " is 325.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncProgress,The length of the statement  "			TraktLogger.Warning ("Skipping item with invalid runtime in database' Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb.ToLogString ()' item.Movie.Ids.Tmdb.ToLogString ()); " is 241.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncProgress,The length of the statement  "			TraktLogger.Warning ("Skipping item with invalid filename in database' Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb.ToLogString ()' item.Movie.Ids.Tmdb.ToLogString ()); " is 242.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncProgress,The length of the statement  "		if (TraktSettings.BlockedFilenames.Any (f => f == movie.VideoFileName) || TraktSettings.BlockedFolders.Any (f => f == Path.GetDirectoryName (movie.VideoFileName))) { " is 165.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncProgress,The length of the statement  "			TraktLogger.Info ("Ignoring resume data sync for movie' filename/folder is ignored by user. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Filename = '{4}'"' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb.ToLogString ()' item.Movie.Ids.Tmdb.ToLogString ()' movie.VideoFileName); " is 302.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncProgress,The length of the statement  "			TraktLogger.Info ("Setting resume time '{0}' for movie' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' new TimeSpan (0' 0' 0' resumeData)' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb.ToLogString ()' item.Movie.Ids.Tmdb.ToLogString ()); " is 263.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,CreateScrobbleData,The length of the statement  "	double progress = (g_Player.CurrentPosition / (g_Player.Duration == 0.0 ? movie.RunTime * 60.0 : g_Player.Duration)) * 100.0; " is 125.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,FindMovieID,The length of the statement  "	IMDBMovie movie = movies.Find (m => (BasicHandler.GetProperImdbId (m.IMDBNumber) == imdbid) || (tmdbid != null && m.TMDBNumber.ToNullableInt32 () == tmdbid) || (string.Compare (m.Title' title' true) == 0 && m.Year == year)); " is 224.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,MovieMatch,The length of the statement  "	if (!string.IsNullOrEmpty (traktMovie.Ids.Imdb) && !string.IsNullOrEmpty (BasicHandler.GetProperImdbId (localMovie.IMDBNumber))) { " is 130.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,MovieMatch,The length of the statement  "	return string.Compare (localMovie.Title' traktMovie.Title' true) == 0 && localMovie.Year.ToString () == traktMovie.Year.ToString (); " is 132.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,ShowRateDialog,The length of the statement  "	if (!TraktSettings.ShowRateDlgForPlaylists && PlayListPlayer.SingletonPlayer.CurrentPlaylistType == PlayListType.PLAYLIST_VIDEO) " is 128.
Long Statement,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,ShowRateDialog,The length of the statement  "	TraktLogger.Debug ("Showing rate dialog for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>"); " is 202.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "		TraktLogger.Error ("Error getting tv shows unwatched from trakt.tv server' unwatched and watched sync will be skipped"); " is 120.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "		// now get all episodes on trakt that are marked as 'seen' or 'watched' (this will be cached already when working out unwatched) " is 128.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "		TraktLogger.Info ("Getting local episodes from tvseries database' Ignoring {0} tv show(s) set by user"' IgnoredSeries.Count); " is 125.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "		TraktLogger.Info ("Found {0} total episodes in tvseries database{1}"' episodeCount' IgnoredSeries.Count > 0 ? string.Format (" and {0} ignored episodes"' episodeCount - localEpisodes.Count) : ""); " is 196.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "		var localCollectedEpisodes = localEpisodes.Where (e => !string.IsNullOrEmpty (e [DBEpisode.cFilename].ToString ())).ToList (); " is 126.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "			localRatedShows.AddRange (shows.Where (s => s [DBOnlineSeries.cMyRating] > 0 && !IgnoredSeries.Contains (s [DBOnlineSeries.cID]))); " is 131.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "					TraktLogger.Info ("Marking episode as unwatched in local database' episode is not watched on trakt.tv. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'' Show TVDb ID = '{4}'' Show IMDb ID = '{5}'"' episode.ShowTitle' episode.ShowYear.HasValue ? episode.ShowYear.ToString () : "<empty>"' episode.Season' episode.Number' episode.ShowTvdbId.HasValue ? episode.ShowTvdbId.ToString () : "<empty>"' episode.ShowImdbId ?? "<empty>"); " is 438.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "					TraktLogger.Info ("Marking episode as watched in local database' episode is watched on trakt.tv. Plays = '{0}'' Title = '{1}'' Year = '{2}'' Season = '{3}'' Episode = '{4}'' Show TVDb ID = '{5}'' Show IMDb ID = '{6}'' Last Watched = '{7}'"' traktEpisode.Plays' traktEpisode.ShowTitle' traktEpisode.ShowYear.HasValue ? traktEpisode.ShowYear.ToString () : "<empty>"' traktEpisode.Season' traktEpisode.Number' traktEpisode.ShowTvdbId.HasValue ? traktEpisode.ShowTvdbId.ToString () : "<empty>"' traktEpisode.ShowImdbId ?? "<empty>"' traktEpisode.WatchedAt); " is 553.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "						TraktLogger.Info ("Inserting rating for tv episode in local database' episode is rated on trakt.tv. Rating = '{0}/10'' Title = '{1}'' Year = '{2}' Season = '{3}'' Episode = '{4}'' Show TVDb ID = '{5}'' Show IMDb ID = '{6}'' Episode TVDb ID = '{7}'"' traktEpisode.Rating' traktEpisode.Show.Title' traktEpisode.Show.Year.HasValue ? traktEpisode.Show.Year.ToString () : "<empty>"' traktEpisode.Episode.Season' traktEpisode.Episode.Number' traktEpisode.Show.Ids.Tvdb.HasValue ? traktEpisode.Show.Ids.Tvdb.ToString () : "<empty>"' traktEpisode.Show.Ids.Imdb ?? "<empty>"' traktEpisode.Episode.Ids.Tvdb.HasValue ? traktEpisode.Episode.Ids.Tvdb.ToString () : "<empty>"); " is 663.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "					TraktLogger.Info ("Inserting rating for tv show in local database' show is rated on trakt.tv. Rating = '{0}/10'' Title = '{1}'' Year = '{1}'' Show TVDb ID = '{2}'"' traktShow.Rating' traktShow.Show.Title' traktShow.Show.Year.HasValue ? traktShow.Show.Year.ToString () : "<empty>"' traktShow.Show.Ids.Tvdb.HasValue ? traktShow.Show.Ids.Tvdb.ToString () : "<empty>"); " is 365.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "			TraktLogger.Info ("Found {0} local tv show(s) with {1} watched episode(s) to add to trakt.tv watched history"' syncWatchedShows.Shows.Count' syncWatchedShows.Shows.Sum (sh => sh.Seasons.Sum (se => se.Episodes.Count ()))); " is 221.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "				TraktLogger.Info ("Adding tv show [{0}/{1}] to trakt.tv episode watched history' Episode Count = '{2}'' Show Title = '{3}'' Show Year = '{4}'' Show TVDb ID = '{5}'' Show IMDb ID = '{6}'"' ++iSyncCounter' showCount' showEpisodeCount' show.Title' show.Year.HasValue ? show.Year.ToString () : "<empty>"' show.Ids.Tvdb' show.Ids.Imdb ?? "<empty>"); " is 344.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "					TraktLogger.Info ("Adding episode to trakt.tv watched history' Title = '{0} - {1}x{2}'' Watched At = '{3}'"' show.Title' s.Number' e.Number' e.WatchedAt.ToLogString ()); " is 169.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "			TraktLogger.Info ("Found {0} local tv show(s) with {1} collected episode(s) to add to trakt.tv collection"' syncCollectedShows.Shows.Count' syncCollectedShows.Shows.Sum (sh => sh.Seasons.Sum (se => se.Episodes.Count ()))); " is 222.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "				TraktLogger.Info ("Adding tv show [{0}/{1}] to trakt.tv episode collection' Episode Count = '{2}'' Show Title = '{3}'' Show Year = '{4}'' Show TVDb ID = '{5}'' Show IMDb ID = '{6}'"' ++iSyncCounter' showCount' showEpisodeCount' show.Title' show.Year.HasValue ? show.Year.ToString () : "<empty>"' show.Ids.Tvdb' show.Ids.Imdb ?? "<empty>"); " is 339.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "					TraktLogger.Info ("Adding episode to trakt.tv collection' Title = '{0} - {1}x{2}'' Collected At = '{3}'' Audio Channels = '{4}'' Audio Codec = '{5}'' Resolution = '{6}'' Media Type = '{7}'' Is 3D = '{8}'"' show.Title' s.Number' e.Number' e.CollectedAt.ToLogString ()' e.AudioChannels.ToLogString ()' e.AudioCodec.ToLogString ()' e.Resolution.ToLogString ()' e.MediaType.ToLogString ()' e.Is3D); " is 394.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "				TraktLogger.Info ("Found {0} local tv show(s) with {1} rated episode(s) to add to trakt.tv ratings"' syncRatedShowsEx.Shows.Count' syncRatedShowsEx.Shows.Sum (sh => sh.Seasons.Sum (se => se.Episodes.Count ()))); " is 211.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "					TraktLogger.Info ("Adding tv show [{0}/{1}] to trakt.tv episode ratings' Episode Count = '{2}'' Show Title = '{3}'' Show Year = '{4}'' Show TVDb ID = '{5}'' Show IMDb ID = '{6}'"' ++iSyncCounter' showCount' showEpisodeCount' show.Title' show.Year.HasValue ? show.Year.ToString () : "<empty>"' show.Ids.Tvdb' show.Ids.Imdb ?? "<empty>"); " is 336.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "						TraktLogger.Info ("Adding episode to trakt.tv ratings' Title = '{0} - {1}x{2}'' Rating = '{3}'' Rated At = '{4}'"' show.Title' s.Number' e.Number' e.Rating' e.RatedAt.ToLogString ()); " is 183.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "							TraktLogger.Info ("Adding tv show to trakt.tv ratings' Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'' IMDb ID = '{3}'' Rating = '{4}'' Rated At = '{5}'"' s.Title' s.Year.ToLogString ()' s.Ids.Tvdb.ToLogString ()' s.Ids.Imdb.ToLogString ()' s.Rating' s.RatedAt.ToLogString ()); " is 275.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "			TraktLogger.Info ("Found {0} local tv show(s) with {1} episode(s) to remove from trakt.tv collection"' syncRemovedShows.Shows.Count' syncRemovedShows.Shows.Sum (sh => sh.Seasons.Sum (se => se.Episodes.Count ()))); " is 213.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "				TraktLogger.Info ("Removing tv show [{0}/{1}] from trakt.tv episode collection' Episode Count = '{2}'' Show Title = '{3}'' Show Year = '{4}'' Show TVDb ID = '{5}'' Show IMDb ID = '{6}'"' ++iSyncCounter' showCount' showEpisodeCount' show.Title' show.Year.HasValue ? show.Year.ToString () : "<empty>"' show.Ids.Tvdb' show.Ids.Imdb ?? "<empty>"); " is 343.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "					TraktLogger.Info ("Removing episode from trakt.tv collection' Title = '{0} - {1}x{2}'"' show.Title' s.Number' e.Number); " is 120.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncLibrary,The length of the statement  "			TraktLogger.Info ("Updating episode counts in local database for series. Title = '{0}'' Year = '{1}'' Show TVDb ID = '{2}'"' series.ToString ()' series.Year ?? "<empty>"' series [DBSeries.cID]); " is 194.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,Scrobble,The length of the statement  "				TraktLogger.Error ("Unable to retrieve double episode information from tvseries database for current playing episode. Title = '{0}'"' scrobbleEpisode.ToString ()); " is 163.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,Scrobble,The length of the statement  "				TraktLogger.Info ("Sending start scrobble of second part of episode to trakt.tv. Show Title = '{0}'' Season = '{1}'' Episode = '{2}'' Episode Title = '{3}'' Show TVDb ID = '{4}'' Episode TVDb ID = '{5}'"' show [DBOnlineSeries.cOriginalName]' episodes [1] [DBOnlineEpisode.cSeasonIndex]' episodes [1] [DBOnlineEpisode.cEpisodeIndex]' episodes [1] [DBOnlineEpisode.cEpisodeName]' episodes [1] [DBOnlineEpisode.cSeriesID]' episodes [1] [DBOnlineEpisode.cID]); " is 456.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,Scrobble,The length of the statement  "		TraktLogger.Info ("Sending start scrobble of episode to trakt.tv. Show Title = '{0}'' Season = '{1}'' Episode = '{2}'' Episode Title = '{3}'' Show TVDb ID = '{4}'' Episode TVDb ID = '{5}'"' show [DBOnlineSeries.cOriginalName]' scrobbleEpisode [DBOnlineEpisode.cSeasonIndex]' scrobbleEpisode [DBOnlineEpisode.cEpisodeIndex]' scrobbleEpisode [DBOnlineEpisode.cEpisodeName]' scrobbleEpisode [DBOnlineEpisode.cSeriesID]' scrobbleEpisode [DBOnlineEpisode.cID]); " is 456.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The length of the statement  "	TraktLogger.Info ("Found {0} tv episodes on trakt.tv with resume data' processing paused episodes after {1}"' playbackData.Where (p => p.Type == "episode").Count ()' lastPausedAtEpisode); " is 187.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The length of the statement  "			TraktLogger.Warning ("Skipping item with invalid TVDb ID' TV Show = '{0}'' Season='{1}'' Episode='{2}'"' item.Show.Title' item.Episode.Season' item.Episode.Number); " is 164.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The length of the statement  "			TraktLogger.Info ("Ignoring resume data sync for episode' series is ignored by user. TV Show = '{0}'' Season='{1}'' Episode='{2}'"' item.Show.Title' item.Episode.Season' item.Episode.Number); " is 191.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The length of the statement  "		string sql = "SELECT EpisodeFilename'SeriesID'SeasonIndex'EpisodeIndex'localPlaytime'StopTime " + "FROM local_episodes " + "WHERE SeriesID = '{0}' and SeasonIndex = '{1}' and EpisodeIndex = '{2}'"; " is 197.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The length of the statement  "			TraktLogger.Warning ("Skipping item with invalid runtime in database' TV Show = '{0}'' Season='{1}'' Episode='{2}'"' item.Show.Title' item.Episode.Season' item.Episode.Number); " is 176.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The length of the statement  "		if (TraktSettings.SyncPlaybackOnEnterPlugin && LastEpisode != null && LastEpisode [DBEpisode.cFilename] == episode [DBEpisode.cFilename]) " is 137.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The length of the statement  "		var resumeData = Convert.ToInt32 ((episode [DBEpisode.cLocalPlaytime] / 1000.0) * (item.Progress / 100.0)) - TraktSettings.SyncResumeDelta; " is 139.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The length of the statement  "			TraktLogger.Info ("Setting resume time '{0}' for episode' Title = '{1} - {2}x{3}'' Paused At = '{4}'"' new TimeSpan (0' 0' 0' resumeData)' item.Show.Title' item.Episode.Season' item.Episode.Number' item.PausedAt); " is 213.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,PlayEpisode,The length of the statement  "	var episode = episodes.FirstOrDefault (e => (e [DBEpisode.cEpisodeIndex] == episodeid || e [DBEpisode.cEpisodeIndex2] == episodeid) && !string.IsNullOrEmpty (e [DBEpisode.cFilename])); " is 184.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodePersonInfo,The length of the statement  "		searchPeople.Actors.AddRange (series [DBOnlineSeries.cActors].ToString ().Split ('|').Where (s => s.Trim ().Length > 0)); " is 121.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodePersonInfo,The length of the statement  "		searchPeople.Directors.AddRange (episode [DBOnlineEpisode.cDirector].ToString ().Split ('|').Where (s => s.Trim ().Length > 0)); " is 128.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodePersonInfo,The length of the statement  "		searchPeople.Writers.AddRange (episode [DBOnlineEpisode.cWriter].ToString ().Split ('|').Where (s => s.Trim ().Length > 0)); " is 124.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodePersonInfo,The length of the statement  "		searchPeople.GuestStars.AddRange (episode [DBOnlineEpisode.cGuestStars].ToString ().Split ('|').Where (s => s.Trim ().Length > 0)); " is 131.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetSeriesPersonInfo,The length of the statement  "		searchPeople.Actors.AddRange (series [DBOnlineSeries.cActors].ToString ().Split ('|').Where (s => s.Trim ().Length > 0)); " is 121.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetWatchedShowsForSyncEx,The length of the statement  "	var episodes = localWatchedEpisodes.Where (lwe => lwe [DBOnlineEpisode.cEpisodeIndex] != "" && lwe [DBOnlineEpisode.cEpisodeIndex] != "0").ToList (); " is 149.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetWatchedShowsForSyncEx,The length of the statement  "			var syncShow = syncWatchedEpisodes.Shows.FirstOrDefault (swe => swe.Ids != null && swe.Ids.Tvdb == episode [DBOnlineEpisode.cSeriesID]); " is 136.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetCollectedShowsForSyncEx,The length of the statement  "	var episodes = localCollectedEpisodes.Where (lce => lce [DBOnlineEpisode.cEpisodeIndex] != "" && lce [DBOnlineEpisode.cEpisodeIndex] != "0").ToList (); " is 151.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetCollectedShowsForSyncEx,The length of the statement  "			var syncShow = syncCollectedEpisodes.Shows.FirstOrDefault (sce => sce.Ids != null && sce.Ids.Tvdb == episode [DBOnlineEpisode.cSeriesID]); " is 138.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetRatedEpisodesForSyncEx,The length of the statement  "	var episodes = localRatedEpisodes.Where (lre => lre [DBOnlineEpisode.cEpisodeIndex] != "" && lre [DBOnlineEpisode.cEpisodeIndex] != "0").ToList (); " is 147.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetRatedEpisodesForSyncEx,The length of the statement  "			var syncShow = syncRatedEpisodes.Shows.FirstOrDefault (sre => sre.Ids != null && sre.Ids.Tvdb == episode [DBOnlineEpisode.cSeriesID]); " is 134.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetRemovedShowsForSyncEx,The length of the statement  "			var syncShow = syncUnCollectedEpisodes.Shows.FirstOrDefault (suce => suce.Ids != null && suce.Ids.Trakt == episode.ShowId); " is 123.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,CreateLookupKey,The length of the statement  "	return string.Format ("{0}_{1}_{2}"' episode [DBOnlineEpisode.cSeriesID]' episode [DBOnlineEpisode.cSeasonIndex]' episode [DBOnlineEpisode.cEpisodeIndex]); " is 155.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,EpisodeMatch,The length of the statement  "		return localEpisode [DBOnlineEpisode.cSeriesID] == onlineEpisode.ShowTvdbId && localEpisode [DBOnlineEpisode.cSeasonIndex] == onlineEpisode.Season && localEpisode [DBOnlineEpisode.cEpisodeIndex] == onlineEpisode.Number; " is 219.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,EpisodeMatch,The length of the statement  "		return BasicHandler.GetProperImdbId (show [DBOnlineSeries.cIMDBID]) == onlineEpisode.ShowImdbId && localEpisode [DBOnlineEpisode.cSeasonIndex] == onlineEpisode.Season && localEpisode [DBOnlineEpisode.cEpisodeIndex] == onlineEpisode.Number; " is 239.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,EpisodeMatch,The length of the statement  "		return BasicHandler.IsTitleMatch (show [DBOnlineSeries.cOriginalName]' onlineEpisode.ShowTitle' show.Year.ToNullableInt32 ()) && show.Year.ToNullableInt32 () == onlineEpisode.ShowYear && localEpisode [DBOnlineEpisode.cSeasonIndex] == onlineEpisode.Season && localEpisode [DBOnlineEpisode.cEpisodeIndex] == onlineEpisode.Number; " is 327.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,EpisodeMatch,The length of the statement  "	//else if (BasicHandler.IsValidImdb(onlineEpisode.Ids.ImdbId) && BasicHandler.IsValidImdb(localEpisode[DBOnlineEpisode.cIMDBID])) " is 129.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,EpisodeMatch,The length of the statement  "		return localEpisode [DBOnlineEpisode.cSeriesID] == onlineShow.Ids.Tvdb && localEpisode [DBOnlineEpisode.cSeasonIndex] == onlineEpisode.Season && localEpisode [DBOnlineEpisode.cEpisodeIndex] == onlineEpisode.Number; " is 214.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,EpisodeMatch,The length of the statement  "		return BasicHandler.GetProperImdbId (show [DBOnlineSeries.cIMDBID]) == onlineShow.Ids.Imdb && localEpisode [DBOnlineEpisode.cSeasonIndex] == onlineEpisode.Season && localEpisode [DBOnlineEpisode.cEpisodeIndex] == onlineEpisode.Number; " is 234.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,EpisodeMatch,The length of the statement  "		return BasicHandler.IsTitleMatch (show [DBOnlineSeries.cOriginalName]' onlineShow.Title' onlineShow.Year) && show.Year.ToNullableInt32 () == onlineShow.Year && localEpisode [DBOnlineEpisode.cSeasonIndex] == onlineEpisode.Season && localEpisode [DBOnlineEpisode.cEpisodeIndex] == onlineEpisode.Number; " is 300.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,ShowMatch,The length of the statement  "	} else if (BasicHandler.IsValidImdb (onlineShow.Ids.Imdb) && BasicHandler.IsValidImdb (localShow [DBOnlineSeries.cIMDBID])) { " is 125.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,ShowMatch,The length of the statement  "		return BasicHandler.IsTitleMatch (localShow [DBOnlineSeries.cOriginalName]' onlineShow.Title' onlineShow.Year) && localShow.Year.ToNullableInt32 () == onlineShow.Year; " is 167.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,RateEpisode,The length of the statement  "		TraktLogger.Info ("Received a Rate Episode event from tvseries. Show Title = '{0}'' Show Year = '{1}'' Season = '{2}'' Episode = '{3}'' Episode Title = '{4}'' Show TVDb ID = '{5}'' Episode TVDb ID = '{6}'"' show [DBOnlineSeries.cOriginalName]' show.Year ?? "<empty>"' episode [DBOnlineEpisode.cSeasonIndex]' episode [DBOnlineEpisode.cEpisodeIndex]' episode [DBOnlineEpisode.cEpisodeName]' episode [DBOnlineEpisode.cSeriesID]' episode [DBOnlineEpisode.cID]); " is 457.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,RateShow,The length of the statement  "		TraktLogger.Info ("Received a Rate Show event from tvseries. Show Title = '{0}'' Show Year = '{1}'' Show TVDb ID = '{2}'"' show [DBOnlineSeries.cOriginalName]' show.Year' show [DBSeries.cID]); " is 192.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,MarkEpisodesAsWatched,The length of the statement  "				seasons.First (s => s.Number == episode [DBOnlineEpisode.cSeasonIndex]).Episodes.Add (new TraktSyncShowWatchedEx.Season.Episode { " is 129.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,MarkEpisodesAsUnWatched,The length of the statement  "				seasons.First (s => s.Number == episode [DBOnlineEpisode.cSeasonIndex]).Episodes.Add (new TraktSyncShowEx.Season.Episode { " is 122.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnEpisodeWatched,The length of the statement  "	TraktLogger.Info ("Playback of MP-TVSeries episode stopped and considered watched. Title = '{0}'' PlayList Item = '{1}'"' episode.ToString ()' isPlaylist); " is 155.
Long Statement,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnToggleWatched,The length of the statement  "	TraktLogger.Info ("Received a Toggle Watched event from tvseries. Show Title = '{0}'' Episodes = '{1}'' Watched = '{2}'"' show [DBOnlineSeries.cOriginalName]' episodes.Count' watched.ToString ()); " is 196.
Complex Conditional,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadActivity,The conditional expression  "facade.Count == 0 && PreviousActivity != null && PreviousActivity.Activities != null && PreviousActivity.Activities.Count > 0"  is complex.
Complex Conditional,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,The conditional expression  "PreviousActivity == null || PreviousActivity.Activities == null || ActivityStartTime <= 0 || GetFullActivityLoad"  is complex.
Complex Conditional,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The conditional expression  "(windowID < (int)TraktGUIWindows.Settings || windowID > (int)TraktGUIWindows.SettingsGeneral) && (PreviousWindow >= (int)TraktGUIWindows.Settings && PreviousWindow <= (int)TraktGUIWindows.SettingsGeneral)"  is complex.
Complex Conditional,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The conditional expression  "(!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)"  is complex.
Complex Conditional,TraktPlugin.GUI,GUIShowSeasons,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShowSeasons.cs,GetLoadingParameter,The conditional expression  "Show != null && (Show.Ids.Trakt != null || Show.Ids.Imdb != null || Show.Title != null)"  is complex.
Complex Conditional,TraktPlugin.GUI,GUIBackgroundTask,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBackgroundTask.cs,StopBackgroundTask,The conditional expression  "IsBusy && _CurrentTaskSuccess == null && backgroundThread != null && backgroundThread.IsAlive"  is complex.
Complex Conditional,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,UpdateCategoriesMenu,The conditional expression  "node.Name == string.Format ("${{{0}}}"' GUI.Translation.WatchList) || node.Name == string.Format ("${{{0}}}"' GUI.Translation.Recommendations) || node.Name == "$(Watchlist)" || node.Name == "${Recommendations}""  is complex.
Complex Conditional,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,UpdateFiltersMenu,The conditional expression  "node.Name == string.Format ("${{{0}}}"' GUI.Translation.WatchList) || node.Name == string.Format ("${{{0}}}"' GUI.Translation.Recommendations) || node.Name == "$(Watchlist)" || node.Name == "${Recommendations}""  is complex.
Empty Catch Block,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingMoviesFacade,The method has an empty catch block.
Empty Catch Block,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,LoadTrendingShowsFacade,The method has an empty catch block.
Empty Catch Block,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,SetUpdateAnimation,The method has an empty catch block.
Empty Catch Block,TraktPlugin,TraktLogger,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,DeleteFile,The method has an empty catch block.
Empty Catch Block,TraktPlugin,TraktLogger,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,MoveFile,The method has an empty catch block.
Empty Catch Block,TraktPlugin,TraktLogger,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,WriteToFile,The method has an empty catch block.
Empty Catch Block,TraktPlugin,TraktLogger,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,WriteLatency,The method has an empty catch block.
Empty Catch Block,TraktPlugin.GUI,AsyncImageResource,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cornerstone.MP\AsyncImageResource.cs,loadResource,The method has an empty catch block.
Empty Catch Block,TraktPlugin.GUI,GUIImageHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,DownloadImage,The method has an empty catch block.
Empty Catch Block,TraktPlugin.GUI,GUIImageHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,LoadImage,The method has an empty catch block.
Magic Number,TraktPlugin.Cache,TmdbCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TmdbCache.cs,GetTmdbConfiguration,The following statement contains a magic number: if (TraktSettings.TmdbConfiguration == null || TraktSettings.TmdbConfiguration.Images == null || DateTime.Now.Subtract (new TimeSpan (14' 0' 0' 0' 0)) > lastRequestedDate) {  	var latestConfig = TmdbAPI.TmdbAPI.GetConfiguration ();  	if (latestConfig != null && latestConfig.Images != null && latestConfig.Images.BaseUrl != null) {  		TraktSettings.TmdbConfiguration = latestConfig;  	} else {  		TraktSettings.TmdbConfiguration = new TmdbConfiguration {  			Images = new TmdbConfiguration.ImageConfiguration {  				BaseUrl = "http://image.tmdb.org/t/p/"  			}  		};  	}  	TraktSettings.TmdbConfigurationAge = DateTime.Now.ToString ();  }  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.pathTextBox.Location = new System.Drawing.Point (12' 33);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.pathTextBox.Location = new System.Drawing.Point (12' 33);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.pathTextBox.Size = new System.Drawing.Size (277' 20);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.pathTextBox.Size = new System.Drawing.Size (277' 20);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (13' 14);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (13' 14);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (134' 13);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (134' 13);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.Location = new System.Drawing.Point (295' 31);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.Location = new System.Drawing.Point (295' 31);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.Size = new System.Drawing.Size (75' 23);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.Size = new System.Drawing.Size (75' 23);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.TabIndex = 2;  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point (214' 69);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Location = new System.Drawing.Point (214' 69);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size (75' 23);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.okButton.Size = new System.Drawing.Size (75' 23);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.okButton.TabIndex = 4;  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point (295' 69);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point (295' 69);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size (75' 23);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size (75' 23);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.TabIndex = 5;  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point (16' 60);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point (16' 60);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size (350' 3);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size (350' 3);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.TabIndex = 3;  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (382' 101);  
Magic Number,TraktPlugin,AddPathPopup,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\AddPathPopup.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (382' 101);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,CloseConfig,The following statement contains a magic number: if (txtPinCode.TextLength < 4)  	TraktSettings.ParentalControlsEnabled = false;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,txtPinCode_TextChanged,The following statement contains a magic number: if (txtPinCode.TextLength < 4) {  	txtPinCode.ForeColor = Color.Red;  } else {  	txtPinCode.ForeColor = Color.Black;  	TraktSettings.ParentalControlsPinCode = txtPinCode.Text;  }  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbTraktAccount.Location = new System.Drawing.Point (12' 12);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbTraktAccount.Location = new System.Drawing.Point (12' 12);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbTraktAccount.Size = new System.Drawing.Size (316' 97);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbTraktAccount.Size = new System.Drawing.Size (316' 97);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.linkTrakt.Location = new System.Drawing.Point (238' 71);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.linkTrakt.Location = new System.Drawing.Point (238' 71);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.linkTrakt.Size = new System.Drawing.Size (71' 13);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.linkTrakt.Size = new System.Drawing.Size (71' 13);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.linkTrakt.TabIndex = 4;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.tbPassword.Location = new System.Drawing.Point (67' 48);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.tbPassword.Location = new System.Drawing.Point (67' 48);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.tbPassword.Size = new System.Drawing.Size (243' 20);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.tbPassword.Size = new System.Drawing.Size (243' 20);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.tbPassword.TabIndex = 3;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.tbUsername.Location = new System.Drawing.Point (67' 22);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.tbUsername.Location = new System.Drawing.Point (67' 22);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.tbUsername.Size = new System.Drawing.Size (243' 20);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.tbUsername.Size = new System.Drawing.Size (243' 20);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lbPassword.Location = new System.Drawing.Point (6' 51);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lbPassword.Location = new System.Drawing.Point (6' 51);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lbPassword.Size = new System.Drawing.Size (53' 13);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lbPassword.Size = new System.Drawing.Size (53' 13);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lbPassword.TabIndex = 2;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lbUsername.Location = new System.Drawing.Point (6' 25);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lbUsername.Location = new System.Drawing.Point (6' 25);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lbUsername.Size = new System.Drawing.Size (55' 13);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lbUsername.Size = new System.Drawing.Size (55' 13);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbPlugins.Location = new System.Drawing.Point (12' 115);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbPlugins.Location = new System.Drawing.Point (12' 115);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbPlugins.Size = new System.Drawing.Size (322' 124);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbPlugins.Size = new System.Drawing.Size (322' 124);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnDown.Location = new System.Drawing.Point (287' 53);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnDown.Location = new System.Drawing.Point (287' 53);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnDown.Size = new System.Drawing.Size (29' 30);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnDown.Size = new System.Drawing.Size (29' 30);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnDown.TabIndex = 2;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Location = new System.Drawing.Point (287' 19);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Location = new System.Drawing.Point (287' 19);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Size = new System.Drawing.Size (29' 29);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Size = new System.Drawing.Size (29' 29);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.clbPlugins.ColumnWidth = 132;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.clbPlugins.Location = new System.Drawing.Point (9' 19);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.clbPlugins.Location = new System.Drawing.Point (9' 19);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.clbPlugins.Size = new System.Drawing.Size (272' 94);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.clbPlugins.Size = new System.Drawing.Size (272' 94);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbSync.Location = new System.Drawing.Point (340' 12);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbSync.Location = new System.Drawing.Point (340' 12);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbSync.Size = new System.Drawing.Size (322' 245);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbSync.Size = new System.Drawing.Size (322' 245);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbSync.TabIndex = 3;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlaybackOnEnterPlugin.Location = new System.Drawing.Point (9' 192);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlaybackOnEnterPlugin.Location = new System.Drawing.Point (9' 192);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlaybackOnEnterPlugin.Size = new System.Drawing.Size (245' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlaybackOnEnterPlugin.Size = new System.Drawing.Size (245' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlaybackOnEnterPlugin.TabIndex = 10;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point (191' 22);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point (191' 22);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size (33' 13);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size (33' 13);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 2;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncInterval.Location = new System.Drawing.Point (129' 19);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncInterval.Location = new System.Drawing.Point (129' 19);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncInterval.Maximum = new decimal (new int[] {  	168'  	0'  	0'  	0  });  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncInterval.Size = new System.Drawing.Size (55' 20);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncInterval.Size = new System.Drawing.Size (55' 20);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncResumeDelta.Location = new System.Drawing.Point (7' 214);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncResumeDelta.Location = new System.Drawing.Point (7' 214);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncResumeDelta.Size = new System.Drawing.Size (197' 13);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncResumeDelta.Size = new System.Drawing.Size (197' 13);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncResumeDelta.TabIndex = 11;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncResumeDelta.Location = new System.Drawing.Point (252' 212);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncResumeDelta.Location = new System.Drawing.Point (252' 212);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncResumeDelta.Maximum = new decimal (new int[] {  	600'  	0'  	0'  	0  });  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncResumeDelta.Size = new System.Drawing.Size (61' 20);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncResumeDelta.Size = new System.Drawing.Size (61' 20);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.numSyncResumeDelta.TabIndex = 12;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlayback.Location = new System.Drawing.Point (9' 171);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlayback.Location = new System.Drawing.Point (9' 171);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlayback.Size = new System.Drawing.Size (260' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlayback.Size = new System.Drawing.Size (260' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncPlayback.TabIndex = 9;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncRatings.Location = new System.Drawing.Point (9' 129);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncRatings.Location = new System.Drawing.Point (9' 129);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncRatings.Size = new System.Drawing.Size (123' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncRatings.Size = new System.Drawing.Size (123' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncRatings.TabIndex = 7;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncLibrary.Location = new System.Drawing.Point (9' 108);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncLibrary.Location = new System.Drawing.Point (9' 108);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncLibrary.Size = new System.Drawing.Size (205' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncLibrary.Size = new System.Drawing.Size (205' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbSyncLibrary.TabIndex = 6;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMyFilmsCategories.Location = new System.Drawing.Point (9' 87);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMyFilmsCategories.Location = new System.Drawing.Point (9' 87);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMyFilmsCategories.Size = new System.Drawing.Size (195' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMyFilmsCategories.Size = new System.Drawing.Size (195' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMyFilmsCategories.TabIndex = 5;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesFilters.Location = new System.Drawing.Point (9' 66);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesFilters.Location = new System.Drawing.Point (9' 66);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesFilters.Size = new System.Drawing.Size (208' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesFilters.Size = new System.Drawing.Size (208' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesFilters.TabIndex = 4;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesCategories.Location = new System.Drawing.Point (9' 45);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesCategories.Location = new System.Drawing.Point (9' 45);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesCategories.Size = new System.Drawing.Size (231' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesCategories.Size = new System.Drawing.Size (231' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbMovingPicturesCategories.TabIndex = 3;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lbSyncTimerLength.Location = new System.Drawing.Point (7' 22);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lbSyncTimerLength.Location = new System.Drawing.Point (7' 22);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lbSyncTimerLength.Size = new System.Drawing.Size (121' 13);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lbSyncTimerLength.Size = new System.Drawing.Size (121' 13);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbKeepInSync.Location = new System.Drawing.Point (9' 150);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbKeepInSync.Location = new System.Drawing.Point (9' 150);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbKeepInSync.Size = new System.Drawing.Size (278' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbKeepInSync.Size = new System.Drawing.Size (278' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbKeepInSync.TabIndex = 8;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point (556' 466);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point (556' 466);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size (106' 23);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size (106' 23);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.TabIndex = 8;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.ttpConfig.AutoPopDelay = 18000;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.ttpConfig.InitialDelay = 500;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.ttpConfig.ReshowDelay = 100;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnTVSeriesRestrictions.Location = new System.Drawing.Point (9' 56);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnTVSeriesRestrictions.Location = new System.Drawing.Point (9' 56);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnTVSeriesRestrictions.Size = new System.Drawing.Size (149' 23);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnTVSeriesRestrictions.Size = new System.Drawing.Size (149' 23);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentControls.Location = new System.Drawing.Point (10' 19);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentControls.Location = new System.Drawing.Point (10' 19);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentControls.Size = new System.Drawing.Size (191' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentControls.Size = new System.Drawing.Size (191' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.txtPinCode.Location = new System.Drawing.Point (252' 16);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.txtPinCode.Location = new System.Drawing.Point (252' 16);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.txtPinCode.MaxLength = 4;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.txtPinCode.Size = new System.Drawing.Size (62' 20);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.txtPinCode.Size = new System.Drawing.Size (62' 20);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbRestrictions.Location = new System.Drawing.Point (12' 245);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbRestrictions.Location = new System.Drawing.Point (12' 245);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbRestrictions.Size = new System.Drawing.Size (322' 89);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbRestrictions.Size = new System.Drawing.Size (322' 89);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbRestrictions.TabIndex = 2;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Location = new System.Drawing.Point (11' 19);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Location = new System.Drawing.Point (11' 19);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Size = new System.Drawing.Size (298' 36);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Size = new System.Drawing.Size (298' 36);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnMovieRestrictions.Location = new System.Drawing.Point (164' 56);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnMovieRestrictions.Location = new System.Drawing.Point (164' 56);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnMovieRestrictions.Size = new System.Drawing.Size (152' 23);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnMovieRestrictions.Size = new System.Drawing.Size (152' 23);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnMovieRestrictions.TabIndex = 2;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.progressBarSync.Location = new System.Drawing.Point (12' 401);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.progressBarSync.Location = new System.Drawing.Point (12' 401);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.progressBarSync.Size = new System.Drawing.Size (650' 23);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.progressBarSync.Size = new System.Drawing.Size (650' 23);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.progressBarSync.TabIndex = 5;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncStatus.Location = new System.Drawing.Point (12' 469);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncStatus.Location = new System.Drawing.Point (12' 469);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncStatus.Size = new System.Drawing.Size (538' 14);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncStatus.Size = new System.Drawing.Size (538' 14);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.lblSyncStatus.TabIndex = 7;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnStartLibrarySync.Location = new System.Drawing.Point (12' 430);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnStartLibrarySync.Location = new System.Drawing.Point (12' 430);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnStartLibrarySync.Size = new System.Drawing.Size (650' 24);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnStartLibrarySync.Size = new System.Drawing.Size (650' 24);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.btnStartLibrarySync.TabIndex = 6;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Location = new System.Drawing.Point (226' 38);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Location = new System.Drawing.Point (226' 38);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Size = new System.Drawing.Size (88' 20);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Size = new System.Drawing.Size (88' 20);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.TabIndex = 3;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Value = new System.DateTime (2016' 3' 25' 21' 0' 0' 0);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Value = new System.DateTime (2016' 3' 25' 21' 0' 0' 0);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Value = new System.DateTime (2016' 3' 25' 21' 0' 0' 0);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.dtParentalControlsTime.Value = new System.DateTime (2016' 3' 25' 21' 0' 0' 0);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalControlsTime.Location = new System.Drawing.Point (10' 43);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalControlsTime.Location = new System.Drawing.Point (10' 43);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalControlsTime.Size = new System.Drawing.Size (163' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalControlsTime.Size = new System.Drawing.Size (163' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalControlsTime.TabIndex = 2;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbParentalControls.Location = new System.Drawing.Point (340' 264);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbParentalControls.Location = new System.Drawing.Point (340' 264);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbParentalControls.Size = new System.Drawing.Size (320' 126);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbParentalControls.Size = new System.Drawing.Size (320' 126);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.gbParentalControls.TabIndex = 4;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboMovieCertifications.Location = new System.Drawing.Point (252' 83);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboMovieCertifications.Location = new System.Drawing.Point (252' 83);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboMovieCertifications.Size = new System.Drawing.Size (61' 21);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboMovieCertifications.Size = new System.Drawing.Size (61' 21);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboMovieCertifications.TabIndex = 7;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreMovieCertifications.Location = new System.Drawing.Point (10' 90);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreMovieCertifications.Location = new System.Drawing.Point (10' 90);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreMovieCertifications.Size = new System.Drawing.Size (188' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreMovieCertifications.Size = new System.Drawing.Size (188' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreMovieCertifications.TabIndex = 6;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboTVCertifications.Location = new System.Drawing.Point (252' 60);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboTVCertifications.Location = new System.Drawing.Point (252' 60);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboTVCertifications.Size = new System.Drawing.Size (61' 21);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboTVCertifications.Size = new System.Drawing.Size (61' 21);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboTVCertifications.TabIndex = 5;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreShowCertifications.Location = new System.Drawing.Point (10' 66);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreShowCertifications.Location = new System.Drawing.Point (10' 66);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreShowCertifications.Size = new System.Drawing.Size (186' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreShowCertifications.Size = new System.Drawing.Size (186' 17);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cbParentalIgnoreShowCertifications.TabIndex = 4;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point (12' 341);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point (12' 341);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size (322' 49);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size (322' 49);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.TabIndex = 9;  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (11' 20);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (11' 20);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (104' 13);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (104' 13);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboPreferredImageLanguage.Location = new System.Drawing.Point (122' 16);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboPreferredImageLanguage.Location = new System.Drawing.Point (122' 16);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboPreferredImageLanguage.Size = new System.Drawing.Size (194' 21);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cboPreferredImageLanguage.Size = new System.Drawing.Size (194' 21);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (672' 501);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (672' 501);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (688' 539);  
Magic Number,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (688' 539);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.listFolders.Location = new System.Drawing.Point (13' 39);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.listFolders.Location = new System.Drawing.Point (13' 39);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.listFolders.Size = new System.Drawing.Size (278' 212);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.listFolders.Size = new System.Drawing.Size (278' 212);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (12' 12);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (12' 12);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (279' 13);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (279' 13);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point (216' 257);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point (216' 257);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size (75' 23);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size (75' 23);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.TabIndex = 4;  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.Location = new System.Drawing.Point (300' 39);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.Location = new System.Drawing.Point (300' 39);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.Size = new System.Drawing.Size (26' 23);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.Size = new System.Drawing.Size (26' 23);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.TabIndex = 2;  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnDelete.Location = new System.Drawing.Point (300' 69);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnDelete.Location = new System.Drawing.Point (300' 69);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnDelete.Size = new System.Drawing.Size (26' 23);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnDelete.Size = new System.Drawing.Size (26' 23);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.btnDelete.TabIndex = 3;  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (336' 293);  
Magic Number,TraktPlugin,FolderList,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\FolderList.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (336' 293);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,MovieSelect_Load,The following statement contains a magic number: if (TraktSettings.MyVideos > -1) {  	string sql = "SELECT movieinfo.strTitle' path.strPath' files.strFilename " + "FROM movieInfo " + "LEFT JOIN files " + "ON movieInfo.idMovie=files.idMovie " + "LEFT JOIN path " + "ON files.idPath=path.idPath " + "ORDER BY strTitle";  	SQLiteResultSet results = VideoDatabase.GetResults (sql);  	for (int row = 0; row < results.Rows.Count; row++) {  		string title = DatabaseUtility.Get (results' row' 0);  		string filename = string.Concat (DatabaseUtility.Get (results' row' 1)' DatabaseUtility.Get (results' row' 2));  		if (string.IsNullOrEmpty (filename))  			continue;  		if (!_blockedFilenames.Contains (filename))  			unCheckedMovies.Add (new MovieSelectItem {  				MovieTitle = title'  				Filename = new List<string> {  					filename  				}  			});  		else  			checkedMovies.Add (new MovieSelectItem {  				MovieTitle = title'  				Filename = new List<string> {  					filename  				}  			});  	}  }  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,MovieSelect_Load,The following statement contains a magic number: for (int row = 0; row < results.Rows.Count; row++) {  	string title = DatabaseUtility.Get (results' row' 0);  	string filename = string.Concat (DatabaseUtility.Get (results' row' 1)' DatabaseUtility.Get (results' row' 2));  	if (string.IsNullOrEmpty (filename))  		continue;  	if (!_blockedFilenames.Contains (filename))  		unCheckedMovies.Add (new MovieSelectItem {  			MovieTitle = title'  			Filename = new List<string> {  				filename  			}  		});  	else  		checkedMovies.Add (new MovieSelectItem {  			MovieTitle = title'  			Filename = new List<string> {  				filename  			}  		});  }  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.checkedListBoxMovies.Location = new System.Drawing.Point (12' 27);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.checkedListBoxMovies.Location = new System.Drawing.Point (12' 27);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.checkedListBoxMovies.Size = new System.Drawing.Size (269' 304);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.checkedListBoxMovies.Size = new System.Drawing.Size (269' 304);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnOk.Location = new System.Drawing.Point (206' 337);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnOk.Location = new System.Drawing.Point (206' 337);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnOk.Size = new System.Drawing.Size (75' 23);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnOk.Size = new System.Drawing.Size (75' 23);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.lbSelectMoviesLabel.Location = new System.Drawing.Point (12' 9);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.lbSelectMoviesLabel.Location = new System.Drawing.Point (12' 9);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.lbSelectMoviesLabel.Size = new System.Drawing.Size (173' 13);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.lbSelectMoviesLabel.Size = new System.Drawing.Size (173' 13);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.lbSelectMoviesLabel.TabIndex = 2;  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnFolderRestrictions.Location = new System.Drawing.Point (12' 337);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnFolderRestrictions.Location = new System.Drawing.Point (12' 337);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnFolderRestrictions.Size = new System.Drawing.Size (137' 23);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnFolderRestrictions.Size = new System.Drawing.Size (137' 23);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.btnFolderRestrictions.TabIndex = 3;  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (293' 368);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (293' 368);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (309' 406);  
Magic Number,TraktPlugin,MovieSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\MovieSelect.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (309' 406);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.checkedListBoxSeries.Location = new System.Drawing.Point (13' 28);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.checkedListBoxSeries.Location = new System.Drawing.Point (13' 28);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.checkedListBoxSeries.Size = new System.Drawing.Size (272' 304);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.checkedListBoxSeries.Size = new System.Drawing.Size (272' 304);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point (210' 340);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point (210' 340);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size (75' 23);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size (75' 23);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxToggleAll.Location = new System.Drawing.Point (13' 344);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxToggleAll.Location = new System.Drawing.Point (13' 344);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxToggleAll.Size = new System.Drawing.Size (70' 17);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxToggleAll.Size = new System.Drawing.Size (70' 17);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.chkBoxToggleAll.TabIndex = 3;  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.labelSeriesSelected.Location = new System.Drawing.Point (98' 345);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.labelSeriesSelected.Location = new System.Drawing.Point (98' 345);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.labelSeriesSelected.Size = new System.Drawing.Size (93' 13);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.labelSeriesSelected.Size = new System.Drawing.Size (93' 13);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.labelSeriesSelected.TabIndex = 2;  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (13' 9);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (13' 9);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (161' 13);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (161' 13);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 4;  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (297' 385);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (297' 385);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (313' 423);  
Magic Number,TraktPlugin,SeriesSelect,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\SeriesSelect.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (313' 423);  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetLikedListsFromTrakt,The following statement contains a magic number: if (onlineItems != null) {  	bool listExists = false;  	var pagedItems = onlineItems.Likes;  	// check if we need to request more pages  	if (LikedLists != null && pagedItems.IsAny ()) {  		// if the list id exists then we already have all liked lists  		listExists = LikedLists.Any (l => l.List.Ids.Trakt == pagedItems.Last ().List.Ids.Trakt);  		// add the latest page to our previous cached comments  		pagedItems = pagedItems.Union (LikedLists);  	}  	// get more pages  	if (!listExists && pagedItems.IsAny () && onlineItems.Likes.Count () == onlineItems.TotalItemsPerPage) {  		for (int i = 2; i <= onlineItems.TotalPages; i++) {  			var nextPage = TraktAPI.TraktAPI.GetLikedItems ("lists"' "min"' i);  			if (nextPage == null || !nextPage.Likes.IsAny ())  				break;  			// if the list id exists then we already have all liked lists  			if (pagedItems.Any (c => c.List.Ids.Trakt == nextPage.Likes.Last ().List.Ids.Trakt))  				listExists = true;  			// add the latest page to our previous requested liked lists  			pagedItems = pagedItems.Union (nextPage.Likes);  			if (listExists || nextPage.Likes.Count () < nextPage.TotalItemsPerPage)  				break;  		}  	}  	// evaluate any union additions  	if (pagedItems != null)  		pagedItems = pagedItems.ToList ();  	_LikedLists = pagedItems;  	// save to local file cache  	SaveFileCache (CustomListLikedFile' _LikedLists.ToJSON ());  	// save new activity time for next time  	TraktSettings.LastSyncActivities.Lists.LikedAt = lastSyncActivities.Lists.LikedAt;  	return pagedItems == null ? null : pagedItems.OrderByDescending (l => l.LikedAt);  } else {  	return null;  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetLikedListsFromTrakt,The following statement contains a magic number: if (!listExists && pagedItems.IsAny () && onlineItems.Likes.Count () == onlineItems.TotalItemsPerPage) {  	for (int i = 2; i <= onlineItems.TotalPages; i++) {  		var nextPage = TraktAPI.TraktAPI.GetLikedItems ("lists"' "min"' i);  		if (nextPage == null || !nextPage.Likes.IsAny ())  			break;  		// if the list id exists then we already have all liked lists  		if (pagedItems.Any (c => c.List.Ids.Trakt == nextPage.Likes.Last ().List.Ids.Trakt))  			listExists = true;  		// add the latest page to our previous requested liked lists  		pagedItems = pagedItems.Union (nextPage.Likes);  		if (listExists || nextPage.Likes.Count () < nextPage.TotalItemsPerPage)  			break;  	}  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetLikedListsFromTrakt,The following statement contains a magic number: for (int i = 2; i <= onlineItems.TotalPages; i++) {  	var nextPage = TraktAPI.TraktAPI.GetLikedItems ("lists"' "min"' i);  	if (nextPage == null || !nextPage.Likes.IsAny ())  		break;  	// if the list id exists then we already have all liked lists  	if (pagedItems.Any (c => c.List.Ids.Trakt == nextPage.Likes.Last ().List.Ids.Trakt))  		listExists = true;  	// add the latest page to our previous requested liked lists  	pagedItems = pagedItems.Union (nextPage.Likes);  	if (listExists || nextPage.Likes.Count () < nextPage.TotalItemsPerPage)  		break;  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedEpisodesFromTrakt,The following statement contains a magic number: if (onlineItems != null) {  	bool commentExists = false;  	var pagedItems = onlineItems.Comments;  	// check if we need to request more pages  	if (CommentedEpisodes != null && pagedItems.IsAny ()) {  		// if the comment id exists then we already have all comments  		commentExists = CommentedEpisodes.Any (c => c.Comment.Id == pagedItems.Last ().Comment.Id);  		// add the latest page to our previous cached comments  		pagedItems = pagedItems.Union (CommentedEpisodes);  	}  	// get more pages  	if (!commentExists && pagedItems.IsAny () && onlineItems.Comments.Count () == onlineItems.TotalItemsPerPage) {  		for (int i = 2; i <= onlineItems.TotalPages; i++) {  			var nextPage = TraktAPI.TraktAPI.GetUsersComments ("me"' "all"' "episodes"' "min"' i);  			if (nextPage == null || !nextPage.Comments.IsAny ())  				break;  			// if the comment id exists then we already have all comments  			if (pagedItems.Any (c => c.Comment.Id == nextPage.Comments.Last ().Comment.Id))  				commentExists = true;  			// add the latest page to our previous requested comments  			pagedItems = pagedItems.Union (nextPage.Comments);  			if (commentExists || nextPage.Comments.Count () < nextPage.TotalItemsPerPage)  				break;  		}  	}  	// evaluate any union additions  	if (pagedItems != null)  		pagedItems = pagedItems.ToList ();  	_CommentedEpisodes = pagedItems;  	// save to local file cache  	SaveFileCache (EpisodesCommentedFile' _CommentedEpisodes.ToJSON ());  	// save new activity time for next time  	TraktSettings.LastSyncActivities.Episodes.Comment = lastSyncActivities.Episodes.Comment;  	return pagedItems == null ? null : pagedItems.OrderByDescending (c => c.Comment.CreatedAt);  } else {  	return null;  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedEpisodesFromTrakt,The following statement contains a magic number: if (!commentExists && pagedItems.IsAny () && onlineItems.Comments.Count () == onlineItems.TotalItemsPerPage) {  	for (int i = 2; i <= onlineItems.TotalPages; i++) {  		var nextPage = TraktAPI.TraktAPI.GetUsersComments ("me"' "all"' "episodes"' "min"' i);  		if (nextPage == null || !nextPage.Comments.IsAny ())  			break;  		// if the comment id exists then we already have all comments  		if (pagedItems.Any (c => c.Comment.Id == nextPage.Comments.Last ().Comment.Id))  			commentExists = true;  		// add the latest page to our previous requested comments  		pagedItems = pagedItems.Union (nextPage.Comments);  		if (commentExists || nextPage.Comments.Count () < nextPage.TotalItemsPerPage)  			break;  	}  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedEpisodesFromTrakt,The following statement contains a magic number: for (int i = 2; i <= onlineItems.TotalPages; i++) {  	var nextPage = TraktAPI.TraktAPI.GetUsersComments ("me"' "all"' "episodes"' "min"' i);  	if (nextPage == null || !nextPage.Comments.IsAny ())  		break;  	// if the comment id exists then we already have all comments  	if (pagedItems.Any (c => c.Comment.Id == nextPage.Comments.Last ().Comment.Id))  		commentExists = true;  	// add the latest page to our previous requested comments  	pagedItems = pagedItems.Union (nextPage.Comments);  	if (commentExists || nextPage.Comments.Count () < nextPage.TotalItemsPerPage)  		break;  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedShowsFromTrakt,The following statement contains a magic number: if (onlineItems != null) {  	bool commentExists = false;  	var pagedItems = onlineItems.Comments;  	// check if we need to request more pages  	if (CommentedShows != null && pagedItems.IsAny ()) {  		// if the comment id exists then we already have all comments  		commentExists = CommentedShows.Any (c => c.Comment.Id == pagedItems.Last ().Comment.Id);  		// add the latest page to our previous cached comments  		pagedItems = pagedItems.Union (CommentedShows);  	}  	// get more pages  	if (!commentExists && pagedItems.IsAny () && onlineItems.Comments.Count () == onlineItems.TotalItemsPerPage) {  		for (int i = 2; i <= onlineItems.TotalPages; i++) {  			var nextPage = TraktAPI.TraktAPI.GetUsersComments ("me"' "all"' "shows"' "min"' i);  			if (nextPage == null || !nextPage.Comments.IsAny ())  				break;  			// if the comment id exists then we already have all comments  			if (pagedItems.Any (c => c.Comment.Id == nextPage.Comments.Last ().Comment.Id))  				commentExists = true;  			// add the latest page to our previous requested comments  			pagedItems = pagedItems.Union (nextPage.Comments);  			if (commentExists || nextPage.Comments.Count () < nextPage.TotalItemsPerPage)  				break;  		}  	}  	// evaluate any union additions  	if (pagedItems != null)  		pagedItems = pagedItems.ToList ();  	_CommentedShows = pagedItems;  	// save to local file cache  	SaveFileCache (ShowsCommentedFile' _CommentedShows.ToJSON ());  	// save new activity time for next time  	TraktSettings.LastSyncActivities.Shows.Comment = lastSyncActivities.Shows.Comment;  	return pagedItems == null ? null : pagedItems.OrderByDescending (c => c.Comment.CreatedAt);  } else {  	return null;  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedShowsFromTrakt,The following statement contains a magic number: if (!commentExists && pagedItems.IsAny () && onlineItems.Comments.Count () == onlineItems.TotalItemsPerPage) {  	for (int i = 2; i <= onlineItems.TotalPages; i++) {  		var nextPage = TraktAPI.TraktAPI.GetUsersComments ("me"' "all"' "shows"' "min"' i);  		if (nextPage == null || !nextPage.Comments.IsAny ())  			break;  		// if the comment id exists then we already have all comments  		if (pagedItems.Any (c => c.Comment.Id == nextPage.Comments.Last ().Comment.Id))  			commentExists = true;  		// add the latest page to our previous requested comments  		pagedItems = pagedItems.Union (nextPage.Comments);  		if (commentExists || nextPage.Comments.Count () < nextPage.TotalItemsPerPage)  			break;  	}  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedShowsFromTrakt,The following statement contains a magic number: for (int i = 2; i <= onlineItems.TotalPages; i++) {  	var nextPage = TraktAPI.TraktAPI.GetUsersComments ("me"' "all"' "shows"' "min"' i);  	if (nextPage == null || !nextPage.Comments.IsAny ())  		break;  	// if the comment id exists then we already have all comments  	if (pagedItems.Any (c => c.Comment.Id == nextPage.Comments.Last ().Comment.Id))  		commentExists = true;  	// add the latest page to our previous requested comments  	pagedItems = pagedItems.Union (nextPage.Comments);  	if (commentExists || nextPage.Comments.Count () < nextPage.TotalItemsPerPage)  		break;  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedSeasonsFromTrakt,The following statement contains a magic number: if (onlineItems != null) {  	bool commentExists = false;  	var pagedItems = onlineItems.Comments;  	// check if we need to request more pages  	if (CommentedSeasons != null && pagedItems.IsAny ()) {  		// if the comment id exists then we already have all comments  		commentExists = CommentedSeasons.Any (c => c.Comment.Id == pagedItems.Last ().Comment.Id);  		// add the latest page to our previous cached comments  		pagedItems = pagedItems.Union (CommentedSeasons);  	}  	// get more pages  	if (!commentExists && pagedItems.IsAny () && onlineItems.Comments.Count () == onlineItems.TotalItemsPerPage) {  		for (int i = 2; i <= onlineItems.TotalPages; i++) {  			var nextPage = TraktAPI.TraktAPI.GetUsersComments ("me"' "all"' "seasons"' "min"' i);  			if (nextPage == null || !nextPage.Comments.IsAny ())  				break;  			// if the comment id exists then we already have all comments  			if (pagedItems.Any (c => c.Comment.Id == nextPage.Comments.Last ().Comment.Id))  				commentExists = true;  			// add the latest page to our previous requested comments  			pagedItems = pagedItems.Union (nextPage.Comments);  			if (commentExists || nextPage.Comments.Count () < nextPage.TotalItemsPerPage)  				break;  		}  	}  	// evaluate any union additions  	if (pagedItems != null)  		pagedItems = pagedItems.ToList ();  	_CommentedSeasons = pagedItems;  	// save to local file cache  	SaveFileCache (SeasonsCommentedFile' _CommentedSeasons.ToJSON ());  	// save new activity time for next time  	TraktSettings.LastSyncActivities.Seasons.Comment = lastSyncActivities.Seasons.Comment;  	return pagedItems == null ? null : pagedItems.OrderByDescending (c => c.Comment.CreatedAt);  } else {  	return null;  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedSeasonsFromTrakt,The following statement contains a magic number: if (!commentExists && pagedItems.IsAny () && onlineItems.Comments.Count () == onlineItems.TotalItemsPerPage) {  	for (int i = 2; i <= onlineItems.TotalPages; i++) {  		var nextPage = TraktAPI.TraktAPI.GetUsersComments ("me"' "all"' "seasons"' "min"' i);  		if (nextPage == null || !nextPage.Comments.IsAny ())  			break;  		// if the comment id exists then we already have all comments  		if (pagedItems.Any (c => c.Comment.Id == nextPage.Comments.Last ().Comment.Id))  			commentExists = true;  		// add the latest page to our previous requested comments  		pagedItems = pagedItems.Union (nextPage.Comments);  		if (commentExists || nextPage.Comments.Count () < nextPage.TotalItemsPerPage)  			break;  	}  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedSeasonsFromTrakt,The following statement contains a magic number: for (int i = 2; i <= onlineItems.TotalPages; i++) {  	var nextPage = TraktAPI.TraktAPI.GetUsersComments ("me"' "all"' "seasons"' "min"' i);  	if (nextPage == null || !nextPage.Comments.IsAny ())  		break;  	// if the comment id exists then we already have all comments  	if (pagedItems.Any (c => c.Comment.Id == nextPage.Comments.Last ().Comment.Id))  		commentExists = true;  	// add the latest page to our previous requested comments  	pagedItems = pagedItems.Union (nextPage.Comments);  	if (commentExists || nextPage.Comments.Count () < nextPage.TotalItemsPerPage)  		break;  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedMoviesFromTrakt,The following statement contains a magic number: if (onlineItems != null) {  	bool commentExists = false;  	var pagedItems = onlineItems.Comments;  	// check if we need to request more pages  	if (CommentedMovies != null && pagedItems.IsAny ()) {  		// if the comment id exists then we already have all comments  		commentExists = CommentedMovies.Any (c => c.Comment.Id == pagedItems.Last ().Comment.Id);  		// add the latest page to our previous cached comments  		pagedItems = pagedItems.Union (CommentedMovies);  	}  	// get more pages  	if (!commentExists && pagedItems.IsAny () && onlineItems.Comments.Count () == onlineItems.TotalItemsPerPage) {  		for (int i = 2; i <= onlineItems.TotalPages; i++) {  			var nextPage = TraktAPI.TraktAPI.GetUsersComments ("me"' "all"' "movies"' "min"' i);  			if (nextPage == null || !nextPage.Comments.IsAny ())  				break;  			// if the comment id exists then we already have all comments  			if (pagedItems.Any (c => c.Comment.Id == nextPage.Comments.Last ().Comment.Id))  				commentExists = true;  			// add the latest page to our previous requested comments  			pagedItems = pagedItems.Union (nextPage.Comments);  			if (commentExists || nextPage.Comments.Count () < nextPage.TotalItemsPerPage)  				break;  		}  	}  	// evaluate any union additions  	if (pagedItems != null)  		pagedItems = pagedItems.ToList ();  	_CommentedMovies = pagedItems;  	// save to local file cache  	SaveFileCache (MoviesCommentedFile' _CommentedMovies.ToJSON ());  	// save new activity time for next time  	TraktSettings.LastSyncActivities.Movies.Comment = lastSyncActivities.Movies.Comment;  	return pagedItems == null ? null : pagedItems.OrderByDescending (c => c.Comment.CreatedAt);  } else {  	return null;  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedMoviesFromTrakt,The following statement contains a magic number: if (!commentExists && pagedItems.IsAny () && onlineItems.Comments.Count () == onlineItems.TotalItemsPerPage) {  	for (int i = 2; i <= onlineItems.TotalPages; i++) {  		var nextPage = TraktAPI.TraktAPI.GetUsersComments ("me"' "all"' "movies"' "min"' i);  		if (nextPage == null || !nextPage.Comments.IsAny ())  			break;  		// if the comment id exists then we already have all comments  		if (pagedItems.Any (c => c.Comment.Id == nextPage.Comments.Last ().Comment.Id))  			commentExists = true;  		// add the latest page to our previous requested comments  		pagedItems = pagedItems.Union (nextPage.Comments);  		if (commentExists || nextPage.Comments.Count () < nextPage.TotalItemsPerPage)  			break;  	}  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedMoviesFromTrakt,The following statement contains a magic number: for (int i = 2; i <= onlineItems.TotalPages; i++) {  	var nextPage = TraktAPI.TraktAPI.GetUsersComments ("me"' "all"' "movies"' "min"' i);  	if (nextPage == null || !nextPage.Comments.IsAny ())  		break;  	// if the comment id exists then we already have all comments  	if (pagedItems.Any (c => c.Comment.Id == nextPage.Comments.Last ().Comment.Id))  		commentExists = true;  	// add the latest page to our previous requested comments  	pagedItems = pagedItems.Union (nextPage.Comments);  	if (commentExists || nextPage.Comments.Count () < nextPage.TotalItemsPerPage)  		break;  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedListsFromTrakt,The following statement contains a magic number: if (onlineItems != null) {  	bool commentExists = false;  	var pagedItems = onlineItems.Comments;  	// check if we need to request more pages  	if (CommentedLists != null && pagedItems.IsAny ()) {  		// if the comment id exists then we already have all comments  		commentExists = CommentedLists.Any (c => c.Comment.Id == pagedItems.Last ().Comment.Id);  		// add the latest page to our previous cached comments  		pagedItems = pagedItems.Union (CommentedLists);  	}  	// get more pages  	if (!commentExists && pagedItems.IsAny () && onlineItems.Comments.Count () == onlineItems.TotalItemsPerPage) {  		for (int i = 2; i <= onlineItems.TotalPages; i++) {  			var nextPage = TraktAPI.TraktAPI.GetUsersComments ("me"' "all"' "lists"' "min"' i);  			if (nextPage == null || !nextPage.Comments.IsAny ())  				break;  			// if the comment id exists then we already have all comments  			if (pagedItems.Any (c => c.Comment.Id == nextPage.Comments.Last ().Comment.Id))  				commentExists = true;  			// add the latest page to our previous requested comments  			pagedItems = pagedItems.Union (nextPage.Comments);  			if (commentExists || nextPage.Comments.Count () < nextPage.TotalItemsPerPage)  				break;  		}  	}  	// evaluate any union additions  	if (pagedItems != null)  		pagedItems = pagedItems.ToList ();  	_CommentedLists = pagedItems;  	// save to local file cache  	SaveFileCache (CustomListCommentedFile' _CommentedLists.ToJSON ());  	// save new activity time for next time  	TraktSettings.LastSyncActivities.Lists.Comment = lastSyncActivities.Lists.Comment;  	return pagedItems == null ? null : pagedItems.OrderByDescending (c => c.Comment.CreatedAt);  } else {  	return null;  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedListsFromTrakt,The following statement contains a magic number: if (!commentExists && pagedItems.IsAny () && onlineItems.Comments.Count () == onlineItems.TotalItemsPerPage) {  	for (int i = 2; i <= onlineItems.TotalPages; i++) {  		var nextPage = TraktAPI.TraktAPI.GetUsersComments ("me"' "all"' "lists"' "min"' i);  		if (nextPage == null || !nextPage.Comments.IsAny ())  			break;  		// if the comment id exists then we already have all comments  		if (pagedItems.Any (c => c.Comment.Id == nextPage.Comments.Last ().Comment.Id))  			commentExists = true;  		// add the latest page to our previous requested comments  		pagedItems = pagedItems.Union (nextPage.Comments);  		if (commentExists || nextPage.Comments.Count () < nextPage.TotalItemsPerPage)  			break;  	}  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetCommentedListsFromTrakt,The following statement contains a magic number: for (int i = 2; i <= onlineItems.TotalPages; i++) {  	var nextPage = TraktAPI.TraktAPI.GetUsersComments ("me"' "all"' "lists"' "min"' i);  	if (nextPage == null || !nextPage.Comments.IsAny ())  		break;  	// if the comment id exists then we already have all comments  	if (pagedItems.Any (c => c.Comment.Id == nextPage.Comments.Last ().Comment.Id))  		commentExists = true;  	// add the latest page to our previous requested comments  	pagedItems = pagedItems.Union (nextPage.Comments);  	if (commentExists || nextPage.Comments.Count () < nextPage.TotalItemsPerPage)  		break;  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetLikedCommentsFromTrakt,The following statement contains a magic number: if (onlineItems != null) {  	bool commentExists = false;  	var pagedItems = onlineItems.Likes;  	// check if we need to request more pages  	if (LikedComments != null && pagedItems.IsAny ()) {  		// if the comment id exists then we already have all liked comments  		commentExists = LikedComments.Any (l => l.Comment.Id == pagedItems.Last ().Comment.Id);  		// add the latest page to our previous cached comments  		pagedItems = pagedItems.Union (LikedComments);  	}  	// get more pages  	if (!commentExists && pagedItems.IsAny () && onlineItems.Likes.Count () == onlineItems.TotalItemsPerPage) {  		for (int i = 2; i <= onlineItems.TotalPages; i++) {  			var nextPage = TraktAPI.TraktAPI.GetLikedItems ("comments"' "min"' i);  			if (nextPage == null || !nextPage.Likes.IsAny ())  				break;  			// if the comment id exists then we already have all liked comments  			if (pagedItems.Any (c => c.Comment.Id == nextPage.Likes.Last ().Comment.Id))  				commentExists = true;  			// add the latest page to our previous requested liked comments  			pagedItems = pagedItems.Union (nextPage.Likes);  			if (commentExists || nextPage.Likes.Count () < nextPage.TotalItemsPerPage)  				break;  		}  	}  	// evaluate any union additions  	if (pagedItems != null)  		pagedItems = pagedItems.ToList ();  	_LikedComments = pagedItems;  	// save to local file cache  	SaveFileCache (CommentsLikedFile' _LikedComments.ToJSON ());  	// save new activity time for next time  	TraktSettings.LastSyncActivities.Comments.LikedAt = lastSyncActivities.Comments.LikedAt;  	return pagedItems == null ? null : pagedItems.OrderByDescending (l => l.LikedAt);  } else {  	return null;  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetLikedCommentsFromTrakt,The following statement contains a magic number: if (!commentExists && pagedItems.IsAny () && onlineItems.Likes.Count () == onlineItems.TotalItemsPerPage) {  	for (int i = 2; i <= onlineItems.TotalPages; i++) {  		var nextPage = TraktAPI.TraktAPI.GetLikedItems ("comments"' "min"' i);  		if (nextPage == null || !nextPage.Likes.IsAny ())  			break;  		// if the comment id exists then we already have all liked comments  		if (pagedItems.Any (c => c.Comment.Id == nextPage.Likes.Last ().Comment.Id))  			commentExists = true;  		// add the latest page to our previous requested liked comments  		pagedItems = pagedItems.Union (nextPage.Likes);  		if (commentExists || nextPage.Likes.Count () < nextPage.TotalItemsPerPage)  			break;  	}  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,GetLikedCommentsFromTrakt,The following statement contains a magic number: for (int i = 2; i <= onlineItems.TotalPages; i++) {  	var nextPage = TraktAPI.TraktAPI.GetLikedItems ("comments"' "min"' i);  	if (nextPage == null || !nextPage.Likes.IsAny ())  		break;  	// if the comment id exists then we already have all liked comments  	if (pagedItems.Any (c => c.Comment.Id == nextPage.Likes.Last ().Comment.Id))  		commentExists = true;  	// add the latest page to our previous requested liked comments  	pagedItems = pagedItems.Union (nextPage.Likes);  	if (commentExists || nextPage.Likes.Count () < nextPage.TotalItemsPerPage)  		break;  }  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,StatsMoviesLoved,The following statement contains a magic number: return RatedMovies.Where (m => m.Rating >= 6).Count ();  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,StatsMoviesHated,The following statement contains a magic number: return RatedMovies.Where (m => m.Rating < 6).Count ();  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,StatsShowsLoved,The following statement contains a magic number: return RatedShows.Where (s => s.Rating >= 6).Count ();  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,StatsShowsHated,The following statement contains a magic number: return RatedShows.Where (s => s.Rating < 6).Count ();  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,StatsEpisodesLoved,The following statement contains a magic number: return RatedEpisodes.Where (e => e.Rating >= 6).Count ();  
Magic Number,TraktPlugin,TraktCache,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cache\TraktCache.cs,StatsEpisodesHated,The following statement contains a magic number: return RatedEpisodes.Where (e => e.Rating < 6).Count ();  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetFacade,The following statement contains a magic number: lock (lockObject) {  	int i = 0;  	GUIFacadeControl facade = null;  	// window init message does not work unless overridden from a guiwindow class  	// so we need to be ensured that the window is fully loaded  	// before we can get reference to a skin control  	try {  		bool bReady;  		do {  			// get current window  			var window = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow);  			// get facade control  			facade = window.GetControl (facadeID) as GUIFacadeControl;  			// ensure we're ready for action  			if (!window.WindowLoaded || facade == null) {  				bReady = false;  				Thread.Sleep (100);  			} else {  				bReady = true;  			}  			i++;  		} while (i < 25 && !bReady);  	} catch (Exception ex) {  		TraktLogger.Error ("MediaPortal failed to get the active control");  		TraktLogger.Error (ex.StackTrace);  	}  	if (facade == null) {  		TraktLogger.Debug ("Unable to find facade control [id:{0}]' check that trakt skin settings are correctly defined!"' facadeID.ToString ());  		// remove windows from future checks  		foreach (var tc in TraktSkinSettings.DashboardTrendingCollection) {  			tc.MovieWindows.RemoveAll (w => w == GUIWindowManager.ActiveWindow.ToString ());  			tc.TVShowWindows.RemoveAll (w => w == GUIWindowManager.ActiveWindow.ToString ());  		}  		TraktSkinSettings.DashBoardActivityWindows.RemoveAll (d => d == GUIWindowManager.ActiveWindow.ToString ());  	}  	return facade;  }  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetFacade,The following statement contains a magic number: lock (lockObject) {  	int i = 0;  	GUIFacadeControl facade = null;  	// window init message does not work unless overridden from a guiwindow class  	// so we need to be ensured that the window is fully loaded  	// before we can get reference to a skin control  	try {  		bool bReady;  		do {  			// get current window  			var window = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow);  			// get facade control  			facade = window.GetControl (facadeID) as GUIFacadeControl;  			// ensure we're ready for action  			if (!window.WindowLoaded || facade == null) {  				bReady = false;  				Thread.Sleep (100);  			} else {  				bReady = true;  			}  			i++;  		} while (i < 25 && !bReady);  	} catch (Exception ex) {  		TraktLogger.Error ("MediaPortal failed to get the active control");  		TraktLogger.Error (ex.StackTrace);  	}  	if (facade == null) {  		TraktLogger.Debug ("Unable to find facade control [id:{0}]' check that trakt skin settings are correctly defined!"' facadeID.ToString ());  		// remove windows from future checks  		foreach (var tc in TraktSkinSettings.DashboardTrendingCollection) {  			tc.MovieWindows.RemoveAll (w => w == GUIWindowManager.ActiveWindow.ToString ());  			tc.TVShowWindows.RemoveAll (w => w == GUIWindowManager.ActiveWindow.ToString ());  		}  		TraktSkinSettings.DashBoardActivityWindows.RemoveAll (d => d == GUIWindowManager.ActiveWindow.ToString ());  	}  	return facade;  }  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetFacade,The following statement contains a magic number: try {  	bool bReady;  	do {  		// get current window  		var window = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow);  		// get facade control  		facade = window.GetControl (facadeID) as GUIFacadeControl;  		// ensure we're ready for action  		if (!window.WindowLoaded || facade == null) {  			bReady = false;  			Thread.Sleep (100);  		} else {  			bReady = true;  		}  		i++;  	} while (i < 25 && !bReady);  } catch (Exception ex) {  	TraktLogger.Error ("MediaPortal failed to get the active control");  	TraktLogger.Error (ex.StackTrace);  }  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetFacade,The following statement contains a magic number: try {  	bool bReady;  	do {  		// get current window  		var window = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow);  		// get facade control  		facade = window.GetControl (facadeID) as GUIFacadeControl;  		// ensure we're ready for action  		if (!window.WindowLoaded || facade == null) {  			bReady = false;  			Thread.Sleep (100);  		} else {  			bReady = true;  		}  		i++;  	} while (i < 25 && !bReady);  } catch (Exception ex) {  	TraktLogger.Error ("MediaPortal failed to get the active control");  	TraktLogger.Error (ex.StackTrace);  }  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetFacade,The following statement contains a magic number: do {  	// get current window  	var window = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow);  	// get facade control  	facade = window.GetControl (facadeID) as GUIFacadeControl;  	// ensure we're ready for action  	if (!window.WindowLoaded || facade == null) {  		bReady = false;  		Thread.Sleep (100);  	} else {  		bReady = true;  	}  	i++;  } while (i < 25 && !bReady);  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetFacade,The following statement contains a magic number: do {  	// get current window  	var window = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow);  	// get facade control  	facade = window.GetControl (facadeID) as GUIFacadeControl;  	// ensure we're ready for action  	if (!window.WindowLoaded || facade == null) {  		bReady = false;  		Thread.Sleep (100);  	} else {  		bReady = true;  	}  	i++;  } while (i < 25 && !bReady);  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetFacade,The following statement contains a magic number: if (!window.WindowLoaded || facade == null) {  	bReady = false;  	Thread.Sleep (100);  } else {  	bReady = true;  }  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetFacade,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishActivityProperties,The following statement contains a magic number: for (int i = 0; i < maxItems; i++) {  	GUIUtils.SetProperty (string.Format ("#Trakt.Activity.{0}.Action"' i)' activities [i].Action);  	GUIUtils.SetProperty (string.Format ("#Trakt.Activity.{0}.Type"' i)' activities [i].Type);  	GUIUtils.SetProperty (string.Format ("#Trakt.Activity.{0}.ActivityPinIcon"' i)' GetActivityImage (activities [i]));  	GUIUtils.SetProperty (string.Format ("#Trakt.Activity.{0}.ActivityPinIconNoExt"' i)' GetActivityImage (activities [i]).Replace (".png"' string.Empty));  	GUIUtils.SetProperty (string.Format ("#Trakt.Activity.{0}.Title"' i)' GUICommon.GetActivityItemName (activities [i]));  	GUIUtils.SetProperty (string.Format ("#Trakt.Activity.{0}.Time"' i)' activities [i].Timestamp.FromISO8601 ().ToLocalTime ().ToShortTimeString ());  	GUIUtils.SetProperty (string.Format ("#Trakt.Activity.{0}.Day"' i)' activities [i].Timestamp.FromISO8601 ().ToLocalTime ().DayOfWeek.ToString ().Substring (0' 3));  	GUIUtils.SetProperty (string.Format ("#Trakt.Activity.{0}.Shout"' i)' GetActivityShoutText (activities [i]));  }  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishActivityProperties,The following statement contains a magic number: GUIUtils.SetProperty (string.Format ("#Trakt.Activity.{0}.Day"' i)' activities [i].Timestamp.FromISO8601 ().ToLocalTime ().DayOfWeek.ToString ().Substring (0' 3));  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The following statement contains a magic number: for (int i = 0; i < maxItems; i++) {  	var trendingItem = trendingList [i];  	if (trendingItem == null || trendingItem.Movie == null)  		continue;  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Watchers"' i)' trendingItem.Watchers.ToString ());  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Watchers.Extra"' i)' trendingItem.Watchers > 1 ? string.Format (Translation.PeopleWatching' trendingItem.Watchers) : Translation.PersonWatching);  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Id"' i)' trendingItem.Movie.Ids.Trakt);  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.TmdbId"' i)' trendingItem.Movie.Ids.Tmdb);  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.ImdbId"' i)' trendingItem.Movie.Ids.Imdb);  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Certification"' i)' trendingItem.Movie.Certification);  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Language"' i)' Translation.GetLanguageFromISOCode (trendingItem.Movie.Language));  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Overview"' i)' string.IsNullOrEmpty (trendingItem.Movie.Overview) ? Translation.NoMovieSummary : trendingItem.Movie.Overview);  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Released"' i)' trendingItem.Movie.Released.FromISO8601 ().ToShortDateString ());  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Runtime"' i)' trendingItem.Movie.Runtime.ToString ());  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Tagline"' i)' trendingItem.Movie.Tagline);  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Title"' i)' trendingItem.Movie.Title);  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Trailer"' i)' trendingItem.Movie.Trailer);  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Url"' i)' string.Format ("http://trakt.tv/movies/{0}"' trendingItem.Movie.Ids.Slug));  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Year"' i)' trendingItem.Movie.Year.ToString ());  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Genres"' i)' string.Join ("' "' TraktGenres.Translate (trendingItem.Movie.Genres)));  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.InCollection"' i)' trendingItem.Movie.IsCollected ().ToString ());  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.InWatchList"' i)' trendingItem.Movie.IsWatchlisted ().ToString ());  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Plays"' i)' trendingItem.Movie.Plays ());  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Watched"' i)' trendingItem.Movie.IsWatched ().ToString ());  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Rating"' i)' trendingItem.Movie.UserRating ());  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Ratings.Votes"' i)' trendingItem.Movie.Votes);  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Ratings.Icon"' i)' (trendingItem.Movie.Rating >= 6) ? "love" : "hate");  	GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Ratings.Percentage"' i)' trendingItem.Movie.Rating.ToPercentage ());  	var images = TmdbCache.GetMovieImages (trendingItem.Movie.Ids.Tmdb);  	if (images != null) {  		GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.PosterImageFilename"' i)' TmdbCache.GetMoviePosterFilename (images));  		GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.FanartImageFilename"' i)' TmdbCache.GetMovieBackdropFilename (images));  	}  }  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishMovieProperties,The following statement contains a magic number: GUICommon.SetProperty (string.Format ("#Trakt.Movie.{0}.Ratings.Icon"' i)' (trendingItem.Movie.Rating >= 6) ? "love" : "hate");  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The following statement contains a magic number: for (int i = 0; i < maxItems; i++) {  	var trendingItem = trendingList [i];  	if (trendingItem == null || trendingItem.Show == null)  		continue;  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Watchers"' i)' trendingItem.Watchers.ToString ());  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Watchers.Extra"' i)' trendingItem.Watchers > 1 ? string.Format (Translation.PeopleWatching' trendingItem.Watchers) : Translation.PersonWatching);  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Id"' i)' trendingItem.Show.Ids.Imdb);  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.ImdbId"' i)' trendingItem.Show.Ids.Imdb);  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.TmdbId"' i)' trendingItem.Show.Ids.Tmdb);  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.TvdbId"' i)' trendingItem.Show.Ids.Tvdb);  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.TvRageId"' i)' trendingItem.Show.Ids.TvRage);  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Title"' i)' trendingItem.Show.Title);  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Url"' i)' string.Format ("http://trakt.tv/shows/{0}"' trendingItem.Show.Ids.Slug));  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.AirDay"' i)' trendingItem.Show.Airs.Day);  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.AirTime"' i)' trendingItem.Show.Airs.Time);  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.AirTimezone"' i)' trendingItem.Show.Airs.Timezone);  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Certification"' i)' trendingItem.Show.Certification);  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Country"' i)' trendingItem.Show.Country);  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.FirstAired"' i)' trendingItem.Show.FirstAired.FromISO8601 ().ToShortDateString ());  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Network"' i)' trendingItem.Show.Network);  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Overview"' i)' string.IsNullOrEmpty (trendingItem.Show.Overview) ? Translation.NoShowSummary : trendingItem.Show.Overview);  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Runtime"' i)' trendingItem.Show.Runtime.ToString ());  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Year"' i)' trendingItem.Show.Year.ToString ());  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Genres"' i)' string.Join ("' "' TraktGenres.Translate (trendingItem.Show.Genres)));  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.InWatchList"' i)' trendingItem.Show.IsWatchlisted ());  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Watched"' i)' trendingItem.Show.IsWatched ());  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.InCollection"' i)' trendingItem.Show.IsCollected ());  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Plays"' i)' trendingItem.Show.Plays ());  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Rating"' i)' trendingItem.Show.UserRating ());  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Ratings.Votes"' i)' trendingItem.Show.Votes);  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Ratings.Icon"' i)' (trendingItem.Show.Rating >= 6) ? "love" : "hate");  	GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Ratings.Percentage"' i)' trendingItem.Show.Rating.ToPercentage ());  	var images = TmdbCache.GetShowImages (trendingItem.Show.Ids.Tmdb);  	if (images != null) {  		GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.PosterImageFilename"' i)' TmdbCache.GetShowPosterFilename (images));  		GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.FanartImageFilename"' i)' TmdbCache.GetShowBackdropFilename (images));  	}  }  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PublishShowProperties,The following statement contains a magic number: GUICommon.SetProperty (string.Format ("#Trakt.Show.{0}.Ratings.Icon"' i)' (trendingItem.Show.Rating >= 6) ? "love" : "hate");  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivityImage,The following statement contains a magic number: switch (action) {  case ActivityAction.checkin:  case ActivityAction.watching:  case ActivityAction.pause:  	imageFilename = "traktActivityWatching.png";  	break;  case ActivityAction.seen:  case ActivityAction.scrobble:  	imageFilename = "traktActivityWatched.png";  	break;  case ActivityAction.collection:  	imageFilename = "traktActivityCollected.png";  	break;  case ActivityAction.rating:  	imageFilename = activity.Rating > 5 ? "traktActivityLove.png" : "traktActivityHate.png";  	break;  case ActivityAction.watchlist:  	imageFilename = "traktActivityWatchlist.png";  	break;  case ActivityAction.shout:  case ActivityAction.review:  	imageFilename = "traktActivityShout.png";  	break;  case ActivityAction.item_added:  case ActivityAction.created:  case ActivityAction.updated:  	imageFilename = "traktActivityList.png";  	break;  case ActivityAction.like:  	imageFilename = "traktActivityLike.png";  	break;  }  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivityImage,The following statement contains a magic number: imageFilename = activity.Rating > 5 ? "traktActivityLove.png" : "traktActivityHate.png";  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetTrendingMovies,The following statement contains a magic number: if (PreviousTrendingMovies == null || TraktSettings.DashboardTrendingPollInterval <= timeSinceLastUpdate) {  	TraktLogger.Debug ("Getting current list of movies trending from trakt.tv");  	var trendingResult = TraktAPI.TraktAPI.GetTrendingMovies (1' TraktSettings.FilterTrendingOnDashboard ? 100 : TraktSkinSettings.MaxTrendingItems);  	if (trendingResult != null && trendingResult.Movies.Count () > 0) {  		LastTrendingMovieUpdate = DateTime.Now;  		PreviousTrendingMovies = trendingResult.Movies;  	}  } else {  	TraktLogger.Debug ("Getting cached list of movies trending");  	isCached = true;  	// update start interval  	int startInterval = (int)(TraktSettings.DashboardTrendingPollInterval - timeSinceLastUpdate);  	TrendingMoviesTimer.Change (startInterval' TraktSettings.DashboardTrendingPollInterval);  }  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetTrendingShows,The following statement contains a magic number: if (PreviousTrendingShows == null || TraktSettings.DashboardTrendingPollInterval <= timeSinceLastUpdate) {  	TraktLogger.Debug ("Getting current list of tv shows trending from trakt.tv");  	var trendingItems = TraktAPI.TraktAPI.GetTrendingShows (1' TraktSettings.FilterTrendingOnDashboard ? 100 : TraktSkinSettings.MaxTrendingItems);  	if (trendingItems != null && trendingItems.Shows.Count () > 0) {  		LastTrendingShowUpdate = DateTime.Now;  		PreviousTrendingShows = trendingItems.Shows;  	}  } else {  	TraktLogger.Debug ("Getting cached list of tv shows trending");  	isCached = true;  	// update start interval  	int startInterval = (int)(TraktSettings.DashboardTrendingPollInterval - timeSinceLastUpdate);  	TrendingShowsTimer.Change (startInterval' TraktSettings.DashboardTrendingPollInterval);  }  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_CLICKED:  	if (message.Param1 != 7)  		return;  	// mouse click' enter key' remote ok' only  	if (message.SenderControlId == (int)TraktDashboardControls.ActivityFacade) {  		var activityFacade = GetFacade ((int)TraktDashboardControls.ActivityFacade);  		if (activityFacade == null)  			return;  		var activity = activityFacade.SelectedListItem.TVTag as TraktActivity.Activity;  		if (activity == null || string.IsNullOrEmpty (activity.Action) || string.IsNullOrEmpty (activity.Type))  			return;  		var action = (ActivityAction)Enum.Parse (typeof(ActivityAction)' activity.Action);  		var type = (ActivityType)Enum.Parse (typeof(ActivityType)' activity.Type);  		switch (action) {  		case ActivityAction.review:  		case ActivityAction.shout:  			// view shout in shouts window  			ViewShout (activity);  			break;  		case ActivityAction.item_added:  		case ActivityAction.updated:  			// load users list  			GUIListItems.CurrentList = activity.List;  			GUIListItems.CurrentUser = activity.User.Username;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CustomListItems);  			break;  		case ActivityAction.created:  			// load lists menu  			GUILists.CurrentUser = activity.User.Username;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CustomLists);  			break;  		case ActivityAction.watchlist:  			// load users watchlist  			if (type == ActivityType.movie) {  				GUIWatchListMovies.CurrentUser = activity.User.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListMovies);  			} else if (type == ActivityType.show) {  				GUIWatchListShows.CurrentUser = activity.User.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListShows);  			} else {  				GUIWatchListEpisodes.CurrentUser = activity.User.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListEpisodes);  			}  			break;  		case ActivityAction.like:  			if (type == ActivityType.comment) {  				// view comment  				GUIUtils.ShowTextDialog (Translation.Comment' activity.Shout.Text);  			} else if (type == ActivityType.list) {  				// load the liked list  				if (activity.List.User != null) {  					GUIListItems.CurrentList = activity.List;  					GUIListItems.CurrentUser = activity.List.User.Username;  					GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CustomListItems);  				} else {  					TraktLogger.Warning ("No user associated with liked list. ID = '{0}'' Name = '{1}'' Privacy = '{2}'"' activity.List.Ids.Trakt' activity.List.Name' activity.List.Privacy);  				}  			}  			break;  		default:  			PlayActivityItem (true);  			break;  		}  	}  	if (message.SenderControlId == (int)TraktDashboardControls.TrendingShowsFacade) {  		if (TraktSettings.EnableJumpToForTVShows) {  			PlayShow (true);  		} else {  			var facade = GetFacade ((int)TraktDashboardControls.TrendingShowsFacade);  			if (facade == null)  				return;  			var trendingItem = facade.SelectedListItem.TVTag as TraktShowTrending;  			if (trendingItem == null)  				return;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' trendingItem.Show.ToJSON ());  		}  	}  	if (message.SenderControlId == (int)TraktDashboardControls.TrendingMoviesFacade) {  		PlayMovie (true);  	}  	break;  case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:  	// doesn't work' only if overridden from a guiwindow class  	break;  default:  	break;  }  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GUIWindowManager_Receivers,The following statement contains a magic number: if (message.Param1 != 7)  	return;  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GUIWindowManager_OnNewAction,The following statement contains a magic number: switch (action.wID) {  case Action.ActionType.ACTION_CONTEXT_MENU:  	if (activeWindow.GetFocusControlId () == (int)TraktDashboardControls.ActivityFacade) {  		TrendingContextMenuIsActive = true;  		ShowActivityContextMenu ();  	} else if (activeWindow.GetFocusControlId () == (int)TraktDashboardControls.TrendingMoviesFacade) {  		TrendingContextMenuIsActive = true;  		ShowTrendingMoviesContextMenu ();  	} else if (activeWindow.GetFocusControlId () == (int)TraktDashboardControls.TrendingShowsFacade) {  		TrendingContextMenuIsActive = true;  		ShowTrendingShowsContextMenu ();  	}  	TrendingContextMenuIsActive = false;  	break;  case Action.ActionType.ACTION_PLAY:  case Action.ActionType.ACTION_MUSIC_PLAY:  	if (activeWindow.GetFocusControlId () == (int)TraktDashboardControls.ActivityFacade) {  		PlayActivityItem (false);  	}  	if (activeWindow.GetFocusControlId () == (int)TraktDashboardControls.TrendingShowsFacade) {  		PlayShow (false);  	}  	if (activeWindow.GetFocusControlId () == (int)TraktDashboardControls.TrendingMoviesFacade) {  		PlayMovie (false);  	}  	break;  case Action.ActionType.ACTION_MOVE_DOWN:  	// handle ondown for filmstrips as mediaportal skin navigation for ondown is broken  	// issue has been resolved in MP 1.5.0 so only do it for earlier releases  	if (TraktSettings.MPVersion < new Version (1' 5' 0' 0)) {  		if (!TrendingContextMenuIsActive && activeWindow.GetFocusControlId () == (int)TraktDashboardControls.TrendingShowsFacade) {  			var control = GetFacade (activeWindow.GetFocusControlId ());  			if (control == null)  				return;  			if (control.CurrentLayout != GUIFacadeControl.Layout.Filmstrip)  				return;  			// set focus on correct control  			GUIControl.FocusControl (GUIWindowManager.ActiveWindow' (int)TraktDashboardControls.TrendingMoviesFacade);  		} else if (!TrendingContextMenuIsActive && activeWindow.GetFocusControlId () == (int)TraktDashboardControls.TrendingMoviesFacade) {  			var control = GetFacade (activeWindow.GetFocusControlId ());  			if (control == null)  				return;  			if (control.CurrentLayout != GUIFacadeControl.Layout.Filmstrip)  				return;  			// set focus on correct control  			GUIControl.FocusControl (GUIWindowManager.ActiveWindow' (int)TraktDashboardControls.ActivityFacade);  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GUIWindowManager_OnNewAction,The following statement contains a magic number: if (TraktSettings.MPVersion < new Version (1' 5' 0' 0)) {  	if (!TrendingContextMenuIsActive && activeWindow.GetFocusControlId () == (int)TraktDashboardControls.TrendingShowsFacade) {  		var control = GetFacade (activeWindow.GetFocusControlId ());  		if (control == null)  			return;  		if (control.CurrentLayout != GUIFacadeControl.Layout.Filmstrip)  			return;  		// set focus on correct control  		GUIControl.FocusControl (GUIWindowManager.ActiveWindow' (int)TraktDashboardControls.TrendingMoviesFacade);  	} else if (!TrendingContextMenuIsActive && activeWindow.GetFocusControlId () == (int)TraktDashboardControls.TrendingMoviesFacade) {  		var control = GetFacade (activeWindow.GetFocusControlId ());  		if (control == null)  			return;  		if (control.CurrentLayout != GUIFacadeControl.Layout.Filmstrip)  			return;  		// set focus on correct control  		GUIControl.FocusControl (GUIWindowManager.ActiveWindow' (int)TraktDashboardControls.ActivityFacade);  	}  }  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,Init,The following statement contains a magic number: if (TraktSkinSettings.HasDashboardStatistics) {  	StatisticsTimer = new Timer (new TimerCallback (o => {  		GetStatistics ();  	})' null' 3000' 3600000);  }  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,Init,The following statement contains a magic number: if (TraktSkinSettings.HasDashboardStatistics) {  	StatisticsTimer = new Timer (new TimerCallback (o => {  		GetStatistics ();  	})' null' 3000' 3600000);  }  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,Init,The following statement contains a magic number: StatisticsTimer = new Timer (new TimerCallback (o => {  	GetStatistics ();  })' null' 3000' 3600000);  
Magic Number,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,Init,The following statement contains a magic number: StatisticsTimer = new Timer (new TimerCallback (o => {  	GetStatistics ();  })' null' 3000' 3600000);  
Magic Number,TraktPlugin,TraktLists,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLists.cs,GetListDetailsFromUser,The following statement contains a magic number: if (list.Privacy == "friends") {  	selectedItem = 2;  	item.Selected = true;  }  
Magic Number,TraktPlugin,TraktLists,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLists.cs,GetListDetailsFromUser,The following statement contains a magic number: selectedItem = 2;  
Magic Number,TraktPlugin,TraktLogger,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,TraktLogger,The following statement contains a magic number: TraktSettings.LogLevel = 2;  
Magic Number,TraktPlugin,TraktLogger,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,Info,The following statement contains a magic number: if (TraktSettings.LogLevel >= 2)  	WriteToFile (String.Format (CreatePrefix ()' "INFO"' log));  
Magic Number,TraktPlugin,TraktLogger,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,Debug,The following statement contains a magic number: if (TraktSettings.LogLevel >= 3)  	WriteToFile (String.Format (CreatePrefix ()' "DEBG"' log));  
Magic Number,TraktPlugin,TraktLogger,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,CreatePrefix,The following statement contains a magic number: return DateTime.Now.ToString ("yyyy-MM-dd HH:mm:ss.fff") + " [{0}] " + String.Format ("[{0}][{1}]"' Thread.CurrentThread.Name' Thread.CurrentThread.ManagedThreadId.ToString ().PadLeft (2' '0')) + ": {1}";  
Magic Number,TraktPlugin,TraktLogger,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,TraktAPI_OnDataReceived,The following statement contains a magic number: if (TraktSettings.LogLevel >= 3) {  	string headers = string.Empty;  	foreach (string key in webResponse.Headers.AllKeys) {  		headers += string.Format ("{0}: {1}' "' key' webResponse.Headers [key]);  	}  	TraktLogger.Debug ("Response: {0}' Headers: {{{1}}}"' response ?? "null"' headers.TrimEnd (new char[] {  		''''  		' '  	}));  }  
Magic Number,TraktPlugin,TraktLogger,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,TraktAPI_OnLatency,The following statement contains a magic number: if (headers.Contains ("X-Runtime")) {  	double.TryParse (webResponse.Headers ["X-Runtime"]' out serverRuntime);  	// convert to milliseconds from seconds  	serverRuntime *= 1000.0;  }  
Magic Number,TraktPlugin,TraktLogger,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,TraktAPI_OnLatency,The following statement contains a magic number: serverRuntime *= 1000.0;  
Magic Number,TraktPlugin,TraktLogger,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,TmdbAPI_OnDataReceived,The following statement contains a magic number: if (TraktSettings.LogLevel >= 3) {  	string headers = string.Empty;  	foreach (string key in webResponse.Headers.AllKeys) {  		headers += string.Format ("{0}: {1}' "' key' webResponse.Headers [key]);  	}  	TraktLogger.Debug ("Response: {0}' Headers: {{{1}}}"' response ?? "null"' headers.TrimEnd (new char[] {  		''''  		' '  	}));  }  
Magic Number,TraktPlugin,TraktLogger,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,LogTraktResponse,The following statement contains a magic number: try {  	// only log the response if we don't have debug logging enabled  	// we already log all responses in debug level  	if (TraktSettings.LogLevel < 3) {  		if ((response is TraktSyncResponse)) {  			TraktLogger.Info ("Sync Response: {0}"' (response as TraktSyncResponse).ToJSON ());  		} else if ((response is TraktScrobbleResponse)) {  			// status code will be greater than 0 if we caught an error  			// we already log errors so we can supress the scrobble log result  			var scrobbleResponse = response as TraktScrobbleResponse;  			if (scrobbleResponse != null && scrobbleResponse.Code == 0) {  				TraktLogger.Info ("Scrobble Response: {0}"' scrobbleResponse.ToJSON ());  			}  		}  	}  	return true;  } catch (Exception) {  	TraktLogger.Info ("Response: Failed to interpret response from server");  	return false;  }  
Magic Number,TraktPlugin,TraktLogger,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktLogger.cs,LogTraktResponse,The following statement contains a magic number: if (TraktSettings.LogLevel < 3) {  	if ((response is TraktSyncResponse)) {  		TraktLogger.Info ("Sync Response: {0}"' (response as TraktSyncResponse).ToJSON ());  	} else if ((response is TraktScrobbleResponse)) {  		// status code will be greater than 0 if we caught an error  		// we already log errors so we can supress the scrobble log result  		var scrobbleResponse = response as TraktScrobbleResponse;  		if (scrobbleResponse != null && scrobbleResponse.Code == 0) {  			TraktLogger.Info ("Scrobble Response: {0}"' scrobbleResponse.ToJSON ());  		}  	}  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,Init,The following statement contains a magic number: syncLibraryTimer = new Timer (new TimerCallback (o => {  	SyncLibrary ();  })' null' TraktSettings.SyncStartDelay' TraktSettings.SyncTimerLength * 3600000);  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,StartSync,The following statement contains a magic number: ChangeSyncTimer (0' TraktSettings.SyncTimerLength * 3600000);  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: if (!ConnectionChecked) {  	ConnectionChecked = true;  	var checkStatus = new Thread (() => {  		if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  			TraktSettings.AccountStatus = ConnectionState.Pending;  			// Re-Check and Notify  			if (TraktSettings.AccountStatus == ConnectionState.UnAuthorised) {  				Thread.Sleep (10000);  				GUIUtils.ShowNotifyDialog (Translation.Error' Translation.UnAuthorized);  			} else if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  				Thread.Sleep (10000);  				GUIUtils.ShowNotifyDialog (Translation.Error' Translation.LoginFailedServerError);  			}  		} else {  			// check if login password is set - we cleared this on v2 API upgrade  			// but left the username in tact  			if (!string.IsNullOrEmpty (TraktSettings.Username) && string.IsNullOrEmpty (TraktSettings.Password)) {  				Thread.Sleep (10000);  				if (GUIUtils.ShowYesNoDialog (GUIUtils.PluginName ()' Translation.SetPassword' true)) {  					string password = string.Empty;  					if (GUIUtils.GetStringFromKeyboard (ref password' true)) {  						// update password  						TraktSettings.Password = password;  						TraktSettings.AccountStatus = ConnectionState.Pending;  						// try login  						if (TraktSettings.AccountStatus == ConnectionState.UnAuthorised) {  							// incorrect login details provided' guide user to setting so it can be changed  							GUIUtils.ShowNotifyDialog (Translation.Error' Translation.UnAuthorized);  							GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.SettingsAccount);  						} else if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  							GUIUtils.ShowNotifyDialog (Translation.Error' Translation.LoginFailedServerError);  						} else if (TraktSettings.AccountStatus == ConnectionState.Connected) {  							// save settings now so password persists incase of bad shutdown  							TraktSettings.SaveSettings (false);  							// success' start a sync such that user data can be cached  							SyncLibrary ();  						}  					}  				}  			}  		}  	}) {  		IsBackground = true'  		Name = "CheckConnection"  	};  	checkStatus.Start ();  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: if (!ConnectionChecked) {  	ConnectionChecked = true;  	var checkStatus = new Thread (() => {  		if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  			TraktSettings.AccountStatus = ConnectionState.Pending;  			// Re-Check and Notify  			if (TraktSettings.AccountStatus == ConnectionState.UnAuthorised) {  				Thread.Sleep (10000);  				GUIUtils.ShowNotifyDialog (Translation.Error' Translation.UnAuthorized);  			} else if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  				Thread.Sleep (10000);  				GUIUtils.ShowNotifyDialog (Translation.Error' Translation.LoginFailedServerError);  			}  		} else {  			// check if login password is set - we cleared this on v2 API upgrade  			// but left the username in tact  			if (!string.IsNullOrEmpty (TraktSettings.Username) && string.IsNullOrEmpty (TraktSettings.Password)) {  				Thread.Sleep (10000);  				if (GUIUtils.ShowYesNoDialog (GUIUtils.PluginName ()' Translation.SetPassword' true)) {  					string password = string.Empty;  					if (GUIUtils.GetStringFromKeyboard (ref password' true)) {  						// update password  						TraktSettings.Password = password;  						TraktSettings.AccountStatus = ConnectionState.Pending;  						// try login  						if (TraktSettings.AccountStatus == ConnectionState.UnAuthorised) {  							// incorrect login details provided' guide user to setting so it can be changed  							GUIUtils.ShowNotifyDialog (Translation.Error' Translation.UnAuthorized);  							GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.SettingsAccount);  						} else if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  							GUIUtils.ShowNotifyDialog (Translation.Error' Translation.LoginFailedServerError);  						} else if (TraktSettings.AccountStatus == ConnectionState.Connected) {  							// save settings now so password persists incase of bad shutdown  							TraktSettings.SaveSettings (false);  							// success' start a sync such that user data can be cached  							SyncLibrary ();  						}  					}  				}  			}  		}  	}) {  		IsBackground = true'  		Name = "CheckConnection"  	};  	checkStatus.Start ();  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: if (!ConnectionChecked) {  	ConnectionChecked = true;  	var checkStatus = new Thread (() => {  		if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  			TraktSettings.AccountStatus = ConnectionState.Pending;  			// Re-Check and Notify  			if (TraktSettings.AccountStatus == ConnectionState.UnAuthorised) {  				Thread.Sleep (10000);  				GUIUtils.ShowNotifyDialog (Translation.Error' Translation.UnAuthorized);  			} else if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  				Thread.Sleep (10000);  				GUIUtils.ShowNotifyDialog (Translation.Error' Translation.LoginFailedServerError);  			}  		} else {  			// check if login password is set - we cleared this on v2 API upgrade  			// but left the username in tact  			if (!string.IsNullOrEmpty (TraktSettings.Username) && string.IsNullOrEmpty (TraktSettings.Password)) {  				Thread.Sleep (10000);  				if (GUIUtils.ShowYesNoDialog (GUIUtils.PluginName ()' Translation.SetPassword' true)) {  					string password = string.Empty;  					if (GUIUtils.GetStringFromKeyboard (ref password' true)) {  						// update password  						TraktSettings.Password = password;  						TraktSettings.AccountStatus = ConnectionState.Pending;  						// try login  						if (TraktSettings.AccountStatus == ConnectionState.UnAuthorised) {  							// incorrect login details provided' guide user to setting so it can be changed  							GUIUtils.ShowNotifyDialog (Translation.Error' Translation.UnAuthorized);  							GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.SettingsAccount);  						} else if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  							GUIUtils.ShowNotifyDialog (Translation.Error' Translation.LoginFailedServerError);  						} else if (TraktSettings.AccountStatus == ConnectionState.Connected) {  							// save settings now so password persists incase of bad shutdown  							TraktSettings.SaveSettings (false);  							// success' start a sync such that user data can be cached  							SyncLibrary ();  						}  					}  				}  			}  		}  	}) {  		IsBackground = true'  		Name = "CheckConnection"  	};  	checkStatus.Start ();  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  	TraktSettings.AccountStatus = ConnectionState.Pending;  	// Re-Check and Notify  	if (TraktSettings.AccountStatus == ConnectionState.UnAuthorised) {  		Thread.Sleep (10000);  		GUIUtils.ShowNotifyDialog (Translation.Error' Translation.UnAuthorized);  	} else if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  		Thread.Sleep (10000);  		GUIUtils.ShowNotifyDialog (Translation.Error' Translation.LoginFailedServerError);  	}  } else {  	// check if login password is set - we cleared this on v2 API upgrade  	// but left the username in tact  	if (!string.IsNullOrEmpty (TraktSettings.Username) && string.IsNullOrEmpty (TraktSettings.Password)) {  		Thread.Sleep (10000);  		if (GUIUtils.ShowYesNoDialog (GUIUtils.PluginName ()' Translation.SetPassword' true)) {  			string password = string.Empty;  			if (GUIUtils.GetStringFromKeyboard (ref password' true)) {  				// update password  				TraktSettings.Password = password;  				TraktSettings.AccountStatus = ConnectionState.Pending;  				// try login  				if (TraktSettings.AccountStatus == ConnectionState.UnAuthorised) {  					// incorrect login details provided' guide user to setting so it can be changed  					GUIUtils.ShowNotifyDialog (Translation.Error' Translation.UnAuthorized);  					GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.SettingsAccount);  				} else if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  					GUIUtils.ShowNotifyDialog (Translation.Error' Translation.LoginFailedServerError);  				} else if (TraktSettings.AccountStatus == ConnectionState.Connected) {  					// save settings now so password persists incase of bad shutdown  					TraktSettings.SaveSettings (false);  					// success' start a sync such that user data can be cached  					SyncLibrary ();  				}  			}  		}  	}  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  	TraktSettings.AccountStatus = ConnectionState.Pending;  	// Re-Check and Notify  	if (TraktSettings.AccountStatus == ConnectionState.UnAuthorised) {  		Thread.Sleep (10000);  		GUIUtils.ShowNotifyDialog (Translation.Error' Translation.UnAuthorized);  	} else if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  		Thread.Sleep (10000);  		GUIUtils.ShowNotifyDialog (Translation.Error' Translation.LoginFailedServerError);  	}  } else {  	// check if login password is set - we cleared this on v2 API upgrade  	// but left the username in tact  	if (!string.IsNullOrEmpty (TraktSettings.Username) && string.IsNullOrEmpty (TraktSettings.Password)) {  		Thread.Sleep (10000);  		if (GUIUtils.ShowYesNoDialog (GUIUtils.PluginName ()' Translation.SetPassword' true)) {  			string password = string.Empty;  			if (GUIUtils.GetStringFromKeyboard (ref password' true)) {  				// update password  				TraktSettings.Password = password;  				TraktSettings.AccountStatus = ConnectionState.Pending;  				// try login  				if (TraktSettings.AccountStatus == ConnectionState.UnAuthorised) {  					// incorrect login details provided' guide user to setting so it can be changed  					GUIUtils.ShowNotifyDialog (Translation.Error' Translation.UnAuthorized);  					GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.SettingsAccount);  				} else if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  					GUIUtils.ShowNotifyDialog (Translation.Error' Translation.LoginFailedServerError);  				} else if (TraktSettings.AccountStatus == ConnectionState.Connected) {  					// save settings now so password persists incase of bad shutdown  					TraktSettings.SaveSettings (false);  					// success' start a sync such that user data can be cached  					SyncLibrary ();  				}  			}  		}  	}  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  	TraktSettings.AccountStatus = ConnectionState.Pending;  	// Re-Check and Notify  	if (TraktSettings.AccountStatus == ConnectionState.UnAuthorised) {  		Thread.Sleep (10000);  		GUIUtils.ShowNotifyDialog (Translation.Error' Translation.UnAuthorized);  	} else if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  		Thread.Sleep (10000);  		GUIUtils.ShowNotifyDialog (Translation.Error' Translation.LoginFailedServerError);  	}  } else {  	// check if login password is set - we cleared this on v2 API upgrade  	// but left the username in tact  	if (!string.IsNullOrEmpty (TraktSettings.Username) && string.IsNullOrEmpty (TraktSettings.Password)) {  		Thread.Sleep (10000);  		if (GUIUtils.ShowYesNoDialog (GUIUtils.PluginName ()' Translation.SetPassword' true)) {  			string password = string.Empty;  			if (GUIUtils.GetStringFromKeyboard (ref password' true)) {  				// update password  				TraktSettings.Password = password;  				TraktSettings.AccountStatus = ConnectionState.Pending;  				// try login  				if (TraktSettings.AccountStatus == ConnectionState.UnAuthorised) {  					// incorrect login details provided' guide user to setting so it can be changed  					GUIUtils.ShowNotifyDialog (Translation.Error' Translation.UnAuthorized);  					GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.SettingsAccount);  				} else if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  					GUIUtils.ShowNotifyDialog (Translation.Error' Translation.LoginFailedServerError);  				} else if (TraktSettings.AccountStatus == ConnectionState.Connected) {  					// save settings now so password persists incase of bad shutdown  					TraktSettings.SaveSettings (false);  					// success' start a sync such that user data can be cached  					SyncLibrary ();  				}  			}  		}  	}  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: if (TraktSettings.AccountStatus == ConnectionState.UnAuthorised) {  	Thread.Sleep (10000);  	GUIUtils.ShowNotifyDialog (Translation.Error' Translation.UnAuthorized);  } else if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  	Thread.Sleep (10000);  	GUIUtils.ShowNotifyDialog (Translation.Error' Translation.LoginFailedServerError);  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: if (TraktSettings.AccountStatus == ConnectionState.UnAuthorised) {  	Thread.Sleep (10000);  	GUIUtils.ShowNotifyDialog (Translation.Error' Translation.UnAuthorized);  } else if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  	Thread.Sleep (10000);  	GUIUtils.ShowNotifyDialog (Translation.Error' Translation.LoginFailedServerError);  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  	Thread.Sleep (10000);  	GUIUtils.ShowNotifyDialog (Translation.Error' Translation.LoginFailedServerError);  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: if (!string.IsNullOrEmpty (TraktSettings.Username) && string.IsNullOrEmpty (TraktSettings.Password)) {  	Thread.Sleep (10000);  	if (GUIUtils.ShowYesNoDialog (GUIUtils.PluginName ()' Translation.SetPassword' true)) {  		string password = string.Empty;  		if (GUIUtils.GetStringFromKeyboard (ref password' true)) {  			// update password  			TraktSettings.Password = password;  			TraktSettings.AccountStatus = ConnectionState.Pending;  			// try login  			if (TraktSettings.AccountStatus == ConnectionState.UnAuthorised) {  				// incorrect login details provided' guide user to setting so it can be changed  				GUIUtils.ShowNotifyDialog (Translation.Error' Translation.UnAuthorized);  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.SettingsAccount);  			} else if (TraktSettings.AccountStatus == ConnectionState.Invalid) {  				GUIUtils.ShowNotifyDialog (Translation.Error' Translation.LoginFailedServerError);  			} else if (TraktSettings.AccountStatus == ConnectionState.Connected) {  				// save settings now so password persists incase of bad shutdown  				TraktSettings.SaveSettings (false);  				// success' start a sync such that user data can be cached  				SyncLibrary ();  			}  		}  	}  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: if ((windowID < (int)TraktGUIWindows.Settings || windowID > (int)TraktGUIWindows.SettingsGeneral) && (PreviousWindow >= (int)TraktGUIWindows.Settings && PreviousWindow <= (int)TraktGUIWindows.SettingsGeneral)) {  	Thread pluginHandlerCheckThread = new Thread (delegate (object obj) {  		if (GUISettingsPlugins.PluginHandlersChanged) {  			LoadPluginHandlers ();  		}  		// Help user get started if no plugins enabled  		if (TraktHandlers.Count == 0) {  			if (GUIUtils.ShowYesNoDialog (Translation.Plugins' Translation.NoPluginsEnabled' true)) {  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.SettingsPlugins);  			}  			return;  		}  		if (GUISettingsPlugins.PluginHandlersAdded) {  			if (GUIUtils.ShowYesNoDialog (Translation.Synchronize' Translation.SynchronizeNow' true))  				ChangeSyncTimer (0' TraktSettings.SyncTimerLength * 3600000);  		}  		GUISettingsPlugins.PluginHandlersAdded = false;  		GUISettingsPlugins.PluginHandlersChanged = false;  	}) {  		IsBackground = true'  		Name = "PluginCheck"  	};  	pluginHandlerCheckThread.Start ();  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: if (GUISettingsPlugins.PluginHandlersAdded) {  	if (GUIUtils.ShowYesNoDialog (Translation.Synchronize' Translation.SynchronizeNow' true))  		ChangeSyncTimer (0' TraktSettings.SyncTimerLength * 3600000);  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: if (GUIUtils.ShowYesNoDialog (Translation.Synchronize' Translation.SynchronizeNow' true))  	ChangeSyncTimer (0' TraktSettings.SyncTimerLength * 3600000);  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: ChangeSyncTimer (0' TraktSettings.SyncTimerLength * 3600000);  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: if (TraktSettings.GetFollowerRequestsOnStartup && !FollowerRequestsChecked) {  	FollowerRequestsChecked = true;  	var followerReqThread = new Thread (o => {  		if (TraktSettings.AccountStatus == ConnectionState.Connected) {  			var followerRequests = TraktCache.FollowerRequests;  			if (followerRequests == null) {  				TraktLogger.Error ("Failed to retrieve follower requests");  				return;  			}  			TraktLogger.Info ("Found {0} follower requests for user"' followerRequests.Count ());  			if (followerRequests.Count () > 0) {  				Thread.Sleep (10000);  				GUIUtils.ShowNotifyDialog (Translation.FollowerRequests' string.Format (Translation.FollowerRequestMessage' followerRequests.Count ().ToString ()));  			}  		}  	}) {  		IsBackground = true'  		Name = "FollowReq"  	};  	followerReqThread.Start ();  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: if (TraktSettings.AccountStatus == ConnectionState.Connected) {  	var followerRequests = TraktCache.FollowerRequests;  	if (followerRequests == null) {  		TraktLogger.Error ("Failed to retrieve follower requests");  		return;  	}  	TraktLogger.Info ("Found {0} follower requests for user"' followerRequests.Count ());  	if (followerRequests.Count () > 0) {  		Thread.Sleep (10000);  		GUIUtils.ShowNotifyDialog (Translation.FollowerRequests' string.Format (Translation.FollowerRequestMessage' followerRequests.Count ().ToString ()));  	}  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: if (followerRequests.Count () > 0) {  	Thread.Sleep (10000);  	GUIUtils.ShowNotifyDialog (Translation.FollowerRequests' string.Format (Translation.FollowerRequestMessage' followerRequests.Count ().ToString ()));  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_OnActivateWindow,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_CLICKED:  	switch (GUIWindowManager.ActiveWindow) {  	case (int)ExternalPluginWindows.OnlineVideos:  		#region WatchList/CustomList Button  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  			// Confirm we are in IMDB/iTunes Trailer Details view  			// This will give us enough information to send to trakt  			bool isDetails = GUIPropertyManager.GetProperty ("#OnlineVideos.state").ToLowerInvariant () == "details";  			string siteUtil = GUIPropertyManager.GetProperty ("#OnlineVideos.selectedSiteUtil").ToLowerInvariant ();  			if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers")) {  				title = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Title").Trim ();  				year = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Year").Trim ();  				if (siteUtil == "imdb") {  					// IMDb site exposes IMDb ID' use this to get a better match on trakt  					// this property is new' check for null in case user hasn't updated site  					imdbid = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.IMDbId");  					if (imdbid == null)  						imdbid = string.Empty;  					// could be a TV Show  					type = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Type").ToLowerInvariant ();  				}  				if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt")) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  				}  				// Return focus to details list now so we dont go in a loop  				GUIControl.FocusControl ((int)ExternalPluginWindows.OnlineVideos' 51);  			}  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.Showtimes:  		#region WatchList/CustomList Button  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  			// Confirm we are in Showtimes Details view  			// This will give us enough information to send to trakt  			bool isDetails = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow).GetControl (24).Visible;  			if (isDetails) {  				title = GUIPropertyManager.GetProperty ("#st_title").Trim ();  				DateTime releaseDate = DateTime.MinValue;  				if (DateTime.TryParse (GUIPropertyManager.GetProperty ("#st_releasedate").Trim ()' out releaseDate)) {  					year = releaseDate.Year.ToString ();  				}  				imdbid = GUIPropertyManager.GetProperty ("#st_imdb");  				if (imdbid == null)  					imdbid = string.Empty;  				tmdbid = GUIPropertyManager.GetProperty ("#st_tmdb");  				if (tmdbid == null)  					imdbid = string.Empty;  				if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  				}  				// set focus to next button so we dont go in a loop  				GUIControl.FocusControl ((int)ExternalPluginWindows.Showtimes' 42);  			}  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.VideoInfo:  		#region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			type = "movie";  			title = GUIPropertyManager.GetProperty ("#title").Trim ();  			year = GUIPropertyManager.GetProperty ("#year").Trim ();  			imdbid = GUIPropertyManager.GetProperty ("#imdbnumber").Trim ();  			tmdbid = (GUIPropertyManager.GetProperty ("#tmdbnumber") ?? string.Empty).Trim ();  			MediaPortal.Util.FanArt.GetFanArtfilename (title' 0' out fanart);  			if (fanart.ToLowerInvariant ().Equals ("unknown")) {  				string movieid = GUIPropertyManager.GetProperty ("#movieid").Trim ();  				MediaPortal.Util.FanArt.GetFanArtfilename (movieid' 0' out fanart);  			}  			searchPeople = new SearchPeople ();  			string people = GUIPropertyManager.GetProperty ("#cast").Trim ();  			if (people != string.Empty && people != "unknown") {  				// actors seperated by newlines  				var peopleAndRoles = people.Split ('\n').Select (s => s.Trim ());  				// each actor string also includes the role: {0} as {1} &#10;  				// get the seperator from the localised string and then reverse the formatted string  				string roleSepString = GUILocalizeStrings.Get (1320).Split (' ') [1].Trim ();  				foreach (var personAndRole in peopleAndRoles) {  					var personAndRoleStrings = personAndRole.Split (new string[] {  						string.Format (" {0} "' roleSepString)  					}' StringSplitOptions.None);  					searchPeople.Actors.Add (personAndRoleStrings.First ());  				}  			}  			people = GUIPropertyManager.GetProperty ("#director").Trim ();  			if (people != string.Empty && people != "unknown")  				searchPeople.Directors.AddRange (people.Split (''').Select (s => s.Trim ()));  			people = GUIPropertyManager.GetProperty ("#credits").Trim ();  			if (people != string.Empty && people != "unknown") {  				var writers = people.Split (''').Select (s => s.Trim ());  				foreach (var writer in writers) {  					// remove the writer type e.g. (Story)' (Screenplay)  					searchPeople.Writers.Add (writer.Split ('(').First ().Trim ());  				}  			}  			if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  			}  			// Set focus to Play Button now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.VideoInfo' 2);  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.MovingPictures:  		#region WatchList/CustomList/Rate/Shouts/RelatedItem/Search  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			type = "movie";  			updatePluginFilters = true;  			title = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.title").Trim ();  			year = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.year").Trim ();  			imdbid = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.imdb_id").Trim ();  			fanart = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.backdropfullpath").Trim ();  			isWatched = GUIPropertyManager.GetProperty ("#MovingPictures.UserMovieSettings.watched").Trim () != "0";  			// get movie people from database  			searchPeople = new SearchPeople ();  			if (TraktHelper.IsMovingPicturesAvailableAndEnabled) {  				int? movieID = null;  				int iYear = 0;  				int.TryParse (year' out iYear);  				if (MovingPictures.FindMovieID (title' iYear' imdbid' tmdbid.ToNullableInt32 ()' ref movieID))  					MovingPictures.GetMoviePersonInfo (movieID' out searchPeople);  			}  			if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  					validSearchItem = true;  			}  			// Set focus to Play Button now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.MovingPictures' 6);  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.TVSeries:  		#region WatchList/CustomList/Rate/Shouts/Related  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			Object obj = TVSeries.SelectedObject;  			bool validItem = false;  			if (obj != null) {  				searchPeople = new SearchPeople ();  				switch (TVSeries.GetSelectedType (obj)) {  				case TVSeries.SelectedType.Episode:  					type = "episode";  					validItem = TVSeries.GetEpisodeInfo (obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);  					validItem |= TVSeries.GetEpisodePersonInfo (obj' out searchPeople);  					break;  				case TVSeries.SelectedType.Series:  					type = "series";  					validItem = TVSeries.GetSeriesInfo (obj' out title' out year' out showtvdbid);  					validItem |= TVSeries.GetSeriesPersonInfo (obj' out searchPeople);  					break;  				default:  					break;  				}  				fanart = GUIPropertyManager.GetProperty ("#TVSeries.Current.Fanart").Trim ();  				if (validItem) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.Rate)  						validRateItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  						validShoutItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  						validRelatedItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  						validSearchItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  						validTraktMenuItem = true;  				}  			}  			// Set focus to Facade now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.TVSeries' 50);  			break;  		}  		#endregion  		break;  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_CLICKED:  	switch (GUIWindowManager.ActiveWindow) {  	case (int)ExternalPluginWindows.OnlineVideos:  		#region WatchList/CustomList Button  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  			// Confirm we are in IMDB/iTunes Trailer Details view  			// This will give us enough information to send to trakt  			bool isDetails = GUIPropertyManager.GetProperty ("#OnlineVideos.state").ToLowerInvariant () == "details";  			string siteUtil = GUIPropertyManager.GetProperty ("#OnlineVideos.selectedSiteUtil").ToLowerInvariant ();  			if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers")) {  				title = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Title").Trim ();  				year = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Year").Trim ();  				if (siteUtil == "imdb") {  					// IMDb site exposes IMDb ID' use this to get a better match on trakt  					// this property is new' check for null in case user hasn't updated site  					imdbid = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.IMDbId");  					if (imdbid == null)  						imdbid = string.Empty;  					// could be a TV Show  					type = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Type").ToLowerInvariant ();  				}  				if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt")) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  				}  				// Return focus to details list now so we dont go in a loop  				GUIControl.FocusControl ((int)ExternalPluginWindows.OnlineVideos' 51);  			}  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.Showtimes:  		#region WatchList/CustomList Button  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  			// Confirm we are in Showtimes Details view  			// This will give us enough information to send to trakt  			bool isDetails = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow).GetControl (24).Visible;  			if (isDetails) {  				title = GUIPropertyManager.GetProperty ("#st_title").Trim ();  				DateTime releaseDate = DateTime.MinValue;  				if (DateTime.TryParse (GUIPropertyManager.GetProperty ("#st_releasedate").Trim ()' out releaseDate)) {  					year = releaseDate.Year.ToString ();  				}  				imdbid = GUIPropertyManager.GetProperty ("#st_imdb");  				if (imdbid == null)  					imdbid = string.Empty;  				tmdbid = GUIPropertyManager.GetProperty ("#st_tmdb");  				if (tmdbid == null)  					imdbid = string.Empty;  				if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  				}  				// set focus to next button so we dont go in a loop  				GUIControl.FocusControl ((int)ExternalPluginWindows.Showtimes' 42);  			}  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.VideoInfo:  		#region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			type = "movie";  			title = GUIPropertyManager.GetProperty ("#title").Trim ();  			year = GUIPropertyManager.GetProperty ("#year").Trim ();  			imdbid = GUIPropertyManager.GetProperty ("#imdbnumber").Trim ();  			tmdbid = (GUIPropertyManager.GetProperty ("#tmdbnumber") ?? string.Empty).Trim ();  			MediaPortal.Util.FanArt.GetFanArtfilename (title' 0' out fanart);  			if (fanart.ToLowerInvariant ().Equals ("unknown")) {  				string movieid = GUIPropertyManager.GetProperty ("#movieid").Trim ();  				MediaPortal.Util.FanArt.GetFanArtfilename (movieid' 0' out fanart);  			}  			searchPeople = new SearchPeople ();  			string people = GUIPropertyManager.GetProperty ("#cast").Trim ();  			if (people != string.Empty && people != "unknown") {  				// actors seperated by newlines  				var peopleAndRoles = people.Split ('\n').Select (s => s.Trim ());  				// each actor string also includes the role: {0} as {1} &#10;  				// get the seperator from the localised string and then reverse the formatted string  				string roleSepString = GUILocalizeStrings.Get (1320).Split (' ') [1].Trim ();  				foreach (var personAndRole in peopleAndRoles) {  					var personAndRoleStrings = personAndRole.Split (new string[] {  						string.Format (" {0} "' roleSepString)  					}' StringSplitOptions.None);  					searchPeople.Actors.Add (personAndRoleStrings.First ());  				}  			}  			people = GUIPropertyManager.GetProperty ("#director").Trim ();  			if (people != string.Empty && people != "unknown")  				searchPeople.Directors.AddRange (people.Split (''').Select (s => s.Trim ()));  			people = GUIPropertyManager.GetProperty ("#credits").Trim ();  			if (people != string.Empty && people != "unknown") {  				var writers = people.Split (''').Select (s => s.Trim ());  				foreach (var writer in writers) {  					// remove the writer type e.g. (Story)' (Screenplay)  					searchPeople.Writers.Add (writer.Split ('(').First ().Trim ());  				}  			}  			if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  			}  			// Set focus to Play Button now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.VideoInfo' 2);  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.MovingPictures:  		#region WatchList/CustomList/Rate/Shouts/RelatedItem/Search  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			type = "movie";  			updatePluginFilters = true;  			title = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.title").Trim ();  			year = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.year").Trim ();  			imdbid = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.imdb_id").Trim ();  			fanart = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.backdropfullpath").Trim ();  			isWatched = GUIPropertyManager.GetProperty ("#MovingPictures.UserMovieSettings.watched").Trim () != "0";  			// get movie people from database  			searchPeople = new SearchPeople ();  			if (TraktHelper.IsMovingPicturesAvailableAndEnabled) {  				int? movieID = null;  				int iYear = 0;  				int.TryParse (year' out iYear);  				if (MovingPictures.FindMovieID (title' iYear' imdbid' tmdbid.ToNullableInt32 ()' ref movieID))  					MovingPictures.GetMoviePersonInfo (movieID' out searchPeople);  			}  			if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  					validSearchItem = true;  			}  			// Set focus to Play Button now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.MovingPictures' 6);  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.TVSeries:  		#region WatchList/CustomList/Rate/Shouts/Related  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			Object obj = TVSeries.SelectedObject;  			bool validItem = false;  			if (obj != null) {  				searchPeople = new SearchPeople ();  				switch (TVSeries.GetSelectedType (obj)) {  				case TVSeries.SelectedType.Episode:  					type = "episode";  					validItem = TVSeries.GetEpisodeInfo (obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);  					validItem |= TVSeries.GetEpisodePersonInfo (obj' out searchPeople);  					break;  				case TVSeries.SelectedType.Series:  					type = "series";  					validItem = TVSeries.GetSeriesInfo (obj' out title' out year' out showtvdbid);  					validItem |= TVSeries.GetSeriesPersonInfo (obj' out searchPeople);  					break;  				default:  					break;  				}  				fanart = GUIPropertyManager.GetProperty ("#TVSeries.Current.Fanart").Trim ();  				if (validItem) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.Rate)  						validRateItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  						validShoutItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  						validRelatedItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  						validSearchItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  						validTraktMenuItem = true;  				}  			}  			// Set focus to Facade now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.TVSeries' 50);  			break;  		}  		#endregion  		break;  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_CLICKED:  	switch (GUIWindowManager.ActiveWindow) {  	case (int)ExternalPluginWindows.OnlineVideos:  		#region WatchList/CustomList Button  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  			// Confirm we are in IMDB/iTunes Trailer Details view  			// This will give us enough information to send to trakt  			bool isDetails = GUIPropertyManager.GetProperty ("#OnlineVideos.state").ToLowerInvariant () == "details";  			string siteUtil = GUIPropertyManager.GetProperty ("#OnlineVideos.selectedSiteUtil").ToLowerInvariant ();  			if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers")) {  				title = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Title").Trim ();  				year = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Year").Trim ();  				if (siteUtil == "imdb") {  					// IMDb site exposes IMDb ID' use this to get a better match on trakt  					// this property is new' check for null in case user hasn't updated site  					imdbid = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.IMDbId");  					if (imdbid == null)  						imdbid = string.Empty;  					// could be a TV Show  					type = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Type").ToLowerInvariant ();  				}  				if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt")) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  				}  				// Return focus to details list now so we dont go in a loop  				GUIControl.FocusControl ((int)ExternalPluginWindows.OnlineVideos' 51);  			}  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.Showtimes:  		#region WatchList/CustomList Button  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  			// Confirm we are in Showtimes Details view  			// This will give us enough information to send to trakt  			bool isDetails = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow).GetControl (24).Visible;  			if (isDetails) {  				title = GUIPropertyManager.GetProperty ("#st_title").Trim ();  				DateTime releaseDate = DateTime.MinValue;  				if (DateTime.TryParse (GUIPropertyManager.GetProperty ("#st_releasedate").Trim ()' out releaseDate)) {  					year = releaseDate.Year.ToString ();  				}  				imdbid = GUIPropertyManager.GetProperty ("#st_imdb");  				if (imdbid == null)  					imdbid = string.Empty;  				tmdbid = GUIPropertyManager.GetProperty ("#st_tmdb");  				if (tmdbid == null)  					imdbid = string.Empty;  				if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  				}  				// set focus to next button so we dont go in a loop  				GUIControl.FocusControl ((int)ExternalPluginWindows.Showtimes' 42);  			}  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.VideoInfo:  		#region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			type = "movie";  			title = GUIPropertyManager.GetProperty ("#title").Trim ();  			year = GUIPropertyManager.GetProperty ("#year").Trim ();  			imdbid = GUIPropertyManager.GetProperty ("#imdbnumber").Trim ();  			tmdbid = (GUIPropertyManager.GetProperty ("#tmdbnumber") ?? string.Empty).Trim ();  			MediaPortal.Util.FanArt.GetFanArtfilename (title' 0' out fanart);  			if (fanart.ToLowerInvariant ().Equals ("unknown")) {  				string movieid = GUIPropertyManager.GetProperty ("#movieid").Trim ();  				MediaPortal.Util.FanArt.GetFanArtfilename (movieid' 0' out fanart);  			}  			searchPeople = new SearchPeople ();  			string people = GUIPropertyManager.GetProperty ("#cast").Trim ();  			if (people != string.Empty && people != "unknown") {  				// actors seperated by newlines  				var peopleAndRoles = people.Split ('\n').Select (s => s.Trim ());  				// each actor string also includes the role: {0} as {1} &#10;  				// get the seperator from the localised string and then reverse the formatted string  				string roleSepString = GUILocalizeStrings.Get (1320).Split (' ') [1].Trim ();  				foreach (var personAndRole in peopleAndRoles) {  					var personAndRoleStrings = personAndRole.Split (new string[] {  						string.Format (" {0} "' roleSepString)  					}' StringSplitOptions.None);  					searchPeople.Actors.Add (personAndRoleStrings.First ());  				}  			}  			people = GUIPropertyManager.GetProperty ("#director").Trim ();  			if (people != string.Empty && people != "unknown")  				searchPeople.Directors.AddRange (people.Split (''').Select (s => s.Trim ()));  			people = GUIPropertyManager.GetProperty ("#credits").Trim ();  			if (people != string.Empty && people != "unknown") {  				var writers = people.Split (''').Select (s => s.Trim ());  				foreach (var writer in writers) {  					// remove the writer type e.g. (Story)' (Screenplay)  					searchPeople.Writers.Add (writer.Split ('(').First ().Trim ());  				}  			}  			if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  			}  			// Set focus to Play Button now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.VideoInfo' 2);  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.MovingPictures:  		#region WatchList/CustomList/Rate/Shouts/RelatedItem/Search  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			type = "movie";  			updatePluginFilters = true;  			title = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.title").Trim ();  			year = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.year").Trim ();  			imdbid = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.imdb_id").Trim ();  			fanart = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.backdropfullpath").Trim ();  			isWatched = GUIPropertyManager.GetProperty ("#MovingPictures.UserMovieSettings.watched").Trim () != "0";  			// get movie people from database  			searchPeople = new SearchPeople ();  			if (TraktHelper.IsMovingPicturesAvailableAndEnabled) {  				int? movieID = null;  				int iYear = 0;  				int.TryParse (year' out iYear);  				if (MovingPictures.FindMovieID (title' iYear' imdbid' tmdbid.ToNullableInt32 ()' ref movieID))  					MovingPictures.GetMoviePersonInfo (movieID' out searchPeople);  			}  			if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  					validSearchItem = true;  			}  			// Set focus to Play Button now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.MovingPictures' 6);  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.TVSeries:  		#region WatchList/CustomList/Rate/Shouts/Related  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			Object obj = TVSeries.SelectedObject;  			bool validItem = false;  			if (obj != null) {  				searchPeople = new SearchPeople ();  				switch (TVSeries.GetSelectedType (obj)) {  				case TVSeries.SelectedType.Episode:  					type = "episode";  					validItem = TVSeries.GetEpisodeInfo (obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);  					validItem |= TVSeries.GetEpisodePersonInfo (obj' out searchPeople);  					break;  				case TVSeries.SelectedType.Series:  					type = "series";  					validItem = TVSeries.GetSeriesInfo (obj' out title' out year' out showtvdbid);  					validItem |= TVSeries.GetSeriesPersonInfo (obj' out searchPeople);  					break;  				default:  					break;  				}  				fanart = GUIPropertyManager.GetProperty ("#TVSeries.Current.Fanart").Trim ();  				if (validItem) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.Rate)  						validRateItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  						validShoutItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  						validRelatedItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  						validSearchItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  						validTraktMenuItem = true;  				}  			}  			// Set focus to Facade now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.TVSeries' 50);  			break;  		}  		#endregion  		break;  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_CLICKED:  	switch (GUIWindowManager.ActiveWindow) {  	case (int)ExternalPluginWindows.OnlineVideos:  		#region WatchList/CustomList Button  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  			// Confirm we are in IMDB/iTunes Trailer Details view  			// This will give us enough information to send to trakt  			bool isDetails = GUIPropertyManager.GetProperty ("#OnlineVideos.state").ToLowerInvariant () == "details";  			string siteUtil = GUIPropertyManager.GetProperty ("#OnlineVideos.selectedSiteUtil").ToLowerInvariant ();  			if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers")) {  				title = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Title").Trim ();  				year = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Year").Trim ();  				if (siteUtil == "imdb") {  					// IMDb site exposes IMDb ID' use this to get a better match on trakt  					// this property is new' check for null in case user hasn't updated site  					imdbid = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.IMDbId");  					if (imdbid == null)  						imdbid = string.Empty;  					// could be a TV Show  					type = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Type").ToLowerInvariant ();  				}  				if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt")) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  				}  				// Return focus to details list now so we dont go in a loop  				GUIControl.FocusControl ((int)ExternalPluginWindows.OnlineVideos' 51);  			}  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.Showtimes:  		#region WatchList/CustomList Button  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  			// Confirm we are in Showtimes Details view  			// This will give us enough information to send to trakt  			bool isDetails = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow).GetControl (24).Visible;  			if (isDetails) {  				title = GUIPropertyManager.GetProperty ("#st_title").Trim ();  				DateTime releaseDate = DateTime.MinValue;  				if (DateTime.TryParse (GUIPropertyManager.GetProperty ("#st_releasedate").Trim ()' out releaseDate)) {  					year = releaseDate.Year.ToString ();  				}  				imdbid = GUIPropertyManager.GetProperty ("#st_imdb");  				if (imdbid == null)  					imdbid = string.Empty;  				tmdbid = GUIPropertyManager.GetProperty ("#st_tmdb");  				if (tmdbid == null)  					imdbid = string.Empty;  				if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  				}  				// set focus to next button so we dont go in a loop  				GUIControl.FocusControl ((int)ExternalPluginWindows.Showtimes' 42);  			}  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.VideoInfo:  		#region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			type = "movie";  			title = GUIPropertyManager.GetProperty ("#title").Trim ();  			year = GUIPropertyManager.GetProperty ("#year").Trim ();  			imdbid = GUIPropertyManager.GetProperty ("#imdbnumber").Trim ();  			tmdbid = (GUIPropertyManager.GetProperty ("#tmdbnumber") ?? string.Empty).Trim ();  			MediaPortal.Util.FanArt.GetFanArtfilename (title' 0' out fanart);  			if (fanart.ToLowerInvariant ().Equals ("unknown")) {  				string movieid = GUIPropertyManager.GetProperty ("#movieid").Trim ();  				MediaPortal.Util.FanArt.GetFanArtfilename (movieid' 0' out fanart);  			}  			searchPeople = new SearchPeople ();  			string people = GUIPropertyManager.GetProperty ("#cast").Trim ();  			if (people != string.Empty && people != "unknown") {  				// actors seperated by newlines  				var peopleAndRoles = people.Split ('\n').Select (s => s.Trim ());  				// each actor string also includes the role: {0} as {1} &#10;  				// get the seperator from the localised string and then reverse the formatted string  				string roleSepString = GUILocalizeStrings.Get (1320).Split (' ') [1].Trim ();  				foreach (var personAndRole in peopleAndRoles) {  					var personAndRoleStrings = personAndRole.Split (new string[] {  						string.Format (" {0} "' roleSepString)  					}' StringSplitOptions.None);  					searchPeople.Actors.Add (personAndRoleStrings.First ());  				}  			}  			people = GUIPropertyManager.GetProperty ("#director").Trim ();  			if (people != string.Empty && people != "unknown")  				searchPeople.Directors.AddRange (people.Split (''').Select (s => s.Trim ()));  			people = GUIPropertyManager.GetProperty ("#credits").Trim ();  			if (people != string.Empty && people != "unknown") {  				var writers = people.Split (''').Select (s => s.Trim ());  				foreach (var writer in writers) {  					// remove the writer type e.g. (Story)' (Screenplay)  					searchPeople.Writers.Add (writer.Split ('(').First ().Trim ());  				}  			}  			if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  			}  			// Set focus to Play Button now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.VideoInfo' 2);  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.MovingPictures:  		#region WatchList/CustomList/Rate/Shouts/RelatedItem/Search  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			type = "movie";  			updatePluginFilters = true;  			title = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.title").Trim ();  			year = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.year").Trim ();  			imdbid = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.imdb_id").Trim ();  			fanart = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.backdropfullpath").Trim ();  			isWatched = GUIPropertyManager.GetProperty ("#MovingPictures.UserMovieSettings.watched").Trim () != "0";  			// get movie people from database  			searchPeople = new SearchPeople ();  			if (TraktHelper.IsMovingPicturesAvailableAndEnabled) {  				int? movieID = null;  				int iYear = 0;  				int.TryParse (year' out iYear);  				if (MovingPictures.FindMovieID (title' iYear' imdbid' tmdbid.ToNullableInt32 ()' ref movieID))  					MovingPictures.GetMoviePersonInfo (movieID' out searchPeople);  			}  			if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  					validSearchItem = true;  			}  			// Set focus to Play Button now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.MovingPictures' 6);  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.TVSeries:  		#region WatchList/CustomList/Rate/Shouts/Related  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			Object obj = TVSeries.SelectedObject;  			bool validItem = false;  			if (obj != null) {  				searchPeople = new SearchPeople ();  				switch (TVSeries.GetSelectedType (obj)) {  				case TVSeries.SelectedType.Episode:  					type = "episode";  					validItem = TVSeries.GetEpisodeInfo (obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);  					validItem |= TVSeries.GetEpisodePersonInfo (obj' out searchPeople);  					break;  				case TVSeries.SelectedType.Series:  					type = "series";  					validItem = TVSeries.GetSeriesInfo (obj' out title' out year' out showtvdbid);  					validItem |= TVSeries.GetSeriesPersonInfo (obj' out searchPeople);  					break;  				default:  					break;  				}  				fanart = GUIPropertyManager.GetProperty ("#TVSeries.Current.Fanart").Trim ();  				if (validItem) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.Rate)  						validRateItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  						validShoutItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  						validRelatedItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  						validSearchItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  						validTraktMenuItem = true;  				}  			}  			// Set focus to Facade now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.TVSeries' 50);  			break;  		}  		#endregion  		break;  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_CLICKED:  	switch (GUIWindowManager.ActiveWindow) {  	case (int)ExternalPluginWindows.OnlineVideos:  		#region WatchList/CustomList Button  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  			// Confirm we are in IMDB/iTunes Trailer Details view  			// This will give us enough information to send to trakt  			bool isDetails = GUIPropertyManager.GetProperty ("#OnlineVideos.state").ToLowerInvariant () == "details";  			string siteUtil = GUIPropertyManager.GetProperty ("#OnlineVideos.selectedSiteUtil").ToLowerInvariant ();  			if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers")) {  				title = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Title").Trim ();  				year = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Year").Trim ();  				if (siteUtil == "imdb") {  					// IMDb site exposes IMDb ID' use this to get a better match on trakt  					// this property is new' check for null in case user hasn't updated site  					imdbid = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.IMDbId");  					if (imdbid == null)  						imdbid = string.Empty;  					// could be a TV Show  					type = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Type").ToLowerInvariant ();  				}  				if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt")) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  				}  				// Return focus to details list now so we dont go in a loop  				GUIControl.FocusControl ((int)ExternalPluginWindows.OnlineVideos' 51);  			}  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.Showtimes:  		#region WatchList/CustomList Button  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  			// Confirm we are in Showtimes Details view  			// This will give us enough information to send to trakt  			bool isDetails = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow).GetControl (24).Visible;  			if (isDetails) {  				title = GUIPropertyManager.GetProperty ("#st_title").Trim ();  				DateTime releaseDate = DateTime.MinValue;  				if (DateTime.TryParse (GUIPropertyManager.GetProperty ("#st_releasedate").Trim ()' out releaseDate)) {  					year = releaseDate.Year.ToString ();  				}  				imdbid = GUIPropertyManager.GetProperty ("#st_imdb");  				if (imdbid == null)  					imdbid = string.Empty;  				tmdbid = GUIPropertyManager.GetProperty ("#st_tmdb");  				if (tmdbid == null)  					imdbid = string.Empty;  				if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  				}  				// set focus to next button so we dont go in a loop  				GUIControl.FocusControl ((int)ExternalPluginWindows.Showtimes' 42);  			}  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.VideoInfo:  		#region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			type = "movie";  			title = GUIPropertyManager.GetProperty ("#title").Trim ();  			year = GUIPropertyManager.GetProperty ("#year").Trim ();  			imdbid = GUIPropertyManager.GetProperty ("#imdbnumber").Trim ();  			tmdbid = (GUIPropertyManager.GetProperty ("#tmdbnumber") ?? string.Empty).Trim ();  			MediaPortal.Util.FanArt.GetFanArtfilename (title' 0' out fanart);  			if (fanart.ToLowerInvariant ().Equals ("unknown")) {  				string movieid = GUIPropertyManager.GetProperty ("#movieid").Trim ();  				MediaPortal.Util.FanArt.GetFanArtfilename (movieid' 0' out fanart);  			}  			searchPeople = new SearchPeople ();  			string people = GUIPropertyManager.GetProperty ("#cast").Trim ();  			if (people != string.Empty && people != "unknown") {  				// actors seperated by newlines  				var peopleAndRoles = people.Split ('\n').Select (s => s.Trim ());  				// each actor string also includes the role: {0} as {1} &#10;  				// get the seperator from the localised string and then reverse the formatted string  				string roleSepString = GUILocalizeStrings.Get (1320).Split (' ') [1].Trim ();  				foreach (var personAndRole in peopleAndRoles) {  					var personAndRoleStrings = personAndRole.Split (new string[] {  						string.Format (" {0} "' roleSepString)  					}' StringSplitOptions.None);  					searchPeople.Actors.Add (personAndRoleStrings.First ());  				}  			}  			people = GUIPropertyManager.GetProperty ("#director").Trim ();  			if (people != string.Empty && people != "unknown")  				searchPeople.Directors.AddRange (people.Split (''').Select (s => s.Trim ()));  			people = GUIPropertyManager.GetProperty ("#credits").Trim ();  			if (people != string.Empty && people != "unknown") {  				var writers = people.Split (''').Select (s => s.Trim ());  				foreach (var writer in writers) {  					// remove the writer type e.g. (Story)' (Screenplay)  					searchPeople.Writers.Add (writer.Split ('(').First ().Trim ());  				}  			}  			if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  			}  			// Set focus to Play Button now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.VideoInfo' 2);  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.MovingPictures:  		#region WatchList/CustomList/Rate/Shouts/RelatedItem/Search  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			type = "movie";  			updatePluginFilters = true;  			title = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.title").Trim ();  			year = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.year").Trim ();  			imdbid = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.imdb_id").Trim ();  			fanart = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.backdropfullpath").Trim ();  			isWatched = GUIPropertyManager.GetProperty ("#MovingPictures.UserMovieSettings.watched").Trim () != "0";  			// get movie people from database  			searchPeople = new SearchPeople ();  			if (TraktHelper.IsMovingPicturesAvailableAndEnabled) {  				int? movieID = null;  				int iYear = 0;  				int.TryParse (year' out iYear);  				if (MovingPictures.FindMovieID (title' iYear' imdbid' tmdbid.ToNullableInt32 ()' ref movieID))  					MovingPictures.GetMoviePersonInfo (movieID' out searchPeople);  			}  			if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  					validSearchItem = true;  			}  			// Set focus to Play Button now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.MovingPictures' 6);  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.TVSeries:  		#region WatchList/CustomList/Rate/Shouts/Related  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			Object obj = TVSeries.SelectedObject;  			bool validItem = false;  			if (obj != null) {  				searchPeople = new SearchPeople ();  				switch (TVSeries.GetSelectedType (obj)) {  				case TVSeries.SelectedType.Episode:  					type = "episode";  					validItem = TVSeries.GetEpisodeInfo (obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);  					validItem |= TVSeries.GetEpisodePersonInfo (obj' out searchPeople);  					break;  				case TVSeries.SelectedType.Series:  					type = "series";  					validItem = TVSeries.GetSeriesInfo (obj' out title' out year' out showtvdbid);  					validItem |= TVSeries.GetSeriesPersonInfo (obj' out searchPeople);  					break;  				default:  					break;  				}  				fanart = GUIPropertyManager.GetProperty ("#TVSeries.Current.Fanart").Trim ();  				if (validItem) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.Rate)  						validRateItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  						validShoutItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  						validRelatedItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  						validSearchItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  						validTraktMenuItem = true;  				}  			}  			// Set focus to Facade now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.TVSeries' 50);  			break;  		}  		#endregion  		break;  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_CLICKED:  	switch (GUIWindowManager.ActiveWindow) {  	case (int)ExternalPluginWindows.OnlineVideos:  		#region WatchList/CustomList Button  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  			// Confirm we are in IMDB/iTunes Trailer Details view  			// This will give us enough information to send to trakt  			bool isDetails = GUIPropertyManager.GetProperty ("#OnlineVideos.state").ToLowerInvariant () == "details";  			string siteUtil = GUIPropertyManager.GetProperty ("#OnlineVideos.selectedSiteUtil").ToLowerInvariant ();  			if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers")) {  				title = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Title").Trim ();  				year = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Year").Trim ();  				if (siteUtil == "imdb") {  					// IMDb site exposes IMDb ID' use this to get a better match on trakt  					// this property is new' check for null in case user hasn't updated site  					imdbid = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.IMDbId");  					if (imdbid == null)  						imdbid = string.Empty;  					// could be a TV Show  					type = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Type").ToLowerInvariant ();  				}  				if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt")) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  				}  				// Return focus to details list now so we dont go in a loop  				GUIControl.FocusControl ((int)ExternalPluginWindows.OnlineVideos' 51);  			}  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.Showtimes:  		#region WatchList/CustomList Button  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  			// Confirm we are in Showtimes Details view  			// This will give us enough information to send to trakt  			bool isDetails = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow).GetControl (24).Visible;  			if (isDetails) {  				title = GUIPropertyManager.GetProperty ("#st_title").Trim ();  				DateTime releaseDate = DateTime.MinValue;  				if (DateTime.TryParse (GUIPropertyManager.GetProperty ("#st_releasedate").Trim ()' out releaseDate)) {  					year = releaseDate.Year.ToString ();  				}  				imdbid = GUIPropertyManager.GetProperty ("#st_imdb");  				if (imdbid == null)  					imdbid = string.Empty;  				tmdbid = GUIPropertyManager.GetProperty ("#st_tmdb");  				if (tmdbid == null)  					imdbid = string.Empty;  				if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  				}  				// set focus to next button so we dont go in a loop  				GUIControl.FocusControl ((int)ExternalPluginWindows.Showtimes' 42);  			}  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.VideoInfo:  		#region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			type = "movie";  			title = GUIPropertyManager.GetProperty ("#title").Trim ();  			year = GUIPropertyManager.GetProperty ("#year").Trim ();  			imdbid = GUIPropertyManager.GetProperty ("#imdbnumber").Trim ();  			tmdbid = (GUIPropertyManager.GetProperty ("#tmdbnumber") ?? string.Empty).Trim ();  			MediaPortal.Util.FanArt.GetFanArtfilename (title' 0' out fanart);  			if (fanart.ToLowerInvariant ().Equals ("unknown")) {  				string movieid = GUIPropertyManager.GetProperty ("#movieid").Trim ();  				MediaPortal.Util.FanArt.GetFanArtfilename (movieid' 0' out fanart);  			}  			searchPeople = new SearchPeople ();  			string people = GUIPropertyManager.GetProperty ("#cast").Trim ();  			if (people != string.Empty && people != "unknown") {  				// actors seperated by newlines  				var peopleAndRoles = people.Split ('\n').Select (s => s.Trim ());  				// each actor string also includes the role: {0} as {1} &#10;  				// get the seperator from the localised string and then reverse the formatted string  				string roleSepString = GUILocalizeStrings.Get (1320).Split (' ') [1].Trim ();  				foreach (var personAndRole in peopleAndRoles) {  					var personAndRoleStrings = personAndRole.Split (new string[] {  						string.Format (" {0} "' roleSepString)  					}' StringSplitOptions.None);  					searchPeople.Actors.Add (personAndRoleStrings.First ());  				}  			}  			people = GUIPropertyManager.GetProperty ("#director").Trim ();  			if (people != string.Empty && people != "unknown")  				searchPeople.Directors.AddRange (people.Split (''').Select (s => s.Trim ()));  			people = GUIPropertyManager.GetProperty ("#credits").Trim ();  			if (people != string.Empty && people != "unknown") {  				var writers = people.Split (''').Select (s => s.Trim ());  				foreach (var writer in writers) {  					// remove the writer type e.g. (Story)' (Screenplay)  					searchPeople.Writers.Add (writer.Split ('(').First ().Trim ());  				}  			}  			if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  			}  			// Set focus to Play Button now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.VideoInfo' 2);  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.MovingPictures:  		#region WatchList/CustomList/Rate/Shouts/RelatedItem/Search  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			type = "movie";  			updatePluginFilters = true;  			title = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.title").Trim ();  			year = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.year").Trim ();  			imdbid = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.imdb_id").Trim ();  			fanart = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.backdropfullpath").Trim ();  			isWatched = GUIPropertyManager.GetProperty ("#MovingPictures.UserMovieSettings.watched").Trim () != "0";  			// get movie people from database  			searchPeople = new SearchPeople ();  			if (TraktHelper.IsMovingPicturesAvailableAndEnabled) {  				int? movieID = null;  				int iYear = 0;  				int.TryParse (year' out iYear);  				if (MovingPictures.FindMovieID (title' iYear' imdbid' tmdbid.ToNullableInt32 ()' ref movieID))  					MovingPictures.GetMoviePersonInfo (movieID' out searchPeople);  			}  			if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  					validSearchItem = true;  			}  			// Set focus to Play Button now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.MovingPictures' 6);  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.TVSeries:  		#region WatchList/CustomList/Rate/Shouts/Related  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			Object obj = TVSeries.SelectedObject;  			bool validItem = false;  			if (obj != null) {  				searchPeople = new SearchPeople ();  				switch (TVSeries.GetSelectedType (obj)) {  				case TVSeries.SelectedType.Episode:  					type = "episode";  					validItem = TVSeries.GetEpisodeInfo (obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);  					validItem |= TVSeries.GetEpisodePersonInfo (obj' out searchPeople);  					break;  				case TVSeries.SelectedType.Series:  					type = "series";  					validItem = TVSeries.GetSeriesInfo (obj' out title' out year' out showtvdbid);  					validItem |= TVSeries.GetSeriesPersonInfo (obj' out searchPeople);  					break;  				default:  					break;  				}  				fanart = GUIPropertyManager.GetProperty ("#TVSeries.Current.Fanart").Trim ();  				if (validItem) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.Rate)  						validRateItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  						validShoutItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  						validRelatedItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  						validSearchItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  						validTraktMenuItem = true;  				}  			}  			// Set focus to Facade now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.TVSeries' 50);  			break;  		}  		#endregion  		break;  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_CLICKED:  	switch (GUIWindowManager.ActiveWindow) {  	case (int)ExternalPluginWindows.OnlineVideos:  		#region WatchList/CustomList Button  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  			// Confirm we are in IMDB/iTunes Trailer Details view  			// This will give us enough information to send to trakt  			bool isDetails = GUIPropertyManager.GetProperty ("#OnlineVideos.state").ToLowerInvariant () == "details";  			string siteUtil = GUIPropertyManager.GetProperty ("#OnlineVideos.selectedSiteUtil").ToLowerInvariant ();  			if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers")) {  				title = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Title").Trim ();  				year = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Year").Trim ();  				if (siteUtil == "imdb") {  					// IMDb site exposes IMDb ID' use this to get a better match on trakt  					// this property is new' check for null in case user hasn't updated site  					imdbid = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.IMDbId");  					if (imdbid == null)  						imdbid = string.Empty;  					// could be a TV Show  					type = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Type").ToLowerInvariant ();  				}  				if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt")) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  				}  				// Return focus to details list now so we dont go in a loop  				GUIControl.FocusControl ((int)ExternalPluginWindows.OnlineVideos' 51);  			}  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.Showtimes:  		#region WatchList/CustomList Button  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  			// Confirm we are in Showtimes Details view  			// This will give us enough information to send to trakt  			bool isDetails = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow).GetControl (24).Visible;  			if (isDetails) {  				title = GUIPropertyManager.GetProperty ("#st_title").Trim ();  				DateTime releaseDate = DateTime.MinValue;  				if (DateTime.TryParse (GUIPropertyManager.GetProperty ("#st_releasedate").Trim ()' out releaseDate)) {  					year = releaseDate.Year.ToString ();  				}  				imdbid = GUIPropertyManager.GetProperty ("#st_imdb");  				if (imdbid == null)  					imdbid = string.Empty;  				tmdbid = GUIPropertyManager.GetProperty ("#st_tmdb");  				if (tmdbid == null)  					imdbid = string.Empty;  				if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  				}  				// set focus to next button so we dont go in a loop  				GUIControl.FocusControl ((int)ExternalPluginWindows.Showtimes' 42);  			}  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.VideoInfo:  		#region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			type = "movie";  			title = GUIPropertyManager.GetProperty ("#title").Trim ();  			year = GUIPropertyManager.GetProperty ("#year").Trim ();  			imdbid = GUIPropertyManager.GetProperty ("#imdbnumber").Trim ();  			tmdbid = (GUIPropertyManager.GetProperty ("#tmdbnumber") ?? string.Empty).Trim ();  			MediaPortal.Util.FanArt.GetFanArtfilename (title' 0' out fanart);  			if (fanart.ToLowerInvariant ().Equals ("unknown")) {  				string movieid = GUIPropertyManager.GetProperty ("#movieid").Trim ();  				MediaPortal.Util.FanArt.GetFanArtfilename (movieid' 0' out fanart);  			}  			searchPeople = new SearchPeople ();  			string people = GUIPropertyManager.GetProperty ("#cast").Trim ();  			if (people != string.Empty && people != "unknown") {  				// actors seperated by newlines  				var peopleAndRoles = people.Split ('\n').Select (s => s.Trim ());  				// each actor string also includes the role: {0} as {1} &#10;  				// get the seperator from the localised string and then reverse the formatted string  				string roleSepString = GUILocalizeStrings.Get (1320).Split (' ') [1].Trim ();  				foreach (var personAndRole in peopleAndRoles) {  					var personAndRoleStrings = personAndRole.Split (new string[] {  						string.Format (" {0} "' roleSepString)  					}' StringSplitOptions.None);  					searchPeople.Actors.Add (personAndRoleStrings.First ());  				}  			}  			people = GUIPropertyManager.GetProperty ("#director").Trim ();  			if (people != string.Empty && people != "unknown")  				searchPeople.Directors.AddRange (people.Split (''').Select (s => s.Trim ()));  			people = GUIPropertyManager.GetProperty ("#credits").Trim ();  			if (people != string.Empty && people != "unknown") {  				var writers = people.Split (''').Select (s => s.Trim ());  				foreach (var writer in writers) {  					// remove the writer type e.g. (Story)' (Screenplay)  					searchPeople.Writers.Add (writer.Split ('(').First ().Trim ());  				}  			}  			if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  			}  			// Set focus to Play Button now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.VideoInfo' 2);  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.MovingPictures:  		#region WatchList/CustomList/Rate/Shouts/RelatedItem/Search  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			type = "movie";  			updatePluginFilters = true;  			title = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.title").Trim ();  			year = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.year").Trim ();  			imdbid = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.imdb_id").Trim ();  			fanart = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.backdropfullpath").Trim ();  			isWatched = GUIPropertyManager.GetProperty ("#MovingPictures.UserMovieSettings.watched").Trim () != "0";  			// get movie people from database  			searchPeople = new SearchPeople ();  			if (TraktHelper.IsMovingPicturesAvailableAndEnabled) {  				int? movieID = null;  				int iYear = 0;  				int.TryParse (year' out iYear);  				if (MovingPictures.FindMovieID (title' iYear' imdbid' tmdbid.ToNullableInt32 ()' ref movieID))  					MovingPictures.GetMoviePersonInfo (movieID' out searchPeople);  			}  			if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  					validSearchItem = true;  			}  			// Set focus to Play Button now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.MovingPictures' 6);  			break;  		}  		#endregion  		break;  	case (int)ExternalPluginWindows.TVSeries:  		#region WatchList/CustomList/Rate/Shouts/Related  		switch (message.SenderControlId) {  		case ((int)ExternalPluginControls.WatchList):  		case ((int)ExternalPluginControls.CustomList):  		case ((int)ExternalPluginControls.Rate):  		case ((int)ExternalPluginControls.Shouts):  		case ((int)ExternalPluginControls.RelatedItems):  		case ((int)ExternalPluginControls.SearchBy):  		case ((int)ExternalPluginControls.TraktMenu):  			Object obj = TVSeries.SelectedObject;  			bool validItem = false;  			if (obj != null) {  				searchPeople = new SearchPeople ();  				switch (TVSeries.GetSelectedType (obj)) {  				case TVSeries.SelectedType.Episode:  					type = "episode";  					validItem = TVSeries.GetEpisodeInfo (obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);  					validItem |= TVSeries.GetEpisodePersonInfo (obj' out searchPeople);  					break;  				case TVSeries.SelectedType.Series:  					type = "series";  					validItem = TVSeries.GetSeriesInfo (obj' out title' out year' out showtvdbid);  					validItem |= TVSeries.GetSeriesPersonInfo (obj' out searchPeople);  					break;  				default:  					break;  				}  				fanart = GUIPropertyManager.GetProperty ("#TVSeries.Current.Fanart").Trim ();  				if (validItem) {  					if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  						validWatchListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  						validCustomListItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.Rate)  						validRateItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  						validShoutItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  						validRelatedItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  						validSearchItem = true;  					if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  						validTraktMenuItem = true;  				}  			}  			// Set focus to Facade now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.TVSeries' 50);  			break;  		}  		#endregion  		break;  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (GUIWindowManager.ActiveWindow) {  case (int)ExternalPluginWindows.OnlineVideos:  	#region WatchList/CustomList Button  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  		// Confirm we are in IMDB/iTunes Trailer Details view  		// This will give us enough information to send to trakt  		bool isDetails = GUIPropertyManager.GetProperty ("#OnlineVideos.state").ToLowerInvariant () == "details";  		string siteUtil = GUIPropertyManager.GetProperty ("#OnlineVideos.selectedSiteUtil").ToLowerInvariant ();  		if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers")) {  			title = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Title").Trim ();  			year = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Year").Trim ();  			if (siteUtil == "imdb") {  				// IMDb site exposes IMDb ID' use this to get a better match on trakt  				// this property is new' check for null in case user hasn't updated site  				imdbid = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.IMDbId");  				if (imdbid == null)  					imdbid = string.Empty;  				// could be a TV Show  				type = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Type").ToLowerInvariant ();  			}  			if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt")) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  			}  			// Return focus to details list now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.OnlineVideos' 51);  		}  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.Showtimes:  	#region WatchList/CustomList Button  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  		// Confirm we are in Showtimes Details view  		// This will give us enough information to send to trakt  		bool isDetails = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow).GetControl (24).Visible;  		if (isDetails) {  			title = GUIPropertyManager.GetProperty ("#st_title").Trim ();  			DateTime releaseDate = DateTime.MinValue;  			if (DateTime.TryParse (GUIPropertyManager.GetProperty ("#st_releasedate").Trim ()' out releaseDate)) {  				year = releaseDate.Year.ToString ();  			}  			imdbid = GUIPropertyManager.GetProperty ("#st_imdb");  			if (imdbid == null)  				imdbid = string.Empty;  			tmdbid = GUIPropertyManager.GetProperty ("#st_tmdb");  			if (tmdbid == null)  				imdbid = string.Empty;  			if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  			}  			// set focus to next button so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.Showtimes' 42);  		}  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.VideoInfo:  	#region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		type = "movie";  		title = GUIPropertyManager.GetProperty ("#title").Trim ();  		year = GUIPropertyManager.GetProperty ("#year").Trim ();  		imdbid = GUIPropertyManager.GetProperty ("#imdbnumber").Trim ();  		tmdbid = (GUIPropertyManager.GetProperty ("#tmdbnumber") ?? string.Empty).Trim ();  		MediaPortal.Util.FanArt.GetFanArtfilename (title' 0' out fanart);  		if (fanart.ToLowerInvariant ().Equals ("unknown")) {  			string movieid = GUIPropertyManager.GetProperty ("#movieid").Trim ();  			MediaPortal.Util.FanArt.GetFanArtfilename (movieid' 0' out fanart);  		}  		searchPeople = new SearchPeople ();  		string people = GUIPropertyManager.GetProperty ("#cast").Trim ();  		if (people != string.Empty && people != "unknown") {  			// actors seperated by newlines  			var peopleAndRoles = people.Split ('\n').Select (s => s.Trim ());  			// each actor string also includes the role: {0} as {1} &#10;  			// get the seperator from the localised string and then reverse the formatted string  			string roleSepString = GUILocalizeStrings.Get (1320).Split (' ') [1].Trim ();  			foreach (var personAndRole in peopleAndRoles) {  				var personAndRoleStrings = personAndRole.Split (new string[] {  					string.Format (" {0} "' roleSepString)  				}' StringSplitOptions.None);  				searchPeople.Actors.Add (personAndRoleStrings.First ());  			}  		}  		people = GUIPropertyManager.GetProperty ("#director").Trim ();  		if (people != string.Empty && people != "unknown")  			searchPeople.Directors.AddRange (people.Split (''').Select (s => s.Trim ()));  		people = GUIPropertyManager.GetProperty ("#credits").Trim ();  		if (people != string.Empty && people != "unknown") {  			var writers = people.Split (''').Select (s => s.Trim ());  			foreach (var writer in writers) {  				// remove the writer type e.g. (Story)' (Screenplay)  				searchPeople.Writers.Add (writer.Split ('(').First ().Trim ());  			}  		}  		if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Rate)  				validRateItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  				validShoutItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  				validRelatedItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  				validTraktMenuItem = true;  		}  		// Set focus to Play Button now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.VideoInfo' 2);  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.MovingPictures:  	#region WatchList/CustomList/Rate/Shouts/RelatedItem/Search  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		type = "movie";  		updatePluginFilters = true;  		title = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.title").Trim ();  		year = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.year").Trim ();  		imdbid = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.imdb_id").Trim ();  		fanart = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.backdropfullpath").Trim ();  		isWatched = GUIPropertyManager.GetProperty ("#MovingPictures.UserMovieSettings.watched").Trim () != "0";  		// get movie people from database  		searchPeople = new SearchPeople ();  		if (TraktHelper.IsMovingPicturesAvailableAndEnabled) {  			int? movieID = null;  			int iYear = 0;  			int.TryParse (year' out iYear);  			if (MovingPictures.FindMovieID (title' iYear' imdbid' tmdbid.ToNullableInt32 ()' ref movieID))  				MovingPictures.GetMoviePersonInfo (movieID' out searchPeople);  		}  		if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Rate)  				validRateItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  				validShoutItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  				validRelatedItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  				validTraktMenuItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  				validSearchItem = true;  		}  		// Set focus to Play Button now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.MovingPictures' 6);  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.TVSeries:  	#region WatchList/CustomList/Rate/Shouts/Related  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		Object obj = TVSeries.SelectedObject;  		bool validItem = false;  		if (obj != null) {  			searchPeople = new SearchPeople ();  			switch (TVSeries.GetSelectedType (obj)) {  			case TVSeries.SelectedType.Episode:  				type = "episode";  				validItem = TVSeries.GetEpisodeInfo (obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);  				validItem |= TVSeries.GetEpisodePersonInfo (obj' out searchPeople);  				break;  			case TVSeries.SelectedType.Series:  				type = "series";  				validItem = TVSeries.GetSeriesInfo (obj' out title' out year' out showtvdbid);  				validItem |= TVSeries.GetSeriesPersonInfo (obj' out searchPeople);  				break;  			default:  				break;  			}  			fanart = GUIPropertyManager.GetProperty ("#TVSeries.Current.Fanart").Trim ();  			if (validItem) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  					validSearchItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  			}  		}  		// Set focus to Facade now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.TVSeries' 50);  		break;  	}  	#endregion  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (GUIWindowManager.ActiveWindow) {  case (int)ExternalPluginWindows.OnlineVideos:  	#region WatchList/CustomList Button  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  		// Confirm we are in IMDB/iTunes Trailer Details view  		// This will give us enough information to send to trakt  		bool isDetails = GUIPropertyManager.GetProperty ("#OnlineVideos.state").ToLowerInvariant () == "details";  		string siteUtil = GUIPropertyManager.GetProperty ("#OnlineVideos.selectedSiteUtil").ToLowerInvariant ();  		if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers")) {  			title = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Title").Trim ();  			year = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Year").Trim ();  			if (siteUtil == "imdb") {  				// IMDb site exposes IMDb ID' use this to get a better match on trakt  				// this property is new' check for null in case user hasn't updated site  				imdbid = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.IMDbId");  				if (imdbid == null)  					imdbid = string.Empty;  				// could be a TV Show  				type = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Type").ToLowerInvariant ();  			}  			if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt")) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  			}  			// Return focus to details list now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.OnlineVideos' 51);  		}  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.Showtimes:  	#region WatchList/CustomList Button  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  		// Confirm we are in Showtimes Details view  		// This will give us enough information to send to trakt  		bool isDetails = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow).GetControl (24).Visible;  		if (isDetails) {  			title = GUIPropertyManager.GetProperty ("#st_title").Trim ();  			DateTime releaseDate = DateTime.MinValue;  			if (DateTime.TryParse (GUIPropertyManager.GetProperty ("#st_releasedate").Trim ()' out releaseDate)) {  				year = releaseDate.Year.ToString ();  			}  			imdbid = GUIPropertyManager.GetProperty ("#st_imdb");  			if (imdbid == null)  				imdbid = string.Empty;  			tmdbid = GUIPropertyManager.GetProperty ("#st_tmdb");  			if (tmdbid == null)  				imdbid = string.Empty;  			if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  			}  			// set focus to next button so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.Showtimes' 42);  		}  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.VideoInfo:  	#region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		type = "movie";  		title = GUIPropertyManager.GetProperty ("#title").Trim ();  		year = GUIPropertyManager.GetProperty ("#year").Trim ();  		imdbid = GUIPropertyManager.GetProperty ("#imdbnumber").Trim ();  		tmdbid = (GUIPropertyManager.GetProperty ("#tmdbnumber") ?? string.Empty).Trim ();  		MediaPortal.Util.FanArt.GetFanArtfilename (title' 0' out fanart);  		if (fanart.ToLowerInvariant ().Equals ("unknown")) {  			string movieid = GUIPropertyManager.GetProperty ("#movieid").Trim ();  			MediaPortal.Util.FanArt.GetFanArtfilename (movieid' 0' out fanart);  		}  		searchPeople = new SearchPeople ();  		string people = GUIPropertyManager.GetProperty ("#cast").Trim ();  		if (people != string.Empty && people != "unknown") {  			// actors seperated by newlines  			var peopleAndRoles = people.Split ('\n').Select (s => s.Trim ());  			// each actor string also includes the role: {0} as {1} &#10;  			// get the seperator from the localised string and then reverse the formatted string  			string roleSepString = GUILocalizeStrings.Get (1320).Split (' ') [1].Trim ();  			foreach (var personAndRole in peopleAndRoles) {  				var personAndRoleStrings = personAndRole.Split (new string[] {  					string.Format (" {0} "' roleSepString)  				}' StringSplitOptions.None);  				searchPeople.Actors.Add (personAndRoleStrings.First ());  			}  		}  		people = GUIPropertyManager.GetProperty ("#director").Trim ();  		if (people != string.Empty && people != "unknown")  			searchPeople.Directors.AddRange (people.Split (''').Select (s => s.Trim ()));  		people = GUIPropertyManager.GetProperty ("#credits").Trim ();  		if (people != string.Empty && people != "unknown") {  			var writers = people.Split (''').Select (s => s.Trim ());  			foreach (var writer in writers) {  				// remove the writer type e.g. (Story)' (Screenplay)  				searchPeople.Writers.Add (writer.Split ('(').First ().Trim ());  			}  		}  		if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Rate)  				validRateItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  				validShoutItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  				validRelatedItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  				validTraktMenuItem = true;  		}  		// Set focus to Play Button now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.VideoInfo' 2);  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.MovingPictures:  	#region WatchList/CustomList/Rate/Shouts/RelatedItem/Search  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		type = "movie";  		updatePluginFilters = true;  		title = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.title").Trim ();  		year = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.year").Trim ();  		imdbid = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.imdb_id").Trim ();  		fanart = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.backdropfullpath").Trim ();  		isWatched = GUIPropertyManager.GetProperty ("#MovingPictures.UserMovieSettings.watched").Trim () != "0";  		// get movie people from database  		searchPeople = new SearchPeople ();  		if (TraktHelper.IsMovingPicturesAvailableAndEnabled) {  			int? movieID = null;  			int iYear = 0;  			int.TryParse (year' out iYear);  			if (MovingPictures.FindMovieID (title' iYear' imdbid' tmdbid.ToNullableInt32 ()' ref movieID))  				MovingPictures.GetMoviePersonInfo (movieID' out searchPeople);  		}  		if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Rate)  				validRateItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  				validShoutItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  				validRelatedItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  				validTraktMenuItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  				validSearchItem = true;  		}  		// Set focus to Play Button now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.MovingPictures' 6);  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.TVSeries:  	#region WatchList/CustomList/Rate/Shouts/Related  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		Object obj = TVSeries.SelectedObject;  		bool validItem = false;  		if (obj != null) {  			searchPeople = new SearchPeople ();  			switch (TVSeries.GetSelectedType (obj)) {  			case TVSeries.SelectedType.Episode:  				type = "episode";  				validItem = TVSeries.GetEpisodeInfo (obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);  				validItem |= TVSeries.GetEpisodePersonInfo (obj' out searchPeople);  				break;  			case TVSeries.SelectedType.Series:  				type = "series";  				validItem = TVSeries.GetSeriesInfo (obj' out title' out year' out showtvdbid);  				validItem |= TVSeries.GetSeriesPersonInfo (obj' out searchPeople);  				break;  			default:  				break;  			}  			fanart = GUIPropertyManager.GetProperty ("#TVSeries.Current.Fanart").Trim ();  			if (validItem) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  					validSearchItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  			}  		}  		// Set focus to Facade now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.TVSeries' 50);  		break;  	}  	#endregion  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (GUIWindowManager.ActiveWindow) {  case (int)ExternalPluginWindows.OnlineVideos:  	#region WatchList/CustomList Button  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  		// Confirm we are in IMDB/iTunes Trailer Details view  		// This will give us enough information to send to trakt  		bool isDetails = GUIPropertyManager.GetProperty ("#OnlineVideos.state").ToLowerInvariant () == "details";  		string siteUtil = GUIPropertyManager.GetProperty ("#OnlineVideos.selectedSiteUtil").ToLowerInvariant ();  		if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers")) {  			title = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Title").Trim ();  			year = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Year").Trim ();  			if (siteUtil == "imdb") {  				// IMDb site exposes IMDb ID' use this to get a better match on trakt  				// this property is new' check for null in case user hasn't updated site  				imdbid = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.IMDbId");  				if (imdbid == null)  					imdbid = string.Empty;  				// could be a TV Show  				type = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Type").ToLowerInvariant ();  			}  			if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt")) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  			}  			// Return focus to details list now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.OnlineVideos' 51);  		}  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.Showtimes:  	#region WatchList/CustomList Button  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  		// Confirm we are in Showtimes Details view  		// This will give us enough information to send to trakt  		bool isDetails = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow).GetControl (24).Visible;  		if (isDetails) {  			title = GUIPropertyManager.GetProperty ("#st_title").Trim ();  			DateTime releaseDate = DateTime.MinValue;  			if (DateTime.TryParse (GUIPropertyManager.GetProperty ("#st_releasedate").Trim ()' out releaseDate)) {  				year = releaseDate.Year.ToString ();  			}  			imdbid = GUIPropertyManager.GetProperty ("#st_imdb");  			if (imdbid == null)  				imdbid = string.Empty;  			tmdbid = GUIPropertyManager.GetProperty ("#st_tmdb");  			if (tmdbid == null)  				imdbid = string.Empty;  			if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  			}  			// set focus to next button so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.Showtimes' 42);  		}  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.VideoInfo:  	#region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		type = "movie";  		title = GUIPropertyManager.GetProperty ("#title").Trim ();  		year = GUIPropertyManager.GetProperty ("#year").Trim ();  		imdbid = GUIPropertyManager.GetProperty ("#imdbnumber").Trim ();  		tmdbid = (GUIPropertyManager.GetProperty ("#tmdbnumber") ?? string.Empty).Trim ();  		MediaPortal.Util.FanArt.GetFanArtfilename (title' 0' out fanart);  		if (fanart.ToLowerInvariant ().Equals ("unknown")) {  			string movieid = GUIPropertyManager.GetProperty ("#movieid").Trim ();  			MediaPortal.Util.FanArt.GetFanArtfilename (movieid' 0' out fanart);  		}  		searchPeople = new SearchPeople ();  		string people = GUIPropertyManager.GetProperty ("#cast").Trim ();  		if (people != string.Empty && people != "unknown") {  			// actors seperated by newlines  			var peopleAndRoles = people.Split ('\n').Select (s => s.Trim ());  			// each actor string also includes the role: {0} as {1} &#10;  			// get the seperator from the localised string and then reverse the formatted string  			string roleSepString = GUILocalizeStrings.Get (1320).Split (' ') [1].Trim ();  			foreach (var personAndRole in peopleAndRoles) {  				var personAndRoleStrings = personAndRole.Split (new string[] {  					string.Format (" {0} "' roleSepString)  				}' StringSplitOptions.None);  				searchPeople.Actors.Add (personAndRoleStrings.First ());  			}  		}  		people = GUIPropertyManager.GetProperty ("#director").Trim ();  		if (people != string.Empty && people != "unknown")  			searchPeople.Directors.AddRange (people.Split (''').Select (s => s.Trim ()));  		people = GUIPropertyManager.GetProperty ("#credits").Trim ();  		if (people != string.Empty && people != "unknown") {  			var writers = people.Split (''').Select (s => s.Trim ());  			foreach (var writer in writers) {  				// remove the writer type e.g. (Story)' (Screenplay)  				searchPeople.Writers.Add (writer.Split ('(').First ().Trim ());  			}  		}  		if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Rate)  				validRateItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  				validShoutItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  				validRelatedItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  				validTraktMenuItem = true;  		}  		// Set focus to Play Button now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.VideoInfo' 2);  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.MovingPictures:  	#region WatchList/CustomList/Rate/Shouts/RelatedItem/Search  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		type = "movie";  		updatePluginFilters = true;  		title = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.title").Trim ();  		year = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.year").Trim ();  		imdbid = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.imdb_id").Trim ();  		fanart = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.backdropfullpath").Trim ();  		isWatched = GUIPropertyManager.GetProperty ("#MovingPictures.UserMovieSettings.watched").Trim () != "0";  		// get movie people from database  		searchPeople = new SearchPeople ();  		if (TraktHelper.IsMovingPicturesAvailableAndEnabled) {  			int? movieID = null;  			int iYear = 0;  			int.TryParse (year' out iYear);  			if (MovingPictures.FindMovieID (title' iYear' imdbid' tmdbid.ToNullableInt32 ()' ref movieID))  				MovingPictures.GetMoviePersonInfo (movieID' out searchPeople);  		}  		if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Rate)  				validRateItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  				validShoutItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  				validRelatedItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  				validTraktMenuItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  				validSearchItem = true;  		}  		// Set focus to Play Button now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.MovingPictures' 6);  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.TVSeries:  	#region WatchList/CustomList/Rate/Shouts/Related  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		Object obj = TVSeries.SelectedObject;  		bool validItem = false;  		if (obj != null) {  			searchPeople = new SearchPeople ();  			switch (TVSeries.GetSelectedType (obj)) {  			case TVSeries.SelectedType.Episode:  				type = "episode";  				validItem = TVSeries.GetEpisodeInfo (obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);  				validItem |= TVSeries.GetEpisodePersonInfo (obj' out searchPeople);  				break;  			case TVSeries.SelectedType.Series:  				type = "series";  				validItem = TVSeries.GetSeriesInfo (obj' out title' out year' out showtvdbid);  				validItem |= TVSeries.GetSeriesPersonInfo (obj' out searchPeople);  				break;  			default:  				break;  			}  			fanart = GUIPropertyManager.GetProperty ("#TVSeries.Current.Fanart").Trim ();  			if (validItem) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  					validSearchItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  			}  		}  		// Set focus to Facade now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.TVSeries' 50);  		break;  	}  	#endregion  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (GUIWindowManager.ActiveWindow) {  case (int)ExternalPluginWindows.OnlineVideos:  	#region WatchList/CustomList Button  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  		// Confirm we are in IMDB/iTunes Trailer Details view  		// This will give us enough information to send to trakt  		bool isDetails = GUIPropertyManager.GetProperty ("#OnlineVideos.state").ToLowerInvariant () == "details";  		string siteUtil = GUIPropertyManager.GetProperty ("#OnlineVideos.selectedSiteUtil").ToLowerInvariant ();  		if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers")) {  			title = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Title").Trim ();  			year = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Year").Trim ();  			if (siteUtil == "imdb") {  				// IMDb site exposes IMDb ID' use this to get a better match on trakt  				// this property is new' check for null in case user hasn't updated site  				imdbid = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.IMDbId");  				if (imdbid == null)  					imdbid = string.Empty;  				// could be a TV Show  				type = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Type").ToLowerInvariant ();  			}  			if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt")) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  			}  			// Return focus to details list now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.OnlineVideos' 51);  		}  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.Showtimes:  	#region WatchList/CustomList Button  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  		// Confirm we are in Showtimes Details view  		// This will give us enough information to send to trakt  		bool isDetails = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow).GetControl (24).Visible;  		if (isDetails) {  			title = GUIPropertyManager.GetProperty ("#st_title").Trim ();  			DateTime releaseDate = DateTime.MinValue;  			if (DateTime.TryParse (GUIPropertyManager.GetProperty ("#st_releasedate").Trim ()' out releaseDate)) {  				year = releaseDate.Year.ToString ();  			}  			imdbid = GUIPropertyManager.GetProperty ("#st_imdb");  			if (imdbid == null)  				imdbid = string.Empty;  			tmdbid = GUIPropertyManager.GetProperty ("#st_tmdb");  			if (tmdbid == null)  				imdbid = string.Empty;  			if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  			}  			// set focus to next button so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.Showtimes' 42);  		}  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.VideoInfo:  	#region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		type = "movie";  		title = GUIPropertyManager.GetProperty ("#title").Trim ();  		year = GUIPropertyManager.GetProperty ("#year").Trim ();  		imdbid = GUIPropertyManager.GetProperty ("#imdbnumber").Trim ();  		tmdbid = (GUIPropertyManager.GetProperty ("#tmdbnumber") ?? string.Empty).Trim ();  		MediaPortal.Util.FanArt.GetFanArtfilename (title' 0' out fanart);  		if (fanart.ToLowerInvariant ().Equals ("unknown")) {  			string movieid = GUIPropertyManager.GetProperty ("#movieid").Trim ();  			MediaPortal.Util.FanArt.GetFanArtfilename (movieid' 0' out fanart);  		}  		searchPeople = new SearchPeople ();  		string people = GUIPropertyManager.GetProperty ("#cast").Trim ();  		if (people != string.Empty && people != "unknown") {  			// actors seperated by newlines  			var peopleAndRoles = people.Split ('\n').Select (s => s.Trim ());  			// each actor string also includes the role: {0} as {1} &#10;  			// get the seperator from the localised string and then reverse the formatted string  			string roleSepString = GUILocalizeStrings.Get (1320).Split (' ') [1].Trim ();  			foreach (var personAndRole in peopleAndRoles) {  				var personAndRoleStrings = personAndRole.Split (new string[] {  					string.Format (" {0} "' roleSepString)  				}' StringSplitOptions.None);  				searchPeople.Actors.Add (personAndRoleStrings.First ());  			}  		}  		people = GUIPropertyManager.GetProperty ("#director").Trim ();  		if (people != string.Empty && people != "unknown")  			searchPeople.Directors.AddRange (people.Split (''').Select (s => s.Trim ()));  		people = GUIPropertyManager.GetProperty ("#credits").Trim ();  		if (people != string.Empty && people != "unknown") {  			var writers = people.Split (''').Select (s => s.Trim ());  			foreach (var writer in writers) {  				// remove the writer type e.g. (Story)' (Screenplay)  				searchPeople.Writers.Add (writer.Split ('(').First ().Trim ());  			}  		}  		if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Rate)  				validRateItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  				validShoutItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  				validRelatedItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  				validTraktMenuItem = true;  		}  		// Set focus to Play Button now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.VideoInfo' 2);  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.MovingPictures:  	#region WatchList/CustomList/Rate/Shouts/RelatedItem/Search  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		type = "movie";  		updatePluginFilters = true;  		title = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.title").Trim ();  		year = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.year").Trim ();  		imdbid = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.imdb_id").Trim ();  		fanart = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.backdropfullpath").Trim ();  		isWatched = GUIPropertyManager.GetProperty ("#MovingPictures.UserMovieSettings.watched").Trim () != "0";  		// get movie people from database  		searchPeople = new SearchPeople ();  		if (TraktHelper.IsMovingPicturesAvailableAndEnabled) {  			int? movieID = null;  			int iYear = 0;  			int.TryParse (year' out iYear);  			if (MovingPictures.FindMovieID (title' iYear' imdbid' tmdbid.ToNullableInt32 ()' ref movieID))  				MovingPictures.GetMoviePersonInfo (movieID' out searchPeople);  		}  		if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Rate)  				validRateItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  				validShoutItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  				validRelatedItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  				validTraktMenuItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  				validSearchItem = true;  		}  		// Set focus to Play Button now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.MovingPictures' 6);  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.TVSeries:  	#region WatchList/CustomList/Rate/Shouts/Related  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		Object obj = TVSeries.SelectedObject;  		bool validItem = false;  		if (obj != null) {  			searchPeople = new SearchPeople ();  			switch (TVSeries.GetSelectedType (obj)) {  			case TVSeries.SelectedType.Episode:  				type = "episode";  				validItem = TVSeries.GetEpisodeInfo (obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);  				validItem |= TVSeries.GetEpisodePersonInfo (obj' out searchPeople);  				break;  			case TVSeries.SelectedType.Series:  				type = "series";  				validItem = TVSeries.GetSeriesInfo (obj' out title' out year' out showtvdbid);  				validItem |= TVSeries.GetSeriesPersonInfo (obj' out searchPeople);  				break;  			default:  				break;  			}  			fanart = GUIPropertyManager.GetProperty ("#TVSeries.Current.Fanart").Trim ();  			if (validItem) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  					validSearchItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  			}  		}  		// Set focus to Facade now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.TVSeries' 50);  		break;  	}  	#endregion  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (GUIWindowManager.ActiveWindow) {  case (int)ExternalPluginWindows.OnlineVideos:  	#region WatchList/CustomList Button  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  		// Confirm we are in IMDB/iTunes Trailer Details view  		// This will give us enough information to send to trakt  		bool isDetails = GUIPropertyManager.GetProperty ("#OnlineVideos.state").ToLowerInvariant () == "details";  		string siteUtil = GUIPropertyManager.GetProperty ("#OnlineVideos.selectedSiteUtil").ToLowerInvariant ();  		if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers")) {  			title = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Title").Trim ();  			year = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Year").Trim ();  			if (siteUtil == "imdb") {  				// IMDb site exposes IMDb ID' use this to get a better match on trakt  				// this property is new' check for null in case user hasn't updated site  				imdbid = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.IMDbId");  				if (imdbid == null)  					imdbid = string.Empty;  				// could be a TV Show  				type = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Type").ToLowerInvariant ();  			}  			if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt")) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  			}  			// Return focus to details list now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.OnlineVideos' 51);  		}  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.Showtimes:  	#region WatchList/CustomList Button  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  		// Confirm we are in Showtimes Details view  		// This will give us enough information to send to trakt  		bool isDetails = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow).GetControl (24).Visible;  		if (isDetails) {  			title = GUIPropertyManager.GetProperty ("#st_title").Trim ();  			DateTime releaseDate = DateTime.MinValue;  			if (DateTime.TryParse (GUIPropertyManager.GetProperty ("#st_releasedate").Trim ()' out releaseDate)) {  				year = releaseDate.Year.ToString ();  			}  			imdbid = GUIPropertyManager.GetProperty ("#st_imdb");  			if (imdbid == null)  				imdbid = string.Empty;  			tmdbid = GUIPropertyManager.GetProperty ("#st_tmdb");  			if (tmdbid == null)  				imdbid = string.Empty;  			if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  			}  			// set focus to next button so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.Showtimes' 42);  		}  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.VideoInfo:  	#region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		type = "movie";  		title = GUIPropertyManager.GetProperty ("#title").Trim ();  		year = GUIPropertyManager.GetProperty ("#year").Trim ();  		imdbid = GUIPropertyManager.GetProperty ("#imdbnumber").Trim ();  		tmdbid = (GUIPropertyManager.GetProperty ("#tmdbnumber") ?? string.Empty).Trim ();  		MediaPortal.Util.FanArt.GetFanArtfilename (title' 0' out fanart);  		if (fanart.ToLowerInvariant ().Equals ("unknown")) {  			string movieid = GUIPropertyManager.GetProperty ("#movieid").Trim ();  			MediaPortal.Util.FanArt.GetFanArtfilename (movieid' 0' out fanart);  		}  		searchPeople = new SearchPeople ();  		string people = GUIPropertyManager.GetProperty ("#cast").Trim ();  		if (people != string.Empty && people != "unknown") {  			// actors seperated by newlines  			var peopleAndRoles = people.Split ('\n').Select (s => s.Trim ());  			// each actor string also includes the role: {0} as {1} &#10;  			// get the seperator from the localised string and then reverse the formatted string  			string roleSepString = GUILocalizeStrings.Get (1320).Split (' ') [1].Trim ();  			foreach (var personAndRole in peopleAndRoles) {  				var personAndRoleStrings = personAndRole.Split (new string[] {  					string.Format (" {0} "' roleSepString)  				}' StringSplitOptions.None);  				searchPeople.Actors.Add (personAndRoleStrings.First ());  			}  		}  		people = GUIPropertyManager.GetProperty ("#director").Trim ();  		if (people != string.Empty && people != "unknown")  			searchPeople.Directors.AddRange (people.Split (''').Select (s => s.Trim ()));  		people = GUIPropertyManager.GetProperty ("#credits").Trim ();  		if (people != string.Empty && people != "unknown") {  			var writers = people.Split (''').Select (s => s.Trim ());  			foreach (var writer in writers) {  				// remove the writer type e.g. (Story)' (Screenplay)  				searchPeople.Writers.Add (writer.Split ('(').First ().Trim ());  			}  		}  		if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Rate)  				validRateItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  				validShoutItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  				validRelatedItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  				validTraktMenuItem = true;  		}  		// Set focus to Play Button now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.VideoInfo' 2);  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.MovingPictures:  	#region WatchList/CustomList/Rate/Shouts/RelatedItem/Search  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		type = "movie";  		updatePluginFilters = true;  		title = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.title").Trim ();  		year = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.year").Trim ();  		imdbid = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.imdb_id").Trim ();  		fanart = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.backdropfullpath").Trim ();  		isWatched = GUIPropertyManager.GetProperty ("#MovingPictures.UserMovieSettings.watched").Trim () != "0";  		// get movie people from database  		searchPeople = new SearchPeople ();  		if (TraktHelper.IsMovingPicturesAvailableAndEnabled) {  			int? movieID = null;  			int iYear = 0;  			int.TryParse (year' out iYear);  			if (MovingPictures.FindMovieID (title' iYear' imdbid' tmdbid.ToNullableInt32 ()' ref movieID))  				MovingPictures.GetMoviePersonInfo (movieID' out searchPeople);  		}  		if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Rate)  				validRateItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  				validShoutItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  				validRelatedItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  				validTraktMenuItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  				validSearchItem = true;  		}  		// Set focus to Play Button now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.MovingPictures' 6);  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.TVSeries:  	#region WatchList/CustomList/Rate/Shouts/Related  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		Object obj = TVSeries.SelectedObject;  		bool validItem = false;  		if (obj != null) {  			searchPeople = new SearchPeople ();  			switch (TVSeries.GetSelectedType (obj)) {  			case TVSeries.SelectedType.Episode:  				type = "episode";  				validItem = TVSeries.GetEpisodeInfo (obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);  				validItem |= TVSeries.GetEpisodePersonInfo (obj' out searchPeople);  				break;  			case TVSeries.SelectedType.Series:  				type = "series";  				validItem = TVSeries.GetSeriesInfo (obj' out title' out year' out showtvdbid);  				validItem |= TVSeries.GetSeriesPersonInfo (obj' out searchPeople);  				break;  			default:  				break;  			}  			fanart = GUIPropertyManager.GetProperty ("#TVSeries.Current.Fanart").Trim ();  			if (validItem) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  					validSearchItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  			}  		}  		// Set focus to Facade now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.TVSeries' 50);  		break;  	}  	#endregion  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (GUIWindowManager.ActiveWindow) {  case (int)ExternalPluginWindows.OnlineVideos:  	#region WatchList/CustomList Button  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  		// Confirm we are in IMDB/iTunes Trailer Details view  		// This will give us enough information to send to trakt  		bool isDetails = GUIPropertyManager.GetProperty ("#OnlineVideos.state").ToLowerInvariant () == "details";  		string siteUtil = GUIPropertyManager.GetProperty ("#OnlineVideos.selectedSiteUtil").ToLowerInvariant ();  		if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers")) {  			title = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Title").Trim ();  			year = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Year").Trim ();  			if (siteUtil == "imdb") {  				// IMDb site exposes IMDb ID' use this to get a better match on trakt  				// this property is new' check for null in case user hasn't updated site  				imdbid = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.IMDbId");  				if (imdbid == null)  					imdbid = string.Empty;  				// could be a TV Show  				type = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Type").ToLowerInvariant ();  			}  			if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt")) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  			}  			// Return focus to details list now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.OnlineVideos' 51);  		}  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.Showtimes:  	#region WatchList/CustomList Button  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  		// Confirm we are in Showtimes Details view  		// This will give us enough information to send to trakt  		bool isDetails = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow).GetControl (24).Visible;  		if (isDetails) {  			title = GUIPropertyManager.GetProperty ("#st_title").Trim ();  			DateTime releaseDate = DateTime.MinValue;  			if (DateTime.TryParse (GUIPropertyManager.GetProperty ("#st_releasedate").Trim ()' out releaseDate)) {  				year = releaseDate.Year.ToString ();  			}  			imdbid = GUIPropertyManager.GetProperty ("#st_imdb");  			if (imdbid == null)  				imdbid = string.Empty;  			tmdbid = GUIPropertyManager.GetProperty ("#st_tmdb");  			if (tmdbid == null)  				imdbid = string.Empty;  			if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  			}  			// set focus to next button so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.Showtimes' 42);  		}  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.VideoInfo:  	#region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		type = "movie";  		title = GUIPropertyManager.GetProperty ("#title").Trim ();  		year = GUIPropertyManager.GetProperty ("#year").Trim ();  		imdbid = GUIPropertyManager.GetProperty ("#imdbnumber").Trim ();  		tmdbid = (GUIPropertyManager.GetProperty ("#tmdbnumber") ?? string.Empty).Trim ();  		MediaPortal.Util.FanArt.GetFanArtfilename (title' 0' out fanart);  		if (fanart.ToLowerInvariant ().Equals ("unknown")) {  			string movieid = GUIPropertyManager.GetProperty ("#movieid").Trim ();  			MediaPortal.Util.FanArt.GetFanArtfilename (movieid' 0' out fanart);  		}  		searchPeople = new SearchPeople ();  		string people = GUIPropertyManager.GetProperty ("#cast").Trim ();  		if (people != string.Empty && people != "unknown") {  			// actors seperated by newlines  			var peopleAndRoles = people.Split ('\n').Select (s => s.Trim ());  			// each actor string also includes the role: {0} as {1} &#10;  			// get the seperator from the localised string and then reverse the formatted string  			string roleSepString = GUILocalizeStrings.Get (1320).Split (' ') [1].Trim ();  			foreach (var personAndRole in peopleAndRoles) {  				var personAndRoleStrings = personAndRole.Split (new string[] {  					string.Format (" {0} "' roleSepString)  				}' StringSplitOptions.None);  				searchPeople.Actors.Add (personAndRoleStrings.First ());  			}  		}  		people = GUIPropertyManager.GetProperty ("#director").Trim ();  		if (people != string.Empty && people != "unknown")  			searchPeople.Directors.AddRange (people.Split (''').Select (s => s.Trim ()));  		people = GUIPropertyManager.GetProperty ("#credits").Trim ();  		if (people != string.Empty && people != "unknown") {  			var writers = people.Split (''').Select (s => s.Trim ());  			foreach (var writer in writers) {  				// remove the writer type e.g. (Story)' (Screenplay)  				searchPeople.Writers.Add (writer.Split ('(').First ().Trim ());  			}  		}  		if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Rate)  				validRateItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  				validShoutItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  				validRelatedItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  				validTraktMenuItem = true;  		}  		// Set focus to Play Button now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.VideoInfo' 2);  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.MovingPictures:  	#region WatchList/CustomList/Rate/Shouts/RelatedItem/Search  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		type = "movie";  		updatePluginFilters = true;  		title = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.title").Trim ();  		year = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.year").Trim ();  		imdbid = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.imdb_id").Trim ();  		fanart = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.backdropfullpath").Trim ();  		isWatched = GUIPropertyManager.GetProperty ("#MovingPictures.UserMovieSettings.watched").Trim () != "0";  		// get movie people from database  		searchPeople = new SearchPeople ();  		if (TraktHelper.IsMovingPicturesAvailableAndEnabled) {  			int? movieID = null;  			int iYear = 0;  			int.TryParse (year' out iYear);  			if (MovingPictures.FindMovieID (title' iYear' imdbid' tmdbid.ToNullableInt32 ()' ref movieID))  				MovingPictures.GetMoviePersonInfo (movieID' out searchPeople);  		}  		if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Rate)  				validRateItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  				validShoutItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  				validRelatedItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  				validTraktMenuItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  				validSearchItem = true;  		}  		// Set focus to Play Button now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.MovingPictures' 6);  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.TVSeries:  	#region WatchList/CustomList/Rate/Shouts/Related  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		Object obj = TVSeries.SelectedObject;  		bool validItem = false;  		if (obj != null) {  			searchPeople = new SearchPeople ();  			switch (TVSeries.GetSelectedType (obj)) {  			case TVSeries.SelectedType.Episode:  				type = "episode";  				validItem = TVSeries.GetEpisodeInfo (obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);  				validItem |= TVSeries.GetEpisodePersonInfo (obj' out searchPeople);  				break;  			case TVSeries.SelectedType.Series:  				type = "series";  				validItem = TVSeries.GetSeriesInfo (obj' out title' out year' out showtvdbid);  				validItem |= TVSeries.GetSeriesPersonInfo (obj' out searchPeople);  				break;  			default:  				break;  			}  			fanart = GUIPropertyManager.GetProperty ("#TVSeries.Current.Fanart").Trim ();  			if (validItem) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  					validSearchItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  			}  		}  		// Set focus to Facade now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.TVSeries' 50);  		break;  	}  	#endregion  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (GUIWindowManager.ActiveWindow) {  case (int)ExternalPluginWindows.OnlineVideos:  	#region WatchList/CustomList Button  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  		// Confirm we are in IMDB/iTunes Trailer Details view  		// This will give us enough information to send to trakt  		bool isDetails = GUIPropertyManager.GetProperty ("#OnlineVideos.state").ToLowerInvariant () == "details";  		string siteUtil = GUIPropertyManager.GetProperty ("#OnlineVideos.selectedSiteUtil").ToLowerInvariant ();  		if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers")) {  			title = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Title").Trim ();  			year = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Year").Trim ();  			if (siteUtil == "imdb") {  				// IMDb site exposes IMDb ID' use this to get a better match on trakt  				// this property is new' check for null in case user hasn't updated site  				imdbid = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.IMDbId");  				if (imdbid == null)  					imdbid = string.Empty;  				// could be a TV Show  				type = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Type").ToLowerInvariant ();  			}  			if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt")) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  			}  			// Return focus to details list now so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.OnlineVideos' 51);  		}  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.Showtimes:  	#region WatchList/CustomList Button  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  		// Confirm we are in Showtimes Details view  		// This will give us enough information to send to trakt  		bool isDetails = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow).GetControl (24).Visible;  		if (isDetails) {  			title = GUIPropertyManager.GetProperty ("#st_title").Trim ();  			DateTime releaseDate = DateTime.MinValue;  			if (DateTime.TryParse (GUIPropertyManager.GetProperty ("#st_releasedate").Trim ()' out releaseDate)) {  				year = releaseDate.Year.ToString ();  			}  			imdbid = GUIPropertyManager.GetProperty ("#st_imdb");  			if (imdbid == null)  				imdbid = string.Empty;  			tmdbid = GUIPropertyManager.GetProperty ("#st_tmdb");  			if (tmdbid == null)  				imdbid = string.Empty;  			if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  			}  			// set focus to next button so we dont go in a loop  			GUIControl.FocusControl ((int)ExternalPluginWindows.Showtimes' 42);  		}  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.VideoInfo:  	#region Watchlist/CustomList/Rate/Shouts/RelatedItem/SearchBy  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		type = "movie";  		title = GUIPropertyManager.GetProperty ("#title").Trim ();  		year = GUIPropertyManager.GetProperty ("#year").Trim ();  		imdbid = GUIPropertyManager.GetProperty ("#imdbnumber").Trim ();  		tmdbid = (GUIPropertyManager.GetProperty ("#tmdbnumber") ?? string.Empty).Trim ();  		MediaPortal.Util.FanArt.GetFanArtfilename (title' 0' out fanart);  		if (fanart.ToLowerInvariant ().Equals ("unknown")) {  			string movieid = GUIPropertyManager.GetProperty ("#movieid").Trim ();  			MediaPortal.Util.FanArt.GetFanArtfilename (movieid' 0' out fanart);  		}  		searchPeople = new SearchPeople ();  		string people = GUIPropertyManager.GetProperty ("#cast").Trim ();  		if (people != string.Empty && people != "unknown") {  			// actors seperated by newlines  			var peopleAndRoles = people.Split ('\n').Select (s => s.Trim ());  			// each actor string also includes the role: {0} as {1} &#10;  			// get the seperator from the localised string and then reverse the formatted string  			string roleSepString = GUILocalizeStrings.Get (1320).Split (' ') [1].Trim ();  			foreach (var personAndRole in peopleAndRoles) {  				var personAndRoleStrings = personAndRole.Split (new string[] {  					string.Format (" {0} "' roleSepString)  				}' StringSplitOptions.None);  				searchPeople.Actors.Add (personAndRoleStrings.First ());  			}  		}  		people = GUIPropertyManager.GetProperty ("#director").Trim ();  		if (people != string.Empty && people != "unknown")  			searchPeople.Directors.AddRange (people.Split (''').Select (s => s.Trim ()));  		people = GUIPropertyManager.GetProperty ("#credits").Trim ();  		if (people != string.Empty && people != "unknown") {  			var writers = people.Split (''').Select (s => s.Trim ());  			foreach (var writer in writers) {  				// remove the writer type e.g. (Story)' (Screenplay)  				searchPeople.Writers.Add (writer.Split ('(').First ().Trim ());  			}  		}  		if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Rate)  				validRateItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  				validShoutItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  				validRelatedItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  				validTraktMenuItem = true;  		}  		// Set focus to Play Button now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.VideoInfo' 2);  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.MovingPictures:  	#region WatchList/CustomList/Rate/Shouts/RelatedItem/Search  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		type = "movie";  		updatePluginFilters = true;  		title = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.title").Trim ();  		year = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.year").Trim ();  		imdbid = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.imdb_id").Trim ();  		fanart = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.backdropfullpath").Trim ();  		isWatched = GUIPropertyManager.GetProperty ("#MovingPictures.UserMovieSettings.watched").Trim () != "0";  		// get movie people from database  		searchPeople = new SearchPeople ();  		if (TraktHelper.IsMovingPicturesAvailableAndEnabled) {  			int? movieID = null;  			int iYear = 0;  			int.TryParse (year' out iYear);  			if (MovingPictures.FindMovieID (title' iYear' imdbid' tmdbid.ToNullableInt32 ()' ref movieID))  				MovingPictures.GetMoviePersonInfo (movieID' out searchPeople);  		}  		if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Rate)  				validRateItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  				validShoutItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  				validRelatedItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  				validTraktMenuItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  				validSearchItem = true;  		}  		// Set focus to Play Button now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.MovingPictures' 6);  		break;  	}  	#endregion  	break;  case (int)ExternalPluginWindows.TVSeries:  	#region WatchList/CustomList/Rate/Shouts/Related  	switch (message.SenderControlId) {  	case ((int)ExternalPluginControls.WatchList):  	case ((int)ExternalPluginControls.CustomList):  	case ((int)ExternalPluginControls.Rate):  	case ((int)ExternalPluginControls.Shouts):  	case ((int)ExternalPluginControls.RelatedItems):  	case ((int)ExternalPluginControls.SearchBy):  	case ((int)ExternalPluginControls.TraktMenu):  		Object obj = TVSeries.SelectedObject;  		bool validItem = false;  		if (obj != null) {  			searchPeople = new SearchPeople ();  			switch (TVSeries.GetSelectedType (obj)) {  			case TVSeries.SelectedType.Episode:  				type = "episode";  				validItem = TVSeries.GetEpisodeInfo (obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);  				validItem |= TVSeries.GetEpisodePersonInfo (obj' out searchPeople);  				break;  			case TVSeries.SelectedType.Series:  				type = "series";  				validItem = TVSeries.GetSeriesInfo (obj' out title' out year' out showtvdbid);  				validItem |= TVSeries.GetSeriesPersonInfo (obj' out searchPeople);  				break;  			default:  				break;  			}  			fanart = GUIPropertyManager.GetProperty ("#TVSeries.Current.Fanart").Trim ();  			if (validItem) {  				if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  					validWatchListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  					validCustomListItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Rate)  					validRateItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  					validShoutItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  					validRelatedItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  					validSearchItem = true;  				if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  					validTraktMenuItem = true;  			}  		}  		// Set focus to Facade now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.TVSeries' 50);  		break;  	}  	#endregion  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.SenderControlId) {  case ((int)ExternalPluginControls.WatchList):  case ((int)ExternalPluginControls.CustomList):  	// Confirm we are in IMDB/iTunes Trailer Details view  	// This will give us enough information to send to trakt  	bool isDetails = GUIPropertyManager.GetProperty ("#OnlineVideos.state").ToLowerInvariant () == "details";  	string siteUtil = GUIPropertyManager.GetProperty ("#OnlineVideos.selectedSiteUtil").ToLowerInvariant ();  	if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers")) {  		title = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Title").Trim ();  		year = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Year").Trim ();  		if (siteUtil == "imdb") {  			// IMDb site exposes IMDb ID' use this to get a better match on trakt  			// this property is new' check for null in case user hasn't updated site  			imdbid = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.IMDbId");  			if (imdbid == null)  				imdbid = string.Empty;  			// could be a TV Show  			type = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Type").ToLowerInvariant ();  		}  		if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt")) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  		}  		// Return focus to details list now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.OnlineVideos' 51);  	}  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers")) {  	title = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Title").Trim ();  	year = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Year").Trim ();  	if (siteUtil == "imdb") {  		// IMDb site exposes IMDb ID' use this to get a better match on trakt  		// this property is new' check for null in case user hasn't updated site  		imdbid = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.IMDbId");  		if (imdbid == null)  			imdbid = string.Empty;  		// could be a TV Show  		type = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Type").ToLowerInvariant ();  	}  	if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt")) {  		if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  			validWatchListItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  			validCustomListItem = true;  	}  	// Return focus to details list now so we dont go in a loop  	GUIControl.FocusControl ((int)ExternalPluginWindows.OnlineVideos' 51);  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: GUIControl.FocusControl ((int)ExternalPluginWindows.OnlineVideos' 51);  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.SenderControlId) {  case ((int)ExternalPluginControls.WatchList):  case ((int)ExternalPluginControls.CustomList):  	// Confirm we are in Showtimes Details view  	// This will give us enough information to send to trakt  	bool isDetails = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow).GetControl (24).Visible;  	if (isDetails) {  		title = GUIPropertyManager.GetProperty ("#st_title").Trim ();  		DateTime releaseDate = DateTime.MinValue;  		if (DateTime.TryParse (GUIPropertyManager.GetProperty ("#st_releasedate").Trim ()' out releaseDate)) {  			year = releaseDate.Year.ToString ();  		}  		imdbid = GUIPropertyManager.GetProperty ("#st_imdb");  		if (imdbid == null)  			imdbid = string.Empty;  		tmdbid = GUIPropertyManager.GetProperty ("#st_tmdb");  		if (tmdbid == null)  			imdbid = string.Empty;  		if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  		}  		// set focus to next button so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.Showtimes' 42);  	}  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.SenderControlId) {  case ((int)ExternalPluginControls.WatchList):  case ((int)ExternalPluginControls.CustomList):  	// Confirm we are in Showtimes Details view  	// This will give us enough information to send to trakt  	bool isDetails = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow).GetControl (24).Visible;  	if (isDetails) {  		title = GUIPropertyManager.GetProperty ("#st_title").Trim ();  		DateTime releaseDate = DateTime.MinValue;  		if (DateTime.TryParse (GUIPropertyManager.GetProperty ("#st_releasedate").Trim ()' out releaseDate)) {  			year = releaseDate.Year.ToString ();  		}  		imdbid = GUIPropertyManager.GetProperty ("#st_imdb");  		if (imdbid == null)  			imdbid = string.Empty;  		tmdbid = GUIPropertyManager.GetProperty ("#st_tmdb");  		if (tmdbid == null)  			imdbid = string.Empty;  		if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  		}  		// set focus to next button so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.Showtimes' 42);  	}  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: if (isDetails) {  	title = GUIPropertyManager.GetProperty ("#st_title").Trim ();  	DateTime releaseDate = DateTime.MinValue;  	if (DateTime.TryParse (GUIPropertyManager.GetProperty ("#st_releasedate").Trim ()' out releaseDate)) {  		year = releaseDate.Year.ToString ();  	}  	imdbid = GUIPropertyManager.GetProperty ("#st_imdb");  	if (imdbid == null)  		imdbid = string.Empty;  	tmdbid = GUIPropertyManager.GetProperty ("#st_tmdb");  	if (tmdbid == null)  		imdbid = string.Empty;  	if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)) {  		if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  			validWatchListItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  			validCustomListItem = true;  	}  	// set focus to next button so we dont go in a loop  	GUIControl.FocusControl ((int)ExternalPluginWindows.Showtimes' 42);  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: GUIControl.FocusControl ((int)ExternalPluginWindows.Showtimes' 42);  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.SenderControlId) {  case ((int)ExternalPluginControls.WatchList):  case ((int)ExternalPluginControls.CustomList):  case ((int)ExternalPluginControls.Rate):  case ((int)ExternalPluginControls.Shouts):  case ((int)ExternalPluginControls.RelatedItems):  case ((int)ExternalPluginControls.SearchBy):  case ((int)ExternalPluginControls.TraktMenu):  	type = "movie";  	title = GUIPropertyManager.GetProperty ("#title").Trim ();  	year = GUIPropertyManager.GetProperty ("#year").Trim ();  	imdbid = GUIPropertyManager.GetProperty ("#imdbnumber").Trim ();  	tmdbid = (GUIPropertyManager.GetProperty ("#tmdbnumber") ?? string.Empty).Trim ();  	MediaPortal.Util.FanArt.GetFanArtfilename (title' 0' out fanart);  	if (fanart.ToLowerInvariant ().Equals ("unknown")) {  		string movieid = GUIPropertyManager.GetProperty ("#movieid").Trim ();  		MediaPortal.Util.FanArt.GetFanArtfilename (movieid' 0' out fanart);  	}  	searchPeople = new SearchPeople ();  	string people = GUIPropertyManager.GetProperty ("#cast").Trim ();  	if (people != string.Empty && people != "unknown") {  		// actors seperated by newlines  		var peopleAndRoles = people.Split ('\n').Select (s => s.Trim ());  		// each actor string also includes the role: {0} as {1} &#10;  		// get the seperator from the localised string and then reverse the formatted string  		string roleSepString = GUILocalizeStrings.Get (1320).Split (' ') [1].Trim ();  		foreach (var personAndRole in peopleAndRoles) {  			var personAndRoleStrings = personAndRole.Split (new string[] {  				string.Format (" {0} "' roleSepString)  			}' StringSplitOptions.None);  			searchPeople.Actors.Add (personAndRoleStrings.First ());  		}  	}  	people = GUIPropertyManager.GetProperty ("#director").Trim ();  	if (people != string.Empty && people != "unknown")  		searchPeople.Directors.AddRange (people.Split (''').Select (s => s.Trim ()));  	people = GUIPropertyManager.GetProperty ("#credits").Trim ();  	if (people != string.Empty && people != "unknown") {  		var writers = people.Split (''').Select (s => s.Trim ());  		foreach (var writer in writers) {  			// remove the writer type e.g. (Story)' (Screenplay)  			searchPeople.Writers.Add (writer.Split ('(').First ().Trim ());  		}  	}  	if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  		if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  			validWatchListItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  			validCustomListItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.Rate)  			validRateItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  			validShoutItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  			validRelatedItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  			validTraktMenuItem = true;  	}  	// Set focus to Play Button now so we dont go in a loop  	GUIControl.FocusControl ((int)ExternalPluginWindows.VideoInfo' 2);  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.SenderControlId) {  case ((int)ExternalPluginControls.WatchList):  case ((int)ExternalPluginControls.CustomList):  case ((int)ExternalPluginControls.Rate):  case ((int)ExternalPluginControls.Shouts):  case ((int)ExternalPluginControls.RelatedItems):  case ((int)ExternalPluginControls.SearchBy):  case ((int)ExternalPluginControls.TraktMenu):  	type = "movie";  	title = GUIPropertyManager.GetProperty ("#title").Trim ();  	year = GUIPropertyManager.GetProperty ("#year").Trim ();  	imdbid = GUIPropertyManager.GetProperty ("#imdbnumber").Trim ();  	tmdbid = (GUIPropertyManager.GetProperty ("#tmdbnumber") ?? string.Empty).Trim ();  	MediaPortal.Util.FanArt.GetFanArtfilename (title' 0' out fanart);  	if (fanart.ToLowerInvariant ().Equals ("unknown")) {  		string movieid = GUIPropertyManager.GetProperty ("#movieid").Trim ();  		MediaPortal.Util.FanArt.GetFanArtfilename (movieid' 0' out fanart);  	}  	searchPeople = new SearchPeople ();  	string people = GUIPropertyManager.GetProperty ("#cast").Trim ();  	if (people != string.Empty && people != "unknown") {  		// actors seperated by newlines  		var peopleAndRoles = people.Split ('\n').Select (s => s.Trim ());  		// each actor string also includes the role: {0} as {1} &#10;  		// get the seperator from the localised string and then reverse the formatted string  		string roleSepString = GUILocalizeStrings.Get (1320).Split (' ') [1].Trim ();  		foreach (var personAndRole in peopleAndRoles) {  			var personAndRoleStrings = personAndRole.Split (new string[] {  				string.Format (" {0} "' roleSepString)  			}' StringSplitOptions.None);  			searchPeople.Actors.Add (personAndRoleStrings.First ());  		}  	}  	people = GUIPropertyManager.GetProperty ("#director").Trim ();  	if (people != string.Empty && people != "unknown")  		searchPeople.Directors.AddRange (people.Split (''').Select (s => s.Trim ()));  	people = GUIPropertyManager.GetProperty ("#credits").Trim ();  	if (people != string.Empty && people != "unknown") {  		var writers = people.Split (''').Select (s => s.Trim ());  		foreach (var writer in writers) {  			// remove the writer type e.g. (Story)' (Screenplay)  			searchPeople.Writers.Add (writer.Split ('(').First ().Trim ());  		}  	}  	if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  		if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  			validWatchListItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  			validCustomListItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.Rate)  			validRateItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  			validShoutItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  			validRelatedItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  			validTraktMenuItem = true;  	}  	// Set focus to Play Button now so we dont go in a loop  	GUIControl.FocusControl ((int)ExternalPluginWindows.VideoInfo' 2);  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: if (people != string.Empty && people != "unknown") {  	// actors seperated by newlines  	var peopleAndRoles = people.Split ('\n').Select (s => s.Trim ());  	// each actor string also includes the role: {0} as {1} &#10;  	// get the seperator from the localised string and then reverse the formatted string  	string roleSepString = GUILocalizeStrings.Get (1320).Split (' ') [1].Trim ();  	foreach (var personAndRole in peopleAndRoles) {  		var personAndRoleStrings = personAndRole.Split (new string[] {  			string.Format (" {0} "' roleSepString)  		}' StringSplitOptions.None);  		searchPeople.Actors.Add (personAndRoleStrings.First ());  	}  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: GUIControl.FocusControl ((int)ExternalPluginWindows.VideoInfo' 2);  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.SenderControlId) {  case ((int)ExternalPluginControls.WatchList):  case ((int)ExternalPluginControls.CustomList):  case ((int)ExternalPluginControls.Rate):  case ((int)ExternalPluginControls.Shouts):  case ((int)ExternalPluginControls.RelatedItems):  case ((int)ExternalPluginControls.SearchBy):  case ((int)ExternalPluginControls.TraktMenu):  	type = "movie";  	updatePluginFilters = true;  	title = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.title").Trim ();  	year = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.year").Trim ();  	imdbid = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.imdb_id").Trim ();  	fanart = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.backdropfullpath").Trim ();  	isWatched = GUIPropertyManager.GetProperty ("#MovingPictures.UserMovieSettings.watched").Trim () != "0";  	// get movie people from database  	searchPeople = new SearchPeople ();  	if (TraktHelper.IsMovingPicturesAvailableAndEnabled) {  		int? movieID = null;  		int iYear = 0;  		int.TryParse (year' out iYear);  		if (MovingPictures.FindMovieID (title' iYear' imdbid' tmdbid.ToNullableInt32 ()' ref movieID))  			MovingPictures.GetMoviePersonInfo (movieID' out searchPeople);  	}  	if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  		if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  			validWatchListItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  			validCustomListItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.Rate)  			validRateItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  			validShoutItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  			validRelatedItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  			validTraktMenuItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  			validSearchItem = true;  	}  	// Set focus to Play Button now so we dont go in a loop  	GUIControl.FocusControl ((int)ExternalPluginWindows.MovingPictures' 6);  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: GUIControl.FocusControl ((int)ExternalPluginWindows.MovingPictures' 6);  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: switch (message.SenderControlId) {  case ((int)ExternalPluginControls.WatchList):  case ((int)ExternalPluginControls.CustomList):  case ((int)ExternalPluginControls.Rate):  case ((int)ExternalPluginControls.Shouts):  case ((int)ExternalPluginControls.RelatedItems):  case ((int)ExternalPluginControls.SearchBy):  case ((int)ExternalPluginControls.TraktMenu):  	Object obj = TVSeries.SelectedObject;  	bool validItem = false;  	if (obj != null) {  		searchPeople = new SearchPeople ();  		switch (TVSeries.GetSelectedType (obj)) {  		case TVSeries.SelectedType.Episode:  			type = "episode";  			validItem = TVSeries.GetEpisodeInfo (obj' out title' out year' out showtvdbid' out epTvdbId' out season' out episode' out isWatched);  			validItem |= TVSeries.GetEpisodePersonInfo (obj' out searchPeople);  			break;  		case TVSeries.SelectedType.Series:  			type = "series";  			validItem = TVSeries.GetSeriesInfo (obj' out title' out year' out showtvdbid);  			validItem |= TVSeries.GetSeriesPersonInfo (obj' out searchPeople);  			break;  		default:  			break;  		}  		fanart = GUIPropertyManager.GetProperty ("#TVSeries.Current.Fanart").Trim ();  		if (validItem) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Rate)  				validRateItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  				validShoutItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  				validRelatedItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  				validSearchItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  				validTraktMenuItem = true;  		}  	}  	// Set focus to Facade now so we dont go in a loop  	GUIControl.FocusControl ((int)ExternalPluginWindows.TVSeries' 50);  	break;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following statement contains a magic number: GUIControl.FocusControl ((int)ExternalPluginWindows.TVSeries' 50);  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,SystemEvents_PowerModeChanged,The following statement contains a magic number: if (e.Mode == Microsoft.Win32.PowerModes.Resume) {  	TraktLogger.Info ("Trakt has detected that the system is resuming from standby mode");  	// determine when next library sync is due  	var nextSyncDate = SyncStartTime.Add (TimeSpan.FromHours (TraktSettings.SyncTimerLength));  	// determine how long to wait from 'now' to start the next sync' set the start delay if it is 'now'  	int startDelay = nextSyncDate <= DateTime.Now ? TraktSettings.SyncStartDelay : (int)(nextSyncDate.Subtract (DateTime.Now).TotalMilliseconds);  	TraktLogger.Info ("Last library sync started at {0}' next sync will start at {1}"' SyncStartTime' DateTime.Now.Add (new TimeSpan (0' 0' 0' 0' startDelay)));  	// initialise timer for library sync  	ChangeSyncTimer (startDelay' TraktSettings.SyncTimerLength * 3600000);  	// start sync of playback (resume) data to plugins  	SyncPlayback ();  } else if (e.Mode == Microsoft.Win32.PowerModes.Suspend) {  	TraktLogger.Info ("Trakt has detected that system is entering into standby mode");  	// stop timer so it doesn't immediately start syncing users library after next resume from standby  	ChangeSyncTimer (Timeout.Infinite' Timeout.Infinite);  	// check state of connection if invalid such that it can be checked again on resume  	if (TraktSettings._AccountStatus == ConnectionState.Invalid)  		TraktSettings._AccountStatus = ConnectionState.Pending;  }  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,SystemEvents_PowerModeChanged,The following statement contains a magic number: ChangeSyncTimer (startDelay' TraktSettings.SyncTimerLength * 3600000);  
Magic Number,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,StartScrobble,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	UseCompNameOnPassKey = xmlreader.GetValueAsBool (cTrakt' cUseCompNameOnPassKey' true);  	Username = xmlreader.GetValueAsString (cTrakt' cUsername' "");  	Password = xmlreader.GetValueAsString (cTrakt' cPassword' "").Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	UserLogins = xmlreader.GetValueAsString (cTrakt' cUserLogins' "[]").FromJSONArray<TraktAuthentication> ().ToList ().Decrypt (cGuid + (UseCompNameOnPassKey ? System.Environment.MachineName : string.Empty));  	MovingPictures = xmlreader.GetValueAsInt (cTrakt' cMovingPictures' -1);  	TVSeries = xmlreader.GetValueAsInt (cTrakt' cTVSeries' -1);  	MyVideos = xmlreader.GetValueAsInt (cTrakt' cMyVideos' -1);  	MyFilms = xmlreader.GetValueAsInt (cTrakt' cMyFilms' -1);  	OnlineVideos = xmlreader.GetValueAsInt (cTrakt' cOnlineVideos' -1);  	MyTVRecordings = xmlreader.GetValueAsInt (cTrakt' cMyTVRecordings' -1);  	MyTVLive = xmlreader.GetValueAsInt (cTrakt' cMyTVLive' -1);  	ArgusRecordings = xmlreader.GetValueAsInt (cTrakt' cArgusRecordings' -1);  	ArgusTVLive = xmlreader.GetValueAsInt (cTrakt' cArgusTVLive' -1);  	KeepTraktLibraryClean = xmlreader.GetValueAsBool (cTrakt' cKeepTraktLibraryClean' false);  	BlockedFilenames = xmlreader.GetValueAsString (cTrakt' cBlockedFilenames' "[]").FromJSONArray<string> ().ToList ();  	BlockedFolders = xmlreader.GetValueAsString (cTrakt' cBlockedFolders' "[]").FromJSONArray<string> ().ToList ();  	//TODOSkippedMovies = xmlreader.GetValueAsString(cTrakt' cSkippedMovies' "{}").FromJSON<SyncMovieCheck>();  	//TODOAlreadyExistMovies = xmlreader.GetValueAsString(cTrakt' cAlreadyExistMovies' "{}").FromJSON<SyncMovieCheck>();  	LogLevel = xmlreader.GetValueAsInt ("general"' "loglevel"' 1);  	SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  	SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  	TrendingMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingMoviesDefaultLayout' 0);  	TrendingShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cTrendingShowsDefaultLayout' 0);  	PopularMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularMoviesDefaultLayout' 0);  	PopularShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPopularShowsDefaultLayout' 0);  	RecommendedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedMoviesDefaultLayout' 0);  	RecommendedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecommendedShowsDefaultLayout' 0);  	WatchListMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListMoviesDefaultLayout' 0);  	WatchListShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListShowsDefaultLayout' 0);  	WatchListEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cWatchListEpisodesDefaultLayout' 0);  	ListsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListsDefaultLayout' 0);  	ListItemsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cListItemsDefaultLayout' 0);  	RelatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedMoviesDefaultLayout' 0);  	RelatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRelatedShowsDefaultLayout' 0);  	ShowSeasonsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cShowSeasonsDefaultLayout' 0);  	SeasonEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSeasonEpisodesDefaultLayout' 0);  	DefaultCalendarView = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarView' 0);  	DefaultCalendarStartDate = xmlreader.GetValueAsInt (cTrakt' cDefaultCalendarStartDate' 0);  	DownloadFullSizeFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFullSizeFanart' false);  	DownloadFanart = xmlreader.GetValueAsBool (cTrakt' cDownloadFanart' true);  	WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  	WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  	GetFollowerRequestsOnStartup = xmlreader.GetValueAsBool (cTrakt' cGetFollowerRequestsOnStartup' false);  	MovingPicturesCategories = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesCategories' false);  	MovingPicturesFilters = xmlreader.GetValueAsBool (cTrakt' cMovingPicturesFilters' false);  	CalendarHideTVShowsInWatchList = xmlreader.GetValueAsBool (cTrakt' cCalendarHideTVShowsInWatchList' false);  	HideWatchedRelatedMovies = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedMovies' false);  	HideWatchedRelatedShows = xmlreader.GetValueAsBool (cTrakt' cHideWatchedRelatedShows' false);  	HideSpoilersOnShouts = xmlreader.GetValueAsBool (cTrakt' cHideSpoilersOnShouts' false);  	SyncRatings = xmlreader.GetValueAsBool (cTrakt' cSyncRatings' true);  	ShowRateDialogOnWatched = xmlreader.GetValueAsBool (cTrakt' cShowRateDialogOnWatched' true);  	DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  	DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  	DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  	DashboardMovieTrendingActive = xmlreader.GetValueAsBool (cTrakt' cDashboardMovieTrendingActive' false);  	MovieRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cMovieRecommendationGenre' "All");  	MovieRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideCollected' false);  	MovieRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cMovieRecommendationHideWatchlisted' false);  	MovieRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationStartYear' 0);  	MovieRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cMovieRecommendationEndYear' 0);  	ShowRecommendationGenre = xmlreader.GetValueAsString (cTrakt' cShowRecommendationGenre' "All");  	ShowRecommendationHideCollected = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideCollected' false);  	ShowRecommendationHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cShowRecommendationHideWatchlisted' false);  	ShowRecommendationStartYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationStartYear' 0);  	ShowRecommendationEndYear = xmlreader.GetValueAsInt (cTrakt' cShowRecommendationEndYear' 0);  	SortByRecommendedMovies = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedMovies' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByRecommendedShows = xmlreader.GetValueAsString (cTrakt' cSortByRecommendedShows' "{\"Field\": 0'\"Direction\": 0}").FromJSON<SortBy> ();  	SortByTrendingMovies = xmlreader.GetValueAsString (cTrakt' cSortByTrendingMovies' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByTrendingShows = xmlreader.GetValueAsString (cTrakt' cSortByTrendingShows' "{\"Field\": 5'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularMovies = xmlreader.GetValueAsString (cTrakt' cSortByPopularMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByPopularShows = xmlreader.GetValueAsString (cTrakt' cSortByPopularShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListMovies = xmlreader.GetValueAsString (cTrakt' cSortByWatchListMovies' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByWatchListShows = xmlreader.GetValueAsString (cTrakt' cSortByWatchListShows' "{\"Field\": 6'\"Direction\": 1}").FromJSON<SortBy> ();  	EnableJumpToForTVShows = xmlreader.GetValueAsBool (cTrakt' cEnableJumpToForTVShows' false);  	MyFilmsCategories = xmlreader.GetValueAsBool (cTrakt' cMyFilmsCategories' false);  	SortSeasonsAscending = xmlreader.GetValueAsBool (cTrakt' cSortSeasonsAscending' false);  	RememberLastSelectedActivity = xmlreader.GetValueAsBool (cTrakt' cRememberLastSelectedActivity' true);  	MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  	ShowRateDlgForPlaylists = xmlreader.GetValueAsBool (cTrakt' cShowRateDlgForPlaylists' false);  	TrendingMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatched' false);  	TrendingMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideWatchlisted' false);  	TrendingMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideCollected' false);  	TrendingMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingMoviesHideRated' false);  	TrendingShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatched' false);  	TrendingShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideWatchlisted' false);  	TrendingShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideCollected' false);  	TrendingShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cTrendingShowsHideRated' false);  	PopularMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatched' false);  	PopularMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideWatchlisted' false);  	PopularMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideCollected' false);  	PopularMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularMoviesHideRated' false);  	PopularShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatched' false);  	PopularShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideWatchlisted' false);  	PopularShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideCollected' false);  	PopularShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cPopularShowsHideRated' false);  	AnticipatedMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedMoviesHideWatchlisted' false);  	AnticipatedShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cAnticipatedShowsHideWatchlisted' false);  	DefaultNetworkView = xmlreader.GetValueAsInt (cTrakt' cDefaultNetworkView' 1);  	RecentWatchedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedMoviesDefaultLayout' 0);  	RecentWatchedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentWatchedEpisodesDefaultLayout' 0);  	RecentAddedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedMoviesDefaultLayout' 0);  	RecentAddedEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cRecentAddedEpisodesDefaultLayout' 0);  	SyncLibrary = xmlreader.GetValueAsBool (cTrakt' cSyncLibrary' true);  	SearchMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchMoviesDefaultLayout' 0);  	SearchShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchShowsDefaultLayout' 0);  	SearchEpisodesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchEpisodesDefaultLayout' 0);  	SearchPeopleDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchPeopleDefaultLayout' 0);  	SearchUsersDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cSearchUsersDefaultLayout' 0);  	SearchTypes = xmlreader.GetValueAsInt (cTrakt' cSearchTypes' 1);  	ShowSearchResultsBreakdown = xmlreader.GetValueAsBool (cTrakt' cShowSearchResultsBreakdown' true);  	MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  	FilterTrendingOnDashboard = xmlreader.GetValueAsBool (cTrakt' cFilterTrendingOnDashboard' false);  	IgnoreWatchedPercentOnDVD = xmlreader.GetValueAsBool (cTrakt' cIgnoreWatchedPercentOnDVD' true);  	ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  	LastSyncActivities = xmlreader.GetValueAsString (cTrakt' cLastSyncActivities' new TraktLastSyncActivities ().ToJSON ()).FromJSON<TraktLastSyncActivities> ();  	SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  	SyncPlayback = xmlreader.GetValueAsBool (cTrakt' cSyncPlayback' true);  	SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  	SyncPlaybackOnEnterPlugin = xmlreader.GetValueAsBool (cTrakt' cSyncPlaybackOnEnterPlugin' false);  	SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  	MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  	MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  	MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  	MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  	MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  	MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  	UseSSL = xmlreader.GetValueAsBool (cTrakt' cUseSSL' false);  	LastListActivities = xmlreader.GetValueAsString (cTrakt' cLastListActivities' "[]").FromJSONArray<TraktCache.ListActivity> ();  	MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  	MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  	MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  	MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  	MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  	MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  	MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  	DashboardActivityFilter = xmlreader.GetValueAsString (cTrakt' cDashboardActivityFilter' "{}").FromJSON<ActivityFilter> ();  	SkipMoviesWithNoIdsOnSync = xmlreader.GetValueAsBool (cTrakt' cSkipMoviesWithNoIdsOnSync' true);  	PersonMovieCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonMovieCreditsDefaultLayout' 0);  	PersonShowCreditsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cPersonShowCreditsDefaultLayout' 0);  	SortByCreditMovies = xmlreader.GetValueAsString (cTrakt' cSortByCreditMovies' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByCreditShows = xmlreader.GetValueAsString (cTrakt' cSortByCreditShows' "{\"Field\": 7'\"Direction\": 1}").FromJSON<SortBy> ();  	CreditMoviesHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatched' false);  	CreditMoviesHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideWatchlisted' false);  	CreditMoviesHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideCollected' false);  	CreditMoviesHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditMoviesHideRated' false);  	CreditShowsHideWatched = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatched' false);  	CreditShowsHideWatchlisted = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideWatchlisted' false);  	CreditShowsHideCollected = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideCollected' false);  	CreditShowsHideRated = xmlreader.GetValueAsBool (cTrakt' cCreditShowsHideRated' false);  	CreditsMovieDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsMovieDefaultLayout' 0);  	CreditsShowDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cCreditsShowDefaultLayout' 0);  	AnticipatedMoviesDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedMoviesDefaultLayout' 0);  	AnticipatedShowsDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cAnticipatedShowsDefaultLayout' 0);  	SortByAnticipatedMovies = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedMovies' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	SortByAnticipatedShows = xmlreader.GetValueAsString (cTrakt' cSortByAnticipatedShows' "{\"Field\": 8'\"Direction\": 1}").FromJSON<SortBy> ();  	BoxOfficeDefaultLayout = xmlreader.GetValueAsInt (cTrakt' cBoxOfficeDefaultLayout' 0);  	ParentalControlsEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalControlsEnabled' false);  	ParentalControlsPinCode = xmlreader.GetValueAsString (cTrakt' cParentalControlsPinCode' "");  	ParentalIgnoreAfterEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreAfterEnabled' false);  	ParentalIgnoreAfterTime = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreAfterTime' new DateTime ().ToShortTimeString ());  	ParentalIgnoreMovieRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreMovieRatingEnabled' false);  	ParentalIgnoreShowRatingEnabled = xmlreader.GetValueAsBool (cTrakt' cParentalIgnoreShowRatingEnabled' false);  	ParentalIgnoreMovieRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreMovieRating' "G");  	ParentalIgnoreShowRating = xmlreader.GetValueAsString (cTrakt' cParentalIgnoreShowRating' "TV-G");  	TmdbConfiguration = xmlreader.GetValueAsString (cTrakt' cTmdbConfiguration' "{}").FromJSON<TmdbConfiguration> ();  	TmdbConfigurationAge = xmlreader.GetValueAsString (cTrakt' cTmdbConfigurationAge' new DateTime ().ToString ());  	TmdbPreferredBackdropSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredBackdropSize' "w1280");  	TmdbPreferredPosterSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredPosterSize' "w342");  	TmdbPreferredEpisodeThumbSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredEpisodeThumbSize' "w300");  	TmdbPreferredHeadshotSize = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredHeadshotSize' "h632");  	TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  	TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  	TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  	TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  	TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  	TmdbPreferredImageLanguage = xmlreader.GetValueAsString (cTrakt' cTmdbPreferredImageLanguage' "en");  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncTimerLength = GetValueAsIntAndValidate (cTrakt' cSyncTimerLength' 24' 1' 168);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncStartDelay = GetValueAsIntAndValidate (cTrakt' cSyncStartDelay' 5000' 0' 300000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: WebRequestCacheMinutes = GetValueAsIntAndValidate (cTrakt' cWebRequestCacheMinutes' 15' 1' 1440);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: WebRequestTimeout = GetValueAsIntAndValidate (cTrakt' cWebRequestTimeout' 30000' 15000' 90000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: DashboardActivityPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardActivityPollInterval' 15000' 15000' 300000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: DashboardTrendingPollInterval = GetValueAsIntAndValidate (cTrakt' cDashboardTrendingPollInterval' 300000' 300000' 18000000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: DashboardLoadDelay = GetValueAsIntAndValidate (cTrakt' cDashboardLoadDelay' 200' 100' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MovPicsRatingDlgDelay = GetValueAsIntAndValidate (cTrakt' cMovPicsRatingDlgDelay' 500' 250' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxSearchResults = GetValueAsIntAndValidate (cTrakt' cMaxSearchResults' 30' 1' 200);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: ActivityStreamView = xmlreader.GetValueAsInt (cTrakt' cActivityStreamView' 5);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncBatchSize = GetValueAsIntAndValidate (cTrakt' cSyncBatchSize' 100' 25' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncResumeDelta = GetValueAsIntAndValidate (cTrakt' cSyncResumeDelta' 5' 0' 600);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: SyncPlaybackCacheExpiry = GetValueAsIntAndValidate (cTrakt' cSyncPlaybackCacheExpiry' 5' 1' 1440);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxTrendingMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingMoviesRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxTrendingShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxTrendingShowsRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxPopularMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularMoviesRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxPopularShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxPopularShowsRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxAnticipatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedMoviesRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxAnticipatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxAnticipatedShowsRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxRelatedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesRequest' 10' 1' 100);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxRelatedMoviesUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40' 1' 100);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxRelatedShowsRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsRequest' 10' 1' 100);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxRelatedShowsUnWatchedRequest = GetValueAsIntAndValidate (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxUserWatchedMoviesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedMoviesRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxUserWatchedEpisodesRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserWatchedEpisodesRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: MaxUserCommentsRequest = GetValueAsIntAndValidate (cTrakt' cMaxUserCommentsRequest' 40' 1' 1000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbShowImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbShowImageMaxCacheAge' 30' 1' 365);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbMovieImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbMovieImageMaxCacheAge' 30' 1' 365);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbSeasonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbSeasonImageMaxCacheAge' 30' 1' 365);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbEpisodeImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbEpisodeImageMaxCacheAge' 30' 1' 365);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,LoadSettings,The following statement contains a magic number: TmdbPersonImageMaxCacheAge = GetValueAsIntAndValidate (cTrakt' cTmdbPersonImageMaxCacheAge' 30' 1' 365);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: using (Settings xmlreader = new MPSettings ()) {  	int currentSettingsVersion = xmlreader.GetValueAsInt (cTrakt' cSettingsVersion' SettingsVersion);  	// check if any maintenance task is required  	if (currentSettingsVersion >= SettingsVersion)  		return;  	// upgrade settings for each version  	while (currentSettingsVersion < SettingsVersion) {  		switch (currentSettingsVersion) {  		case 0:  			xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  			xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  			xmlreader.RemoveEntry (cTrakt' cLastStatistics);  			currentSettingsVersion++;  			break;  		case 1:  			// trailers plugin now supports tvshows' seasons and episodes.  			xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  			currentSettingsVersion++;  			break;  		case 2:  			// Only use Trailers plugin now for Trailers functionality.  			xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  			xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  			xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  			// Remove old activity settings  			xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  			xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  			// Remove old category/filter node ids for MovingPictures (not needed)  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  			xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  			currentSettingsVersion++;  			break;  		case 3:  			// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  			xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  			xmlreader.RemoveEntry (cTrakt' "MyAnime");  			// Clear existing passwords as they're no longer hashed in new API v2  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			// Remove Advanced Rating setting' there is only one now  			xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  			// Remove SkippedMovies and AlreadyExistMovies as data structures changed  			xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  			xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  			// Remove old show collection cache  			xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  			// Reset some defaults  			xmlreader.RemoveEntry (cTrakt' cSyncRatings);  			xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  			xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  			xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  			xmlreader.RemoveEntry (cTrakt' cSearchTypes);  			// Remove any persisted data that has changed with with new API v2  			try {  				if (File.Exists (cLastActivityFileCache))  					File.Delete (cLastActivityFileCache);  				if (File.Exists (cLastTrendingShowFileCache))  					File.Delete (cLastTrendingShowFileCache);  				if (File.Exists (cLastTrendingMovieFileCache))  					File.Delete (cLastTrendingMovieFileCache);  				if (File.Exists (cLastStatisticsFileCache))  					File.Delete (cLastStatisticsFileCache);  				// Remove old artwork - filenames have changed  				string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  				if (Directory.Exists (imagePath)) {  					Directory.Delete (imagePath' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 4:  			try {  				// Fix bad upgrade from previous release  				string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  				if (Directory.Exists (dashboardPersistence)) {  					Directory.Delete (dashboardPersistence' true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 5:  			// Clear existing passwords' change of encryption/decryption technique  			xmlreader.RemoveEntry (cTrakt' cPassword);  			xmlreader.RemoveEntry (cTrakt' cUserLogins);  			currentSettingsVersion++;  			break;  		case 6:  			// Save Sync Interval in Hours from Milliseconds  			int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  			if (syncTimerLength > 24) {  				// requires upgrade  				xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  			}  			currentSettingsVersion++;  			break;  		case 7:  			// upgrade last activity view  			xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  			// remove last paused item processed - stored in last activities  			xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  			currentSettingsVersion++;  			break;  		case 8:  			// cleanup cached likes' API changed to include a user object for lists  			// i.e. the user that owns the list  			try {  				var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  				var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  				foreach (string file in matches) {  					File.Delete (file);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  			}  			currentSettingsVersion++;  			break;  		case 9:  			// remove old thumbs folder  			try {  				DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  				foreach (FileInfo file in di.GetFiles ()) {  					file.Delete ();  				}  				foreach (DirectoryInfo dir in di.GetDirectories ()) {  					dir.Delete (true);  				}  			} catch (Exception e) {  				TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  			}  			// update default sizes for requests so we dont hit any limits from TMDb by default  			xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  			xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  			currentSettingsVersion++;  			break;  		}  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: while (currentSettingsVersion < SettingsVersion) {  	switch (currentSettingsVersion) {  	case 0:  		xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  		xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  		xmlreader.RemoveEntry (cTrakt' cLastStatistics);  		currentSettingsVersion++;  		break;  	case 1:  		// trailers plugin now supports tvshows' seasons and episodes.  		xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  		currentSettingsVersion++;  		break;  	case 2:  		// Only use Trailers plugin now for Trailers functionality.  		xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  		xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  		xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  		// Remove old activity settings  		xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  		xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  		// Remove old category/filter node ids for MovingPictures (not needed)  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  		xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  		currentSettingsVersion++;  		break;  	case 3:  		// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  		xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  		xmlreader.RemoveEntry (cTrakt' "MyAnime");  		// Clear existing passwords as they're no longer hashed in new API v2  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		// Remove Advanced Rating setting' there is only one now  		xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  		// Remove SkippedMovies and AlreadyExistMovies as data structures changed  		xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  		xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  		// Remove old show collection cache  		xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  		// Reset some defaults  		xmlreader.RemoveEntry (cTrakt' cSyncRatings);  		xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  		xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  		xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  		xmlreader.RemoveEntry (cTrakt' cSearchTypes);  		// Remove any persisted data that has changed with with new API v2  		try {  			if (File.Exists (cLastActivityFileCache))  				File.Delete (cLastActivityFileCache);  			if (File.Exists (cLastTrendingShowFileCache))  				File.Delete (cLastTrendingShowFileCache);  			if (File.Exists (cLastTrendingMovieFileCache))  				File.Delete (cLastTrendingMovieFileCache);  			if (File.Exists (cLastStatisticsFileCache))  				File.Delete (cLastStatisticsFileCache);  			// Remove old artwork - filenames have changed  			string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  			if (Directory.Exists (imagePath)) {  				Directory.Delete (imagePath' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 4:  		try {  			// Fix bad upgrade from previous release  			string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  			if (Directory.Exists (dashboardPersistence)) {  				Directory.Delete (dashboardPersistence' true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 5:  		// Clear existing passwords' change of encryption/decryption technique  		xmlreader.RemoveEntry (cTrakt' cPassword);  		xmlreader.RemoveEntry (cTrakt' cUserLogins);  		currentSettingsVersion++;  		break;  	case 6:  		// Save Sync Interval in Hours from Milliseconds  		int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  		if (syncTimerLength > 24) {  			// requires upgrade  			xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  		}  		currentSettingsVersion++;  		break;  	case 7:  		// upgrade last activity view  		xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  		// remove last paused item processed - stored in last activities  		xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  		currentSettingsVersion++;  		break;  	case 8:  		// cleanup cached likes' API changed to include a user object for lists  		// i.e. the user that owns the list  		try {  			var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  			var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  			foreach (string file in matches) {  				File.Delete (file);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  		}  		currentSettingsVersion++;  		break;  	case 9:  		// remove old thumbs folder  		try {  			DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  			foreach (FileInfo file in di.GetFiles ()) {  				file.Delete ();  			}  			foreach (DirectoryInfo dir in di.GetDirectories ()) {  				dir.Delete (true);  			}  		} catch (Exception e) {  			TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  		}  		// update default sizes for requests so we dont hit any limits from TMDb by default  		xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  		xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  		currentSettingsVersion++;  		break;  	}  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: if (syncTimerLength > 24) {  	// requires upgrade  	xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: if (syncTimerLength > 24) {  	// requires upgrade  	xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  }  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  
Magic Number,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following statement contains a magic number: xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  
Magic Number,TraktPlugin,ExtensionSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,AddHooksIntoMPEISettings,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,TraktPlugin,ExtensionSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,Extensions_OnSettingsChanged,The following statement contains a magic number: if (guid == TraktSettings.cGuid) {  	TraktLogger.Info ("Settings updated externally");  	// re-load settings  	TraktSettings.LoadSettings (false);  	// determine when next library sync is due  	var nextSyncDate = TraktPlugin.SyncStartTime.Add (TimeSpan.FromHours (TraktSettings.SyncTimerLength));  	// determine how long to wait from 'now' to start the next sync' set the start delay if it is 'now'  	int startDelay = nextSyncDate <= DateTime.Now ? TraktSettings.SyncStartDelay : (int)(nextSyncDate.Subtract (DateTime.Now).TotalMilliseconds);  	// re-initialize sync Interval  	TraktPlugin.ChangeSyncTimer (startDelay' TraktSettings.SyncTimerLength * 3600000);  	// update any internal plugin settings required  	TraktSettings.UpdateInternalPluginSettings ();  }  
Magic Number,TraktPlugin,ExtensionSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,Extensions_OnSettingsChanged,The following statement contains a magic number: TraktPlugin.ChangeSyncTimer (startDelay' TraktSettings.SyncTimerLength * 3600000);  
Magic Number,TraktPlugin.GUI,AsyncImageResource,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cornerstone.MP\AsyncImageResource.cs,setFilenameWorker,The following statement contains a magic number: if (loading || threadsWaiting > 0) {  	threadsWaiting++;  	for (int i = 0; i < 5; i++) {  		Thread.Sleep (_delay / 5);  		if (localToken < pendingToken)  			return;  	}  	threadsWaiting--;  }  
Magic Number,TraktPlugin.GUI,AsyncImageResource,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cornerstone.MP\AsyncImageResource.cs,setFilenameWorker,The following statement contains a magic number: if (loading || threadsWaiting > 0) {  	threadsWaiting++;  	for (int i = 0; i < 5; i++) {  		Thread.Sleep (_delay / 5);  		if (localToken < pendingToken)  			return;  	}  	threadsWaiting--;  }  
Magic Number,TraktPlugin.GUI,AsyncImageResource,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cornerstone.MP\AsyncImageResource.cs,setFilenameWorker,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	Thread.Sleep (_delay / 5);  	if (localToken < pendingToken)  		return;  }  
Magic Number,TraktPlugin.GUI,AsyncImageResource,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cornerstone.MP\AsyncImageResource.cs,setFilenameWorker,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	Thread.Sleep (_delay / 5);  	if (localToken < pendingToken)  		return;  }  
Magic Number,TraktPlugin.GUI,AsyncImageResource,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cornerstone.MP\AsyncImageResource.cs,setFilenameWorker,The following statement contains a magic number: Thread.Sleep (_delay / 5);  
Magic Number,TraktPlugin.GUI,AsyncImageResource,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Cornerstone.MP\AsyncImageResource.cs,setFilenameWorker,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,TraktPlugin.GUI,GUIAnticipatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIMovieListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			CheckAndPlayMovie (true);  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadAnticipatedMovies (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByAnticipatedMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByAnticipatedMovies.Field) {  			TraktSettings.SortByAnticipatedMovies = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadAnticipatedMovies (CurrentPage);  		}  	}  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.AnticipatedMoviesHideWatchlisted = !TraktSettings.AnticipatedMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadAnticipatedMovies (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIAnticipatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIMovieListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			CheckAndPlayMovie (true);  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadAnticipatedMovies (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByAnticipatedMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByAnticipatedMovies.Field) {  			TraktSettings.SortByAnticipatedMovies = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadAnticipatedMovies (CurrentPage);  		}  	}  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.AnticipatedMoviesHideWatchlisted = !TraktSettings.AnticipatedMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadAnticipatedMovies (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIAnticipatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIMovieListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			CheckAndPlayMovie (true);  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadAnticipatedMovies (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByAnticipatedMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByAnticipatedMovies.Field) {  			TraktSettings.SortByAnticipatedMovies = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadAnticipatedMovies (CurrentPage);  		}  	}  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.AnticipatedMoviesHideWatchlisted = !TraktSettings.AnticipatedMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadAnticipatedMovies (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIAnticipatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIMovieListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			CheckAndPlayMovie (true);  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadAnticipatedMovies (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByAnticipatedMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByAnticipatedMovies.Field) {  			TraktSettings.SortByAnticipatedMovies = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadAnticipatedMovies (CurrentPage);  		}  	}  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.AnticipatedMoviesHideWatchlisted = !TraktSettings.AnticipatedMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadAnticipatedMovies (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIBoxOffice,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBoxOffice.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIBoxOffice,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIBoxOffice.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUICreditsMovie,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsMovie.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var selectedItem = Facade.SelectedListItem as GUIPersonListItem;  	if (selectedItem == null)  		return;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.PersonSummary' selectedItem.Person.Ids.Trakt.ToString ());  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUICreditsMovie,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsMovie.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var selectedItem = Facade.SelectedListItem as GUIPersonListItem;  	if (selectedItem == null)  		return;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.PersonSummary' selectedItem.Person.Ids.Trakt.ToString ());  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUICreditsShow,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsShow.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var selectedItem = Facade.SelectedListItem as GUIPersonListItem;  	if (selectedItem == null)  		return;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.PersonSummary' selectedItem.Person.Ids.Trakt.ToString ());  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUICreditsShow,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsShow.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var selectedItem = Facade.SelectedListItem as GUIPersonListItem;  	if (selectedItem == null)  		return;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.PersonSummary' selectedItem.Person.Ids.Trakt.ToString ());  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIAnticipatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIShowListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			if (TraktSettings.EnableJumpToForTVShows) {  				CheckAndPlayEpisode (true);  			} else {  				if (item.Show == null)  					return;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  			}  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadAnticipatedShows (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByAnticipatedShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByAnticipatedShows.Field) {  			TraktSettings.SortByAnticipatedShows = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadAnticipatedShows (CurrentPage);  		}  	}  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.AnticipatedShowsHideWatchlisted = !TraktSettings.AnticipatedShowsHideWatchlisted;  	UpdateButtonState ();  	LoadAnticipatedShows (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIAnticipatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIShowListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			if (TraktSettings.EnableJumpToForTVShows) {  				CheckAndPlayEpisode (true);  			} else {  				if (item.Show == null)  					return;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  			}  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadAnticipatedShows (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByAnticipatedShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByAnticipatedShows.Field) {  			TraktSettings.SortByAnticipatedShows = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadAnticipatedShows (CurrentPage);  		}  	}  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.AnticipatedShowsHideWatchlisted = !TraktSettings.AnticipatedShowsHideWatchlisted;  	UpdateButtonState ();  	LoadAnticipatedShows (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIAnticipatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIShowListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			if (TraktSettings.EnableJumpToForTVShows) {  				CheckAndPlayEpisode (true);  			} else {  				if (item.Show == null)  					return;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  			}  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadAnticipatedShows (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByAnticipatedShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByAnticipatedShows.Field) {  			TraktSettings.SortByAnticipatedShows = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadAnticipatedShows (CurrentPage);  		}  	}  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.AnticipatedShowsHideWatchlisted = !TraktSettings.AnticipatedShowsHideWatchlisted;  	UpdateButtonState ();  	LoadAnticipatedShows (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIAnticipatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIAnticipatedShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIShowListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			if (TraktSettings.EnableJumpToForTVShows) {  				CheckAndPlayEpisode (true);  			} else {  				if (item.Show == null)  					return;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  			}  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadAnticipatedShows (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByAnticipatedShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByAnticipatedShows.Field) {  			TraktSettings.SortByAnticipatedShows = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadAnticipatedShows (CurrentPage);  		}  	}  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.AnticipatedShowsHideWatchlisted = !TraktSettings.AnticipatedShowsHideWatchlisted;  	UpdateButtonState ();  	LoadAnticipatedShows (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetMovieProperties,The following statement contains a magic number: SetProperty ("#Trakt.Movie.Ratings.Icon"' (movie.Rating >= 6) ? "love" : "hate");  
Magic Number,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetSeasonProperties,The following statement contains a magic number: SetProperty ("#Trakt.Season.Ratings.Icon"' (season.Rating >= 6) ? "love" : "hate");  
Magic Number,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetShowProperties,The following statement contains a magic number: SetProperty ("#Trakt.Show.Ratings.Icon"' (show.Rating > 6) ? "love" : "hate");  
Magic Number,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,SetEpisodeProperties,The following statement contains a magic number: SetProperty ("#Trakt.Episode.Ratings.Icon"' (episode.Rating >= 6) ? "love" : "hate");  
Magic Number,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetLayoutTranslation,The following statement contains a magic number: switch (layout) {  case Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  }  
Magic Number,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetLayoutTranslation,The following statement contains a magic number: switch (layout) {  case Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  }  
Magic Number,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetLayoutTranslation,The following statement contains a magic number: switch (layout) {  case Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  }  
Magic Number,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetLayoutTranslation,The following statement contains a magic number: switch (layout) {  case Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  }  
Magic Number,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetLayoutTranslation,The following statement contains a magic number: strLine = GUILocalizeStrings.Get (101);  
Magic Number,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetLayoutTranslation,The following statement contains a magic number: strLine = GUILocalizeStrings.Get (100);  
Magic Number,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetLayoutTranslation,The following statement contains a magic number: strLine = GUILocalizeStrings.Get (417);  
Magic Number,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetLayoutTranslation,The following statement contains a magic number: strLine = GUILocalizeStrings.Get (733);  
Magic Number,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetLayoutTranslation,The following statement contains a magic number: return mp12 ? strLine : GUILocalizeStrings.Get (95) + strLine;  
Magic Number,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowSortMenu,The following statement contains a magic number: dlg.SetHeading (495);  
Magic Number,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityItemName,The following statement contains a magic number: try {  	ActivityType type = (ActivityType)Enum.Parse (typeof(ActivityType)' activity.Type);  	ActivityAction action = (ActivityAction)Enum.Parse (typeof(ActivityAction)' activity.Action);  	switch (type) {  	case ActivityType.episode:  		if (action == ActivityAction.seen || action == ActivityAction.collection) {  			if (activity.Episodes.Count > 1) {  				// just return show name  				name = activity.Show.Title;  			} else {  				//  get the first and only item in collection of episodes  				string episodeIndex = activity.Episodes.First ().Number.ToString ();  				string seasonIndex = activity.Episodes.First ().Season.ToString ();  				string episodeName = activity.Episodes.First ().Title;  				if (!string.IsNullOrEmpty (episodeName))  					episodeName = string.Format (" - {0}"' episodeName);  				name = string.Format ("{0} - {1}x{2}{3}"' activity.Show.Title' seasonIndex' episodeIndex' episodeName);  			}  		} else {  			string episodeName = activity.Episode.Title;  			if (!string.IsNullOrEmpty (episodeName))  				episodeName = string.Format (" - {0}"' episodeName);  			name = string.Format ("{0} - {1}x{2}{3}"' activity.Show.Title' activity.Episode.Season.ToString ()' activity.Episode.Number.ToString ()' episodeName);  		}  		break;  	case ActivityType.show:  		name = activity.Show.Title;  		break;  	case ActivityType.season:  		name = string.Format ("{0} - {1} {2}"' activity.Show.Title' Translation.Season' activity.Season.Number);  		break;  	case ActivityType.movie:  		name = string.Format ("{0} ({1})"' activity.Movie.Title' activity.Movie.Year);  		break;  	case ActivityType.person:  		name = string.Format ("{0}"' activity.Person.Name);  		break;  	case ActivityType.list:  		if (action == ActivityAction.item_added) {  			// return the name of the item added to the list  			switch (activity.ListItem.Type) {  			case "show":  				name = activity.ListItem.Show.Title;  				break;  			case "season":  				name = string.Format ("{0} - {1} {2}"' activity.ListItem.Show.Title' Translation.Season' activity.ListItem.Season.Number);  				break;  			case "episode":  				string episodeIndex = activity.ListItem.Episode.Number.ToString ();  				string seasonIndex = activity.ListItem.Episode.Season.ToString ();  				string episodeName = activity.ListItem.Episode.Title;  				if (string.IsNullOrEmpty (episodeName))  					episodeName = string.Format ("{0} {1}"' Translation.Episode' episodeIndex);  				name = string.Format ("{0} - {1}x{2} - {3}"' activity.ListItem.Show.Title' seasonIndex' episodeIndex' episodeName);  				break;  			case "movie":  				name = string.Format ("{0} ({1})"' activity.ListItem.Movie.Title' activity.ListItem.Movie.Year);  				break;  			case "person":  				name = string.Format ("{0}"' activity.Person.Name);  				break;  			}  		} else {  			// return the list name  			name = activity.List.Name;  		}  		break;  	case ActivityType.comment:  		name = activity.Shout.Text.Truncate (30);  		break;  	}  } catch {  	// most likely trakt returned a null object  	name = string.Empty;  }  
Magic Number,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityItemName,The following statement contains a magic number: switch (type) {  case ActivityType.episode:  	if (action == ActivityAction.seen || action == ActivityAction.collection) {  		if (activity.Episodes.Count > 1) {  			// just return show name  			name = activity.Show.Title;  		} else {  			//  get the first and only item in collection of episodes  			string episodeIndex = activity.Episodes.First ().Number.ToString ();  			string seasonIndex = activity.Episodes.First ().Season.ToString ();  			string episodeName = activity.Episodes.First ().Title;  			if (!string.IsNullOrEmpty (episodeName))  				episodeName = string.Format (" - {0}"' episodeName);  			name = string.Format ("{0} - {1}x{2}{3}"' activity.Show.Title' seasonIndex' episodeIndex' episodeName);  		}  	} else {  		string episodeName = activity.Episode.Title;  		if (!string.IsNullOrEmpty (episodeName))  			episodeName = string.Format (" - {0}"' episodeName);  		name = string.Format ("{0} - {1}x{2}{3}"' activity.Show.Title' activity.Episode.Season.ToString ()' activity.Episode.Number.ToString ()' episodeName);  	}  	break;  case ActivityType.show:  	name = activity.Show.Title;  	break;  case ActivityType.season:  	name = string.Format ("{0} - {1} {2}"' activity.Show.Title' Translation.Season' activity.Season.Number);  	break;  case ActivityType.movie:  	name = string.Format ("{0} ({1})"' activity.Movie.Title' activity.Movie.Year);  	break;  case ActivityType.person:  	name = string.Format ("{0}"' activity.Person.Name);  	break;  case ActivityType.list:  	if (action == ActivityAction.item_added) {  		// return the name of the item added to the list  		switch (activity.ListItem.Type) {  		case "show":  			name = activity.ListItem.Show.Title;  			break;  		case "season":  			name = string.Format ("{0} - {1} {2}"' activity.ListItem.Show.Title' Translation.Season' activity.ListItem.Season.Number);  			break;  		case "episode":  			string episodeIndex = activity.ListItem.Episode.Number.ToString ();  			string seasonIndex = activity.ListItem.Episode.Season.ToString ();  			string episodeName = activity.ListItem.Episode.Title;  			if (string.IsNullOrEmpty (episodeName))  				episodeName = string.Format ("{0} {1}"' Translation.Episode' episodeIndex);  			name = string.Format ("{0} - {1}x{2} - {3}"' activity.ListItem.Show.Title' seasonIndex' episodeIndex' episodeName);  			break;  		case "movie":  			name = string.Format ("{0} ({1})"' activity.ListItem.Movie.Title' activity.ListItem.Movie.Year);  			break;  		case "person":  			name = string.Format ("{0}"' activity.Person.Name);  			break;  		}  	} else {  		// return the list name  		name = activity.List.Name;  	}  	break;  case ActivityType.comment:  	name = activity.Shout.Text.Truncate (30);  	break;  }  
Magic Number,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityItemName,The following statement contains a magic number: name = activity.Shout.Text.Truncate (30);  
Magic Number,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		if (SelectedType == TraktItemType.movie) {  			CheckAndPlayMovie (true);  		} else if (TraktSettings.EnableJumpToForTVShows || SelectedType == TraktItemType.episode) {  			CheckAndPlayEpisode (true);  		} else if (SelectedType == TraktItemType.show) {  			var selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var listItem = selectedItem.TVTag as TraktListItem;  			if (listItem == null)  				return;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' listItem.Show.ToJSON ());  		} else if (SelectedType == TraktItemType.season) {  			var selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var listItem = selectedItem.TVTag as TraktListItem;  			if (listItem == null)  				return;  			// create loading parameter for episode listing  			var loadingParam = new SeasonLoadingParameter {  				Season = listItem.Season'  				Show = listItem.Show  			};  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.SeasonEpisodes' loadingParam.ToJSON ());  		} else if (SelectedType == TraktItemType.person) {  			var selectedItem = Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var listItem = selectedItem.TVTag as TraktListItem;  			if (listItem == null)  				return;  			// if we already have the person summary' parse it along to the window  			GUIPersonSummary.CurrentPerson = listItem.Person;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.PersonSummary);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		if (SelectedType == TraktItemType.movie) {  			CheckAndPlayMovie (true);  		} else if (TraktSettings.EnableJumpToForTVShows || SelectedType == TraktItemType.episode) {  			CheckAndPlayEpisode (true);  		} else if (SelectedType == TraktItemType.show) {  			var selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var listItem = selectedItem.TVTag as TraktListItem;  			if (listItem == null)  				return;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' listItem.Show.ToJSON ());  		} else if (SelectedType == TraktItemType.season) {  			var selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var listItem = selectedItem.TVTag as TraktListItem;  			if (listItem == null)  				return;  			// create loading parameter for episode listing  			var loadingParam = new SeasonLoadingParameter {  				Season = listItem.Season'  				Show = listItem.Show  			};  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.SeasonEpisodes' loadingParam.ToJSON ());  		} else if (SelectedType == TraktItemType.person) {  			var selectedItem = Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var listItem = selectedItem.TVTag as TraktListItem;  			if (listItem == null)  				return;  			// if we already have the person summary' parse it along to the window  			GUIPersonSummary.CurrentPerson = listItem.Person;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.PersonSummary);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIEpisodeListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,SetImageToGui,The following statement contains a magic number: if (mainOverlay != MainOverlayImage.None || ratingOverlay != RatingOverlayImage.None) {  	memoryImage = GUIImageHandler.DrawOverlayOnEpisodeThumb (imageFilePath' mainOverlay' ratingOverlay' new Size (400' 225));  	if (memoryImage == null)  		return;  	// load texture into facade item  	if (GUITextureManager.LoadFromMemory (memoryImage' texture' 0' 0' 0) > 0) {  		ThumbnailImage = texture;  		IconImage = texture;  		IconImageBig = texture;  	}  } else {  	ThumbnailImage = imageFilePath;  	IconImage = imageFilePath;  	IconImageBig = imageFilePath;  }  
Magic Number,TraktPlugin.GUI,GUIEpisodeListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,SetImageToGui,The following statement contains a magic number: if (mainOverlay != MainOverlayImage.None || ratingOverlay != RatingOverlayImage.None) {  	memoryImage = GUIImageHandler.DrawOverlayOnEpisodeThumb (imageFilePath' mainOverlay' ratingOverlay' new Size (400' 225));  	if (memoryImage == null)  		return;  	// load texture into facade item  	if (GUITextureManager.LoadFromMemory (memoryImage' texture' 0' 0' 0) > 0) {  		ThumbnailImage = texture;  		IconImage = texture;  		IconImageBig = texture;  	}  } else {  	ThumbnailImage = imageFilePath;  	IconImage = imageFilePath;  	IconImageBig = imageFilePath;  }  
Magic Number,TraktPlugin.GUI,GUIEpisodeListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,SetImageToGui,The following statement contains a magic number: memoryImage = GUIImageHandler.DrawOverlayOnEpisodeThumb (imageFilePath' mainOverlay' ratingOverlay' new Size (400' 225));  
Magic Number,TraktPlugin.GUI,GUIEpisodeListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIEpisodeListItem.cs,SetImageToGui,The following statement contains a magic number: memoryImage = GUIImageHandler.DrawOverlayOnEpisodeThumb (imageFilePath' mainOverlay' ratingOverlay' new Size (400' 225));  
Magic Number,TraktPlugin.GUI,GUIUserListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIUserListItem.cs,SetImageToGui,The following statement contains a magic number: if (TVTag is TraktComment) {  	var shout = TVTag as TraktComment;  	// add a rating overlay if user has rated item  	var ratingOverlay = GUIImageHandler.GetRatingOverlay (shout.UserRating);  	// get a reference to a MediaPortal Texture Identifier  	string suffix = Enum.GetName (typeof(RatingOverlayImage)' ratingOverlay);  	string texture = GUIImageHandler.GetTextureIdentFromFile (imageFilePath' suffix);  	// build memory image' resize avatar as they come in different sizes sometimes  	Image memoryImage = null;  	if (ratingOverlay != RatingOverlayImage.None) {  		memoryImage = GUIImageHandler.DrawOverlayOnAvatar (imageFilePath' ratingOverlay' new Size (140' 140));  		if (memoryImage == null)  			return;  		// load texture into facade item  		if (GUITextureManager.LoadFromMemory (memoryImage' texture' 0' 0' 0) > 0) {  			ThumbnailImage = texture;  			IconImage = texture;  			IconImageBig = texture;  		}  	} else {  		ThumbnailImage = imageFilePath;  		IconImage = imageFilePath;  		IconImageBig = imageFilePath;  	}  } else {  	ThumbnailImage = imageFilePath;  	IconImage = imageFilePath;  	IconImageBig = imageFilePath;  }  
Magic Number,TraktPlugin.GUI,GUIUserListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIUserListItem.cs,SetImageToGui,The following statement contains a magic number: if (TVTag is TraktComment) {  	var shout = TVTag as TraktComment;  	// add a rating overlay if user has rated item  	var ratingOverlay = GUIImageHandler.GetRatingOverlay (shout.UserRating);  	// get a reference to a MediaPortal Texture Identifier  	string suffix = Enum.GetName (typeof(RatingOverlayImage)' ratingOverlay);  	string texture = GUIImageHandler.GetTextureIdentFromFile (imageFilePath' suffix);  	// build memory image' resize avatar as they come in different sizes sometimes  	Image memoryImage = null;  	if (ratingOverlay != RatingOverlayImage.None) {  		memoryImage = GUIImageHandler.DrawOverlayOnAvatar (imageFilePath' ratingOverlay' new Size (140' 140));  		if (memoryImage == null)  			return;  		// load texture into facade item  		if (GUITextureManager.LoadFromMemory (memoryImage' texture' 0' 0' 0) > 0) {  			ThumbnailImage = texture;  			IconImage = texture;  			IconImageBig = texture;  		}  	} else {  		ThumbnailImage = imageFilePath;  		IconImage = imageFilePath;  		IconImageBig = imageFilePath;  	}  } else {  	ThumbnailImage = imageFilePath;  	IconImage = imageFilePath;  	IconImageBig = imageFilePath;  }  
Magic Number,TraktPlugin.GUI,GUIUserListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIUserListItem.cs,SetImageToGui,The following statement contains a magic number: if (ratingOverlay != RatingOverlayImage.None) {  	memoryImage = GUIImageHandler.DrawOverlayOnAvatar (imageFilePath' ratingOverlay' new Size (140' 140));  	if (memoryImage == null)  		return;  	// load texture into facade item  	if (GUITextureManager.LoadFromMemory (memoryImage' texture' 0' 0' 0) > 0) {  		ThumbnailImage = texture;  		IconImage = texture;  		IconImageBig = texture;  	}  } else {  	ThumbnailImage = imageFilePath;  	IconImage = imageFilePath;  	IconImageBig = imageFilePath;  }  
Magic Number,TraktPlugin.GUI,GUIUserListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIUserListItem.cs,SetImageToGui,The following statement contains a magic number: if (ratingOverlay != RatingOverlayImage.None) {  	memoryImage = GUIImageHandler.DrawOverlayOnAvatar (imageFilePath' ratingOverlay' new Size (140' 140));  	if (memoryImage == null)  		return;  	// load texture into facade item  	if (GUITextureManager.LoadFromMemory (memoryImage' texture' 0' 0' 0) > 0) {  		ThumbnailImage = texture;  		IconImage = texture;  		IconImageBig = texture;  	}  } else {  	ThumbnailImage = imageFilePath;  	IconImage = imageFilePath;  	IconImageBig = imageFilePath;  }  
Magic Number,TraktPlugin.GUI,GUIUserListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIUserListItem.cs,SetImageToGui,The following statement contains a magic number: memoryImage = GUIImageHandler.DrawOverlayOnAvatar (imageFilePath' ratingOverlay' new Size (140' 140));  
Magic Number,TraktPlugin.GUI,GUIUserListItem,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems\GUIUserListItem.cs,SetImageToGui,The following statement contains a magic number: memoryImage = GUIImageHandler.DrawOverlayOnAvatar (imageFilePath' ratingOverlay' new Size (140' 140));  
Magic Number,TraktPlugin.GUI,GUILists,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		GUIListItem selectedItem = this.Facade.SelectedListItem;  		if (selectedItem == null)  			return;  		var selectedList = selectedItem.TVTag as TraktListDetail;  		if (selectedList == null)  			return;  		// Load current selected list  		GUIListItems.CurrentList = selectedList;  		GUIListItems.CurrentUser = CurrentUser;  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CustomListItems);  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var item = Facade.SelectedListItem as GUIMovieListItem;  	if (item == null)  		return;  	CheckAndPlayMovie (true);  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByCreditMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByCreditMovies.Field) {  			TraktSettings.SortByCreditMovies = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadCredits ();  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideWatched = !TraktSettings.CreditMoviesHideWatched;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideWatchlisted = !TraktSettings.CreditMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideCollected = !TraktSettings.CreditMoviesHideCollected;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideRated = !TraktSettings.CreditMoviesHideRated;  	UpdateButtonState ();  	LoadCredits ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var item = Facade.SelectedListItem as GUIMovieListItem;  	if (item == null)  		return;  	CheckAndPlayMovie (true);  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByCreditMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByCreditMovies.Field) {  			TraktSettings.SortByCreditMovies = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadCredits ();  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideWatched = !TraktSettings.CreditMoviesHideWatched;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideWatchlisted = !TraktSettings.CreditMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideCollected = !TraktSettings.CreditMoviesHideCollected;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideRated = !TraktSettings.CreditMoviesHideRated;  	UpdateButtonState ();  	LoadCredits ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var item = Facade.SelectedListItem as GUIMovieListItem;  	if (item == null)  		return;  	CheckAndPlayMovie (true);  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByCreditMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByCreditMovies.Field) {  			TraktSettings.SortByCreditMovies = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadCredits ();  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideWatched = !TraktSettings.CreditMoviesHideWatched;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideWatchlisted = !TraktSettings.CreditMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideCollected = !TraktSettings.CreditMoviesHideCollected;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideRated = !TraktSettings.CreditMoviesHideRated;  	UpdateButtonState ();  	LoadCredits ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var item = Facade.SelectedListItem as GUIMovieListItem;  	if (item == null)  		return;  	CheckAndPlayMovie (true);  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByCreditMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByCreditMovies.Field) {  			TraktSettings.SortByCreditMovies = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadCredits ();  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideWatched = !TraktSettings.CreditMoviesHideWatched;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideWatchlisted = !TraktSettings.CreditMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideCollected = !TraktSettings.CreditMoviesHideCollected;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideRated = !TraktSettings.CreditMoviesHideRated;  	UpdateButtonState ();  	LoadCredits ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var item = Facade.SelectedListItem as GUIMovieListItem;  	if (item == null)  		return;  	CheckAndPlayMovie (true);  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByCreditMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByCreditMovies.Field) {  			TraktSettings.SortByCreditMovies = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadCredits ();  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideWatched = !TraktSettings.CreditMoviesHideWatched;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideWatchlisted = !TraktSettings.CreditMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideCollected = !TraktSettings.CreditMoviesHideCollected;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideRated = !TraktSettings.CreditMoviesHideRated;  	UpdateButtonState ();  	LoadCredits ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var item = Facade.SelectedListItem as GUIMovieListItem;  	if (item == null)  		return;  	CheckAndPlayMovie (true);  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByCreditMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByCreditMovies.Field) {  			TraktSettings.SortByCreditMovies = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadCredits ();  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideWatched = !TraktSettings.CreditMoviesHideWatched;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideWatchlisted = !TraktSettings.CreditMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideCollected = !TraktSettings.CreditMoviesHideCollected;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideRated = !TraktSettings.CreditMoviesHideRated;  	UpdateButtonState ();  	LoadCredits ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var item = Facade.SelectedListItem as GUIMovieListItem;  	if (item == null)  		return;  	CheckAndPlayMovie (true);  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByCreditMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByCreditMovies.Field) {  			TraktSettings.SortByCreditMovies = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadCredits ();  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideWatched = !TraktSettings.CreditMoviesHideWatched;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideWatchlisted = !TraktSettings.CreditMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideCollected = !TraktSettings.CreditMoviesHideCollected;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditMoviesHideRated = !TraktSettings.CreditMoviesHideRated;  	UpdateButtonState ();  	LoadCredits ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  case (2):  	GUIControl.FocusControl (GetID' Facade.GetID);  	ShowViewMenu ();  	break;  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	//TODOGUIControl.FocusControl(GetID' Facade.GetID);  	//TODOSearchForUser();  	break;  case (4):  	GUIControl.FocusControl (GetID' Facade.GetID);  	ClearCache ();  	LoadView ();  	break;  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		switch (CurrentViewLevel) {  		case ViewLevel.Network:  			var selectedItem = Facade.SelectedListItem as GUIUserListItem;  			if (selectedItem.IsFolder) {  				// return to previous view list  				LoadView ();  			} else {  				if (!CurrentSelectedUser.IsPrivate || CurrentView == View.Friends) {  					LoadActivityTypes ();  				} else {  					GUIUtils.ShowOKDialog (Translation.Protected' Translation.UserIsProtected);  				}  			}  			break;  		case ViewLevel.ActivityTypes:  			// Launch Corresponding Activity window  			switch (SelectedActivity) {  			case (ActivityType.UserProfile):  				GUIUserProfile.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.UserProfile);  				break;  			case (ActivityType.RecentWatchedMovies):  				GUIRecentWatchedMovies.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedMovies);  				break;  			case (ActivityType.RecentWatchedEpisodes):  				GUIRecentWatchedEpisodes.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedEpisodes);  				break;  			case (ActivityType.RecentAddedEpisodes):  				GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  				//TODOGUIRecentAddedEpisodes.CurrentUser = CurrentSelectedUser.Username;  				//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);  				break;  			case (ActivityType.RecentAddedMovies):  				GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  				//TODOGUIRecentAddedMovies.CurrentUser = CurrentSelectedUser.Username;  				//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);  				break;  			case (ActivityType.RecentComments):  				GUIRecentShouts.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentShouts);  				break;  			case (ActivityType.MovieWatchList):  				GUIWatchListMovies.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListMovies);  				break;  			case (ActivityType.ShowWatchList):  				GUIWatchListShows.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListShows);  				break;  			case (ActivityType.EpisodeWatchList):  				GUIWatchListEpisodes.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListEpisodes);  				break;  			case (ActivityType.Lists):  				GUILists.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CustomLists);  				break;  			}  			break;  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  case (2):  	GUIControl.FocusControl (GetID' Facade.GetID);  	ShowViewMenu ();  	break;  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	//TODOGUIControl.FocusControl(GetID' Facade.GetID);  	//TODOSearchForUser();  	break;  case (4):  	GUIControl.FocusControl (GetID' Facade.GetID);  	ClearCache ();  	LoadView ();  	break;  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		switch (CurrentViewLevel) {  		case ViewLevel.Network:  			var selectedItem = Facade.SelectedListItem as GUIUserListItem;  			if (selectedItem.IsFolder) {  				// return to previous view list  				LoadView ();  			} else {  				if (!CurrentSelectedUser.IsPrivate || CurrentView == View.Friends) {  					LoadActivityTypes ();  				} else {  					GUIUtils.ShowOKDialog (Translation.Protected' Translation.UserIsProtected);  				}  			}  			break;  		case ViewLevel.ActivityTypes:  			// Launch Corresponding Activity window  			switch (SelectedActivity) {  			case (ActivityType.UserProfile):  				GUIUserProfile.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.UserProfile);  				break;  			case (ActivityType.RecentWatchedMovies):  				GUIRecentWatchedMovies.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedMovies);  				break;  			case (ActivityType.RecentWatchedEpisodes):  				GUIRecentWatchedEpisodes.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedEpisodes);  				break;  			case (ActivityType.RecentAddedEpisodes):  				GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  				//TODOGUIRecentAddedEpisodes.CurrentUser = CurrentSelectedUser.Username;  				//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);  				break;  			case (ActivityType.RecentAddedMovies):  				GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  				//TODOGUIRecentAddedMovies.CurrentUser = CurrentSelectedUser.Username;  				//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);  				break;  			case (ActivityType.RecentComments):  				GUIRecentShouts.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentShouts);  				break;  			case (ActivityType.MovieWatchList):  				GUIWatchListMovies.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListMovies);  				break;  			case (ActivityType.ShowWatchList):  				GUIWatchListShows.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListShows);  				break;  			case (ActivityType.EpisodeWatchList):  				GUIWatchListEpisodes.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListEpisodes);  				break;  			case (ActivityType.Lists):  				GUILists.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CustomLists);  				break;  			}  			break;  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  case (2):  	GUIControl.FocusControl (GetID' Facade.GetID);  	ShowViewMenu ();  	break;  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	//TODOGUIControl.FocusControl(GetID' Facade.GetID);  	//TODOSearchForUser();  	break;  case (4):  	GUIControl.FocusControl (GetID' Facade.GetID);  	ClearCache ();  	LoadView ();  	break;  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		switch (CurrentViewLevel) {  		case ViewLevel.Network:  			var selectedItem = Facade.SelectedListItem as GUIUserListItem;  			if (selectedItem.IsFolder) {  				// return to previous view list  				LoadView ();  			} else {  				if (!CurrentSelectedUser.IsPrivate || CurrentView == View.Friends) {  					LoadActivityTypes ();  				} else {  					GUIUtils.ShowOKDialog (Translation.Protected' Translation.UserIsProtected);  				}  			}  			break;  		case ViewLevel.ActivityTypes:  			// Launch Corresponding Activity window  			switch (SelectedActivity) {  			case (ActivityType.UserProfile):  				GUIUserProfile.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.UserProfile);  				break;  			case (ActivityType.RecentWatchedMovies):  				GUIRecentWatchedMovies.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedMovies);  				break;  			case (ActivityType.RecentWatchedEpisodes):  				GUIRecentWatchedEpisodes.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedEpisodes);  				break;  			case (ActivityType.RecentAddedEpisodes):  				GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  				//TODOGUIRecentAddedEpisodes.CurrentUser = CurrentSelectedUser.Username;  				//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);  				break;  			case (ActivityType.RecentAddedMovies):  				GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  				//TODOGUIRecentAddedMovies.CurrentUser = CurrentSelectedUser.Username;  				//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);  				break;  			case (ActivityType.RecentComments):  				GUIRecentShouts.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentShouts);  				break;  			case (ActivityType.MovieWatchList):  				GUIWatchListMovies.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListMovies);  				break;  			case (ActivityType.ShowWatchList):  				GUIWatchListShows.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListShows);  				break;  			case (ActivityType.EpisodeWatchList):  				GUIWatchListEpisodes.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListEpisodes);  				break;  			case (ActivityType.Lists):  				GUILists.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CustomLists);  				break;  			}  			break;  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  case (2):  	GUIControl.FocusControl (GetID' Facade.GetID);  	ShowViewMenu ();  	break;  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	//TODOGUIControl.FocusControl(GetID' Facade.GetID);  	//TODOSearchForUser();  	break;  case (4):  	GUIControl.FocusControl (GetID' Facade.GetID);  	ClearCache ();  	LoadView ();  	break;  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		switch (CurrentViewLevel) {  		case ViewLevel.Network:  			var selectedItem = Facade.SelectedListItem as GUIUserListItem;  			if (selectedItem.IsFolder) {  				// return to previous view list  				LoadView ();  			} else {  				if (!CurrentSelectedUser.IsPrivate || CurrentView == View.Friends) {  					LoadActivityTypes ();  				} else {  					GUIUtils.ShowOKDialog (Translation.Protected' Translation.UserIsProtected);  				}  			}  			break;  		case ViewLevel.ActivityTypes:  			// Launch Corresponding Activity window  			switch (SelectedActivity) {  			case (ActivityType.UserProfile):  				GUIUserProfile.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.UserProfile);  				break;  			case (ActivityType.RecentWatchedMovies):  				GUIRecentWatchedMovies.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedMovies);  				break;  			case (ActivityType.RecentWatchedEpisodes):  				GUIRecentWatchedEpisodes.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedEpisodes);  				break;  			case (ActivityType.RecentAddedEpisodes):  				GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  				//TODOGUIRecentAddedEpisodes.CurrentUser = CurrentSelectedUser.Username;  				//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);  				break;  			case (ActivityType.RecentAddedMovies):  				GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  				//TODOGUIRecentAddedMovies.CurrentUser = CurrentSelectedUser.Username;  				//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);  				break;  			case (ActivityType.RecentComments):  				GUIRecentShouts.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentShouts);  				break;  			case (ActivityType.MovieWatchList):  				GUIWatchListMovies.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListMovies);  				break;  			case (ActivityType.ShowWatchList):  				GUIWatchListShows.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListShows);  				break;  			case (ActivityType.EpisodeWatchList):  				GUIWatchListEpisodes.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListEpisodes);  				break;  			case (ActivityType.Lists):  				GUILists.CurrentUser = CurrentSelectedUser.Username;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CustomLists);  				break;  			}  			break;  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,LoadActivityTypes,The following statement contains a magic number: GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' Facade.Count.ToString ()' GUILocalizeStrings.Get (507)));  
Magic Number,TraktPlugin.GUI,GUIPersonShowCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var item = Facade.SelectedListItem as GUIShowListItem;  	if (item == null)  		return;  	if (TraktSettings.EnableJumpToForTVShows) {  		CheckAndPlayEpisode (true);  	} else {  		if (item.Show == null)  			return;  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByCreditShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByCreditShows.Field) {  			TraktSettings.SortByCreditShows = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadCredits ();  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideWatched = !TraktSettings.CreditShowsHideWatched;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideWatchlisted = !TraktSettings.CreditShowsHideWatchlisted;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideCollected = !TraktSettings.CreditShowsHideCollected;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideRated = !TraktSettings.CreditShowsHideRated;  	UpdateButtonState ();  	LoadCredits ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPersonShowCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var item = Facade.SelectedListItem as GUIShowListItem;  	if (item == null)  		return;  	if (TraktSettings.EnableJumpToForTVShows) {  		CheckAndPlayEpisode (true);  	} else {  		if (item.Show == null)  			return;  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByCreditShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByCreditShows.Field) {  			TraktSettings.SortByCreditShows = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadCredits ();  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideWatched = !TraktSettings.CreditShowsHideWatched;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideWatchlisted = !TraktSettings.CreditShowsHideWatchlisted;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideCollected = !TraktSettings.CreditShowsHideCollected;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideRated = !TraktSettings.CreditShowsHideRated;  	UpdateButtonState ();  	LoadCredits ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPersonShowCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var item = Facade.SelectedListItem as GUIShowListItem;  	if (item == null)  		return;  	if (TraktSettings.EnableJumpToForTVShows) {  		CheckAndPlayEpisode (true);  	} else {  		if (item.Show == null)  			return;  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByCreditShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByCreditShows.Field) {  			TraktSettings.SortByCreditShows = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadCredits ();  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideWatched = !TraktSettings.CreditShowsHideWatched;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideWatchlisted = !TraktSettings.CreditShowsHideWatchlisted;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideCollected = !TraktSettings.CreditShowsHideCollected;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideRated = !TraktSettings.CreditShowsHideRated;  	UpdateButtonState ();  	LoadCredits ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPersonShowCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var item = Facade.SelectedListItem as GUIShowListItem;  	if (item == null)  		return;  	if (TraktSettings.EnableJumpToForTVShows) {  		CheckAndPlayEpisode (true);  	} else {  		if (item.Show == null)  			return;  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByCreditShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByCreditShows.Field) {  			TraktSettings.SortByCreditShows = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadCredits ();  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideWatched = !TraktSettings.CreditShowsHideWatched;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideWatchlisted = !TraktSettings.CreditShowsHideWatchlisted;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideCollected = !TraktSettings.CreditShowsHideCollected;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideRated = !TraktSettings.CreditShowsHideRated;  	UpdateButtonState ();  	LoadCredits ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPersonShowCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var item = Facade.SelectedListItem as GUIShowListItem;  	if (item == null)  		return;  	if (TraktSettings.EnableJumpToForTVShows) {  		CheckAndPlayEpisode (true);  	} else {  		if (item.Show == null)  			return;  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByCreditShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByCreditShows.Field) {  			TraktSettings.SortByCreditShows = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadCredits ();  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideWatched = !TraktSettings.CreditShowsHideWatched;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideWatchlisted = !TraktSettings.CreditShowsHideWatchlisted;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideCollected = !TraktSettings.CreditShowsHideCollected;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideRated = !TraktSettings.CreditShowsHideRated;  	UpdateButtonState ();  	LoadCredits ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPersonShowCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var item = Facade.SelectedListItem as GUIShowListItem;  	if (item == null)  		return;  	if (TraktSettings.EnableJumpToForTVShows) {  		CheckAndPlayEpisode (true);  	} else {  		if (item.Show == null)  			return;  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByCreditShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByCreditShows.Field) {  			TraktSettings.SortByCreditShows = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadCredits ();  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideWatched = !TraktSettings.CreditShowsHideWatched;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideWatchlisted = !TraktSettings.CreditShowsHideWatchlisted;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideCollected = !TraktSettings.CreditShowsHideCollected;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideRated = !TraktSettings.CreditShowsHideRated;  	UpdateButtonState ();  	LoadCredits ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPersonShowCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var item = Facade.SelectedListItem as GUIShowListItem;  	if (item == null)  		return;  	if (TraktSettings.EnableJumpToForTVShows) {  		CheckAndPlayEpisode (true);  	} else {  		if (item.Show == null)  			return;  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByCreditShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByCreditShows.Field) {  			TraktSettings.SortByCreditShows = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadCredits ();  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideWatched = !TraktSettings.CreditShowsHideWatched;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideWatchlisted = !TraktSettings.CreditShowsHideWatchlisted;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideCollected = !TraktSettings.CreditShowsHideCollected;  	UpdateButtonState ();  	LoadCredits ();  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = 0;  	TraktSettings.CreditShowsHideRated = !TraktSettings.CreditShowsHideRated;  	UpdateButtonState ();  	LoadCredits ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPersonSummary,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonSummary.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var selectedItem = Facade.SelectedListItem;  	if (selectedItem == null)  		return;  	if (CurrentView == View.Summary) {  		if (selectedItem.TVTag as string == View.MovieCredits.ToString ()) {  			LoadMovieCredits ();  		} else if (selectedItem.TVTag as string == View.ShowCredits.ToString ()) {  			LoadShowCredits ();  		}  	} else if (CurrentView == View.MovieCredits) {  		GUIPersonMovieCredits.CurrentPerson = CurrentPerson;  		GUIPersonMovieCredits.CurrentCredits = selectedItem.MusicTag as TraktPersonMovieCredits;  		GUIPersonMovieCredits.CurrentCreditType = (Credit)selectedItem.TVTag;  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.PersonCreditMovies);  	} else if (CurrentView == View.ShowCredits) {  		GUIPersonShowCredits.CurrentPerson = CurrentPerson;  		GUIPersonShowCredits.CurrentCredits = selectedItem.MusicTag as TraktPersonShowCredits;  		GUIPersonShowCredits.CurrentCreditType = (Credit)selectedItem.TVTag;  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.PersonCreditShows);  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,Reset,The following statement contains a magic number: SetLine (2' "");  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,Reset,The following statement contains a magic number: SetLine (3' "");  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,Reset,The following statement contains a magic number: SetLine (4' "");  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,DoModal,The following statement contains a magic number: SetLine (2' Translation.PinCodeDlgLabel2);  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID) {  case Action.ActionType.REMOTE_1:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "1";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_2:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "2";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_3:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "3";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_4:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "4";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_5:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "5";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_6:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "6";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_7:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "7";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_8:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "8";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_9:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "9";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_0:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "0";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.ACTION_KEY_PRESSED:  	// some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands  	if (EnteredPinCode.Length >= 4)  		return;  	if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9') {  		char key = (char)action.m_key.KeyChar;  		EnteredPinCode = EnteredPinCode + key;  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_DELETE_ITEM:  case Action.ActionType.ACTION_MOVE_DOWN:  case Action.ActionType.ACTION_MOVE_LEFT:  	if (EnteredPinCode.Length > 0) {  		EnteredPinCode = EnteredPinCode.Substring (0' EnteredPinCode.Length - 1);  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_SELECT_ITEM:  	PageDestroy ();  	return;  case Action.ActionType.ACTION_PREVIOUS_MENU:  case Action.ActionType.ACTION_CLOSE_DIALOG:  case Action.ActionType.ACTION_CONTEXT_MENU:  	PageDestroy ();  	return;  }  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID) {  case Action.ActionType.REMOTE_1:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "1";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_2:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "2";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_3:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "3";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_4:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "4";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_5:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "5";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_6:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "6";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_7:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "7";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_8:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "8";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_9:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "9";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_0:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "0";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.ACTION_KEY_PRESSED:  	// some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands  	if (EnteredPinCode.Length >= 4)  		return;  	if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9') {  		char key = (char)action.m_key.KeyChar;  		EnteredPinCode = EnteredPinCode + key;  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_DELETE_ITEM:  case Action.ActionType.ACTION_MOVE_DOWN:  case Action.ActionType.ACTION_MOVE_LEFT:  	if (EnteredPinCode.Length > 0) {  		EnteredPinCode = EnteredPinCode.Substring (0' EnteredPinCode.Length - 1);  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_SELECT_ITEM:  	PageDestroy ();  	return;  case Action.ActionType.ACTION_PREVIOUS_MENU:  case Action.ActionType.ACTION_CLOSE_DIALOG:  case Action.ActionType.ACTION_CONTEXT_MENU:  	PageDestroy ();  	return;  }  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID) {  case Action.ActionType.REMOTE_1:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "1";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_2:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "2";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_3:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "3";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_4:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "4";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_5:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "5";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_6:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "6";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_7:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "7";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_8:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "8";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_9:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "9";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_0:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "0";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.ACTION_KEY_PRESSED:  	// some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands  	if (EnteredPinCode.Length >= 4)  		return;  	if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9') {  		char key = (char)action.m_key.KeyChar;  		EnteredPinCode = EnteredPinCode + key;  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_DELETE_ITEM:  case Action.ActionType.ACTION_MOVE_DOWN:  case Action.ActionType.ACTION_MOVE_LEFT:  	if (EnteredPinCode.Length > 0) {  		EnteredPinCode = EnteredPinCode.Substring (0' EnteredPinCode.Length - 1);  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_SELECT_ITEM:  	PageDestroy ();  	return;  case Action.ActionType.ACTION_PREVIOUS_MENU:  case Action.ActionType.ACTION_CLOSE_DIALOG:  case Action.ActionType.ACTION_CONTEXT_MENU:  	PageDestroy ();  	return;  }  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID) {  case Action.ActionType.REMOTE_1:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "1";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_2:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "2";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_3:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "3";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_4:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "4";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_5:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "5";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_6:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "6";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_7:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "7";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_8:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "8";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_9:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "9";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_0:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "0";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.ACTION_KEY_PRESSED:  	// some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands  	if (EnteredPinCode.Length >= 4)  		return;  	if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9') {  		char key = (char)action.m_key.KeyChar;  		EnteredPinCode = EnteredPinCode + key;  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_DELETE_ITEM:  case Action.ActionType.ACTION_MOVE_DOWN:  case Action.ActionType.ACTION_MOVE_LEFT:  	if (EnteredPinCode.Length > 0) {  		EnteredPinCode = EnteredPinCode.Substring (0' EnteredPinCode.Length - 1);  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_SELECT_ITEM:  	PageDestroy ();  	return;  case Action.ActionType.ACTION_PREVIOUS_MENU:  case Action.ActionType.ACTION_CLOSE_DIALOG:  case Action.ActionType.ACTION_CONTEXT_MENU:  	PageDestroy ();  	return;  }  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID) {  case Action.ActionType.REMOTE_1:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "1";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_2:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "2";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_3:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "3";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_4:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "4";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_5:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "5";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_6:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "6";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_7:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "7";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_8:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "8";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_9:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "9";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_0:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "0";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.ACTION_KEY_PRESSED:  	// some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands  	if (EnteredPinCode.Length >= 4)  		return;  	if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9') {  		char key = (char)action.m_key.KeyChar;  		EnteredPinCode = EnteredPinCode + key;  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_DELETE_ITEM:  case Action.ActionType.ACTION_MOVE_DOWN:  case Action.ActionType.ACTION_MOVE_LEFT:  	if (EnteredPinCode.Length > 0) {  		EnteredPinCode = EnteredPinCode.Substring (0' EnteredPinCode.Length - 1);  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_SELECT_ITEM:  	PageDestroy ();  	return;  case Action.ActionType.ACTION_PREVIOUS_MENU:  case Action.ActionType.ACTION_CLOSE_DIALOG:  case Action.ActionType.ACTION_CONTEXT_MENU:  	PageDestroy ();  	return;  }  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID) {  case Action.ActionType.REMOTE_1:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "1";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_2:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "2";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_3:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "3";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_4:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "4";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_5:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "5";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_6:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "6";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_7:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "7";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_8:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "8";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_9:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "9";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_0:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "0";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.ACTION_KEY_PRESSED:  	// some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands  	if (EnteredPinCode.Length >= 4)  		return;  	if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9') {  		char key = (char)action.m_key.KeyChar;  		EnteredPinCode = EnteredPinCode + key;  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_DELETE_ITEM:  case Action.ActionType.ACTION_MOVE_DOWN:  case Action.ActionType.ACTION_MOVE_LEFT:  	if (EnteredPinCode.Length > 0) {  		EnteredPinCode = EnteredPinCode.Substring (0' EnteredPinCode.Length - 1);  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_SELECT_ITEM:  	PageDestroy ();  	return;  case Action.ActionType.ACTION_PREVIOUS_MENU:  case Action.ActionType.ACTION_CLOSE_DIALOG:  case Action.ActionType.ACTION_CONTEXT_MENU:  	PageDestroy ();  	return;  }  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID) {  case Action.ActionType.REMOTE_1:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "1";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_2:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "2";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_3:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "3";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_4:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "4";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_5:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "5";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_6:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "6";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_7:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "7";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_8:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "8";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_9:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "9";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_0:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "0";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.ACTION_KEY_PRESSED:  	// some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands  	if (EnteredPinCode.Length >= 4)  		return;  	if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9') {  		char key = (char)action.m_key.KeyChar;  		EnteredPinCode = EnteredPinCode + key;  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_DELETE_ITEM:  case Action.ActionType.ACTION_MOVE_DOWN:  case Action.ActionType.ACTION_MOVE_LEFT:  	if (EnteredPinCode.Length > 0) {  		EnteredPinCode = EnteredPinCode.Substring (0' EnteredPinCode.Length - 1);  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_SELECT_ITEM:  	PageDestroy ();  	return;  case Action.ActionType.ACTION_PREVIOUS_MENU:  case Action.ActionType.ACTION_CLOSE_DIALOG:  case Action.ActionType.ACTION_CONTEXT_MENU:  	PageDestroy ();  	return;  }  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID) {  case Action.ActionType.REMOTE_1:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "1";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_2:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "2";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_3:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "3";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_4:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "4";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_5:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "5";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_6:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "6";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_7:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "7";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_8:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "8";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_9:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "9";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_0:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "0";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.ACTION_KEY_PRESSED:  	// some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands  	if (EnteredPinCode.Length >= 4)  		return;  	if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9') {  		char key = (char)action.m_key.KeyChar;  		EnteredPinCode = EnteredPinCode + key;  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_DELETE_ITEM:  case Action.ActionType.ACTION_MOVE_DOWN:  case Action.ActionType.ACTION_MOVE_LEFT:  	if (EnteredPinCode.Length > 0) {  		EnteredPinCode = EnteredPinCode.Substring (0' EnteredPinCode.Length - 1);  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_SELECT_ITEM:  	PageDestroy ();  	return;  case Action.ActionType.ACTION_PREVIOUS_MENU:  case Action.ActionType.ACTION_CLOSE_DIALOG:  case Action.ActionType.ACTION_CONTEXT_MENU:  	PageDestroy ();  	return;  }  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID) {  case Action.ActionType.REMOTE_1:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "1";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_2:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "2";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_3:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "3";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_4:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "4";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_5:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "5";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_6:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "6";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_7:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "7";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_8:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "8";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_9:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "9";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_0:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "0";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.ACTION_KEY_PRESSED:  	// some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands  	if (EnteredPinCode.Length >= 4)  		return;  	if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9') {  		char key = (char)action.m_key.KeyChar;  		EnteredPinCode = EnteredPinCode + key;  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_DELETE_ITEM:  case Action.ActionType.ACTION_MOVE_DOWN:  case Action.ActionType.ACTION_MOVE_LEFT:  	if (EnteredPinCode.Length > 0) {  		EnteredPinCode = EnteredPinCode.Substring (0' EnteredPinCode.Length - 1);  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_SELECT_ITEM:  	PageDestroy ();  	return;  case Action.ActionType.ACTION_PREVIOUS_MENU:  case Action.ActionType.ACTION_CLOSE_DIALOG:  case Action.ActionType.ACTION_CONTEXT_MENU:  	PageDestroy ();  	return;  }  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID) {  case Action.ActionType.REMOTE_1:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "1";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_2:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "2";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_3:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "3";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_4:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "4";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_5:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "5";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_6:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "6";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_7:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "7";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_8:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "8";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_9:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "9";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_0:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "0";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.ACTION_KEY_PRESSED:  	// some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands  	if (EnteredPinCode.Length >= 4)  		return;  	if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9') {  		char key = (char)action.m_key.KeyChar;  		EnteredPinCode = EnteredPinCode + key;  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_DELETE_ITEM:  case Action.ActionType.ACTION_MOVE_DOWN:  case Action.ActionType.ACTION_MOVE_LEFT:  	if (EnteredPinCode.Length > 0) {  		EnteredPinCode = EnteredPinCode.Substring (0' EnteredPinCode.Length - 1);  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_SELECT_ITEM:  	PageDestroy ();  	return;  case Action.ActionType.ACTION_PREVIOUS_MENU:  case Action.ActionType.ACTION_CLOSE_DIALOG:  case Action.ActionType.ACTION_CONTEXT_MENU:  	PageDestroy ();  	return;  }  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: switch (action.wID) {  case Action.ActionType.REMOTE_1:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "1";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_2:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "2";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_3:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "3";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_4:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "4";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_5:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "5";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_6:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "6";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_7:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "7";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_8:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "8";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_9:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "9";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_0:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "0";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.ACTION_KEY_PRESSED:  	// some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands  	if (EnteredPinCode.Length >= 4)  		return;  	if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9') {  		char key = (char)action.m_key.KeyChar;  		EnteredPinCode = EnteredPinCode + key;  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_DELETE_ITEM:  case Action.ActionType.ACTION_MOVE_DOWN:  case Action.ActionType.ACTION_MOVE_LEFT:  	if (EnteredPinCode.Length > 0) {  		EnteredPinCode = EnteredPinCode.Substring (0' EnteredPinCode.Length - 1);  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_SELECT_ITEM:  	PageDestroy ();  	return;  case Action.ActionType.ACTION_PREVIOUS_MENU:  case Action.ActionType.ACTION_CLOSE_DIALOG:  case Action.ActionType.ACTION_CONTEXT_MENU:  	PageDestroy ();  	return;  }  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: if (EnteredPinCode.Length >= 4)  	return;  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: if (EnteredPinCode.Length >= 4)  	return;  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: if (EnteredPinCode.Length >= 4)  	return;  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: if (EnteredPinCode.Length >= 4)  	return;  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: if (EnteredPinCode.Length >= 4)  	return;  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: if (EnteredPinCode.Length >= 4)  	return;  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: if (EnteredPinCode.Length >= 4)  	return;  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: if (EnteredPinCode.Length >= 4)  	return;  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: if (EnteredPinCode.Length >= 4)  	return;  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: if (EnteredPinCode.Length >= 4)  	return;  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following statement contains a magic number: if (EnteredPinCode.Length >= 4)  	return;  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,UpdatePinCode,The following statement contains a magic number: if (pinLength == 4) {  	ConfirmPinCode ();  }  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,ClearPinCode,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	imagePins [i].Visible = false;  }  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,ConfirmPinCode,The following statement contains a magic number: if (EnteredPinCode != MasterCode) {  	if (labelFeedback != null)  		labelFeedback.Label = Translation.PinCodeMessageIncorrect;  } else {  	IsCorrect = true;  	// delay shutting down the dialog so the user gets visual confirmation of the last input  	var delay = new Thread (obj => {  		Thread.Sleep (500);  		PageDestroy ();  		return;  	});  	delay.Start ();  }  
Magic Number,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,ConfirmPinCode,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIMovieListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			CheckAndPlayMovie (true);  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadPopularMovies (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByPopularMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByPopularMovies.Field) {  			TraktSettings.SortByPopularMovies = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadPopularMovies (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideWatched = !TraktSettings.PopularMoviesHideWatched;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideWatchlisted = !TraktSettings.PopularMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideCollected = !TraktSettings.PopularMoviesHideCollected;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideRated = !TraktSettings.PopularMoviesHideRated;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIMovieListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			CheckAndPlayMovie (true);  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadPopularMovies (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByPopularMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByPopularMovies.Field) {  			TraktSettings.SortByPopularMovies = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadPopularMovies (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideWatched = !TraktSettings.PopularMoviesHideWatched;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideWatchlisted = !TraktSettings.PopularMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideCollected = !TraktSettings.PopularMoviesHideCollected;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideRated = !TraktSettings.PopularMoviesHideRated;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIMovieListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			CheckAndPlayMovie (true);  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadPopularMovies (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByPopularMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByPopularMovies.Field) {  			TraktSettings.SortByPopularMovies = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadPopularMovies (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideWatched = !TraktSettings.PopularMoviesHideWatched;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideWatchlisted = !TraktSettings.PopularMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideCollected = !TraktSettings.PopularMoviesHideCollected;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideRated = !TraktSettings.PopularMoviesHideRated;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIMovieListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			CheckAndPlayMovie (true);  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadPopularMovies (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByPopularMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByPopularMovies.Field) {  			TraktSettings.SortByPopularMovies = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadPopularMovies (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideWatched = !TraktSettings.PopularMoviesHideWatched;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideWatchlisted = !TraktSettings.PopularMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideCollected = !TraktSettings.PopularMoviesHideCollected;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideRated = !TraktSettings.PopularMoviesHideRated;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIMovieListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			CheckAndPlayMovie (true);  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadPopularMovies (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByPopularMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByPopularMovies.Field) {  			TraktSettings.SortByPopularMovies = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadPopularMovies (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideWatched = !TraktSettings.PopularMoviesHideWatched;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideWatchlisted = !TraktSettings.PopularMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideCollected = !TraktSettings.PopularMoviesHideCollected;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideRated = !TraktSettings.PopularMoviesHideRated;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIMovieListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			CheckAndPlayMovie (true);  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadPopularMovies (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByPopularMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByPopularMovies.Field) {  			TraktSettings.SortByPopularMovies = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadPopularMovies (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideWatched = !TraktSettings.PopularMoviesHideWatched;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideWatchlisted = !TraktSettings.PopularMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideCollected = !TraktSettings.PopularMoviesHideCollected;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideRated = !TraktSettings.PopularMoviesHideRated;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIMovieListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			CheckAndPlayMovie (true);  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadPopularMovies (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByPopularMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByPopularMovies.Field) {  			TraktSettings.SortByPopularMovies = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadPopularMovies (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideWatched = !TraktSettings.PopularMoviesHideWatched;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideWatchlisted = !TraktSettings.PopularMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideCollected = !TraktSettings.PopularMoviesHideCollected;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularMoviesHideRated = !TraktSettings.PopularMoviesHideRated;  	UpdateButtonState ();  	LoadPopularMovies (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPopularShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIShowListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			if (TraktSettings.EnableJumpToForTVShows) {  				CheckAndPlayEpisode (true);  			} else {  				if (item.Show == null)  					return;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  			}  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadPopularShows (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByPopularShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByPopularShows.Field) {  			TraktSettings.SortByPopularShows = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadPopularShows (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideWatched = !TraktSettings.PopularShowsHideWatched;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideWatchlisted = !TraktSettings.PopularShowsHideWatchlisted;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideCollected = !TraktSettings.PopularShowsHideCollected;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideRated = !TraktSettings.PopularShowsHideRated;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPopularShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIShowListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			if (TraktSettings.EnableJumpToForTVShows) {  				CheckAndPlayEpisode (true);  			} else {  				if (item.Show == null)  					return;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  			}  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadPopularShows (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByPopularShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByPopularShows.Field) {  			TraktSettings.SortByPopularShows = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadPopularShows (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideWatched = !TraktSettings.PopularShowsHideWatched;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideWatchlisted = !TraktSettings.PopularShowsHideWatchlisted;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideCollected = !TraktSettings.PopularShowsHideCollected;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideRated = !TraktSettings.PopularShowsHideRated;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPopularShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIShowListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			if (TraktSettings.EnableJumpToForTVShows) {  				CheckAndPlayEpisode (true);  			} else {  				if (item.Show == null)  					return;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  			}  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadPopularShows (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByPopularShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByPopularShows.Field) {  			TraktSettings.SortByPopularShows = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadPopularShows (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideWatched = !TraktSettings.PopularShowsHideWatched;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideWatchlisted = !TraktSettings.PopularShowsHideWatchlisted;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideCollected = !TraktSettings.PopularShowsHideCollected;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideRated = !TraktSettings.PopularShowsHideRated;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPopularShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIShowListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			if (TraktSettings.EnableJumpToForTVShows) {  				CheckAndPlayEpisode (true);  			} else {  				if (item.Show == null)  					return;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  			}  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadPopularShows (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByPopularShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByPopularShows.Field) {  			TraktSettings.SortByPopularShows = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadPopularShows (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideWatched = !TraktSettings.PopularShowsHideWatched;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideWatchlisted = !TraktSettings.PopularShowsHideWatchlisted;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideCollected = !TraktSettings.PopularShowsHideCollected;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideRated = !TraktSettings.PopularShowsHideRated;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPopularShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIShowListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			if (TraktSettings.EnableJumpToForTVShows) {  				CheckAndPlayEpisode (true);  			} else {  				if (item.Show == null)  					return;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  			}  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadPopularShows (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByPopularShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByPopularShows.Field) {  			TraktSettings.SortByPopularShows = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadPopularShows (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideWatched = !TraktSettings.PopularShowsHideWatched;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideWatchlisted = !TraktSettings.PopularShowsHideWatchlisted;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideCollected = !TraktSettings.PopularShowsHideCollected;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideRated = !TraktSettings.PopularShowsHideRated;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPopularShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIShowListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			if (TraktSettings.EnableJumpToForTVShows) {  				CheckAndPlayEpisode (true);  			} else {  				if (item.Show == null)  					return;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  			}  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadPopularShows (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByPopularShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByPopularShows.Field) {  			TraktSettings.SortByPopularShows = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadPopularShows (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideWatched = !TraktSettings.PopularShowsHideWatched;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideWatchlisted = !TraktSettings.PopularShowsHideWatchlisted;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideCollected = !TraktSettings.PopularShowsHideCollected;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideRated = !TraktSettings.PopularShowsHideRated;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIPopularShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIShowListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			if (TraktSettings.EnableJumpToForTVShows) {  				CheckAndPlayEpisode (true);  			} else {  				if (item.Show == null)  					return;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  			}  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadPopularShows (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByPopularShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByPopularShows.Field) {  			TraktSettings.SortByPopularShows = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadPopularShows (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideWatched = !TraktSettings.PopularShowsHideWatched;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideWatchlisted = !TraktSettings.PopularShowsHideWatchlisted;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideCollected = !TraktSettings.PopularShowsHideCollected;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.PopularShowsHideRated = !TraktSettings.PopularShowsHideRated;  	UpdateButtonState ();  	LoadPopularShows (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		PreviousUser = CurrentUser;  		CheckAndPlayEpisode (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		PreviousUser = CurrentUser;  		CheckAndPlayEpisode (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,SendRecentlyAddedToFacade,The following statement contains a magic number: foreach (var activity in activities) {  	// bad data in API  	if (activity.Show == null || activity.Episodes == null)  		continue;  	// trakt returns an episode array per activity   	// you may add more than one in bulk  	foreach (var episode in activity.Episodes) {  		// prevent too many episodes loading in facade  		// its possible that 1 activity item can represent many episodes  		// e.g. user could of added 400 episodes of The Simpsons  		if (episodeCount >= 100)  			continue;  		var episodeSummary = new TraktEpisodeSummaryEx {  			Episode = episode'  			Show = activity.Show  		};  		// skip invalid episodes  		if (episodeSummary.Episode.Number == 0)  			continue;  		var item = new GUIEpisodeListItem (episodeSummary.ToString ()' (int)TraktGUIWindows.RecentAddedEpisodes);  		// add images for download  		var images = new GUITmdbImage {  			EpisodeImages = new TmdbEpisodeImages {  				Id = episodeSummary.Show.Ids.Tmdb'  				Season = episodeSummary.Episode.Season'  				Episode = episodeSummary.Episode.Number'  				AirDate = episodeSummary.Episode.FirstAired == null ? null : episodeSummary.Episode.FirstAired.FromISO8601 ().ToLocalTime ().ToShortDateString ()  			}  		};  		showImages.Add (images);  		// add user added date as second label  		item.Label2 = activity.Timestamp.FromISO8601 ().ToShortDateString ();  		item.TVTag = episodeSummary;  		item.Episode = episode;  		item.Show = activity.Show;  		item.Images = images;  		item.Date = activity.Timestamp.FromISO8601 ().ToLongDateString ();  		item.ItemId = Int32.MaxValue - itemId++;  		item.IsPlayed = episode.IsWatched (activity.Show);  		item.IconImage = "defaultTraktEpisode.png";  		item.IconImageBig = "defaultTraktEpisodeBig.png";  		item.ThumbnailImage = "defaultTraktEpisodeBig.png";  		item.OnItemSelected += OnEpisodeSelected;  		Utils.SetDefaultIcons (item);  		Facade.Add (item);  		episodeCount++;  	}  }  
Magic Number,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,SendRecentlyAddedToFacade,The following statement contains a magic number: foreach (var episode in activity.Episodes) {  	// prevent too many episodes loading in facade  	// its possible that 1 activity item can represent many episodes  	// e.g. user could of added 400 episodes of The Simpsons  	if (episodeCount >= 100)  		continue;  	var episodeSummary = new TraktEpisodeSummaryEx {  		Episode = episode'  		Show = activity.Show  	};  	// skip invalid episodes  	if (episodeSummary.Episode.Number == 0)  		continue;  	var item = new GUIEpisodeListItem (episodeSummary.ToString ()' (int)TraktGUIWindows.RecentAddedEpisodes);  	// add images for download  	var images = new GUITmdbImage {  		EpisodeImages = new TmdbEpisodeImages {  			Id = episodeSummary.Show.Ids.Tmdb'  			Season = episodeSummary.Episode.Season'  			Episode = episodeSummary.Episode.Number'  			AirDate = episodeSummary.Episode.FirstAired == null ? null : episodeSummary.Episode.FirstAired.FromISO8601 ().ToLocalTime ().ToShortDateString ()  		}  	};  	showImages.Add (images);  	// add user added date as second label  	item.Label2 = activity.Timestamp.FromISO8601 ().ToShortDateString ();  	item.TVTag = episodeSummary;  	item.Episode = episode;  	item.Show = activity.Show;  	item.Images = images;  	item.Date = activity.Timestamp.FromISO8601 ().ToLongDateString ();  	item.ItemId = Int32.MaxValue - itemId++;  	item.IsPlayed = episode.IsWatched (activity.Show);  	item.IconImage = "defaultTraktEpisode.png";  	item.IconImageBig = "defaultTraktEpisodeBig.png";  	item.ThumbnailImage = "defaultTraktEpisodeBig.png";  	item.OnItemSelected += OnEpisodeSelected;  	Utils.SetDefaultIcons (item);  	Facade.Add (item);  	episodeCount++;  }  
Magic Number,TraktPlugin.GUI,GUIRecentAddedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedEpisodes.cs,SendRecentlyAddedToFacade,The following statement contains a magic number: if (episodeCount >= 100)  	continue;  
Magic Number,TraktPlugin.GUI,GUIRecentAddedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		PreviousUser = CurrentUser;  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecentAddedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentAddedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		PreviousUser = CurrentUser;  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecentShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		PreviousUser = CurrentUser;  		PlayCommentItem (true);  	}  	break;  // Hide Spoilers Button  case (2):  	TraktSettings.HideSpoilersOnShouts = !TraktSettings.HideSpoilersOnShouts;  	PublishCommentSkinProperties (Facade.SelectedListItem.TVTag as TraktCommentItem);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecentShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		PreviousUser = CurrentUser;  		PlayCommentItem (true);  	}  	break;  // Hide Spoilers Button  case (2):  	TraktSettings.HideSpoilersOnShouts = !TraktSettings.HideSpoilersOnShouts;  	PublishCommentSkinProperties (Facade.SelectedListItem.TVTag as TraktCommentItem);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRelatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Hide Watched Button  case (3):  	HideWatched = hideWatchedButton.Selected;  	dictRelatedMovies.Remove (relatedMovie.Slug);  	LoadRelatedMovies ();  	GUIControl.FocusControl ((int)TraktGUIWindows.RelatedMovies' Facade.GetID);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRelatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Hide Watched Button  case (3):  	HideWatched = hideWatchedButton.Selected;  	dictRelatedMovies.Remove (relatedMovie.Slug);  	LoadRelatedMovies ();  	GUIControl.FocusControl ((int)TraktGUIWindows.RelatedMovies' Facade.GetID);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRelatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Hide Watched Button  case (3):  	HideWatched = hideWatchedButton.Selected;  	dictRelatedMovies.Remove (relatedMovie.Slug);  	LoadRelatedMovies ();  	GUIControl.FocusControl ((int)TraktGUIWindows.RelatedMovies' Facade.GetID);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRelatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,LoadRelatedMovies,The following statement contains a magic number: GUIBackgroundTask.Instance.ExecuteInBackgroundAndCallback (() => {  	if (hideWatchedButton != null) {  		GUIControl.DisableControl ((int)TraktGUIWindows.RelatedMovies' hideWatchedButton.GetID);  	}  	if (HideWatched) {  		// wait until watched item has been sent to trakt or timesout (10secs)  		while (SendingWatchedToTrakt) {  			Thread.Sleep (500);  		}  	}  	return RelatedMovies;  }' delegate (bool success' object result) {  	if (hideWatchedButton != null) {  		GUIControl.EnableControl ((int)TraktGUIWindows.RelatedMovies' hideWatchedButton.GetID);  	}  	if (success) {  		var movies = result as IEnumerable<TraktMovieSummary>;  		SendRelatedMoviesToFacade (movies);  	}  }' Translation.GettingRelatedMovies' true);  
Magic Number,TraktPlugin.GUI,GUIRelatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,LoadRelatedMovies,The following statement contains a magic number: if (HideWatched) {  	// wait until watched item has been sent to trakt or timesout (10secs)  	while (SendingWatchedToTrakt) {  		Thread.Sleep (500);  	}  }  
Magic Number,TraktPlugin.GUI,GUIRelatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,LoadRelatedMovies,The following statement contains a magic number: while (SendingWatchedToTrakt) {  	Thread.Sleep (500);  }  
Magic Number,TraktPlugin.GUI,GUIRelatedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedMovies.cs,LoadRelatedMovies,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,TraktPlugin.GUI,GUIRelatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		if (TraktSettings.EnableJumpToForTVShows) {  			CheckAndPlayEpisode (true);  		} else {  			GUIListItem selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var selectedShow = (TraktShowSummary)selectedItem.TVTag;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON ());  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Hide Watched Button  case (3):  	HideWatched = hideWatchedButton.Selected;  	dictRelatedShows.Remove (relatedShow.Slug);  	LoadRelatedShows ();  	GUIControl.FocusControl ((int)TraktGUIWindows.RelatedShows' Facade.GetID);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRelatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		if (TraktSettings.EnableJumpToForTVShows) {  			CheckAndPlayEpisode (true);  		} else {  			GUIListItem selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var selectedShow = (TraktShowSummary)selectedItem.TVTag;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON ());  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Hide Watched Button  case (3):  	HideWatched = hideWatchedButton.Selected;  	dictRelatedShows.Remove (relatedShow.Slug);  	LoadRelatedShows ();  	GUIControl.FocusControl ((int)TraktGUIWindows.RelatedShows' Facade.GetID);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRelatedShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRelatedShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		if (TraktSettings.EnableJumpToForTVShows) {  			CheckAndPlayEpisode (true);  		} else {  			GUIListItem selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var selectedShow = (TraktShowSummary)selectedItem.TVTag;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON ());  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Hide Watched Button  case (3):  	HideWatched = hideWatchedButton.Selected;  	dictRelatedShows.Remove (relatedShow.Slug);  	LoadRelatedShows ();  	GUIControl.FocusControl ((int)TraktGUIWindows.RelatedShows' Facade.GetID);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUISearch,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		GUIListItem selectedItem = this.Facade.SelectedListItem;  		if (selectedItem == null)  			return;  		// Load selected search results  		SendSearchResultsToWindow (SearchResults);  	}  	break;  // Search  case (2):  	// check if there is any types selected  	SetSearchTypes ();  	if (SearchTypes.Count > 0) {  		string searchTerm = SearchTerm ?? string.Empty;  		if (GUIUtils.GetStringFromKeyboard (ref searchTerm)) {  			if (!string.IsNullOrEmpty (searchTerm)) {  				GUIUtils.SetProperty ("#Trakt.Search.SearchTerm"' searchTerm);  				SearchTerm = searchTerm;  				LoadSearchResults ();  			}  		}  	} else {  		GUIUtils.ShowOKDialog (Translation.Search' Translation.NoSearchTypesSelected);  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUISearch,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		GUIListItem selectedItem = this.Facade.SelectedListItem;  		if (selectedItem == null)  			return;  		// Load selected search results  		SendSearchResultsToWindow (SearchResults);  	}  	break;  // Search  case (2):  	// check if there is any types selected  	SetSearchTypes ();  	if (SearchTypes.Count > 0) {  		string searchTerm = SearchTerm ?? string.Empty;  		if (GUIUtils.GetStringFromKeyboard (ref searchTerm)) {  			if (!string.IsNullOrEmpty (searchTerm)) {  				GUIUtils.SetProperty ("#Trakt.Search.SearchTerm"' searchTerm);  				SearchTerm = searchTerm;  				LoadSearchResults ();  			}  		}  	} else {  		GUIUtils.ShowOKDialog (Translation.Search' Translation.NoSearchTypesSelected);  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUISearchEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayEpisode (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUISearchEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayEpisode (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUISearchMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUISearchMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUISearchPeople,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchPeople.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var selectedItem = Facade.SelectedListItem;  	if (selectedItem == null)  		return;  	var person = selectedItem.TVTag as TraktPersonSummary;  	if (person == null)  		return;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.PersonSummary' person.Ids.Trakt.ToString ());  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUISearchPeople,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchPeople.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	var selectedItem = Facade.SelectedListItem;  	if (selectedItem == null)  		return;  	var person = selectedItem.TVTag as TraktPersonSummary;  	if (person == null)  		return;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.PersonSummary' person.Ids.Trakt.ToString ());  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUISearchShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		if (TraktSettings.EnableJumpToForTVShows) {  			CheckAndPlayEpisode (true);  		} else {  			GUIListItem selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var selectedShow = (TraktShowSummary)selectedItem.TVTag;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON ());  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUISearchShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		if (TraktSettings.EnableJumpToForTVShows) {  			CheckAndPlayEpisode (true);  		} else {  			GUIListItem selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var selectedShow = (TraktShowSummary)selectedItem.TVTag;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON ());  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUISearchUsers,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchUsers.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var selectedUser = Facade.SelectedListItem.TVTag as TraktUserSummary;  		if (selectedUser == null)  			break;  		if (!selectedUser.IsPrivate) {  			GUIUserProfile.CurrentUser = selectedUser.Username;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.UserProfile);  		} else {  			if (GUIUtils.ShowYesNoDialog (Translation.Network' string.Format (Translation.SendFollowRequest' selectedUser.Username)' true)) {  				GUINetwork.FollowUser (selectedUser);  				GUINetwork.ClearCache ();  			}  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUISearchUsers,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchUsers.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var selectedUser = Facade.SelectedListItem.TVTag as TraktUserSummary;  		if (selectedUser == null)  			break;  		if (!selectedUser.IsPrivate) {  			GUIUserProfile.CurrentUser = selectedUser.Username;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.UserProfile);  		} else {  			if (GUIUtils.ShowYesNoDialog (Translation.Network' string.Format (Translation.SendFollowRequest' selectedUser.Username)' true)) {  				GUINetwork.FollowUser (selectedUser);  				GUINetwork.ClearCache ();  			}  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUISeasonEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISeasonEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayEpisode ();  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUISeasonEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISeasonEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayEpisode ();  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Hide Spoilers Button  case (2):  	TraktSettings.HideSpoilersOnShouts = !TraktSettings.HideSpoilersOnShouts;  	PublishCommentSkinProperties (Facade.SelectedListItem.TVTag as TraktComment);  	break;  // Next Episode  case (3):  	GetNextEpisodeComments ();  	break;  // Previous Episode  case (4):  	GetPrevEpisodeComments ();  	break;  // Comments  case (50):  	// re-act to comment e.g. view replies if any' like a comment etc.  	var selectedComment = Facade.SelectedListItem.TVTag as TraktComment;  	if (selectedComment != null) {  		if (selectedComment.Replies > 0) {  			// remember position for level  			if (SelectedParentItems.ContainsKey (CurrentLevel)) {  				SelectedParentItems [CurrentLevel] = selectedComment.Id;  			} else {  				SelectedParentItems.Add (CurrentLevel' selectedComment.Id);  			}  			CurrentLevel++;  			LoadCommentReplies (selectedComment.Id);  		} else {  			// let user do something else  			OnShowContextMenu ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Hide Spoilers Button  case (2):  	TraktSettings.HideSpoilersOnShouts = !TraktSettings.HideSpoilersOnShouts;  	PublishCommentSkinProperties (Facade.SelectedListItem.TVTag as TraktComment);  	break;  // Next Episode  case (3):  	GetNextEpisodeComments ();  	break;  // Previous Episode  case (4):  	GetPrevEpisodeComments ();  	break;  // Comments  case (50):  	// re-act to comment e.g. view replies if any' like a comment etc.  	var selectedComment = Facade.SelectedListItem.TVTag as TraktComment;  	if (selectedComment != null) {  		if (selectedComment.Replies > 0) {  			// remember position for level  			if (SelectedParentItems.ContainsKey (CurrentLevel)) {  				SelectedParentItems [CurrentLevel] = selectedComment.Id;  			} else {  				SelectedParentItems.Add (CurrentLevel' selectedComment.Id);  			}  			CurrentLevel++;  			LoadCommentReplies (selectedComment.Id);  		} else {  			// let user do something else  			OnShowContextMenu ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Hide Spoilers Button  case (2):  	TraktSettings.HideSpoilersOnShouts = !TraktSettings.HideSpoilersOnShouts;  	PublishCommentSkinProperties (Facade.SelectedListItem.TVTag as TraktComment);  	break;  // Next Episode  case (3):  	GetNextEpisodeComments ();  	break;  // Previous Episode  case (4):  	GetPrevEpisodeComments ();  	break;  // Comments  case (50):  	// re-act to comment e.g. view replies if any' like a comment etc.  	var selectedComment = Facade.SelectedListItem.TVTag as TraktComment;  	if (selectedComment != null) {  		if (selectedComment.Replies > 0) {  			// remember position for level  			if (SelectedParentItems.ContainsKey (CurrentLevel)) {  				SelectedParentItems [CurrentLevel] = selectedComment.Id;  			} else {  				SelectedParentItems.Add (CurrentLevel' selectedComment.Id);  			}  			CurrentLevel++;  			LoadCommentReplies (selectedComment.Id);  		} else {  			// let user do something else  			OnShowContextMenu ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Hide Spoilers Button  case (2):  	TraktSettings.HideSpoilersOnShouts = !TraktSettings.HideSpoilersOnShouts;  	PublishCommentSkinProperties (Facade.SelectedListItem.TVTag as TraktComment);  	break;  // Next Episode  case (3):  	GetNextEpisodeComments ();  	break;  // Previous Episode  case (4):  	GetPrevEpisodeComments ();  	break;  // Comments  case (50):  	// re-act to comment e.g. view replies if any' like a comment etc.  	var selectedComment = Facade.SelectedListItem.TVTag as TraktComment;  	if (selectedComment != null) {  		if (selectedComment.Replies > 0) {  			// remember position for level  			if (SelectedParentItems.ContainsKey (CurrentLevel)) {  				SelectedParentItems [CurrentLevel] = selectedComment.Id;  			} else {  				SelectedParentItems.Add (CurrentLevel' selectedComment.Id);  			}  			CurrentLevel++;  			LoadCommentReplies (selectedComment.Id);  		} else {  			// let user do something else  			OnShowContextMenu ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIShowSeasons,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShowSeasons.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var selectedItem = this.Facade.SelectedListItem;  		if (selectedItem == null)  			return;  		var selectedSeason = selectedItem.TVTag as TraktSeasonSummary;  		if (selectedSeason == null)  			return;  		// don't bother loading seasons view if there is no episodes to display  		if (selectedSeason.EpisodeCount > 0) {  			// create loading parameter for episode listing  			var loadingParam = new SeasonLoadingParameter {  				Season = selectedSeason'  				Show = Show  			};  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.SeasonEpisodes' loadingParam.ToJSON ());  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIShowSeasons,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShowSeasons.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var selectedItem = this.Facade.SelectedListItem;  		if (selectedItem == null)  			return;  		var selectedSeason = selectedItem.TVTag as TraktSeasonSummary;  		if (selectedSeason == null)  			return;  		// don't bother loading seasons view if there is no episodes to display  		if (selectedSeason.EpisodeCount > 0) {  			// create loading parameter for episode listing  			var loadingParam = new SeasonLoadingParameter {  				Season = selectedSeason'  				Show = Show  			};  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.SeasonEpisodes' loadingParam.ToJSON ());  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		PreviousUser = CurrentUser;  		CheckAndPlayEpisode (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecentWatchedEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		PreviousUser = CurrentUser;  		CheckAndPlayEpisode (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecentWatchedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		PreviousUser = CurrentUser;  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecentWatchedMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentWatchedMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		PreviousUser = CurrentUser;  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIUserProfile,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUserProfile.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		// Launch Corresponding Activity window  		switch (SelectedActivity) {  		case (ActivityType.RecentWatchedMovies):  			GUIRecentWatchedMovies.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedMovies);  			break;  		case (ActivityType.RecentWatchedEpisodes):  			GUIRecentWatchedEpisodes.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedEpisodes);  			break;  		case (ActivityType.RecentAddedEpisodes):  			GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  			//TODOGUIRecentAddedEpisodes.CurrentUser = CurrentUser;  			//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);  			break;  		case (ActivityType.RecentAddedMovies):  			GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  			//TODOGUIRecentAddedMovies.CurrentUser = CurrentUser;  			//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);  			break;  		case (ActivityType.RecentComments):  			GUIRecentShouts.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentShouts);  			break;  		case (ActivityType.MovieWatchList):  			GUIWatchListMovies.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListMovies);  			break;  		case (ActivityType.ShowWatchList):  			GUIWatchListShows.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListShows);  			break;  		case (ActivityType.EpisodeWatchList):  			GUIWatchListEpisodes.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListEpisodes);  			break;  		case (ActivityType.Lists):  			GUILists.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CustomLists);  			break;  		}  	}  	break;  case (4):  	GUIControl.FocusControl (GetID' Facade.GetID);  	if (Users.Keys.Contains (CurrentUser))  		Users.Remove (CurrentUser);  	LoadUserProfile ();  	break;  }  
Magic Number,TraktPlugin.GUI,GUIUserProfile,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUserProfile.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		// Launch Corresponding Activity window  		switch (SelectedActivity) {  		case (ActivityType.RecentWatchedMovies):  			GUIRecentWatchedMovies.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedMovies);  			break;  		case (ActivityType.RecentWatchedEpisodes):  			GUIRecentWatchedEpisodes.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedEpisodes);  			break;  		case (ActivityType.RecentAddedEpisodes):  			GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  			//TODOGUIRecentAddedEpisodes.CurrentUser = CurrentUser;  			//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);  			break;  		case (ActivityType.RecentAddedMovies):  			GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  			//TODOGUIRecentAddedMovies.CurrentUser = CurrentUser;  			//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);  			break;  		case (ActivityType.RecentComments):  			GUIRecentShouts.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentShouts);  			break;  		case (ActivityType.MovieWatchList):  			GUIWatchListMovies.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListMovies);  			break;  		case (ActivityType.ShowWatchList):  			GUIWatchListShows.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListShows);  			break;  		case (ActivityType.EpisodeWatchList):  			GUIWatchListEpisodes.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListEpisodes);  			break;  		case (ActivityType.Lists):  			GUILists.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CustomLists);  			break;  		}  	}  	break;  case (4):  	GUIControl.FocusControl (GetID' Facade.GetID);  	if (Users.Keys.Contains (CurrentUser))  		Users.Remove (CurrentUser);  	LoadUserProfile ();  	break;  }  
Magic Number,TraktPlugin.GUI,GUIUserProfile,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUserProfile.cs,LoadActivityTypes,The following statement contains a magic number: GUIUtils.SetProperty ("#Trakt.Items"' string.Format ("{0} {1}"' Facade.Count.ToString ()' GUILocalizeStrings.Get (507)));  
Magic Number,TraktPlugin.GUI,GUIWatchListEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayEpisode ();  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIWatchListEpisodes,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListEpisodes.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayEpisode ();  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Genre Button  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //ShowGenreMenu();  //break;  // Hide Collected Toggle Button  case (4):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideCollected = hideCollectedButton.Selected;  //ReloadRecommendations();  //break;  // Hide Watchlisted Toggle Button  case (5):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideWatchlisted = hideWatchlistedButton.Selected;  //ReloadRecommendations();  //break;  // Start Year Button  case (6):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string startYear = StartYear.ToString();  //if (startYear == "0") startYear = "1888";  //if (GUIUtils.GetStringFromKeyboard(ref startYear))  //{  //    int result;  //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))  //    {  //        StartYear = result;  //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));  //        ReloadRecommendations();  //    }  //}  //break;  // End Year Button  case (7):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string endYear = EndYear.ToString();  //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();  //if (GUIUtils.GetStringFromKeyboard(ref endYear))  //{  //    int result;  //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))  //    {  //        EndYear = result;  //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));  //        ReloadRecommendations();  //    }  //}  //break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByRecommendedMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByRecommendedMovies.Field) {  			TraktSettings.SortByRecommendedMovies = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadRecommendedMovies ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Genre Button  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //ShowGenreMenu();  //break;  // Hide Collected Toggle Button  case (4):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideCollected = hideCollectedButton.Selected;  //ReloadRecommendations();  //break;  // Hide Watchlisted Toggle Button  case (5):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideWatchlisted = hideWatchlistedButton.Selected;  //ReloadRecommendations();  //break;  // Start Year Button  case (6):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string startYear = StartYear.ToString();  //if (startYear == "0") startYear = "1888";  //if (GUIUtils.GetStringFromKeyboard(ref startYear))  //{  //    int result;  //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))  //    {  //        StartYear = result;  //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));  //        ReloadRecommendations();  //    }  //}  //break;  // End Year Button  case (7):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string endYear = EndYear.ToString();  //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();  //if (GUIUtils.GetStringFromKeyboard(ref endYear))  //{  //    int result;  //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))  //    {  //        EndYear = result;  //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));  //        ReloadRecommendations();  //    }  //}  //break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByRecommendedMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByRecommendedMovies.Field) {  			TraktSettings.SortByRecommendedMovies = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadRecommendedMovies ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Genre Button  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //ShowGenreMenu();  //break;  // Hide Collected Toggle Button  case (4):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideCollected = hideCollectedButton.Selected;  //ReloadRecommendations();  //break;  // Hide Watchlisted Toggle Button  case (5):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideWatchlisted = hideWatchlistedButton.Selected;  //ReloadRecommendations();  //break;  // Start Year Button  case (6):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string startYear = StartYear.ToString();  //if (startYear == "0") startYear = "1888";  //if (GUIUtils.GetStringFromKeyboard(ref startYear))  //{  //    int result;  //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))  //    {  //        StartYear = result;  //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));  //        ReloadRecommendations();  //    }  //}  //break;  // End Year Button  case (7):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string endYear = EndYear.ToString();  //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();  //if (GUIUtils.GetStringFromKeyboard(ref endYear))  //{  //    int result;  //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))  //    {  //        EndYear = result;  //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));  //        ReloadRecommendations();  //    }  //}  //break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByRecommendedMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByRecommendedMovies.Field) {  			TraktSettings.SortByRecommendedMovies = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadRecommendedMovies ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Genre Button  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //ShowGenreMenu();  //break;  // Hide Collected Toggle Button  case (4):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideCollected = hideCollectedButton.Selected;  //ReloadRecommendations();  //break;  // Hide Watchlisted Toggle Button  case (5):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideWatchlisted = hideWatchlistedButton.Selected;  //ReloadRecommendations();  //break;  // Start Year Button  case (6):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string startYear = StartYear.ToString();  //if (startYear == "0") startYear = "1888";  //if (GUIUtils.GetStringFromKeyboard(ref startYear))  //{  //    int result;  //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))  //    {  //        StartYear = result;  //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));  //        ReloadRecommendations();  //    }  //}  //break;  // End Year Button  case (7):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string endYear = EndYear.ToString();  //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();  //if (GUIUtils.GetStringFromKeyboard(ref endYear))  //{  //    int result;  //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))  //    {  //        EndYear = result;  //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));  //        ReloadRecommendations();  //    }  //}  //break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByRecommendedMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByRecommendedMovies.Field) {  			TraktSettings.SortByRecommendedMovies = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadRecommendedMovies ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Genre Button  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //ShowGenreMenu();  //break;  // Hide Collected Toggle Button  case (4):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideCollected = hideCollectedButton.Selected;  //ReloadRecommendations();  //break;  // Hide Watchlisted Toggle Button  case (5):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideWatchlisted = hideWatchlistedButton.Selected;  //ReloadRecommendations();  //break;  // Start Year Button  case (6):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string startYear = StartYear.ToString();  //if (startYear == "0") startYear = "1888";  //if (GUIUtils.GetStringFromKeyboard(ref startYear))  //{  //    int result;  //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))  //    {  //        StartYear = result;  //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));  //        ReloadRecommendations();  //    }  //}  //break;  // End Year Button  case (7):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string endYear = EndYear.ToString();  //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();  //if (GUIUtils.GetStringFromKeyboard(ref endYear))  //{  //    int result;  //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))  //    {  //        EndYear = result;  //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));  //        ReloadRecommendations();  //    }  //}  //break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByRecommendedMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByRecommendedMovies.Field) {  			TraktSettings.SortByRecommendedMovies = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadRecommendedMovies ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Genre Button  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //ShowGenreMenu();  //break;  // Hide Collected Toggle Button  case (4):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideCollected = hideCollectedButton.Selected;  //ReloadRecommendations();  //break;  // Hide Watchlisted Toggle Button  case (5):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideWatchlisted = hideWatchlistedButton.Selected;  //ReloadRecommendations();  //break;  // Start Year Button  case (6):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string startYear = StartYear.ToString();  //if (startYear == "0") startYear = "1888";  //if (GUIUtils.GetStringFromKeyboard(ref startYear))  //{  //    int result;  //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))  //    {  //        StartYear = result;  //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));  //        ReloadRecommendations();  //    }  //}  //break;  // End Year Button  case (7):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string endYear = EndYear.ToString();  //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();  //if (GUIUtils.GetStringFromKeyboard(ref endYear))  //{  //    int result;  //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))  //    {  //        EndYear = result;  //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));  //        ReloadRecommendations();  //    }  //}  //break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByRecommendedMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByRecommendedMovies.Field) {  			TraktSettings.SortByRecommendedMovies = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadRecommendedMovies ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Genre Button  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //ShowGenreMenu();  //break;  // Hide Collected Toggle Button  case (4):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideCollected = hideCollectedButton.Selected;  //ReloadRecommendations();  //break;  // Hide Watchlisted Toggle Button  case (5):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideWatchlisted = hideWatchlistedButton.Selected;  //ReloadRecommendations();  //break;  // Start Year Button  case (6):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string startYear = StartYear.ToString();  //if (startYear == "0") startYear = "1888";  //if (GUIUtils.GetStringFromKeyboard(ref startYear))  //{  //    int result;  //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))  //    {  //        StartYear = result;  //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));  //        ReloadRecommendations();  //    }  //}  //break;  // End Year Button  case (7):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string endYear = EndYear.ToString();  //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();  //if (GUIUtils.GetStringFromKeyboard(ref endYear))  //{  //    int result;  //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))  //    {  //        EndYear = result;  //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));  //        ReloadRecommendations();  //    }  //}  //break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByRecommendedMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByRecommendedMovies.Field) {  			TraktSettings.SortByRecommendedMovies = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadRecommendedMovies ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Genre Button  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //ShowGenreMenu();  //break;  // Hide Collected Toggle Button  case (4):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideCollected = hideCollectedButton.Selected;  //ReloadRecommendations();  //break;  // Hide Watchlisted Toggle Button  case (5):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideWatchlisted = hideWatchlistedButton.Selected;  //ReloadRecommendations();  //break;  // Start Year Button  case (6):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string startYear = StartYear.ToString();  //if (startYear == "0") startYear = "1888";  //if (GUIUtils.GetStringFromKeyboard(ref startYear))  //{  //    int result;  //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))  //    {  //        StartYear = result;  //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));  //        ReloadRecommendations();  //    }  //}  //break;  // End Year Button  case (7):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string endYear = EndYear.ToString();  //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();  //if (GUIUtils.GetStringFromKeyboard(ref endYear))  //{  //    int result;  //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))  //    {  //        EndYear = result;  //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));  //        ReloadRecommendations();  //    }  //}  //break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByRecommendedMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByRecommendedMovies.Field) {  			TraktSettings.SortByRecommendedMovies = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadRecommendedMovies ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,GetStartYearTitle,The following statement contains a magic number: if (startYear == 0)  	return string.Format (Translation.StartYear' 1888);  else  	return string.Format (Translation.StartYear' startYear);  
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,GetStartYearTitle,The following statement contains a magic number: return string.Format (Translation.StartYear' 1888);  
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,GetEndYearTitle,The following statement contains a magic number: if (endYear == 0)  	return string.Format (Translation.EndYear' DateTime.Now.AddYears (3).Year);  else  	return string.Format (Translation.EndYear' endYear);  
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,GetEndYearTitle,The following statement contains a magic number: return string.Format (Translation.EndYear' DateTime.Now.AddYears (3).Year);  
Magic Number,TraktPlugin.GUI,GUIRecommendationsMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsMovies.cs,SetRecommendationProperties,The following statement contains a magic number: GUIUtils.SetProperty ("#Trakt.Recommendations.EndYear"' EndYear == 0 ? DateTime.Now.AddYears (3).Year.ToString () : EndYear.ToString ());  
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		if (TraktSettings.EnableJumpToForTVShows) {  			CheckAndPlayEpisode (true);  		} else {  			GUIListItem selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var selectedShow = selectedItem.TVTag as TraktShowSummary;  			if (selectedShow == null)  				return;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON ());  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Genre Button  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //ShowGenreMenu();  //break;  // Hide Collected Toggle Button  case (4):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideCollected = hideCollectedButton.Selected;  //ReloadRecommendations();  //break;  // Hide Watchlisted Toggle Button  case (5):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideWatchlisted = hideWatchlistedButton.Selected;  //ReloadRecommendations();  //break;  // Start Year Button  case (6):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string startYear = StartYear.ToString();  //if (startYear == "0") startYear = "1919";  //if (GUIUtils.GetStringFromKeyboard(ref startYear))  //{  //    int result;  //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))  //    {  //        StartYear = result;  //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));  //        ReloadRecommendations();  //    }  //}  //break;  // End Year Button  case (7):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string endYear = EndYear.ToString();  //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();  //if (GUIUtils.GetStringFromKeyboard(ref endYear))  //{  //    int result;  //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))  //    {  //        EndYear = result;  //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));  //        ReloadRecommendations();  //    }  //}  //break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByRecommendedShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByRecommendedShows.Field) {  			TraktSettings.SortByRecommendedShows = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadRecommendedShows ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		if (TraktSettings.EnableJumpToForTVShows) {  			CheckAndPlayEpisode (true);  		} else {  			GUIListItem selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var selectedShow = selectedItem.TVTag as TraktShowSummary;  			if (selectedShow == null)  				return;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON ());  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Genre Button  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //ShowGenreMenu();  //break;  // Hide Collected Toggle Button  case (4):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideCollected = hideCollectedButton.Selected;  //ReloadRecommendations();  //break;  // Hide Watchlisted Toggle Button  case (5):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideWatchlisted = hideWatchlistedButton.Selected;  //ReloadRecommendations();  //break;  // Start Year Button  case (6):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string startYear = StartYear.ToString();  //if (startYear == "0") startYear = "1919";  //if (GUIUtils.GetStringFromKeyboard(ref startYear))  //{  //    int result;  //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))  //    {  //        StartYear = result;  //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));  //        ReloadRecommendations();  //    }  //}  //break;  // End Year Button  case (7):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string endYear = EndYear.ToString();  //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();  //if (GUIUtils.GetStringFromKeyboard(ref endYear))  //{  //    int result;  //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))  //    {  //        EndYear = result;  //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));  //        ReloadRecommendations();  //    }  //}  //break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByRecommendedShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByRecommendedShows.Field) {  			TraktSettings.SortByRecommendedShows = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadRecommendedShows ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		if (TraktSettings.EnableJumpToForTVShows) {  			CheckAndPlayEpisode (true);  		} else {  			GUIListItem selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var selectedShow = selectedItem.TVTag as TraktShowSummary;  			if (selectedShow == null)  				return;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON ());  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Genre Button  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //ShowGenreMenu();  //break;  // Hide Collected Toggle Button  case (4):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideCollected = hideCollectedButton.Selected;  //ReloadRecommendations();  //break;  // Hide Watchlisted Toggle Button  case (5):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideWatchlisted = hideWatchlistedButton.Selected;  //ReloadRecommendations();  //break;  // Start Year Button  case (6):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string startYear = StartYear.ToString();  //if (startYear == "0") startYear = "1919";  //if (GUIUtils.GetStringFromKeyboard(ref startYear))  //{  //    int result;  //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))  //    {  //        StartYear = result;  //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));  //        ReloadRecommendations();  //    }  //}  //break;  // End Year Button  case (7):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string endYear = EndYear.ToString();  //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();  //if (GUIUtils.GetStringFromKeyboard(ref endYear))  //{  //    int result;  //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))  //    {  //        EndYear = result;  //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));  //        ReloadRecommendations();  //    }  //}  //break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByRecommendedShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByRecommendedShows.Field) {  			TraktSettings.SortByRecommendedShows = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadRecommendedShows ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		if (TraktSettings.EnableJumpToForTVShows) {  			CheckAndPlayEpisode (true);  		} else {  			GUIListItem selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var selectedShow = selectedItem.TVTag as TraktShowSummary;  			if (selectedShow == null)  				return;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON ());  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Genre Button  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //ShowGenreMenu();  //break;  // Hide Collected Toggle Button  case (4):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideCollected = hideCollectedButton.Selected;  //ReloadRecommendations();  //break;  // Hide Watchlisted Toggle Button  case (5):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideWatchlisted = hideWatchlistedButton.Selected;  //ReloadRecommendations();  //break;  // Start Year Button  case (6):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string startYear = StartYear.ToString();  //if (startYear == "0") startYear = "1919";  //if (GUIUtils.GetStringFromKeyboard(ref startYear))  //{  //    int result;  //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))  //    {  //        StartYear = result;  //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));  //        ReloadRecommendations();  //    }  //}  //break;  // End Year Button  case (7):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string endYear = EndYear.ToString();  //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();  //if (GUIUtils.GetStringFromKeyboard(ref endYear))  //{  //    int result;  //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))  //    {  //        EndYear = result;  //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));  //        ReloadRecommendations();  //    }  //}  //break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByRecommendedShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByRecommendedShows.Field) {  			TraktSettings.SortByRecommendedShows = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadRecommendedShows ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		if (TraktSettings.EnableJumpToForTVShows) {  			CheckAndPlayEpisode (true);  		} else {  			GUIListItem selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var selectedShow = selectedItem.TVTag as TraktShowSummary;  			if (selectedShow == null)  				return;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON ());  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Genre Button  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //ShowGenreMenu();  //break;  // Hide Collected Toggle Button  case (4):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideCollected = hideCollectedButton.Selected;  //ReloadRecommendations();  //break;  // Hide Watchlisted Toggle Button  case (5):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideWatchlisted = hideWatchlistedButton.Selected;  //ReloadRecommendations();  //break;  // Start Year Button  case (6):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string startYear = StartYear.ToString();  //if (startYear == "0") startYear = "1919";  //if (GUIUtils.GetStringFromKeyboard(ref startYear))  //{  //    int result;  //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))  //    {  //        StartYear = result;  //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));  //        ReloadRecommendations();  //    }  //}  //break;  // End Year Button  case (7):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string endYear = EndYear.ToString();  //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();  //if (GUIUtils.GetStringFromKeyboard(ref endYear))  //{  //    int result;  //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))  //    {  //        EndYear = result;  //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));  //        ReloadRecommendations();  //    }  //}  //break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByRecommendedShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByRecommendedShows.Field) {  			TraktSettings.SortByRecommendedShows = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadRecommendedShows ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		if (TraktSettings.EnableJumpToForTVShows) {  			CheckAndPlayEpisode (true);  		} else {  			GUIListItem selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var selectedShow = selectedItem.TVTag as TraktShowSummary;  			if (selectedShow == null)  				return;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON ());  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Genre Button  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //ShowGenreMenu();  //break;  // Hide Collected Toggle Button  case (4):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideCollected = hideCollectedButton.Selected;  //ReloadRecommendations();  //break;  // Hide Watchlisted Toggle Button  case (5):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideWatchlisted = hideWatchlistedButton.Selected;  //ReloadRecommendations();  //break;  // Start Year Button  case (6):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string startYear = StartYear.ToString();  //if (startYear == "0") startYear = "1919";  //if (GUIUtils.GetStringFromKeyboard(ref startYear))  //{  //    int result;  //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))  //    {  //        StartYear = result;  //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));  //        ReloadRecommendations();  //    }  //}  //break;  // End Year Button  case (7):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string endYear = EndYear.ToString();  //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();  //if (GUIUtils.GetStringFromKeyboard(ref endYear))  //{  //    int result;  //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))  //    {  //        EndYear = result;  //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));  //        ReloadRecommendations();  //    }  //}  //break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByRecommendedShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByRecommendedShows.Field) {  			TraktSettings.SortByRecommendedShows = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadRecommendedShows ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		if (TraktSettings.EnableJumpToForTVShows) {  			CheckAndPlayEpisode (true);  		} else {  			GUIListItem selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var selectedShow = selectedItem.TVTag as TraktShowSummary;  			if (selectedShow == null)  				return;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON ());  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Genre Button  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //ShowGenreMenu();  //break;  // Hide Collected Toggle Button  case (4):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideCollected = hideCollectedButton.Selected;  //ReloadRecommendations();  //break;  // Hide Watchlisted Toggle Button  case (5):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideWatchlisted = hideWatchlistedButton.Selected;  //ReloadRecommendations();  //break;  // Start Year Button  case (6):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string startYear = StartYear.ToString();  //if (startYear == "0") startYear = "1919";  //if (GUIUtils.GetStringFromKeyboard(ref startYear))  //{  //    int result;  //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))  //    {  //        StartYear = result;  //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));  //        ReloadRecommendations();  //    }  //}  //break;  // End Year Button  case (7):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string endYear = EndYear.ToString();  //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();  //if (GUIUtils.GetStringFromKeyboard(ref endYear))  //{  //    int result;  //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))  //    {  //        EndYear = result;  //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));  //        ReloadRecommendations();  //    }  //}  //break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByRecommendedShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByRecommendedShows.Field) {  			TraktSettings.SortByRecommendedShows = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadRecommendedShows ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		if (TraktSettings.EnableJumpToForTVShows) {  			CheckAndPlayEpisode (true);  		} else {  			GUIListItem selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var selectedShow = selectedItem.TVTag as TraktShowSummary;  			if (selectedShow == null)  				return;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' selectedShow.ToJSON ());  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Genre Button  case (3):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //ShowGenreMenu();  //break;  // Hide Collected Toggle Button  case (4):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideCollected = hideCollectedButton.Selected;  //ReloadRecommendations();  //break;  // Hide Watchlisted Toggle Button  case (5):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //HideWatchlisted = hideWatchlistedButton.Selected;  //ReloadRecommendations();  //break;  // Start Year Button  case (6):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string startYear = StartYear.ToString();  //if (startYear == "0") startYear = "1919";  //if (GUIUtils.GetStringFromKeyboard(ref startYear))  //{  //    int result;  //    if (startYear.Length == 4 && int.TryParse(startYear' out result) && !startYear.Equals(StartYear.ToString()))  //    {  //        StartYear = result;  //        GUIControl.SetControlLabel(GetID' startYearButton.GetID' GetStartYearTitle(StartYear));  //        ReloadRecommendations();  //    }  //}  //break;  // End Year Button  case (7):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	break;  //TODO  //string endYear = EndYear.ToString();  //if (endYear == "0") endYear = DateTime.Now.AddYears(3).Year.ToString();  //if (GUIUtils.GetStringFromKeyboard(ref endYear))  //{  //    int result;  //    if (endYear.Length == 4 && int.TryParse(endYear' out result) && !endYear.Equals(EndYear.ToString()))  //    {  //        EndYear = result;  //        GUIControl.SetControlLabel(GetID' endYearButton.GetID' GetEndYearTitle(EndYear));  //        ReloadRecommendations();  //    }  //}  //break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByRecommendedShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByRecommendedShows.Field) {  			TraktSettings.SortByRecommendedShows = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadRecommendedShows ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,GetStartYearTitle,The following statement contains a magic number: if (startYear == 0)  	return string.Format (Translation.StartYear' 1919);  else  	return string.Format (Translation.StartYear' startYear);  
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,GetStartYearTitle,The following statement contains a magic number: return string.Format (Translation.StartYear' 1919);  
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,GetEndYearTitle,The following statement contains a magic number: if (endYear == 0)  	return string.Format (Translation.EndYear' DateTime.Now.AddYears (3).Year);  else  	return string.Format (Translation.EndYear' endYear);  
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,GetEndYearTitle,The following statement contains a magic number: return string.Format (Translation.EndYear' DateTime.Now.AddYears (3).Year);  
Magic Number,TraktPlugin.GUI,GUIRecommendationsShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecommendationsShows.cs,SetRecommendationProperties,The following statement contains a magic number: GUIUtils.SetProperty ("#Trakt.Recommendations.EndYear"' EndYear == 0 ? DateTime.Now.AddYears (3).Year.ToString () : EndYear.ToString ());  
Magic Number,TraktPlugin.GUI,GUITrendingShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIShowListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			if (TraktSettings.EnableJumpToForTVShows) {  				CheckAndPlayEpisode (true);  			} else {  				if (item.Show == null)  					return;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  			}  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadTrendingShows (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByTrendingShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByTrendingShows.Field) {  			TraktSettings.SortByTrendingShows = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadTrendingShows (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideWatched = !TraktSettings.TrendingShowsHideWatched;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideWatchlisted = !TraktSettings.TrendingShowsHideWatchlisted;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideCollected = !TraktSettings.TrendingShowsHideCollected;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideRated = !TraktSettings.TrendingShowsHideRated;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUITrendingShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIShowListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			if (TraktSettings.EnableJumpToForTVShows) {  				CheckAndPlayEpisode (true);  			} else {  				if (item.Show == null)  					return;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  			}  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadTrendingShows (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByTrendingShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByTrendingShows.Field) {  			TraktSettings.SortByTrendingShows = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadTrendingShows (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideWatched = !TraktSettings.TrendingShowsHideWatched;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideWatchlisted = !TraktSettings.TrendingShowsHideWatchlisted;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideCollected = !TraktSettings.TrendingShowsHideCollected;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideRated = !TraktSettings.TrendingShowsHideRated;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUITrendingShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIShowListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			if (TraktSettings.EnableJumpToForTVShows) {  				CheckAndPlayEpisode (true);  			} else {  				if (item.Show == null)  					return;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  			}  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadTrendingShows (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByTrendingShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByTrendingShows.Field) {  			TraktSettings.SortByTrendingShows = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadTrendingShows (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideWatched = !TraktSettings.TrendingShowsHideWatched;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideWatchlisted = !TraktSettings.TrendingShowsHideWatchlisted;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideCollected = !TraktSettings.TrendingShowsHideCollected;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideRated = !TraktSettings.TrendingShowsHideRated;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUITrendingShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIShowListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			if (TraktSettings.EnableJumpToForTVShows) {  				CheckAndPlayEpisode (true);  			} else {  				if (item.Show == null)  					return;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  			}  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadTrendingShows (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByTrendingShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByTrendingShows.Field) {  			TraktSettings.SortByTrendingShows = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadTrendingShows (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideWatched = !TraktSettings.TrendingShowsHideWatched;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideWatchlisted = !TraktSettings.TrendingShowsHideWatchlisted;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideCollected = !TraktSettings.TrendingShowsHideCollected;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideRated = !TraktSettings.TrendingShowsHideRated;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUITrendingShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIShowListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			if (TraktSettings.EnableJumpToForTVShows) {  				CheckAndPlayEpisode (true);  			} else {  				if (item.Show == null)  					return;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  			}  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadTrendingShows (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByTrendingShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByTrendingShows.Field) {  			TraktSettings.SortByTrendingShows = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadTrendingShows (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideWatched = !TraktSettings.TrendingShowsHideWatched;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideWatchlisted = !TraktSettings.TrendingShowsHideWatchlisted;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideCollected = !TraktSettings.TrendingShowsHideCollected;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideRated = !TraktSettings.TrendingShowsHideRated;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUITrendingShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIShowListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			if (TraktSettings.EnableJumpToForTVShows) {  				CheckAndPlayEpisode (true);  			} else {  				if (item.Show == null)  					return;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  			}  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadTrendingShows (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByTrendingShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByTrendingShows.Field) {  			TraktSettings.SortByTrendingShows = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadTrendingShows (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideWatched = !TraktSettings.TrendingShowsHideWatched;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideWatchlisted = !TraktSettings.TrendingShowsHideWatchlisted;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideCollected = !TraktSettings.TrendingShowsHideCollected;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideRated = !TraktSettings.TrendingShowsHideRated;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUITrendingShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIShowListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			if (TraktSettings.EnableJumpToForTVShows) {  				CheckAndPlayEpisode (true);  			} else {  				if (item.Show == null)  					return;  				GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' item.Show.ToJSON ());  			}  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadTrendingShows (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByTrendingShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByTrendingShows.Field) {  			TraktSettings.SortByTrendingShows = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadTrendingShows (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideWatched = !TraktSettings.TrendingShowsHideWatched;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideWatchlisted = !TraktSettings.TrendingShowsHideWatchlisted;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideCollected = !TraktSettings.TrendingShowsHideCollected;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingShowsHideRated = !TraktSettings.TrendingShowsHideRated;  	UpdateButtonState ();  	LoadTrendingShows (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,Reset,The following statement contains a magic number: SetLine (2' "");  
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,Reset,The following statement contains a magic number: SetLine (3' "");  
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,Reset,The following statement contains a magic number: SetLine (4' "");  
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnAction,The following statement contains a magic number: switch (action.wID) {  case Action.ActionType.REMOTE_1:  	Rated = TraktRateValue.one;  	UpdateRating ();  	break;  case Action.ActionType.REMOTE_2:  	Rated = TraktRateValue.two;  	UpdateRating ();  	break;  case Action.ActionType.REMOTE_3:  	Rated = TraktRateValue.three;  	UpdateRating ();  	break;  case Action.ActionType.REMOTE_4:  	Rated = TraktRateValue.four;  	UpdateRating ();  	break;  case Action.ActionType.REMOTE_5:  	Rated = TraktRateValue.five;  	UpdateRating ();  	break;  case Action.ActionType.REMOTE_6:  	Rated = TraktRateValue.six;  	UpdateRating ();  	break;  case Action.ActionType.REMOTE_7:  	Rated = TraktRateValue.seven;  	UpdateRating ();  	break;  case Action.ActionType.REMOTE_8:  	Rated = TraktRateValue.eight;  	UpdateRating ();  	break;  case Action.ActionType.REMOTE_9:  	Rated = TraktRateValue.nine;  	UpdateRating ();  	break;  case Action.ActionType.REMOTE_0:  	Rated = TraktRateValue.ten;  	UpdateRating ();  	break;  case Action.ActionType.ACTION_KEY_PRESSED:  	// some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands  	if (action.m_key != null) {  		int key = action.m_key.KeyChar;  		if (key >= '0' && key <= '9') {  			if (key == 0)  				key = 10;  			Rated = (TraktRateValue)key;  			UpdateRating ();  		}  	}  	break;  case Action.ActionType.ACTION_SELECT_ITEM:  	IsSubmitted = true;  	PageDestroy ();  	return;  case Action.ActionType.ACTION_PREVIOUS_MENU:  case Action.ActionType.ACTION_CLOSE_DIALOG:  case Action.ActionType.ACTION_CONTEXT_MENU:  	IsSubmitted = false;  	PageDestroy ();  	return;  }  
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnAction,The following statement contains a magic number: if (action.m_key != null) {  	int key = action.m_key.KeyChar;  	if (key >= '0' && key <= '9') {  		if (key == 0)  			key = 10;  		Rated = (TraktRateValue)key;  		UpdateRating ();  	}  }  
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnAction,The following statement contains a magic number: if (key >= '0' && key <= '9') {  	if (key == 0)  		key = 10;  	Rated = (TraktRateValue)key;  	UpdateRating ();  }  
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnAction,The following statement contains a magic number: if (key == 0)  	key = 10;  
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnAction,The following statement contains a magic number: key = 10;  
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnMessage,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:  	// store old rating so default control in skin does override  	TraktRateValue rating = Rated;  	base.OnMessage (message);  	// read just rating and default control focus  	int defaultControlId = 1000 + (int)rating;  	GUIMessage msg = new GUIMessage (GUIMessage.MessageType.GUI_MSG_SETFOCUS' GetID' 0' defaultControlId' 0' 0' null);  	OnMessage (msg);  	IsSubmitted = false;  	UpdateRating ();  	return true;  case GUIMessage.MessageType.GUI_MSG_SETFOCUS:  	if (btnUnRate != null && message.TargetControlId == btnUnRate.GetID) {  		Rated = TraktRateValue.unrate;  		UpdateRating ();  		break;  	}  	if (message.TargetControlId < 1001 || message.TargetControlId > 1010)  		break;  	Rated = (TraktRateValue)(message.TargetControlId - 1000);  	UpdateRating ();  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnMessage,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:  	// store old rating so default control in skin does override  	TraktRateValue rating = Rated;  	base.OnMessage (message);  	// read just rating and default control focus  	int defaultControlId = 1000 + (int)rating;  	GUIMessage msg = new GUIMessage (GUIMessage.MessageType.GUI_MSG_SETFOCUS' GetID' 0' defaultControlId' 0' 0' null);  	OnMessage (msg);  	IsSubmitted = false;  	UpdateRating ();  	return true;  case GUIMessage.MessageType.GUI_MSG_SETFOCUS:  	if (btnUnRate != null && message.TargetControlId == btnUnRate.GetID) {  		Rated = TraktRateValue.unrate;  		UpdateRating ();  		break;  	}  	if (message.TargetControlId < 1001 || message.TargetControlId > 1010)  		break;  	Rated = (TraktRateValue)(message.TargetControlId - 1000);  	UpdateRating ();  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnMessage,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:  	// store old rating so default control in skin does override  	TraktRateValue rating = Rated;  	base.OnMessage (message);  	// read just rating and default control focus  	int defaultControlId = 1000 + (int)rating;  	GUIMessage msg = new GUIMessage (GUIMessage.MessageType.GUI_MSG_SETFOCUS' GetID' 0' defaultControlId' 0' 0' null);  	OnMessage (msg);  	IsSubmitted = false;  	UpdateRating ();  	return true;  case GUIMessage.MessageType.GUI_MSG_SETFOCUS:  	if (btnUnRate != null && message.TargetControlId == btnUnRate.GetID) {  		Rated = TraktRateValue.unrate;  		UpdateRating ();  		break;  	}  	if (message.TargetControlId < 1001 || message.TargetControlId > 1010)  		break;  	Rated = (TraktRateValue)(message.TargetControlId - 1000);  	UpdateRating ();  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnMessage,The following statement contains a magic number: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:  	// store old rating so default control in skin does override  	TraktRateValue rating = Rated;  	base.OnMessage (message);  	// read just rating and default control focus  	int defaultControlId = 1000 + (int)rating;  	GUIMessage msg = new GUIMessage (GUIMessage.MessageType.GUI_MSG_SETFOCUS' GetID' 0' defaultControlId' 0' 0' null);  	OnMessage (msg);  	IsSubmitted = false;  	UpdateRating ();  	return true;  case GUIMessage.MessageType.GUI_MSG_SETFOCUS:  	if (btnUnRate != null && message.TargetControlId == btnUnRate.GetID) {  		Rated = TraktRateValue.unrate;  		UpdateRating ();  		break;  	}  	if (message.TargetControlId < 1001 || message.TargetControlId > 1010)  		break;  	Rated = (TraktRateValue)(message.TargetControlId - 1000);  	UpdateRating ();  	break;  }  
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnMessage,The following statement contains a magic number: if (message.TargetControlId < 1001 || message.TargetControlId > 1010)  	break;  
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnMessage,The following statement contains a magic number: if (message.TargetControlId < 1001 || message.TargetControlId > 1010)  	break;  
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnMessage,The following statement contains a magic number: Rated = (TraktRateValue)(message.TargetControlId - 1000);  
Magic Number,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,UpdateRating,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	btnHearts [i].Label = string.Empty;  	btnHearts [i].Selected = ((int)Rated > i);  }  
Magic Number,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIMovieListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			CheckAndPlayMovie (true);  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadTrendingMovies (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByTrendingMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByTrendingMovies.Field) {  			TraktSettings.SortByTrendingMovies = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadTrendingMovies (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideWatched = !TraktSettings.TrendingMoviesHideWatched;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideWatchlisted = !TraktSettings.TrendingMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideCollected = !TraktSettings.TrendingMoviesHideCollected;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideRated = !TraktSettings.TrendingMoviesHideRated;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIMovieListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			CheckAndPlayMovie (true);  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadTrendingMovies (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByTrendingMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByTrendingMovies.Field) {  			TraktSettings.SortByTrendingMovies = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadTrendingMovies (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideWatched = !TraktSettings.TrendingMoviesHideWatched;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideWatchlisted = !TraktSettings.TrendingMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideCollected = !TraktSettings.TrendingMoviesHideCollected;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideRated = !TraktSettings.TrendingMoviesHideRated;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIMovieListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			CheckAndPlayMovie (true);  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadTrendingMovies (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByTrendingMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByTrendingMovies.Field) {  			TraktSettings.SortByTrendingMovies = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadTrendingMovies (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideWatched = !TraktSettings.TrendingMoviesHideWatched;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideWatchlisted = !TraktSettings.TrendingMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideCollected = !TraktSettings.TrendingMoviesHideCollected;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideRated = !TraktSettings.TrendingMoviesHideRated;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIMovieListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			CheckAndPlayMovie (true);  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadTrendingMovies (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByTrendingMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByTrendingMovies.Field) {  			TraktSettings.SortByTrendingMovies = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadTrendingMovies (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideWatched = !TraktSettings.TrendingMoviesHideWatched;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideWatchlisted = !TraktSettings.TrendingMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideCollected = !TraktSettings.TrendingMoviesHideCollected;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideRated = !TraktSettings.TrendingMoviesHideRated;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIMovieListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			CheckAndPlayMovie (true);  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadTrendingMovies (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByTrendingMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByTrendingMovies.Field) {  			TraktSettings.SortByTrendingMovies = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadTrendingMovies (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideWatched = !TraktSettings.TrendingMoviesHideWatched;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideWatchlisted = !TraktSettings.TrendingMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideCollected = !TraktSettings.TrendingMoviesHideCollected;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideRated = !TraktSettings.TrendingMoviesHideRated;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIMovieListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			CheckAndPlayMovie (true);  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadTrendingMovies (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByTrendingMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByTrendingMovies.Field) {  			TraktSettings.SortByTrendingMovies = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadTrendingMovies (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideWatched = !TraktSettings.TrendingMoviesHideWatched;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideWatchlisted = !TraktSettings.TrendingMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideCollected = !TraktSettings.TrendingMoviesHideCollected;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideRated = !TraktSettings.TrendingMoviesHideRated;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUITrendingMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUITrendingMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		var item = Facade.SelectedListItem as GUIMovieListItem;  		if (item == null)  			return;  		if (!item.IsFolder) {  			CheckAndPlayMovie (true);  		} else {  			if (item.IsPrevPageItem)  				CurrentPage--;  			else  				CurrentPage++;  			if (CurrentPage == 1)  				PreviousSelectedIndex = 0;  			else  				PreviousSelectedIndex = 1;  			// load next / previous page  			LoadTrendingMovies (CurrentPage);  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByTrendingMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByTrendingMovies.Field) {  			TraktSettings.SortByTrendingMovies = newSortBy;  			PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  			UpdateButtonState ();  			LoadTrendingMovies (CurrentPage);  		}  	}  	break;  // Hide Watched  case (9):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideWatched = !TraktSettings.TrendingMoviesHideWatched;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Watchlisted  case (10):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideWatchlisted = !TraktSettings.TrendingMoviesHideWatchlisted;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Collected  case (11):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideCollected = !TraktSettings.TrendingMoviesHideCollected;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  // Hide Rated  case (12):  	PreviousSelectedIndex = CurrentPage == 1 ? 0 : 1;  	TraktSettings.TrendingMoviesHideRated = !TraktSettings.TrendingMoviesHideRated;  	UpdateButtonState ();  	LoadTrendingMovies (CurrentPage);  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		GUIListItem item = Facade.SelectedListItem as GUIListItem;  		// Is a group header  		if (item != null && item.IsFolder) {  			switch (CurrentCalendar) {  			case CalendarType.MyShows:  				// previous call may have timedout  				if (_CalendarShows != null) {  					PreviousCalendarDayCount = _CalendarShows.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarShows = null;  				}  				break;  			case CalendarType.Premieres:  				if (_CalendarPremieres != null) {  					PreviousCalendarDayCount = _CalendarPremieres.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarPremieres = null;  				}  				break;  			case CalendarType.AllShows:  				if (_CalendarAllShows != null) {  					PreviousCalendarDayCount = _CalendarAllShows.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarAllShows = null;  				}  				break;  			}  			// load next 7 days in calendar  			LoadCalendar ();  		}  		// Is an episode  		if (item != null && !item.IsFolder) {  			CheckAndPlayEpisode ();  		}  	}  	break;  // View Button  case (2):  	ShowViewMenu ();  	break;  // Start Date Button  case (3):  	ShowStartDateMenu ();  	break;  // Hide Watchlisted  case (4):  	TraktSettings.CalendarHideTVShowsInWatchList = !TraktSettings.CalendarHideTVShowsInWatchList;  	LoadCalendar ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		GUIListItem item = Facade.SelectedListItem as GUIListItem;  		// Is a group header  		if (item != null && item.IsFolder) {  			switch (CurrentCalendar) {  			case CalendarType.MyShows:  				// previous call may have timedout  				if (_CalendarShows != null) {  					PreviousCalendarDayCount = _CalendarShows.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarShows = null;  				}  				break;  			case CalendarType.Premieres:  				if (_CalendarPremieres != null) {  					PreviousCalendarDayCount = _CalendarPremieres.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarPremieres = null;  				}  				break;  			case CalendarType.AllShows:  				if (_CalendarAllShows != null) {  					PreviousCalendarDayCount = _CalendarAllShows.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarAllShows = null;  				}  				break;  			}  			// load next 7 days in calendar  			LoadCalendar ();  		}  		// Is an episode  		if (item != null && !item.IsFolder) {  			CheckAndPlayEpisode ();  		}  	}  	break;  // View Button  case (2):  	ShowViewMenu ();  	break;  // Start Date Button  case (3):  	ShowStartDateMenu ();  	break;  // Hide Watchlisted  case (4):  	TraktSettings.CalendarHideTVShowsInWatchList = !TraktSettings.CalendarHideTVShowsInWatchList;  	LoadCalendar ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		GUIListItem item = Facade.SelectedListItem as GUIListItem;  		// Is a group header  		if (item != null && item.IsFolder) {  			switch (CurrentCalendar) {  			case CalendarType.MyShows:  				// previous call may have timedout  				if (_CalendarShows != null) {  					PreviousCalendarDayCount = _CalendarShows.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarShows = null;  				}  				break;  			case CalendarType.Premieres:  				if (_CalendarPremieres != null) {  					PreviousCalendarDayCount = _CalendarPremieres.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarPremieres = null;  				}  				break;  			case CalendarType.AllShows:  				if (_CalendarAllShows != null) {  					PreviousCalendarDayCount = _CalendarAllShows.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarAllShows = null;  				}  				break;  			}  			// load next 7 days in calendar  			LoadCalendar ();  		}  		// Is an episode  		if (item != null && !item.IsFolder) {  			CheckAndPlayEpisode ();  		}  	}  	break;  // View Button  case (2):  	ShowViewMenu ();  	break;  // Start Date Button  case (3):  	ShowStartDateMenu ();  	break;  // Hide Watchlisted  case (4):  	TraktSettings.CalendarHideTVShowsInWatchList = !TraktSettings.CalendarHideTVShowsInWatchList;  	LoadCalendar ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		GUIListItem item = Facade.SelectedListItem as GUIListItem;  		// Is a group header  		if (item != null && item.IsFolder) {  			switch (CurrentCalendar) {  			case CalendarType.MyShows:  				// previous call may have timedout  				if (_CalendarShows != null) {  					PreviousCalendarDayCount = _CalendarShows.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarShows = null;  				}  				break;  			case CalendarType.Premieres:  				if (_CalendarPremieres != null) {  					PreviousCalendarDayCount = _CalendarPremieres.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarPremieres = null;  				}  				break;  			case CalendarType.AllShows:  				if (_CalendarAllShows != null) {  					PreviousCalendarDayCount = _CalendarAllShows.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarAllShows = null;  				}  				break;  			}  			// load next 7 days in calendar  			LoadCalendar ();  		}  		// Is an episode  		if (item != null && !item.IsFolder) {  			CheckAndPlayEpisode ();  		}  	}  	break;  // View Button  case (2):  	ShowViewMenu ();  	break;  // Start Date Button  case (3):  	ShowStartDateMenu ();  	break;  // Hide Watchlisted  case (4):  	TraktSettings.CalendarHideTVShowsInWatchList = !TraktSettings.CalendarHideTVShowsInWatchList;  	LoadCalendar ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		GUIListItem item = Facade.SelectedListItem as GUIListItem;  		// Is a group header  		if (item != null && item.IsFolder) {  			switch (CurrentCalendar) {  			case CalendarType.MyShows:  				// previous call may have timedout  				if (_CalendarShows != null) {  					PreviousCalendarDayCount = _CalendarShows.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarShows = null;  				}  				break;  			case CalendarType.Premieres:  				if (_CalendarPremieres != null) {  					PreviousCalendarDayCount = _CalendarPremieres.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarPremieres = null;  				}  				break;  			case CalendarType.AllShows:  				if (_CalendarAllShows != null) {  					PreviousCalendarDayCount = _CalendarAllShows.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarAllShows = null;  				}  				break;  			}  			// load next 7 days in calendar  			LoadCalendar ();  		}  		// Is an episode  		if (item != null && !item.IsFolder) {  			CheckAndPlayEpisode ();  		}  	}  	break;  // View Button  case (2):  	ShowViewMenu ();  	break;  // Start Date Button  case (3):  	ShowStartDateMenu ();  	break;  // Hide Watchlisted  case (4):  	TraktSettings.CalendarHideTVShowsInWatchList = !TraktSettings.CalendarHideTVShowsInWatchList;  	LoadCalendar ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		GUIListItem item = Facade.SelectedListItem as GUIListItem;  		// Is a group header  		if (item != null && item.IsFolder) {  			switch (CurrentCalendar) {  			case CalendarType.MyShows:  				// previous call may have timedout  				if (_CalendarShows != null) {  					PreviousCalendarDayCount = _CalendarShows.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarShows = null;  				}  				break;  			case CalendarType.Premieres:  				if (_CalendarPremieres != null) {  					PreviousCalendarDayCount = _CalendarPremieres.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarPremieres = null;  				}  				break;  			case CalendarType.AllShows:  				if (_CalendarAllShows != null) {  					PreviousCalendarDayCount = _CalendarAllShows.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarAllShows = null;  				}  				break;  			}  			// load next 7 days in calendar  			LoadCalendar ();  		}  		// Is an episode  		if (item != null && !item.IsFolder) {  			CheckAndPlayEpisode ();  		}  	}  	break;  // View Button  case (2):  	ShowViewMenu ();  	break;  // Start Date Button  case (3):  	ShowStartDateMenu ();  	break;  // Hide Watchlisted  case (4):  	TraktSettings.CalendarHideTVShowsInWatchList = !TraktSettings.CalendarHideTVShowsInWatchList;  	LoadCalendar ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		GUIListItem item = Facade.SelectedListItem as GUIListItem;  		// Is a group header  		if (item != null && item.IsFolder) {  			switch (CurrentCalendar) {  			case CalendarType.MyShows:  				// previous call may have timedout  				if (_CalendarShows != null) {  					PreviousCalendarDayCount = _CalendarShows.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarShows = null;  				}  				break;  			case CalendarType.Premieres:  				if (_CalendarPremieres != null) {  					PreviousCalendarDayCount = _CalendarPremieres.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarPremieres = null;  				}  				break;  			case CalendarType.AllShows:  				if (_CalendarAllShows != null) {  					PreviousCalendarDayCount = _CalendarAllShows.Count ();  					PreviousSelectedIndex = Facade.SelectedListItemIndex;  					CurrentWeekDays += 7;  					_CalendarAllShows = null;  				}  				break;  			}  			// load next 7 days in calendar  			LoadCalendar ();  		}  		// Is an episode  		if (item != null && !item.IsFolder) {  			CheckAndPlayEpisode ();  		}  	}  	break;  // View Button  case (2):  	ShowViewMenu ();  	break;  // Start Date Button  case (3):  	ShowStartDateMenu ();  	break;  // Hide Watchlisted  case (4):  	TraktSettings.CalendarHideTVShowsInWatchList = !TraktSettings.CalendarHideTVShowsInWatchList;  	LoadCalendar ();  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  	GUIListItem item = Facade.SelectedListItem as GUIListItem;  	// Is a group header  	if (item != null && item.IsFolder) {  		switch (CurrentCalendar) {  		case CalendarType.MyShows:  			// previous call may have timedout  			if (_CalendarShows != null) {  				PreviousCalendarDayCount = _CalendarShows.Count ();  				PreviousSelectedIndex = Facade.SelectedListItemIndex;  				CurrentWeekDays += 7;  				_CalendarShows = null;  			}  			break;  		case CalendarType.Premieres:  			if (_CalendarPremieres != null) {  				PreviousCalendarDayCount = _CalendarPremieres.Count ();  				PreviousSelectedIndex = Facade.SelectedListItemIndex;  				CurrentWeekDays += 7;  				_CalendarPremieres = null;  			}  			break;  		case CalendarType.AllShows:  			if (_CalendarAllShows != null) {  				PreviousCalendarDayCount = _CalendarAllShows.Count ();  				PreviousSelectedIndex = Facade.SelectedListItemIndex;  				CurrentWeekDays += 7;  				_CalendarAllShows = null;  			}  			break;  		}  		// load next 7 days in calendar  		LoadCalendar ();  	}  	// Is an episode  	if (item != null && !item.IsFolder) {  		CheckAndPlayEpisode ();  	}  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  	GUIListItem item = Facade.SelectedListItem as GUIListItem;  	// Is a group header  	if (item != null && item.IsFolder) {  		switch (CurrentCalendar) {  		case CalendarType.MyShows:  			// previous call may have timedout  			if (_CalendarShows != null) {  				PreviousCalendarDayCount = _CalendarShows.Count ();  				PreviousSelectedIndex = Facade.SelectedListItemIndex;  				CurrentWeekDays += 7;  				_CalendarShows = null;  			}  			break;  		case CalendarType.Premieres:  			if (_CalendarPremieres != null) {  				PreviousCalendarDayCount = _CalendarPremieres.Count ();  				PreviousSelectedIndex = Facade.SelectedListItemIndex;  				CurrentWeekDays += 7;  				_CalendarPremieres = null;  			}  			break;  		case CalendarType.AllShows:  			if (_CalendarAllShows != null) {  				PreviousCalendarDayCount = _CalendarAllShows.Count ();  				PreviousSelectedIndex = Facade.SelectedListItemIndex;  				CurrentWeekDays += 7;  				_CalendarAllShows = null;  			}  			break;  		}  		// load next 7 days in calendar  		LoadCalendar ();  	}  	// Is an episode  	if (item != null && !item.IsFolder) {  		CheckAndPlayEpisode ();  	}  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  	GUIListItem item = Facade.SelectedListItem as GUIListItem;  	// Is a group header  	if (item != null && item.IsFolder) {  		switch (CurrentCalendar) {  		case CalendarType.MyShows:  			// previous call may have timedout  			if (_CalendarShows != null) {  				PreviousCalendarDayCount = _CalendarShows.Count ();  				PreviousSelectedIndex = Facade.SelectedListItemIndex;  				CurrentWeekDays += 7;  				_CalendarShows = null;  			}  			break;  		case CalendarType.Premieres:  			if (_CalendarPremieres != null) {  				PreviousCalendarDayCount = _CalendarPremieres.Count ();  				PreviousSelectedIndex = Facade.SelectedListItemIndex;  				CurrentWeekDays += 7;  				_CalendarPremieres = null;  			}  			break;  		case CalendarType.AllShows:  			if (_CalendarAllShows != null) {  				PreviousCalendarDayCount = _CalendarAllShows.Count ();  				PreviousSelectedIndex = Facade.SelectedListItemIndex;  				CurrentWeekDays += 7;  				_CalendarAllShows = null;  			}  			break;  		}  		// load next 7 days in calendar  		LoadCalendar ();  	}  	// Is an episode  	if (item != null && !item.IsFolder) {  		CheckAndPlayEpisode ();  	}  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: if (item != null && item.IsFolder) {  	switch (CurrentCalendar) {  	case CalendarType.MyShows:  		// previous call may have timedout  		if (_CalendarShows != null) {  			PreviousCalendarDayCount = _CalendarShows.Count ();  			PreviousSelectedIndex = Facade.SelectedListItemIndex;  			CurrentWeekDays += 7;  			_CalendarShows = null;  		}  		break;  	case CalendarType.Premieres:  		if (_CalendarPremieres != null) {  			PreviousCalendarDayCount = _CalendarPremieres.Count ();  			PreviousSelectedIndex = Facade.SelectedListItemIndex;  			CurrentWeekDays += 7;  			_CalendarPremieres = null;  		}  		break;  	case CalendarType.AllShows:  		if (_CalendarAllShows != null) {  			PreviousCalendarDayCount = _CalendarAllShows.Count ();  			PreviousSelectedIndex = Facade.SelectedListItemIndex;  			CurrentWeekDays += 7;  			_CalendarAllShows = null;  		}  		break;  	}  	// load next 7 days in calendar  	LoadCalendar ();  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: if (item != null && item.IsFolder) {  	switch (CurrentCalendar) {  	case CalendarType.MyShows:  		// previous call may have timedout  		if (_CalendarShows != null) {  			PreviousCalendarDayCount = _CalendarShows.Count ();  			PreviousSelectedIndex = Facade.SelectedListItemIndex;  			CurrentWeekDays += 7;  			_CalendarShows = null;  		}  		break;  	case CalendarType.Premieres:  		if (_CalendarPremieres != null) {  			PreviousCalendarDayCount = _CalendarPremieres.Count ();  			PreviousSelectedIndex = Facade.SelectedListItemIndex;  			CurrentWeekDays += 7;  			_CalendarPremieres = null;  		}  		break;  	case CalendarType.AllShows:  		if (_CalendarAllShows != null) {  			PreviousCalendarDayCount = _CalendarAllShows.Count ();  			PreviousSelectedIndex = Facade.SelectedListItemIndex;  			CurrentWeekDays += 7;  			_CalendarAllShows = null;  		}  		break;  	}  	// load next 7 days in calendar  	LoadCalendar ();  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: if (item != null && item.IsFolder) {  	switch (CurrentCalendar) {  	case CalendarType.MyShows:  		// previous call may have timedout  		if (_CalendarShows != null) {  			PreviousCalendarDayCount = _CalendarShows.Count ();  			PreviousSelectedIndex = Facade.SelectedListItemIndex;  			CurrentWeekDays += 7;  			_CalendarShows = null;  		}  		break;  	case CalendarType.Premieres:  		if (_CalendarPremieres != null) {  			PreviousCalendarDayCount = _CalendarPremieres.Count ();  			PreviousSelectedIndex = Facade.SelectedListItemIndex;  			CurrentWeekDays += 7;  			_CalendarPremieres = null;  		}  		break;  	case CalendarType.AllShows:  		if (_CalendarAllShows != null) {  			PreviousCalendarDayCount = _CalendarAllShows.Count ();  			PreviousSelectedIndex = Facade.SelectedListItemIndex;  			CurrentWeekDays += 7;  			_CalendarAllShows = null;  		}  		break;  	}  	// load next 7 days in calendar  	LoadCalendar ();  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: switch (CurrentCalendar) {  case CalendarType.MyShows:  	// previous call may have timedout  	if (_CalendarShows != null) {  		PreviousCalendarDayCount = _CalendarShows.Count ();  		PreviousSelectedIndex = Facade.SelectedListItemIndex;  		CurrentWeekDays += 7;  		_CalendarShows = null;  	}  	break;  case CalendarType.Premieres:  	if (_CalendarPremieres != null) {  		PreviousCalendarDayCount = _CalendarPremieres.Count ();  		PreviousSelectedIndex = Facade.SelectedListItemIndex;  		CurrentWeekDays += 7;  		_CalendarPremieres = null;  	}  	break;  case CalendarType.AllShows:  	if (_CalendarAllShows != null) {  		PreviousCalendarDayCount = _CalendarAllShows.Count ();  		PreviousSelectedIndex = Facade.SelectedListItemIndex;  		CurrentWeekDays += 7;  		_CalendarAllShows = null;  	}  	break;  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: switch (CurrentCalendar) {  case CalendarType.MyShows:  	// previous call may have timedout  	if (_CalendarShows != null) {  		PreviousCalendarDayCount = _CalendarShows.Count ();  		PreviousSelectedIndex = Facade.SelectedListItemIndex;  		CurrentWeekDays += 7;  		_CalendarShows = null;  	}  	break;  case CalendarType.Premieres:  	if (_CalendarPremieres != null) {  		PreviousCalendarDayCount = _CalendarPremieres.Count ();  		PreviousSelectedIndex = Facade.SelectedListItemIndex;  		CurrentWeekDays += 7;  		_CalendarPremieres = null;  	}  	break;  case CalendarType.AllShows:  	if (_CalendarAllShows != null) {  		PreviousCalendarDayCount = _CalendarAllShows.Count ();  		PreviousSelectedIndex = Facade.SelectedListItemIndex;  		CurrentWeekDays += 7;  		_CalendarAllShows = null;  	}  	break;  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: switch (CurrentCalendar) {  case CalendarType.MyShows:  	// previous call may have timedout  	if (_CalendarShows != null) {  		PreviousCalendarDayCount = _CalendarShows.Count ();  		PreviousSelectedIndex = Facade.SelectedListItemIndex;  		CurrentWeekDays += 7;  		_CalendarShows = null;  	}  	break;  case CalendarType.Premieres:  	if (_CalendarPremieres != null) {  		PreviousCalendarDayCount = _CalendarPremieres.Count ();  		PreviousSelectedIndex = Facade.SelectedListItemIndex;  		CurrentWeekDays += 7;  		_CalendarPremieres = null;  	}  	break;  case CalendarType.AllShows:  	if (_CalendarAllShows != null) {  		PreviousCalendarDayCount = _CalendarAllShows.Count ();  		PreviousSelectedIndex = Facade.SelectedListItemIndex;  		CurrentWeekDays += 7;  		_CalendarAllShows = null;  	}  	break;  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: if (_CalendarShows != null) {  	PreviousCalendarDayCount = _CalendarShows.Count ();  	PreviousSelectedIndex = Facade.SelectedListItemIndex;  	CurrentWeekDays += 7;  	_CalendarShows = null;  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: CurrentWeekDays += 7;  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: if (_CalendarPremieres != null) {  	PreviousCalendarDayCount = _CalendarPremieres.Count ();  	PreviousSelectedIndex = Facade.SelectedListItemIndex;  	CurrentWeekDays += 7;  	_CalendarPremieres = null;  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: CurrentWeekDays += 7;  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: if (_CalendarAllShows != null) {  	PreviousCalendarDayCount = _CalendarAllShows.Count ();  	PreviousSelectedIndex = Facade.SelectedListItemIndex;  	CurrentWeekDays += 7;  	_CalendarAllShows = null;  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following statement contains a magic number: CurrentWeekDays += 7;  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,ShowStartDateMenu,The following statement contains a magic number: CurrentWeekDays = 7;  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,ShowViewMenu,The following statement contains a magic number: CurrentWeekDays = 7;  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,InitProperties,The following statement contains a magic number: if (LastRequest < DateTime.UtcNow.Subtract (new TimeSpan (0' TraktSettings.WebRequestCacheMinutes' 0))) {  	CurrentWeekDays = 7;  	PreviousSelectedIndex = 0;  	PreviousCalendarDayCount = 0;  	IsCached = false;  } else  	// restore previous position on load  	IsCached = true;  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,InitProperties,The following statement contains a magic number: CurrentWeekDays = 7;  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,GetDaysForward,The following statement contains a magic number: switch (CurrentStartDate) {  case StartDates.Today:  	return CurrentWeekDays.ToString ();  case StartDates.Yesterday:  	return (CurrentWeekDays + 1).ToString ();  case StartDates.OneWeekAgo:  	return (CurrentWeekDays + 7).ToString ();  case StartDates.TwoWeeksAgo:  	return (CurrentWeekDays + 14).ToString ();  case StartDates.OneMonthAgo:  	return (CurrentWeekDays + 31).ToString ();  default:  	return CurrentWeekDays.ToString ();  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,GetDaysForward,The following statement contains a magic number: switch (CurrentStartDate) {  case StartDates.Today:  	return CurrentWeekDays.ToString ();  case StartDates.Yesterday:  	return (CurrentWeekDays + 1).ToString ();  case StartDates.OneWeekAgo:  	return (CurrentWeekDays + 7).ToString ();  case StartDates.TwoWeeksAgo:  	return (CurrentWeekDays + 14).ToString ();  case StartDates.OneMonthAgo:  	return (CurrentWeekDays + 31).ToString ();  default:  	return CurrentWeekDays.ToString ();  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,GetDaysForward,The following statement contains a magic number: switch (CurrentStartDate) {  case StartDates.Today:  	return CurrentWeekDays.ToString ();  case StartDates.Yesterday:  	return (CurrentWeekDays + 1).ToString ();  case StartDates.OneWeekAgo:  	return (CurrentWeekDays + 7).ToString ();  case StartDates.TwoWeeksAgo:  	return (CurrentWeekDays + 14).ToString ();  case StartDates.OneMonthAgo:  	return (CurrentWeekDays + 31).ToString ();  default:  	return CurrentWeekDays.ToString ();  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,GetDaysForward,The following statement contains a magic number: return (CurrentWeekDays + 7).ToString ();  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,GetDaysForward,The following statement contains a magic number: return (CurrentWeekDays + 14).ToString ();  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,GetDaysForward,The following statement contains a magic number: return (CurrentWeekDays + 31).ToString ();  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,GetStartDate,The following statement contains a magic number: switch (CurrentStartDate) {  case StartDates.Today:  	return DateTime.UtcNow.Subtract (new TimeSpan (0' 0' 0' 0));  case StartDates.Yesterday:  	return DateTime.UtcNow.Subtract (new TimeSpan (1' 0' 0' 0));  case StartDates.OneWeekAgo:  	return DateTime.UtcNow.Subtract (new TimeSpan (7' 0' 0' 0));  case StartDates.TwoWeeksAgo:  	return DateTime.UtcNow.Subtract (new TimeSpan (14' 0' 0' 0));  case StartDates.OneMonthAgo:  	return DateTime.UtcNow.Subtract (new TimeSpan (31' 0' 0' 0));  default:  	return DateTime.UtcNow.Subtract (new TimeSpan (0' 0' 0' 0));  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,GetStartDate,The following statement contains a magic number: switch (CurrentStartDate) {  case StartDates.Today:  	return DateTime.UtcNow.Subtract (new TimeSpan (0' 0' 0' 0));  case StartDates.Yesterday:  	return DateTime.UtcNow.Subtract (new TimeSpan (1' 0' 0' 0));  case StartDates.OneWeekAgo:  	return DateTime.UtcNow.Subtract (new TimeSpan (7' 0' 0' 0));  case StartDates.TwoWeeksAgo:  	return DateTime.UtcNow.Subtract (new TimeSpan (14' 0' 0' 0));  case StartDates.OneMonthAgo:  	return DateTime.UtcNow.Subtract (new TimeSpan (31' 0' 0' 0));  default:  	return DateTime.UtcNow.Subtract (new TimeSpan (0' 0' 0' 0));  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,GetStartDate,The following statement contains a magic number: switch (CurrentStartDate) {  case StartDates.Today:  	return DateTime.UtcNow.Subtract (new TimeSpan (0' 0' 0' 0));  case StartDates.Yesterday:  	return DateTime.UtcNow.Subtract (new TimeSpan (1' 0' 0' 0));  case StartDates.OneWeekAgo:  	return DateTime.UtcNow.Subtract (new TimeSpan (7' 0' 0' 0));  case StartDates.TwoWeeksAgo:  	return DateTime.UtcNow.Subtract (new TimeSpan (14' 0' 0' 0));  case StartDates.OneMonthAgo:  	return DateTime.UtcNow.Subtract (new TimeSpan (31' 0' 0' 0));  default:  	return DateTime.UtcNow.Subtract (new TimeSpan (0' 0' 0' 0));  }  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,GetStartDate,The following statement contains a magic number: return DateTime.UtcNow.Subtract (new TimeSpan (7' 0' 0' 0));  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,GetStartDate,The following statement contains a magic number: return DateTime.UtcNow.Subtract (new TimeSpan (14' 0' 0' 0));  
Magic Number,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,GetStartDate,The following statement contains a magic number: return DateTime.UtcNow.Subtract (new TimeSpan (31' 0' 0' 0));  
Magic Number,TraktPlugin.GUI,GUIWatchListMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByWatchListMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByWatchListMovies.Field) {  			TraktSettings.SortByWatchListMovies = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadWatchListMovies ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIWatchListMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByWatchListMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByWatchListMovies.Field) {  			TraktSettings.SortByWatchListMovies = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadWatchListMovies ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIWatchListMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListMovies.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		CheckAndPlayMovie (true);  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByWatchListMovies);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByWatchListMovies.Field) {  			TraktSettings.SortByWatchListMovies = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadWatchListMovies ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIWatchListShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		if (TraktSettings.EnableJumpToForTVShows) {  			CheckAndPlayEpisode (true);  		} else {  			var selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var selectedWatchlistItem = selectedItem.TVTag as TraktShowWatchList;  			if (selectedWatchlistItem == null)  				return;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' selectedWatchlistItem.Show.ToJSON ());  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByWatchListShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByWatchListShows.Field) {  			TraktSettings.SortByWatchListShows = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadWatchListShows ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIWatchListShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		if (TraktSettings.EnableJumpToForTVShows) {  			CheckAndPlayEpisode (true);  		} else {  			var selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var selectedWatchlistItem = selectedItem.TVTag as TraktShowWatchList;  			if (selectedWatchlistItem == null)  				return;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' selectedWatchlistItem.Show.ToJSON ());  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByWatchListShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByWatchListShows.Field) {  			TraktSettings.SortByWatchListShows = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadWatchListShows ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,GUIWatchListShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIWatchListShows.cs,OnClicked,The following statement contains a magic number: switch (controlId) {  // Facade  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		if (TraktSettings.EnableJumpToForTVShows) {  			CheckAndPlayEpisode (true);  		} else {  			var selectedItem = this.Facade.SelectedListItem;  			if (selectedItem == null)  				return;  			var selectedWatchlistItem = selectedItem.TVTag as TraktShowWatchList;  			if (selectedWatchlistItem == null)  				return;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' selectedWatchlistItem.Show.ToJSON ());  		}  	}  	break;  // Layout Button  case (2):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  // Sort Button  case (8):  	var newSortBy = GUICommon.ShowSortMenu (TraktSettings.SortByWatchListShows);  	if (newSortBy != null) {  		if (newSortBy.Field != TraktSettings.SortByWatchListShows.Field) {  			TraktSettings.SortByWatchListShows = newSortBy;  			PreviousSelectedIndex = 0;  			UpdateButtonState ();  			LoadWatchListShows ();  		}  	}  	break;  default:  	break;  }  
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetDashboardSkinSettings,The following statement contains a magic number: DashboardActivityFacadeMaxItems = 25;  
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetDashboardSkinSettings,The following statement contains a magic number: MaxTrendingItems = 10;  
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetDashboardSkinSettings,The following statement contains a magic number: if (trendingNodes != null) {  	foreach (XmlNode trendingNode in trendingNodes) {  		var trendingItem = new DashboardTrendingSettings {  			TVShowWindows = new List<string> ()'  			MovieWindows = new List<string> ()'  			PropertiesMaxItems = 0'  			FacadeMaxItems = 10'  			FacadeType = "None"  		};  		node = trendingNode.SelectSingleNode ("facadetype");  		if (node != null) {  			trendingItem.FacadeType = node.InnerText;  		}  		node = trendingNode.SelectSingleNode ("facademaxitems");  		if (node != null) {  			int maxItems;  			if (int.TryParse (node.InnerText' out maxItems)) {  				trendingItem.FacadeMaxItems = maxItems;  				if (maxItems > MaxTrendingItems)  					MaxTrendingItems = maxItems;  			}  		}  		node = trendingNode.SelectSingleNode ("propertiesmaxitems");  		if (node != null) {  			int maxItems;  			if (int.TryParse (node.InnerText' out maxItems))  				trendingItem.PropertiesMaxItems = maxItems;  		}  		node = trendingNode.SelectSingleNode ("shows");  		if (node != null) {  			node = node.SelectSingleNode ("windows");  			if (node != null) {  				trendingItem.TVShowWindows = node.InnerText.Split ('|').ToList ();  			}  		}  		node = trendingNode.SelectSingleNode ("movies");  		if (node != null) {  			node = node.SelectSingleNode ("windows");  			if (node != null) {  				trendingItem.MovieWindows = node.InnerText.Split ('|').ToList ();  			}  		}  		// add to the collection  		DashboardTrendingCollection.Add (trendingItem);  	}  }  
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetDashboardSkinSettings,The following statement contains a magic number: foreach (XmlNode trendingNode in trendingNodes) {  	var trendingItem = new DashboardTrendingSettings {  		TVShowWindows = new List<string> ()'  		MovieWindows = new List<string> ()'  		PropertiesMaxItems = 0'  		FacadeMaxItems = 10'  		FacadeType = "None"  	};  	node = trendingNode.SelectSingleNode ("facadetype");  	if (node != null) {  		trendingItem.FacadeType = node.InnerText;  	}  	node = trendingNode.SelectSingleNode ("facademaxitems");  	if (node != null) {  		int maxItems;  		if (int.TryParse (node.InnerText' out maxItems)) {  			trendingItem.FacadeMaxItems = maxItems;  			if (maxItems > MaxTrendingItems)  				MaxTrendingItems = maxItems;  		}  	}  	node = trendingNode.SelectSingleNode ("propertiesmaxitems");  	if (node != null) {  		int maxItems;  		if (int.TryParse (node.InnerText' out maxItems))  			trendingItem.PropertiesMaxItems = maxItems;  	}  	node = trendingNode.SelectSingleNode ("shows");  	if (node != null) {  		node = node.SelectSingleNode ("windows");  		if (node != null) {  			trendingItem.TVShowWindows = node.InnerText.Split ('|').ToList ();  		}  	}  	node = trendingNode.SelectSingleNode ("movies");  	if (node != null) {  		node = node.SelectSingleNode ("windows");  		if (node != null) {  			trendingItem.MovieWindows = node.InnerText.Split ('|').ToList ();  		}  	}  	// add to the collection  	DashboardTrendingCollection.Add (trendingItem);  }  
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: PosterMainOverlayPosX = 222;  
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: if (node != null) {  	int.TryParse (node.InnerText' out posx);  	if (posx == 178)  		posx = 222;  	// upgrade step' new poster sizes  	PosterMainOverlayPosX = posx;  }  
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: if (node != null) {  	int.TryParse (node.InnerText' out posx);  	if (posx == 178)  		posx = 222;  	// upgrade step' new poster sizes  	PosterMainOverlayPosX = posx;  }  
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: if (posx == 178)  	posx = 222;  
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: if (posx == 178)  	posx = 222;  
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: posx = 222;  
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: EpisodeThumbMainOverlayPosX = 278;  
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: PosterRatingOverlayPosX = 222;  
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: if (node != null) {  	int.TryParse (node.InnerText' out posx);  	if (posx == 178)  		posx = 222;  	// upgrade step' new poster sizes  	PosterRatingOverlayPosX = posx;  }  
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: if (node != null) {  	int.TryParse (node.InnerText' out posx);  	if (posx == 178)  		posx = 222;  	// upgrade step' new poster sizes  	PosterRatingOverlayPosX = posx;  }  
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: if (posx == 178)  	posx = 222;  
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: if (posx == 178)  	posx = 222;  
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: posx = 222;  
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: EpisodeThumbRatingOverlayPosX = 278;  
Magic Number,TraktPlugin.GUI,TraktSkinSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSkinSettings.cs,GetOverlayPositions,The following statement contains a magic number: AvatarRatingOverlayPosX = 18;  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: try {  	dlgYesNo.Reset ();  	dlgYesNo.SetHeading (heading);  	string[] linesArray = lines.Split (new string[] {  		"\\n"'  		"\n"  	}' StringSplitOptions.None);  	if (linesArray.Length > 0)  		dlgYesNo.SetLine (1' linesArray [0]);  	if (linesArray.Length > 1)  		dlgYesNo.SetLine (2' linesArray [1]);  	if (linesArray.Length > 2)  		dlgYesNo.SetLine (3' linesArray [2]);  	if (linesArray.Length > 3)  		dlgYesNo.SetLine (4' linesArray [3]);  	dlgYesNo.SetDefaultToYes (defaultYes);  	foreach (GUIControl item in dlgYesNo.GetControlList ()) {  		if (item is GUIButtonControl) {  			GUIButtonControl btn = (GUIButtonControl)item;  			if (btn.GetID == 11 && !string.IsNullOrEmpty (yesLabel))  				// Yes button  				btn.Label = yesLabel;  			else if (btn.GetID == 10 && !string.IsNullOrEmpty (noLabel))  				// No button  				btn.Label = noLabel;  		}  	}  	dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  	return dlgYesNo.IsConfirmed;  } finally {  	// set the standard yes/no dialog back to it's original state (yes/no buttons)  	if (dlgYesNo != null) {  		dlgYesNo.ClearAll ();  	}  }  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: try {  	dlgYesNo.Reset ();  	dlgYesNo.SetHeading (heading);  	string[] linesArray = lines.Split (new string[] {  		"\\n"'  		"\n"  	}' StringSplitOptions.None);  	if (linesArray.Length > 0)  		dlgYesNo.SetLine (1' linesArray [0]);  	if (linesArray.Length > 1)  		dlgYesNo.SetLine (2' linesArray [1]);  	if (linesArray.Length > 2)  		dlgYesNo.SetLine (3' linesArray [2]);  	if (linesArray.Length > 3)  		dlgYesNo.SetLine (4' linesArray [3]);  	dlgYesNo.SetDefaultToYes (defaultYes);  	foreach (GUIControl item in dlgYesNo.GetControlList ()) {  		if (item is GUIButtonControl) {  			GUIButtonControl btn = (GUIButtonControl)item;  			if (btn.GetID == 11 && !string.IsNullOrEmpty (yesLabel))  				// Yes button  				btn.Label = yesLabel;  			else if (btn.GetID == 10 && !string.IsNullOrEmpty (noLabel))  				// No button  				btn.Label = noLabel;  		}  	}  	dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  	return dlgYesNo.IsConfirmed;  } finally {  	// set the standard yes/no dialog back to it's original state (yes/no buttons)  	if (dlgYesNo != null) {  		dlgYesNo.ClearAll ();  	}  }  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: try {  	dlgYesNo.Reset ();  	dlgYesNo.SetHeading (heading);  	string[] linesArray = lines.Split (new string[] {  		"\\n"'  		"\n"  	}' StringSplitOptions.None);  	if (linesArray.Length > 0)  		dlgYesNo.SetLine (1' linesArray [0]);  	if (linesArray.Length > 1)  		dlgYesNo.SetLine (2' linesArray [1]);  	if (linesArray.Length > 2)  		dlgYesNo.SetLine (3' linesArray [2]);  	if (linesArray.Length > 3)  		dlgYesNo.SetLine (4' linesArray [3]);  	dlgYesNo.SetDefaultToYes (defaultYes);  	foreach (GUIControl item in dlgYesNo.GetControlList ()) {  		if (item is GUIButtonControl) {  			GUIButtonControl btn = (GUIButtonControl)item;  			if (btn.GetID == 11 && !string.IsNullOrEmpty (yesLabel))  				// Yes button  				btn.Label = yesLabel;  			else if (btn.GetID == 10 && !string.IsNullOrEmpty (noLabel))  				// No button  				btn.Label = noLabel;  		}  	}  	dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  	return dlgYesNo.IsConfirmed;  } finally {  	// set the standard yes/no dialog back to it's original state (yes/no buttons)  	if (dlgYesNo != null) {  		dlgYesNo.ClearAll ();  	}  }  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: try {  	dlgYesNo.Reset ();  	dlgYesNo.SetHeading (heading);  	string[] linesArray = lines.Split (new string[] {  		"\\n"'  		"\n"  	}' StringSplitOptions.None);  	if (linesArray.Length > 0)  		dlgYesNo.SetLine (1' linesArray [0]);  	if (linesArray.Length > 1)  		dlgYesNo.SetLine (2' linesArray [1]);  	if (linesArray.Length > 2)  		dlgYesNo.SetLine (3' linesArray [2]);  	if (linesArray.Length > 3)  		dlgYesNo.SetLine (4' linesArray [3]);  	dlgYesNo.SetDefaultToYes (defaultYes);  	foreach (GUIControl item in dlgYesNo.GetControlList ()) {  		if (item is GUIButtonControl) {  			GUIButtonControl btn = (GUIButtonControl)item;  			if (btn.GetID == 11 && !string.IsNullOrEmpty (yesLabel))  				// Yes button  				btn.Label = yesLabel;  			else if (btn.GetID == 10 && !string.IsNullOrEmpty (noLabel))  				// No button  				btn.Label = noLabel;  		}  	}  	dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  	return dlgYesNo.IsConfirmed;  } finally {  	// set the standard yes/no dialog back to it's original state (yes/no buttons)  	if (dlgYesNo != null) {  		dlgYesNo.ClearAll ();  	}  }  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: try {  	dlgYesNo.Reset ();  	dlgYesNo.SetHeading (heading);  	string[] linesArray = lines.Split (new string[] {  		"\\n"'  		"\n"  	}' StringSplitOptions.None);  	if (linesArray.Length > 0)  		dlgYesNo.SetLine (1' linesArray [0]);  	if (linesArray.Length > 1)  		dlgYesNo.SetLine (2' linesArray [1]);  	if (linesArray.Length > 2)  		dlgYesNo.SetLine (3' linesArray [2]);  	if (linesArray.Length > 3)  		dlgYesNo.SetLine (4' linesArray [3]);  	dlgYesNo.SetDefaultToYes (defaultYes);  	foreach (GUIControl item in dlgYesNo.GetControlList ()) {  		if (item is GUIButtonControl) {  			GUIButtonControl btn = (GUIButtonControl)item;  			if (btn.GetID == 11 && !string.IsNullOrEmpty (yesLabel))  				// Yes button  				btn.Label = yesLabel;  			else if (btn.GetID == 10 && !string.IsNullOrEmpty (noLabel))  				// No button  				btn.Label = noLabel;  		}  	}  	dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  	return dlgYesNo.IsConfirmed;  } finally {  	// set the standard yes/no dialog back to it's original state (yes/no buttons)  	if (dlgYesNo != null) {  		dlgYesNo.ClearAll ();  	}  }  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: try {  	dlgYesNo.Reset ();  	dlgYesNo.SetHeading (heading);  	string[] linesArray = lines.Split (new string[] {  		"\\n"'  		"\n"  	}' StringSplitOptions.None);  	if (linesArray.Length > 0)  		dlgYesNo.SetLine (1' linesArray [0]);  	if (linesArray.Length > 1)  		dlgYesNo.SetLine (2' linesArray [1]);  	if (linesArray.Length > 2)  		dlgYesNo.SetLine (3' linesArray [2]);  	if (linesArray.Length > 3)  		dlgYesNo.SetLine (4' linesArray [3]);  	dlgYesNo.SetDefaultToYes (defaultYes);  	foreach (GUIControl item in dlgYesNo.GetControlList ()) {  		if (item is GUIButtonControl) {  			GUIButtonControl btn = (GUIButtonControl)item;  			if (btn.GetID == 11 && !string.IsNullOrEmpty (yesLabel))  				// Yes button  				btn.Label = yesLabel;  			else if (btn.GetID == 10 && !string.IsNullOrEmpty (noLabel))  				// No button  				btn.Label = noLabel;  		}  	}  	dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  	return dlgYesNo.IsConfirmed;  } finally {  	// set the standard yes/no dialog back to it's original state (yes/no buttons)  	if (dlgYesNo != null) {  		dlgYesNo.ClearAll ();  	}  }  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: try {  	dlgYesNo.Reset ();  	dlgYesNo.SetHeading (heading);  	string[] linesArray = lines.Split (new string[] {  		"\\n"'  		"\n"  	}' StringSplitOptions.None);  	if (linesArray.Length > 0)  		dlgYesNo.SetLine (1' linesArray [0]);  	if (linesArray.Length > 1)  		dlgYesNo.SetLine (2' linesArray [1]);  	if (linesArray.Length > 2)  		dlgYesNo.SetLine (3' linesArray [2]);  	if (linesArray.Length > 3)  		dlgYesNo.SetLine (4' linesArray [3]);  	dlgYesNo.SetDefaultToYes (defaultYes);  	foreach (GUIControl item in dlgYesNo.GetControlList ()) {  		if (item is GUIButtonControl) {  			GUIButtonControl btn = (GUIButtonControl)item;  			if (btn.GetID == 11 && !string.IsNullOrEmpty (yesLabel))  				// Yes button  				btn.Label = yesLabel;  			else if (btn.GetID == 10 && !string.IsNullOrEmpty (noLabel))  				// No button  				btn.Label = noLabel;  		}  	}  	dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  	return dlgYesNo.IsConfirmed;  } finally {  	// set the standard yes/no dialog back to it's original state (yes/no buttons)  	if (dlgYesNo != null) {  		dlgYesNo.ClearAll ();  	}  }  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: try {  	dlgYesNo.Reset ();  	dlgYesNo.SetHeading (heading);  	string[] linesArray = lines.Split (new string[] {  		"\\n"'  		"\n"  	}' StringSplitOptions.None);  	if (linesArray.Length > 0)  		dlgYesNo.SetLine (1' linesArray [0]);  	if (linesArray.Length > 1)  		dlgYesNo.SetLine (2' linesArray [1]);  	if (linesArray.Length > 2)  		dlgYesNo.SetLine (3' linesArray [2]);  	if (linesArray.Length > 3)  		dlgYesNo.SetLine (4' linesArray [3]);  	dlgYesNo.SetDefaultToYes (defaultYes);  	foreach (GUIControl item in dlgYesNo.GetControlList ()) {  		if (item is GUIButtonControl) {  			GUIButtonControl btn = (GUIButtonControl)item;  			if (btn.GetID == 11 && !string.IsNullOrEmpty (yesLabel))  				// Yes button  				btn.Label = yesLabel;  			else if (btn.GetID == 10 && !string.IsNullOrEmpty (noLabel))  				// No button  				btn.Label = noLabel;  		}  	}  	dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  	return dlgYesNo.IsConfirmed;  } finally {  	// set the standard yes/no dialog back to it's original state (yes/no buttons)  	if (dlgYesNo != null) {  		dlgYesNo.ClearAll ();  	}  }  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: try {  	dlgYesNo.Reset ();  	dlgYesNo.SetHeading (heading);  	string[] linesArray = lines.Split (new string[] {  		"\\n"'  		"\n"  	}' StringSplitOptions.None);  	if (linesArray.Length > 0)  		dlgYesNo.SetLine (1' linesArray [0]);  	if (linesArray.Length > 1)  		dlgYesNo.SetLine (2' linesArray [1]);  	if (linesArray.Length > 2)  		dlgYesNo.SetLine (3' linesArray [2]);  	if (linesArray.Length > 3)  		dlgYesNo.SetLine (4' linesArray [3]);  	dlgYesNo.SetDefaultToYes (defaultYes);  	foreach (GUIControl item in dlgYesNo.GetControlList ()) {  		if (item is GUIButtonControl) {  			GUIButtonControl btn = (GUIButtonControl)item;  			if (btn.GetID == 11 && !string.IsNullOrEmpty (yesLabel))  				// Yes button  				btn.Label = yesLabel;  			else if (btn.GetID == 10 && !string.IsNullOrEmpty (noLabel))  				// No button  				btn.Label = noLabel;  		}  	}  	dlgYesNo.DoModal (GUIWindowManager.ActiveWindow);  	return dlgYesNo.IsConfirmed;  } finally {  	// set the standard yes/no dialog back to it's original state (yes/no buttons)  	if (dlgYesNo != null) {  		dlgYesNo.ClearAll ();  	}  }  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: if (linesArray.Length > 1)  	dlgYesNo.SetLine (2' linesArray [1]);  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: dlgYesNo.SetLine (2' linesArray [1]);  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: if (linesArray.Length > 2)  	dlgYesNo.SetLine (3' linesArray [2]);  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: if (linesArray.Length > 2)  	dlgYesNo.SetLine (3' linesArray [2]);  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: if (linesArray.Length > 2)  	dlgYesNo.SetLine (3' linesArray [2]);  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: dlgYesNo.SetLine (3' linesArray [2]);  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: dlgYesNo.SetLine (3' linesArray [2]);  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: if (linesArray.Length > 3)  	dlgYesNo.SetLine (4' linesArray [3]);  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: if (linesArray.Length > 3)  	dlgYesNo.SetLine (4' linesArray [3]);  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: if (linesArray.Length > 3)  	dlgYesNo.SetLine (4' linesArray [3]);  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: dlgYesNo.SetLine (4' linesArray [3]);  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: dlgYesNo.SetLine (4' linesArray [3]);  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: foreach (GUIControl item in dlgYesNo.GetControlList ()) {  	if (item is GUIButtonControl) {  		GUIButtonControl btn = (GUIButtonControl)item;  		if (btn.GetID == 11 && !string.IsNullOrEmpty (yesLabel))  			// Yes button  			btn.Label = yesLabel;  		else if (btn.GetID == 10 && !string.IsNullOrEmpty (noLabel))  			// No button  			btn.Label = noLabel;  	}  }  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: foreach (GUIControl item in dlgYesNo.GetControlList ()) {  	if (item is GUIButtonControl) {  		GUIButtonControl btn = (GUIButtonControl)item;  		if (btn.GetID == 11 && !string.IsNullOrEmpty (yesLabel))  			// Yes button  			btn.Label = yesLabel;  		else if (btn.GetID == 10 && !string.IsNullOrEmpty (noLabel))  			// No button  			btn.Label = noLabel;  	}  }  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: if (item is GUIButtonControl) {  	GUIButtonControl btn = (GUIButtonControl)item;  	if (btn.GetID == 11 && !string.IsNullOrEmpty (yesLabel))  		// Yes button  		btn.Label = yesLabel;  	else if (btn.GetID == 10 && !string.IsNullOrEmpty (noLabel))  		// No button  		btn.Label = noLabel;  }  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: if (item is GUIButtonControl) {  	GUIButtonControl btn = (GUIButtonControl)item;  	if (btn.GetID == 11 && !string.IsNullOrEmpty (yesLabel))  		// Yes button  		btn.Label = yesLabel;  	else if (btn.GetID == 10 && !string.IsNullOrEmpty (noLabel))  		// No button  		btn.Label = noLabel;  }  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: if (btn.GetID == 11 && !string.IsNullOrEmpty (yesLabel))  	// Yes button  	btn.Label = yesLabel;  else if (btn.GetID == 10 && !string.IsNullOrEmpty (noLabel))  	// No button  	btn.Label = noLabel;  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: if (btn.GetID == 11 && !string.IsNullOrEmpty (yesLabel))  	// Yes button  	btn.Label = yesLabel;  else if (btn.GetID == 10 && !string.IsNullOrEmpty (noLabel))  	// No button  	btn.Label = noLabel;  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowCustomYesNoDialog,The following statement contains a magic number: if (btn.GetID == 10 && !string.IsNullOrEmpty (noLabel))  	// No button  	btn.Label = noLabel;  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowOKDialog,The following statement contains a magic number: for (int i = lineid; i <= 4; i++)  	dlgOK.SetLine (i' string.Empty);  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowNotifyDialog,The following statement contains a magic number: try {  	pDlgNotify.Reset ();  	pDlgNotify.SetHeading (heading);  	pDlgNotify.SetImage (image);  	pDlgNotify.SetText (text);  	if (timeout >= 0)  		pDlgNotify.TimeOut = timeout;  	foreach (GUIControl item in pDlgNotify.GetControlList ()) {  		if (item is GUIButtonControl) {  			GUIButtonControl btn = (GUIButtonControl)item;  			if (btn.GetID == 4 && !string.IsNullOrEmpty (buttonText) && !string.IsNullOrEmpty (btn.Label)) {  				// Only if ID is 4 and we have our custom text and if button already has label (in case the skin "hides" the button by emtying the label)  				btn.Label = buttonText;  			}  		}  	}  	pDlgNotify.DoModal (GUIWindowManager.ActiveWindow);  } finally {  	if (pDlgNotify != null)  		pDlgNotify.ClearAll ();  }  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowNotifyDialog,The following statement contains a magic number: foreach (GUIControl item in pDlgNotify.GetControlList ()) {  	if (item is GUIButtonControl) {  		GUIButtonControl btn = (GUIButtonControl)item;  		if (btn.GetID == 4 && !string.IsNullOrEmpty (buttonText) && !string.IsNullOrEmpty (btn.Label)) {  			// Only if ID is 4 and we have our custom text and if button already has label (in case the skin "hides" the button by emtying the label)  			btn.Label = buttonText;  		}  	}  }  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowNotifyDialog,The following statement contains a magic number: if (item is GUIButtonControl) {  	GUIButtonControl btn = (GUIButtonControl)item;  	if (btn.GetID == 4 && !string.IsNullOrEmpty (buttonText) && !string.IsNullOrEmpty (btn.Label)) {  		// Only if ID is 4 and we have our custom text and if button already has label (in case the skin "hides" the button by emtying the label)  		btn.Label = buttonText;  	}  }  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowNotifyDialog,The following statement contains a magic number: if (btn.GetID == 4 && !string.IsNullOrEmpty (buttonText) && !string.IsNullOrEmpty (btn.Label)) {  	// Only if ID is 4 and we have our custom text and if button already has label (in case the skin "hides" the button by emtying the label)  	btn.Label = buttonText;  }  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowMultiSelectionDialog,The following statement contains a magic number: GUIWindowManager.Replace (2100' dlgMultiSelect);  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowMultiSelectionDialog,The following statement contains a magic number: try {  	dlgMultiSelect.Reset ();  	dlgMultiSelect.SetHeading (heading);  	foreach (MultiSelectionItem multiSelectionItem in items) {  		GUIListItem item = new GUIListItem ();  		item.Label = multiSelectionItem.ItemTitle;  		item.Label2 = multiSelectionItem.ItemTitle2;  		item.MusicTag = multiSelectionItem.Tag;  		item.TVTag = multiSelectionItem.IsToggle;  		item.Selected = multiSelectionItem.Selected;  		dlgMultiSelect.Add (item);  	}  	dlgMultiSelect.DoModal (GUIWindowManager.ActiveWindow);  	if (dlgMultiSelect.DialogModalResult == ModalResult.OK) {  		for (int i = 0; i < items.Count; i++) {  			MultiSelectionItem item = items [i];  			MultiSelectionItem newMultiSelectionItem = new MultiSelectionItem ();  			newMultiSelectionItem.ItemTitle = item.ItemTitle;  			newMultiSelectionItem.ItemTitle2 = item.ItemTitle2;  			newMultiSelectionItem.ItemID = item.ItemID;  			newMultiSelectionItem.Tag = item.Tag;  			try {  				newMultiSelectionItem.Selected = dlgMultiSelect.ListItems [i].Selected;  			} catch {  				newMultiSelectionItem.Selected = item.Selected;  			}  			result.Add (newMultiSelectionItem);  		}  	} else  		return null;  	return result;  } finally {  	GUIWindowManager.Replace (2100' dlgMultiSelectOld);  }  
Magic Number,TraktPlugin.GUI,GUIUtils,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUtils.cs,ShowMultiSelectionDialog,The following statement contains a magic number: GUIWindowManager.Replace (2100' dlgMultiSelectOld);  
Magic Number,TraktPlugin.Extensions,DateExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\DateExtensions.cs,ToPrettyTime,The following statement contains a magic number: if (span.TotalDays >= 1) {  	return string.Format ("{0} day{1}' {2} hour{3} and {4} minute{5}"' span.Days' span.Days > 1 ? "s" : ""' span.Hours' span.Hours != 1 ? "s" : ""' span.Minutes' span.Minutes != 1 ? "s" : "");  } else if (span.TotalHours >= 1) {  	return string.Format ("{0} hour{1}' {2} minute{3} and {4} second{5}"' span.Hours' span.Hours > 1 ? "s" : ""' span.Minutes' span.Minutes != 1 ? "s" : ""' span.Seconds' span.Seconds != 1 ? "s" : "");  } else if (span.TotalMinutes >= 1) {  	return string.Format ("{0} minute{1} and {2} second{3}"' span.Minutes' span.Minutes > 1 ? "s" : ""' span.Seconds' span.Seconds != 1 ? "s" : "");  } else {  	return string.Format ("{0} seconds"' Math.Round (span.TotalSeconds' 3));  }  
Magic Number,TraktPlugin.Extensions,DateExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\DateExtensions.cs,ToPrettyTime,The following statement contains a magic number: if (span.TotalHours >= 1) {  	return string.Format ("{0} hour{1}' {2} minute{3} and {4} second{5}"' span.Hours' span.Hours > 1 ? "s" : ""' span.Minutes' span.Minutes != 1 ? "s" : ""' span.Seconds' span.Seconds != 1 ? "s" : "");  } else if (span.TotalMinutes >= 1) {  	return string.Format ("{0} minute{1} and {2} second{3}"' span.Minutes' span.Minutes > 1 ? "s" : ""' span.Seconds' span.Seconds != 1 ? "s" : "");  } else {  	return string.Format ("{0} seconds"' Math.Round (span.TotalSeconds' 3));  }  
Magic Number,TraktPlugin.Extensions,DateExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\DateExtensions.cs,ToPrettyTime,The following statement contains a magic number: if (span.TotalMinutes >= 1) {  	return string.Format ("{0} minute{1} and {2} second{3}"' span.Minutes' span.Minutes > 1 ? "s" : ""' span.Seconds' span.Seconds != 1 ? "s" : "");  } else {  	return string.Format ("{0} seconds"' Math.Round (span.TotalSeconds' 3));  }  
Magic Number,TraktPlugin.Extensions,DateExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\DateExtensions.cs,ToPrettyTime,The following statement contains a magic number: return string.Format ("{0} seconds"' Math.Round (span.TotalSeconds' 3));  
Magic Number,TraktPlugin.Extensions,DateExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\DateExtensions.cs,ToPrettyDateTime,The following statement contains a magic number: if (dateTimestamp.ToLocalTime ().Date == DateTime.Today) {  	return dateTimestamp.ToShortTimeString ();  } else if (dateTimestamp.ToLocalTime ().Date >= DateTime.Today.AddDays (-7)) {  	return dateTimestamp.ToLocalTime ().DayOfWeek.ToShortDayName () + "' " + dateTimestamp.ToLocalTime ().ToShortTimeString ();  } else if (dateTimestamp.ToLocalTime ().Date < DateTime.Today.AddDays (-7)) {  	return dateTimestamp.ToLocalTime ().ToShortDateString ();  }  
Magic Number,TraktPlugin.Extensions,DateExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\DateExtensions.cs,ToPrettyDateTime,The following statement contains a magic number: if (dateTimestamp.ToLocalTime ().Date == DateTime.Today) {  	return dateTimestamp.ToShortTimeString ();  } else if (dateTimestamp.ToLocalTime ().Date >= DateTime.Today.AddDays (-7)) {  	return dateTimestamp.ToLocalTime ().DayOfWeek.ToShortDayName () + "' " + dateTimestamp.ToLocalTime ().ToShortTimeString ();  } else if (dateTimestamp.ToLocalTime ().Date < DateTime.Today.AddDays (-7)) {  	return dateTimestamp.ToLocalTime ().ToShortDateString ();  }  
Magic Number,TraktPlugin.Extensions,DateExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\DateExtensions.cs,ToPrettyDateTime,The following statement contains a magic number: if (dateTimestamp.ToLocalTime ().Date >= DateTime.Today.AddDays (-7)) {  	return dateTimestamp.ToLocalTime ().DayOfWeek.ToShortDayName () + "' " + dateTimestamp.ToLocalTime ().ToShortTimeString ();  } else if (dateTimestamp.ToLocalTime ().Date < DateTime.Today.AddDays (-7)) {  	return dateTimestamp.ToLocalTime ().ToShortDateString ();  }  
Magic Number,TraktPlugin.Extensions,DateExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\DateExtensions.cs,ToPrettyDateTime,The following statement contains a magic number: if (dateTimestamp.ToLocalTime ().Date >= DateTime.Today.AddDays (-7)) {  	return dateTimestamp.ToLocalTime ().DayOfWeek.ToShortDayName () + "' " + dateTimestamp.ToLocalTime ().ToShortTimeString ();  } else if (dateTimestamp.ToLocalTime ().Date < DateTime.Today.AddDays (-7)) {  	return dateTimestamp.ToLocalTime ().ToShortDateString ();  }  
Magic Number,TraktPlugin.Extensions,DateExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\DateExtensions.cs,ToPrettyDateTime,The following statement contains a magic number: if (dateTimestamp.ToLocalTime ().Date < DateTime.Today.AddDays (-7)) {  	return dateTimestamp.ToLocalTime ().ToShortDateString ();  }  
Magic Number,TraktPlugin.Extensions,SecurityExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\SecurityExtensions.cs,Encrypt,The following statement contains a magic number: try {  	byte[] plainTextBytes = Encoding.UTF8.GetBytes (plainText);  	using (PasswordDeriveBytes password = new PasswordDeriveBytes (passPhrase' null)) {  		byte[] keyBytes = password.GetBytes (keysize / 8);  		using (RijndaelManaged symmetricKey = new RijndaelManaged ()) {  			symmetricKey.Mode = CipherMode.CBC;  			using (ICryptoTransform encryptor = symmetricKey.CreateEncryptor (keyBytes' initVectorBytes)) {  				using (MemoryStream memoryStream = new MemoryStream ()) {  					using (CryptoStream cryptoStream = new CryptoStream (memoryStream' encryptor' CryptoStreamMode.Write)) {  						cryptoStream.Write (plainTextBytes' 0' plainTextBytes.Length);  						cryptoStream.FlushFinalBlock ();  						byte[] cipherTextBytes = memoryStream.ToArray ();  						return Convert.ToBase64String (cipherTextBytes);  					}  				}  			}  		}  	}  } catch (Exception ex) {  	TraktLogger.Warning ("Failed to encyrpt password!. Reason = '{0}'"' ex.Message);  	return null;  }  
Magic Number,TraktPlugin.Extensions,SecurityExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\SecurityExtensions.cs,Encrypt,The following statement contains a magic number: using (PasswordDeriveBytes password = new PasswordDeriveBytes (passPhrase' null)) {  	byte[] keyBytes = password.GetBytes (keysize / 8);  	using (RijndaelManaged symmetricKey = new RijndaelManaged ()) {  		symmetricKey.Mode = CipherMode.CBC;  		using (ICryptoTransform encryptor = symmetricKey.CreateEncryptor (keyBytes' initVectorBytes)) {  			using (MemoryStream memoryStream = new MemoryStream ()) {  				using (CryptoStream cryptoStream = new CryptoStream (memoryStream' encryptor' CryptoStreamMode.Write)) {  					cryptoStream.Write (plainTextBytes' 0' plainTextBytes.Length);  					cryptoStream.FlushFinalBlock ();  					byte[] cipherTextBytes = memoryStream.ToArray ();  					return Convert.ToBase64String (cipherTextBytes);  				}  			}  		}  	}  }  
Magic Number,TraktPlugin.Extensions,SecurityExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\SecurityExtensions.cs,Decrypt,The following statement contains a magic number: try {  	byte[] cipherTextBytes = Convert.FromBase64String (cipherText);  	using (PasswordDeriveBytes password = new PasswordDeriveBytes (passPhrase' null)) {  		byte[] keyBytes = password.GetBytes (keysize / 8);  		using (RijndaelManaged symmetricKey = new RijndaelManaged ()) {  			symmetricKey.Mode = CipherMode.CBC;  			using (ICryptoTransform decryptor = symmetricKey.CreateDecryptor (keyBytes' initVectorBytes)) {  				using (MemoryStream memoryStream = new MemoryStream (cipherTextBytes)) {  					using (CryptoStream cryptoStream = new CryptoStream (memoryStream' decryptor' CryptoStreamMode.Read)) {  						byte[] plainTextBytes = new byte[cipherTextBytes.Length];  						int decryptedByteCount = cryptoStream.Read (plainTextBytes' 0' plainTextBytes.Length);  						return Encoding.UTF8.GetString (plainTextBytes' 0' decryptedByteCount);  					}  				}  			}  		}  	}  } catch (Exception ex) {  	TraktLogger.Warning ("Failed to decyrpt password!. Reason = '{0}'"' ex.Message);  	return null;  }  
Magic Number,TraktPlugin.Extensions,SecurityExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\SecurityExtensions.cs,Decrypt,The following statement contains a magic number: using (PasswordDeriveBytes password = new PasswordDeriveBytes (passPhrase' null)) {  	byte[] keyBytes = password.GetBytes (keysize / 8);  	using (RijndaelManaged symmetricKey = new RijndaelManaged ()) {  		symmetricKey.Mode = CipherMode.CBC;  		using (ICryptoTransform decryptor = symmetricKey.CreateDecryptor (keyBytes' initVectorBytes)) {  			using (MemoryStream memoryStream = new MemoryStream (cipherTextBytes)) {  				using (CryptoStream cryptoStream = new CryptoStream (memoryStream' decryptor' CryptoStreamMode.Read)) {  					byte[] plainTextBytes = new byte[cipherTextBytes.Length];  					int decryptedByteCount = cryptoStream.Read (plainTextBytes' 0' plainTextBytes.Length);  					return Encoding.UTF8.GetString (plainTextBytes' 0' decryptedByteCount);  				}  			}  		}  	}  }  
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,ToSlug,The following statement contains a magic number: s = s.Substring (0' s.Length <= 45 ? s.Length : 45).Trim ();  
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,ToSlug,The following statement contains a magic number: s = s.Substring (0' s.Length <= 45 ? s.Length : 45).Trim ();  
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace (((char)8211).ToString ()' "--");  
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace (((char)8212).ToString ()' "---");  
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace ((char)8216' '\'');  
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace ((char)8217' '\'');  
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace ((char)8220' '"');  
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace ((char)8221' '"');  
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace ((char)8223' '"');  
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace ((char)8226' '*');  
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace (((char)8230).ToString ()' "...");  
Magic Number,TraktPlugin.Extensions,StringExtensions,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Extensions\StringExtensions.cs,RemapHighOrderChars,The following statement contains a magic number: input = input.Replace (((char)8482).ToString ()' string.Empty);  
Magic Number,TraktPlugin.TmdbAPI,TmdbAPI,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TmdbAPI\TmdbAPI.cs,GetFromTmdb,The following statement contains a magic number: if (delayRequest > 0)  	Thread.Sleep (1000 + delayRequest);  
Magic Number,TraktPlugin.TmdbAPI,TmdbAPI,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TmdbAPI\TmdbAPI.cs,GetFromTmdb,The following statement contains a magic number: Thread.Sleep (1000 + delayRequest);  
Magic Number,TraktPlugin.TmdbAPI,TmdbAPI,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TmdbAPI\TmdbAPI.cs,GetFromTmdb,The following statement contains a magic number: request.Timeout = 120000;  
Magic Number,TraktPlugin.TmdbAPI,TmdbAPI,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TmdbAPI\TmdbAPI.cs,GetFromTmdb,The following statement contains a magic number: try {  	HttpWebResponse response = (HttpWebResponse)request.GetResponse ();  	if (response == null)  		return null;  	Stream stream = response.GetResponseStream ();  	StreamReader reader = new StreamReader (stream);  	strResponse = reader.ReadToEnd ();  	headerCollection = response.Headers;  	if (OnDataReceived != null)  		OnDataReceived (strResponse' response);  	stream.Close ();  	reader.Close ();  	response.Close ();  } catch (WebException wex) {  	string errorMessage = wex.Message;  	if (wex.Status == WebExceptionStatus.ProtocolError) {  		var response = wex.Response as HttpWebResponse;  		string headers = string.Empty;  		foreach (string key in response.Headers.AllKeys) {  			headers += string.Format ("{0}: {1}' "' key' response.Headers [key]);  		}  		errorMessage = string.Format ("Protocol Error' Code = '{0}'' Description = '{1}'' Url = '{2}'' Headers = '{3}'"' (int)response.StatusCode' response.StatusDescription' address' headers.TrimEnd (new char[] {  			''''  			' '  		}));  		// check if we got a 429 error code  		// https://developers.themoviedb.org/3/getting-started/request-rate-limiting  		if ((int)response.StatusCode == 429) {  			int retry = 0;  			int.TryParse (response.Headers ["Retry-After"]' out retry);  			errorMessage = string.Format ("Request Rate Limiting is in effect' retrying request in {0} seconds. Url = '{1}'"' retry' address);  			if (OnDataError != null)  				OnDataError (errorMessage);  			return GetFromTmdb (address' retry * 1000);  		}  	}  	if (OnDataError != null)  		OnDataError (errorMessage);  	strResponse = null;  } catch (IOException ioe) {  	string errorMessage = string.Format ("Request failed due to an IO error' Description = '{0}'' Url = '{1}'' Method = 'GET'"' ioe.Message' address);  	if (OnDataError != null)  		OnDataError (ioe.Message);  	strResponse = null;  }  
Magic Number,TraktPlugin.TmdbAPI,TmdbAPI,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TmdbAPI\TmdbAPI.cs,GetFromTmdb,The following statement contains a magic number: try {  	HttpWebResponse response = (HttpWebResponse)request.GetResponse ();  	if (response == null)  		return null;  	Stream stream = response.GetResponseStream ();  	StreamReader reader = new StreamReader (stream);  	strResponse = reader.ReadToEnd ();  	headerCollection = response.Headers;  	if (OnDataReceived != null)  		OnDataReceived (strResponse' response);  	stream.Close ();  	reader.Close ();  	response.Close ();  } catch (WebException wex) {  	string errorMessage = wex.Message;  	if (wex.Status == WebExceptionStatus.ProtocolError) {  		var response = wex.Response as HttpWebResponse;  		string headers = string.Empty;  		foreach (string key in response.Headers.AllKeys) {  			headers += string.Format ("{0}: {1}' "' key' response.Headers [key]);  		}  		errorMessage = string.Format ("Protocol Error' Code = '{0}'' Description = '{1}'' Url = '{2}'' Headers = '{3}'"' (int)response.StatusCode' response.StatusDescription' address' headers.TrimEnd (new char[] {  			''''  			' '  		}));  		// check if we got a 429 error code  		// https://developers.themoviedb.org/3/getting-started/request-rate-limiting  		if ((int)response.StatusCode == 429) {  			int retry = 0;  			int.TryParse (response.Headers ["Retry-After"]' out retry);  			errorMessage = string.Format ("Request Rate Limiting is in effect' retrying request in {0} seconds. Url = '{1}'"' retry' address);  			if (OnDataError != null)  				OnDataError (errorMessage);  			return GetFromTmdb (address' retry * 1000);  		}  	}  	if (OnDataError != null)  		OnDataError (errorMessage);  	strResponse = null;  } catch (IOException ioe) {  	string errorMessage = string.Format ("Request failed due to an IO error' Description = '{0}'' Url = '{1}'' Method = 'GET'"' ioe.Message' address);  	if (OnDataError != null)  		OnDataError (ioe.Message);  	strResponse = null;  }  
Magic Number,TraktPlugin.TmdbAPI,TmdbAPI,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TmdbAPI\TmdbAPI.cs,GetFromTmdb,The following statement contains a magic number: if (wex.Status == WebExceptionStatus.ProtocolError) {  	var response = wex.Response as HttpWebResponse;  	string headers = string.Empty;  	foreach (string key in response.Headers.AllKeys) {  		headers += string.Format ("{0}: {1}' "' key' response.Headers [key]);  	}  	errorMessage = string.Format ("Protocol Error' Code = '{0}'' Description = '{1}'' Url = '{2}'' Headers = '{3}'"' (int)response.StatusCode' response.StatusDescription' address' headers.TrimEnd (new char[] {  		''''  		' '  	}));  	// check if we got a 429 error code  	// https://developers.themoviedb.org/3/getting-started/request-rate-limiting  	if ((int)response.StatusCode == 429) {  		int retry = 0;  		int.TryParse (response.Headers ["Retry-After"]' out retry);  		errorMessage = string.Format ("Request Rate Limiting is in effect' retrying request in {0} seconds. Url = '{1}'"' retry' address);  		if (OnDataError != null)  			OnDataError (errorMessage);  		return GetFromTmdb (address' retry * 1000);  	}  }  
Magic Number,TraktPlugin.TmdbAPI,TmdbAPI,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TmdbAPI\TmdbAPI.cs,GetFromTmdb,The following statement contains a magic number: if (wex.Status == WebExceptionStatus.ProtocolError) {  	var response = wex.Response as HttpWebResponse;  	string headers = string.Empty;  	foreach (string key in response.Headers.AllKeys) {  		headers += string.Format ("{0}: {1}' "' key' response.Headers [key]);  	}  	errorMessage = string.Format ("Protocol Error' Code = '{0}'' Description = '{1}'' Url = '{2}'' Headers = '{3}'"' (int)response.StatusCode' response.StatusDescription' address' headers.TrimEnd (new char[] {  		''''  		' '  	}));  	// check if we got a 429 error code  	// https://developers.themoviedb.org/3/getting-started/request-rate-limiting  	if ((int)response.StatusCode == 429) {  		int retry = 0;  		int.TryParse (response.Headers ["Retry-After"]' out retry);  		errorMessage = string.Format ("Request Rate Limiting is in effect' retrying request in {0} seconds. Url = '{1}'"' retry' address);  		if (OnDataError != null)  			OnDataError (errorMessage);  		return GetFromTmdb (address' retry * 1000);  	}  }  
Magic Number,TraktPlugin.TmdbAPI,TmdbAPI,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TmdbAPI\TmdbAPI.cs,GetFromTmdb,The following statement contains a magic number: if ((int)response.StatusCode == 429) {  	int retry = 0;  	int.TryParse (response.Headers ["Retry-After"]' out retry);  	errorMessage = string.Format ("Request Rate Limiting is in effect' retrying request in {0} seconds. Url = '{1}'"' retry' address);  	if (OnDataError != null)  		OnDataError (errorMessage);  	return GetFromTmdb (address' retry * 1000);  }  
Magic Number,TraktPlugin.TmdbAPI,TmdbAPI,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TmdbAPI\TmdbAPI.cs,GetFromTmdb,The following statement contains a magic number: if ((int)response.StatusCode == 429) {  	int retry = 0;  	int.TryParse (response.Headers ["Retry-After"]' out retry);  	errorMessage = string.Format ("Request Rate Limiting is in effect' retrying request in {0} seconds. Url = '{1}'"' retry' address);  	if (OnDataError != null)  		OnDataError (errorMessage);  	return GetFromTmdb (address' retry * 1000);  }  
Magic Number,TraktPlugin.TmdbAPI,TmdbAPI,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TmdbAPI\TmdbAPI.cs,GetFromTmdb,The following statement contains a magic number: return GetFromTmdb (address' retry * 1000);  
Magic Number,TraktPlugin.TraktHandlers,ArgusTVRecordings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusRecordings.cs,StopScrobble,The following statement contains a magic number: if (g_Player.Duration > 0.0)  	progress = Math.Round ((g_Player.CurrentPosition / g_Player.Duration) * 100.0' 2);  
Magic Number,TraktPlugin.TraktHandlers,ArgusTVRecordings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusRecordings.cs,StopScrobble,The following statement contains a magic number: if (g_Player.Duration > 0.0)  	progress = Math.Round ((g_Player.CurrentPosition / g_Player.Duration) * 100.0' 2);  
Magic Number,TraktPlugin.TraktHandlers,ArgusTVRecordings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusRecordings.cs,StopScrobble,The following statement contains a magic number: progress = Math.Round ((g_Player.CurrentPosition / g_Player.Duration) * 100.0' 2);  
Magic Number,TraktPlugin.TraktHandlers,ArgusTVRecordings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusRecordings.cs,StopScrobble,The following statement contains a magic number: progress = Math.Round ((g_Player.CurrentPosition / g_Player.Duration) * 100.0' 2);  
Magic Number,TraktPlugin.TraktHandlers,ArgusTVRecordings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusRecordings.cs,StopScrobble,The following statement contains a magic number: TraktLogger.Info ("Video recording has stopped' checking progress. Title = '{0}'' Current Position = '{1}'' Duration = '{2}'' Progress = '{3}%'"' CurrentRecording.Title' g_Player.CurrentPosition.ToString ()' g_Player.Duration.ToString ()' progress > 100.0 ? "100" : progress.ToString ());  
Magic Number,TraktPlugin.TraktHandlers,ArgusTVRecordings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusRecordings.cs,StopScrobble,The following statement contains a magic number: if (progress == 0.0 || progress >= 80.0) {  	watched = true;  	// Show rate dialog  	BasicHandler.ShowRateDialog (CurrentRecording);  }  
Magic Number,TraktPlugin.TraktHandlers,ArgusTVLive,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusTVLive.cs,Scrobble,The following statement contains a magic number: TraktTimer = new Timer (new TimerCallback (stateInfo => {  	Thread.CurrentThread.Name = "Scrobble";  	// get the current program airing on tv now  	// this may have changed since last status update on trakt  	VideoInfo videoInfo = GetCurrentProgram ();  	if (videoInfo != null) {  		// if we are watching something different'   		// check if we should mark previous as watched  		if (!videoInfo.Equals (CurrentProgram)) {  			TraktLogger.Info ("Detected new tv program has started. Previous Program =  '{0}'' New Program = '{1}'"' CurrentProgram.ToString ()' videoInfo.ToString ());  			if (IsProgramWatched (CurrentProgram) && CurrentProgram.IsScrobbling) {  				TraktLogger.Info ("Playback of program on Live TV is considered watched. Title = '{0}'"' CurrentProgram.ToString ());  				BasicHandler.StopScrobble (CurrentProgram' true);  			}  			CurrentProgram.IsScrobbling = true;  		}  		// continue watching new program  		// dont try to scrobble if previous attempt failed  		if (CurrentProgram.IsScrobbling) {  			if (videoInfo.Type == VideoType.Series) {  				videoInfo.IsScrobbling = BasicHandler.StartScrobbleEpisode (videoInfo);  			} else {  				videoInfo.IsScrobbling = BasicHandler.StartScrobbleMovie (videoInfo);  			}  			// set current program to new program  			CurrentProgram = videoInfo;  		}  	}  })' null' 1000' 300000);  
Magic Number,TraktPlugin.TraktHandlers,ArgusTVLive,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusTVLive.cs,Scrobble,The following statement contains a magic number: TraktTimer = new Timer (new TimerCallback (stateInfo => {  	Thread.CurrentThread.Name = "Scrobble";  	// get the current program airing on tv now  	// this may have changed since last status update on trakt  	VideoInfo videoInfo = GetCurrentProgram ();  	if (videoInfo != null) {  		// if we are watching something different'   		// check if we should mark previous as watched  		if (!videoInfo.Equals (CurrentProgram)) {  			TraktLogger.Info ("Detected new tv program has started. Previous Program =  '{0}'' New Program = '{1}'"' CurrentProgram.ToString ()' videoInfo.ToString ());  			if (IsProgramWatched (CurrentProgram) && CurrentProgram.IsScrobbling) {  				TraktLogger.Info ("Playback of program on Live TV is considered watched. Title = '{0}'"' CurrentProgram.ToString ());  				BasicHandler.StopScrobble (CurrentProgram' true);  			}  			CurrentProgram.IsScrobbling = true;  		}  		// continue watching new program  		// dont try to scrobble if previous attempt failed  		if (CurrentProgram.IsScrobbling) {  			if (videoInfo.Type == VideoType.Series) {  				videoInfo.IsScrobbling = BasicHandler.StartScrobbleEpisode (videoInfo);  			} else {  				videoInfo.IsScrobbling = BasicHandler.StartScrobbleMovie (videoInfo);  			}  			// set current program to new program  			CurrentProgram = videoInfo;  		}  	}  })' null' 1000' 300000);  
Magic Number,TraktPlugin.TraktHandlers,ArgusTVLive,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\ArgusTVLive.cs,IsProgramWatched,The following statement contains a magic number: return percentPlayed >= 0.8;  
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,MyFilmsHandler,The following statement contains a magic number: if (!File.Exists (pluginFilename))  	throw new FileNotFoundException ("Plugin not found!");  else {  	FileVersionInfo fvi = FileVersionInfo.GetVersionInfo (pluginFilename);  	string version = fvi.ProductVersion;  	if (new Version (version) < new Version (6' 1' 2' 1469))  		throw new FileLoadException ("Plugin does not meet the minimum requirements' check you have the latest version installed!");  }  
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,MyFilmsHandler,The following statement contains a magic number: if (!File.Exists (pluginFilename))  	throw new FileNotFoundException ("Plugin not found!");  else {  	FileVersionInfo fvi = FileVersionInfo.GetVersionInfo (pluginFilename);  	string version = fvi.ProductVersion;  	if (new Version (version) < new Version (6' 1' 2' 1469))  		throw new FileLoadException ("Plugin does not meet the minimum requirements' check you have the latest version installed!");  }  
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,MyFilmsHandler,The following statement contains a magic number: if (!File.Exists (pluginFilename))  	throw new FileNotFoundException ("Plugin not found!");  else {  	FileVersionInfo fvi = FileVersionInfo.GetVersionInfo (pluginFilename);  	string version = fvi.ProductVersion;  	if (new Version (version) < new Version (6' 1' 2' 1469))  		throw new FileLoadException ("Plugin does not meet the minimum requirements' check you have the latest version installed!");  }  
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,MyFilmsHandler,The following statement contains a magic number: if (new Version (version) < new Version (6' 1' 2' 1469))  	throw new FileLoadException ("Plugin does not meet the minimum requirements' check you have the latest version installed!");  
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,MyFilmsHandler,The following statement contains a magic number: if (new Version (version) < new Version (6' 1' 2' 1469))  	throw new FileLoadException ("Plugin does not meet the minimum requirements' check you have the latest version installed!");  
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,MyFilmsHandler,The following statement contains a magic number: if (new Version (version) < new Version (6' 1' 2' 1469))  	throw new FileLoadException ("Plugin does not meet the minimum requirements' check you have the latest version installed!");  
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,CreateScrobbleData,The following statement contains a magic number: if (duration > 0.0)  	progress = (g_Player.CurrentPosition / duration) * 100.0;  
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,CreateScrobbleData,The following statement contains a magic number: progress = (g_Player.CurrentPosition / duration) * 100.0;  
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnWatchedMovie,The following statement contains a magic number: if (!TraktSettings.BlockedFilenames.Contains (movie.File) && !TraktSettings.BlockedFolders.Any (f => movie.File.ToLowerInvariant ().Contains (f.ToLowerInvariant ()))) {  	TraktLogger.Info ("My Films movie considered watched. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>");  	// show trakt rating dialog  	ShowRateDialog (movie);  	// no longer need movie in recommendations or watchlist  	RemoveMovieFromRecommendations (movie);  	RemoveMovieFromWatchlist (movie);  	// stop scrobbling  	var scrobbleData = CreateScrobbleData (movie);  	var stopScrobble = new Thread (objScrobble => {  		var tScrobbleData = objScrobble as TraktScrobbleMovie;  		if (tScrobbleData == null)  			return;  		// check progress is enough to mark as watched online  		if (tScrobbleData.Progress < 80)  			tScrobbleData.Progress = 100;  		var response = TraktAPI.TraktAPI.StopMovieScrobble (tScrobbleData);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Movie != null && response.Action == "scrobble") {  			// add to cache  			TraktCache.AddMovieToWatchHistory (response.Movie);  		}  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	stopScrobble.Start (scrobbleData);  }  
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnWatchedMovie,The following statement contains a magic number: if (!TraktSettings.BlockedFilenames.Contains (movie.File) && !TraktSettings.BlockedFolders.Any (f => movie.File.ToLowerInvariant ().Contains (f.ToLowerInvariant ()))) {  	TraktLogger.Info ("My Films movie considered watched. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.IMDBNumber ?? "<empty>"' movie.TMDBNumber ?? "<empty>");  	// show trakt rating dialog  	ShowRateDialog (movie);  	// no longer need movie in recommendations or watchlist  	RemoveMovieFromRecommendations (movie);  	RemoveMovieFromWatchlist (movie);  	// stop scrobbling  	var scrobbleData = CreateScrobbleData (movie);  	var stopScrobble = new Thread (objScrobble => {  		var tScrobbleData = objScrobble as TraktScrobbleMovie;  		if (tScrobbleData == null)  			return;  		// check progress is enough to mark as watched online  		if (tScrobbleData.Progress < 80)  			tScrobbleData.Progress = 100;  		var response = TraktAPI.TraktAPI.StopMovieScrobble (tScrobbleData);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Movie != null && response.Action == "scrobble") {  			// add to cache  			TraktCache.AddMovieToWatchHistory (response.Movie);  		}  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	stopScrobble.Start (scrobbleData);  }  
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnWatchedMovie,The following statement contains a magic number: if (tScrobbleData.Progress < 80)  	tScrobbleData.Progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnWatchedMovie,The following statement contains a magic number: if (tScrobbleData.Progress < 80)  	tScrobbleData.Progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnWatchedMovie,The following statement contains a magic number: tScrobbleData.Progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnImportComplete,The following statement contains a magic number: while (SyncInProgress) {  	// only do one sync at a time  	TraktLogger.Debug ("My Films sync still in progress' waiting to complete. Trying again in 60 secs");  	Thread.Sleep (60000);  }  
Magic Number,TraktPlugin.TraktHandlers,MyFilmsHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyFilms.cs,OnImportComplete,The following statement contains a magic number: Thread.Sleep (60000);  
Magic Number,TraktPlugin.TraktHandlers,MyTVLive,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVLive.cs,Scrobble,The following statement contains a magic number: TraktTimer = new Timer (new TimerCallback (stateInfo => {  	Thread.CurrentThread.Name = "Scrobble";  	// get the current program airing on tv now  	// this may have changed since last status update on trakt  	VideoInfo videoInfo = GetCurrentProgram ();  	if (videoInfo != null) {  		// if we are watching something different'   		// check if we should mark previous as watched  		if (!videoInfo.Equals (CurrentProgram)) {  			TraktLogger.Info ("Detected new tv program has started. Previous Program = '{0}'' New Program = '{1}'"' CurrentProgram.ToString ()' videoInfo.ToString ());  			if (IsProgramWatched (CurrentProgram) && CurrentProgram.IsScrobbling) {  				TraktLogger.Info ("Playback of program on Live TV is considered watched. Title = '{0}'"' CurrentProgram.ToString ());  				BasicHandler.StopScrobble (CurrentProgram' true);  			}  			CurrentProgram.IsScrobbling = true;  		}  		// continue watching new program  		// dont try to scrobble if previous attempt failed  		if (CurrentProgram.IsScrobbling) {  			if (videoInfo.Type == VideoType.Series) {  				videoInfo.IsScrobbling = BasicHandler.StartScrobbleEpisode (videoInfo);  			} else {  				videoInfo.IsScrobbling = BasicHandler.StartScrobbleMovie (videoInfo);  			}  			// set current program to new program  			CurrentProgram = videoInfo;  		}  	}  })' null' 1000' 300000);  
Magic Number,TraktPlugin.TraktHandlers,MyTVLive,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVLive.cs,Scrobble,The following statement contains a magic number: TraktTimer = new Timer (new TimerCallback (stateInfo => {  	Thread.CurrentThread.Name = "Scrobble";  	// get the current program airing on tv now  	// this may have changed since last status update on trakt  	VideoInfo videoInfo = GetCurrentProgram ();  	if (videoInfo != null) {  		// if we are watching something different'   		// check if we should mark previous as watched  		if (!videoInfo.Equals (CurrentProgram)) {  			TraktLogger.Info ("Detected new tv program has started. Previous Program = '{0}'' New Program = '{1}'"' CurrentProgram.ToString ()' videoInfo.ToString ());  			if (IsProgramWatched (CurrentProgram) && CurrentProgram.IsScrobbling) {  				TraktLogger.Info ("Playback of program on Live TV is considered watched. Title = '{0}'"' CurrentProgram.ToString ());  				BasicHandler.StopScrobble (CurrentProgram' true);  			}  			CurrentProgram.IsScrobbling = true;  		}  		// continue watching new program  		// dont try to scrobble if previous attempt failed  		if (CurrentProgram.IsScrobbling) {  			if (videoInfo.Type == VideoType.Series) {  				videoInfo.IsScrobbling = BasicHandler.StartScrobbleEpisode (videoInfo);  			} else {  				videoInfo.IsScrobbling = BasicHandler.StartScrobbleMovie (videoInfo);  			}  			// set current program to new program  			CurrentProgram = videoInfo;  		}  	}  })' null' 1000' 300000);  
Magic Number,TraktPlugin.TraktHandlers,MyTVLive,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVLive.cs,IsProgramWatched,The following statement contains a magic number: return percentPlayed >= 0.8;  
Magic Number,TraktPlugin.TraktHandlers,MyTVRecordings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVRecordings.cs,StopScrobble,The following statement contains a magic number: if (g_Player.Duration > 0.0)  	progress = Math.Round ((g_Player.CurrentPosition / g_Player.Duration) * 100.0' 2);  
Magic Number,TraktPlugin.TraktHandlers,MyTVRecordings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVRecordings.cs,StopScrobble,The following statement contains a magic number: if (g_Player.Duration > 0.0)  	progress = Math.Round ((g_Player.CurrentPosition / g_Player.Duration) * 100.0' 2);  
Magic Number,TraktPlugin.TraktHandlers,MyTVRecordings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVRecordings.cs,StopScrobble,The following statement contains a magic number: progress = Math.Round ((g_Player.CurrentPosition / g_Player.Duration) * 100.0' 2);  
Magic Number,TraktPlugin.TraktHandlers,MyTVRecordings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVRecordings.cs,StopScrobble,The following statement contains a magic number: progress = Math.Round ((g_Player.CurrentPosition / g_Player.Duration) * 100.0' 2);  
Magic Number,TraktPlugin.TraktHandlers,MyTVRecordings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVRecordings.cs,StopScrobble,The following statement contains a magic number: TraktLogger.Info ("Video recording has stopped' checking progress. Title = '{0}'' Current Position = '{1}'' Duration = '{2}'' Progress = '{3}%'"' CurrentRecording.Title' g_Player.CurrentPosition.ToString ()' g_Player.Duration.ToString ()' progress > 100.0 ? "100" : progress.ToString ());  
Magic Number,TraktPlugin.TraktHandlers,MyTVRecordings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyTVRecordings.cs,StopScrobble,The following statement contains a magic number: if (progress == 0.0 || progress >= 80.0) {  	watched = true;  	// Show rate dialog  	BasicHandler.ShowRateDialog (CurrentRecording);  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,OnlineVideos,The following statement contains a magic number: if (!File.Exists (pluginFilename)) {  	throw new FileNotFoundException ("Plugin not found!");  } else {  	var fvi = FileVersionInfo.GetVersionInfo (pluginFilename);  	if (new Version (fvi.FileVersion) < new Version (1' 9' 0' 3341)) {  		throw new FileLoadException ("Plugin does not meet the minimum requirements' check you have the latest version installed!");  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,OnlineVideos,The following statement contains a magic number: if (!File.Exists (pluginFilename)) {  	throw new FileNotFoundException ("Plugin not found!");  } else {  	var fvi = FileVersionInfo.GetVersionInfo (pluginFilename);  	if (new Version (fvi.FileVersion) < new Version (1' 9' 0' 3341)) {  		throw new FileLoadException ("Plugin does not meet the minimum requirements' check you have the latest version installed!");  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,OnlineVideos,The following statement contains a magic number: if (new Version (fvi.FileVersion) < new Version (1' 9' 0' 3341)) {  	throw new FileLoadException ("Plugin does not meet the minimum requirements' check you have the latest version installed!");  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,OnlineVideos,The following statement contains a magic number: if (new Version (fvi.FileVersion) < new Version (1' 9' 0' 3341)) {  	throw new FileLoadException ("Plugin does not meet the minimum requirements' check you have the latest version installed!");  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (CurrentVideo != null) {  	// onlinevideos can split videos into multiple parts  	// we only need to handle a pause event if the progress is less than 80%  	double position = g_Player.CurrentPosition;  	double duration = g_Player.Duration;  	if (duration != 0) {  		double progress = position / duration;  		if (progress < 0.8) {  			// send pause event to trakt.tv  			TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  			if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  				var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  				var scrobbleThread = new Thread (objInfo => {  					var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  					TraktLogger.LogTraktResponse (response);  					if (response != null && response.Code == 0) {  						//  add episode paused to cache  						if (response.Action == "pause") {  							TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  						}  					}  				}) {  					IsBackground = true'  					Name = "Scrobble"  				};  				scrobbleThread.Start (scrobbleEpisodeData);  			} else {  				var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  				var scrobbleThread = new Thread (objInfo => {  					var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  					TraktLogger.LogTraktResponse (response);  					if (response != null && response.Code == 0) {  						//  add movie paused to cache  						if (response.Action == "pause") {  							TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  						}  					}  				}) {  					IsBackground = true'  					Name = "Scrobble"  				};  				scrobbleThread.Start (scrobbleMovieData);  			}  		} else {  			// either completely watched or finished watching part of a mult-part file  			TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  		}  	}  	CurrentVideo = null;  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (CurrentVideo != null) {  	// onlinevideos can split videos into multiple parts  	// we only need to handle a pause event if the progress is less than 80%  	double position = g_Player.CurrentPosition;  	double duration = g_Player.Duration;  	if (duration != 0) {  		double progress = position / duration;  		if (progress < 0.8) {  			// send pause event to trakt.tv  			TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  			if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  				var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  				var scrobbleThread = new Thread (objInfo => {  					var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  					TraktLogger.LogTraktResponse (response);  					if (response != null && response.Code == 0) {  						//  add episode paused to cache  						if (response.Action == "pause") {  							TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  						}  					}  				}) {  					IsBackground = true'  					Name = "Scrobble"  				};  				scrobbleThread.Start (scrobbleEpisodeData);  			} else {  				var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  				var scrobbleThread = new Thread (objInfo => {  					var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  					TraktLogger.LogTraktResponse (response);  					if (response != null && response.Code == 0) {  						//  add movie paused to cache  						if (response.Action == "pause") {  							TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  						}  					}  				}) {  					IsBackground = true'  					Name = "Scrobble"  				};  				scrobbleThread.Start (scrobbleMovieData);  			}  		} else {  			// either completely watched or finished watching part of a mult-part file  			TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  		}  	}  	CurrentVideo = null;  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (CurrentVideo != null) {  	// onlinevideos can split videos into multiple parts  	// we only need to handle a pause event if the progress is less than 80%  	double position = g_Player.CurrentPosition;  	double duration = g_Player.Duration;  	if (duration != 0) {  		double progress = position / duration;  		if (progress < 0.8) {  			// send pause event to trakt.tv  			TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  			if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  				var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  				var scrobbleThread = new Thread (objInfo => {  					var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  					TraktLogger.LogTraktResponse (response);  					if (response != null && response.Code == 0) {  						//  add episode paused to cache  						if (response.Action == "pause") {  							TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  						}  					}  				}) {  					IsBackground = true'  					Name = "Scrobble"  				};  				scrobbleThread.Start (scrobbleEpisodeData);  			} else {  				var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  				var scrobbleThread = new Thread (objInfo => {  					var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  					TraktLogger.LogTraktResponse (response);  					if (response != null && response.Code == 0) {  						//  add movie paused to cache  						if (response.Action == "pause") {  							TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  						}  					}  				}) {  					IsBackground = true'  					Name = "Scrobble"  				};  				scrobbleThread.Start (scrobbleMovieData);  			}  		} else {  			// either completely watched or finished watching part of a mult-part file  			TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  		}  	}  	CurrentVideo = null;  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (CurrentVideo != null) {  	// onlinevideos can split videos into multiple parts  	// we only need to handle a pause event if the progress is less than 80%  	double position = g_Player.CurrentPosition;  	double duration = g_Player.Duration;  	if (duration != 0) {  		double progress = position / duration;  		if (progress < 0.8) {  			// send pause event to trakt.tv  			TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  			if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  				var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  				var scrobbleThread = new Thread (objInfo => {  					var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  					TraktLogger.LogTraktResponse (response);  					if (response != null && response.Code == 0) {  						//  add episode paused to cache  						if (response.Action == "pause") {  							TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  						}  					}  				}) {  					IsBackground = true'  					Name = "Scrobble"  				};  				scrobbleThread.Start (scrobbleEpisodeData);  			} else {  				var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  				var scrobbleThread = new Thread (objInfo => {  					var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  					TraktLogger.LogTraktResponse (response);  					if (response != null && response.Code == 0) {  						//  add movie paused to cache  						if (response.Action == "pause") {  							TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  						}  					}  				}) {  					IsBackground = true'  					Name = "Scrobble"  				};  				scrobbleThread.Start (scrobbleMovieData);  			}  		} else {  			// either completely watched or finished watching part of a mult-part file  			TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  		}  	}  	CurrentVideo = null;  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (CurrentVideo != null) {  	// onlinevideos can split videos into multiple parts  	// we only need to handle a pause event if the progress is less than 80%  	double position = g_Player.CurrentPosition;  	double duration = g_Player.Duration;  	if (duration != 0) {  		double progress = position / duration;  		if (progress < 0.8) {  			// send pause event to trakt.tv  			TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  			if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  				var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  				var scrobbleThread = new Thread (objInfo => {  					var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  					TraktLogger.LogTraktResponse (response);  					if (response != null && response.Code == 0) {  						//  add episode paused to cache  						if (response.Action == "pause") {  							TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  						}  					}  				}) {  					IsBackground = true'  					Name = "Scrobble"  				};  				scrobbleThread.Start (scrobbleEpisodeData);  			} else {  				var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  				var scrobbleThread = new Thread (objInfo => {  					var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  					TraktLogger.LogTraktResponse (response);  					if (response != null && response.Code == 0) {  						//  add movie paused to cache  						if (response.Action == "pause") {  							TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  						}  					}  				}) {  					IsBackground = true'  					Name = "Scrobble"  				};  				scrobbleThread.Start (scrobbleMovieData);  			}  		} else {  			// either completely watched or finished watching part of a mult-part file  			TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  		}  	}  	CurrentVideo = null;  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (CurrentVideo != null) {  	// onlinevideos can split videos into multiple parts  	// we only need to handle a pause event if the progress is less than 80%  	double position = g_Player.CurrentPosition;  	double duration = g_Player.Duration;  	if (duration != 0) {  		double progress = position / duration;  		if (progress < 0.8) {  			// send pause event to trakt.tv  			TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  			if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  				var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  				var scrobbleThread = new Thread (objInfo => {  					var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  					TraktLogger.LogTraktResponse (response);  					if (response != null && response.Code == 0) {  						//  add episode paused to cache  						if (response.Action == "pause") {  							TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  						}  					}  				}) {  					IsBackground = true'  					Name = "Scrobble"  				};  				scrobbleThread.Start (scrobbleEpisodeData);  			} else {  				var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  				var scrobbleThread = new Thread (objInfo => {  					var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  					TraktLogger.LogTraktResponse (response);  					if (response != null && response.Code == 0) {  						//  add movie paused to cache  						if (response.Action == "pause") {  							TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  						}  					}  				}) {  					IsBackground = true'  					Name = "Scrobble"  				};  				scrobbleThread.Start (scrobbleMovieData);  			}  		} else {  			// either completely watched or finished watching part of a mult-part file  			TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  		}  	}  	CurrentVideo = null;  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (CurrentVideo != null) {  	// onlinevideos can split videos into multiple parts  	// we only need to handle a pause event if the progress is less than 80%  	double position = g_Player.CurrentPosition;  	double duration = g_Player.Duration;  	if (duration != 0) {  		double progress = position / duration;  		if (progress < 0.8) {  			// send pause event to trakt.tv  			TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  			if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  				var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  				var scrobbleThread = new Thread (objInfo => {  					var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  					TraktLogger.LogTraktResponse (response);  					if (response != null && response.Code == 0) {  						//  add episode paused to cache  						if (response.Action == "pause") {  							TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  						}  					}  				}) {  					IsBackground = true'  					Name = "Scrobble"  				};  				scrobbleThread.Start (scrobbleEpisodeData);  			} else {  				var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  				var scrobbleThread = new Thread (objInfo => {  					var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  					TraktLogger.LogTraktResponse (response);  					if (response != null && response.Code == 0) {  						//  add movie paused to cache  						if (response.Action == "pause") {  							TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  						}  					}  				}) {  					IsBackground = true'  					Name = "Scrobble"  				};  				scrobbleThread.Start (scrobbleMovieData);  			}  		} else {  			// either completely watched or finished watching part of a mult-part file  			TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  		}  	}  	CurrentVideo = null;  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (duration != 0) {  	double progress = position / duration;  	if (progress < 0.8) {  		// send pause event to trakt.tv  		TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  		if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  				if (response != null && response.Code == 0) {  					//  add episode paused to cache  					if (response.Action == "pause") {  						TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  					}  				}  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  				if (response != null && response.Code == 0) {  					//  add movie paused to cache  					if (response.Action == "pause") {  						TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  					}  				}  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  	} else {  		// either completely watched or finished watching part of a mult-part file  		TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (duration != 0) {  	double progress = position / duration;  	if (progress < 0.8) {  		// send pause event to trakt.tv  		TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  		if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  				if (response != null && response.Code == 0) {  					//  add episode paused to cache  					if (response.Action == "pause") {  						TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  					}  				}  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  				if (response != null && response.Code == 0) {  					//  add movie paused to cache  					if (response.Action == "pause") {  						TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  					}  				}  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  	} else {  		// either completely watched or finished watching part of a mult-part file  		TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (duration != 0) {  	double progress = position / duration;  	if (progress < 0.8) {  		// send pause event to trakt.tv  		TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  		if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  				if (response != null && response.Code == 0) {  					//  add episode paused to cache  					if (response.Action == "pause") {  						TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  					}  				}  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  				if (response != null && response.Code == 0) {  					//  add movie paused to cache  					if (response.Action == "pause") {  						TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  					}  				}  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  	} else {  		// either completely watched or finished watching part of a mult-part file  		TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (duration != 0) {  	double progress = position / duration;  	if (progress < 0.8) {  		// send pause event to trakt.tv  		TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  		if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  				if (response != null && response.Code == 0) {  					//  add episode paused to cache  					if (response.Action == "pause") {  						TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  					}  				}  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  				if (response != null && response.Code == 0) {  					//  add movie paused to cache  					if (response.Action == "pause") {  						TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  					}  				}  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  	} else {  		// either completely watched or finished watching part of a mult-part file  		TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (duration != 0) {  	double progress = position / duration;  	if (progress < 0.8) {  		// send pause event to trakt.tv  		TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  		if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  				if (response != null && response.Code == 0) {  					//  add episode paused to cache  					if (response.Action == "pause") {  						TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  					}  				}  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  				if (response != null && response.Code == 0) {  					//  add movie paused to cache  					if (response.Action == "pause") {  						TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  					}  				}  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  	} else {  		// either completely watched or finished watching part of a mult-part file  		TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (duration != 0) {  	double progress = position / duration;  	if (progress < 0.8) {  		// send pause event to trakt.tv  		TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  		if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  				if (response != null && response.Code == 0) {  					//  add episode paused to cache  					if (response.Action == "pause") {  						TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  					}  				}  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  				if (response != null && response.Code == 0) {  					//  add movie paused to cache  					if (response.Action == "pause") {  						TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  					}  				}  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  	} else {  		// either completely watched or finished watching part of a mult-part file  		TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (duration != 0) {  	double progress = position / duration;  	if (progress < 0.8) {  		// send pause event to trakt.tv  		TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  		if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  				if (response != null && response.Code == 0) {  					//  add episode paused to cache  					if (response.Action == "pause") {  						TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  					}  				}  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  				if (response != null && response.Code == 0) {  					//  add movie paused to cache  					if (response.Action == "pause") {  						TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  					}  				}  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  	} else {  		// either completely watched or finished watching part of a mult-part file  		TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (progress < 0.8) {  	// send pause event to trakt.tv  	TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  	if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode paused to cache  				if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add movie paused to cache  				if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  } else {  	// either completely watched or finished watching part of a mult-part file  	TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (progress < 0.8) {  	// send pause event to trakt.tv  	TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  	if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode paused to cache  				if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add movie paused to cache  				if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  } else {  	// either completely watched or finished watching part of a mult-part file  	TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (progress < 0.8) {  	// send pause event to trakt.tv  	TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  	if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode paused to cache  				if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add movie paused to cache  				if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  } else {  	// either completely watched or finished watching part of a mult-part file  	TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (progress < 0.8) {  	// send pause event to trakt.tv  	TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  	if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode paused to cache  				if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add movie paused to cache  				if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  } else {  	// either completely watched or finished watching part of a mult-part file  	TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (progress < 0.8) {  	// send pause event to trakt.tv  	TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  	if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode paused to cache  				if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add movie paused to cache  				if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  } else {  	// either completely watched or finished watching part of a mult-part file  	TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (progress < 0.8) {  	// send pause event to trakt.tv  	TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  	if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode paused to cache  				if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add movie paused to cache  				if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  } else {  	// either completely watched or finished watching part of a mult-part file  	TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (progress < 0.8) {  	// send pause event to trakt.tv  	TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  	if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode paused to cache  				if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add movie paused to cache  				if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  } else {  	// either completely watched or finished watching part of a mult-part file  	TraktLogger.Info ("Playback stopped in OnlineVideos' awaiting next playback event.");  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: TraktLogger.Info ("Playback stopped in OnlineVideos but video is not considered watched' Progress = '{0}%'' Duration = '{1}'' Current Position = '{2}'"' Math.Round (progress * 100' 2)' g_Player.Duration' g_Player.CurrentPosition);  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  	var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Code == 0) {  			//  add episode paused to cache  			if (response.Action == "pause") {  				TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  			}  		}  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleEpisodeData);  } else {  	var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Code == 0) {  			//  add movie paused to cache  			if (response.Action == "pause") {  				TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  			}  		}  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleMovieData);  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  	var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Code == 0) {  			//  add episode paused to cache  			if (response.Action == "pause") {  				TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  			}  		}  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleEpisodeData);  } else {  	var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Code == 0) {  			//  add movie paused to cache  			if (response.Action == "pause") {  				TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  			}  		}  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleMovieData);  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  	var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Code == 0) {  			//  add episode paused to cache  			if (response.Action == "pause") {  				TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  			}  		}  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleEpisodeData);  } else {  	var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Code == 0) {  			//  add movie paused to cache  			if (response.Action == "pause") {  				TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  			}  		}  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleMovieData);  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,StopScrobble,The following statement contains a magic number: if (CurrentVideo.VideoKind == VideoKind.TvSeries) {  	var scrobbleEpisodeData = CreateEpisodeScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var response = TraktAPI.TraktAPI.PauseEpisodeScrobble (objInfo as TraktScrobbleEpisode);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Code == 0) {  			//  add episode paused to cache  			if (response.Action == "pause") {  				TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  			}  		}  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleEpisodeData);  } else {  	var scrobbleMovieData = CreateMovieScrobbleData (CurrentVideo' Math.Round (progress * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var response = TraktAPI.TraktAPI.PauseMovieScrobble (objInfo as TraktScrobbleMovie);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Code == 0) {  			//  add movie paused to cache  			if (response.Action == "pause") {  				TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  			}  		}  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleMovieData);  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.Movie || info.VideoKind == VideoKind.TvSeries) {  	// Started Playback  	if (percentPlayed < 0.8) {  		CurrentVideo = info;  		// start scrobble  		if (info.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  		return;  	}  	// Playback Ended or Stopped and Considered Watched  	// TrackVideoPlayback event only gets fired on Stopped if > 80% watched  	if (info.VideoKind == VideoKind.TvSeries) {  		TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ());  	} else {  		TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ());  	}  	// Show Rating Dialog after watched  	ShowRateDialog (info);  	// stop scrobble  	if (info.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleEpisode;  			var response = TraktAPI.TraktAPI.StopEpisodeScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode to cache  				if (response.Action == "scrobble") {  					TraktCache.AddEpisodeToWatchHistory (response.Show' response.Episode);  				} else if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleMovie;  			var response = TraktAPI.TraktAPI.StopMovieScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				// add movie to cache  				if (response.Action == "scrobble") {  					TraktCache.AddMovieToWatchHistory (response.Movie);  				} else if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.Movie || info.VideoKind == VideoKind.TvSeries) {  	// Started Playback  	if (percentPlayed < 0.8) {  		CurrentVideo = info;  		// start scrobble  		if (info.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  		return;  	}  	// Playback Ended or Stopped and Considered Watched  	// TrackVideoPlayback event only gets fired on Stopped if > 80% watched  	if (info.VideoKind == VideoKind.TvSeries) {  		TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ());  	} else {  		TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ());  	}  	// Show Rating Dialog after watched  	ShowRateDialog (info);  	// stop scrobble  	if (info.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleEpisode;  			var response = TraktAPI.TraktAPI.StopEpisodeScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode to cache  				if (response.Action == "scrobble") {  					TraktCache.AddEpisodeToWatchHistory (response.Show' response.Episode);  				} else if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleMovie;  			var response = TraktAPI.TraktAPI.StopMovieScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				// add movie to cache  				if (response.Action == "scrobble") {  					TraktCache.AddMovieToWatchHistory (response.Movie);  				} else if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.Movie || info.VideoKind == VideoKind.TvSeries) {  	// Started Playback  	if (percentPlayed < 0.8) {  		CurrentVideo = info;  		// start scrobble  		if (info.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  		return;  	}  	// Playback Ended or Stopped and Considered Watched  	// TrackVideoPlayback event only gets fired on Stopped if > 80% watched  	if (info.VideoKind == VideoKind.TvSeries) {  		TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ());  	} else {  		TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ());  	}  	// Show Rating Dialog after watched  	ShowRateDialog (info);  	// stop scrobble  	if (info.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleEpisode;  			var response = TraktAPI.TraktAPI.StopEpisodeScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode to cache  				if (response.Action == "scrobble") {  					TraktCache.AddEpisodeToWatchHistory (response.Show' response.Episode);  				} else if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleMovie;  			var response = TraktAPI.TraktAPI.StopMovieScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				// add movie to cache  				if (response.Action == "scrobble") {  					TraktCache.AddMovieToWatchHistory (response.Movie);  				} else if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.Movie || info.VideoKind == VideoKind.TvSeries) {  	// Started Playback  	if (percentPlayed < 0.8) {  		CurrentVideo = info;  		// start scrobble  		if (info.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  		return;  	}  	// Playback Ended or Stopped and Considered Watched  	// TrackVideoPlayback event only gets fired on Stopped if > 80% watched  	if (info.VideoKind == VideoKind.TvSeries) {  		TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ());  	} else {  		TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ());  	}  	// Show Rating Dialog after watched  	ShowRateDialog (info);  	// stop scrobble  	if (info.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleEpisode;  			var response = TraktAPI.TraktAPI.StopEpisodeScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode to cache  				if (response.Action == "scrobble") {  					TraktCache.AddEpisodeToWatchHistory (response.Show' response.Episode);  				} else if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleMovie;  			var response = TraktAPI.TraktAPI.StopMovieScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				// add movie to cache  				if (response.Action == "scrobble") {  					TraktCache.AddMovieToWatchHistory (response.Movie);  				} else if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.Movie || info.VideoKind == VideoKind.TvSeries) {  	// Started Playback  	if (percentPlayed < 0.8) {  		CurrentVideo = info;  		// start scrobble  		if (info.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  		return;  	}  	// Playback Ended or Stopped and Considered Watched  	// TrackVideoPlayback event only gets fired on Stopped if > 80% watched  	if (info.VideoKind == VideoKind.TvSeries) {  		TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ());  	} else {  		TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ());  	}  	// Show Rating Dialog after watched  	ShowRateDialog (info);  	// stop scrobble  	if (info.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleEpisode;  			var response = TraktAPI.TraktAPI.StopEpisodeScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode to cache  				if (response.Action == "scrobble") {  					TraktCache.AddEpisodeToWatchHistory (response.Show' response.Episode);  				} else if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleMovie;  			var response = TraktAPI.TraktAPI.StopMovieScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				// add movie to cache  				if (response.Action == "scrobble") {  					TraktCache.AddMovieToWatchHistory (response.Movie);  				} else if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.Movie || info.VideoKind == VideoKind.TvSeries) {  	// Started Playback  	if (percentPlayed < 0.8) {  		CurrentVideo = info;  		// start scrobble  		if (info.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  		return;  	}  	// Playback Ended or Stopped and Considered Watched  	// TrackVideoPlayback event only gets fired on Stopped if > 80% watched  	if (info.VideoKind == VideoKind.TvSeries) {  		TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ());  	} else {  		TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ());  	}  	// Show Rating Dialog after watched  	ShowRateDialog (info);  	// stop scrobble  	if (info.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleEpisode;  			var response = TraktAPI.TraktAPI.StopEpisodeScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode to cache  				if (response.Action == "scrobble") {  					TraktCache.AddEpisodeToWatchHistory (response.Show' response.Episode);  				} else if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleMovie;  			var response = TraktAPI.TraktAPI.StopMovieScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				// add movie to cache  				if (response.Action == "scrobble") {  					TraktCache.AddMovieToWatchHistory (response.Movie);  				} else if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.Movie || info.VideoKind == VideoKind.TvSeries) {  	// Started Playback  	if (percentPlayed < 0.8) {  		CurrentVideo = info;  		// start scrobble  		if (info.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  		return;  	}  	// Playback Ended or Stopped and Considered Watched  	// TrackVideoPlayback event only gets fired on Stopped if > 80% watched  	if (info.VideoKind == VideoKind.TvSeries) {  		TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ());  	} else {  		TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ());  	}  	// Show Rating Dialog after watched  	ShowRateDialog (info);  	// stop scrobble  	if (info.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleEpisode;  			var response = TraktAPI.TraktAPI.StopEpisodeScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode to cache  				if (response.Action == "scrobble") {  					TraktCache.AddEpisodeToWatchHistory (response.Show' response.Episode);  				} else if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleMovie;  			var response = TraktAPI.TraktAPI.StopMovieScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				// add movie to cache  				if (response.Action == "scrobble") {  					TraktCache.AddMovieToWatchHistory (response.Movie);  				} else if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.Movie || info.VideoKind == VideoKind.TvSeries) {  	// Started Playback  	if (percentPlayed < 0.8) {  		CurrentVideo = info;  		// start scrobble  		if (info.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  		return;  	}  	// Playback Ended or Stopped and Considered Watched  	// TrackVideoPlayback event only gets fired on Stopped if > 80% watched  	if (info.VideoKind == VideoKind.TvSeries) {  		TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ());  	} else {  		TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ());  	}  	// Show Rating Dialog after watched  	ShowRateDialog (info);  	// stop scrobble  	if (info.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleEpisode;  			var response = TraktAPI.TraktAPI.StopEpisodeScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode to cache  				if (response.Action == "scrobble") {  					TraktCache.AddEpisodeToWatchHistory (response.Show' response.Episode);  				} else if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleMovie;  			var response = TraktAPI.TraktAPI.StopMovieScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				// add movie to cache  				if (response.Action == "scrobble") {  					TraktCache.AddMovieToWatchHistory (response.Movie);  				} else if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.Movie || info.VideoKind == VideoKind.TvSeries) {  	// Started Playback  	if (percentPlayed < 0.8) {  		CurrentVideo = info;  		// start scrobble  		if (info.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  		return;  	}  	// Playback Ended or Stopped and Considered Watched  	// TrackVideoPlayback event only gets fired on Stopped if > 80% watched  	if (info.VideoKind == VideoKind.TvSeries) {  		TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ());  	} else {  		TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ());  	}  	// Show Rating Dialog after watched  	ShowRateDialog (info);  	// stop scrobble  	if (info.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleEpisode;  			var response = TraktAPI.TraktAPI.StopEpisodeScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode to cache  				if (response.Action == "scrobble") {  					TraktCache.AddEpisodeToWatchHistory (response.Show' response.Episode);  				} else if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleMovie;  			var response = TraktAPI.TraktAPI.StopMovieScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				// add movie to cache  				if (response.Action == "scrobble") {  					TraktCache.AddMovieToWatchHistory (response.Movie);  				} else if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.Movie || info.VideoKind == VideoKind.TvSeries) {  	// Started Playback  	if (percentPlayed < 0.8) {  		CurrentVideo = info;  		// start scrobble  		if (info.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  		return;  	}  	// Playback Ended or Stopped and Considered Watched  	// TrackVideoPlayback event only gets fired on Stopped if > 80% watched  	if (info.VideoKind == VideoKind.TvSeries) {  		TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ());  	} else {  		TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ());  	}  	// Show Rating Dialog after watched  	ShowRateDialog (info);  	// stop scrobble  	if (info.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleEpisode;  			var response = TraktAPI.TraktAPI.StopEpisodeScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode to cache  				if (response.Action == "scrobble") {  					TraktCache.AddEpisodeToWatchHistory (response.Show' response.Episode);  				} else if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleMovie;  			var response = TraktAPI.TraktAPI.StopMovieScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				// add movie to cache  				if (response.Action == "scrobble") {  					TraktCache.AddMovieToWatchHistory (response.Movie);  				} else if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.Movie || info.VideoKind == VideoKind.TvSeries) {  	// Started Playback  	if (percentPlayed < 0.8) {  		CurrentVideo = info;  		// start scrobble  		if (info.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  		return;  	}  	// Playback Ended or Stopped and Considered Watched  	// TrackVideoPlayback event only gets fired on Stopped if > 80% watched  	if (info.VideoKind == VideoKind.TvSeries) {  		TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ());  	} else {  		TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ());  	}  	// Show Rating Dialog after watched  	ShowRateDialog (info);  	// stop scrobble  	if (info.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleEpisode;  			var response = TraktAPI.TraktAPI.StopEpisodeScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode to cache  				if (response.Action == "scrobble") {  					TraktCache.AddEpisodeToWatchHistory (response.Show' response.Episode);  				} else if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleMovie;  			var response = TraktAPI.TraktAPI.StopMovieScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				// add movie to cache  				if (response.Action == "scrobble") {  					TraktCache.AddMovieToWatchHistory (response.Movie);  				} else if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.Movie || info.VideoKind == VideoKind.TvSeries) {  	// Started Playback  	if (percentPlayed < 0.8) {  		CurrentVideo = info;  		// start scrobble  		if (info.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  		return;  	}  	// Playback Ended or Stopped and Considered Watched  	// TrackVideoPlayback event only gets fired on Stopped if > 80% watched  	if (info.VideoKind == VideoKind.TvSeries) {  		TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ());  	} else {  		TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ());  	}  	// Show Rating Dialog after watched  	ShowRateDialog (info);  	// stop scrobble  	if (info.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleEpisode;  			var response = TraktAPI.TraktAPI.StopEpisodeScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode to cache  				if (response.Action == "scrobble") {  					TraktCache.AddEpisodeToWatchHistory (response.Show' response.Episode);  				} else if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleMovie;  			var response = TraktAPI.TraktAPI.StopMovieScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				// add movie to cache  				if (response.Action == "scrobble") {  					TraktCache.AddMovieToWatchHistory (response.Movie);  				} else if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.Movie || info.VideoKind == VideoKind.TvSeries) {  	// Started Playback  	if (percentPlayed < 0.8) {  		CurrentVideo = info;  		// start scrobble  		if (info.VideoKind == VideoKind.TvSeries) {  			var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleEpisodeData);  		} else {  			var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  			var scrobbleThread = new Thread (objInfo => {  				var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  				TraktLogger.LogTraktResponse (response);  			}) {  				IsBackground = true'  				Name = "Scrobble"  			};  			scrobbleThread.Start (scrobbleMovieData);  		}  		return;  	}  	// Playback Ended or Stopped and Considered Watched  	// TrackVideoPlayback event only gets fired on Stopped if > 80% watched  	if (info.VideoKind == VideoKind.TvSeries) {  		TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ());  	} else {  		TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ());  	}  	// Show Rating Dialog after watched  	ShowRateDialog (info);  	// stop scrobble  	if (info.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleEpisode;  			var response = TraktAPI.TraktAPI.StopEpisodeScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				//  add episode to cache  				if (response.Action == "scrobble") {  					TraktCache.AddEpisodeToWatchHistory (response.Show' response.Episode);  				} else if (response.Action == "pause") {  					TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var threadParam = objInfo as TraktScrobbleMovie;  			var response = TraktAPI.TraktAPI.StopMovieScrobble (threadParam);  			TraktLogger.LogTraktResponse (response);  			if (response != null && response.Code == 0) {  				// add movie to cache  				if (response.Action == "scrobble") {  					TraktCache.AddMovieToWatchHistory (response.Movie);  				} else if (response.Action == "pause") {  					TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  				}  			}  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (percentPlayed < 0.8) {  	CurrentVideo = info;  	// start scrobble  	if (info.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  			TraktLogger.LogTraktResponse (response);  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  			TraktLogger.LogTraktResponse (response);  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  	return;  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (percentPlayed < 0.8) {  	CurrentVideo = info;  	// start scrobble  	if (info.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  			TraktLogger.LogTraktResponse (response);  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  			TraktLogger.LogTraktResponse (response);  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  	return;  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (percentPlayed < 0.8) {  	CurrentVideo = info;  	// start scrobble  	if (info.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  			TraktLogger.LogTraktResponse (response);  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  			TraktLogger.LogTraktResponse (response);  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  	return;  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (percentPlayed < 0.8) {  	CurrentVideo = info;  	// start scrobble  	if (info.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  			TraktLogger.LogTraktResponse (response);  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  			TraktLogger.LogTraktResponse (response);  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  	return;  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (percentPlayed < 0.8) {  	CurrentVideo = info;  	// start scrobble  	if (info.VideoKind == VideoKind.TvSeries) {  		var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  			TraktLogger.LogTraktResponse (response);  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleEpisodeData);  	} else {  		var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  		var scrobbleThread = new Thread (objInfo => {  			var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  			TraktLogger.LogTraktResponse (response);  		}) {  			IsBackground = true'  			Name = "Scrobble"  		};  		scrobbleThread.Start (scrobbleMovieData);  	}  	return;  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.TvSeries) {  	var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  		TraktLogger.LogTraktResponse (response);  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleEpisodeData);  } else {  	var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  		TraktLogger.LogTraktResponse (response);  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleMovieData);  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.TvSeries) {  	var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  		TraktLogger.LogTraktResponse (response);  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleEpisodeData);  } else {  	var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  		TraktLogger.LogTraktResponse (response);  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleMovieData);  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.TvSeries) {  	var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  		TraktLogger.LogTraktResponse (response);  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleEpisodeData);  } else {  	var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  		TraktLogger.LogTraktResponse (response);  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleMovieData);  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.TvSeries) {  	var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var response = TraktAPI.TraktAPI.StartEpisodeScrobble (objInfo as TraktScrobbleEpisode);  		TraktLogger.LogTraktResponse (response);  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleEpisodeData);  } else {  	var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var response = TraktAPI.TraktAPI.StartMovieScrobble (objInfo as TraktScrobbleMovie);  		TraktLogger.LogTraktResponse (response);  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleMovieData);  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.TvSeries) {  	TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ());  } else {  	TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ());  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.TvSeries) {  	TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ());  } else {  	TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ());  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.TvSeries) {  	TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ());  } else {  	TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ());  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.TvSeries) {  	TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ());  } else {  	TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ());  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ());  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: TraktLogger.Info ("Playback of episode has ended and is considered watched. Progress = '{0}%'' Title = '{1} - {2}x{3}'' Year = '{4}'' IMDb ID = '{5}'' TMDb ID = '{6}'' TVDb ID = '{7}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Season' info.Episode' info.Year == 0 ? "<empty>" : info.Year.ToString ()' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ()' info.ID_TVDB.ToLogString ());  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ());  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: TraktLogger.Info ("Playback of movie has ended and is considered watched. Progress = '{0}%'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' Math.Round (percentPlayed * 100' 2)' info.Title' info.Year' info.ID_IMDB.ToLogString ()' info.ID_TMDB.ToLogString ());  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.TvSeries) {  	var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var threadParam = objInfo as TraktScrobbleEpisode;  		var response = TraktAPI.TraktAPI.StopEpisodeScrobble (threadParam);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Code == 0) {  			//  add episode to cache  			if (response.Action == "scrobble") {  				TraktCache.AddEpisodeToWatchHistory (response.Show' response.Episode);  			} else if (response.Action == "pause") {  				TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  			}  		}  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleEpisodeData);  } else {  	var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var threadParam = objInfo as TraktScrobbleMovie;  		var response = TraktAPI.TraktAPI.StopMovieScrobble (threadParam);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Code == 0) {  			// add movie to cache  			if (response.Action == "scrobble") {  				TraktCache.AddMovieToWatchHistory (response.Movie);  			} else if (response.Action == "pause") {  				TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  			}  		}  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleMovieData);  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.TvSeries) {  	var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var threadParam = objInfo as TraktScrobbleEpisode;  		var response = TraktAPI.TraktAPI.StopEpisodeScrobble (threadParam);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Code == 0) {  			//  add episode to cache  			if (response.Action == "scrobble") {  				TraktCache.AddEpisodeToWatchHistory (response.Show' response.Episode);  			} else if (response.Action == "pause") {  				TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  			}  		}  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleEpisodeData);  } else {  	var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var threadParam = objInfo as TraktScrobbleMovie;  		var response = TraktAPI.TraktAPI.StopMovieScrobble (threadParam);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Code == 0) {  			// add movie to cache  			if (response.Action == "scrobble") {  				TraktCache.AddMovieToWatchHistory (response.Movie);  			} else if (response.Action == "pause") {  				TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  			}  		}  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleMovieData);  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.TvSeries) {  	var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var threadParam = objInfo as TraktScrobbleEpisode;  		var response = TraktAPI.TraktAPI.StopEpisodeScrobble (threadParam);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Code == 0) {  			//  add episode to cache  			if (response.Action == "scrobble") {  				TraktCache.AddEpisodeToWatchHistory (response.Show' response.Episode);  			} else if (response.Action == "pause") {  				TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  			}  		}  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleEpisodeData);  } else {  	var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var threadParam = objInfo as TraktScrobbleMovie;  		var response = TraktAPI.TraktAPI.StopMovieScrobble (threadParam);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Code == 0) {  			// add movie to cache  			if (response.Action == "scrobble") {  				TraktCache.AddMovieToWatchHistory (response.Movie);  			} else if (response.Action == "pause") {  				TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  			}  		}  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleMovieData);  }  
Magic Number,TraktPlugin.TraktHandlers,OnlineVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\OnlineVideos.cs,TrackVideoPlayback,The following statement contains a magic number: if (info.VideoKind == VideoKind.TvSeries) {  	var scrobbleEpisodeData = CreateEpisodeScrobbleData (info' Math.Round (percentPlayed * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var threadParam = objInfo as TraktScrobbleEpisode;  		var response = TraktAPI.TraktAPI.StopEpisodeScrobble (threadParam);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Code == 0) {  			//  add episode to cache  			if (response.Action == "scrobble") {  				TraktCache.AddEpisodeToWatchHistory (response.Show' response.Episode);  			} else if (response.Action == "pause") {  				TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  			}  		}  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleEpisodeData);  } else {  	var scrobbleMovieData = CreateMovieScrobbleData (info' Math.Round (percentPlayed * 100' 2));  	var scrobbleThread = new Thread (objInfo => {  		var threadParam = objInfo as TraktScrobbleMovie;  		var response = TraktAPI.TraktAPI.StopMovieScrobble (threadParam);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Code == 0) {  			// add movie to cache  			if (response.Action == "scrobble") {  				TraktCache.AddMovieToWatchHistory (response.Movie);  			} else if (response.Action == "pause") {  				TraktCache.AddMovieToPausedData (response.Movie' response.Progress);  			}  		}  	}) {  		IsBackground = true'  		Name = "Scrobble"  	};  	scrobbleThread.Start (scrobbleMovieData);  }  
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetPlayerProgress,The following statement contains a magic number: if (duration > 0.0)  	progress = (position / duration) * 100.0;  
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetPlayerProgress,The following statement contains a magic number: progress = (position / duration) * 100.0;  
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetPlayerProgress,The following statement contains a magic number: if (progress > 100)  	progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetPlayerProgress,The following statement contains a magic number: if (progress > 100)  	progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetPlayerProgress,The following statement contains a magic number: progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetPlayerProgress,The following statement contains a magic number: return Math.Round (progress' 2);  
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,StopScrobbleMovie,The following statement contains a magic number: if (watched && scrobbleData.Progress < 80)  	scrobbleData.Progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,StopScrobbleMovie,The following statement contains a magic number: if (watched && scrobbleData.Progress < 80)  	scrobbleData.Progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,StopScrobbleMovie,The following statement contains a magic number: scrobbleData.Progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,StopScrobbleEpisode,The following statement contains a magic number: if (watched && scrobbleData.Progress < 80)  	scrobbleData.Progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,StopScrobbleEpisode,The following statement contains a magic number: if (watched && scrobbleData.Progress < 80)  	scrobbleData.Progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,StopScrobbleEpisode,The following statement contains a magic number: scrobbleData.Progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,IsValidImdb,The following statement contains a magic number: if (id.Length != 9)  	return false;  
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetProperImdbId,The following statement contains a magic number: if (id.Length != 9) {  	imdbid = string.Format ("tt{0}"' id.Substring (2).PadLeft (7' '0'));  }  
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetProperImdbId,The following statement contains a magic number: if (id.Length != 9) {  	imdbid = string.Format ("tt{0}"' id.Substring (2).PadLeft (7' '0'));  }  
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetProperImdbId,The following statement contains a magic number: if (id.Length != 9) {  	imdbid = string.Format ("tt{0}"' id.Substring (2).PadLeft (7' '0'));  }  
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetProperImdbId,The following statement contains a magic number: imdbid = string.Format ("tt{0}"' id.Substring (2).PadLeft (7' '0'));  
Magic Number,TraktPlugin.TraktHandlers,BasicHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\BasicHandler.cs,GetProperImdbId,The following statement contains a magic number: imdbid = string.Format ("tt{0}"' id.Substring (2).PadLeft (7' '0'));  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,MovingPictures,The following statement contains a magic number: if (!File.Exists (pluginFilename)) {  	throw new FileNotFoundException ("Plugin not found!");  } else {  	FileVersionInfo fvi = FileVersionInfo.GetVersionInfo (pluginFilename);  	string version = fvi.ProductVersion;  	if (new Version (version) < new Version (1' 7' 0' 0))  		throw new FileLoadException ("Plugin does not meet the minimum requirements' check you have the latest version installed!");  	// check if it support user ratings out of 10  	if (new Version (version) >= new Version (1' 8' 1' 0))  		AdvancedRatings = true;  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,MovingPictures,The following statement contains a magic number: if (!File.Exists (pluginFilename)) {  	throw new FileNotFoundException ("Plugin not found!");  } else {  	FileVersionInfo fvi = FileVersionInfo.GetVersionInfo (pluginFilename);  	string version = fvi.ProductVersion;  	if (new Version (version) < new Version (1' 7' 0' 0))  		throw new FileLoadException ("Plugin does not meet the minimum requirements' check you have the latest version installed!");  	// check if it support user ratings out of 10  	if (new Version (version) >= new Version (1' 8' 1' 0))  		AdvancedRatings = true;  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,MovingPictures,The following statement contains a magic number: if (new Version (version) < new Version (1' 7' 0' 0))  	throw new FileLoadException ("Plugin does not meet the minimum requirements' check you have the latest version installed!");  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,MovingPictures,The following statement contains a magic number: if (new Version (version) >= new Version (1' 8' 1' 0))  	AdvancedRatings = true;  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The following statement contains a magic number: if (TraktSettings.SyncLibrary) {  	#region Get local database info  	TraktLogger.Info ("Found {0} movies available to sync in MovingPictures database"' collectedMovies.Count);  	// get the movies that we have watched  	var watchedMovies = collectedMovies.Where (m => m.ActiveUserSettings.WatchedCount > 0).ToList ();  	TraktLogger.Info ("Found {0} watched movies available to sync in MovingPictures database"' watchedMovies.Count);  	// get the movies that we have rated/unrated  	// check if there is a rating out of 10 if using supported version of the plugin  	var ratedMovies = collectedMovies.Where (m => (AdvancedRatings && HasAdvancedRating (m)) || m.ActiveUserSettings.UserRating.GetValueOrDefault (0) > 0).ToList ();  	TraktLogger.Info ("Found {0} rated movies available to sync in MovingPictures database"' ratedMovies.Count);  	#endregion  	#region Mark movies as unwatched in local database  	if (traktUnWatchedMovies != null && traktUnWatchedMovies.Count () > 0) {  		foreach (var movie in traktUnWatchedMovies) {  			var localMovie = watchedMovies.FirstOrDefault (m => MovieMatch (m' movie));  			if (localMovie == null)  				continue;  			TraktLogger.Info ("Marking movie as unwatched in local database' movie is not watched on trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year.HasValue ? movie.Year.ToString () : "<empty>"' movie.Ids.Imdb ?? "<empty>"' movie.Ids.Tmdb.HasValue ? movie.Ids.Tmdb.ToString () : "<empty>");  			localMovie.ActiveUserSettings.WatchedCount = 0;  			localMovie.ActiveUserSettings.Commit ();  		}  		// update watched set  		watchedMovies = collectedMovies.Where (m => m.ActiveUserSettings.WatchedCount > 0).ToList ();  	}  	#endregion  	#region Mark movies as watched in local database  	if (traktWatchedMovies != null && traktWatchedMovies.Count () > 0) {  		foreach (var twm in traktWatchedMovies) {  			var localMovie = collectedMovies.FirstOrDefault (m => MovieMatch (m' twm.Movie));  			if (localMovie == null)  				continue;  			if (localMovie.ActiveUserSettings.WatchedCount < twm.Plays) {  				TraktLogger.Info ("Updating local movie watched state / play count to match trakt.tv. Plays = '{0}'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' twm.Plays' twm.Movie.Title' twm.Movie.Year.HasValue ? twm.Movie.Year.ToString () : "<empty>"' twm.Movie.Ids.Imdb ?? "<empty>"' twm.Movie.Ids.Tmdb.HasValue ? twm.Movie.Ids.Tmdb.ToString () : "<empty>");  				localMovie.ActiveUserSettings.WatchedCount = twm.Plays;  				localMovie.Commit ();  			}  		}  	}  	#endregion  	#region Add movies to watched history at trakt.tv  	if (traktWatchedMovies != null) {  		var syncWatchedMovies = new List<TraktSyncMovieWatched> ();  		TraktLogger.Info ("Finding movies to add to trakt.tv watched history");  		syncWatchedMovies = (from movie in watchedMovies  		where !traktWatchedMovies.ToList ().Exists (c => MovieMatch (movie' c.Movie))  		select new TraktSyncMovieWatched {  			Ids = new TraktMovieId {  				Imdb = movie.ImdbID.ToNullIfEmpty ()'  				Tmdb = GetTmdbID (movie).ToNullableInt32 ()  			}'  			Title = movie.Title'  			Year = movie.Year'  			WatchedAt = GetFirstWatchedDate (movie)'  		}).ToList ();  		TraktLogger.Info ("Adding {0} movies to trakt.tv watched history"' syncWatchedMovies.Count);  		if (syncWatchedMovies.Count > 0) {  			// update internal cache  			TraktCache.AddMoviesToWatchHistory (syncWatchedMovies);  			int pageSize = TraktSettings.SyncBatchSize;  			int pages = (int)Math.Ceiling ((double)syncWatchedMovies.Count / pageSize);  			for (int i = 0; i < pages; i++) {  				TraktLogger.Info ("Adding movies [{0}/{1}] to trakt.tv watched history"' i + 1' pages);  				var pagedMovies = syncWatchedMovies.Skip (i * pageSize).Take (pageSize).ToList ();  				pagedMovies.ForEach (s => TraktLogger.Info ("Adding movie to trakt.tv watched history. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Watched = '{4}'"' s.Title' s.Year.HasValue ? s.Year.ToString () : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString () : "<empty>"' s.WatchedAt));  				// remove title/year such that match against online ID only  				if (TraktSettings.SkipMoviesWithNoIdsOnSync) {  					pagedMovies.ForEach (m => {  						m.Title = null;  						m.Year = null;  					});  				}  				var response = TraktAPI.TraktAPI.AddMoviesToWatchedHistory (new TraktSyncMoviesWatched {  					Movies = pagedMovies  				});  				TraktLogger.LogTraktResponse<TraktSyncResponse> (response);  				// remove movies from cache which didn't succeed  				if (response != null && response.NotFound != null && response.NotFound.Movies.Count > 0) {  					TraktCache.RemoveMoviesFromWatchHistory (response.NotFound.Movies);  				}  			}  		}  	}  	#endregion  	#region Add movies to collection at trakt.tv  	if (traktCollectedMovies != null) {  		var syncCollectedMovies = new List<TraktSyncMovieCollected> ();  		TraktLogger.Info ("Finding movies to add to trakt.tv collection");  		syncCollectedMovies = (from movie in collectedMovies  		where !traktCollectedMovies.ToList ().Exists (c => MovieMatch (movie' c.Movie))  		select new TraktSyncMovieCollected {  			Ids = new TraktMovieId {  				Imdb = movie.ImdbID.ToNullIfEmpty ()'  				Tmdb = GetTmdbID (movie).ToNullableInt32 ()  			}'  			Title = movie.Title'  			Year = movie.Year'  			CollectedAt = movie.DateAdded.ToUniversalTime ().ToISO8601 ()'  			MediaType = GetMovieMediaType (movie)'  			Resolution = GetMovieResolution (movie)'  			AudioCodec = GetMovieAudioCodec (movie)'  			AudioChannels = GetMovieAudioChannels (movie)'  			Is3D = IsMovie3D (movie)  		}).ToList ();  		TraktLogger.Info ("Adding {0} movies to trakt.tv collection"' syncCollectedMovies.Count);  		if (syncCollectedMovies.Count > 0) {  			// update internal cache  			TraktCache.AddMoviesToCollection (syncCollectedMovies);  			int pageSize = TraktSettings.SyncBatchSize;  			int pages = (int)Math.Ceiling ((double)syncCollectedMovies.Count / pageSize);  			for (int i = 0; i < pages; i++) {  				TraktLogger.Info ("Adding movies [{0}/{1}] to trakt.tv collection"' i + 1' pages);  				var pagedMovies = syncCollectedMovies.Skip (i * pageSize).Take (pageSize).ToList ();  				pagedMovies.ForEach (s => TraktLogger.Info ("Adding movie to trakt.tv collection. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Added = '{4}'' MediaType = '{5}'' Resolution = '{6}'' Audio Codec = '{7}'' Audio Channels = '{8}'"' s.Title' s.Year.HasValue ? s.Year.ToString () : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString () : "<empty>"' s.CollectedAt' s.MediaType ?? "<empty>"' s.Resolution ?? "<empty>"' s.AudioCodec ?? "<empty>"' s.AudioChannels ?? "<empty>"));  				// remove title/year such that match against online ID only  				if (TraktSettings.SkipMoviesWithNoIdsOnSync) {  					pagedMovies.ForEach (m => {  						m.Title = null;  						m.Year = null;  					});  				}  				var response = TraktAPI.TraktAPI.AddMoviesToCollecton (new TraktSyncMoviesCollected {  					Movies = pagedMovies  				});  				TraktLogger.LogTraktResponse (response);  				// remove movies from cache which didn't succeed  				if (response != null && response.NotFound != null && response.NotFound.Movies.Count > 0) {  					TraktCache.RemoveMoviesFromCollection (response.NotFound.Movies);  				}  			}  		}  	}  	#endregion  	#region Add movie ratings to trakt.tv  	if (TraktSettings.SyncRatings && traktRatedMovies != null) {  		var syncRatedMovies = new List<TraktSyncMovieRated> ();  		TraktLogger.Info ("Finding movies to add to trakt.tv ratings");  		syncRatedMovies = (from movie in ratedMovies  		where !traktRatedMovies.ToList ().Exists (c => MovieMatch (movie' c.Movie))  		select new TraktSyncMovieRated {  			Ids = new TraktMovieId {  				Imdb = movie.ImdbID.ToNullIfEmpty ()'  				Tmdb = GetTmdbID (movie).ToNullableInt32 ()  			}'  			Title = movie.Title'  			Year = movie.Year'  			Rating = AdvancedRatings ? GetAdvancedUserRating (movie) : (int)movie.UserSettings.First ().UserRating * 2'  			RatedAt = null'  		}).ToList ();  		TraktLogger.Info ("Adding {0} movies to trakt.tv ratings"' syncRatedMovies.Count);  		if (syncRatedMovies.Count > 0) {  			// update local cache  			TraktCache.AddMoviesToRatings (syncRatedMovies);  			int pageSize = TraktSettings.SyncBatchSize;  			int pages = (int)Math.Ceiling ((double)syncRatedMovies.Count / pageSize);  			for (int i = 0; i < pages; i++) {  				TraktLogger.Info ("Adding movies [{0}/{1}] to trakt.tv ratings"' i + 1' pages);  				var pagedMovies = syncRatedMovies.Skip (i * pageSize).Take (pageSize).ToList ();  				pagedMovies.ForEach (a => TraktLogger.Info ("Adding movie to trakt.tv ratings. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Rating = '{4}/10'"' a.Title' a.Year.HasValue ? a.Year.ToString () : "<empty>"' a.Ids.Imdb ?? "<empty>"' a.Ids.Tmdb.HasValue ? a.Ids.Tmdb.ToString () : "<empty>"' a.Rating));  				// remove title/year such that match against online ID only  				if (TraktSettings.SkipMoviesWithNoIdsOnSync) {  					pagedMovies.ForEach (m => {  						m.Title = null;  						m.Year = null;  					});  				}  				var response = TraktAPI.TraktAPI.AddMoviesToRatings (new TraktSyncMoviesRated {  					Movies = pagedMovies  				});  				TraktLogger.LogTraktResponse (response);  				// remove movies from cache which didn't succeed  				if (response != null && response.NotFound != null && response.NotFound.Movies.Count > 0) {  					TraktCache.RemoveMoviesFromRatings (response.NotFound.Movies);  				}  			}  		}  	}  	#endregion  	#region Rate movies not rated in local database  	if (TraktSettings.SyncRatings && traktRatedMovies != null) {  		foreach (var trm in traktRatedMovies) {  			var localMovie = collectedMovies.FirstOrDefault (m => MovieMatch (m' trm.Movie));  			if (localMovie == null)  				continue;  			if (!AdvancedRatings) {  				if (localMovie.UserSettings.First ().UserRating == null || localMovie.UserSettings.First ().UserRating == 0) {  					// update local collection rating (5 Point Scale)  					int rating = (int)(Math.Round (trm.Rating / 2.0' MidpointRounding.AwayFromZero));  					TraktLogger.Info ("Adding movie rating to match trakt.tv. Rated = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' trm.Rating' trm.Movie.Title' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString () : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString () : "<empty>");  					localMovie.ActiveUserSettings.UserRating = rating;  					localMovie.Commit ();  				}  			} else {  				if (!HasAdvancedRating (localMovie)) {  					TraktLogger.Info ("Adding movie rating to match trakt.tv. Rated = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' trm.Rating' trm.Movie.Title' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString () : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString () : "<empty>");  					SetAdvancedRating (localMovie' trm.Rating);  					localMovie.Commit ();  				}  			}  		}  	}  	#endregion  	#region Remove movies no longer in collection from trakt.tv  	if (TraktSettings.KeepTraktLibraryClean && TraktSettings.MoviePluginCount == 1 && traktCollectedMovies != null) {  		var syncUnCollectedMovies = new List<TraktMovie> ();  		TraktLogger.Info ("Finding movies to remove from trakt.tv collection");  		// workout what movies that are in trakt collection that are not in local collection  		syncUnCollectedMovies = (from tcm in traktCollectedMovies  		where !collectedMovies.Exists (c => MovieMatch (c' tcm.Movie))  		select new TraktMovie {  			Ids = tcm.Movie.Ids'  			Title = tcm.Movie.Title'  			Year = tcm.Movie.Year  		}).ToList ();  		TraktLogger.Info ("Removing {0} movies from trakt.tv collection"' syncUnCollectedMovies.Count);  		if (syncUnCollectedMovies.Count > 0) {  			// update local cache  			TraktCache.RemoveMoviesFromCollection (syncUnCollectedMovies);  			int pageSize = TraktSettings.SyncBatchSize;  			int pages = (int)Math.Ceiling ((double)syncUnCollectedMovies.Count / pageSize);  			for (int i = 0; i < pages; i++) {  				TraktLogger.Info ("Removing movies [{0}/{1}] from trakt.tv collection"' i + 1' pages);  				var pagedMovies = syncUnCollectedMovies.Skip (i * pageSize).Take (pageSize).ToList ();  				pagedMovies.ForEach (s => TraktLogger.Info ("Removing movie from trakt.tv collection' movie no longer exists locally. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' s.Title' s.Year.HasValue ? s.Year.ToString () : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString () : "<empty>"));  				// remove title/year such that match against online ID only  				if (TraktSettings.SkipMoviesWithNoIdsOnSync) {  					pagedMovies.ForEach (m => {  						m.Title = null;  						m.Year = null;  					});  				}  				var response = TraktAPI.TraktAPI.RemoveMoviesFromCollecton (new TraktSyncMovies {  					Movies = pagedMovies  				});  				TraktLogger.LogTraktResponse (response);  			}  		}  	}  	#endregion  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The following statement contains a magic number: if (TraktSettings.SyncLibrary) {  	#region Get local database info  	TraktLogger.Info ("Found {0} movies available to sync in MovingPictures database"' collectedMovies.Count);  	// get the movies that we have watched  	var watchedMovies = collectedMovies.Where (m => m.ActiveUserSettings.WatchedCount > 0).ToList ();  	TraktLogger.Info ("Found {0} watched movies available to sync in MovingPictures database"' watchedMovies.Count);  	// get the movies that we have rated/unrated  	// check if there is a rating out of 10 if using supported version of the plugin  	var ratedMovies = collectedMovies.Where (m => (AdvancedRatings && HasAdvancedRating (m)) || m.ActiveUserSettings.UserRating.GetValueOrDefault (0) > 0).ToList ();  	TraktLogger.Info ("Found {0} rated movies available to sync in MovingPictures database"' ratedMovies.Count);  	#endregion  	#region Mark movies as unwatched in local database  	if (traktUnWatchedMovies != null && traktUnWatchedMovies.Count () > 0) {  		foreach (var movie in traktUnWatchedMovies) {  			var localMovie = watchedMovies.FirstOrDefault (m => MovieMatch (m' movie));  			if (localMovie == null)  				continue;  			TraktLogger.Info ("Marking movie as unwatched in local database' movie is not watched on trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year.HasValue ? movie.Year.ToString () : "<empty>"' movie.Ids.Imdb ?? "<empty>"' movie.Ids.Tmdb.HasValue ? movie.Ids.Tmdb.ToString () : "<empty>");  			localMovie.ActiveUserSettings.WatchedCount = 0;  			localMovie.ActiveUserSettings.Commit ();  		}  		// update watched set  		watchedMovies = collectedMovies.Where (m => m.ActiveUserSettings.WatchedCount > 0).ToList ();  	}  	#endregion  	#region Mark movies as watched in local database  	if (traktWatchedMovies != null && traktWatchedMovies.Count () > 0) {  		foreach (var twm in traktWatchedMovies) {  			var localMovie = collectedMovies.FirstOrDefault (m => MovieMatch (m' twm.Movie));  			if (localMovie == null)  				continue;  			if (localMovie.ActiveUserSettings.WatchedCount < twm.Plays) {  				TraktLogger.Info ("Updating local movie watched state / play count to match trakt.tv. Plays = '{0}'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' twm.Plays' twm.Movie.Title' twm.Movie.Year.HasValue ? twm.Movie.Year.ToString () : "<empty>"' twm.Movie.Ids.Imdb ?? "<empty>"' twm.Movie.Ids.Tmdb.HasValue ? twm.Movie.Ids.Tmdb.ToString () : "<empty>");  				localMovie.ActiveUserSettings.WatchedCount = twm.Plays;  				localMovie.Commit ();  			}  		}  	}  	#endregion  	#region Add movies to watched history at trakt.tv  	if (traktWatchedMovies != null) {  		var syncWatchedMovies = new List<TraktSyncMovieWatched> ();  		TraktLogger.Info ("Finding movies to add to trakt.tv watched history");  		syncWatchedMovies = (from movie in watchedMovies  		where !traktWatchedMovies.ToList ().Exists (c => MovieMatch (movie' c.Movie))  		select new TraktSyncMovieWatched {  			Ids = new TraktMovieId {  				Imdb = movie.ImdbID.ToNullIfEmpty ()'  				Tmdb = GetTmdbID (movie).ToNullableInt32 ()  			}'  			Title = movie.Title'  			Year = movie.Year'  			WatchedAt = GetFirstWatchedDate (movie)'  		}).ToList ();  		TraktLogger.Info ("Adding {0} movies to trakt.tv watched history"' syncWatchedMovies.Count);  		if (syncWatchedMovies.Count > 0) {  			// update internal cache  			TraktCache.AddMoviesToWatchHistory (syncWatchedMovies);  			int pageSize = TraktSettings.SyncBatchSize;  			int pages = (int)Math.Ceiling ((double)syncWatchedMovies.Count / pageSize);  			for (int i = 0; i < pages; i++) {  				TraktLogger.Info ("Adding movies [{0}/{1}] to trakt.tv watched history"' i + 1' pages);  				var pagedMovies = syncWatchedMovies.Skip (i * pageSize).Take (pageSize).ToList ();  				pagedMovies.ForEach (s => TraktLogger.Info ("Adding movie to trakt.tv watched history. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Watched = '{4}'"' s.Title' s.Year.HasValue ? s.Year.ToString () : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString () : "<empty>"' s.WatchedAt));  				// remove title/year such that match against online ID only  				if (TraktSettings.SkipMoviesWithNoIdsOnSync) {  					pagedMovies.ForEach (m => {  						m.Title = null;  						m.Year = null;  					});  				}  				var response = TraktAPI.TraktAPI.AddMoviesToWatchedHistory (new TraktSyncMoviesWatched {  					Movies = pagedMovies  				});  				TraktLogger.LogTraktResponse<TraktSyncResponse> (response);  				// remove movies from cache which didn't succeed  				if (response != null && response.NotFound != null && response.NotFound.Movies.Count > 0) {  					TraktCache.RemoveMoviesFromWatchHistory (response.NotFound.Movies);  				}  			}  		}  	}  	#endregion  	#region Add movies to collection at trakt.tv  	if (traktCollectedMovies != null) {  		var syncCollectedMovies = new List<TraktSyncMovieCollected> ();  		TraktLogger.Info ("Finding movies to add to trakt.tv collection");  		syncCollectedMovies = (from movie in collectedMovies  		where !traktCollectedMovies.ToList ().Exists (c => MovieMatch (movie' c.Movie))  		select new TraktSyncMovieCollected {  			Ids = new TraktMovieId {  				Imdb = movie.ImdbID.ToNullIfEmpty ()'  				Tmdb = GetTmdbID (movie).ToNullableInt32 ()  			}'  			Title = movie.Title'  			Year = movie.Year'  			CollectedAt = movie.DateAdded.ToUniversalTime ().ToISO8601 ()'  			MediaType = GetMovieMediaType (movie)'  			Resolution = GetMovieResolution (movie)'  			AudioCodec = GetMovieAudioCodec (movie)'  			AudioChannels = GetMovieAudioChannels (movie)'  			Is3D = IsMovie3D (movie)  		}).ToList ();  		TraktLogger.Info ("Adding {0} movies to trakt.tv collection"' syncCollectedMovies.Count);  		if (syncCollectedMovies.Count > 0) {  			// update internal cache  			TraktCache.AddMoviesToCollection (syncCollectedMovies);  			int pageSize = TraktSettings.SyncBatchSize;  			int pages = (int)Math.Ceiling ((double)syncCollectedMovies.Count / pageSize);  			for (int i = 0; i < pages; i++) {  				TraktLogger.Info ("Adding movies [{0}/{1}] to trakt.tv collection"' i + 1' pages);  				var pagedMovies = syncCollectedMovies.Skip (i * pageSize).Take (pageSize).ToList ();  				pagedMovies.ForEach (s => TraktLogger.Info ("Adding movie to trakt.tv collection. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Added = '{4}'' MediaType = '{5}'' Resolution = '{6}'' Audio Codec = '{7}'' Audio Channels = '{8}'"' s.Title' s.Year.HasValue ? s.Year.ToString () : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString () : "<empty>"' s.CollectedAt' s.MediaType ?? "<empty>"' s.Resolution ?? "<empty>"' s.AudioCodec ?? "<empty>"' s.AudioChannels ?? "<empty>"));  				// remove title/year such that match against online ID only  				if (TraktSettings.SkipMoviesWithNoIdsOnSync) {  					pagedMovies.ForEach (m => {  						m.Title = null;  						m.Year = null;  					});  				}  				var response = TraktAPI.TraktAPI.AddMoviesToCollecton (new TraktSyncMoviesCollected {  					Movies = pagedMovies  				});  				TraktLogger.LogTraktResponse (response);  				// remove movies from cache which didn't succeed  				if (response != null && response.NotFound != null && response.NotFound.Movies.Count > 0) {  					TraktCache.RemoveMoviesFromCollection (response.NotFound.Movies);  				}  			}  		}  	}  	#endregion  	#region Add movie ratings to trakt.tv  	if (TraktSettings.SyncRatings && traktRatedMovies != null) {  		var syncRatedMovies = new List<TraktSyncMovieRated> ();  		TraktLogger.Info ("Finding movies to add to trakt.tv ratings");  		syncRatedMovies = (from movie in ratedMovies  		where !traktRatedMovies.ToList ().Exists (c => MovieMatch (movie' c.Movie))  		select new TraktSyncMovieRated {  			Ids = new TraktMovieId {  				Imdb = movie.ImdbID.ToNullIfEmpty ()'  				Tmdb = GetTmdbID (movie).ToNullableInt32 ()  			}'  			Title = movie.Title'  			Year = movie.Year'  			Rating = AdvancedRatings ? GetAdvancedUserRating (movie) : (int)movie.UserSettings.First ().UserRating * 2'  			RatedAt = null'  		}).ToList ();  		TraktLogger.Info ("Adding {0} movies to trakt.tv ratings"' syncRatedMovies.Count);  		if (syncRatedMovies.Count > 0) {  			// update local cache  			TraktCache.AddMoviesToRatings (syncRatedMovies);  			int pageSize = TraktSettings.SyncBatchSize;  			int pages = (int)Math.Ceiling ((double)syncRatedMovies.Count / pageSize);  			for (int i = 0; i < pages; i++) {  				TraktLogger.Info ("Adding movies [{0}/{1}] to trakt.tv ratings"' i + 1' pages);  				var pagedMovies = syncRatedMovies.Skip (i * pageSize).Take (pageSize).ToList ();  				pagedMovies.ForEach (a => TraktLogger.Info ("Adding movie to trakt.tv ratings. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Rating = '{4}/10'"' a.Title' a.Year.HasValue ? a.Year.ToString () : "<empty>"' a.Ids.Imdb ?? "<empty>"' a.Ids.Tmdb.HasValue ? a.Ids.Tmdb.ToString () : "<empty>"' a.Rating));  				// remove title/year such that match against online ID only  				if (TraktSettings.SkipMoviesWithNoIdsOnSync) {  					pagedMovies.ForEach (m => {  						m.Title = null;  						m.Year = null;  					});  				}  				var response = TraktAPI.TraktAPI.AddMoviesToRatings (new TraktSyncMoviesRated {  					Movies = pagedMovies  				});  				TraktLogger.LogTraktResponse (response);  				// remove movies from cache which didn't succeed  				if (response != null && response.NotFound != null && response.NotFound.Movies.Count > 0) {  					TraktCache.RemoveMoviesFromRatings (response.NotFound.Movies);  				}  			}  		}  	}  	#endregion  	#region Rate movies not rated in local database  	if (TraktSettings.SyncRatings && traktRatedMovies != null) {  		foreach (var trm in traktRatedMovies) {  			var localMovie = collectedMovies.FirstOrDefault (m => MovieMatch (m' trm.Movie));  			if (localMovie == null)  				continue;  			if (!AdvancedRatings) {  				if (localMovie.UserSettings.First ().UserRating == null || localMovie.UserSettings.First ().UserRating == 0) {  					// update local collection rating (5 Point Scale)  					int rating = (int)(Math.Round (trm.Rating / 2.0' MidpointRounding.AwayFromZero));  					TraktLogger.Info ("Adding movie rating to match trakt.tv. Rated = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' trm.Rating' trm.Movie.Title' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString () : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString () : "<empty>");  					localMovie.ActiveUserSettings.UserRating = rating;  					localMovie.Commit ();  				}  			} else {  				if (!HasAdvancedRating (localMovie)) {  					TraktLogger.Info ("Adding movie rating to match trakt.tv. Rated = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' trm.Rating' trm.Movie.Title' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString () : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString () : "<empty>");  					SetAdvancedRating (localMovie' trm.Rating);  					localMovie.Commit ();  				}  			}  		}  	}  	#endregion  	#region Remove movies no longer in collection from trakt.tv  	if (TraktSettings.KeepTraktLibraryClean && TraktSettings.MoviePluginCount == 1 && traktCollectedMovies != null) {  		var syncUnCollectedMovies = new List<TraktMovie> ();  		TraktLogger.Info ("Finding movies to remove from trakt.tv collection");  		// workout what movies that are in trakt collection that are not in local collection  		syncUnCollectedMovies = (from tcm in traktCollectedMovies  		where !collectedMovies.Exists (c => MovieMatch (c' tcm.Movie))  		select new TraktMovie {  			Ids = tcm.Movie.Ids'  			Title = tcm.Movie.Title'  			Year = tcm.Movie.Year  		}).ToList ();  		TraktLogger.Info ("Removing {0} movies from trakt.tv collection"' syncUnCollectedMovies.Count);  		if (syncUnCollectedMovies.Count > 0) {  			// update local cache  			TraktCache.RemoveMoviesFromCollection (syncUnCollectedMovies);  			int pageSize = TraktSettings.SyncBatchSize;  			int pages = (int)Math.Ceiling ((double)syncUnCollectedMovies.Count / pageSize);  			for (int i = 0; i < pages; i++) {  				TraktLogger.Info ("Removing movies [{0}/{1}] from trakt.tv collection"' i + 1' pages);  				var pagedMovies = syncUnCollectedMovies.Skip (i * pageSize).Take (pageSize).ToList ();  				pagedMovies.ForEach (s => TraktLogger.Info ("Removing movie from trakt.tv collection' movie no longer exists locally. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' s.Title' s.Year.HasValue ? s.Year.ToString () : "<empty>"' s.Ids.Imdb ?? "<empty>"' s.Ids.Tmdb.HasValue ? s.Ids.Tmdb.ToString () : "<empty>"));  				// remove title/year such that match against online ID only  				if (TraktSettings.SkipMoviesWithNoIdsOnSync) {  					pagedMovies.ForEach (m => {  						m.Title = null;  						m.Year = null;  					});  				}  				var response = TraktAPI.TraktAPI.RemoveMoviesFromCollecton (new TraktSyncMovies {  					Movies = pagedMovies  				});  				TraktLogger.LogTraktResponse (response);  			}  		}  	}  	#endregion  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The following statement contains a magic number: if (TraktSettings.SyncRatings && traktRatedMovies != null) {  	var syncRatedMovies = new List<TraktSyncMovieRated> ();  	TraktLogger.Info ("Finding movies to add to trakt.tv ratings");  	syncRatedMovies = (from movie in ratedMovies  	where !traktRatedMovies.ToList ().Exists (c => MovieMatch (movie' c.Movie))  	select new TraktSyncMovieRated {  		Ids = new TraktMovieId {  			Imdb = movie.ImdbID.ToNullIfEmpty ()'  			Tmdb = GetTmdbID (movie).ToNullableInt32 ()  		}'  		Title = movie.Title'  		Year = movie.Year'  		Rating = AdvancedRatings ? GetAdvancedUserRating (movie) : (int)movie.UserSettings.First ().UserRating * 2'  		RatedAt = null'  	}).ToList ();  	TraktLogger.Info ("Adding {0} movies to trakt.tv ratings"' syncRatedMovies.Count);  	if (syncRatedMovies.Count > 0) {  		// update local cache  		TraktCache.AddMoviesToRatings (syncRatedMovies);  		int pageSize = TraktSettings.SyncBatchSize;  		int pages = (int)Math.Ceiling ((double)syncRatedMovies.Count / pageSize);  		for (int i = 0; i < pages; i++) {  			TraktLogger.Info ("Adding movies [{0}/{1}] to trakt.tv ratings"' i + 1' pages);  			var pagedMovies = syncRatedMovies.Skip (i * pageSize).Take (pageSize).ToList ();  			pagedMovies.ForEach (a => TraktLogger.Info ("Adding movie to trakt.tv ratings. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Rating = '{4}/10'"' a.Title' a.Year.HasValue ? a.Year.ToString () : "<empty>"' a.Ids.Imdb ?? "<empty>"' a.Ids.Tmdb.HasValue ? a.Ids.Tmdb.ToString () : "<empty>"' a.Rating));  			// remove title/year such that match against online ID only  			if (TraktSettings.SkipMoviesWithNoIdsOnSync) {  				pagedMovies.ForEach (m => {  					m.Title = null;  					m.Year = null;  				});  			}  			var response = TraktAPI.TraktAPI.AddMoviesToRatings (new TraktSyncMoviesRated {  				Movies = pagedMovies  			});  			TraktLogger.LogTraktResponse (response);  			// remove movies from cache which didn't succeed  			if (response != null && response.NotFound != null && response.NotFound.Movies.Count > 0) {  				TraktCache.RemoveMoviesFromRatings (response.NotFound.Movies);  			}  		}  	}  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The following statement contains a magic number: syncRatedMovies = (from movie in ratedMovies  where !traktRatedMovies.ToList ().Exists (c => MovieMatch (movie' c.Movie))  select new TraktSyncMovieRated {  	Ids = new TraktMovieId {  		Imdb = movie.ImdbID.ToNullIfEmpty ()'  		Tmdb = GetTmdbID (movie).ToNullableInt32 ()  	}'  	Title = movie.Title'  	Year = movie.Year'  	Rating = AdvancedRatings ? GetAdvancedUserRating (movie) : (int)movie.UserSettings.First ().UserRating * 2'  	RatedAt = null'  }).ToList ();  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The following statement contains a magic number: if (TraktSettings.SyncRatings && traktRatedMovies != null) {  	foreach (var trm in traktRatedMovies) {  		var localMovie = collectedMovies.FirstOrDefault (m => MovieMatch (m' trm.Movie));  		if (localMovie == null)  			continue;  		if (!AdvancedRatings) {  			if (localMovie.UserSettings.First ().UserRating == null || localMovie.UserSettings.First ().UserRating == 0) {  				// update local collection rating (5 Point Scale)  				int rating = (int)(Math.Round (trm.Rating / 2.0' MidpointRounding.AwayFromZero));  				TraktLogger.Info ("Adding movie rating to match trakt.tv. Rated = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' trm.Rating' trm.Movie.Title' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString () : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString () : "<empty>");  				localMovie.ActiveUserSettings.UserRating = rating;  				localMovie.Commit ();  			}  		} else {  			if (!HasAdvancedRating (localMovie)) {  				TraktLogger.Info ("Adding movie rating to match trakt.tv. Rated = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' trm.Rating' trm.Movie.Title' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString () : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString () : "<empty>");  				SetAdvancedRating (localMovie' trm.Rating);  				localMovie.Commit ();  			}  		}  	}  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The following statement contains a magic number: foreach (var trm in traktRatedMovies) {  	var localMovie = collectedMovies.FirstOrDefault (m => MovieMatch (m' trm.Movie));  	if (localMovie == null)  		continue;  	if (!AdvancedRatings) {  		if (localMovie.UserSettings.First ().UserRating == null || localMovie.UserSettings.First ().UserRating == 0) {  			// update local collection rating (5 Point Scale)  			int rating = (int)(Math.Round (trm.Rating / 2.0' MidpointRounding.AwayFromZero));  			TraktLogger.Info ("Adding movie rating to match trakt.tv. Rated = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' trm.Rating' trm.Movie.Title' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString () : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString () : "<empty>");  			localMovie.ActiveUserSettings.UserRating = rating;  			localMovie.Commit ();  		}  	} else {  		if (!HasAdvancedRating (localMovie)) {  			TraktLogger.Info ("Adding movie rating to match trakt.tv. Rated = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' trm.Rating' trm.Movie.Title' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString () : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString () : "<empty>");  			SetAdvancedRating (localMovie' trm.Rating);  			localMovie.Commit ();  		}  	}  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The following statement contains a magic number: if (!AdvancedRatings) {  	if (localMovie.UserSettings.First ().UserRating == null || localMovie.UserSettings.First ().UserRating == 0) {  		// update local collection rating (5 Point Scale)  		int rating = (int)(Math.Round (trm.Rating / 2.0' MidpointRounding.AwayFromZero));  		TraktLogger.Info ("Adding movie rating to match trakt.tv. Rated = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' trm.Rating' trm.Movie.Title' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString () : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString () : "<empty>");  		localMovie.ActiveUserSettings.UserRating = rating;  		localMovie.Commit ();  	}  } else {  	if (!HasAdvancedRating (localMovie)) {  		TraktLogger.Info ("Adding movie rating to match trakt.tv. Rated = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' trm.Rating' trm.Movie.Title' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString () : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString () : "<empty>");  		SetAdvancedRating (localMovie' trm.Rating);  		localMovie.Commit ();  	}  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncLibrary,The following statement contains a magic number: if (localMovie.UserSettings.First ().UserRating == null || localMovie.UserSettings.First ().UserRating == 0) {  	// update local collection rating (5 Point Scale)  	int rating = (int)(Math.Round (trm.Rating / 2.0' MidpointRounding.AwayFromZero));  	TraktLogger.Info ("Adding movie rating to match trakt.tv. Rated = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' trm.Rating' trm.Movie.Title' trm.Movie.Year.HasValue ? trm.Movie.Year.ToString () : "<empty>"' trm.Movie.Ids.Imdb ?? "<empty>"' trm.Movie.Ids.Tmdb.HasValue ? trm.Movie.Ids.Tmdb.ToString () : "<empty>");  	localMovie.ActiveUserSettings.UserRating = rating;  	localMovie.Commit ();  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,Scrobble,The following statement contains a magic number: if (searchResults.Count == 1) {  	matchFound = true;  	currentMovie = searchResults [0];  	LastMovie = searchResults [0];  	IsDVDPlaying = false;  } else {  	#region Check if movie playing is a DVD  	IsDVDPlaying = false;  	// check if filename is DVD/Bluray format  	if (VideoUtility.GetVideoFormat (filename) == VideoFormat.DVD || VideoUtility.GetVideoFormat (filename) == VideoFormat.Bluray) {  		// use the player skin properties to determine movie playing  		// note: movingpictures sets this 2secs after playback  		TraktLogger.Info ("Getting DVD/Bluray movie info from player skin properties");  		System.Threading.Thread.Sleep (3000);  		string title = GUI.GUIUtils.GetProperty ("#Play.Current.Title");  		string year = GUI.GUIUtils.GetProperty ("#Play.Current.Year");  		string imdb = GUI.GUIUtils.GetProperty ("#Play.Current.IMDBNumber");  		// we should always have title/year  		if (string.IsNullOrEmpty (title) || string.IsNullOrEmpty (year)) {  			TraktLogger.Info ("Not enough information from MediaPortal play skin properties to get a movie match' missing Title and/or Year!");  			return false;  		}  		// Check IMDb first  		if (!string.IsNullOrEmpty (imdb)) {  			TraktLogger.Info ("Searching MovingPictures library for movie. IMDb ID = '{0}'"' imdb);  			currentMovie = DBMovieInfo.GetAll ().FirstOrDefault (m => m.ImdbID == imdb);  		} else {  			TraktLogger.Info ("Searching MovingPictures library for movie. Title = '{0}'' Year = '{1}'"' title' year);  			currentMovie = DBMovieInfo.GetAll ().FirstOrDefault (m => m.Title == title && m.Year == Convert.ToInt32 (year));  		}  		if (currentMovie != null) {  			matchFound = true;  			IsDVDPlaying = true;  			LastMovie = currentMovie;  		} else {  			TraktLogger.Info ("Could not find movie in MovingPictures library. Filename = '{0}'' Title = '{1}'' Year = '{2}'"' filename' title' year);  		}  	} else {  		TraktLogger.Debug ("Filename could not be matched to a movie in MovingPictures");  	}  	#endregion  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,Scrobble,The following statement contains a magic number: if (VideoUtility.GetVideoFormat (filename) == VideoFormat.DVD || VideoUtility.GetVideoFormat (filename) == VideoFormat.Bluray) {  	// use the player skin properties to determine movie playing  	// note: movingpictures sets this 2secs after playback  	TraktLogger.Info ("Getting DVD/Bluray movie info from player skin properties");  	System.Threading.Thread.Sleep (3000);  	string title = GUI.GUIUtils.GetProperty ("#Play.Current.Title");  	string year = GUI.GUIUtils.GetProperty ("#Play.Current.Year");  	string imdb = GUI.GUIUtils.GetProperty ("#Play.Current.IMDBNumber");  	// we should always have title/year  	if (string.IsNullOrEmpty (title) || string.IsNullOrEmpty (year)) {  		TraktLogger.Info ("Not enough information from MediaPortal play skin properties to get a movie match' missing Title and/or Year!");  		return false;  	}  	// Check IMDb first  	if (!string.IsNullOrEmpty (imdb)) {  		TraktLogger.Info ("Searching MovingPictures library for movie. IMDb ID = '{0}'"' imdb);  		currentMovie = DBMovieInfo.GetAll ().FirstOrDefault (m => m.ImdbID == imdb);  	} else {  		TraktLogger.Info ("Searching MovingPictures library for movie. Title = '{0}'' Year = '{1}'"' title' year);  		currentMovie = DBMovieInfo.GetAll ().FirstOrDefault (m => m.Title == title && m.Year == Convert.ToInt32 (year));  	}  	if (currentMovie != null) {  		matchFound = true;  		IsDVDPlaying = true;  		LastMovie = currentMovie;  	} else {  		TraktLogger.Info ("Could not find movie in MovingPictures library. Filename = '{0}'' Title = '{1}'' Year = '{2}'"' filename' title' year);  	}  } else {  	TraktLogger.Debug ("Filename could not be matched to a movie in MovingPictures");  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,Scrobble,The following statement contains a magic number: System.Threading.Thread.Sleep (3000);  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,StopScrobble,The following statement contains a magic number: if (currentMovie != null) {  	Double watchPercent = MovingPicturesCore.Settings.MinimumWatchPercentage / 100.0;  	#region DVD Workaround  	// MovingPictures does not fire off a watched event for completed DVDs  	if (IsDVDPlaying) {  		IsDVDPlaying = false;  		TraktLogger.Info ("DVD/Bluray stopped' checking if considered watched. Movie: '{0}'' Current Position: '{1}'' Duration: '{2}'"' currentMovie.Title' g_Player.CurrentPosition' g_Player.Duration);  		// Ignore watched percentage of video and scrobble anyway  		// MovingPictures also doesn't appear to store the mediainfo correct for DVDs  		// It appears to add up all videos on the DVD structure  		if (TraktSettings.IgnoreWatchedPercentOnDVD) {  			TraktLogger.Info ("Ignoring watched percent on DVD' sending watched state to trakt.tv");  			ShowRateDialog (currentMovie);  			StopMovieScrobble (currentMovie' true);  			RemoveMovieCriteriaFromRecommendationsNode (currentMovie.ImdbID);  			RemoveMovieCriteriaFromWatchlistNode (currentMovie.ImdbID);  			currentMovie = null;  			return;  		}  		// check percentage watched' if duration is '0' scrobble anyway as it could be back   		// at the menu after main feature has completed.  		if (g_Player.Duration == 0 || (g_Player.CurrentPosition / g_Player.Duration) >= watchPercent) {  			ShowRateDialog (currentMovie);  			StopMovieScrobble (currentMovie' true);  			RemoveMovieCriteriaFromRecommendationsNode (currentMovie.ImdbID);  			RemoveMovieCriteriaFromWatchlistNode (currentMovie.ImdbID);  			currentMovie = null;  			return;  		}  	}  	#endregion  	if (g_Player.Duration != 0) {  		// no point sending stop scrobble if we receive movie watched event from movpics  		if ((g_Player.CurrentPosition / g_Player.Duration) >= watchPercent) {  			currentMovie = null;  			return;  		}  	}  	StopMovieScrobble (currentMovie);  	currentMovie = null;  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,The following statement contains a magic number: foreach (var item in playbackData.Where (p => p.Type == "movie")) {  	DateTime itemPausedAt;  	if (DateTime.TryParse (item.PausedAt' out itemPausedAt)) {  		// check if we need to process  		if (itemPausedAt <= lastPausedItemProcessed)  			continue;  	}  	// get movie from local database if it exists  	var movie = DBMovieInfo.GetAll ().FirstOrDefault (m => ((m.ImdbID == item.Movie.Ids.Imdb) && !string.IsNullOrEmpty (item.Movie.Ids.Imdb)) || m.Title.ToLowerInvariant () == item.Movie.Title.ToLowerInvariant () && m.Year == item.Movie.Year);  	if (movie == null)  		continue;  	// if the local playtime is not known then skip  	if (movie.LocalMedia == null || movie.LocalMedia.First ().Duration <= 0) {  		TraktLogger.Warning ("Skipping item with invalid runtime in database. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb);  		continue;  	}  	// check if movie is restricted  	var filename = movie.LocalMedia [0].FullPath;  	if (TraktSettings.BlockedFilenames.Any (f => f == filename) || TraktSettings.BlockedFolders.Any (f => f == Path.GetDirectoryName (filename))) {  		TraktLogger.Info ("Ignoring resume data sync for movie' filename/folder is ignored by user. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' Filename = '{3}'"' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb' filename);  		continue;  	}  	// if we are syncing on plugin entry we could possibly still be sending paused data to trakt  	// after stopping video (stopping video == re-entry to plugin)' prevent possibly reverting stale resumed data  	// we already have updated resume data when stopping video in real-time  	if (TraktSettings.SyncPlaybackOnEnterPlugin && LastMovie != null && LastMovie.LocalMedia [0].FullPath == filename)  		continue;  	// update the stop time based on percentage watched  	// movpics stores duration (mediainfo) in milliseconds and resume_time in secs  	var resumeData = Convert.ToInt32 ((movie.LocalMedia.First ().Duration / 1000.0) * (item.Progress / 100.0)) - TraktSettings.SyncResumeDelta;  	if (resumeData < 0)  		resumeData = 0;  	DBUserMovieSettings userSetting = movie.ActiveUserSettings;  	if (userSetting.ResumeTime != resumeData) {  		// Note: will need to be a bit smarter for multi-part files (who the heck still does that!)  		TraktLogger.Info ("Setting resume time '{0}' for movie. Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'"' new TimeSpan (0' 0' 0' resumeData)' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb);  		userSetting.ResumePart = 1;  		userSetting.ResumeTime = resumeData;  		userSetting.Commit ();  	}  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,SyncProgress,The following statement contains a magic number: foreach (var item in playbackData.Where (p => p.Type == "movie")) {  	DateTime itemPausedAt;  	if (DateTime.TryParse (item.PausedAt' out itemPausedAt)) {  		// check if we need to process  		if (itemPausedAt <= lastPausedItemProcessed)  			continue;  	}  	// get movie from local database if it exists  	var movie = DBMovieInfo.GetAll ().FirstOrDefault (m => ((m.ImdbID == item.Movie.Ids.Imdb) && !string.IsNullOrEmpty (item.Movie.Ids.Imdb)) || m.Title.ToLowerInvariant () == item.Movie.Title.ToLowerInvariant () && m.Year == item.Movie.Year);  	if (movie == null)  		continue;  	// if the local playtime is not known then skip  	if (movie.LocalMedia == null || movie.LocalMedia.First ().Duration <= 0) {  		TraktLogger.Warning ("Skipping item with invalid runtime in database. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb);  		continue;  	}  	// check if movie is restricted  	var filename = movie.LocalMedia [0].FullPath;  	if (TraktSettings.BlockedFilenames.Any (f => f == filename) || TraktSettings.BlockedFolders.Any (f => f == Path.GetDirectoryName (filename))) {  		TraktLogger.Info ("Ignoring resume data sync for movie' filename/folder is ignored by user. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' Filename = '{3}'"' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb' filename);  		continue;  	}  	// if we are syncing on plugin entry we could possibly still be sending paused data to trakt  	// after stopping video (stopping video == re-entry to plugin)' prevent possibly reverting stale resumed data  	// we already have updated resume data when stopping video in real-time  	if (TraktSettings.SyncPlaybackOnEnterPlugin && LastMovie != null && LastMovie.LocalMedia [0].FullPath == filename)  		continue;  	// update the stop time based on percentage watched  	// movpics stores duration (mediainfo) in milliseconds and resume_time in secs  	var resumeData = Convert.ToInt32 ((movie.LocalMedia.First ().Duration / 1000.0) * (item.Progress / 100.0)) - TraktSettings.SyncResumeDelta;  	if (resumeData < 0)  		resumeData = 0;  	DBUserMovieSettings userSetting = movie.ActiveUserSettings;  	if (userSetting.ResumeTime != resumeData) {  		// Note: will need to be a bit smarter for multi-part files (who the heck still does that!)  		TraktLogger.Info ("Setting resume time '{0}' for movie. Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'"' new TimeSpan (0' 0' 0' resumeData)' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb);  		userSetting.ResumePart = 1;  		userSetting.ResumeTime = resumeData;  		userSetting.Commit ();  	}  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,StopMovieScrobble,The following statement contains a magic number: if (forceWatched) {  	// override the percentage so it's marked as watched  	scrobbleData.Progress = 100;  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,StopMovieScrobble,The following statement contains a magic number: scrobbleData.Progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectUpdatedEx,The following statement contains a magic number: if (ui.RatingChanged () && userMovieSettings.UserRating > 0 && !TraktRateSent) {  	TraktLogger.Info ("Received Rate event in MovingPictures for movie. Rating = '{0}/5'' Title = '{1}'' Year = '{2}'' IMDB ID = '{3}'' TMDb ID = '{4}'"' userMovieSettings.UserRating' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID (movie) ?? "<empty>");  	var syncThread = new Thread (objMovie => {  		var tMovie = objMovie as DBMovieInfo;  		var traktMovie = new TraktSyncMovieRated {  			Ids = new TraktMovieId {  				Imdb = tMovie.ImdbID'  				Tmdb = GetTmdbID (tMovie).ToNullableInt32 ()  			}'  			Title = tMovie.Title'  			Year = tMovie.Year'  			RatedAt = DateTime.UtcNow.ToISO8601 ()'  			Rating = (int)userMovieSettings.UserRating * 2  		};  		var response = TraktAPI.TraktAPI.AddMovieToRatings (traktMovie);  		TraktLogger.LogTraktResponse (response);  	}) {  		IsBackground = true'  		Name = "Sync"  	};  	syncThread.Start (movie);  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectInserted,The following statement contains a magic number: if (obj.GetType () == typeof(DBWatchedHistory)) {  	// movie has just been watched  	DBWatchedHistory watchedEvent = (DBWatchedHistory)obj;  	if (!TraktSettings.BlockedFilenames.Contains (watchedEvent.Movie.LocalMedia [0].FullPath) && !TraktSettings.BlockedFolders.Any (f => watchedEvent.Movie.LocalMedia [0].FullPath.ToLowerInvariant ().Contains (f.ToLowerInvariant ()))) {  		TraktLogger.Info ("Watched History updated in MovingPictures. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' watchedEvent.Movie.Title' watchedEvent.Movie.Year' watchedEvent.Movie.ImdbID ?? "<empty>"' GetTmdbID (watchedEvent.Movie) ?? "<empty>");  		ShowRateDialog (watchedEvent.Movie);  		StopMovieScrobble (watchedEvent.Movie);  		// remove from watchlist and recommendation categories and filters menu  		// watched items are auto-removed online for these lists so we can do this now locally  		RemoveMovieCriteriaFromRecommendationsNode (watchedEvent.Movie.ImdbID);  		RemoveMovieCriteriaFromWatchlistNode (watchedEvent.Movie.ImdbID);  	} else {  		TraktLogger.Info ("Movie was blocked and not added to watched history on trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' watchedEvent.Movie.Title' watchedEvent.Movie.Year' watchedEvent.Movie.ImdbID ?? "<empty>"' GetTmdbID (watchedEvent.Movie) ?? "<empty>");  	}  } else if (obj.GetType () == typeof(DBMovieInfo) && TraktSettings.SyncLibrary) {  	// movie was inserted into the database  	var insertedMovie = obj as DBMovieInfo;  	if (!TraktSettings.BlockedFilenames.Contains (insertedMovie.LocalMedia [0].FullPath) && !TraktSettings.BlockedFolders.Any (f => insertedMovie.LocalMedia [0].FullPath.ToLowerInvariant ().Contains (f.ToLowerInvariant ()))) {  		var syncThread = new Thread (objMovie => {  			// wait for import to be 100% complete including MediaInfo  			Thread.Sleep (30000);  			var tMovie = objMovie as DBMovieInfo;  			var traktMovie = new TraktSyncMovieCollected {  				Ids = new TraktMovieId {  					Imdb = tMovie.ImdbID'  					Tmdb = GetTmdbID (tMovie).ToNullableInt32 ()  				}'  				Title = tMovie.Title'  				Year = tMovie.Year'  				CollectedAt = DateTime.UtcNow.ToISO8601 ()'  				MediaType = GetMovieMediaType (tMovie)'  				Resolution = GetMovieResolution (tMovie)'  				AudioCodec = GetMovieAudioCodec (tMovie)'  				AudioChannels = GetMovieAudioChannels (tMovie)'  				Is3D = IsMovie3D (tMovie)  			};  			TraktLogger.Info ("New movie added into MovingPictures' adding to trakt.tv collection. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Added = '{4}'' MediaType = '{5}'' Resolution = '{6}'' Audio Codec = '{7}'' Audio Channels = '{8}'"' traktMovie.Title' traktMovie.Year.HasValue ? traktMovie.Year.ToString () : "<empty>"' traktMovie.Ids.Imdb ?? "<empty>"' traktMovie.Ids.Tmdb.HasValue ? traktMovie.Ids.Tmdb.ToString () : "<empty>"' traktMovie.CollectedAt' traktMovie.MediaType ?? "<empty>"' traktMovie.Resolution ?? "<empty>"' traktMovie.AudioCodec ?? "<empty>"' traktMovie.AudioChannels ?? "<empty>");  			// check if we already have the movie collected online  			if (traktMovie.IsCollected ()) {  				TraktLogger.Info ("Skipping movie addition to trakt.tv collection' movie already exists in online collection.");  				return;  			}  			// insert movie into local cache - with title/year  			TraktCache.AddMovieToCollection (traktMovie);  			// check for valid IDs  			if (TraktSettings.SkipMoviesWithNoIdsOnSync) {  				traktMovie.Title = null;  				traktMovie.Year = null;  				if (!BasicHandler.IsValidImdb (traktMovie.Ids.Imdb) && traktMovie.Ids.Tmdb == null) {  					TraktLogger.Info ("Skipping movie addition to trakt.tv collection' movie has no valid online ID's.");  					return;  				}  			}  			// insert online  			var response = TraktAPI.TraktAPI.AddMovieToCollection (traktMovie);  			TraktLogger.LogTraktResponse (response);  		}) {  			IsBackground = true'  			Name = "Sync"  		};  		syncThread.Start (insertedMovie);  	} else {  		TraktLogger.Info ("Movie was blocked and not added to collection on trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' insertedMovie.Title' insertedMovie.Year' insertedMovie.ImdbID ?? "<empty>"' GetTmdbID (insertedMovie) ?? "<empty>");  	}  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectInserted,The following statement contains a magic number: if (obj.GetType () == typeof(DBMovieInfo) && TraktSettings.SyncLibrary) {  	// movie was inserted into the database  	var insertedMovie = obj as DBMovieInfo;  	if (!TraktSettings.BlockedFilenames.Contains (insertedMovie.LocalMedia [0].FullPath) && !TraktSettings.BlockedFolders.Any (f => insertedMovie.LocalMedia [0].FullPath.ToLowerInvariant ().Contains (f.ToLowerInvariant ()))) {  		var syncThread = new Thread (objMovie => {  			// wait for import to be 100% complete including MediaInfo  			Thread.Sleep (30000);  			var tMovie = objMovie as DBMovieInfo;  			var traktMovie = new TraktSyncMovieCollected {  				Ids = new TraktMovieId {  					Imdb = tMovie.ImdbID'  					Tmdb = GetTmdbID (tMovie).ToNullableInt32 ()  				}'  				Title = tMovie.Title'  				Year = tMovie.Year'  				CollectedAt = DateTime.UtcNow.ToISO8601 ()'  				MediaType = GetMovieMediaType (tMovie)'  				Resolution = GetMovieResolution (tMovie)'  				AudioCodec = GetMovieAudioCodec (tMovie)'  				AudioChannels = GetMovieAudioChannels (tMovie)'  				Is3D = IsMovie3D (tMovie)  			};  			TraktLogger.Info ("New movie added into MovingPictures' adding to trakt.tv collection. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Added = '{4}'' MediaType = '{5}'' Resolution = '{6}'' Audio Codec = '{7}'' Audio Channels = '{8}'"' traktMovie.Title' traktMovie.Year.HasValue ? traktMovie.Year.ToString () : "<empty>"' traktMovie.Ids.Imdb ?? "<empty>"' traktMovie.Ids.Tmdb.HasValue ? traktMovie.Ids.Tmdb.ToString () : "<empty>"' traktMovie.CollectedAt' traktMovie.MediaType ?? "<empty>"' traktMovie.Resolution ?? "<empty>"' traktMovie.AudioCodec ?? "<empty>"' traktMovie.AudioChannels ?? "<empty>");  			// check if we already have the movie collected online  			if (traktMovie.IsCollected ()) {  				TraktLogger.Info ("Skipping movie addition to trakt.tv collection' movie already exists in online collection.");  				return;  			}  			// insert movie into local cache - with title/year  			TraktCache.AddMovieToCollection (traktMovie);  			// check for valid IDs  			if (TraktSettings.SkipMoviesWithNoIdsOnSync) {  				traktMovie.Title = null;  				traktMovie.Year = null;  				if (!BasicHandler.IsValidImdb (traktMovie.Ids.Imdb) && traktMovie.Ids.Tmdb == null) {  					TraktLogger.Info ("Skipping movie addition to trakt.tv collection' movie has no valid online ID's.");  					return;  				}  			}  			// insert online  			var response = TraktAPI.TraktAPI.AddMovieToCollection (traktMovie);  			TraktLogger.LogTraktResponse (response);  		}) {  			IsBackground = true'  			Name = "Sync"  		};  		syncThread.Start (insertedMovie);  	} else {  		TraktLogger.Info ("Movie was blocked and not added to collection on trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' insertedMovie.Title' insertedMovie.Year' insertedMovie.ImdbID ?? "<empty>"' GetTmdbID (insertedMovie) ?? "<empty>");  	}  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectInserted,The following statement contains a magic number: if (!TraktSettings.BlockedFilenames.Contains (insertedMovie.LocalMedia [0].FullPath) && !TraktSettings.BlockedFolders.Any (f => insertedMovie.LocalMedia [0].FullPath.ToLowerInvariant ().Contains (f.ToLowerInvariant ()))) {  	var syncThread = new Thread (objMovie => {  		// wait for import to be 100% complete including MediaInfo  		Thread.Sleep (30000);  		var tMovie = objMovie as DBMovieInfo;  		var traktMovie = new TraktSyncMovieCollected {  			Ids = new TraktMovieId {  				Imdb = tMovie.ImdbID'  				Tmdb = GetTmdbID (tMovie).ToNullableInt32 ()  			}'  			Title = tMovie.Title'  			Year = tMovie.Year'  			CollectedAt = DateTime.UtcNow.ToISO8601 ()'  			MediaType = GetMovieMediaType (tMovie)'  			Resolution = GetMovieResolution (tMovie)'  			AudioCodec = GetMovieAudioCodec (tMovie)'  			AudioChannels = GetMovieAudioChannels (tMovie)'  			Is3D = IsMovie3D (tMovie)  		};  		TraktLogger.Info ("New movie added into MovingPictures' adding to trakt.tv collection. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Date Added = '{4}'' MediaType = '{5}'' Resolution = '{6}'' Audio Codec = '{7}'' Audio Channels = '{8}'"' traktMovie.Title' traktMovie.Year.HasValue ? traktMovie.Year.ToString () : "<empty>"' traktMovie.Ids.Imdb ?? "<empty>"' traktMovie.Ids.Tmdb.HasValue ? traktMovie.Ids.Tmdb.ToString () : "<empty>"' traktMovie.CollectedAt' traktMovie.MediaType ?? "<empty>"' traktMovie.Resolution ?? "<empty>"' traktMovie.AudioCodec ?? "<empty>"' traktMovie.AudioChannels ?? "<empty>");  		// check if we already have the movie collected online  		if (traktMovie.IsCollected ()) {  			TraktLogger.Info ("Skipping movie addition to trakt.tv collection' movie already exists in online collection.");  			return;  		}  		// insert movie into local cache - with title/year  		TraktCache.AddMovieToCollection (traktMovie);  		// check for valid IDs  		if (TraktSettings.SkipMoviesWithNoIdsOnSync) {  			traktMovie.Title = null;  			traktMovie.Year = null;  			if (!BasicHandler.IsValidImdb (traktMovie.Ids.Imdb) && traktMovie.Ids.Tmdb == null) {  				TraktLogger.Info ("Skipping movie addition to trakt.tv collection' movie has no valid online ID's.");  				return;  			}  		}  		// insert online  		var response = TraktAPI.TraktAPI.AddMovieToCollection (traktMovie);  		TraktLogger.LogTraktResponse (response);  	}) {  		IsBackground = true'  		Name = "Sync"  	};  	syncThread.Start (insertedMovie);  } else {  	TraktLogger.Info ("Movie was blocked and not added to collection on trakt.tv. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' insertedMovie.Title' insertedMovie.Year' insertedMovie.ImdbID ?? "<empty>"' GetTmdbID (insertedMovie) ?? "<empty>");  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,DatabaseManager_ObjectInserted,The following statement contains a magic number: Thread.Sleep (30000);  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: if (movie.ActualRuntime != 0) {  	// MovingPictures stores duration in milliseconds  	duration = movie.ActualRuntime / 1000.0;  } else if (g_Player.Duration != 0.0) {  	// g_Player reports in seconds  	duration = g_Player.Duration;  } else {  	// MovingPictures stores scraped runtime in minutes  	duration = movie.Runtime * 60.0;  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: if (movie.ActualRuntime != 0) {  	// MovingPictures stores duration in milliseconds  	duration = movie.ActualRuntime / 1000.0;  } else if (g_Player.Duration != 0.0) {  	// g_Player reports in seconds  	duration = g_Player.Duration;  } else {  	// MovingPictures stores scraped runtime in minutes  	duration = movie.Runtime * 60.0;  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: duration = movie.ActualRuntime / 1000.0;  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: if (g_Player.Duration != 0.0) {  	// g_Player reports in seconds  	duration = g_Player.Duration;  } else {  	// MovingPictures stores scraped runtime in minutes  	duration = movie.Runtime * 60.0;  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: duration = movie.Runtime * 60.0;  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: if (isDVD && duration > (4 * 60 * 60))  	duration = movie.Runtime * 60.0;  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: if (isDVD && duration > (4 * 60 * 60))  	duration = movie.Runtime * 60.0;  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: if (isDVD && duration > (4 * 60 * 60))  	duration = movie.Runtime * 60.0;  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: if (isDVD && duration > (4 * 60 * 60))  	duration = movie.Runtime * 60.0;  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: duration = movie.Runtime * 60.0;  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: if (isDVD && duration < 900.0)  	duration = 120 * 60;  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: if (isDVD && duration < 900.0)  	duration = 120 * 60;  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: if (isDVD && duration < 900.0)  	duration = 120 * 60;  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: duration = 120 * 60;  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieDuration,The following statement contains a magic number: duration = 120 * 60;  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetAdvancedUserRating,The following statement contains a magic number: if (movie.UserSettings.First ().UserRatingBase10.GetValueOrDefault (0) > 0)  	return (int)movie.UserSettings.First ().UserRatingBase10;  else if (movie.UserSettings.First ().UserRating.GetValueOrDefault (0) > 0)  	return (int)movie.UserSettings.First ().UserRating * 2;  else  	return 0;  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetAdvancedUserRating,The following statement contains a magic number: if (movie.UserSettings.First ().UserRating.GetValueOrDefault (0) > 0)  	return (int)movie.UserSettings.First ().UserRating * 2;  else  	return 0;  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetAdvancedUserRating,The following statement contains a magic number: return (int)movie.UserSettings.First ().UserRating * 2;  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The following statement contains a magic number: if (rating > 0) {  	TraktLogger.Info ("Applying rating for movie. Rating = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDB ID = '{3}'' TMDb ID = '{4}'"' rating' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID (movie) ?? "<empty>");  	if (!AdvancedRatings) {  		movieToRate.ActiveUserSettings.UserRating = (int)(Math.Round (rating / 2.0' MidpointRounding.AwayFromZero));  	} else {  		SetAdvancedRating (movieToRate' rating);  	}  	// update local cache  	TraktCache.AddMovieToRatings (rateObject' rating);  	// Publish to skin - same as how MovingPictures does it i.e. lose precision due to rounding  	// Make sure we're still showing the active movie  	if (GUIUtils.GetProperty ("#MovingPictures.SelectedMovie.title").Equals (movieToRate.Title)) {  		if (!AdvancedRatings) {  			GUICommon.SetProperty ("#MovingPictures.UserMovieSettings.user_rating"' movieToRate.ActiveUserSettings.UserRating.ToString ());  			GUICommon.SetProperty ("#MovingPictures.UserMovieSettings.10point_user_rating"' (movieToRate.ActiveUserSettings.UserRating * 2).ToString ());  		} else {  			GUICommon.SetProperty ("#MovingPictures.UserMovieSettings.10point_user_rating"' rating);  		}  	}  	if (movieToRate.Popularity == 0 && movieToRate.Score == 0) {  		movieToRate.Score = rating;  		movieToRate.Popularity = 1;  	}  } else {  	// unrate  	TraktLogger.Info ("Removing rating for movie. Title = '{0}'' Year = '{1}'' IMDB ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID (movie) ?? "<empty>");  	movieToRate.ActiveUserSettings.UserRating = 0;  	if (AdvancedRatings)  		SetAdvancedRating (movieToRate' 0);  	// update local cache  	TraktCache.RemoveMovieFromRatings (rateObject);  	// Make sure we're still showing the active movie  	if (GUIUtils.GetProperty ("#MovingPictures.SelectedMovie.title").Equals (movieToRate.Title)) {  		GUICommon.SetProperty ("#MovingPictures.UserMovieSettings.user_rating"' " ");  		GUICommon.SetProperty ("#MovingPictures.UserMovieSettings.10point_user_rating"' " ");  	}  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The following statement contains a magic number: if (rating > 0) {  	TraktLogger.Info ("Applying rating for movie. Rating = '{0}/10'' Title = '{1}'' Year = '{2}'' IMDB ID = '{3}'' TMDb ID = '{4}'"' rating' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID (movie) ?? "<empty>");  	if (!AdvancedRatings) {  		movieToRate.ActiveUserSettings.UserRating = (int)(Math.Round (rating / 2.0' MidpointRounding.AwayFromZero));  	} else {  		SetAdvancedRating (movieToRate' rating);  	}  	// update local cache  	TraktCache.AddMovieToRatings (rateObject' rating);  	// Publish to skin - same as how MovingPictures does it i.e. lose precision due to rounding  	// Make sure we're still showing the active movie  	if (GUIUtils.GetProperty ("#MovingPictures.SelectedMovie.title").Equals (movieToRate.Title)) {  		if (!AdvancedRatings) {  			GUICommon.SetProperty ("#MovingPictures.UserMovieSettings.user_rating"' movieToRate.ActiveUserSettings.UserRating.ToString ());  			GUICommon.SetProperty ("#MovingPictures.UserMovieSettings.10point_user_rating"' (movieToRate.ActiveUserSettings.UserRating * 2).ToString ());  		} else {  			GUICommon.SetProperty ("#MovingPictures.UserMovieSettings.10point_user_rating"' rating);  		}  	}  	if (movieToRate.Popularity == 0 && movieToRate.Score == 0) {  		movieToRate.Score = rating;  		movieToRate.Popularity = 1;  	}  } else {  	// unrate  	TraktLogger.Info ("Removing rating for movie. Title = '{0}'' Year = '{1}'' IMDB ID = '{2}'' TMDb ID = '{3}'"' movie.Title' movie.Year' movie.ImdbID ?? "<empty>"' GetTmdbID (movie) ?? "<empty>");  	movieToRate.ActiveUserSettings.UserRating = 0;  	if (AdvancedRatings)  		SetAdvancedRating (movieToRate' 0);  	// update local cache  	TraktCache.RemoveMovieFromRatings (rateObject);  	// Make sure we're still showing the active movie  	if (GUIUtils.GetProperty ("#MovingPictures.SelectedMovie.title").Equals (movieToRate.Title)) {  		GUICommon.SetProperty ("#MovingPictures.UserMovieSettings.user_rating"' " ");  		GUICommon.SetProperty ("#MovingPictures.UserMovieSettings.10point_user_rating"' " ");  	}  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The following statement contains a magic number: if (!AdvancedRatings) {  	movieToRate.ActiveUserSettings.UserRating = (int)(Math.Round (rating / 2.0' MidpointRounding.AwayFromZero));  } else {  	SetAdvancedRating (movieToRate' rating);  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The following statement contains a magic number: movieToRate.ActiveUserSettings.UserRating = (int)(Math.Round (rating / 2.0' MidpointRounding.AwayFromZero));  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The following statement contains a magic number: if (GUIUtils.GetProperty ("#MovingPictures.SelectedMovie.title").Equals (movieToRate.Title)) {  	if (!AdvancedRatings) {  		GUICommon.SetProperty ("#MovingPictures.UserMovieSettings.user_rating"' movieToRate.ActiveUserSettings.UserRating.ToString ());  		GUICommon.SetProperty ("#MovingPictures.UserMovieSettings.10point_user_rating"' (movieToRate.ActiveUserSettings.UserRating * 2).ToString ());  	} else {  		GUICommon.SetProperty ("#MovingPictures.UserMovieSettings.10point_user_rating"' rating);  	}  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The following statement contains a magic number: if (!AdvancedRatings) {  	GUICommon.SetProperty ("#MovingPictures.UserMovieSettings.user_rating"' movieToRate.ActiveUserSettings.UserRating.ToString ());  	GUICommon.SetProperty ("#MovingPictures.UserMovieSettings.10point_user_rating"' (movieToRate.ActiveUserSettings.UserRating * 2).ToString ());  } else {  	GUICommon.SetProperty ("#MovingPictures.UserMovieSettings.10point_user_rating"' rating);  }  
Magic Number,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,ShowRateDialog,The following statement contains a magic number: GUICommon.SetProperty ("#MovingPictures.UserMovieSettings.10point_user_rating"' (movieToRate.ActiveUserSettings.UserRating * 2).ToString ());  
Magic Number,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,MyVideos,The following statement contains a magic number: if (new Version (version) < new Version (1' 15' 100' 0)) {  	throw new FileLoadException ("MediaPortal does not the meet minimum requirements!");  }  
Magic Number,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,MyVideos,The following statement contains a magic number: if (new Version (version) < new Version (1' 15' 100' 0)) {  	throw new FileLoadException ("MediaPortal does not the meet minimum requirements!");  }  
Magic Number,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,SyncProgress,The following statement contains a magic number: foreach (var item in playbackData.Where (p => p.Type == "movie")) {  	DateTime itemPausedAt;  	if (DateTime.TryParse (item.PausedAt' out itemPausedAt)) {  		// check if we need to process  		if (itemPausedAt <= lastPausedItemProcessed)  			continue;  	}  	// get movie from local database if it exists  	var movie = GetMovies ().FirstOrDefault (m => (m.IMDBNumber == item.Movie.Ids.Imdb && !string.IsNullOrEmpty (item.Movie.Ids.Imdb)) || (m.TMDBNumber.ToNullableInt32 () == item.Movie.Ids.Tmdb && item.Movie.Ids.Tmdb != null) || (m.Title.ToLowerInvariant () == item.Movie.Title.ToLowerInvariant () && m.Year == item.Movie.Year));  	if (movie == null)  		continue;  	// if the local playtime is not known then skip  	if (movie.Duration <= 0) {  		TraktLogger.Warning ("Skipping item with invalid runtime in database' Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb.ToLogString ()' item.Movie.Ids.Tmdb.ToLogString ());  		continue;  	}  	// update the stop time based on percentage watched  	// the video database stores duration in seconds (runtime in minutes if duration not available) and stopTime in secs  	var resumeData = Convert.ToInt32 (movie.Duration * (item.Progress / 100.0)) - TraktSettings.SyncResumeDelta;  	if (resumeData < 0)  		resumeData = 0;  	if (string.IsNullOrEmpty (movie.VideoFileName)) {  		TraktLogger.Warning ("Skipping item with invalid filename in database' Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'"' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb.ToLogString ()' item.Movie.Ids.Tmdb.ToLogString ());  		continue;  	}  	// if we are syncing on plugin entry we could possibly still be sending paused data to trakt  	// after stopping video (stopping video == re-entry to plugin)' prevent possibly reverting stale resumed data  	// we already have updated resume data when stopping video in real-time  	if (TraktSettings.SyncPlaybackOnEnterPlugin && LastMovie != null && LastMovie.VideoFileName == movie.VideoFileName)  		continue;  	// check if movie is restricted  	if (TraktSettings.BlockedFilenames.Any (f => f == movie.VideoFileName) || TraktSettings.BlockedFolders.Any (f => f == Path.GetDirectoryName (movie.VideoFileName))) {  		TraktLogger.Info ("Ignoring resume data sync for movie' filename/folder is ignored by user. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'' TMDb ID = '{3}'' Filename = '{4}'"' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb.ToLogString ()' item.Movie.Ids.Tmdb.ToLogString ()' movie.VideoFileName);  		continue;  	}  	// Get FileId from filename  	int fileId = VideoDatabase.GetMovieId (movie.VideoFileName);  	// get current stop time for movie  	int currentResumeData = VideoDatabase.GetMovieStopTime (fileId);  	if (currentResumeData != resumeData) {  		// Note: will need to be a bit smarter for multi-part files (who the heck still does that!)  		TraktLogger.Info ("Setting resume time '{0}' for movie' Title = '{1}'' Year = '{2}'' IMDb ID = '{3}'' TMDb ID = '{4}'"' new TimeSpan (0' 0' 0' resumeData)' item.Movie.Title' item.Movie.Year' item.Movie.Ids.Imdb.ToLogString ()' item.Movie.Ids.Tmdb.ToLogString ());  		VideoDatabase.SetMovieStopTime (fileId' resumeData);  	}  }  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,Scrobble,The following statement contains a magic number: if (scrobbleEpisode.IsDoubleEpisode) {  	// get both episodes from filename query  	var condition = new SQLCondition ();  	condition.Add (new DBEpisode ()' DBEpisode.cFilename' scrobbleEpisode [DBEpisode.cFilename]' SQLConditionType.Equal);  	var episodes = DBEpisode.Get (condition' false);  	if (episodes == null || episodes.Count != 2) {  		TraktLogger.Error ("Unable to retrieve double episode information from tvseries database for current playing episode. Title = '{0}'"' scrobbleEpisode.ToString ());  		return;  	}  	// store the second episode so we can use seperately  	SecondEpisode = episodes [1];  	// if we're already past the half way mark scrobble the second part only  	if (progress > 50) {  		// don't scrobble the first part when we stop  		FirstEpisodeWatched = true;  		TraktLogger.Info ("Sending start scrobble of second part of episode to trakt.tv. Show Title = '{0}'' Season = '{1}'' Episode = '{2}'' Episode Title = '{3}'' Show TVDb ID = '{4}'' Episode TVDb ID = '{5}'"' show [DBOnlineSeries.cOriginalName]' episodes [1] [DBOnlineEpisode.cSeasonIndex]' episodes [1] [DBOnlineEpisode.cEpisodeIndex]' episodes [1] [DBOnlineEpisode.cEpisodeName]' episodes [1] [DBOnlineEpisode.cSeriesID]' episodes [1] [DBOnlineEpisode.cID]);  		scrobbleData = CreateScrobbleData (episodes [1]' progress);  		if (scrobbleData == null)  			return;  		var response = TraktAPI.TraktAPI.StartEpisodeScrobble (scrobbleData);  		TraktLogger.LogTraktResponse (response);  		return;  	}  }  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,Scrobble,The following statement contains a magic number: if (scrobbleEpisode.IsDoubleEpisode) {  	// get both episodes from filename query  	var condition = new SQLCondition ();  	condition.Add (new DBEpisode ()' DBEpisode.cFilename' scrobbleEpisode [DBEpisode.cFilename]' SQLConditionType.Equal);  	var episodes = DBEpisode.Get (condition' false);  	if (episodes == null || episodes.Count != 2) {  		TraktLogger.Error ("Unable to retrieve double episode information from tvseries database for current playing episode. Title = '{0}'"' scrobbleEpisode.ToString ());  		return;  	}  	// store the second episode so we can use seperately  	SecondEpisode = episodes [1];  	// if we're already past the half way mark scrobble the second part only  	if (progress > 50) {  		// don't scrobble the first part when we stop  		FirstEpisodeWatched = true;  		TraktLogger.Info ("Sending start scrobble of second part of episode to trakt.tv. Show Title = '{0}'' Season = '{1}'' Episode = '{2}'' Episode Title = '{3}'' Show TVDb ID = '{4}'' Episode TVDb ID = '{5}'"' show [DBOnlineSeries.cOriginalName]' episodes [1] [DBOnlineEpisode.cSeasonIndex]' episodes [1] [DBOnlineEpisode.cEpisodeIndex]' episodes [1] [DBOnlineEpisode.cEpisodeName]' episodes [1] [DBOnlineEpisode.cSeriesID]' episodes [1] [DBOnlineEpisode.cID]);  		scrobbleData = CreateScrobbleData (episodes [1]' progress);  		if (scrobbleData == null)  			return;  		var response = TraktAPI.TraktAPI.StartEpisodeScrobble (scrobbleData);  		TraktLogger.LogTraktResponse (response);  		return;  	}  }  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,Scrobble,The following statement contains a magic number: if (episodes == null || episodes.Count != 2) {  	TraktLogger.Error ("Unable to retrieve double episode information from tvseries database for current playing episode. Title = '{0}'"' scrobbleEpisode.ToString ());  	return;  }  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,Scrobble,The following statement contains a magic number: if (progress > 50) {  	// don't scrobble the first part when we stop  	FirstEpisodeWatched = true;  	TraktLogger.Info ("Sending start scrobble of second part of episode to trakt.tv. Show Title = '{0}'' Season = '{1}'' Episode = '{2}'' Episode Title = '{3}'' Show TVDb ID = '{4}'' Episode TVDb ID = '{5}'"' show [DBOnlineSeries.cOriginalName]' episodes [1] [DBOnlineEpisode.cSeasonIndex]' episodes [1] [DBOnlineEpisode.cEpisodeIndex]' episodes [1] [DBOnlineEpisode.cEpisodeName]' episodes [1] [DBOnlineEpisode.cSeriesID]' episodes [1] [DBOnlineEpisode.cID]);  	scrobbleData = CreateScrobbleData (episodes [1]' progress);  	if (scrobbleData == null)  		return;  	var response = TraktAPI.TraktAPI.StartEpisodeScrobble (scrobbleData);  	TraktLogger.LogTraktResponse (response);  	return;  }  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The following statement contains a magic number: foreach (var item in playbackData.Where (p => p.Type == "episode")) {  	DateTime itemPausedAt;  	if (DateTime.TryParse (item.PausedAt' out itemPausedAt)) {  		// check if we need to process  		if (itemPausedAt <= lastPausedItemProcessed)  			continue;  	}  	if (!item.Show.Ids.Tvdb.HasValue || item.Show.Ids.Tvdb <= 0) {  		TraktLogger.Warning ("Skipping item with invalid TVDb ID' TV Show = '{0}'' Season='{1}'' Episode='{2}'"' item.Show.Title' item.Episode.Season' item.Episode.Number);  		continue;  	}  	// check if series is ignored by user  	if (IgnoredSeries.Contains (item.Show.Ids.Tvdb)) {  		TraktLogger.Info ("Ignoring resume data sync for episode' series is ignored by user. TV Show = '{0}'' Season='{1}'' Episode='{2}'"' item.Show.Title' item.Episode.Season' item.Episode.Number);  		continue;  	}  	// get episode from local database if it exists  	string sql = "SELECT EpisodeFilename'SeriesID'SeasonIndex'EpisodeIndex'localPlaytime'StopTime " + "FROM local_episodes " + "WHERE SeriesID = '{0}' and SeasonIndex = '{1}' and EpisodeIndex = '{2}'";  	string query = string.Format (sql' item.Show.Ids.Tvdb' item.Episode.Season' item.Episode.Number);  	var episodes = DBEpisode.Get (query);  	if (episodes == null || episodes.Count == 0)  		continue;  	var episode = episodes.First ();  	if (string.IsNullOrEmpty (episode [DBEpisode.cFilename]))  		continue;  	// if the local playtime is not known then skip  	if (episode [DBEpisode.cLocalPlaytime] <= 0) {  		TraktLogger.Warning ("Skipping item with invalid runtime in database' TV Show = '{0}'' Season='{1}'' Episode='{2}'"' item.Show.Title' item.Episode.Season' item.Episode.Number);  		continue;  	}  	// if we are syncing on plugin entry we could possibly still be sending paused data to trakt  	// after stopping video (stopping video == re-entry to plugin)' prevent possibly reverting stale resumed data  	// we already have updated resume data when stopping video in real-time  	if (TraktSettings.SyncPlaybackOnEnterPlugin && LastEpisode != null && LastEpisode [DBEpisode.cFilename] == episode [DBEpisode.cFilename])  		continue;  	// update the stop time based on percentage watched  	// tvseries stores localplaytime in milliseconds and stoptime in secs  	var resumeData = Convert.ToInt32 ((episode [DBEpisode.cLocalPlaytime] / 1000.0) * (item.Progress / 100.0)) - TraktSettings.SyncResumeDelta;  	if (resumeData < 0)  		resumeData = 0;  	if (episode [DBEpisode.cStopTime] != resumeData) {  		TraktLogger.Info ("Setting resume time '{0}' for episode' Title = '{1} - {2}x{3}'' Paused At = '{4}'"' new TimeSpan (0' 0' 0' resumeData)' item.Show.Title' item.Episode.Season' item.Episode.Number' item.PausedAt);  		episode [DBEpisode.cStopTime] = resumeData;  		episode.Commit ();  	}  }  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,SyncProgress,The following statement contains a magic number: foreach (var item in playbackData.Where (p => p.Type == "episode")) {  	DateTime itemPausedAt;  	if (DateTime.TryParse (item.PausedAt' out itemPausedAt)) {  		// check if we need to process  		if (itemPausedAt <= lastPausedItemProcessed)  			continue;  	}  	if (!item.Show.Ids.Tvdb.HasValue || item.Show.Ids.Tvdb <= 0) {  		TraktLogger.Warning ("Skipping item with invalid TVDb ID' TV Show = '{0}'' Season='{1}'' Episode='{2}'"' item.Show.Title' item.Episode.Season' item.Episode.Number);  		continue;  	}  	// check if series is ignored by user  	if (IgnoredSeries.Contains (item.Show.Ids.Tvdb)) {  		TraktLogger.Info ("Ignoring resume data sync for episode' series is ignored by user. TV Show = '{0}'' Season='{1}'' Episode='{2}'"' item.Show.Title' item.Episode.Season' item.Episode.Number);  		continue;  	}  	// get episode from local database if it exists  	string sql = "SELECT EpisodeFilename'SeriesID'SeasonIndex'EpisodeIndex'localPlaytime'StopTime " + "FROM local_episodes " + "WHERE SeriesID = '{0}' and SeasonIndex = '{1}' and EpisodeIndex = '{2}'";  	string query = string.Format (sql' item.Show.Ids.Tvdb' item.Episode.Season' item.Episode.Number);  	var episodes = DBEpisode.Get (query);  	if (episodes == null || episodes.Count == 0)  		continue;  	var episode = episodes.First ();  	if (string.IsNullOrEmpty (episode [DBEpisode.cFilename]))  		continue;  	// if the local playtime is not known then skip  	if (episode [DBEpisode.cLocalPlaytime] <= 0) {  		TraktLogger.Warning ("Skipping item with invalid runtime in database' TV Show = '{0}'' Season='{1}'' Episode='{2}'"' item.Show.Title' item.Episode.Season' item.Episode.Number);  		continue;  	}  	// if we are syncing on plugin entry we could possibly still be sending paused data to trakt  	// after stopping video (stopping video == re-entry to plugin)' prevent possibly reverting stale resumed data  	// we already have updated resume data when stopping video in real-time  	if (TraktSettings.SyncPlaybackOnEnterPlugin && LastEpisode != null && LastEpisode [DBEpisode.cFilename] == episode [DBEpisode.cFilename])  		continue;  	// update the stop time based on percentage watched  	// tvseries stores localplaytime in milliseconds and stoptime in secs  	var resumeData = Convert.ToInt32 ((episode [DBEpisode.cLocalPlaytime] / 1000.0) * (item.Progress / 100.0)) - TraktSettings.SyncResumeDelta;  	if (resumeData < 0)  		resumeData = 0;  	if (episode [DBEpisode.cStopTime] != resumeData) {  		TraktLogger.Info ("Setting resume time '{0}' for episode' Title = '{1} - {2}x{3}'' Paused At = '{4}'"' new TimeSpan (0' 0' 0' resumeData)' item.Show.Title' item.Episode.Season' item.Episode.Number' item.PausedAt);  		episode [DBEpisode.cStopTime] = resumeData;  		episode.Commit ();  	}  }  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,CreateScrobbleData,The following statement contains a magic number: if (progress > 100)  	progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,CreateScrobbleData,The following statement contains a magic number: if (progress > 100)  	progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,CreateScrobbleData,The following statement contains a magic number: progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetPlayerProgress,The following statement contains a magic number: if (duration > 0.0)  	progress = ((g_Player.CurrentPosition / 60.0) / duration) * 100.0;  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetPlayerProgress,The following statement contains a magic number: if (duration > 0.0)  	progress = ((g_Player.CurrentPosition / 60.0) / duration) * 100.0;  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetPlayerProgress,The following statement contains a magic number: progress = ((g_Player.CurrentPosition / 60.0) / duration) * 100.0;  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetPlayerProgress,The following statement contains a magic number: progress = ((g_Player.CurrentPosition / 60.0) / duration) * 100.0;  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetPlayerProgress,The following statement contains a magic number: if (progress > 100.0)  	progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetPlayerProgress,The following statement contains a magic number: if (progress > 100.0)  	progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetPlayerProgress,The following statement contains a magic number: progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetPlayerProgress,The following statement contains a magic number: return Math.Round (progress' 2);  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: if ((videoWidth <= 3840 && videoWidth > 3000) || videoHeight == 2160)  	return TraktResolution.uhd_4k.ToString ();  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: if ((videoWidth <= 3840 && videoWidth > 3000) || videoHeight == 2160)  	return TraktResolution.uhd_4k.ToString ();  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: if ((videoWidth <= 3840 && videoWidth > 3000) || videoHeight == 2160)  	return TraktResolution.uhd_4k.ToString ();  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: if ((videoWidth <= 1920 && videoWidth > 1800) || videoHeight == 1080)  	return TraktResolution.hd_1080p.ToString ();  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: if ((videoWidth <= 1920 && videoWidth > 1800) || videoHeight == 1080)  	return TraktResolution.hd_1080p.ToString ();  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: if ((videoWidth <= 1920 && videoWidth > 1800) || videoHeight == 1080)  	return TraktResolution.hd_1080p.ToString ();  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: if ((videoWidth <= 1280 && videoWidth > 1100) || videoHeight == 720)  	return TraktResolution.hd_720p.ToString ();  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: if ((videoWidth <= 1280 && videoWidth > 1100) || videoHeight == 720)  	return TraktResolution.hd_720p.ToString ();  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: if ((videoWidth <= 1280 && videoWidth > 1100) || videoHeight == 720)  	return TraktResolution.hd_720p.ToString ();  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: if (videoWidth == 704 || videoHeight == 576)  	return TraktResolution.sd_576p.ToString ();  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: if (videoWidth == 704 || videoHeight == 576)  	return TraktResolution.sd_576p.ToString ();  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: if (videoWidth == 704 || videoHeight == 480)  	return TraktResolution.sd_480p.ToString ();  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,GetEpisodeResolution,The following statement contains a magic number: if (videoWidth == 704 || videoHeight == 480)  	return TraktResolution.sd_480p.ToString ();  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnImportCompleted,The following statement contains a magic number: if (newEpisodeAdded) {  	// sync again  	var syncThread = new Thread (obj => {  		TraktLogger.Info ("New episodes added in MP-TVSeries' starting sync");  		while (TraktPlugin.LibrarySyncRunning) {  			// only do one sync at a time  			TraktLogger.Debug ("MP-TVSeries sync still in progress' trying again in 60 secs");  			Thread.Sleep (60000);  		}  		try {  			TraktCache.ClearLastActivityCache (true);  			SyncLibrary ();  		} catch (Exception ex) {  			TraktLogger.Error ("MP-TVSeries sync failed' Reason = '{0}'' StackTrace = {1}"' ex.Message' ex.StackTrace);  		}  	}) {  		IsBackground = true'  		Name = "Sync"  	};  	syncThread.Start ();  } else {  	TraktLogger.Debug ("MP-TVSeries sync is not required");  }  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnImportCompleted,The following statement contains a magic number: while (TraktPlugin.LibrarySyncRunning) {  	// only do one sync at a time  	TraktLogger.Debug ("MP-TVSeries sync still in progress' trying again in 60 secs");  	Thread.Sleep (60000);  }  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnImportCompleted,The following statement contains a magic number: Thread.Sleep (60000);  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnEpisodeWatched,The following statement contains a magic number: if (progress < 80)  	progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnEpisodeWatched,The following statement contains a magic number: if (progress < 80)  	progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnEpisodeWatched,The following statement contains a magic number: progress = 100;  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnEpisodeWatched,The following statement contains a magic number: if (stoppedEpisode.IsDoubleEpisode) {  	// check if we should mark the first episode as watched  	if (!FirstEpisodeWatched) {  		scrobbleData = CreateScrobbleData (stoppedEpisode' 100);  		if (scrobbleData == null)  			return;  		// update local cache  		TraktCache.AddEpisodeToWatchHistory (scrobbleData.Show' scrobbleData.Episode);  		response = TraktAPI.TraktAPI.StopEpisodeScrobble (scrobbleData);  		TraktLogger.LogTraktResponse (response);  	}  	// scrobble the second   	scrobbleData = CreateScrobbleData (SecondEpisode' progress);  	if (scrobbleData == null)  		return;  	// prompt to rate second episode  	ShowRateDialog (SecondEpisode' isPlaylist);  	TraktLogger.LogTraktResponse (TraktAPI.TraktAPI.StopEpisodeScrobble (scrobbleData));  	return;  }  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnEpisodeWatched,The following statement contains a magic number: if (!FirstEpisodeWatched) {  	scrobbleData = CreateScrobbleData (stoppedEpisode' 100);  	if (scrobbleData == null)  		return;  	// update local cache  	TraktCache.AddEpisodeToWatchHistory (scrobbleData.Show' scrobbleData.Episode);  	response = TraktAPI.TraktAPI.StopEpisodeScrobble (scrobbleData);  	TraktLogger.LogTraktResponse (response);  }  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnEpisodeWatched,The following statement contains a magic number: scrobbleData = CreateScrobbleData (stoppedEpisode' 100);  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnEpisodeStopped,The following statement contains a magic number: if (stoppedEpisode.IsDoubleEpisode && progress > 50.0) {  	// first episode can be marked as watched  	if (!FirstEpisodeWatched) {  		TraktLogger.Info ("Marking first episode of double episode as watched");  		// fake progress so it's marked as watched online  		scrobbleData = CreateScrobbleData (stoppedEpisode' 100);  		if (scrobbleData == null)  			return;  		// prompt to rate episode  		ShowRateDialog (stoppedEpisode' false);  		// update local cache  		TraktCache.AddEpisodeToWatchHistory (scrobbleData.Show' scrobbleData.Episode);  		TraktLogger.LogTraktResponse (TraktAPI.TraktAPI.StopEpisodeScrobble (scrobbleData));  		return;  	} else {  		// stop the second   		scrobbleData = CreateScrobbleData (SecondEpisode' progress);  		if (scrobbleData == null)  			return;  		// only mark as watched online if percentage watched is greater than user setting  		response = TraktAPI.TraktAPI.PauseEpisodeScrobble (scrobbleData);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Show != null && response.Action == "pause") {  			// add to cache  			TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  		}  		return;  	}  }  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnEpisodeStopped,The following statement contains a magic number: if (stoppedEpisode.IsDoubleEpisode && progress > 50.0) {  	// first episode can be marked as watched  	if (!FirstEpisodeWatched) {  		TraktLogger.Info ("Marking first episode of double episode as watched");  		// fake progress so it's marked as watched online  		scrobbleData = CreateScrobbleData (stoppedEpisode' 100);  		if (scrobbleData == null)  			return;  		// prompt to rate episode  		ShowRateDialog (stoppedEpisode' false);  		// update local cache  		TraktCache.AddEpisodeToWatchHistory (scrobbleData.Show' scrobbleData.Episode);  		TraktLogger.LogTraktResponse (TraktAPI.TraktAPI.StopEpisodeScrobble (scrobbleData));  		return;  	} else {  		// stop the second   		scrobbleData = CreateScrobbleData (SecondEpisode' progress);  		if (scrobbleData == null)  			return;  		// only mark as watched online if percentage watched is greater than user setting  		response = TraktAPI.TraktAPI.PauseEpisodeScrobble (scrobbleData);  		TraktLogger.LogTraktResponse (response);  		if (response != null && response.Show != null && response.Action == "pause") {  			// add to cache  			TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  		}  		return;  	}  }  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnEpisodeStopped,The following statement contains a magic number: if (!FirstEpisodeWatched) {  	TraktLogger.Info ("Marking first episode of double episode as watched");  	// fake progress so it's marked as watched online  	scrobbleData = CreateScrobbleData (stoppedEpisode' 100);  	if (scrobbleData == null)  		return;  	// prompt to rate episode  	ShowRateDialog (stoppedEpisode' false);  	// update local cache  	TraktCache.AddEpisodeToWatchHistory (scrobbleData.Show' scrobbleData.Episode);  	TraktLogger.LogTraktResponse (TraktAPI.TraktAPI.StopEpisodeScrobble (scrobbleData));  	return;  } else {  	// stop the second   	scrobbleData = CreateScrobbleData (SecondEpisode' progress);  	if (scrobbleData == null)  		return;  	// only mark as watched online if percentage watched is greater than user setting  	response = TraktAPI.TraktAPI.PauseEpisodeScrobble (scrobbleData);  	TraktLogger.LogTraktResponse (response);  	if (response != null && response.Show != null && response.Action == "pause") {  		// add to cache  		TraktCache.AddEpisodeToPausedData (response.Show' response.Episode' response.Progress);  	}  	return;  }  
Magic Number,TraktPlugin.TraktHandlers,TVSeries,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\TVSeries.cs,OnEpisodeStopped,The following statement contains a magic number: scrobbleData = CreateScrobbleData (stoppedEpisode' 100);  
Missing Default,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,ParseCommandLine,The following switch statement is missing a default case: switch (argument.ToLower ().TrimStart ('-')) {  case "silentmode":  	SilentMode = true;  	break;  case "sync":  	AutoSync = true;  	break;  case "closeaftersync":  	AutoCloseAfterSync = true;  	break;  }  
Missing Default,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,SetPriorityOrder,The following switch statement is missing a default case: switch (item.ToString ()) {  case "Moving Pictures":  	TraktSettings.MovingPictures = clbPlugins.GetItemChecked (i) ? i : -1;  	break;  case "MP-TVSeries":  	TraktSettings.TVSeries = clbPlugins.GetItemChecked (i) ? i : -1;  	break;  case "My Videos":  	TraktSettings.MyVideos = clbPlugins.GetItemChecked (i) ? i : -1;  	break;  case "My Films":  	TraktSettings.MyFilms = clbPlugins.GetItemChecked (i) ? i : -1;  	break;  case "OnlineVideos":  	TraktSettings.OnlineVideos = clbPlugins.GetItemChecked (i) ? i : -1;  	break;  case "My TV Recordings":  	TraktSettings.MyTVRecordings = clbPlugins.GetItemChecked (i) ? i : -1;  	break;  case "My TV Live":  	TraktSettings.MyTVLive = clbPlugins.GetItemChecked (i) ? i : -1;  	break;  case "Argus TV Recordings":  	TraktSettings.ArgusRecordings = clbPlugins.GetItemChecked (i) ? i : -1;  	break;  case "Argus TV Live":  	TraktSettings.ArgusTVLive = clbPlugins.GetItemChecked (i) ? i : -1;  	break;  }  
Missing Default,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,clbPlugins_ItemCheck,The following switch statement is missing a default case: switch (plugin) {  case "Moving Pictures":  	TraktSettings.MovingPictures = clbPlugins.GetItemChecked (ndx) ? -1 : ndx;  	break;  case "MP-TVSeries":  	TraktSettings.TVSeries = clbPlugins.GetItemChecked (ndx) ? -1 : ndx;  	break;  case "My Videos":  	TraktSettings.MyVideos = clbPlugins.GetItemChecked (ndx) ? -1 : ndx;  	break;  case "My Films":  	TraktSettings.MyFilms = clbPlugins.GetItemChecked (ndx) ? -1 : ndx;  	break;  case "OnlineVideos":  	TraktSettings.OnlineVideos = clbPlugins.GetItemChecked (ndx) ? -1 : ndx;  	break;  case "My TV Recordings":  	TraktSettings.MyTVRecordings = clbPlugins.GetItemChecked (ndx) ? -1 : ndx;  	break;  case "My TV Live":  	TraktSettings.MyTVLive = clbPlugins.GetItemChecked (ndx) ? -1 : ndx;  	break;  case "Argus TV Recordings":  	TraktSettings.ArgusRecordings = clbPlugins.GetItemChecked (ndx) ? -1 : ndx;  	break;  case "Argus TV Live":  	TraktSettings.ArgusTVLive = clbPlugins.GetItemChecked (ndx) ? -1 : ndx;  	break;  }  
Missing Default,TraktPlugin,Configuration,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\Configuration\Configuration.cs,StartSync,The following switch statement is missing a default case: switch (item.ToString ()) {  case "Moving Pictures":  	var movingPictures = new MovingPictures (TraktSettings.MovingPictures);  	movingPictures.SyncLibrary ();  	movingPictures.SyncProgress ();  	break;  case "MP-TVSeries":  	var tvSeries = new TVSeries (TraktSettings.TVSeries);  	tvSeries.SyncLibrary ();  	tvSeries.SyncProgress ();  	break;  case "My Videos":  	var myVideos = new MyVideos (TraktSettings.MyVideos);  	myVideos.SyncLibrary ();  	myVideos.SyncProgress ();  	break;  case "My Films":  	var myFilms = new MyFilmsHandler (TraktSettings.MyFilms);  	myFilms.SyncLibrary ();  	myFilms.SyncProgress ();  	break;  }  
Missing Default,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivityDescription,The following switch statement is missing a default case: switch (activityView) {  case ActivityView.community:  	description = Translation.ActivityCommunityDesc;  	break;  case ActivityView.followers:  	description = Translation.ActivityFollowersDesc;  	break;  case ActivityView.following:  	description = Translation.ActivityFollowingDesc;  	break;  case ActivityView.friends:  	description = Translation.ActivityFriendsDesc;  	break;  case ActivityView.friendsandme:  	description = Translation.ActivityFriendsAndMeDesc;  	break;  case ActivityView.me:  	description = Translation.ActivityMeDesc;  	break;  }  
Missing Default,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivityImage,The following switch statement is missing a default case: switch (action) {  case ActivityAction.checkin:  case ActivityAction.watching:  case ActivityAction.pause:  	imageFilename = "traktActivityWatching.png";  	break;  case ActivityAction.seen:  case ActivityAction.scrobble:  	imageFilename = "traktActivityWatched.png";  	break;  case ActivityAction.collection:  	imageFilename = "traktActivityCollected.png";  	break;  case ActivityAction.rating:  	imageFilename = activity.Rating > 5 ? "traktActivityLove.png" : "traktActivityHate.png";  	break;  case ActivityAction.watchlist:  	imageFilename = "traktActivityWatchlist.png";  	break;  case ActivityAction.shout:  case ActivityAction.review:  	imageFilename = "traktActivityShout.png";  	break;  case ActivityAction.item_added:  case ActivityAction.created:  case ActivityAction.updated:  	imageFilename = "traktActivityList.png";  	break;  case ActivityAction.like:  	imageFilename = "traktActivityLike.png";  	break;  }  
Missing Default,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,The following switch statement is missing a default case: switch (activityView) {  case ActivityView.community:  	//PreviousActivity = TraktAPI.TraktAPI.GetCommunityActivity();  	break;  case ActivityView.followers:  	//PreviousActivity = TraktAPI.TraktAPI.GetFollowersActivity();  	break;  case ActivityView.following:  	//PreviousActivity = TraktAPI.TraktAPI.GetFollowingActivity();  	break;  case ActivityView.friends:  	//PreviousActivity = TraktAPI.TraktAPI.GetFriendActivity(false);  	break;  case ActivityView.friendsandme:  	//PreviousActivity = TraktAPI.TraktAPI.GetFriendActivity(true);  	break;  case ActivityView.me:  	//PreviousActivity = GetMyActivityFromCache();  	break;  }  
Missing Default,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,GetActivity,The following switch statement is missing a default case: switch (activityView) {  case ActivityView.community:  	//incrementalActivity = TraktAPI.TraktAPI.GetCommunityActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch());  	break;  case ActivityView.followers:  	//incrementalActivity = TraktAPI.TraktAPI.GetFollowersActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch());  	break;  case ActivityView.following:  	//incrementalActivity = TraktAPI.TraktAPI.GetFollowingActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch());  	break;  case ActivityView.friends:  	//incrementalActivity = TraktAPI.TraktAPI.GetFriendActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch()' false);  	break;  case ActivityView.friendsandme:  	//incrementalActivity = TraktAPI.TraktAPI.GetFriendActivity(null' null' ActivityStartTime' DateTime.UtcNow.ToEpoch()' true);  	break;  case ActivityView.me:  	//incrementalActivity = GetMyActivityFromCache();  	break;  }  
Missing Default,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityFilterActionsMenu,The following switch statement is missing a default case: switch ((ActivityAction)Enum.Parse (typeof(ActivityAction)' item.ItemID' true)) {  case ActivityAction.scrobble:  	TraktSettings.DashboardActivityFilter.Actions.Watched = !TraktSettings.DashboardActivityFilter.Actions.Watched;  	break;  case ActivityAction.collection:  	TraktSettings.DashboardActivityFilter.Actions.Collected = !TraktSettings.DashboardActivityFilter.Actions.Collected;  	break;  case ActivityAction.rating:  	TraktSettings.DashboardActivityFilter.Actions.Rated = !TraktSettings.DashboardActivityFilter.Actions.Rated;  	break;  case ActivityAction.watchlist:  	TraktSettings.DashboardActivityFilter.Actions.Watchlisted = !TraktSettings.DashboardActivityFilter.Actions.Watchlisted;  	break;  case ActivityAction.pause:  	TraktSettings.DashboardActivityFilter.Actions.Paused = !TraktSettings.DashboardActivityFilter.Actions.Paused;  	break;  case ActivityAction.shout:  	TraktSettings.DashboardActivityFilter.Actions.Commented = !TraktSettings.DashboardActivityFilter.Actions.Commented;  	break;  case ActivityAction.like:  	TraktSettings.DashboardActivityFilter.Actions.Liked = !TraktSettings.DashboardActivityFilter.Actions.Liked;  	break;  case ActivityAction.item_added:  	TraktSettings.DashboardActivityFilter.Actions.Added = !TraktSettings.DashboardActivityFilter.Actions.Added;  	break;  case ActivityAction.updated:  	TraktSettings.DashboardActivityFilter.Actions.Updated = !TraktSettings.DashboardActivityFilter.Actions.Updated;  	break;  }  
Missing Default,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityFilterTypesMenu,The following switch statement is missing a default case: switch ((ActivityType)Enum.Parse (typeof(ActivityType)' item.ItemID' true)) {  case ActivityType.movie:  	TraktSettings.DashboardActivityFilter.Types.Movies = !TraktSettings.DashboardActivityFilter.Types.Movies;  	break;  case ActivityType.show:  	TraktSettings.DashboardActivityFilter.Types.Shows = !TraktSettings.DashboardActivityFilter.Types.Shows;  	break;  case ActivityType.season:  	TraktSettings.DashboardActivityFilter.Types.Seasons = !TraktSettings.DashboardActivityFilter.Types.Seasons;  	break;  case ActivityType.episode:  	TraktSettings.DashboardActivityFilter.Types.Episodes = !TraktSettings.DashboardActivityFilter.Types.Episodes;  	break;  case ActivityType.list:  	TraktSettings.DashboardActivityFilter.Types.Lists = !TraktSettings.DashboardActivityFilter.Types.Lists;  	break;  case ActivityType.comment:  	TraktSettings.DashboardActivityFilter.Types.Comments = !TraktSettings.DashboardActivityFilter.Types.Comments;  	break;  case ActivityType.person:  	TraktSettings.DashboardActivityFilter.Types.People = !TraktSettings.DashboardActivityFilter.Types.People;  	break;  }  
Missing Default,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,ShowActivityContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId) {  case ((int)ActivityContextMenuItem.FilterActions):  	if (ShowActivityFilterActionsMenu ()) {  		ReloadActivityView = true;  		StartActivityPolling ();  	}  	break;  case ((int)ActivityContextMenuItem.FilterTypes):  	if (ShowActivityFilterTypesMenu ()) {  		ReloadActivityView = true;  		StartActivityPolling ();  	}  	break;  case ((int)ActivityContextMenuItem.ChangeView):  	if (ShowActivityViewMenu ()) {  		GetFullActivityLoad = true;  		StartActivityPolling ();  	} else {  		ShowActivityContextMenu ();  		return;  	}  	break;  case ((int)ActivityContextMenuItem.UserProfile):  	GUIUserProfile.CurrentUser = activity.User.Username;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.UserProfile);  	break;  case ((int)ActivityContextMenuItem.FollowUser):  	if (GUIUtils.ShowYesNoDialog (Translation.Network' string.Format (Translation.SendFollowRequest' activity.User.Username)' true)) {  		GUINetwork.FollowUser (activity.User);  		GUINetwork.ClearCache ();  		(activityFacade.SelectedListItem as GUIUserListItem).IsFollowed = true;  	}  	break;  case ((int)ActivityContextMenuItem.ShowSeasonInfo):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' activity.Show.ToJSON ());  	break;  case ((int)ActivityContextMenuItem.AddToList):  	if (activity.Movie != null)  		TraktHelper.AddRemoveMovieInUserList (activity.Movie' false);  	else if (activity.Episode != null)  		TraktHelper.AddRemoveEpisodeInUserList (activity.Episode' false);  	else if (activity.Season != null)  		TraktHelper.AddRemoveSeasonInUserList (activity.Season' false);  	else  		TraktHelper.AddRemoveShowInUserList (activity.Show' false);  	break;  case ((int)ActivityContextMenuItem.AddToWatchList):  	if (activity.Movie != null)  		TraktHelper.AddMovieToWatchList (activity.Movie' true);  	else if (activity.Episode != null)  		TraktHelper.AddEpisodeToWatchList (activity.Show' activity.Episode);  	else if (activity.Episodes != null && activity.Episodes.Count == 1)  		TraktHelper.AddEpisodeToWatchList (activity.Show' activity.Episodes.First ());  	else if (activity.Season != null)  		TraktHelper.AddSeasonToWatchList (activity.Show' activity.Season.Number);  	else  		TraktHelper.AddShowToWatchList (activity.Show);  	break;  case ((int)ActivityContextMenuItem.RemoveFromWatchList):  	if (activity.Movie != null)  		TraktHelper.RemoveMovieFromWatchList (activity.Movie' true);  	else if (activity.Episode != null)  		TraktHelper.RemoveEpisodeFromWatchList (activity.Show' activity.Episode);  	else if (activity.Episodes != null && activity.Episodes.Count == 1)  		TraktHelper.RemoveEpisodeFromWatchList (activity.Show' activity.Episodes.First ());  	else if (activity.Season != null)  		TraktHelper.RemoveSeasonFromWatchList (activity.Show' activity.Season.Number);  	else  		TraktHelper.RemoveShowFromWatchList (activity.Show);  	// force reload of activity view as we only check if the most recent item has changed  	ReloadActivityView = true;  	break;  case ((int)ActivityContextMenuItem.MarkAsWatched):  	if (activity.Movie != null)  		TraktHelper.AddMovieToWatchHistory (activity.Movie);  	else if (activity.Episode != null)  		TraktHelper.AddEpisodeToWatchHistory (activity.Show' activity.Episode);  	else if (activity.Episodes != null && activity.Episodes.Count == 1)  		TraktHelper.AddEpisodeToWatchHistory (activity.Show' activity.Episodes.First ());  	break;  case ((int)ActivityContextMenuItem.MarkAsUnwatched):  	if (activity.Movie != null)  		TraktHelper.RemoveMovieFromWatchHistory (activity.Movie);  	else if (activity.Episode != null)  		TraktHelper.RemoveEpisodeFromWatchHistory (activity.Show' activity.Episode);  	else if (activity.Episodes != null && activity.Episodes.Count == 1)  		TraktHelper.RemoveEpisodeFromWatchHistory (activity.Show' activity.Episodes.First ());  	ReloadActivityView = true;  	break;  case ((int)ActivityContextMenuItem.AddToCollection):  	if (activity.Movie != null)  		TraktHelper.AddMovieToCollection (activity.Movie);  	else if (activity.Episode != null)  		TraktHelper.AddEpisodeToCollection (activity.Show' activity.Episode);  	else if (activity.Episodes != null && activity.Episodes.Count == 1)  		TraktHelper.AddEpisodeToCollection (activity.Show' activity.Episodes.First ());  	break;  case ((int)ActivityContextMenuItem.RemoveFromCollection):  	if (activity.Movie != null)  		TraktHelper.RemoveMovieFromCollection (activity.Movie);  	else if (activity.Episode != null)  		TraktHelper.RemoveEpisodeFromCollection (activity.Show' activity.Episode);  	else if (activity.Episodes != null && activity.Episodes.Count == 1)  		TraktHelper.RemoveEpisodeFromCollection (activity.Show' activity.Episodes.First ());  	ReloadActivityView = true;  	break;  case ((int)ActivityContextMenuItem.Shouts):  	if (activity.Movie != null)  		TraktHelper.ShowMovieShouts (activity.Movie);  	else if (activity.Episode != null)  		TraktHelper.ShowEpisodeShouts (activity.Show' activity.Episode);  	else if (activity.Episodes != null && activity.Episodes.Count == 1)  		TraktHelper.ShowEpisodeShouts (activity.Show' activity.Episodes.First ());  	else  		TraktHelper.ShowTVShowShouts (activity.Show);  	break;  case ((int)ActivityContextMenuItem.Rate):  	if (activity.Movie != null)  		GUICommon.RateMovie (activity.Movie);  	else if (activity.Episode != null)  		GUICommon.RateEpisode (activity.Show' activity.Episode);  	else if (activity.Episodes != null && activity.Episodes.Count == 1)  		GUICommon.RateEpisode (activity.Show' activity.Episodes.First ());  	else if (activity.Season != null)  		GUICommon.RateSeason (activity.Show' activity.Season);  	else  		GUICommon.RateShow (activity.Show);  	break;  case (int)ActivityContextMenuItem.Unlike:  	if (activity.Shout != null)  		GUICommon.UnLikeComment (activity.Shout);  	else if (activity.List != null)  		GUICommon.UnLikeList (activity.List' "me");  	ReloadActivityView = true;  	break;  case ((int)ActivityContextMenuItem.Cast):  	if (activity.Movie != null) {  		var images = TmdbCache.GetMovieImages (activity.Movie.Ids.Tmdb' true);  		GUICreditsMovie.Movie = activity.Movie;  		GUICreditsMovie.Type = GUICreditsMovie.CreditType.Cast;  		GUICreditsMovie.Fanart = TmdbCache.GetMovieBackdropFilename (images);  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CreditsMovie);  	} else if (activity.Show != null) {  		var images = TmdbCache.GetShowImages (activity.Show.Ids.Tmdb' true);  		GUICreditsShow.Show = activity.Show;  		GUICreditsShow.Type = GUICreditsShow.CreditType.Cast;  		GUICreditsShow.Fanart = TmdbCache.GetShowBackdropFilename (images);  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CreditsShow);  	}  	break;  case ((int)ActivityContextMenuItem.Crew):  	if (activity.Movie != null) {  		var images = TmdbCache.GetMovieImages (activity.Movie.Ids.Tmdb' true);  		GUICreditsMovie.Movie = activity.Movie;  		GUICreditsMovie.Type = GUICreditsMovie.CreditType.Crew;  		GUICreditsMovie.Fanart = TmdbCache.GetMovieBackdropFilename (images);  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CreditsMovie);  	} else if (activity.Show != null) {  		var images = TmdbCache.GetShowImages (activity.Show.Ids.Tmdb' true);  		GUICreditsShow.Show = activity.Show;  		GUICreditsShow.Type = GUICreditsShow.CreditType.Crew;  		GUICreditsShow.Fanart = TmdbCache.GetShowBackdropFilename (images);  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CreditsShow);  	}  	break;  case ((int)ActivityContextMenuItem.Trailers):  	if (activity.Movie != null)  		GUICommon.ShowMovieTrailersMenu (activity.Movie);  	else if (activity.Episodes != null && activity.Episodes.Count == 1)  		GUICommon.ShowTVShowTrailersMenu (activity.Show' activity.Episodes.First ());  	else  		GUICommon.ShowTVShowTrailersMenu (activity.Show' activity.Episode);  	break;  }  
Missing Default,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PlayActivityItem,The following switch statement is missing a default case: switch (type) {  case ActivityType.episode:  	if (action == ActivityAction.seen || action == ActivityAction.collection) {  		if (activity.Episodes.Count > 1) {  			GUICommon.CheckAndPlayFirstUnwatchedEpisode (activity.Show' jumpTo);  			return;  		} else if (activity.Episodes != null && activity.Episodes.Count == 1) {  			GUICommon.CheckAndPlayEpisode (activity.Show' activity.Episodes.First ());  		}  	}  	GUICommon.CheckAndPlayEpisode (activity.Show' activity.Episode);  	break;  case ActivityType.show:  	GUICommon.CheckAndPlayFirstUnwatchedEpisode (activity.Show' jumpTo);  	break;  case ActivityType.movie:  	GUICommon.CheckAndPlayMovie (jumpTo' activity.Movie);  	break;  case ActivityType.list:  	if (action == ActivityAction.item_added) {  		// return the name of the item added to the list  		switch (activity.ListItem.Type) {  		case "show":  			GUICommon.CheckAndPlayFirstUnwatchedEpisode (activity.ListItem.Show' jumpTo);  			break;  		case "episode":  			GUICommon.CheckAndPlayEpisode (activity.ListItem.Show' activity.ListItem.Episode);  			break;  		case "movie":  			GUICommon.CheckAndPlayMovie (jumpTo' activity.ListItem.Movie);  			break;  		}  	}  	break;  }  
Missing Default,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,PlayActivityItem,The following switch statement is missing a default case: switch (activity.ListItem.Type) {  case "show":  	GUICommon.CheckAndPlayFirstUnwatchedEpisode (activity.ListItem.Show' jumpTo);  	break;  case "episode":  	GUICommon.CheckAndPlayEpisode (activity.ListItem.Show' activity.ListItem.Episode);  	break;  case "movie":  	GUICommon.CheckAndPlayMovie (jumpTo' activity.ListItem.Movie);  	break;  }  
Missing Default,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,OnActivitySelected,The following switch statement is missing a default case: switch (type) {  case ActivityType.episode:  	if (action == ActivityAction.seen || action == ActivityAction.collection) {  		if (activity.Episodes.Count > 1) {  			GUICommon.SetEpisodeProperties (activity.Show' activity.Episodes.First ());  		} else {  			GUICommon.SetEpisodeProperties (activity.Show' activity.Episode);  		}  	} else {  		GUICommon.SetEpisodeProperties (activity.Show' activity.Episode);  	}  	GUICommon.SetShowProperties (activity.Show);  	break;  case ActivityType.show:  	GUICommon.SetShowProperties (activity.Show);  	break;  case ActivityType.season:  	GUICommon.SetShowProperties (activity.Show);  	GUICommon.SetSeasonProperties (activity.Show' activity.Season);  	break;  case ActivityType.movie:  	GUICommon.SetMovieProperties (activity.Movie);  	break;  case ActivityType.list:  	if (action == ActivityAction.item_added) {  		// return the name of the item added to the list  		switch (activity.ListItem.Type) {  		case "show":  			GUICommon.SetShowProperties (activity.ListItem.Show);  			break;  		case "season":  			GUICommon.SetShowProperties (activity.ListItem.Show);  			GUICommon.SetSeasonProperties (activity.ListItem.Show' activity.ListItem.Season);  			break;  		case "episode":  			GUICommon.SetShowProperties (activity.ListItem.Show);  			GUICommon.SetEpisodeProperties (activity.ListItem.Show' activity.ListItem.Episode);  			break;  		case "movie":  			GUICommon.SetMovieProperties (activity.ListItem.Movie);  			break;  		}  	}  	break;  case ActivityType.comment:  	GUICommon.SetCommentProperties (activity.Shout' false);  	break;  }  
Missing Default,TraktPlugin,TraktDashboard,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktDashboard.cs,OnActivitySelected,The following switch statement is missing a default case: switch (activity.ListItem.Type) {  case "show":  	GUICommon.SetShowProperties (activity.ListItem.Show);  	break;  case "season":  	GUICommon.SetShowProperties (activity.ListItem.Show);  	GUICommon.SetSeasonProperties (activity.ListItem.Show' activity.ListItem.Season);  	break;  case "episode":  	GUICommon.SetShowProperties (activity.ListItem.Show);  	GUICommon.SetEpisodeProperties (activity.ListItem.Show' activity.ListItem.Episode);  	break;  case "movie":  	GUICommon.SetMovieProperties (activity.ListItem.Movie);  	break;  }  
Missing Default,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following switch statement is missing a default case: switch (message.SenderControlId) {  case ((int)ExternalPluginControls.WatchList):  case ((int)ExternalPluginControls.CustomList):  	// Confirm we are in IMDB/iTunes Trailer Details view  	// This will give us enough information to send to trakt  	bool isDetails = GUIPropertyManager.GetProperty ("#OnlineVideos.state").ToLowerInvariant () == "details";  	string siteUtil = GUIPropertyManager.GetProperty ("#OnlineVideos.selectedSiteUtil").ToLowerInvariant ();  	if (isDetails && (siteUtil == "imdb" || siteUtil == "itmovietrailers")) {  		title = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Title").Trim ();  		year = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Year").Trim ();  		if (siteUtil == "imdb") {  			// IMDb site exposes IMDb ID' use this to get a better match on trakt  			// this property is new' check for null in case user hasn't updated site  			imdbid = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.IMDbId");  			if (imdbid == null)  				imdbid = string.Empty;  			// could be a TV Show  			type = GUIPropertyManager.GetProperty ("#OnlineVideos.Details.Type").ToLowerInvariant ();  		}  		if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt")) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  		}  		// Return focus to details list now so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.OnlineVideos' 51);  	}  	break;  }  
Missing Default,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following switch statement is missing a default case: switch (message.SenderControlId) {  case ((int)ExternalPluginControls.WatchList):  case ((int)ExternalPluginControls.CustomList):  	// Confirm we are in Showtimes Details view  	// This will give us enough information to send to trakt  	bool isDetails = GUIWindowManager.GetWindow (GUIWindowManager.ActiveWindow).GetControl (24).Visible;  	if (isDetails) {  		title = GUIPropertyManager.GetProperty ("#st_title").Trim ();  		DateTime releaseDate = DateTime.MinValue;  		if (DateTime.TryParse (GUIPropertyManager.GetProperty ("#st_releasedate").Trim ()' out releaseDate)) {  			year = releaseDate.Year.ToString ();  		}  		imdbid = GUIPropertyManager.GetProperty ("#st_imdb");  		if (imdbid == null)  			imdbid = string.Empty;  		tmdbid = GUIPropertyManager.GetProperty ("#st_tmdb");  		if (tmdbid == null)  			imdbid = string.Empty;  		if ((!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year)) || imdbid.StartsWith ("tt") || !string.IsNullOrEmpty (tmdbid)) {  			if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  				validWatchListItem = true;  			if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  				validCustomListItem = true;  		}  		// set focus to next button so we dont go in a loop  		GUIControl.FocusControl ((int)ExternalPluginWindows.Showtimes' 42);  	}  	break;  }  
Missing Default,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following switch statement is missing a default case: switch (message.SenderControlId) {  case ((int)ExternalPluginControls.WatchList):  case ((int)ExternalPluginControls.CustomList):  case ((int)ExternalPluginControls.Rate):  case ((int)ExternalPluginControls.Shouts):  case ((int)ExternalPluginControls.RelatedItems):  case ((int)ExternalPluginControls.SearchBy):  case ((int)ExternalPluginControls.TraktMenu):  	type = "movie";  	title = GUIPropertyManager.GetProperty ("#title").Trim ();  	year = GUIPropertyManager.GetProperty ("#year").Trim ();  	imdbid = GUIPropertyManager.GetProperty ("#imdbnumber").Trim ();  	tmdbid = (GUIPropertyManager.GetProperty ("#tmdbnumber") ?? string.Empty).Trim ();  	MediaPortal.Util.FanArt.GetFanArtfilename (title' 0' out fanart);  	if (fanart.ToLowerInvariant ().Equals ("unknown")) {  		string movieid = GUIPropertyManager.GetProperty ("#movieid").Trim ();  		MediaPortal.Util.FanArt.GetFanArtfilename (movieid' 0' out fanart);  	}  	searchPeople = new SearchPeople ();  	string people = GUIPropertyManager.GetProperty ("#cast").Trim ();  	if (people != string.Empty && people != "unknown") {  		// actors seperated by newlines  		var peopleAndRoles = people.Split ('\n').Select (s => s.Trim ());  		// each actor string also includes the role: {0} as {1} &#10;  		// get the seperator from the localised string and then reverse the formatted string  		string roleSepString = GUILocalizeStrings.Get (1320).Split (' ') [1].Trim ();  		foreach (var personAndRole in peopleAndRoles) {  			var personAndRoleStrings = personAndRole.Split (new string[] {  				string.Format (" {0} "' roleSepString)  			}' StringSplitOptions.None);  			searchPeople.Actors.Add (personAndRoleStrings.First ());  		}  	}  	people = GUIPropertyManager.GetProperty ("#director").Trim ();  	if (people != string.Empty && people != "unknown")  		searchPeople.Directors.AddRange (people.Split (''').Select (s => s.Trim ()));  	people = GUIPropertyManager.GetProperty ("#credits").Trim ();  	if (people != string.Empty && people != "unknown") {  		var writers = people.Split (''').Select (s => s.Trim ());  		foreach (var writer in writers) {  			// remove the writer type e.g. (Story)' (Screenplay)  			searchPeople.Writers.Add (writer.Split ('(').First ().Trim ());  		}  	}  	if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  		if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  			validWatchListItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  			validCustomListItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.Rate)  			validRateItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  			validShoutItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  			validRelatedItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  			validTraktMenuItem = true;  	}  	// Set focus to Play Button now so we dont go in a loop  	GUIControl.FocusControl ((int)ExternalPluginWindows.VideoInfo' 2);  	break;  }  
Missing Default,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following switch statement is missing a default case: switch (message.SenderControlId) {  case ((int)ExternalPluginControls.WatchList):  case ((int)ExternalPluginControls.CustomList):  case ((int)ExternalPluginControls.Rate):  case ((int)ExternalPluginControls.Shouts):  case ((int)ExternalPluginControls.RelatedItems):  case ((int)ExternalPluginControls.SearchBy):  case ((int)ExternalPluginControls.TraktMenu):  	type = "movie";  	updatePluginFilters = true;  	title = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.title").Trim ();  	year = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.year").Trim ();  	imdbid = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.imdb_id").Trim ();  	fanart = GUIPropertyManager.GetProperty ("#MovingPictures.SelectedMovie.backdropfullpath").Trim ();  	isWatched = GUIPropertyManager.GetProperty ("#MovingPictures.UserMovieSettings.watched").Trim () != "0";  	// get movie people from database  	searchPeople = new SearchPeople ();  	if (TraktHelper.IsMovingPicturesAvailableAndEnabled) {  		int? movieID = null;  		int iYear = 0;  		int.TryParse (year' out iYear);  		if (MovingPictures.FindMovieID (title' iYear' imdbid' tmdbid.ToNullableInt32 ()' ref movieID))  			MovingPictures.GetMoviePersonInfo (movieID' out searchPeople);  	}  	if (!string.IsNullOrEmpty (imdbid) || (!string.IsNullOrEmpty (title) && !string.IsNullOrEmpty (year))) {  		if (message.SenderControlId == (int)ExternalPluginControls.WatchList)  			validWatchListItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.CustomList)  			validCustomListItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.Rate)  			validRateItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.Shouts)  			validShoutItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.RelatedItems)  			validRelatedItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.TraktMenu)  			validTraktMenuItem = true;  		if (message.SenderControlId == (int)ExternalPluginControls.SearchBy)  			validSearchItem = true;  	}  	// Set focus to Play Button now so we dont go in a loop  	GUIControl.FocusControl ((int)ExternalPluginWindows.MovingPictures' 6);  	break;  }  
Missing Default,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following switch statement is missing a default case: switch (type) {  case "movie":  	TraktLogger.Info ("Showing rate dialog for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year' imdbid);  	GUIUtils.ShowRateDialog<TraktSyncMovieRated> (new TraktSyncMovieRated {  		Ids = new TraktMovieId {  			Imdb = imdbid.ToNullIfEmpty ()'  			Tmdb = tmdbid.ToNullableInt32 ()  		}'  		Title = title'  		Year = year.ToNullableInt32 ()  	});  	break;  case "series":  	TraktLogger.Info ("Showing rate dialog for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year' showtvdbid);  	GUIUtils.ShowRateDialog<TraktSyncShowRated> (new TraktSyncShowRated {  		Ids = new TraktShowId {  			Tvdb = showtvdbid.ToNullableInt32 ()'  			Imdb = imdbid.ToNullIfEmpty ()  		}'  		Title = title'  		Year = year.ToNullableInt32 ()  	});  	break;  case "episode":  	TraktLogger.Info ("Showing rate dialog for tv episode. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'' Episode TVDb ID = '{4}'"' title' year' season' episode' epTvdbId);  	GUIUtils.ShowRateDialog<TraktSyncEpisodeRated> (new TraktSyncEpisodeRated {  		Ids = new TraktEpisodeId {  			Tvdb = showtvdbid.ToNullableInt32 ()  		}'  		Number = episode.ToInt ()'  		Season = season.ToInt ()'  		RatedAt = DateTime.UtcNow.ToISO8601 ()  	});  	break;  }  
Missing Default,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following switch statement is missing a default case: switch (type) {  #region movie  case "movie":  	TraktLogger.Info ("Displaying Shouts for {0}. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year' imdbid);  	TraktHelper.ShowMovieShouts (title' year' imdbid' isWatched' fanart);  	break;  #endregion  #region episode  case "episode":  	TraktLogger.Info ("Displaying Shouts for {0}. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year' showtvdbid);  	TraktHelper.ShowEpisodeShouts (title' showtvdbid' season' episode' isWatched' fanart);  	break;  #endregion  #region series  case "series":  	TraktLogger.Info ("Displaying Shouts for {0}. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year' showtvdbid);  	TraktHelper.ShowTVShowShouts (title' showtvdbid.ToNullableInt32 ()' null' isWatched' fanart);  	break;  #endregion  }  
Missing Default,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following switch statement is missing a default case: switch (type) {  #region movie  case "movie":  	TraktLogger.Info ("Displaying Related Movies for {0}. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year' imdbid);  	TraktHelper.ShowRelatedMovies (title' year' imdbid);  	break;  #endregion  #region series  case "series":  	TraktLogger.Info ("Displaying Related Shows for {0}. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year' showtvdbid);  	TraktHelper.ShowRelatedShows (title' showtvdbid);  	break;  #endregion  }  
Missing Default,TraktPlugin,TraktPlugin,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktPlugin.cs,GUIWindowManager_Receivers,The following switch statement is missing a default case: switch (type) {  case "movie":  	GUICommon.ShowTraktExtMovieMenu (title' year' imdbid' isWatched' fanart' searchPeople' false);  	break;  case "series":  	GUICommon.ShowTraktExtTVShowMenu (title' year' showtvdbid' imdbid' fanart' searchPeople' false);  	break;  case "episode":  	GUICommon.ShowTraktExtEpisodeMenu (title' year' season' episode' showtvdbid' isWatched' fanart' searchPeople' false);  	break;  }  
Missing Default,TraktPlugin,TraktSettings,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktSettings.cs,PerformMaintenance,The following switch statement is missing a default case: switch (currentSettingsVersion) {  case 0:  	xmlreader.RemoveEntry (cTrakt' cLastActivityLoad);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingMovies);  	xmlreader.RemoveEntry (cTrakt' cLastTrendingShows);  	xmlreader.RemoveEntry (cTrakt' cLastStatistics);  	currentSettingsVersion++;  	break;  case 1:  	// trailers plugin now supports tvshows' seasons and episodes.  	xmlreader.SetValueAsBool (cTrakt' "UseTrailersPlugin"' true);  	currentSettingsVersion++;  	break;  case 2:  	// Only use Trailers plugin now for Trailers functionality.  	xmlreader.RemoveEntry (cTrakt' "UseTrailersPlugin");  	xmlreader.RemoveEntry (cTrakt' "DefaultTVShowTrailerSite");  	xmlreader.RemoveEntry (cTrakt' "DefaultMovieTrailerSite");  	// Remove old activity settings  	xmlreader.RemoveEntry (cTrakt' "ShowCommunityActivity");  	xmlreader.RemoveEntry (cTrakt' "IncludeMeInFriendsActivity");  	// Remove old category/filter node ids for MovingPictures (not needed)  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesCategoryId");  	xmlreader.RemoveEntry (cTrakt' "MovingPicturesFilterId");  	currentSettingsVersion++;  	break;  case 3:  	// Remove 4TR / My Anime plugin handlers (plugins no longer developed or superceded)  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordRecordings");  	xmlreader.RemoveEntry (cTrakt' "ForTheRecordTVLive");  	xmlreader.RemoveEntry (cTrakt' "MyAnime");  	// Clear existing passwords as they're no longer hashed in new API v2  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	// Remove Advanced Rating setting' there is only one now  	xmlreader.RemoveEntry (cTrakt' "ShowAdvancedRatingsDialog");  	// Remove SkippedMovies and AlreadyExistMovies as data structures changed  	xmlreader.RemoveEntry (cTrakt' "SkippedMovies");  	xmlreader.RemoveEntry (cTrakt' "AlreadyExistMovies");  	// Remove old show collection cache  	xmlreader.RemoveEntry (cTrakt' "ShowsInCollection");  	// Reset some defaults  	xmlreader.RemoveEntry (cTrakt' cSyncRatings);  	xmlreader.RemoveEntry (cTrakt' cDashboardActivityPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardTrendingPollInterval);  	xmlreader.RemoveEntry (cTrakt' cDashboardLoadDelay);  	xmlreader.RemoveEntry (cTrakt' cShowRateDlgForPlaylists);  	xmlreader.RemoveEntry (cTrakt' cSearchTypes);  	// Remove any persisted data that has changed with with new API v2  	try {  		if (File.Exists (cLastActivityFileCache))  			File.Delete (cLastActivityFileCache);  		if (File.Exists (cLastTrendingShowFileCache))  			File.Delete (cLastTrendingShowFileCache);  		if (File.Exists (cLastTrendingMovieFileCache))  			File.Delete (cLastTrendingMovieFileCache);  		if (File.Exists (cLastStatisticsFileCache))  			File.Delete (cLastStatisticsFileCache);  		// Remove old artwork - filenames have changed  		string imagePath = Config.GetFolder (Config.Dir.Thumbs) + "\\Trakt";  		if (Directory.Exists (imagePath)) {  			Directory.Delete (imagePath' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 4:  	try {  		// Fix bad upgrade from previous release  		string dashboardPersistence = Config.GetFolder (Config.Dir.Config) + "\\Trakt\\Dashboard";  		if (Directory.Exists (dashboardPersistence)) {  			Directory.Delete (dashboardPersistence' true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove v1 API persisted data from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 5:  	// Clear existing passwords' change of encryption/decryption technique  	xmlreader.RemoveEntry (cTrakt' cPassword);  	xmlreader.RemoveEntry (cTrakt' cUserLogins);  	currentSettingsVersion++;  	break;  case 6:  	// Save Sync Interval in Hours from Milliseconds  	int syncTimerLength = xmlreader.GetValueAsInt (cTrakt' cSyncTimerLength' 24);  	if (syncTimerLength > 24) {  		// requires upgrade  		xmlreader.SetValue (cTrakt' cSyncTimerLength' syncTimerLength / 3600000);  	}  	currentSettingsVersion++;  	break;  case 7:  	// upgrade last activity view  	xmlreader.RemoveEntry (cTrakt' cActivityStreamView);  	// remove last paused item processed - stored in last activities  	xmlreader.RemoveEntry (cTrakt' "LastPausedItemProcessed");  	currentSettingsVersion++;  	break;  case 8:  	// cleanup cached likes' API changed to include a user object for lists  	// i.e. the user that owns the list  	try {  		var folderName = Path.Combine (Config.GetFolder (Config.Dir.Config)' @"Trakt");  		var matches = Directory.GetFiles (folderName' "Liked.json"' SearchOption.AllDirectories);  		foreach (string file in matches) {  			File.Delete (file);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached likes from disk' Reason = '{0}'"' e.Message);  	}  	currentSettingsVersion++;  	break;  case 9:  	// remove old thumbs folder  	try {  		DirectoryInfo di = new DirectoryInfo (Path.Combine (Config.GetFolder (Config.Dir.Thumbs)' @"Trakt"));  		foreach (FileInfo file in di.GetFiles ()) {  			file.Delete ();  		}  		foreach (DirectoryInfo dir in di.GetDirectories ()) {  			dir.Delete (true);  		}  	} catch (Exception e) {  		TraktLogger.Error ("Failed to remove previously cached thumbs from disk' Reason = '{0}'"' e.Message);  	}  	// update default sizes for requests so we dont hit any limits from TMDb by default  	xmlreader.SetValue (cTrakt' cMaxAnticipatedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxAnticipatedShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxPopularShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedMoviesUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxRelatedShowsUnWatchedRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxTrendingShowsRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedEpisodesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserWatchedMoviesRequest' 40);  	xmlreader.SetValue (cTrakt' cMaxUserCommentsRequest' 40);  	currentSettingsVersion++;  	break;  }  
Missing Default,TraktPlugin.GUI,GUICreditsMovie,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsMovie.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId) {  case ((int)ContextMenuItem.ChangeLayout):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  }  
Missing Default,TraktPlugin.GUI,GUICreditsShow,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICreditsShow.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId) {  case ((int)ContextMenuItem.ChangeLayout):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  }  
Missing Default,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetLayoutTranslation,The following switch statement is missing a default case: switch (layout) {  case Layout.List:  	strLine = GUILocalizeStrings.Get (101);  	break;  case Layout.SmallIcons:  	strLine = GUILocalizeStrings.Get (100);  	break;  case Layout.LargeIcons:  	strLine = GUILocalizeStrings.Get (417);  	break;  case Layout.Filmstrip:  	strLine = GUILocalizeStrings.Get (733);  	break;  }  
Missing Default,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The following switch statement is missing a default case: switch (dlg.SelectedId) {  case ((int)TraktMenuItems.Rate):  	TraktLogger.Info ("Displaying rate dialog for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString ()' imdbid.ToLogString ());  	var movie = new TraktSyncMovieRated {  		Ids = new TraktMovieId {  			Imdb = imdbid.ToNullIfEmpty ()  		}'  		Title = title'  		Year = year.ToNullableInt32 ()  	};  	int rating = GUIUtils.ShowRateDialog<TraktSyncMovieRated> (movie);  	// update local databases  	if (rating >= 0) {  		switch (GUIWindowManager.ActiveWindow) {  		case (int)ExternalPluginWindows.MovingPictures:  			TraktHandlers.MovingPictures.SetUserRating (rating);  			break;  		case (int)ExternalPluginWindows.MyFilms:  			TraktHandlers.MyFilmsHandler.SetUserRating (rating' title' year.ToNullableInt32 ()' imdbid.ToNullIfEmpty ());  			break;  		}  		if (rating == 0)  			TraktCache.RemoveMovieFromRatings (movie);  		else  			TraktCache.AddMovieToRatings (movie' rating);  	}  	break;  case ((int)TraktMenuItems.Shouts):  	TraktLogger.Info ("Displaying Shouts for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString ()' imdbid.ToLogString ());  	TraktHelper.ShowMovieShouts (imdbid' title' year' fanart);  	break;  case ((int)TraktMenuItems.Related):  	TraktLogger.Info ("Displaying Related Movies for. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString ()' imdbid.ToLogString ());  	TraktHelper.ShowRelatedMovies (title' year' imdbid);  	break;  case ((int)TraktMenuItems.AddToWatchList):  	TraktLogger.Info ("Adding movie to Watchlist. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString ()' imdbid.ToLogString ());  	TraktHelper.AddMovieToWatchList (title' year' imdbid' true);  	break;  case ((int)TraktMenuItems.AddToCustomList):  	TraktLogger.Info ("Adding movie to Custom List. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString ()' imdbid.ToLogString ());  	TraktHelper.AddRemoveMovieInUserList (title' year' imdbid' false);  	break;  case ((int)TraktMenuItems.Cast):  	TraktLogger.Info ("Displaying Cast for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString ()' imdbid.ToLogString ());  	GUICreditsMovie.Movie = null;  	GUICreditsMovie.Type = GUICreditsMovie.CreditType.Cast;  	GUICreditsMovie.Fanart = fanart;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CreditsMovie' imdbid);  	break;  case ((int)TraktMenuItems.Crew):  	TraktLogger.Info ("Displaying Crew for movie. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString ()' imdbid.ToLogString ());  	GUICreditsMovie.Movie = null;  	GUICreditsMovie.Type = GUICreditsMovie.CreditType.Crew;  	GUICreditsMovie.Fanart = fanart;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CreditsMovie' imdbid);  	break;  case ((int)TraktMenuItems.SearchBy):  	ShowSearchByMenu (people' title' fanart);  	break;  case ((int)TraktMenuItems.UserProfile):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.UserProfile);  	break;  case ((int)TraktMenuItems.Network):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.Network);  	break;  case ((int)TraktMenuItems.Recommendations):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecommendationsMovies);  	break;  case ((int)TraktMenuItems.Trending):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.TrendingMovies);  	break;  case ((int)TraktMenuItems.Popular):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.PopularMovies);  	break;  case ((int)TraktMenuItems.Anticipated):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.AnticipatedMovies);  	break;  case ((int)TraktMenuItems.WatchList):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListMovies);  	break;  case ((int)TraktMenuItems.Lists):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CustomLists);  	break;  }  
Missing Default,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtMovieMenu,The following switch statement is missing a default case: switch (GUIWindowManager.ActiveWindow) {  case (int)ExternalPluginWindows.MovingPictures:  	TraktHandlers.MovingPictures.SetUserRating (rating);  	break;  case (int)ExternalPluginWindows.MyFilms:  	TraktHandlers.MyFilmsHandler.SetUserRating (rating' title' year.ToNullableInt32 ()' imdbid.ToNullIfEmpty ());  	break;  }  
Missing Default,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The following switch statement is missing a default case: switch (dlg.SelectedId) {  case ((int)TraktMenuItems.Rate):  	TraktLogger.Info ("Displaying rate dialog for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString ()' tvdbid.ToLogString ());  	var show = new TraktSyncShowRated {  		Ids = new TraktShowId {  			Tvdb = tvdbid.ToNullableInt32 ()'  			Imdb = imdbid.ToNullIfEmpty ()  		}'  		Title = title'  		Year = year.ToNullableInt32 ()  	};  	int rating = GUIUtils.ShowRateDialog<TraktSyncShowRated> (show);  	// update local databases  	if (rating >= 0) {  		switch (GUIWindowManager.ActiveWindow) {  		case (int)ExternalPluginWindows.TVSeries:  			TraktHandlers.TVSeries.SetShowUserRating (rating);  			break;  		}  		if (rating == 0)  			TraktCache.RemoveShowFromRatings (show);  		else  			TraktCache.AddShowToRatings (show' rating);  	}  	break;  case ((int)TraktMenuItems.Shouts):  	TraktLogger.Info ("Displaying Shouts for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'' IMDb ID = '{3}'"' title' year.ToLogString ()' tvdbid.ToLogString ()' imdbid.ToLogString ());  	TraktHelper.ShowTVShowShouts (title' year.ToNullableInt32 ()' tvdbid.ToNullableInt32 ()' null' imdbid' false' fanart);  	break;  case ((int)TraktMenuItems.Related):  	TraktLogger.Info ("Displaying Related shows for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString ()' tvdbid.ToLogString ());  	TraktHelper.ShowRelatedShows (title' year.ToNullableInt32 ()' tvdbid.ToNullableInt32 ()' imdbid.ToNullIfEmpty ()' null' null);  	break;  case ((int)TraktMenuItems.ShowSeasonInfo):  	TraktLogger.Info ("Displaying Season Info for tv show. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString ()' tvdbid.ToLogString ());  	var showSummary = new TraktShowSummary {  		Ids = new TraktShowId {  			Imdb = imdbid.ToNullIfEmpty ()'  			Tvdb = tvdbid.ToNullableInt32 ()  		}'  		Title = title'  		Year = year.ToNullableInt32 ()  	};  	GUIShowSeasons.Fanart = fanart;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' showSummary.ToJSON ());  	break;  case ((int)TraktMenuItems.AddToWatchList):  	TraktLogger.Info ("Adding tv show to Watchlist. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString ()' tvdbid.ToLogString ());  	TraktHelper.AddShowToWatchList (title' year.ToNullableInt32 ()' tvdbid.ToNullableInt32 ()' imdbid.ToNullIfEmpty ()' null' null);  	break;  case ((int)TraktMenuItems.AddToCustomList):  	TraktLogger.Info ("Adding tv show to Custom List. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'"' title' year.ToLogString ()' tvdbid.ToLogString ());  	TraktHelper.AddRemoveShowInUserList (title' year' tvdbid' false);  	break;  case ((int)TraktMenuItems.Cast):  	TraktLogger.Info ("Displaying Cast for show. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString ()' imdbid.ToLogString ());  	GUICreditsShow.Show = null;  	GUICreditsShow.Type = GUICreditsShow.CreditType.Cast;  	GUICreditsShow.Fanart = fanart;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CreditsShow' imdbid);  	break;  case ((int)TraktMenuItems.Crew):  	TraktLogger.Info ("Displaying Crew for show. Title = '{0}'' Year = '{1}'' IMDb ID = '{2}'"' title' year.ToLogString ()' imdbid.ToLogString ());  	GUICreditsShow.Show = null;  	GUICreditsShow.Type = GUICreditsShow.CreditType.Crew;  	GUICreditsShow.Fanart = fanart;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CreditsShow' imdbid);  	break;  case ((int)TraktMenuItems.SearchBy):  	ShowSearchByMenu (people' title' fanart);  	break;  case ((int)TraktMenuItems.UserProfile):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.UserProfile);  	break;  case ((int)TraktMenuItems.Network):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.Network);  	break;  case ((int)TraktMenuItems.Calendar):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.Calendar);  	break;  case ((int)TraktMenuItems.Recommendations):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecommendationsShows);  	break;  case ((int)TraktMenuItems.Trending):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.TrendingShows);  	break;  case ((int)TraktMenuItems.Popular):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.PopularShows);  	break;  case ((int)TraktMenuItems.Anticipated):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.AnticipatedShows);  	break;  case ((int)TraktMenuItems.WatchList):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListShows);  	break;  case ((int)TraktMenuItems.Lists):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CustomLists);  	break;  }  
Missing Default,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVShowMenu,The following switch statement is missing a default case: switch (GUIWindowManager.ActiveWindow) {  case (int)ExternalPluginWindows.TVSeries:  	TraktHandlers.TVSeries.SetShowUserRating (rating);  	break;  }  
Missing Default,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtTVSeasonMenu,The following switch statement is missing a default case: switch (dlg.SelectedId) {  case ((int)TraktMenuItems.Rate):  	TraktLogger.Info ("Displaying rate dialog for tv season. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'' Season = '{3}'"' title' year.ToLogString ()' tvdbid.ToLogString ()' season);  	GUIUtils.ShowRateDialog<TraktSyncSeasonRatedEx> (new TraktSyncSeasonRatedEx {  		Ids = new TraktShowId {  			Tvdb = tvdbid.ToNullableInt32 ()'  			Imdb = imdbid.ToNullIfEmpty ()  		}'  		Title = title'  		Year = year.ToNullableInt32 ()'  		Seasons = new List<TraktSyncSeasonRatedEx.Season> {  			new TraktSyncSeasonRatedEx.Season {  				Number = seasonNumber'  				RatedAt = DateTime.UtcNow.ToISO8601 ()  			}  		}  	});  	break;  case ((int)TraktMenuItems.Shouts):  	TraktLogger.Info ("Displaying Shouts for tv season. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'' IMDb ID = '{3}'' Season = '{4}'"' title' year.ToLogString ()' tvdbid.ToLogString ()' imdbid.ToLogString ()' season);  	TraktHelper.ShowTVSeasonShouts (title' year.ToNullableInt32 ()' tvdbid.ToNullableInt32 ()' null' imdbid' seasonNumber' false' fanart);  	break;  case ((int)TraktMenuItems.AddToWatchList):  	TraktLogger.Info ("Adding tv season to Watchlist. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}' Season = '{3}'"' title' year.ToLogString ()' tvdbid.ToLogString ()' season);  	TraktHelper.AddSeasonToWatchList (title' year.ToNullableInt32 ()' seasonNumber' tvdbid.ToNullableInt32 ()' imdbid.ToNullIfEmpty ()' null' null);  	break;  case ((int)TraktMenuItems.AddToCustomList):  	TraktLogger.Info ("Adding tv season to Custom List. Title = '{0}'' Year = '{1}'' TVDb ID = '{2}'' Season = '{3}'"' title' year.ToLogString ()' tvdbid.ToLogString ()' season);  	//TraktHelper.AddRemoveSeasonInUserList(title' year' tvdbid' false);  	break;  case ((int)TraktMenuItems.UserProfile):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.UserProfile);  	break;  case ((int)TraktMenuItems.Network):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.Network);  	break;  case ((int)TraktMenuItems.Calendar):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.Calendar);  	break;  case ((int)TraktMenuItems.Recommendations):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecommendationsShows);  	break;  case ((int)TraktMenuItems.Trending):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.TrendingShows);  	break;  case ((int)TraktMenuItems.WatchList):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListShows);  	break;  case ((int)TraktMenuItems.Lists):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CustomLists);  	break;  }  
Missing Default,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The following switch statement is missing a default case: switch (dlg.SelectedId) {  case ((int)TraktMenuItems.Rate):  	TraktLogger.Info ("Displaying rate dialog for tv episode. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'' Show ID = '{4}'' Episode ID = '{5}'"' title' year.ToLogString ()' season' episode' tvdbid.ToLogString ()' episodetvdbid.ToLogString ());  	var show = new TraktSyncShowRatedEx {  		Ids = new TraktShowId {  			Tvdb = tvdbid.ToNullableInt32 ()'  			Imdb = imdbid.ToNullIfEmpty ()  		}'  		Title = title'  		Year = year.ToNullableInt32 ()'  		Seasons = new List<TraktSyncShowRatedEx.Season> {  			new TraktSyncShowRatedEx.Season {  				Number = season.ToInt ()'  				Episodes = new List<TraktSyncShowRatedEx.Season.Episode> {  					new TraktSyncShowRatedEx.Season.Episode {  						Number = episode.ToInt ()'  						RatedAt = DateTime.UtcNow.ToISO8601 ()  					}  				}  			}  		}  	};  	int rating = GUIUtils.ShowRateDialog<TraktSyncShowRatedEx> (show);  	// update local databases  	if (rating >= 0) {  		switch (GUIWindowManager.ActiveWindow) {  		case (int)ExternalPluginWindows.TVSeries:  			TraktHandlers.TVSeries.SetEpisodeUserRating (rating);  			break;  		}  	}  	break;  case ((int)TraktMenuItems.Shouts):  	TraktLogger.Info ("Displaying Shouts for tv episode. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'"' title' year.ToLogString ()' season' episode);  	TraktHelper.ShowEpisodeShouts (title' year.ToNullableInt32 ()' tvdbid.ToNullableInt32 ()' null' imdbid.ToNullIfEmpty ()' season.ToInt ()' episode.ToInt ()' isWatched' fanart);  	break;  case ((int)TraktMenuItems.AddToWatchList):  	TraktLogger.Info ("Adding tv episode to Watchlist. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'"' title' year.ToLogString ()' season' episode);  	TraktHelper.AddEpisodeToWatchList (title' season.ToInt ()' episode.ToInt ()' tvdbid.ToNullableInt32 ()' null' null' null);  	break;  case ((int)TraktMenuItems.AddToCustomList):  	TraktLogger.Info ("Adding tv episode to Custom List. Title = '{0}'' Year = '{1}'' Season = '{2}'' Episode = '{3}'' Episode ID = '{4}'"' title' year.ToLogString ()' season' episode' episodetvdbid.ToLogString ());  	if (string.IsNullOrEmpty (episodetvdbid)) {  		TraktHelper.AddRemoveEpisodeInUserList (new TraktEpisode {  			Ids = new TraktEpisodeId {  				Tvdb = episodetvdbid.ToNullableInt32 ()  			}  		}' false);  	}  	break;  case ((int)TraktMenuItems.SearchBy):  	ShowSearchByMenu (people' title' fanart);  	break;  case ((int)TraktMenuItems.UserProfile):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.UserProfile);  	break;  case ((int)TraktMenuItems.Calendar):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.Calendar);  	break;  case ((int)TraktMenuItems.Network):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.Network);  	break;  case ((int)TraktMenuItems.WatchList):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListEpisodes);  	break;  case ((int)TraktMenuItems.Lists):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CustomLists);  	break;  }  
Missing Default,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTraktExtEpisodeMenu,The following switch statement is missing a default case: switch (GUIWindowManager.ActiveWindow) {  case (int)ExternalPluginWindows.TVSeries:  	TraktHandlers.TVSeries.SetEpisodeUserRating (rating);  	break;  }  
Missing Default,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowMovieFiltersMenu,The following switch statement is missing a default case: switch ((Filters)Enum.Parse (typeof(Filters)' item.ItemID' true)) {  case Filters.Watched:  	TraktSettings.TrendingMoviesHideWatched = !TraktSettings.TrendingMoviesHideWatched;  	break;  case Filters.Watchlisted:  	TraktSettings.TrendingMoviesHideWatchlisted = !TraktSettings.TrendingMoviesHideWatchlisted;  	break;  case Filters.Collected:  	TraktSettings.TrendingMoviesHideCollected = !TraktSettings.TrendingMoviesHideCollected;  	break;  case Filters.Rated:  	TraktSettings.TrendingMoviesHideRated = !TraktSettings.TrendingMoviesHideRated;  	break;  }  
Missing Default,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,ShowTVShowFiltersMenu,The following switch statement is missing a default case: switch ((Filters)Enum.Parse (typeof(Filters)' item.ItemID' true)) {  case Filters.Watched:  	TraktSettings.TrendingShowsHideWatched = !TraktSettings.TrendingShowsHideWatched;  	break;  case Filters.Watchlisted:  	TraktSettings.TrendingShowsHideWatchlisted = !TraktSettings.TrendingShowsHideWatchlisted;  	break;  case Filters.Collected:  	TraktSettings.TrendingShowsHideCollected = !TraktSettings.TrendingShowsHideCollected;  	break;  case Filters.Rated:  	TraktSettings.TrendingShowsHideRated = !TraktSettings.TrendingShowsHideRated;  	break;  }  
Missing Default,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityListItemTitle,The following switch statement is missing a default case: switch (action) {  case ActivityAction.watching:  	title = string.Format (Translation.ActivityWatching' userName' itemName);  	break;  case ActivityAction.scrobble:  	if (activity.Plays () > 1) {  		title = string.Format (Translation.ActivityWatchedWithPlays' userName' itemName' activity.Plays ());  	} else {  		title = string.Format (Translation.ActivityWatched' userName' itemName);  	}  	break;  case ActivityAction.checkin:  	title = string.Format (Translation.ActivityCheckedIn' userName' itemName);  	break;  case ActivityAction.seen:  	if (type == ActivityType.episode && activity.Episodes.Count > 1) {  		title = string.Format (Translation.ActivitySeenEpisodes' userName' activity.Episodes.Count' itemName);  	} else {  		title = string.Format (Translation.ActivitySeen' userName' itemName);  	}  	break;  case ActivityAction.collection:  	if (type == ActivityType.episode && activity.Episodes.Count > 1) {  		title = string.Format (Translation.ActivityCollectedEpisodes' userName' activity.Episodes.Count' itemName);  	} else {  		title = string.Format (Translation.ActivityCollected' userName' itemName);  	}  	break;  case ActivityAction.rating:  	title = string.Format (Translation.ActivityRatingAdvanced' userName' itemName' activity.Rating);  	break;  case ActivityAction.watchlist:  	if (view != ActivityView.me) {  		title = string.Format (Translation.ActivityWatchlist' userName' itemName);  	} else {  		title = string.Format (Translation.ActivityYourWatchlist' userName' itemName);  	}  	break;  case ActivityAction.review:  	title = string.Format (Translation.ActivityReview' userName' itemName);  	break;  case ActivityAction.shout:  	title = string.Format (Translation.ActivityShouts' userName' itemName);  	break;  case ActivityAction.pause:  	title = string.Format (Translation.ActivityPaused' userName' itemName' Math.Round (activity.Progress' 0));  	break;  case ActivityAction.created:  	// created list  	title = string.Format (Translation.ActivityCreatedList' userName' itemName);  	break;  case ActivityAction.updated:  	// updated list  	if (activity.List.ItemCount == 0) {  		title = string.Format (Translation.ActivityUpdatedList' userName' itemName);  	} else if (activity.List.ItemCount == 1) {  		title = string.Format (Translation.ActivityUpdatedListWithItemCountSingular' userName' itemName' 1);  	} else {  		title = string.Format (Translation.ActivityUpdatedListWithItemCount' userName' itemName' activity.List.ItemCount);  	}  	break;  case ActivityAction.item_added:  	// added item to list  	title = string.Format (Translation.ActivityAddToList' userName' itemName' activity.List.Name);  	break;  case ActivityAction.like:  	if (type == ActivityType.comment) {  		title = string.Format (Translation.ActivityLikedComment' userName' activity.Shout.User.Username' itemName);  	} else if (type == ActivityType.list) {  		title = string.Format (Translation.ActivityLikedList' userName' itemName);  	}  	break;  }  
Missing Default,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityItemName,The following switch statement is missing a default case: switch (type) {  case ActivityType.episode:  	if (action == ActivityAction.seen || action == ActivityAction.collection) {  		if (activity.Episodes.Count > 1) {  			// just return show name  			name = activity.Show.Title;  		} else {  			//  get the first and only item in collection of episodes  			string episodeIndex = activity.Episodes.First ().Number.ToString ();  			string seasonIndex = activity.Episodes.First ().Season.ToString ();  			string episodeName = activity.Episodes.First ().Title;  			if (!string.IsNullOrEmpty (episodeName))  				episodeName = string.Format (" - {0}"' episodeName);  			name = string.Format ("{0} - {1}x{2}{3}"' activity.Show.Title' seasonIndex' episodeIndex' episodeName);  		}  	} else {  		string episodeName = activity.Episode.Title;  		if (!string.IsNullOrEmpty (episodeName))  			episodeName = string.Format (" - {0}"' episodeName);  		name = string.Format ("{0} - {1}x{2}{3}"' activity.Show.Title' activity.Episode.Season.ToString ()' activity.Episode.Number.ToString ()' episodeName);  	}  	break;  case ActivityType.show:  	name = activity.Show.Title;  	break;  case ActivityType.season:  	name = string.Format ("{0} - {1} {2}"' activity.Show.Title' Translation.Season' activity.Season.Number);  	break;  case ActivityType.movie:  	name = string.Format ("{0} ({1})"' activity.Movie.Title' activity.Movie.Year);  	break;  case ActivityType.person:  	name = string.Format ("{0}"' activity.Person.Name);  	break;  case ActivityType.list:  	if (action == ActivityAction.item_added) {  		// return the name of the item added to the list  		switch (activity.ListItem.Type) {  		case "show":  			name = activity.ListItem.Show.Title;  			break;  		case "season":  			name = string.Format ("{0} - {1} {2}"' activity.ListItem.Show.Title' Translation.Season' activity.ListItem.Season.Number);  			break;  		case "episode":  			string episodeIndex = activity.ListItem.Episode.Number.ToString ();  			string seasonIndex = activity.ListItem.Episode.Season.ToString ();  			string episodeName = activity.ListItem.Episode.Title;  			if (string.IsNullOrEmpty (episodeName))  				episodeName = string.Format ("{0} {1}"' Translation.Episode' episodeIndex);  			name = string.Format ("{0} - {1}x{2} - {3}"' activity.ListItem.Show.Title' seasonIndex' episodeIndex' episodeName);  			break;  		case "movie":  			name = string.Format ("{0} ({1})"' activity.ListItem.Movie.Title' activity.ListItem.Movie.Year);  			break;  		case "person":  			name = string.Format ("{0}"' activity.Person.Name);  			break;  		}  	} else {  		// return the list name  		name = activity.List.Name;  	}  	break;  case ActivityType.comment:  	name = activity.Shout.Text.Truncate (30);  	break;  }  
Missing Default,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,GetActivityItemName,The following switch statement is missing a default case: switch (activity.ListItem.Type) {  case "show":  	name = activity.ListItem.Show.Title;  	break;  case "season":  	name = string.Format ("{0} - {1} {2}"' activity.ListItem.Show.Title' Translation.Season' activity.ListItem.Season.Number);  	break;  case "episode":  	string episodeIndex = activity.ListItem.Episode.Number.ToString ();  	string seasonIndex = activity.ListItem.Episode.Season.ToString ();  	string episodeName = activity.ListItem.Episode.Title;  	if (string.IsNullOrEmpty (episodeName))  		episodeName = string.Format ("{0} {1}"' Translation.Episode' episodeIndex);  	name = string.Format ("{0} - {1}x{2} - {3}"' activity.ListItem.Show.Title' seasonIndex' episodeIndex' episodeName);  	break;  case "movie":  	name = string.Format ("{0} ({1})"' activity.ListItem.Movie.Title' activity.ListItem.Movie.Year);  	break;  case "person":  	name = string.Format ("{0}"' activity.Person.Name);  	break;  }  
Missing Default,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckRatingOnMovie,The following switch statement is missing a default case: switch (CurrentMovie.Certification) {  case "R":  	if (allowedRating == "R")  		return true;  	break;  case "PG-13":  	if (allowedRating == "R")  		return true;  	if (allowedRating == "PG-13")  		return true;  	break;  case "PG":  	if (allowedRating == "R")  		return true;  	if (allowedRating == "PG-13")  		return true;  	if (allowedRating == "PG")  		return true;  	break;  case "G":  	if (allowedRating == "R")  		return true;  	if (allowedRating == "PG-13")  		return true;  	if (allowedRating == "PG")  		return true;  	if (allowedRating == "G")  		return true;  	break;  }  
Missing Default,TraktPlugin.GUI,GUICommon,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICommon.cs,CheckRatingOnShow,The following switch statement is missing a default case: switch (CurrentShow.Certification) {  case "M":  	if (allowedRating == "M")  		return true;  	break;  case "TV-14":  	if (allowedRating == "M")  		return true;  	if (allowedRating == "TV-14")  		return true;  	break;  case "TV-PG":  	if (allowedRating == "M")  		return true;  	if (allowedRating == "TV-14")  		return true;  	if (allowedRating == "TV-PG")  		return true;  	break;  case "TV-G":  	if (allowedRating == "M")  		return true;  	if (allowedRating == "TV-14")  		return true;  	if (allowedRating == "TV-PG")  		return true;  	if (allowedRating == "TV-G")  		return true;  	break;  case "TV-Y7":  	if (allowedRating == "M")  		return true;  	if (allowedRating == "TV-14")  		return true;  	if (allowedRating == "TV-PG")  		return true;  	if (allowedRating == "TV-G")  		return true;  	if (allowedRating == "TV-Y7")  		return true;  	break;  case "TV-Y":  	if (allowedRating == "M")  		return true;  	if (allowedRating == "TV-14")  		return true;  	if (allowedRating == "TV-PG")  		return true;  	if (allowedRating == "TV-G")  		return true;  	if (allowedRating == "TV-Y7")  		return true;  	if (allowedRating == "TV-Y")  		return true;  	break;  }  
Missing Default,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,GetSyncItems,The following switch statement is missing a default case: switch (listItem.Type) {  case "movie":  	var movie = new TraktMovie {  		Ids = new TraktMovieId {  			Trakt = listItem.Movie.Ids.Trakt  		}  	};  	syncItems.Movies = new List<TraktMovie> ();  	syncItems.Movies.Add (movie);  	break;  case "show":  	var show = new TraktShow {  		Ids = new TraktShowId {  			Trakt = listItem.Show.Ids.Trakt  		}  	};  	syncItems.Shows = new List<TraktShow> ();  	syncItems.Shows.Add (show);  	break;  case "season":  	var season = new TraktSeason {  		Ids = new TraktSeasonId {  			Trakt = listItem.Season.Ids.Trakt  		}  	};  	syncItems.Seasons = new List<TraktSeason> ();  	syncItems.Seasons.Add (season);  	break;  case "episode":  	var episode = new TraktEpisode {  		Ids = new TraktEpisodeId {  			Trakt = listItem.Episode.Ids.Trakt  		}  	};  	syncItems.Episodes = new List<TraktEpisode> ();  	syncItems.Episodes.Add (episode);  	break;  case "person":  	var person = new TraktPerson {  		Ids = new TraktPersonId {  			Trakt = listItem.Person.Ids.Trakt  		}  	};  	syncItems.People = new List<TraktPerson> ();  	syncItems.People.Add (person);  	break;  }  
Missing Default,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,ListItemMatch,The following switch statement is missing a default case: switch (itemToMatch.Type) {  case "movie":  	if (currentItem.Movie == null)  		return false;  	return currentItem.Movie.Ids.Trakt == itemToMatch.Movie.Ids.Trakt;  case "show":  	if (currentItem.Show == null)  		return false;  	return currentItem.Show.Ids.Trakt == itemToMatch.Show.Ids.Trakt;  case "season":  	if (currentItem.Season == null)  		return false;  	return currentItem.Season.Ids.Trakt == itemToMatch.Season.Ids.Trakt;  case "episode":  	if (currentItem.Episode == null)  		return false;  	return currentItem.Episode.Ids.Trakt == itemToMatch.Episode.Ids.Trakt;  case "person":  	if (currentItem.Person == null)  		return false;  	return currentItem.Person.Ids.Trakt == itemToMatch.Person.Ids.Trakt;  }  
Missing Default,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,GetListItemLabel,The following switch statement is missing a default case: switch (listItem.Type) {  case "movie":  	retValue = listItem.Movie.Title;  	break;  case "show":  	retValue = listItem.Show.Title;  	break;  case "season":  	retValue = string.Format ("{0} {1} {2}"' listItem.Show.Title' GUI.Translation.Season' listItem.Season.Number);  	break;  case "episode":  	retValue = string.Format ("{0} - {1}x{2}{3}"' listItem.Show.Title' listItem.Episode.Season' listItem.Episode.Number' string.IsNullOrEmpty (listItem.Episode.Title) ? string.Empty : " - " + listItem.Episode.Title);  	break;  case "person":  	retValue = listItem.Person.Name;  	break;  }  
Missing Default,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,GetListItemSecondLabel,The following switch statement is missing a default case: switch (listItem.Type) {  case "movie":  	retValue = listItem.Movie.Year == null ? "----" : listItem.Movie.Year.ToString ();  	break;  case "show":  	retValue = listItem.Show.Year == null ? "----" : listItem.Show.Year.ToString ();  	break;  case "season":  	retValue = string.Format ("{0} {1}"' listItem.Season.EpisodeCount' Translation.Episodes);  	break;  case "episode":  	retValue = listItem.Episode.FirstAired.FromISO8601 ().ToShortDateString ();  	break;  case "person":  	retValue = listItem.Person.Birthday;  	break;  }  
Missing Default,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,GetTmdbImage,The following switch statement is missing a default case: switch (listItem.Type) {  case "movie":  	images.MovieImages = new TmdbMovieImages {  		Id = listItem.Movie.Ids.Tmdb  	};  	break;  case "show":  	images.ShowImages = new TmdbShowImages {  		Id = listItem.Show.Ids.Tmdb  	};  	break;  case "season":  	images.ShowImages = new TmdbShowImages {  		Id = listItem.Show.Ids.Tmdb  	};  	images.SeasonImages = new TmdbSeasonImages {  		Id = listItem.Show.Ids.Tmdb'  		Season = listItem.Season.Number  	};  	break;  case "episode":  	images.ShowImages = new TmdbShowImages {  		Id = listItem.Show.Ids.Tmdb  	};  	images.SeasonImages = new TmdbSeasonImages {  		Id = listItem.Show.Ids.Tmdb'  		Season = listItem.Episode.Season  	};  	break;  case "person":  	images.PeopleImages = new TmdbPeopleImages {  		Id = listItem.Person.Ids.TmdbId  	};  	break;  }  
Missing Default,TraktPlugin.GUI,GUIListItems,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIListItems.cs,OnItemSelected,The following switch statement is missing a default case: switch (listItem.Type) {  case "movie":  	SelectedType = TraktItemType.movie;  	PublishMovieSkinProperties (listItem);  	string fanart = TmdbCache.GetMovieBackdropFilename ((item as GUICustomListItem).Images.MovieImages);  	if (!string.IsNullOrEmpty (fanart)) {  		GUIImageHandler.LoadFanart (backdrop' fanart);  	}  	break;  case "show":  	SelectedType = TraktItemType.show;  	PublishShowSkinProperties (listItem);  	fanart = TmdbCache.GetShowBackdropFilename ((item as GUICustomListItem).Images.ShowImages);  	if (!string.IsNullOrEmpty (fanart)) {  		GUIImageHandler.LoadFanart (backdrop' fanart);  	}  	break;  case "season":  	SelectedType = TraktItemType.season;  	PublishSeasonSkinProperties (listItem);  	fanart = TmdbCache.GetShowBackdropFilename ((item as GUICustomListItem).Images.ShowImages);  	if (!string.IsNullOrEmpty (fanart)) {  		GUIImageHandler.LoadFanart (backdrop' fanart);  	}  	break;  case "episode":  	SelectedType = TraktItemType.episode;  	PublishEpisodeSkinProperties (listItem);  	fanart = TmdbCache.GetShowBackdropFilename ((item as GUICustomListItem).Images.ShowImages);  	if (!string.IsNullOrEmpty (fanart)) {  		GUIImageHandler.LoadFanart (backdrop' fanart);  	}  	break;  case "person":  	SelectedType = TraktItemType.person;  	PublishPersonSkinProperties (listItem);  	break;  }  
Missing Default,TraktPlugin.GUI,GUILists,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUILists.cs,CopyList,The following switch statement is missing a default case: switch (item.Type) {  case "movie":  	if (itemsToAdd.Movies == null)  		itemsToAdd.Movies = new List<TraktMovie> ();  	itemsToAdd.Movies.Add (new TraktMovie {  		Ids = item.Movie.Ids  	});  	break;  case "show":  	if (itemsToAdd.Shows == null)  		itemsToAdd.Shows = new List<TraktShow> ();  	itemsToAdd.Shows.Add (new TraktShow {  		Ids = item.Show.Ids  	});  	break;  case "season":  	if (itemsToAdd.Seasons == null)  		itemsToAdd.Seasons = new List<TraktSeason> ();  	itemsToAdd.Seasons.Add (new TraktSeason {  		Ids = item.Season.Ids  	});  	break;  case "episode":  	if (itemsToAdd.Episodes == null)  		itemsToAdd.Episodes = new List<TraktEpisode> ();  	itemsToAdd.Episodes.Add (new TraktEpisode {  		Ids = item.Episode.Ids  	});  	break;  case "person":  	if (itemsToAdd.People == null)  		itemsToAdd.People = new List<TraktPerson> ();  	itemsToAdd.People.Add (new TraktPerson {  		Ids = item.Person.Ids  	});  	break;  }  
Missing Default,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,LoadCredits,The following switch statement is missing a default case: switch (CurrentCreditType) {  case Credit.Art:  	SendCrewToFacade (credits.Crew.Art);  	break;  case Credit.Camera:  	SendCrewToFacade (credits.Crew.Camera);  	break;  case Credit.CostumeAndMakeUp:  	SendCrewToFacade (credits.Crew.CostumeAndMakeUp);  	break;  case Credit.Directing:  	SendCrewToFacade (credits.Crew.Directing);  	break;  case Credit.Production:  	SendCrewToFacade (credits.Crew.Production);  	break;  case Credit.Sound:  	SendCrewToFacade (credits.Crew.Sound);  	break;  case Credit.Writing:  	SendCrewToFacade (credits.Crew.Writing);  	break;  }  
Missing Default,TraktPlugin.GUI,GUIPersonMovieCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonMovieCredits.cs,ShowMovieFiltersMenu,The following switch statement is missing a default case: switch ((Filters)Enum.Parse (typeof(Filters)' item.ItemID' true)) {  case Filters.Watched:  	TraktSettings.CreditMoviesHideWatched = !TraktSettings.CreditMoviesHideWatched;  	break;  case Filters.Watchlisted:  	TraktSettings.CreditMoviesHideWatchlisted = !TraktSettings.CreditMoviesHideWatchlisted;  	break;  case Filters.Collected:  	TraktSettings.CreditMoviesHideCollected = !TraktSettings.CreditMoviesHideCollected;  	break;  case Filters.Rated:  	TraktSettings.CreditMoviesHideRated = !TraktSettings.CreditMoviesHideRated;  	break;  }  
Missing Default,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnClicked,The following switch statement is missing a default case: switch (CurrentViewLevel) {  case ViewLevel.Network:  	var selectedItem = Facade.SelectedListItem as GUIUserListItem;  	if (selectedItem.IsFolder) {  		// return to previous view list  		LoadView ();  	} else {  		if (!CurrentSelectedUser.IsPrivate || CurrentView == View.Friends) {  			LoadActivityTypes ();  		} else {  			GUIUtils.ShowOKDialog (Translation.Protected' Translation.UserIsProtected);  		}  	}  	break;  case ViewLevel.ActivityTypes:  	// Launch Corresponding Activity window  	switch (SelectedActivity) {  	case (ActivityType.UserProfile):  		GUIUserProfile.CurrentUser = CurrentSelectedUser.Username;  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.UserProfile);  		break;  	case (ActivityType.RecentWatchedMovies):  		GUIRecentWatchedMovies.CurrentUser = CurrentSelectedUser.Username;  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedMovies);  		break;  	case (ActivityType.RecentWatchedEpisodes):  		GUIRecentWatchedEpisodes.CurrentUser = CurrentSelectedUser.Username;  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedEpisodes);  		break;  	case (ActivityType.RecentAddedEpisodes):  		GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  		//TODOGUIRecentAddedEpisodes.CurrentUser = CurrentSelectedUser.Username;  		//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);  		break;  	case (ActivityType.RecentAddedMovies):  		GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  		//TODOGUIRecentAddedMovies.CurrentUser = CurrentSelectedUser.Username;  		//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);  		break;  	case (ActivityType.RecentComments):  		GUIRecentShouts.CurrentUser = CurrentSelectedUser.Username;  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentShouts);  		break;  	case (ActivityType.MovieWatchList):  		GUIWatchListMovies.CurrentUser = CurrentSelectedUser.Username;  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListMovies);  		break;  	case (ActivityType.ShowWatchList):  		GUIWatchListShows.CurrentUser = CurrentSelectedUser.Username;  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListShows);  		break;  	case (ActivityType.EpisodeWatchList):  		GUIWatchListEpisodes.CurrentUser = CurrentSelectedUser.Username;  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListEpisodes);  		break;  	case (ActivityType.Lists):  		GUILists.CurrentUser = CurrentSelectedUser.Username;  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CustomLists);  		break;  	}  	break;  }  
Missing Default,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnClicked,The following switch statement is missing a default case: switch (SelectedActivity) {  case (ActivityType.UserProfile):  	GUIUserProfile.CurrentUser = CurrentSelectedUser.Username;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.UserProfile);  	break;  case (ActivityType.RecentWatchedMovies):  	GUIRecentWatchedMovies.CurrentUser = CurrentSelectedUser.Username;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedMovies);  	break;  case (ActivityType.RecentWatchedEpisodes):  	GUIRecentWatchedEpisodes.CurrentUser = CurrentSelectedUser.Username;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedEpisodes);  	break;  case (ActivityType.RecentAddedEpisodes):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	//TODOGUIRecentAddedEpisodes.CurrentUser = CurrentSelectedUser.Username;  	//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);  	break;  case (ActivityType.RecentAddedMovies):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	//TODOGUIRecentAddedMovies.CurrentUser = CurrentSelectedUser.Username;  	//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);  	break;  case (ActivityType.RecentComments):  	GUIRecentShouts.CurrentUser = CurrentSelectedUser.Username;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentShouts);  	break;  case (ActivityType.MovieWatchList):  	GUIWatchListMovies.CurrentUser = CurrentSelectedUser.Username;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListMovies);  	break;  case (ActivityType.ShowWatchList):  	GUIWatchListShows.CurrentUser = CurrentSelectedUser.Username;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListShows);  	break;  case (ActivityType.EpisodeWatchList):  	GUIWatchListEpisodes.CurrentUser = CurrentSelectedUser.Username;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListEpisodes);  	break;  case (ActivityType.Lists):  	GUILists.CurrentUser = CurrentSelectedUser.Username;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CustomLists);  	break;  }  
Missing Default,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnAction,The following switch statement is missing a default case: switch (action.wID) {  case Action.ActionType.ACTION_PREVIOUS_MENU:  	switch (CurrentViewLevel) {  	case ViewLevel.ActivityTypes:  		// go back one view level  		CurrentViewLevel = ViewLevel.Network;  		LoadView ();  		return;  	}  	break;  }  
Missing Default,TraktPlugin.GUI,GUINetwork,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUINetwork.cs,OnAction,The following switch statement is missing a default case: switch (CurrentViewLevel) {  case ViewLevel.ActivityTypes:  	// go back one view level  	CurrentViewLevel = ViewLevel.Network;  	LoadView ();  	return;  }  
Missing Default,TraktPlugin.GUI,GUIPersonShowCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,LoadCredits,The following switch statement is missing a default case: switch (CurrentCreditType) {  case Credit.Art:  	SendCrewToFacade (credits.Crew.Art);  	break;  case Credit.Camera:  	SendCrewToFacade (credits.Crew.Camera);  	break;  case Credit.CostumeAndMakeUp:  	SendCrewToFacade (credits.Crew.CostumeAndMakeUp);  	break;  case Credit.Directing:  	SendCrewToFacade (credits.Crew.Directing);  	break;  case Credit.Production:  	SendCrewToFacade (credits.Crew.Production);  	break;  case Credit.Sound:  	SendCrewToFacade (credits.Crew.Sound);  	break;  case Credit.Writing:  	SendCrewToFacade (credits.Crew.Writing);  	break;  }  
Missing Default,TraktPlugin.GUI,GUIPersonShowCredits,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonShowCredits.cs,ShowTVShowFiltersMenu,The following switch statement is missing a default case: switch ((Filters)Enum.Parse (typeof(Filters)' item.ItemID' true)) {  case Filters.Watched:  	TraktSettings.CreditShowsHideWatched = !TraktSettings.CreditShowsHideWatched;  	break;  case Filters.Watchlisted:  	TraktSettings.CreditShowsHideWatchlisted = !TraktSettings.CreditShowsHideWatchlisted;  	break;  case Filters.Collected:  	TraktSettings.CreditShowsHideCollected = !TraktSettings.CreditShowsHideCollected;  	break;  case Filters.Rated:  	TraktSettings.CreditShowsHideRated = !TraktSettings.CreditShowsHideRated;  	break;  }  
Missing Default,TraktPlugin.GUI,GUIPersonSummary,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPersonSummary.cs,OnPageLoad,The following switch statement is missing a default case: switch (CurrentView) {  case View.Summary:  	LoadPersonSummary ();  	break;  case View.MovieCredits:  	LoadMovieCredits ();  	break;  case View.ShowCredits:  	LoadShowCredits ();  	break;  }  
Missing Default,TraktPlugin.GUI,GUIDialogPinCode,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIDialogPinCode.cs,OnAction,The following switch statement is missing a default case: switch (action.wID) {  case Action.ActionType.REMOTE_1:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "1";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_2:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "2";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_3:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "3";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_4:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "4";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_5:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "5";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_6:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "6";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_7:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "7";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_8:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "8";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_9:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "9";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.REMOTE_0:  	if (EnteredPinCode.Length >= 4)  		return;  	EnteredPinCode = EnteredPinCode + "0";  	UpdatePinCode (EnteredPinCode.Length);  	break;  case Action.ActionType.ACTION_KEY_PRESSED:  	// some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands  	if (EnteredPinCode.Length >= 4)  		return;  	if (action.m_key != null && action.m_key.KeyChar >= '0' && action.m_key.KeyChar <= '9') {  		char key = (char)action.m_key.KeyChar;  		EnteredPinCode = EnteredPinCode + key;  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_DELETE_ITEM:  case Action.ActionType.ACTION_MOVE_DOWN:  case Action.ActionType.ACTION_MOVE_LEFT:  	if (EnteredPinCode.Length > 0) {  		EnteredPinCode = EnteredPinCode.Substring (0' EnteredPinCode.Length - 1);  		UpdatePinCode (EnteredPinCode.Length);  	}  	break;  case Action.ActionType.ACTION_SELECT_ITEM:  	PageDestroy ();  	return;  case Action.ActionType.ACTION_PREVIOUS_MENU:  case Action.ActionType.ACTION_CLOSE_DIALOG:  case Action.ActionType.ACTION_CONTEXT_MENU:  	PageDestroy ();  	return;  }  
Missing Default,TraktPlugin.GUI,GUIPopularMovies,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularMovies.cs,ShowMovieFiltersMenu,The following switch statement is missing a default case: switch ((Filters)Enum.Parse (typeof(Filters)' item.ItemID' true)) {  case Filters.Watched:  	TraktSettings.PopularMoviesHideWatched = !TraktSettings.PopularMoviesHideWatched;  	break;  case Filters.Watchlisted:  	TraktSettings.PopularMoviesHideWatchlisted = !TraktSettings.PopularMoviesHideWatchlisted;  	break;  case Filters.Collected:  	TraktSettings.PopularMoviesHideCollected = !TraktSettings.PopularMoviesHideCollected;  	break;  case Filters.Rated:  	TraktSettings.PopularMoviesHideRated = !TraktSettings.PopularMoviesHideRated;  	break;  }  
Missing Default,TraktPlugin.GUI,GUIPopularShows,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIPopularShows.cs,ShowTVShowFiltersMenu,The following switch statement is missing a default case: switch ((Filters)Enum.Parse (typeof(Filters)' item.ItemID' true)) {  case Filters.Watched:  	TraktSettings.PopularShowsHideWatched = !TraktSettings.PopularShowsHideWatched;  	break;  case Filters.Watchlisted:  	TraktSettings.PopularShowsHideWatchlisted = !TraktSettings.PopularShowsHideWatchlisted;  	break;  case Filters.Collected:  	TraktSettings.PopularShowsHideCollected = !TraktSettings.PopularShowsHideCollected;  	break;  case Filters.Rated:  	TraktSettings.PopularShowsHideRated = !TraktSettings.PopularShowsHideRated;  	break;  }  
Missing Default,TraktPlugin.GUI,GUIRecentShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId) {  case (int)ActivityContextMenuItem.Like:  	GUICommon.LikeComment (selectedComment.Comment);  	selectedComment.Comment.Likes++;  	PublishCommentSkinProperties (selectedComment);  	break;  case (int)ActivityContextMenuItem.Unlike:  	GUICommon.UnLikeComment (selectedComment.Comment);  	if (selectedComment.Comment.Likes > 0) {  		selectedComment.Comment.Likes--;  		PublishCommentSkinProperties (selectedComment);  	}  	break;  case ((int)ActivityContextMenuItem.Spoilers):  	TraktSettings.HideSpoilersOnShouts = !TraktSettings.HideSpoilersOnShouts;  	if (hideSpoilersButton != null)  		hideSpoilersButton.Selected = TraktSettings.HideSpoilersOnShouts;  	PublishCommentSkinProperties (selectedComment);  	break;  case ((int)ActivityContextMenuItem.ShowSeasonInfo):  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.ShowSeasons' selectedComment.Show.ToJSON ());  	break;  case ((int)ActivityContextMenuItem.AddToList):  	if (selectedComment.Movie != null)  		TraktHelper.AddRemoveMovieInUserList (selectedComment.Movie' false);  	else if (selectedComment.Episode != null)  		TraktHelper.AddRemoveEpisodeInUserList (selectedComment.Episode' false);  	else  		TraktHelper.AddRemoveShowInUserList (selectedComment.Show' false);  	break;  case ((int)ActivityContextMenuItem.AddToWatchList):  	if (selectedComment.Movie != null)  		TraktHelper.AddMovieToWatchList (selectedComment.Movie' true);  	else if (selectedComment.Episode != null)  		TraktHelper.AddEpisodeToWatchList (selectedComment.Episode);  	else  		TraktHelper.AddShowToWatchList (selectedComment.Show);  	break;  case ((int)ActivityContextMenuItem.Shouts):  	if (selectedComment.Movie != null)  		TraktHelper.ShowMovieShouts (selectedComment.Movie);  	else if (selectedComment.Episode != null)  		TraktHelper.ShowEpisodeShouts (selectedComment.Show' selectedComment.Episode);  	else  		TraktHelper.ShowTVShowShouts (selectedComment.Show);  	break;  case ((int)ActivityContextMenuItem.Rate):  	if (selectedComment.Movie != null)  		GUICommon.RateMovie (selectedComment.Movie);  	else if (selectedComment.Episode != null)  		GUICommon.RateEpisode (selectedComment.Show' selectedComment.Episode);  	else  		GUICommon.RateShow (selectedComment.Show);  	break;  case ((int)ActivityContextMenuItem.Cast):  	if (selectedComment.Movie != null) {  		GUICreditsMovie.Movie = selectedComment.Movie;  		GUICreditsMovie.Type = GUICreditsMovie.CreditType.Cast;  		GUICreditsMovie.Fanart = TmdbCache.GetMovieBackdropFilename ((selectedItem as GUIMovieListItem).Images.MovieImages);  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CreditsMovie);  	} else if (selectedComment.Show != null) {  		GUICreditsShow.Show = selectedComment.Show;  		GUICreditsShow.Type = GUICreditsShow.CreditType.Cast;  		GUICreditsShow.Fanart = TmdbCache.GetShowBackdropFilename ((selectedItem as GUIShowListItem).Images.ShowImages);  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CreditsShow);  	}  	break;  case ((int)ActivityContextMenuItem.Crew):  	if (selectedComment.Movie != null) {  		GUICreditsMovie.Movie = selectedComment.Movie;  		GUICreditsMovie.Type = GUICreditsMovie.CreditType.Crew;  		GUICreditsMovie.Fanart = TmdbCache.GetMovieBackdropFilename ((selectedItem as GUIMovieListItem).Images.MovieImages);  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CreditsMovie);  	} else if (selectedComment.Show != null) {  		GUICreditsShow.Show = selectedComment.Show;  		GUICreditsShow.Type = GUICreditsShow.CreditType.Crew;  		GUICreditsShow.Fanart = TmdbCache.GetShowBackdropFilename ((selectedItem as GUIShowListItem).Images.ShowImages);  		GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CreditsShow);  	}  	break;  case ((int)ActivityContextMenuItem.Trailers):  	if (selectedComment.Movie != null)  		GUICommon.ShowMovieTrailersMenu (selectedComment.Movie);  	else  		GUICommon.ShowTVShowTrailersMenu (selectedComment.Show' selectedComment.Episode);  	break;  }  
Missing Default,TraktPlugin.GUI,GUIRecentShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,PlayCommentItem,The following switch statement is missing a default case: switch (selectedComment.Type) {  case "episode":  	GUICommon.CheckAndPlayEpisode (selectedComment.Show' selectedComment.Episode);  	break;  case "show":  case "season":  	GUICommon.CheckAndPlayFirstUnwatchedEpisode (selectedComment.Show' jumpTo);  	break;  case "movie":  	GUICommon.CheckAndPlayMovie (jumpTo' selectedComment.Movie);  	break;  }  
Missing Default,TraktPlugin.GUI,GUIRecentShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,GetTmdbImage,The following switch statement is missing a default case: switch (comment.Type) {  case "movie":  	images.MovieImages = new TmdbMovieImages {  		Id = comment.Movie.Ids.Tmdb  	};  	break;  case "show":  	images.ShowImages = new TmdbShowImages {  		Id = comment.Show.Ids.Tmdb  	};  	break;  case "season":  	images.ShowImages = new TmdbShowImages {  		Id = comment.Show.Ids.Tmdb  	};  	images.SeasonImages = new TmdbSeasonImages {  		Id = comment.Show.Ids.Tmdb'  		Season = comment.Season.Number  	};  	break;  case "episode":  	images.ShowImages = new TmdbShowImages {  		Id = comment.Show.Ids.Tmdb  	};  	images.SeasonImages = new TmdbSeasonImages {  		Id = comment.Show.Ids.Tmdb'  		Season = comment.Episode.Season  	};  	break;  case "list":  	break;  }  
Missing Default,TraktPlugin.GUI,GUIRecentShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,GetCommentItemTitle,The following switch statement is missing a default case: switch (comment.Type) {  case "movie":  	title = comment.Movie.Title;  	break;  case "show":  	title = comment.Show.Title;  	break;  case "season":  	title = string.Format ("{0} - {1} {2}"' comment.Show.Title' Translation.Season' comment.Season.Number);  	break;  case "episode":  	title = string.Format ("{0} - {1}x{2} - {3}"' comment.Show.Title' comment.Episode.Season' comment.Episode.Number' comment.Episode.Title ?? string.Format ("{0} {1}"' Translation.Episode' comment.Episode.Number));  	break;  case "list":  	title = comment.List.Name;  	break;  }  
Missing Default,TraktPlugin.GUI,GUIRecentShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRecentShouts.cs,OnCommentSelected,The following switch statement is missing a default case: switch (commentItem.Type) {  case "movie":  	fanartFileName = TmdbCache.GetMovieBackdropFilename ((item as GUICustomListItem).Images.MovieImages);  	break;  case "show":  case "season":  case "episode":  	fanartFileName = TmdbCache.GetShowBackdropFilename ((item as GUICustomListItem).Images.ShowImages);  	break;  case "list":  	break;  }  
Missing Default,TraktPlugin.GUI,GUISearch,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,GetSearchListName,The following switch statement is missing a default case: switch (type) {  case SearchType.movie:  	listName = Translation.Movies;  	break;  case SearchType.show:  	listName = Translation.TVShows;  	break;  case SearchType.episode:  	listName = Translation.Episodes;  	break;  case SearchType.person:  	listName = Translation.People;  	break;  case SearchType.user:  	listName = Translation.Users;  	break;  case SearchType.list:  	listName = Translation.Lists;  	break;  }  
Missing Default,TraktPlugin.GUI,GUISearch,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearch.cs,SendSearchResultsToWindow,The following switch statement is missing a default case: switch (SelectedSearchType) {  case SearchType.movie:  	if (GetSearchResultCount (searchResults' SearchType.movie) == 0)  		break;  	GUISearchMovies.SearchTerm = SearchTerm;  	GUISearchMovies.Movies = SearchResults.Where (s => s.Type == SearchType.movie.ToString ()).Select (m => m.Movie);  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.SearchMovies);  	break;  case SearchType.show:  	if (GetSearchResultCount (searchResults' SearchType.show) == 0)  		break;  	GUISearchShows.SearchTerm = SearchTerm;  	GUISearchShows.Shows = SearchResults.Where (s => s.Type == SearchType.show.ToString ()).Select (m => m.Show);  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.SearchShows);  	break;  case SearchType.episode:  	if (GetSearchResultCount (searchResults' SearchType.episode) == 0)  		break;  	GUISearchEpisodes.SearchTerm = SearchTerm;  	GUISearchEpisodes.Episodes = SearchResults.Where (s => s.Type == SearchType.episode.ToString ()).Select (e => new TraktEpisodeSummaryEx {  		Episode = e.Episode'  		Show = e.Show  	});  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.SearchEpisodes);  	break;  case SearchType.person:  	if (GetSearchResultCount (searchResults' SearchType.person) == 0)  		break;  	GUISearchPeople.SearchTerm = SearchTerm;  	GUISearchPeople.People = SearchResults.Where (s => s.Type == SearchType.person.ToString ()).Select (m => m.Person);  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.SearchPeople);  	break;  case SearchType.user:  	if (GetSearchResultCount (searchResults' SearchType.user) == 0)  		break;  	GUISearchUsers.SearchTerm = SearchTerm;  	GUISearchUsers.Users = SearchResults.Where (s => s.Type == SearchType.user.ToString ()).Select (m => m.User);  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.SearchUsers);  	break;  case SearchType.list:  	if (GetSearchResultCount (searchResults' SearchType.list) == 0)  		break;  	//TODO  	break;  }  
Missing Default,TraktPlugin.GUI,GUISearchPeople,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchPeople.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId) {  case ((int)ContextMenuItem.ChangeLayout):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  }  
Missing Default,TraktPlugin.GUI,GUISearchUsers,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISearchUsers.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId) {  case ((int)ContextMenuItem.FollowUser):  	if (GUIUtils.ShowYesNoDialog (Translation.Network' string.Format (Translation.SendFollowRequest' selectedItem.Label)' true)) {  		GUINetwork.FollowUser (selectedUser);  		GUINetwork.ClearCache ();  		(selectedItem as GUIUserListItem).IsFollowed = true;  	}  	break;  case ((int)ContextMenuItem.UserProfile):  	GUIUserProfile.CurrentUser = selectedUser.Username;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.UserProfile);  	break;  case ((int)ContextMenuItem.ChangeLayout):  	CurrentLayout = GUICommon.ShowLayoutMenu (CurrentLayout' PreviousSelectedIndex);  	break;  }  
Missing Default,TraktPlugin.GUI,GUISettingsAccount,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUISettingsAccount.cs,OnAction,The following switch statement is missing a default case: switch (action.wID) {  case Action.ActionType.ACTION_PREVIOUS_MENU:  	if (GUIPropertyManager.GetProperty ("#Trakt.Settings.Account.Dialog.Visible") == "true") {  		HideAccountControls ();  		return;  	}  	break;  }  
Missing Default,TraktPlugin.GUI,GUIShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,OnAction,The following switch statement is missing a default case: switch (action.wID) {  case Action.ActionType.ACTION_PREVIOUS_MENU:  	// navigate back to parent if we are viewing replies  	var selectedComment = Facade.SelectedListItem.TVTag as TraktComment;  	if (selectedComment != null && selectedComment.ParentId > 0) {  		if (CurrentLevel > 1) {  			// load the previous list of replies                              			LoadCommentReplies ((int)selectedComment.ParentId);  		} else {  			// return the main list of comments  			LoadCommentsList ();  		}  		// remove any previous selection for level returning from  		if (SelectedParentItems.ContainsKey (CurrentLevel))  			SelectedParentItems.Remove (CurrentLevel);  		CurrentLevel--;  		return;  	}  	break;  }  
Missing Default,TraktPlugin.GUI,GUIShouts,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIShouts.cs,SendCommentsToFacade,The following switch statement is missing a default case: switch (ShoutType) {  case ShoutTypeEnum.movie:  	title = MovieInfo.Title;  	break;  case ShoutTypeEnum.show:  	title = ShowInfo.Title;  	break;  case ShoutTypeEnum.season:  	title = string.Format ("{0} - {1} {2}"' SeasonInfo.Title' Translation.Season' SeasonInfo.SeasonIdx);  	break;  case ShoutTypeEnum.episode:  	title = EpisodeInfo.ToString ();  	break;  }  
Missing Default,TraktPlugin.GUI,GUIUserProfile,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUserProfile.cs,OnClicked,The following switch statement is missing a default case: switch (controlId) {  case (50):  	if (actionType == Action.ActionType.ACTION_SELECT_ITEM) {  		// Launch Corresponding Activity window  		switch (SelectedActivity) {  		case (ActivityType.RecentWatchedMovies):  			GUIRecentWatchedMovies.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedMovies);  			break;  		case (ActivityType.RecentWatchedEpisodes):  			GUIRecentWatchedEpisodes.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedEpisodes);  			break;  		case (ActivityType.RecentAddedEpisodes):  			GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  			//TODOGUIRecentAddedEpisodes.CurrentUser = CurrentUser;  			//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);  			break;  		case (ActivityType.RecentAddedMovies):  			GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  			//TODOGUIRecentAddedMovies.CurrentUser = CurrentUser;  			//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);  			break;  		case (ActivityType.RecentComments):  			GUIRecentShouts.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentShouts);  			break;  		case (ActivityType.MovieWatchList):  			GUIWatchListMovies.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListMovies);  			break;  		case (ActivityType.ShowWatchList):  			GUIWatchListShows.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListShows);  			break;  		case (ActivityType.EpisodeWatchList):  			GUIWatchListEpisodes.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListEpisodes);  			break;  		case (ActivityType.Lists):  			GUILists.CurrentUser = CurrentUser;  			GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CustomLists);  			break;  		}  	}  	break;  case (4):  	GUIControl.FocusControl (GetID' Facade.GetID);  	if (Users.Keys.Contains (CurrentUser))  		Users.Remove (CurrentUser);  	LoadUserProfile ();  	break;  }  
Missing Default,TraktPlugin.GUI,GUIUserProfile,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIUserProfile.cs,OnClicked,The following switch statement is missing a default case: switch (SelectedActivity) {  case (ActivityType.RecentWatchedMovies):  	GUIRecentWatchedMovies.CurrentUser = CurrentUser;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedMovies);  	break;  case (ActivityType.RecentWatchedEpisodes):  	GUIRecentWatchedEpisodes.CurrentUser = CurrentUser;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentWatchedEpisodes);  	break;  case (ActivityType.RecentAddedEpisodes):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	//TODOGUIRecentAddedEpisodes.CurrentUser = CurrentUser;  	//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedEpisodes);  	break;  case (ActivityType.RecentAddedMovies):  	GUIUtils.ShowNotifyDialog ("Trakt"' Translation.FeatureNotAvailable);  	//TODOGUIRecentAddedMovies.CurrentUser = CurrentUser;  	//TODOGUIWindowManager.ActivateWindow((int)TraktGUIWindows.RecentAddedMovies);  	break;  case (ActivityType.RecentComments):  	GUIRecentShouts.CurrentUser = CurrentUser;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.RecentShouts);  	break;  case (ActivityType.MovieWatchList):  	GUIWatchListMovies.CurrentUser = CurrentUser;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListMovies);  	break;  case (ActivityType.ShowWatchList):  	GUIWatchListShows.CurrentUser = CurrentUser;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListShows);  	break;  case (ActivityType.EpisodeWatchList):  	GUIWatchListEpisodes.CurrentUser = CurrentUser;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.WatchedListEpisodes);  	break;  case (ActivityType.Lists):  	GUILists.CurrentUser = CurrentUser;  	GUIWindowManager.ActivateWindow ((int)TraktGUIWindows.CustomLists);  	break;  }  
Missing Default,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnAction,The following switch statement is missing a default case: switch (action.wID) {  case Action.ActionType.REMOTE_1:  	Rated = TraktRateValue.one;  	UpdateRating ();  	break;  case Action.ActionType.REMOTE_2:  	Rated = TraktRateValue.two;  	UpdateRating ();  	break;  case Action.ActionType.REMOTE_3:  	Rated = TraktRateValue.three;  	UpdateRating ();  	break;  case Action.ActionType.REMOTE_4:  	Rated = TraktRateValue.four;  	UpdateRating ();  	break;  case Action.ActionType.REMOTE_5:  	Rated = TraktRateValue.five;  	UpdateRating ();  	break;  case Action.ActionType.REMOTE_6:  	Rated = TraktRateValue.six;  	UpdateRating ();  	break;  case Action.ActionType.REMOTE_7:  	Rated = TraktRateValue.seven;  	UpdateRating ();  	break;  case Action.ActionType.REMOTE_8:  	Rated = TraktRateValue.eight;  	UpdateRating ();  	break;  case Action.ActionType.REMOTE_9:  	Rated = TraktRateValue.nine;  	UpdateRating ();  	break;  case Action.ActionType.REMOTE_0:  	Rated = TraktRateValue.ten;  	UpdateRating ();  	break;  case Action.ActionType.ACTION_KEY_PRESSED:  	// some types of remotes send ACTION_KEY_PRESSED instead of REMOTE_0 - REMOTE_9 commands  	if (action.m_key != null) {  		int key = action.m_key.KeyChar;  		if (key >= '0' && key <= '9') {  			if (key == 0)  				key = 10;  			Rated = (TraktRateValue)key;  			UpdateRating ();  		}  	}  	break;  case Action.ActionType.ACTION_SELECT_ITEM:  	IsSubmitted = true;  	PageDestroy ();  	return;  case Action.ActionType.ACTION_PREVIOUS_MENU:  case Action.ActionType.ACTION_CLOSE_DIALOG:  case Action.ActionType.ACTION_CONTEXT_MENU:  	IsSubmitted = false;  	PageDestroy ();  	return;  }  
Missing Default,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message) {  case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:  	// store old rating so default control in skin does override  	TraktRateValue rating = Rated;  	base.OnMessage (message);  	// read just rating and default control focus  	int defaultControlId = 1000 + (int)rating;  	GUIMessage msg = new GUIMessage (GUIMessage.MessageType.GUI_MSG_SETFOCUS' GetID' 0' defaultControlId' 0' 0' null);  	OnMessage (msg);  	IsSubmitted = false;  	UpdateRating ();  	return true;  case GUIMessage.MessageType.GUI_MSG_SETFOCUS:  	if (btnUnRate != null && message.TargetControlId == btnUnRate.GetID) {  		Rated = TraktRateValue.unrate;  		UpdateRating ();  		break;  	}  	if (message.TargetControlId < 1001 || message.TargetControlId > 1010)  		break;  	Rated = (TraktRateValue)(message.TargetControlId - 1000);  	UpdateRating ();  	break;  }  
Missing Default,TraktPlugin.GUI,GUIRateDialog,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIRateDialog.cs,GetRatingDescription,The following switch statement is missing a default case: switch (Rated) {  case TraktRateValue.unrate:  	description = Translation.UnRate;  	break;  case TraktRateValue.ten:  	description = Translation.RateLove;  	break;  case TraktRateValue.nine:  	description = Translation.RateNine;  	break;  case TraktRateValue.eight:  	description = Translation.RateEight;  	break;  case TraktRateValue.seven:  	description = Translation.RateSeven;  	break;  case TraktRateValue.six:  	description = Translation.RateSix;  	break;  case TraktRateValue.five:  	description = Translation.RateFive;  	break;  case TraktRateValue.four:  	description = Translation.RateFour;  	break;  case TraktRateValue.three:  	description = Translation.RateThree;  	break;  case TraktRateValue.two:  	description = Translation.RateTwo;  	break;  case TraktRateValue.one:  	description = Translation.RateHate;  	break;  }  
Missing Default,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnPageDestroy,The following switch statement is missing a default case: switch (CurrentCalendar) {  case CalendarType.MyShows:  	if (_CalendarShows != null)  		PreviousCalendarDayCount = _CalendarShows.Count ();  	break;  case CalendarType.Premieres:  	if (_CalendarPremieres != null)  		PreviousCalendarDayCount = _CalendarPremieres.Count ();  	break;  case CalendarType.AllShows:  	if (_CalendarAllShows != null)  		PreviousCalendarDayCount = _CalendarAllShows.Count ();  	break;  }  
Missing Default,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnClicked,The following switch statement is missing a default case: switch (CurrentCalendar) {  case CalendarType.MyShows:  	// previous call may have timedout  	if (_CalendarShows != null) {  		PreviousCalendarDayCount = _CalendarShows.Count ();  		PreviousSelectedIndex = Facade.SelectedListItemIndex;  		CurrentWeekDays += 7;  		_CalendarShows = null;  	}  	break;  case CalendarType.Premieres:  	if (_CalendarPremieres != null) {  		PreviousCalendarDayCount = _CalendarPremieres.Count ();  		PreviousSelectedIndex = Facade.SelectedListItemIndex;  		CurrentWeekDays += 7;  		_CalendarPremieres = null;  	}  	break;  case CalendarType.AllShows:  	if (_CalendarAllShows != null) {  		PreviousCalendarDayCount = _CalendarAllShows.Count ();  		PreviousSelectedIndex = Facade.SelectedListItemIndex;  		CurrentWeekDays += 7;  		_CalendarAllShows = null;  	}  	break;  }  
Missing Default,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,OnAction,The following switch statement is missing a default case: switch (action.wID) {  case Action.ActionType.ACTION_PLAY:  case Action.ActionType.ACTION_MUSIC_PLAY:  	CheckAndPlayEpisode ();  	break;  case Action.ActionType.ACTION_PREVIOUS_MENU:  	break;  case Action.ActionType.ACTION_MOVE_UP:  case Action.ActionType.ACTION_PAGE_UP:  	LastMoved = FacadeMovement.Up;  	break;  case Action.ActionType.ACTION_MOVE_DOWN:  case Action.ActionType.ACTION_PAGE_DOWN:  	LastMoved = FacadeMovement.Down;  	break;  }  
Missing Default,TraktPlugin.GUI,GUICalendar,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUICalendar.cs,SetCurrentView,The following switch statement is missing a default case: switch (CurrentCalendar) {  case CalendarType.MyShows:  	GUICommon.SetProperty ("#Trakt.CurrentView"' Translation.CalendarMyShows);  	break;  case CalendarType.Premieres:  	GUICommon.SetProperty ("#Trakt.CurrentView"' Translation.CalendarPremieres);  	break;  case CalendarType.AllShows:  	GUICommon.SetProperty ("#Trakt.CurrentView"' Translation.CalendarAllShows);  	break;  }  
Missing Default,TraktPlugin.GUI,GUIImageHandler,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\GUI\GUIImageHandler.cs,LocalImageFilename,The following switch statement is missing a default case: switch (type) {  case ArtworkType.Avatar:  	filename = image.FullSize.ToClearUrl ();  	folder = Config.GetSubFolder (Config.Dir.Thumbs' @"Trakt\Avatars");  	break;  case ArtworkType.PersonHeadshot:  	filename = image.ThumbSize.ToClearUrl ();  	folder = Config.GetSubFolder (Config.Dir.Thumbs' @"Trakt\People");  	break;  case ArtworkType.PersonFanart:  	filename = TraktSettings.DownloadFullSizeFanart ? image.FullSize.ToClearUrl () : image.MediumSize.ToClearUrl ();  	folder = Config.GetSubFolder (Config.Dir.Thumbs' @"Trakt\People\Fanart");  	break;  case ArtworkType.SeasonPoster:  	filename = image.ThumbSize.ToClearUrl ();  	folder = Config.GetSubFolder (Config.Dir.Thumbs' @"Trakt\Shows\Seasons");  	break;  case ArtworkType.MoviePoster:  	filename = image.ThumbSize.ToClearUrl ();  	folder = Config.GetSubFolder (Config.Dir.Thumbs' @"Trakt\Movies\Posters");  	break;  case ArtworkType.MovieFanart:  	filename = TraktSettings.DownloadFullSizeFanart ? image.FullSize.ToClearUrl () : image.MediumSize.ToClearUrl ();  	folder = Config.GetSubFolder (Config.Dir.Thumbs' @"Trakt\Movies\Fanart");  	break;  case ArtworkType.MovieBanner:  	filename = image.FullSize.ToClearUrl ();  	folder = Config.GetSubFolder (Config.Dir.Thumbs' @"Trakt\Movies\Banners");  	break;  case ArtworkType.ShowPoster:  	filename = image.ThumbSize.ToClearUrl ();  	folder = Config.GetSubFolder (Config.Dir.Thumbs' @"Trakt\Shows\Posters");  	break;  case ArtworkType.ShowBanner:  	filename = image.FullSize.ToClearUrl ();  	folder = Config.GetSubFolder (Config.Dir.Thumbs' @"Trakt\Shows\Banners");  	break;  case ArtworkType.ShowFanart:  	filename = TraktSettings.DownloadFullSizeFanart ? image.FullSize.ToClearUrl () : image.MediumSize.ToClearUrl ();  	folder = Config.GetSubFolder (Config.Dir.Thumbs' @"Trakt\Shows\Fanart");  	break;  case ArtworkType.EpisodeImage:  	filename = image.ThumbSize.ToClearUrl ();  	folder = Config.GetSubFolder (Config.Dir.Thumbs' @"Trakt\Episodes");  	break;  }  
Missing Default,TraktPlugin.TraktHandlers,MovingPictures,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MovingPictures.cs,GetMovieResolution,The following switch statement is missing a default case: switch (firstMovie.VideoResolution) {  case "1080p":  	return TraktResolution.hd_1080p.ToString ();  case "1080i":  	return TraktResolution.hd_1080i.ToString ();  case "720p":  	return TraktResolution.hd_720p.ToString ();  case "576p":  	return TraktResolution.sd_576p.ToString ();  case "576i":  	return TraktResolution.sd_576i.ToString ();  case "480p":  	return TraktResolution.sd_480p.ToString ();  case "480i":  	return TraktResolution.sd_480i.ToString ();  case "4K UHD":  	return TraktResolution.uhd_4k.ToString ();  }  
Missing Default,TraktPlugin.TraktHandlers,MyVideos,D:\newReposJune17\Technicolour_Trakt-for-Mediaportal\TraktPlugin\TraktHandlers\MyVideos.cs,GetMovieResolution,The following switch statement is missing a default case: switch (movie.MediaInfo.VideoResolution) {  case "1080p":  	return TraktResolution.hd_1080p.ToString ();  case "1080i":  	return TraktResolution.hd_1080i.ToString ();  case "720p":  	return TraktResolution.hd_720p.ToString ();  case "576p":  	return TraktResolution.sd_576p.ToString ();  case "576i":  	return TraktResolution.sd_576i.ToString ();  case "480p":  	return TraktResolution.sd_480p.ToString ();  case "480i":  	return TraktResolution.sd_480i.ToString ();  case "4K UHD":  	return TraktResolution.uhd_4k.ToString ();  }  
