Implementation smell,Namespace,Class,File,Method,Description
Long Method,TNL.NET.Entities,GhostConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\GhostConnection.cs,WritePacket,The method has 112 lines of code.
Long Method,TNL.NET.Structs,ReflectedReader,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ReflectedReader.cs,ReflectedReader,The method has 114 lines of code.
Complex Method,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,PacketDropped,Cyclomatic complexity of the method is 21
Complex Method,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,WritePacket,Cyclomatic complexity of the method is 19
Complex Method,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,ReadPacket,Cyclomatic complexity of the method is 17
Complex Method,TNL.NET.Entities,GhostConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\GhostConnection.cs,PacketDropped,Cyclomatic complexity of the method is 10
Complex Method,TNL.NET.Entities,GhostConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\GhostConnection.cs,WritePacket,Cyclomatic complexity of the method is 27
Complex Method,TNL.NET.Entities,GhostConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\GhostConnection.cs,ReadPacket,Cyclomatic complexity of the method is 13
Complex Method,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,ReadPacketHeader,Cyclomatic complexity of the method is 17
Complex Method,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,HandleNotify,Cyclomatic complexity of the method is 8
Complex Method,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,ProcessConnections,Cyclomatic complexity of the method is 18
Complex Method,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,ProcessPacket,Cyclomatic complexity of the method is 27
Complex Method,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,HandleConnectRequest,Cyclomatic complexity of the method is 8
Complex Method,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,HandlePunch,Cyclomatic complexity of the method is 12
Complex Method,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,HandleArrangedConnectRequest,Cyclomatic complexity of the method is 11
Complex Method,TNL.NET.Huffman,HuffmanTree,C:\repos\Blumster_TNL.NET\TNL.NET\Huffman\HuffmanTree.cs,Build,Cyclomatic complexity of the method is 8
Complex Method,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteBits,Cyclomatic complexity of the method is 9
Complex Method,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,ReadBits,Cyclomatic complexity of the method is 8
Long Parameter List,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,ConnectArranged,The method has 8 parameters.
Long Parameter List,TNL.NET.Entities,SymmetricCipher,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\SymmetricCipher.cs,Encrypt,The method has 5 parameters.
Long Parameter List,TNL.NET.Entities,SymmetricCipher,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\SymmetricCipher.cs,Decrypt,The method has 5 parameters.
Long Parameter List,TNL.NET.Structs,ClientPuzzleManager,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ClientPuzzleManager.cs,CheckSolution,The method has 5 parameters.
Long Parameter List,TNL.NET.Structs,ClientPuzzleManager,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ClientPuzzleManager.cs,CheckOneSolution,The method has 5 parameters.
Long Parameter List,TNL.NET.Structs,ClientPuzzleManager,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ClientPuzzleManager.cs,SolvePuzzle,The method has 5 parameters.
Long Parameter List,TNL.NET.Structs,ReflectedReader,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ReflectedReader.cs,ReflectedReader,The method has 60 parameters.
Long Parameter List,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,Memcmp,The method has 5 parameters.
Long Statement,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,ReadPacket,The length of the statement  "		if (evt.GetEventDirection () == EventDirection.DirUnset || (evt.GetEventDirection () == EventDirection.DirServerToClient && IsConnectionToClient ()) || (evt.GetEventDirection () == EventDirection.DirClientToServer && IsConnectionToServer ())) { " is 244.
Long Statement,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,ReadPacket,The length of the statement  "			Console.WriteLine ("Assert({0:X8} == {1:X8}) || unpack did not match pack for event of class {2}."' endingPosition' stream.GetBitPosition ()' evt.GetClassName ()); " is 163.
Long Statement,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,ReadConnectRequest,The length of the statement  "		if (!NetClassRep.IsVersionBorderCount ((UInt32)GetNetClassGroup ()' (UInt32)NetClassType.NetClassTypeEvent' EventClassVersion)) " is 127.
Long Statement,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,ReadConnectRequest,The length of the statement  "	EventClassVersion = (UInt32)NetClassRep.GetClass ((UInt32)GetNetClassGroup ()' (UInt32)NetClassType.NetClassTypeEvent' EventClassCount - 1).ClassVersion; " is 153.
Long Statement,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,ReadConnectAccept,The length of the statement  "	if (!NetClassRep.IsVersionBorderCount ((UInt32)GetNetClassGroup ()' (UInt32)NetClassType.NetClassTypeEvent' EventClassCount)) " is 125.
Long Statement,TNL.NET.Entities,GhostConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\GhostConnection.cs,RegisterNetClassReps,The length of the statement  "	NetEvent.ImplementNetEvent (out RPCStartGhosting.DynClassRep' "RPC_GhostConnection_rpcStartGhosting"' NetClassMask.NetClassGroupGameMask' 0); " is 141.
Long Statement,TNL.NET.Entities,GhostConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\GhostConnection.cs,RegisterNetClassReps,The length of the statement  "	NetEvent.ImplementNetEvent (out RPCReadyForNormalGhosts.DynClassRep' "RPC_GhostConnection_rpcReadyForNormalGhosts"' NetClassMask.NetClassGroupGameMask' 0); " is 155.
Long Statement,TNL.NET.Entities,GhostConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\GhostConnection.cs,RegisterNetClassReps,The length of the statement  "	NetEvent.ImplementNetEvent (out RPCEndGhosting.DynClassRep' "RPC_GhostConnection_rpcEndGhosting"' NetClassMask.NetClassGroupGameMask' 0); " is 137.
Long Statement,TNL.NET.Entities,GhostConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\GhostConnection.cs,WritePacket,The length of the statement  "		if ((walk.Flags & (UInt32)GhostInfoFlags.KillGhost) != 0U && (walk.Flags & (UInt32)GhostInfoFlags.NotYetGhosted) != 0U) { " is 121.
Long Statement,TNL.NET.Entities,GhostConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\GhostConnection.cs,WritePacket,The length of the statement  "			walk.Priority = (walk.Flags & (UInt32)GhostInfoFlags.KillGhost) != 0U ? 10000.0f : walk.Obj.GetUpdatePriority (ScopeObject' walk.UpdateMask' (Int32)walk.UpdateSkipCount); " is 170.
Long Statement,TNL.NET.Entities,GhostConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\GhostConnection.cs,ReadPacket,The length of the statement  "				Console.WriteLine ("Assert({0} == {1} || unpackUpdate did not match packUpdate for object of class {0}. Expected {1} bits' got {2} bits."' LocalGhosts [index].GetClassName ()' endPos' stream.GetBitPosition ()); " is 210.
Long Statement,TNL.NET.Entities,GhostConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\GhostConnection.cs,GetGhostIndex,The length of the statement  "		if (GhostArray [i] != null && GhostArray [i].Obj == obj && (GhostArray [i].Flags & (UInt32)(GhostInfoFlags.KillingGhost | GhostInfoFlags.Ghosting | GhostInfoFlags.NotYetGhosted | GhostInfoFlags.KillGhost)) == 0U) " is 212.
Long Statement,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,WriteRawPacket,The length of the statement  "		//Console.WriteLine("NetConnection {0}: END {1} - {2} bits"' NetAddress' GetClassName()' stream.GetBitPosition() - start); " is 122.
Long Statement,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,WritePacketRateInfo,The length of the statement  "	if (stream.WriteFlag (note.RateChanged) && !stream.WriteFlag (TypeFlags.Test ((UInt32)NetConnectionTypeFlags.ConnectionAdaptive))) { " is 132.
Long Statement,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,IsAdaptive,The length of the statement  "	return TypeFlags.Test ((UInt32)(NetConnectionTypeFlags.ConnectionAdaptive | NetConnectionTypeFlags.ConnectionRemoteAdaptive)); " is 126.
Long Statement,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,ProcessConnections,The length of the statement  "			if (pending.ConnectionState == NetConnectionState.AwaitingChallengeResponse && CurrentTime > pending.ConnectLastSendTime + ChallengeRetryTime) { " is 144.
Long Statement,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,ProcessConnections,The length of the statement  "			else if (pending.ConnectionState == NetConnectionState.AwaitingConnectResponse && CurrentTime > pending.ConnectLastSendTime + ConnectRetryTime) { " is 145.
Long Statement,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,ProcessConnections,The length of the statement  "			else if (pending.ConnectionState == NetConnectionState.SendingPunchPackets && CurrentTime > pending.ConnectLastSendTime + PunchRetryTime) { " is 139.
Long Statement,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,ProcessConnections,The length of the statement  "			else if (pending.ConnectionState == NetConnectionState.ComputingPuzzleSolution && CurrentTime > pending.ConnectLastSendTime + PuzzleSolutionTimeout) { " is 150.
Long Statement,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,ProcessConnections,The length of the statement  "	foreach (var pair in PendingConnections.Where (pair => pair.Value.ConnectionState == NetConnectionState.ComputingPuzzleSolution)) { " is 131.
Long Statement,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,ContinuePuzzleSolution,The length of the statement  "	if (!ClientPuzzleManager.SolvePuzzle (ref cParams.PuzzleSolution' cParams.Nonce' cParams.ServerNonce' cParams.PuzzleDifficulty' cParams.ClientIdentity)) " is 152.
Long Statement,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,HandleConnectRequest,The length of the statement  "	var result = PuzzleManager.CheckSolution (cParams.PuzzleSolution' cParams.Nonce' cParams.ServerNonce' cParams.PuzzleDifficulty' cParams.ClientIdentity); " is 152.
Long Statement,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,HandleConnectReject,The length of the statement  "	if (conn == null || (conn.ConnectionState != NetConnectionState.AwaitingChallengeResponse && conn.ConnectionState != NetConnectionState.AwaitingConnectResponse)) " is 161.
Long Statement,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,SendPunchPackets,The length of the statement  "			stream.Write (stream.WriteFlag (cParams.RequestCertificate && Certificate != null) ? Certificate : PrivateKey.GetPublicKey ()); " is 127.
Long Statement,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,SendPunchPackets,The length of the statement  "		Console.WriteLine ("Sending punch packet ({0}' {1}) to {2}"' Convert.ToBase64String (cParams.Nonce.Data)' Convert.ToBase64String (cParams.ServerNonce.Data)' ep); " is 161.
Long Statement,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,HandlePunch,The length of the statement  "		if ((cParams.IsInitiator && firstNonce != cParams.ServerNonce) || (!cParams.IsInitiator && firstNonce != cParams.Nonce)) " is 120.
Long Statement,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,HandlePunch,The length of the statement  "		var cont = cParams.PossibleAddresses.Any (ep => ep.Address.Equals (address.Address) && ep.AddressFamily == address.AddressFamily); " is 130.
Long Statement,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,Disconnect,The length of the statement  "	if (conn.ConnectionState == NetConnectionState.AwaitingChallengeResponse || conn.ConnectionState == NetConnectionState.AwaitingConnectResponse) { " is 145.
Long Statement,TNL.NET.Entities,NetObject,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetObject.cs,ImplementNetObject,The length of the statement  "	rep = new NetClassRepInstance<T> (typeof(T).Name' (UInt32)NetClassMask.NetClassGroupGameMask' NetClassType.NetClassTypeObject' 0); " is 130.
Long Statement,TNL.NET.Entities,NetObjectRPCEvent,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetObjectRPCEvent.cs,Unpack,The length of the statement  "	if ((gc.DoesGhostTo () && RpcDirection == NetObjectRPCDirection.RPCToGhost) || (gc.DoesGhostFrom () && RpcDirection == NetObjectRPCDirection.RPCToGhostParent)) { " is 161.
Long Statement,TNL.NET.Entities,NetObjectRPCEvent,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetObjectRPCEvent.cs,Unpack,The length of the statement  "			DestObject = RpcDirection == NetObjectRPCDirection.RPCToGhost ? gc.ResolveGhost (ghostIndex) : gc.ResolveGhostParent (ghostIndex); " is 130.
Long Statement,TNL.NET.Structs,ClientPuzzleManager,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ClientPuzzleManager.cs,CheckSolution,The length of the statement  "	return CheckOneSolution (solution' clientNonce' serverNonce' puzzleDifficulty' clientIdentity) ? ErrorCode.Success : ErrorCode.InvalidSolution; " is 143.
Long Statement,TNL.NET.Types,NetClassRep,C:\repos\Blumster_TNL.NET\TNL.NET\Types\NetClassRep.cs,IsVersionBorderCount,The length of the statement  "	return count == GetNetClassCount (classGroup' classType) || (count > 0 && ClassTable [classGroup] [classType] [(Int32)count].ClassVersion != ClassTable [classGroup] [classType] [(Int32)count - 1].ClassVersion); " is 210.
Long Statement,TNL.NET.Types,NetClassRep,C:\repos\Blumster_TNL.NET\TNL.NET\Types\NetClassRep.cs,Initialize,The length of the statement  "			dynamicTable.AddRange (ClassList.Where (walk => (Int32)walk.ClassType == type && (walk.ClassGroupMask & groupMask) != 0)); " is 122.
Long Statement,TNL.NET.Types,NetClassRep,C:\repos\Blumster_TNL.NET\TNL.NET\Types\NetClassRep.cs,LogBitUsage,The length of the statement  "			Console.WriteLine ("{0} (Initial) - Count: {1}   Avg Size: {2}"' walk.ClassName' walk.InitialUpdateCount' walk.InitialUpdateBitsUsed / (Single)walk.InitialUpdateCount); " is 168.
Long Statement,TNL.NET.Types,NetClassRep,C:\repos\Blumster_TNL.NET\TNL.NET\Types\NetClassRep.cs,LogBitUsage,The length of the statement  "			Console.WriteLine ("{0} (Partial) - Count: {1}   Avg Size: {2}"' walk.ClassName' walk.PartialUpdateCount' walk.PartialUpdateBitsUsed / (Single)walk.PartialUpdateCount); " is 168.
Long Statement,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteBits,The length of the statement  "		destPtr [destOff] = (Byte)((destPtr [destOff] & ~lastMask) | ((destByte | (sourcePtr [sourceOff] << (Int32)upShift)) & lastMask)); " is 130.
Long Statement,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,HashAndEncrypt,The length of the statement  "	theCipher.Encrypt (GetBuffer ()' encryptStartOffset' GetBuffer ()' encryptStartOffset' GetBytePosition () - encryptStartOffset); " is 128.
Complex Conditional,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,ReadPacket,The conditional expression  "evt.GetEventDirection () == EventDirection.DirUnset || (evt.GetEventDirection () == EventDirection.DirServerToClient && IsConnectionToClient ()) || (evt.GetEventDirection () == EventDirection.DirClientToServer && IsConnectionToServer ())"  is complex.
Complex Conditional,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,HandlePunch,The conditional expression  "(cParams.IsInitiator && firstNonce != cParams.ServerNonce) || (!cParams.IsInitiator && firstNonce != cParams.Nonce)"  is complex.
Complex Conditional,TNL.NET.Entities,NetObjectRPCEvent,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetObjectRPCEvent.cs,Unpack,The conditional expression  "(gc.DoesGhostTo () && RpcDirection == NetObjectRPCDirection.RPCToGhost) || (gc.DoesGhostFrom () && RpcDirection == NetObjectRPCDirection.RPCToGhostParent)"  is complex.
Complex Conditional,TNL.NET.Structs,FunctorDecl,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\FunctorDecl.cs,Dispatch,The conditional expression  "MethodDelegate == null || Arguments == null || obj == null || (obj as T) == null"  is complex.
Virtual Method Call from Constructor,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,NetConnection,The constructor "NetConnection" calls a virtual method "ComputeNegotiatedRate".
Magic Number,TNL.NET.Entities,AsymmetricKey,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\AsymmetricKey.cs,Load,The following statement contains a magic number: if (bufferSize < 5)  	return;  
Magic Number,TNL.NET.Entities,AsymmetricKey,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\AsymmetricKey.cs,Load,The following statement contains a magic number: Array.Copy (theBuffer.GetBuffer ()' 1' temp' 0' 4);  
Magic Number,TNL.NET.Entities,AsymmetricKey,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\AsymmetricKey.cs,ComputeSharedSecretKey,The following statement contains a magic number: return new ByteBuffer (hash' 32);  
Magic Number,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,WritePacket,The following statement contains a magic number: if (ConnectionParameters.DebugObjectSizes)  	stream.WriteInt (DebugCheckSum' 32);  
Magic Number,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,WritePacket,The following statement contains a magic number: stream.WriteInt (DebugCheckSum' 32);  
Magic Number,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,WritePacket,The following statement contains a magic number: while (_sendEventQueueHead != null) {  	if (stream.IsFull ())  		break;  	if (_sendEventQueueHead.SeqCount > _lastAckedEventSeq + 126)  		break;  	var ev = _sendEventQueueHead;  	var eventStart = stream.GetBitPosition ();  	stream.WriteFlag (true);  	if (!stream.WriteFlag (ev.SeqCount == prevSeq + 1))  		stream.WriteInt ((UInt32)ev.SeqCount' 7);  	prevSeq = ev.SeqCount;  	if (ConnectionParameters.DebugObjectSizes)  		stream.AdvanceBitPosition (BitStreamPosBitSize);  	var start = stream.GetBitPosition ();  	var classId = ev.Event.GetClassId (GetNetClassGroup ());  	stream.WriteInt (classId' (Byte)EventClassBitSize);  	ev.Event.Pack (this' stream);  	ev.Event.GetClassRep ().AddInitialUpdate (stream.GetBitPosition () - start);  	if (ConnectionParameters.DebugObjectSizes)  		stream.WriteIntAt (stream.GetBitPosition ()' BitStreamPosBitSize' start - BitStreamPosBitSize);  	if (stream.GetBitSpaceAvailable () < MinimumPaddingBits) {  		stream.SetBitPosition (eventStart);  		stream.ClearError ();  		break;  	}  	--NumEventsWaiting;  	_sendEventQueueHead = ev.NextEvent;  	ev.NextEvent = null;  	if (packQueueHead == null)  		packQueueHead = ev;  	else  		packQueueTail.NextEvent = ev;  	packQueueTail = ev;  }  
Magic Number,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,WritePacket,The following statement contains a magic number: while (_sendEventQueueHead != null) {  	if (stream.IsFull ())  		break;  	if (_sendEventQueueHead.SeqCount > _lastAckedEventSeq + 126)  		break;  	var ev = _sendEventQueueHead;  	var eventStart = stream.GetBitPosition ();  	stream.WriteFlag (true);  	if (!stream.WriteFlag (ev.SeqCount == prevSeq + 1))  		stream.WriteInt ((UInt32)ev.SeqCount' 7);  	prevSeq = ev.SeqCount;  	if (ConnectionParameters.DebugObjectSizes)  		stream.AdvanceBitPosition (BitStreamPosBitSize);  	var start = stream.GetBitPosition ();  	var classId = ev.Event.GetClassId (GetNetClassGroup ());  	stream.WriteInt (classId' (Byte)EventClassBitSize);  	ev.Event.Pack (this' stream);  	ev.Event.GetClassRep ().AddInitialUpdate (stream.GetBitPosition () - start);  	if (ConnectionParameters.DebugObjectSizes)  		stream.WriteIntAt (stream.GetBitPosition ()' BitStreamPosBitSize' start - BitStreamPosBitSize);  	if (stream.GetBitSpaceAvailable () < MinimumPaddingBits) {  		stream.SetBitPosition (eventStart);  		stream.ClearError ();  		break;  	}  	--NumEventsWaiting;  	_sendEventQueueHead = ev.NextEvent;  	ev.NextEvent = null;  	if (packQueueHead == null)  		packQueueHead = ev;  	else  		packQueueTail.NextEvent = ev;  	packQueueTail = ev;  }  
Magic Number,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,WritePacket,The following statement contains a magic number: if (_sendEventQueueHead.SeqCount > _lastAckedEventSeq + 126)  	break;  
Magic Number,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,WritePacket,The following statement contains a magic number: if (!stream.WriteFlag (ev.SeqCount == prevSeq + 1))  	stream.WriteInt ((UInt32)ev.SeqCount' 7);  
Magic Number,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,WritePacket,The following statement contains a magic number: stream.WriteInt ((UInt32)ev.SeqCount' 7);  
Magic Number,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,ReadPacket,The following statement contains a magic number: if (ConnectionParameters.DebugObjectSizes)  	Console.WriteLine ("{0:X8} == {1:X8}"' stream.ReadInt (32)' DebugCheckSum);  
Magic Number,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,ReadPacket,The following statement contains a magic number: Console.WriteLine ("{0:X8} == {1:X8}"' stream.ReadInt (32)' DebugCheckSum);  
Magic Number,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,ReadPacket,The following statement contains a magic number: while (true) {  	var bit = stream.ReadFlag ();  	if (ungaranteedPhase && !bit) {  		ungaranteedPhase = false;  		bit = stream.ReadFlag ();  	}  	if (!ungaranteedPhase && !bit)  		break;  	var seq = -1;  	if (!ungaranteedPhase) {  		if (stream.ReadFlag ())  			seq = (prevSeq + 1) & 0x7F;  		else  			seq = (Int32)stream.ReadInt (7);  		prevSeq = seq;  	}  	UInt32 endingPosition = 0;  	if (ConnectionParameters.DebugObjectSizes)  		endingPosition = stream.ReadInt (BitStreamPosBitSize);  	var classId = stream.ReadInt ((Byte)EventClassBitSize);  	if (classId >= EventClassCount) {  		SetLastError ("Invalid packet.");  		return;  	}  	var evt = (NetEvent)Create ((UInt32)GetNetClassGroup ()' (UInt32)NetClassType.NetClassTypeEvent' (Int32)classId);  	if (evt == null) {  		SetLastError ("Invalid packet.");  		return;  	}  	if (evt.GetEventDirection () == EventDirection.DirUnset || (evt.GetEventDirection () == EventDirection.DirServerToClient && IsConnectionToClient ()) || (evt.GetEventDirection () == EventDirection.DirClientToServer && IsConnectionToServer ())) {  		SetLastError ("Invalid packet.");  		return;  	}  	evt.Unpack (this' stream);  	if (ErrorBuffer [0] != 0)  		return;  	if (ConnectionParameters.DebugObjectSizes)  		Console.WriteLine ("Assert({0:X8} == {1:X8}) || unpack did not match pack for event of class {2}."' endingPosition' stream.GetBitPosition ()' evt.GetClassName ());  	if (ungaranteedPhase) {  		ProcessEvent (evt);  		if (ErrorBuffer [0] != 0)  			return;  		continue;  	}  	seq |= (_nextRecvEventSeq & ~0x7F);  	if (seq < _nextRecvEventSeq)  		seq += 128;  	var note = new EventNote {  		Event = evt'  		SeqCount = seq'  		NextEvent = null  	};  	while (waitInsert != null && waitInsert.SeqCount < seq) {  		waitInsertPrev = waitInsert;  		waitInsert = waitInsert.NextEvent;  	}  	note.NextEvent = waitInsert;  	if (waitInsertPrev == null)  		_waitSeqEvents = note;  	else  		waitInsertPrev.NextEvent = note;  	waitInsertPrev = note;  	waitInsert = note.NextEvent;  }  
Magic Number,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,ReadPacket,The following statement contains a magic number: while (true) {  	var bit = stream.ReadFlag ();  	if (ungaranteedPhase && !bit) {  		ungaranteedPhase = false;  		bit = stream.ReadFlag ();  	}  	if (!ungaranteedPhase && !bit)  		break;  	var seq = -1;  	if (!ungaranteedPhase) {  		if (stream.ReadFlag ())  			seq = (prevSeq + 1) & 0x7F;  		else  			seq = (Int32)stream.ReadInt (7);  		prevSeq = seq;  	}  	UInt32 endingPosition = 0;  	if (ConnectionParameters.DebugObjectSizes)  		endingPosition = stream.ReadInt (BitStreamPosBitSize);  	var classId = stream.ReadInt ((Byte)EventClassBitSize);  	if (classId >= EventClassCount) {  		SetLastError ("Invalid packet.");  		return;  	}  	var evt = (NetEvent)Create ((UInt32)GetNetClassGroup ()' (UInt32)NetClassType.NetClassTypeEvent' (Int32)classId);  	if (evt == null) {  		SetLastError ("Invalid packet.");  		return;  	}  	if (evt.GetEventDirection () == EventDirection.DirUnset || (evt.GetEventDirection () == EventDirection.DirServerToClient && IsConnectionToClient ()) || (evt.GetEventDirection () == EventDirection.DirClientToServer && IsConnectionToServer ())) {  		SetLastError ("Invalid packet.");  		return;  	}  	evt.Unpack (this' stream);  	if (ErrorBuffer [0] != 0)  		return;  	if (ConnectionParameters.DebugObjectSizes)  		Console.WriteLine ("Assert({0:X8} == {1:X8}) || unpack did not match pack for event of class {2}."' endingPosition' stream.GetBitPosition ()' evt.GetClassName ());  	if (ungaranteedPhase) {  		ProcessEvent (evt);  		if (ErrorBuffer [0] != 0)  			return;  		continue;  	}  	seq |= (_nextRecvEventSeq & ~0x7F);  	if (seq < _nextRecvEventSeq)  		seq += 128;  	var note = new EventNote {  		Event = evt'  		SeqCount = seq'  		NextEvent = null  	};  	while (waitInsert != null && waitInsert.SeqCount < seq) {  		waitInsertPrev = waitInsert;  		waitInsert = waitInsert.NextEvent;  	}  	note.NextEvent = waitInsert;  	if (waitInsertPrev == null)  		_waitSeqEvents = note;  	else  		waitInsertPrev.NextEvent = note;  	waitInsertPrev = note;  	waitInsert = note.NextEvent;  }  
Magic Number,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,ReadPacket,The following statement contains a magic number: if (!ungaranteedPhase) {  	if (stream.ReadFlag ())  		seq = (prevSeq + 1) & 0x7F;  	else  		seq = (Int32)stream.ReadInt (7);  	prevSeq = seq;  }  
Magic Number,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,ReadPacket,The following statement contains a magic number: if (stream.ReadFlag ())  	seq = (prevSeq + 1) & 0x7F;  else  	seq = (Int32)stream.ReadInt (7);  
Magic Number,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,ReadPacket,The following statement contains a magic number: seq = (Int32)stream.ReadInt (7);  
Magic Number,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,ReadPacket,The following statement contains a magic number: if (seq < _nextRecvEventSeq)  	seq += 128;  
Magic Number,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,ReadPacket,The following statement contains a magic number: seq += 128;  
Magic Number,TNL.NET.Entities,GhostConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\GhostConnection.cs,WritePacket,The following statement contains a magic number: if (ConnectionParameters.DebugObjectSizes)  	stream.WriteInt (DebugCheckSum' 32);  
Magic Number,TNL.NET.Entities,GhostConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\GhostConnection.cs,WritePacket,The following statement contains a magic number: stream.WriteInt (DebugCheckSum' 32);  
Magic Number,TNL.NET.Entities,GhostConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\GhostConnection.cs,WritePacket,The following statement contains a magic number: if (sendSize < 3)  	sendSize = 3;  
Magic Number,TNL.NET.Entities,GhostConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\GhostConnection.cs,WritePacket,The following statement contains a magic number: if (sendSize < 3)  	sendSize = 3;  
Magic Number,TNL.NET.Entities,GhostConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\GhostConnection.cs,WritePacket,The following statement contains a magic number: sendSize = 3;  
Magic Number,TNL.NET.Entities,GhostConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\GhostConnection.cs,WritePacket,The following statement contains a magic number: stream.WriteInt ((UInt32)sendSize - 3U' 3);  
Magic Number,TNL.NET.Entities,GhostConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\GhostConnection.cs,ReadPacket,The following statement contains a magic number: if (ConnectionParameters.DebugObjectSizes) {  	var sum = stream.ReadInt (32);  	Console.WriteLine ("Assert({0} == {1} || Invalid checksum."' sum' DebugCheckSum);  }  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,NetConnection,The following statement contains a magic number: Cwnd = 2;  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,NetConnection,The following statement contains a magic number: SSThresh = 30;  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,WritePacketHeader,The following statement contains a magic number: stream.WriteInt ((UInt32)packetType' 2);  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,WritePacketHeader,The following statement contains a magic number: stream.WriteInt (LastSendSeq' 5);  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,WritePacketHeader,The following statement contains a magic number: stream.WriteInt (LastSendSeq >> 5' SequenceNumberBitSize - 5);  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,WritePacketHeader,The following statement contains a magic number: stream.WriteInt (LastSendSeq >> 5' SequenceNumberBitSize - 5);  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,WritePacketHeader,The following statement contains a magic number: for (var i = 0U; i < wordCount; ++i)  	stream.WriteInt (AckMask [i]' (Byte)(i == wordCount - 1 ? (ackByteCount - (i * 4)) * 8 : 32));  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,WritePacketHeader,The following statement contains a magic number: for (var i = 0U; i < wordCount; ++i)  	stream.WriteInt (AckMask [i]' (Byte)(i == wordCount - 1 ? (ackByteCount - (i * 4)) * 8 : 32));  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,WritePacketHeader,The following statement contains a magic number: for (var i = 0U; i < wordCount; ++i)  	stream.WriteInt (AckMask [i]' (Byte)(i == wordCount - 1 ? (ackByteCount - (i * 4)) * 8 : 32));  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,WritePacketHeader,The following statement contains a magic number: stream.WriteInt (AckMask [i]' (Byte)(i == wordCount - 1 ? (ackByteCount - (i * 4)) * 8 : 32));  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,WritePacketHeader,The following statement contains a magic number: stream.WriteInt (AckMask [i]' (Byte)(i == wordCount - 1 ? (ackByteCount - (i * 4)) * 8 : 32));  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,WritePacketHeader,The following statement contains a magic number: stream.WriteInt (AckMask [i]' (Byte)(i == wordCount - 1 ? (ackByteCount - (i * 4)) * 8 : 32));  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,WritePacketHeader,The following statement contains a magic number: if (sendDelay > 2047)  	sendDelay = 2047;  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,WritePacketHeader,The following statement contains a magic number: if (sendDelay > 2047)  	sendDelay = 2047;  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,WritePacketHeader,The following statement contains a magic number: sendDelay = 2047;  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,WritePacketHeader,The following statement contains a magic number: stream.WriteInt ((UInt32)sendDelay >> 3' 8);  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,WritePacketHeader,The following statement contains a magic number: stream.WriteInt ((UInt32)sendDelay >> 3' 8);  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,ReadPacketHeader,The following statement contains a magic number: sequenceNumber = sequenceNumber | (stream.ReadInt (SequenceNumberBitSize - 5) << 5);  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,ReadPacketHeader,The following statement contains a magic number: sequenceNumber = sequenceNumber | (stream.ReadInt (SequenceNumberBitSize - 5) << 5);  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,ReadPacketHeader,The following statement contains a magic number: for (var i = 0U; i < ackWordCount; ++i)  	ackMask [i] = stream.ReadInt ((Byte)(i == ackWordCount - 1 ? (ackByteCount - (i * 4)) * 8 : 32));  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,ReadPacketHeader,The following statement contains a magic number: for (var i = 0U; i < ackWordCount; ++i)  	ackMask [i] = stream.ReadInt ((Byte)(i == ackWordCount - 1 ? (ackByteCount - (i * 4)) * 8 : 32));  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,ReadPacketHeader,The following statement contains a magic number: for (var i = 0U; i < ackWordCount; ++i)  	ackMask [i] = stream.ReadInt ((Byte)(i == ackWordCount - 1 ? (ackByteCount - (i * 4)) * 8 : 32));  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,ReadPacketHeader,The following statement contains a magic number: ackMask [i] = stream.ReadInt ((Byte)(i == ackWordCount - 1 ? (ackByteCount - (i * 4)) * 8 : 32));  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,ReadPacketHeader,The following statement contains a magic number: ackMask [i] = stream.ReadInt ((Byte)(i == ackWordCount - 1 ? (ackByteCount - (i * 4)) * 8 : 32));  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,ReadPacketHeader,The following statement contains a magic number: ackMask [i] = stream.ReadInt ((Byte)(i == ackWordCount - 1 ? (ackByteCount - (i * 4)) * 8 : 32));  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,ReadPacketHeader,The following statement contains a magic number: while (ackMaskShift > 32) {  	for (var i = MaxAckMaskSize - 1; i > 0; --i)  		AckMask [i] = AckMask [i - 1];  	AckMask [0] = 0;  	ackMaskShift -= 32;  }  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,ReadPacketHeader,The following statement contains a magic number: while (ackMaskShift > 32) {  	for (var i = MaxAckMaskSize - 1; i > 0; --i)  		AckMask [i] = AckMask [i - 1];  	AckMask [0] = 0;  	ackMaskShift -= 32;  }  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,ReadPacketHeader,The following statement contains a magic number: ackMaskShift -= 32;  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,ReadPacketHeader,The following statement contains a magic number: for (var i = 0U; i < MaxAckMaskSize; ++i) {  	var nextShift = AckMask [i] >> (Int32)(32 - ackMaskShift);  	AckMask [i] = (AckMask [i] << (Int32)ackMaskShift) | upShifted;  	upShifted = nextShift;  }  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,ReadPacketHeader,The following statement contains a magic number: for (var i = 0U; i < notifyCount; ++i) {  	var notifyIndex = HighestAckedSeq + i + 1;  	var ackMaskBit = (highestAck - notifyIndex) & 0x1FU;  	var ackMaskWord = (highestAck - notifyIndex) >> 5;  	var packetTransmitSuccess = (ackMask [ackMaskWord] & (1U << (Int32)ackMaskBit)) != 0U;  	HighestAckedSendTime = 0;  	HandleNotify (notifyIndex' packetTransmitSuccess);  	if (HighestAckedSendTime > 0) {  		var roundTripDelta = Interface.GetCurrentTime () - (HighestAckedSendTime + (Int32)sendDelay);  		RoundTripTime = RoundTripTime * 0.9f + roundTripDelta * 0.1f;  		if (RoundTripTime < 0.0f)  			RoundTripTime = 0.0f;  	}  	if (packetTransmitSuccess)  		LastRecvAckAck = LastSeqRecvdAtSend [notifyIndex & PacketWindowMask];  }  
Magic Number,TNL.NET.Entities,NetConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetConnection.cs,WindowFull,The following statement contains a magic number: if (LastSendSeq - HighestAckedSeq >= (MaxPacketWindowSize - 2))  	return true;  
Magic Number,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,NetInterface,The following statement contains a magic number: RandomHashData = new Byte[12];  
Magic Number,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,NetInterface,The following statement contains a magic number: RandomUtil.Read (RandomHashData' 12);  
Magic Number,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,ComputeClientIdentityToken,The following statement contains a magic number: Array.Copy (BitConverter.GetBytes (address.Port)' 0' buff' 0' 4);  
Magic Number,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,ComputeClientIdentityToken,The following statement contains a magic number: Array.Copy (address.Address.GetAddressBytes ()' 0' buff' 4' 4);  
Magic Number,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,ComputeClientIdentityToken,The following statement contains a magic number: Array.Copy (address.Address.GetAddressBytes ()' 0' buff' 4' 4);  
Magic Number,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,ComputeClientIdentityToken,The following statement contains a magic number: Array.Copy (theNonce.Data' 0' buff' 20' 8);  
Magic Number,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,ComputeClientIdentityToken,The following statement contains a magic number: Array.Copy (theNonce.Data' 0' buff' 20' 8);  
Magic Number,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,ComputeClientIdentityToken,The following statement contains a magic number: Array.Copy (RandomHashData' 0' buff' 28' 12);  
Magic Number,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,ComputeClientIdentityToken,The following statement contains a magic number: Array.Copy (RandomHashData' 0' buff' 28' 12);  
Magic Number,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,HandlePunch,The following statement contains a magic number: foreach (var pair in PendingConnections) {  	conn = pair.Value;  	var cParams = conn.GetConnectionParameters ();  	if (conn.ConnectionState != NetConnectionState.SendingPunchPackets)  		continue;  	if ((cParams.IsInitiator && firstNonce != cParams.ServerNonce) || (!cParams.IsInitiator && firstNonce != cParams.Nonce))  		continue;  	if (cParams.PossibleAddresses.Contains (address)) {  		if (cParams.IsInitiator) {  			found = true;  			break;  		}  		continue;  	}  	var cont = cParams.PossibleAddresses.Any (ep => ep.Address.Equals (address.Address) && ep.AddressFamily == address.AddressFamily);  	if (!cont)  		continue;  	if (cParams.PossibleAddresses.Count < 5)  		cParams.PossibleAddresses.Add (address);  	if (cParams.IsInitiator) {  		found = true;  		break;  	}  }  
Magic Number,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,HandlePunch,The following statement contains a magic number: if (cParams.PossibleAddresses.Count < 5)  	cParams.PossibleAddresses.Add (address);  
Magic Number,TNL.NET.Entities,SymmetricCipher,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\SymmetricCipher.cs,SymmetricCipher,The following statement contains a magic number: if (theByteBuffer.GetBufferSize () != KeySize * 2) {  	var buffer = new Byte[KeySize];  	throw new NotImplementedException ();  	Array.Copy (buffer' _initVector' BlockSize);  }  else {  	throw new NotImplementedException ();  	Array.Copy (theByteBuffer.GetBuffer ()' KeySize' _initVector' 0' BlockSize);  }  
Magic Number,TNL.NET.Entities,SymmetricCipher,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\SymmetricCipher.cs,SetupCounter,The following statement contains a magic number: _counter [2] = _initVector [2] + counterValue3;  
Magic Number,TNL.NET.Entities,SymmetricCipher,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\SymmetricCipher.cs,SetupCounter,The following statement contains a magic number: _counter [2] = _initVector [2] + counterValue3;  
Magic Number,TNL.NET.Entities,SymmetricCipher,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\SymmetricCipher.cs,SetupCounter,The following statement contains a magic number: _counter [3] = _initVector [3] + counterValue4;  
Magic Number,TNL.NET.Entities,SymmetricCipher,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\SymmetricCipher.cs,SetupCounter,The following statement contains a magic number: _counter [3] = _initVector [3] + counterValue4;  
Magic Number,TNL.NET.Entities,SymmetricCipher,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\SymmetricCipher.cs,Encrypt,The following statement contains a magic number: while (len-- > 0) {  	if (_padLen == 16) {  		throw new NotImplementedException ();  		_padLen = 0;  	}  	var encryptedChar = (Byte)(plainText [plainTextOffset++] ^ _pad [_padLen]);  	_pad [_padLen++] = cipherText [cipherTextOffset++] = encryptedChar;  }  
Magic Number,TNL.NET.Entities,SymmetricCipher,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\SymmetricCipher.cs,Encrypt,The following statement contains a magic number: if (_padLen == 16) {  	throw new NotImplementedException ();  	_padLen = 0;  }  
Magic Number,TNL.NET.Huffman,HuffmanTree,C:\repos\Blumster_TNL.NET\TNL.NET\Huffman\HuffmanTree.cs,Build,The following statement contains a magic number: for (var i = 0; i < 256; ++i) {  	nodes [i] = new Node {  		Symbol = (Byte)i'  		Frequency = CharFreqs [i] + 1'  		NumBits = 0'  		Code = 0'  		Left = null'  		Right = null  	};  	Leaves.Add ((Byte)i' nodes [i]);  }  
Magic Number,TNL.NET.Structs,ClientPuzzleManager,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ClientPuzzleManager.cs,CheckOneSolution,The following statement contains a magic number: Array.Copy (sol' 0' buffer' 0' 4);  
Magic Number,TNL.NET.Structs,ClientPuzzleManager,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ClientPuzzleManager.cs,CheckOneSolution,The following statement contains a magic number: Array.Copy (cid' 0' buffer' 4' 4);  
Magic Number,TNL.NET.Structs,ClientPuzzleManager,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ClientPuzzleManager.cs,CheckOneSolution,The following statement contains a magic number: Array.Copy (cid' 0' buffer' 4' 4);  
Magic Number,TNL.NET.Structs,ClientPuzzleManager,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ClientPuzzleManager.cs,CheckOneSolution,The following statement contains a magic number: Array.Copy (clientNonce.Data' 0' buffer' 8' 8);  
Magic Number,TNL.NET.Structs,ClientPuzzleManager,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ClientPuzzleManager.cs,CheckOneSolution,The following statement contains a magic number: Array.Copy (clientNonce.Data' 0' buffer' 8' 8);  
Magic Number,TNL.NET.Structs,ClientPuzzleManager,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ClientPuzzleManager.cs,CheckOneSolution,The following statement contains a magic number: Array.Copy (serverNonce.Data' 0' buffer' 16' 8);  
Magic Number,TNL.NET.Structs,ClientPuzzleManager,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ClientPuzzleManager.cs,CheckOneSolution,The following statement contains a magic number: Array.Copy (serverNonce.Data' 0' buffer' 16' 8);  
Magic Number,TNL.NET.Structs,ClientPuzzleManager,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ClientPuzzleManager.cs,CheckOneSolution,The following statement contains a magic number: while (puzzleDifficulty > 8) {  	if (hash [index] != 0)  		return false;  	++index;  	puzzleDifficulty -= 8;  }  
Magic Number,TNL.NET.Structs,ClientPuzzleManager,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ClientPuzzleManager.cs,CheckOneSolution,The following statement contains a magic number: while (puzzleDifficulty > 8) {  	if (hash [index] != 0)  		return false;  	++index;  	puzzleDifficulty -= 8;  }  
Magic Number,TNL.NET.Structs,ClientPuzzleManager,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ClientPuzzleManager.cs,CheckOneSolution,The following statement contains a magic number: puzzleDifficulty -= 8;  
Magic Number,TNL.NET.Structs,ClientPuzzleManager,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ClientPuzzleManager.cs,CheckOneSolution,The following statement contains a magic number: return (hash [index] & (0xFF << (8 - (Int32)puzzleDifficulty))) == 0;  
Magic Number,TNL.NET.Structs,ReflectedReader,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ReflectedReader.cs,ReflectedReader,The following statement contains a magic number: ReadLookup.Add ("List"' (b' t) =>  {  	var ret = (IList)Activator.CreateInstance (t);  	var size = b.ReadInt (8);  	var memberType = t.GenericTypeArguments [0];  	for (var i = 0; i < size; ++i)  		ret.Add (ReadLookup [memberType.Name] (b' memberType));  	return ret;  });  
Magic Number,TNL.NET.Structs,ReflectedReader,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ReflectedReader.cs,ReflectedReader,The following statement contains a magic number: ReadLookup.Add ("ByteBuffer"' (b' t) =>  {  	var size = b.ReadInt (10);  	var ret = new ByteBuffer (size);  	b.Read (size' ret.GetBuffer ());  	return ret;  });  
Magic Number,TNL.NET.Structs,ReflectedReader,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ReflectedReader.cs,ReflectedReader,The following statement contains a magic number: WriteLookup.Add ("List"' (b' o) =>  {  	var list = (IList)o;  	var memberType = o.GetType ().GenericTypeArguments [0].Name;  	b.WriteInt ((UInt32)list.Count' 8);  	foreach (var t in list)  		WriteLookup [memberType] (b' t);  });  
Magic Number,TNL.NET.Structs,ReflectedReader,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ReflectedReader.cs,ReflectedReader,The following statement contains a magic number: b.WriteInt ((UInt32)list.Count' 8);  
Magic Number,TNL.NET.Structs,ReflectedReader,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ReflectedReader.cs,ReflectedReader,The following statement contains a magic number: WriteLookup.Add ("ByteBuffer"' (b' o) =>  {  	var bb = (ByteBuffer)o;  	b.WriteInt (bb.GetBufferSize ()' 10);  	b.Write (bb.GetBufferSize ()' bb.GetBuffer ());  });  
Magic Number,TNL.NET.Structs,ReflectedReader,C:\repos\Blumster_TNL.NET\TNL.NET\Structs\ReflectedReader.cs,ReflectedReader,The following statement contains a magic number: b.WriteInt (bb.GetBufferSize ()' 10);  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,ResizeBits,The following statement contains a magic number: MaxReadBitNum = newSize << 3;  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,ResizeBits,The following statement contains a magic number: MaxWriteBitNum = newSize << 3;  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,SetMaxSizes,The following statement contains a magic number: MaxReadBitNum = maxReadSize << 3;  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,SetMaxSizes,The following statement contains a magic number: MaxWriteBitNum = maxWriteSize << 3;  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,GetBytePosition,The following statement contains a magic number: return (BitNum + 7) >> 3;  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,GetBytePosition,The following statement contains a magic number: return (BitNum + 7) >> 3;  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,SetBytePosition,The following statement contains a magic number: BitNum = newPosition << 3;  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,ZeroToByteBoundary,The following statement contains a magic number: if ((BitNum & 0x7) != 0)  	WriteInt (0' (Byte)(8 - (BitNum & 0x7)));  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,ZeroToByteBoundary,The following statement contains a magic number: WriteInt (0' (Byte)(8 - (BitNum & 0x7)));  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,ReadInt,The following statement contains a magic number: if (bitCount == 32)  	return ret;  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WritePointCompressed,The following statement contains a magic number: if (CompressRelative) {  	vec.X = p.X - CompressPoint.X;  	vec.Y = p.Y - CompressPoint.Y;  	vec.Z = p.Z - CompressPoint.Z;  	var dist = (Single)Math.Sqrt (vec.X * vec.X + vec.Y * vec.Y + vec.Z * vec.Z) * invScale;  	if (dist < (1 << 15))  		type = 0U;  	else if (dist < (1 << 17))  		type = 1U;  	else if (dist < (1 << 19))  		type = 2U;  	else  		type = 3U;  }  else  	type = 3U;  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WritePointCompressed,The following statement contains a magic number: if (CompressRelative) {  	vec.X = p.X - CompressPoint.X;  	vec.Y = p.Y - CompressPoint.Y;  	vec.Z = p.Z - CompressPoint.Z;  	var dist = (Single)Math.Sqrt (vec.X * vec.X + vec.Y * vec.Y + vec.Z * vec.Z) * invScale;  	if (dist < (1 << 15))  		type = 0U;  	else if (dist < (1 << 17))  		type = 1U;  	else if (dist < (1 << 19))  		type = 2U;  	else  		type = 3U;  }  else  	type = 3U;  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WritePointCompressed,The following statement contains a magic number: if (CompressRelative) {  	vec.X = p.X - CompressPoint.X;  	vec.Y = p.Y - CompressPoint.Y;  	vec.Z = p.Z - CompressPoint.Z;  	var dist = (Single)Math.Sqrt (vec.X * vec.X + vec.Y * vec.Y + vec.Z * vec.Z) * invScale;  	if (dist < (1 << 15))  		type = 0U;  	else if (dist < (1 << 17))  		type = 1U;  	else if (dist < (1 << 19))  		type = 2U;  	else  		type = 3U;  }  else  	type = 3U;  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WritePointCompressed,The following statement contains a magic number: if (dist < (1 << 15))  	type = 0U;  else if (dist < (1 << 17))  	type = 1U;  else if (dist < (1 << 19))  	type = 2U;  else  	type = 3U;  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WritePointCompressed,The following statement contains a magic number: if (dist < (1 << 15))  	type = 0U;  else if (dist < (1 << 17))  	type = 1U;  else if (dist < (1 << 19))  	type = 2U;  else  	type = 3U;  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WritePointCompressed,The following statement contains a magic number: if (dist < (1 << 15))  	type = 0U;  else if (dist < (1 << 17))  	type = 1U;  else if (dist < (1 << 19))  	type = 2U;  else  	type = 3U;  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WritePointCompressed,The following statement contains a magic number: if (dist < (1 << 17))  	type = 1U;  else if (dist < (1 << 19))  	type = 2U;  else  	type = 3U;  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WritePointCompressed,The following statement contains a magic number: if (dist < (1 << 17))  	type = 1U;  else if (dist < (1 << 19))  	type = 2U;  else  	type = 3U;  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WritePointCompressed,The following statement contains a magic number: if (dist < (1 << 19))  	type = 2U;  else  	type = 3U;  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WritePointCompressed,The following statement contains a magic number: WriteInt (type' 2);  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,ReadPointCompressed,The following statement contains a magic number: if (type == 3) {  	Single x' y' z;  	Read (out x);  	Read (out y);  	Read (out z);  	p.X = x;  	p.Y = y;  	p.Z = z;  }  else {  	var size = BitCounts [type];  	p.X = ReadSignedInt (size);  	p.Y = ReadSignedInt (size);  	p.Z = ReadSignedInt (size);  	p.X = CompressPoint.X + p.X * scale;  	p.Y = CompressPoint.Y + p.Y * scale;  	p.Z = CompressPoint.Z + p.Z * scale;  }  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteBits,The following statement contains a magic number: if (upShift == 0) {  	BitNum += bitCount;  	for (; bitCount >= 8; bitCount -= 8)  		destPtr [destOff++] = sourcePtr [sourceOff++];  	if (bitCount > 0) {  		var mask = (1 << (Int32)bitCount) - 1;  		destPtr [destOff] = (Byte)((sourcePtr [sourceOff] & mask) | (destPtr [destOff] & ~mask));  	}  	return true;  }  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteBits,The following statement contains a magic number: if (upShift == 0) {  	BitNum += bitCount;  	for (; bitCount >= 8; bitCount -= 8)  		destPtr [destOff++] = sourcePtr [sourceOff++];  	if (bitCount > 0) {  		var mask = (1 << (Int32)bitCount) - 1;  		destPtr [destOff] = (Byte)((sourcePtr [sourceOff] & mask) | (destPtr [destOff] & ~mask));  	}  	return true;  }  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteBits,The following statement contains a magic number: for (; bitCount >= 8; bitCount -= 8)  	destPtr [destOff++] = sourcePtr [sourceOff++];  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteBits,The following statement contains a magic number: for (; bitCount >= 8; bitCount -= 8)  	destPtr [destOff++] = sourcePtr [sourceOff++];  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteBits,The following statement contains a magic number: bitCount -= 8
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteBits,The following statement contains a magic number: for (; bitCount >= 8; bitCount -= 8) {  	sourceByte = sourcePtr [sourceOff++];  	destPtr [destOff++] = (Byte)(destByte | (sourceByte << (Int32)upShift));  	destByte = (Byte)(sourceByte >> (Int32)downShift);  }  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteBits,The following statement contains a magic number: for (; bitCount >= 8; bitCount -= 8) {  	sourceByte = sourcePtr [sourceOff++];  	destPtr [destOff++] = (Byte)(destByte | (sourceByte << (Int32)upShift));  	destByte = (Byte)(sourceByte >> (Int32)downShift);  }  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteBits,The following statement contains a magic number: bitCount -= 8
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,ReadBits,The following statement contains a magic number: for (; bitCount >= 8; bitCount -= 8) {  	var nextByte = sourcePtr [++sourceOff];  	destPtr [destOff++] = (Byte)(sourceByte | (nextByte << (Int32)upShift));  	sourceByte = (Byte)(nextByte >> (Int32)downShift);  }  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,ReadBits,The following statement contains a magic number: for (; bitCount >= 8; bitCount -= 8) {  	var nextByte = sourcePtr [++sourceOff];  	destPtr [destOff++] = (Byte)(sourceByte | (nextByte << (Int32)upShift));  	sourceByte = (Byte)(nextByte >> (Int32)downShift);  }  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,ReadBits,The following statement contains a magic number: bitCount -= 8
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,Write,The following statement contains a magic number: if (size > 1023)  	return false;  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,Write,The following statement contains a magic number: WriteInt (size' 10);  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteFlag,The following statement contains a magic number: if (flag)  	Data [BitNum >> 3] |= (Byte)(1 << (Int32)(BitNum & 0x7));  else  	Data [BitNum >> 3] &= (Byte)~(1 << (Int32)(BitNum & 0x7));  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteFlag,The following statement contains a magic number: if (flag)  	Data [BitNum >> 3] |= (Byte)(1 << (Int32)(BitNum & 0x7));  else  	Data [BitNum >> 3] &= (Byte)~(1 << (Int32)(BitNum & 0x7));  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteFlag,The following statement contains a magic number: Data [BitNum >> 3] |= (Byte)(1 << (Int32)(BitNum & 0x7));  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteFlag,The following statement contains a magic number: Data [BitNum >> 3] &= (Byte)~(1 << (Int32)(BitNum & 0x7));  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteString,The following statement contains a magic number: if (WriteFlag (j > 2)) {  	WriteInt (j' 8);  	WriteHuffBuffer (j' (Byte)(maxLen - j));  }  else  	WriteHuffBuffer (0' maxLen);  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteString,The following statement contains a magic number: if (WriteFlag (j > 2)) {  	WriteInt (j' 8);  	WriteHuffBuffer (j' (Byte)(maxLen - j));  }  else  	WriteHuffBuffer (0' maxLen);  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteString,The following statement contains a magic number: WriteInt (j' 8);  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,ReadString,The following statement contains a magic number: ReadHuffBuffer (out stringBuf' (Byte)(ReadFlag () ? ReadInt (8) : 0));  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,ReadHuffBuffer,The following statement contains a magic number: if (ReadFlag ()) {  	len = ReadInt (8);  	for (var i = 0; i < len; ++i) {  		var current = HuffmanTree.Root;  		while (true) {  			if (!HuffmanTree.IsLeaf (current)) {  				current = ReadFlag () ? current.Right : current.Left;  				continue;  			}  			StringBuffer [i + off] = current.Symbol;  			break;  		}  	}  }  else {  	len = ReadInt (8);  	var buff = new Byte[len];  	Read (len' buff);  	Array.Copy (buff' 0' StringBuffer' off' len);  	StringBuffer [off + len] = 0;  }  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,ReadHuffBuffer,The following statement contains a magic number: if (ReadFlag ()) {  	len = ReadInt (8);  	for (var i = 0; i < len; ++i) {  		var current = HuffmanTree.Root;  		while (true) {  			if (!HuffmanTree.IsLeaf (current)) {  				current = ReadFlag () ? current.Right : current.Left;  				continue;  			}  			StringBuffer [i + off] = current.Symbol;  			break;  		}  	}  }  else {  	len = ReadInt (8);  	var buff = new Byte[len];  	Read (len' buff);  	Array.Copy (buff' 0' StringBuffer' off' len);  	StringBuffer [off + len] = 0;  }  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,ReadHuffBuffer,The following statement contains a magic number: len = ReadInt (8);  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,ReadHuffBuffer,The following statement contains a magic number: len = ReadInt (8);  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteHuffBuffer,The following statement contains a magic number: if (StringBuffer [off] == 0) {  	WriteFlag (false);  	WriteInt (0' 8);  	return;  }  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteHuffBuffer,The following statement contains a magic number: WriteInt (0' 8);  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,WriteHuffBuffer,The following statement contains a magic number: WriteInt (len' 8);  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,Write,The following statement contains a magic number: return WriteBits (numBytes << 3' buffer);  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,Read,The following statement contains a magic number: return ReadBits (numBytes << 3' buffer);  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,Write,The following statement contains a magic number: for (var i = 0; i < 1; ++i) {  	CurrentByte [0] = (Byte)((temp >> (i * 8)) & 0xFF);  	if (i != 1 - 1)  		WriteBits (8' CurrentByte);  }  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,Write,The following statement contains a magic number: for (var i = 0; i < 1; ++i) {  	CurrentByte [0] = (Byte)((temp >> (i * 8)) & 0xFF);  	if (i != 1 - 1)  		WriteBits (8' CurrentByte);  }  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,Write,The following statement contains a magic number: CurrentByte [0] = (Byte)((temp >> (i * 8)) & 0xFF);  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,Write,The following statement contains a magic number: if (i != 1 - 1)  	WriteBits (8' CurrentByte);  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,Write,The following statement contains a magic number: WriteBits (8' CurrentByte);  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,Write,The following statement contains a magic number: return WriteBits (8' CurrentByte);  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,Write,The following statement contains a magic number: return Write (2' BitConverter.GetBytes (value));  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,Write,The following statement contains a magic number: return Write (2' BitConverter.GetBytes (value));  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,Write,The following statement contains a magic number: return Write (4' BitConverter.GetBytes (value));  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,Write,The following statement contains a magic number: return Write (4' BitConverter.GetBytes (value));  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,Write,The following statement contains a magic number: return Write (8' BitConverter.GetBytes (value));  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,Write,The following statement contains a magic number: return Write (8' BitConverter.GetBytes (value));  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,Write,The following statement contains a magic number: return Write (4' BitConverter.GetBytes (value));  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,Write,The following statement contains a magic number: return Write (8' BitConverter.GetBytes (value));  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,SetBit,The following statement contains a magic number: if (set)  	GetBuffer () [bitCount >> 3] |= (Byte)(1 << ((Int32)bitCount & 0x7));  else  	GetBuffer () [bitCount >> 3] &= (Byte)~(1 << ((Int32)bitCount & 0x7));  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,SetBit,The following statement contains a magic number: if (set)  	GetBuffer () [bitCount >> 3] |= (Byte)(1 << ((Int32)bitCount & 0x7));  else  	GetBuffer () [bitCount >> 3] &= (Byte)~(1 << ((Int32)bitCount & 0x7));  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,SetBit,The following statement contains a magic number: GetBuffer () [bitCount >> 3] |= (Byte)(1 << ((Int32)bitCount & 0x7));  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,SetBit,The following statement contains a magic number: GetBuffer () [bitCount >> 3] &= (Byte)~(1 << ((Int32)bitCount & 0x7));  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,TestBit,The following statement contains a magic number: return (GetBuffer () [bitCount >> 3] & (1 << ((Int32)bitCount & 0x7))) != 0;  
Magic Number,TNL.NET.Utils,BitStream,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\BitStream.cs,IsFull,The following statement contains a magic number: return BitNum > (GetBufferSize () << 3);  
Magic Number,TNL.NET.Utils,Utils,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\Utils.cs,GetBinLog2,The following statement contains a magic number: unsafe {  	return (*((UInt32*)&floatValue) >> 23) - 127;  }  
Magic Number,TNL.NET.Utils,Utils,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\Utils.cs,GetBinLog2,The following statement contains a magic number: unsafe {  	return (*((UInt32*)&floatValue) >> 23) - 127;  }  
Magic Number,TNL.NET.Utils,Utils,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\Utils.cs,GetBinLog2,The following statement contains a magic number: return (*((UInt32*)&floatValue) >> 23) - 127;  
Magic Number,TNL.NET.Utils,Utils,C:\repos\Blumster_TNL.NET\TNL.NET\Utils\Utils.cs,GetBinLog2,The following statement contains a magic number: return (*((UInt32*)&floatValue) >> 23) - 127;  
Missing Default,TNL.NET.Entities,EventConnection,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\EventConnection.cs,PacketDropped,The following switch statement is missing a default case: switch (walk.Event.GuaranteeType) {  case GuaranteeType.GuaranteedOrdered:  	while (insertList != null && insertList.SeqCount < walk.SeqCount) {  		insertListPrev = insertList;  		insertList = insertList.NextEvent;  	}  	walk.NextEvent = insertList;  	if (walk.NextEvent == null)  		_sendEventQueueTail = walk;  	if (insertListPrev == null)  		_sendEventQueueHead = walk;  	else  		insertListPrev.NextEvent = walk;  	insertListPrev = walk;  	insertList = walk.NextEvent;  	break;  case GuaranteeType.Guaranteed:  	walk.NextEvent = _unorderedSendEventQueueHead;  	_unorderedSendEventQueueHead = walk;  	if (walk.NextEvent == null)  		_unorderedSendEventQueueTail = walk;  	break;  case GuaranteeType.Unguaranteed:  	walk.Event.NotifyDelivered (this' false);  	break;  }  
Missing Default,TNL.NET.Entities,NetInterface,C:\repos\Blumster_TNL.NET\TNL.NET\Entities\NetInterface.cs,ProcessPacket,The following switch statement is missing a default case: switch ((PacketType)packetType) {  case PacketType.ConnectChallengeRequest:  	HandleConnectChallengeRequest (sourceAddress' stream);  	break;  case PacketType.ConnectChallengeResponse:  	HandleConnectChallengeResponse (sourceAddress' stream);  	break;  case PacketType.ConnectRequest:  	HandleConnectRequest (sourceAddress' stream);  	break;  case PacketType.ConnectReject:  	HandleConnectReject (sourceAddress' stream);  	break;  case PacketType.ConnectAccept:  	HandleConnectAccept (sourceAddress' stream);  	break;  case PacketType.Disconnect:  	HandleDisconnect (sourceAddress' stream);  	break;  case PacketType.Punch:  	HandlePunch (sourceAddress' stream);  	break;  case PacketType.ArrangedConnectRequest:  	HandleArrangedConnectRequest (sourceAddress' stream);  	break;  }  
