Implementation smell,Namespace,Class,File,Method,Description
Long Method,CodeBucket.Core.ViewModels.App,MenuViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\App\MenuViewModel.cs,MenuViewModel,The method has 111 lines of code.
Long Method,CodeBucket.Core.ViewModels.Commits,CommitViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Commits\CommitViewModel.cs,CommitViewModel,The method has 118 lines of code.
Long Method,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,CreateEventEventTextBlocks,The method has 299 lines of code.
Long Method,CodeBucket.Core.ViewModels.PullRequests,PullRequestViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\PullRequests\PullRequestViewModel.cs,PullRequestViewModel,The method has 102 lines of code.
Complex Method,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,CreateEventEventTextBlocks,Cyclomatic complexity of the method is 75
Complex Method,CodeBucket.Core.ViewModels.Issues,IssueListViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Issues\IssueListViewModel.cs,DoesIssueBelong,Cyclomatic complexity of the method is 18
Long Parameter List,CodeBucket.Core.ViewModels.Commits,CommitFileItemViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Commits\CommitFileItemViewModel.cs,CommitFileItemViewModel,The method has 5 parameters. Parameters: username' repository' parentNode' parentCommit' file
Long Parameter List,CodeBucket.Core.ViewModels.Commits,CommitItemViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Commits\CommitItemViewModel.cs,CommitItemViewModel,The method has 5 parameters. Parameters: name' description' date' avatar' sha
Long Parameter List,CodeBucket.Core.ViewModels.Commits,CommitViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Commits\CommitViewModel.cs,CommitViewModel,The method has 7 parameters. Parameters: username' repository' commit' showRepository' applicationService' actionMenuService' alertDialogService
Long Parameter List,CodeBucket.Core.ViewModels.Commits,CommitViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Commits\CommitViewModel.cs,CommitViewModel,The method has 7 parameters. Parameters: username' repository' node' showRepository' applicationService' actionMenuService' alertDialogService
Long Parameter List,CodeBucket.Core.ViewModels.Issues,IssueEditViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Issues\IssueEditViewModel.cs,IssueEditViewModel,The method has 5 parameters. Parameters: username' repository' issue' applicationService' messageService
Long Parameter List,CodeBucket.Core.ViewModels.Issues,IssueEditViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Issues\IssueEditViewModel.cs,IssueEditViewModel,The method has 5 parameters. Parameters: username' repository' id' applicationService' messageService
Long Parameter List,CodeBucket.Core.ViewModels.Issues,IssueViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Issues\IssueViewModel.cs,IssueViewModel,The method has 6 parameters. Parameters: username' repository' issue' applicationService' markdownService' messageService
Long Parameter List,CodeBucket.Core.ViewModels.Issues,IssueViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Issues\IssueViewModel.cs,IssueViewModel,The method has 8 parameters. Parameters: username' repository' issueId' applicationService' markdownService' messageService' alertDialogService' actionMenuService
Long Parameter List,CodeBucket.Core.ViewModels.Issues,IssueListViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Issues\IssueListViewModel.cs,IssueListViewModel,The method has 5 parameters. Parameters: username' repository' filter' applicationService' messageService
Long Parameter List,CodeBucket.Core.ViewModels.PullRequests,PullRequestViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\PullRequests\PullRequestViewModel.cs,PullRequestViewModel,The method has 6 parameters. Parameters: username' repository' pullRequest' markdownService' applicationService' actionMenuService
Long Parameter List,CodeBucket.Core.ViewModels.PullRequests,PullRequestViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\PullRequests\PullRequestViewModel.cs,PullRequestViewModel,The method has 6 parameters. Parameters: username' repository' pullRequestId' markdownService' applicationService' actionMenuService
Long Parameter List,CodeBucket.Core.ViewModels.Repositories,ReadmeViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Repositories\ReadmeViewModel.cs,ReadmeViewModel,The method has 6 parameters. Parameters: username' repository' filename' applicationService' markdownService' actionMenuService
Long Parameter List,CodeBucket.Core.ViewModels.Repositories,RepositoryViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Repositories\RepositoryViewModel.cs,RepositoryViewModel,The method has 5 parameters. Parameters: username' repositoryName' repository' applicationService' actionMenuService
Long Parameter List,CodeBucket.Core.ViewModels.Source,ChangesetDiffViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Source\ChangesetDiffViewModel.cs,ChangesetDiffViewModel,The method has 6 parameters. Parameters: username' repository' node' filename' applicationService' diffService
Long Parameter List,CodeBucket.Core.ViewModels.Source,SourceTreeViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Source\SourceTreeViewModel.cs,SourceTreeViewModel,The method has 5 parameters. Parameters: username' repository' branch' path' applicationService
Long Parameter List,CodeBucket.Core.ViewModels.Source,SourceViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Source\SourceViewModel.cs,SourceViewModel,The method has 6 parameters. Parameters: username' repository' branch' path' applicationService' actionMenuService
Long Parameter List,CodeBucket.Core.ViewModels.Wiki,WikiViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Wiki\WikiViewModel.cs,WikiViewModel,The method has 6 parameters. Parameters: username' repository' page' markdownService' applicationService' actionMenuService
Long Statement,CodeBucket.Core.Filters,IssuesFilterModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\Filters\IssuesFilterModel.cs,Equals,The length of the statement  "                   object.Equals(Milestone' other.Milestone) && object.Equals(Version' other.Version) && object.Equals(Component' other.Component); " is 128.
Long Statement,CodeBucket.Core.Filters,IssuesFilterModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\Filters\IssuesFilterModel.cs,GetHashCode,The length of the statement  "                return (AssignedTo != null ? AssignedTo.GetHashCode() : 0) ^ (ReportedBy != null ? ReportedBy.GetHashCode() : 0) ^ (Status != null ? Status.GetHashCode() : 0) ^ (Kind != null ? Kind.GetHashCode() : 0) ^ (Priority != null ? Priority.GetHashCode() : 0) ^ OrderBy.GetHashCode(); " is 275.
Long Statement,CodeBucket.Core.Filters,StatusModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\Filters\IssuesFilterModel.cs,Equals,The length of the statement  "                return New == other.New && Open == other.Open && Resolved == other.Resolved && OnHold == other.OnHold && Invalid == other.Invalid && Duplicate == other.Duplicate && Wontfix == other.Wontfix; " is 190.
Long Statement,CodeBucket.Core.Filters,StatusModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\Filters\IssuesFilterModel.cs,GetHashCode,The length of the statement  "                    return New.GetHashCode() ^ Open.GetHashCode() ^ Resolved.GetHashCode() ^ OnHold.GetHashCode() ^ Invalid.GetHashCode() ^ Duplicate.GetHashCode() ^ Wontfix.GetHashCode(); " is 168.
Long Statement,CodeBucket.Core.Filters,PriorityModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\Filters\IssuesFilterModel.cs,Equals,The length of the statement  "                return Trivial == other.Trivial && Minor == other.Minor && Major == other.Major && Critical == other.Critical && Blocker == other.Blocker; " is 138.
Long Statement,CodeBucket.Core.Filters,PriorityModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\Filters\IssuesFilterModel.cs,GetHashCode,The length of the statement  "                    return Trivial.GetHashCode() ^ Minor.GetHashCode() ^ Major.GetHashCode() ^ Critical.GetHashCode() ^ Blocker.GetHashCode(); " is 122.
Long Statement,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,CreateEventEventTextBlocks,The length of the statement  "			else if (eventModel.Event == EventItem.Type.ChangeSetCommentCreated || eventModel.Event == EventItem.Type.ChangeSetCommentDeleted || " is 132.
Long Statement,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,CreateEventEventTextBlocks,The length of the statement  "			         eventModel.Event == EventItem.Type.ChangeSetCommentUpdated || eventModel.Event == EventItem.Type.ChangeSetLike || eventModel.Event == EventItem.Type.ChangeSetUnlike) " is 165.
Long Statement,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,CreateEventEventTextBlocks,The length of the statement  "			else if (eventModel.Event == EventItem.Type.PullRequestCreated || eventModel.Event == EventItem.Type.PullRequestRejected || eventModel.Event == EventItem.Type.PullRequestSuperseded || " is 183.
Long Statement,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,CreateEventEventTextBlocks,The length of the statement  "			         eventModel.Event == EventItem.Type.PullRequestUpdated || eventModel.Event == EventItem.Type.PullRequestFulfilled || eventModel.Event == EventItem.Type.PullRequestLike || eventModel.Event == EventItem.Type.PullRequestUnlike) " is 223.
Long Statement,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,CreateEventEventTextBlocks,The length of the statement  "			else if (eventModel.Event == EventItem.Type.PullRequestCommentCreated || eventModel.Event == EventItem.Type.PullRequestCommentUpdated || eventModel.Event == EventItem.Type.PullRequestCommentDeleted) " is 198.
Long Statement,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,CreateEventEventTextBlocks,The length of the statement  "                eventBlock.Header.Add(new EventAnchorBlock(description.TrimStart('/')' () => GoToRepositoryWiki(eventModel.Repository' description))); " is 134.
Long Statement,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,CreateEventEventTextBlocks,The length of the statement  "                eventBlock.Header.Add(new EventAnchorBlock(description.TrimStart('/')' () => GoToRepositoryWiki(eventModel.Repository' description))); " is 134.
Long Statement,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,CreateEventEventTextBlocks,The length of the statement  "                eventBlock.Header.Add(new EventAnchorBlock(description.TrimStart('/')' () => GoToRepositoryWiki(eventModel.Repository' description))); " is 134.
Long Statement,CodeBucket.Core.ViewModels.Issues,IssueAssigneeViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Issues\IssueAssigneeViewModel.cs,CreateItemViewModel,The length of the statement  "            var vm = new IssueAssigneeItemViewModel(item.Username' item.Links?.Avatar?.Href' string.Equals(SelectedValue' item.Username)); " is 126.
Complex Conditional,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,CreateEventEventTextBlocks,The conditional expression  "eventModel.Event == EventItem.Type.ChangeSetCommentCreated || eventModel.Event == EventItem.Type.ChangeSetCommentDeleted ||  			         eventModel.Event == EventItem.Type.ChangeSetCommentUpdated || eventModel.Event == EventItem.Type.ChangeSetLike || eventModel.Event == EventItem.Type.ChangeSetUnlike"  is complex.
Complex Conditional,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,CreateEventEventTextBlocks,The conditional expression  "eventModel.Event == EventItem.Type.PullRequestCreated || eventModel.Event == EventItem.Type.PullRequestRejected || eventModel.Event == EventItem.Type.PullRequestSuperseded ||  			         eventModel.Event == EventItem.Type.PullRequestUpdated || eventModel.Event == EventItem.Type.PullRequestFulfilled || eventModel.Event == EventItem.Type.PullRequestLike || eventModel.Event == EventItem.Type.PullRequestUnlike"  is complex.
Virtual Method Call from Constructor,CodeBucket.Core.ViewModels.Commits,BaseCommitsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Commits\BaseCommitsViewModel.cs,BaseCommitsViewModel,The constructor "BaseCommitsViewModel" calls a virtual method "GetRequest".
Virtual Method Call from Constructor,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,BaseEventsViewModel,The constructor "BaseEventsViewModel" calls a virtual method "GetEvents".
Virtual Method Call from Constructor,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,BaseEventsViewModel,The constructor "BaseEventsViewModel" calls a virtual method "GetEvents".
Virtual Method Call from Constructor,CodeBucket.Core.ViewModels.Issues,IssueModifyViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Issues\IssueModifyViewModel.cs,IssueModifyViewModel,The constructor "IssueModifyViewModel" calls a virtual method "Save".
Virtual Method Call from Constructor,CodeBucket.Core.ViewModels.Users,UsersViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Users\UsersViewModel.cs,UsersViewModel,The constructor "UsersViewModel" calls a virtual method "Load".
Empty Catch Block,CodeBucket.Core.Services,ApplicationService,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\Services\ApplicationService.cs,RefreshToken,The method has an empty catch block.
Magic Number,CodeBucket.Core.Services,ApplicationService,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\Services\ApplicationService.cs,ApplicationService,The following statement contains a magic number: _timer = new Timer(1000 * 60 * 45);
Magic Number,CodeBucket.Core.Services,ApplicationService,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\Services\ApplicationService.cs,ApplicationService,The following statement contains a magic number: _timer = new Timer(1000 * 60 * 45);
Magic Number,CodeBucket.Core.Services,ApplicationService,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\Services\ApplicationService.cs,ApplicationService,The following statement contains a magic number: _timer = new Timer(1000 * 60 * 45);
Magic Number,CodeBucket.Core.Utils,RepositoryIdentifier,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\Utils\RepositoryIdentifier.cs,FromFullName,The following statement contains a magic number: var split = id.Split(new[] { '/' }' 2);
Magic Number,CodeBucket.Core.Utils,RepositoryIdentifier,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\Utils\RepositoryIdentifier.cs,FromFullName,The following statement contains a magic number: split.Length != 2
Magic Number,CodeBucket.Core.ViewModels.Commits,CommitViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Commits\CommitViewModel.cs,CommitViewModel,The following statement contains a magic number: var shortNode = node.Substring(0' node.Length > 7 ? 7 : node.Length);
Magic Number,CodeBucket.Core.ViewModels.Commits,CommitViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Commits\CommitViewModel.cs,CommitViewModel,The following statement contains a magic number: var shortNode = node.Substring(0' node.Length > 7 ? 7 : node.Length);
Magic Number,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,BaseEventsViewModel,The following statement contains a magic number: var eventItems = new ReactiveList<EventItemViewModel>(resetChangeThreshold: 10);
Magic Number,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,BaseEventsViewModel,The following statement contains a magic number: LoadCommand = ReactiveCommand.CreateFromTask(async _ =>              {                  HasMore = false;                  nextPage = 0;                  eventItems.Clear();                  var events = await GetEvents(nextPage' 40);                  nextPage += events.Events.Count;                  eventItems.AddRange(events.Events.Select(TryCatchEventBlockCreation).Where(x => x != null));                  HasMore = nextPage < events.Count;              });
Magic Number,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,BaseEventsViewModel,The following statement contains a magic number: LoadMoreCommand = ReactiveCommand.CreateFromTask(async _ =>              {                  HasMore = false;                  var events = await GetEvents(nextPage' 40);                  nextPage += events.Events.Count;                  eventItems.AddRange(events.Events.Select(TryCatchEventBlockCreation).Where(x => x != null));                  HasMore = nextPage < events.Count;              }' hasMoreObs);
Magic Number,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,CreateEventEventTextBlocks,The following statement contains a magic number: shortSha = shortSha.Substring(0' 6);
Magic Number,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,CreateEventEventTextBlocks,The following statement contains a magic number: shortSha.Length > 6
Magic Number,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,CreateEventEventTextBlocks,The following statement contains a magic number: var node = eventModel.Node.Substring(0' eventModel.Node.Length > 6 ? 6 : eventModel.Node.Length);
Magic Number,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,CreateEventEventTextBlocks,The following statement contains a magic number: var node = eventModel.Node.Substring(0' eventModel.Node.Length > 6 ? 6 : eventModel.Node.Length);
Magic Number,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,CommitBlock,The following statement contains a magic number: node = node.Substring(0' node.Length > 6 ? 6 : node.Length);
Magic Number,CodeBucket.Core.ViewModels.Events,BaseEventsViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Events\BaseEventsViewModel.cs,CommitBlock,The following statement contains a magic number: node = node.Substring(0' node.Length > 6 ? 6 : node.Length);
Magic Number,CodeBucket.Core.ViewModels.Issues,IssuesViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Issues\IssuesViewModel.cs,IssuesViewModel,The following statement contains a magic number: this.WhenAnyValue(x => x.SelectedFilter)                  .Subscribe(x =>                  {                      if (x == 0)                          Filter = IssuesFilterModel.CreateOpenFilter();                      else if (x == 1)                          Filter = IssuesFilterModel.CreateMineFilter(currentUser);                      else if (x == 2)                          Filter = IssuesFilterModel.CreateAllFilter();                  });
Magic Number,CodeBucket.Core.ViewModels.Issues,IssueListViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Issues\IssueListViewModel.cs,IssueListViewModel,The following statement contains a magic number: var issues = new ReactiveList<Issue>(resetChangeThreshold: 10);
Magic Number,CodeBucket.Core.ViewModels.PullRequests,PullRequestListViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\PullRequests\PullRequestListViewModel.cs,PullRequestListViewModel,The following statement contains a magic number: var pullRequests = new ReactiveList<PullRequest>(resetChangeThreshold: 10);
Magic Number,CodeBucket.Core.ViewModels.Repositories,RepositoriesExploreViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Repositories\RepositoriesExploreViewModel.cs,RepositoriesExploreViewModel,The following statement contains a magic number: SearchCommand = ReactiveCommand.CreateFromTask(async _ =>              {                  repositories.Clear();                    if (string.IsNullOrEmpty(SearchText))                      return;                    var client = new HttpClient(new LoadingMessageHandler(loadingIndicatorService));                  client.Timeout = TimeSpan.FromSeconds(10);                  client.DefaultRequestHeaders.Add("Accept"' "application/json");                  var resp = await client.GetAsync("https://bitbucket.org/xhr/repos?term=" + Uri.EscapeDataString(SearchText));                  var body = await resp.Content.ReadAsStringAsync().ConfigureAwait(false);                  var repos = JsonConvert.DeserializeObject<List<RepositorySearch>>(body);                    repositories.Reset(repos.Select(x =>                  {                      return new Client.V1.Repository                      {                          Name = x.Slug'                          Description = x.Name'                          Owner = x.Owner'                          Logo = x.Avatar'                          Website = x.Href'                          Slug = x.Slug                      };                  }));              }' canSearch);
Magic Number,CodeBucket.Core.ViewModels.Repositories,RepositoriesViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Repositories\RepositoriesViewModel.cs,RepositoriesViewModel,The following statement contains a magic number: var repositories = new ReactiveList<Repository>(resetChangeThreshold: 10);
Magic Number,CodeBucket.Core.ViewModels.Source,ChangesetDiffViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Source\ChangesetDiffViewModel.cs,ChangesetDiffViewModel,The following statement contains a magic number: LoadCommand = ReactiveCommand.CreateFromTask(async t =>              {                  Patch = null;                  BinaryFilePath = null;                    var currentFilePath = Path.Combine(Path.GetTempPath()' actualFilename);                  var hasCurrent = _commitFileModel.Type != "removed";                  var hasPast = _commitFileModel.Type != "added";                  var isBinary = false;                    if (hasCurrent)                  {                      using (var stream = new FileStream(currentFilePath' FileMode.Create' FileAccess.Write))                      {                          await applicationService.Client.Repositories.GetRawFile(username' repository' node' filename' stream);                      }                        using (var stream = new FileStream(currentFilePath' FileMode.Open' FileAccess.Read))                      {                          var buffer = new byte[1024];                          var read = stream.Read(buffer' 0' 1024);                          isBinary = buffer.Take(read).Any(x => x == 0);                      }                  }                    if (isBinary)                  {                      BinaryFilePath = currentFilePath;                      return;                  }                    var parentFilePath = actualFilename + ".parent";                  var pastFilePath = Path.Combine(Path.GetTempPath()' parentFilePath);                    if (hasPast)                  {                      var changeset = await applicationService.Client.Commits.GetChangeset(username' repository' node);                      var parent = changeset.Parents?.FirstOrDefault();                      if (parent == null)                        throw new Exception("Diff has no parent. Unable to generate view.");                                              using (var stream = new FileStream(pastFilePath' FileMode.Create' FileAccess.Write))                      {                          await applicationService.Client.Repositories.GetRawFile(username' repository' parent' filename' stream);                      }                        using (var stream = new FileStream(pastFilePath' FileMode.Open' FileAccess.Read))                      {                          var buffer = new byte[1024];                          var read = stream.Read(buffer' 0' 1024);                          isBinary = buffer.Take(read).Any(x => x == 0);                      }                  }                    if (isBinary)                  {                      BinaryFilePath = currentFilePath;                      return;                  }                    string newText = null' oldText = null;                    if (hasCurrent)                      newText = await Task.Run(() => File.ReadAllText(currentFilePath));                    if (hasPast)                      oldText = await Task.Run(() => File.ReadAllText(pastFilePath));                    Patch = diffService.CreateDiff(oldText' newText' 5).ToList();                    var items = await applicationService.Client.AllItems(x => x.Commits.GetComments(username' repository' node));                  var comments = items.Where(x => x.Inline?.Path == filename).ToList();                  var commentsMap = comments.ToDictionary(x => x.Id);                  foreach (var comment in comments.Where(x => x.Parent != null))                  {                      var parentComment = commentsMap[comment.Parent.Id];                      while (parentComment?.Parent != null)                          parentComment = commentsMap[parentComment.Parent.Id];                      comment.Inline = parentComment.Inline;                  }                    Comments = comments;              });
Magic Number,CodeBucket.Core.ViewModels.Source,ChangesetDiffViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Source\ChangesetDiffViewModel.cs,ChangesetDiffViewModel,The following statement contains a magic number: LoadCommand = ReactiveCommand.CreateFromTask(async t =>              {                  Patch = null;                  BinaryFilePath = null;                    var currentFilePath = Path.Combine(Path.GetTempPath()' actualFilename);                  var hasCurrent = _commitFileModel.Type != "removed";                  var hasPast = _commitFileModel.Type != "added";                  var isBinary = false;                    if (hasCurrent)                  {                      using (var stream = new FileStream(currentFilePath' FileMode.Create' FileAccess.Write))                      {                          await applicationService.Client.Repositories.GetRawFile(username' repository' node' filename' stream);                      }                        using (var stream = new FileStream(currentFilePath' FileMode.Open' FileAccess.Read))                      {                          var buffer = new byte[1024];                          var read = stream.Read(buffer' 0' 1024);                          isBinary = buffer.Take(read).Any(x => x == 0);                      }                  }                    if (isBinary)                  {                      BinaryFilePath = currentFilePath;                      return;                  }                    var parentFilePath = actualFilename + ".parent";                  var pastFilePath = Path.Combine(Path.GetTempPath()' parentFilePath);                    if (hasPast)                  {                      var changeset = await applicationService.Client.Commits.GetChangeset(username' repository' node);                      var parent = changeset.Parents?.FirstOrDefault();                      if (parent == null)                        throw new Exception("Diff has no parent. Unable to generate view.");                                              using (var stream = new FileStream(pastFilePath' FileMode.Create' FileAccess.Write))                      {                          await applicationService.Client.Repositories.GetRawFile(username' repository' parent' filename' stream);                      }                        using (var stream = new FileStream(pastFilePath' FileMode.Open' FileAccess.Read))                      {                          var buffer = new byte[1024];                          var read = stream.Read(buffer' 0' 1024);                          isBinary = buffer.Take(read).Any(x => x == 0);                      }                  }                    if (isBinary)                  {                      BinaryFilePath = currentFilePath;                      return;                  }                    string newText = null' oldText = null;                    if (hasCurrent)                      newText = await Task.Run(() => File.ReadAllText(currentFilePath));                    if (hasPast)                      oldText = await Task.Run(() => File.ReadAllText(pastFilePath));                    Patch = diffService.CreateDiff(oldText' newText' 5).ToList();                    var items = await applicationService.Client.AllItems(x => x.Commits.GetComments(username' repository' node));                  var comments = items.Where(x => x.Inline?.Path == filename).ToList();                  var commentsMap = comments.ToDictionary(x => x.Id);                  foreach (var comment in comments.Where(x => x.Parent != null))                  {                      var parentComment = commentsMap[comment.Parent.Id];                      while (parentComment?.Parent != null)                          parentComment = commentsMap[parentComment.Parent.Id];                      comment.Inline = parentComment.Inline;                  }                    Comments = comments;              });
Magic Number,CodeBucket.Core.ViewModels.Source,ChangesetDiffViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Source\ChangesetDiffViewModel.cs,ChangesetDiffViewModel,The following statement contains a magic number: LoadCommand = ReactiveCommand.CreateFromTask(async t =>              {                  Patch = null;                  BinaryFilePath = null;                    var currentFilePath = Path.Combine(Path.GetTempPath()' actualFilename);                  var hasCurrent = _commitFileModel.Type != "removed";                  var hasPast = _commitFileModel.Type != "added";                  var isBinary = false;                    if (hasCurrent)                  {                      using (var stream = new FileStream(currentFilePath' FileMode.Create' FileAccess.Write))                      {                          await applicationService.Client.Repositories.GetRawFile(username' repository' node' filename' stream);                      }                        using (var stream = new FileStream(currentFilePath' FileMode.Open' FileAccess.Read))                      {                          var buffer = new byte[1024];                          var read = stream.Read(buffer' 0' 1024);                          isBinary = buffer.Take(read).Any(x => x == 0);                      }                  }                    if (isBinary)                  {                      BinaryFilePath = currentFilePath;                      return;                  }                    var parentFilePath = actualFilename + ".parent";                  var pastFilePath = Path.Combine(Path.GetTempPath()' parentFilePath);                    if (hasPast)                  {                      var changeset = await applicationService.Client.Commits.GetChangeset(username' repository' node);                      var parent = changeset.Parents?.FirstOrDefault();                      if (parent == null)                        throw new Exception("Diff has no parent. Unable to generate view.");                                              using (var stream = new FileStream(pastFilePath' FileMode.Create' FileAccess.Write))                      {                          await applicationService.Client.Repositories.GetRawFile(username' repository' parent' filename' stream);                      }                        using (var stream = new FileStream(pastFilePath' FileMode.Open' FileAccess.Read))                      {                          var buffer = new byte[1024];                          var read = stream.Read(buffer' 0' 1024);                          isBinary = buffer.Take(read).Any(x => x == 0);                      }                  }                    if (isBinary)                  {                      BinaryFilePath = currentFilePath;                      return;                  }                    string newText = null' oldText = null;                    if (hasCurrent)                      newText = await Task.Run(() => File.ReadAllText(currentFilePath));                    if (hasPast)                      oldText = await Task.Run(() => File.ReadAllText(pastFilePath));                    Patch = diffService.CreateDiff(oldText' newText' 5).ToList();                    var items = await applicationService.Client.AllItems(x => x.Commits.GetComments(username' repository' node));                  var comments = items.Where(x => x.Inline?.Path == filename).ToList();                  var commentsMap = comments.ToDictionary(x => x.Id);                  foreach (var comment in comments.Where(x => x.Parent != null))                  {                      var parentComment = commentsMap[comment.Parent.Id];                      while (parentComment?.Parent != null)                          parentComment = commentsMap[parentComment.Parent.Id];                      comment.Inline = parentComment.Inline;                  }                    Comments = comments;              });
Magic Number,CodeBucket.Core.ViewModels.Source,ChangesetDiffViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Source\ChangesetDiffViewModel.cs,ChangesetDiffViewModel,The following statement contains a magic number: LoadCommand = ReactiveCommand.CreateFromTask(async t =>              {                  Patch = null;                  BinaryFilePath = null;                    var currentFilePath = Path.Combine(Path.GetTempPath()' actualFilename);                  var hasCurrent = _commitFileModel.Type != "removed";                  var hasPast = _commitFileModel.Type != "added";                  var isBinary = false;                    if (hasCurrent)                  {                      using (var stream = new FileStream(currentFilePath' FileMode.Create' FileAccess.Write))                      {                          await applicationService.Client.Repositories.GetRawFile(username' repository' node' filename' stream);                      }                        using (var stream = new FileStream(currentFilePath' FileMode.Open' FileAccess.Read))                      {                          var buffer = new byte[1024];                          var read = stream.Read(buffer' 0' 1024);                          isBinary = buffer.Take(read).Any(x => x == 0);                      }                  }                    if (isBinary)                  {                      BinaryFilePath = currentFilePath;                      return;                  }                    var parentFilePath = actualFilename + ".parent";                  var pastFilePath = Path.Combine(Path.GetTempPath()' parentFilePath);                    if (hasPast)                  {                      var changeset = await applicationService.Client.Commits.GetChangeset(username' repository' node);                      var parent = changeset.Parents?.FirstOrDefault();                      if (parent == null)                        throw new Exception("Diff has no parent. Unable to generate view.");                                              using (var stream = new FileStream(pastFilePath' FileMode.Create' FileAccess.Write))                      {                          await applicationService.Client.Repositories.GetRawFile(username' repository' parent' filename' stream);                      }                        using (var stream = new FileStream(pastFilePath' FileMode.Open' FileAccess.Read))                      {                          var buffer = new byte[1024];                          var read = stream.Read(buffer' 0' 1024);                          isBinary = buffer.Take(read).Any(x => x == 0);                      }                  }                    if (isBinary)                  {                      BinaryFilePath = currentFilePath;                      return;                  }                    string newText = null' oldText = null;                    if (hasCurrent)                      newText = await Task.Run(() => File.ReadAllText(currentFilePath));                    if (hasPast)                      oldText = await Task.Run(() => File.ReadAllText(pastFilePath));                    Patch = diffService.CreateDiff(oldText' newText' 5).ToList();                    var items = await applicationService.Client.AllItems(x => x.Commits.GetComments(username' repository' node));                  var comments = items.Where(x => x.Inline?.Path == filename).ToList();                  var commentsMap = comments.ToDictionary(x => x.Id);                  foreach (var comment in comments.Where(x => x.Parent != null))                  {                      var parentComment = commentsMap[comment.Parent.Id];                      while (parentComment?.Parent != null)                          parentComment = commentsMap[parentComment.Parent.Id];                      comment.Inline = parentComment.Inline;                  }                    Comments = comments;              });
Magic Number,CodeBucket.Core.ViewModels.Source,ChangesetDiffViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Source\ChangesetDiffViewModel.cs,ChangesetDiffViewModel,The following statement contains a magic number: LoadCommand = ReactiveCommand.CreateFromTask(async t =>              {                  Patch = null;                  BinaryFilePath = null;                    var currentFilePath = Path.Combine(Path.GetTempPath()' actualFilename);                  var hasCurrent = _commitFileModel.Type != "removed";                  var hasPast = _commitFileModel.Type != "added";                  var isBinary = false;                    if (hasCurrent)                  {                      using (var stream = new FileStream(currentFilePath' FileMode.Create' FileAccess.Write))                      {                          await applicationService.Client.Repositories.GetRawFile(username' repository' node' filename' stream);                      }                        using (var stream = new FileStream(currentFilePath' FileMode.Open' FileAccess.Read))                      {                          var buffer = new byte[1024];                          var read = stream.Read(buffer' 0' 1024);                          isBinary = buffer.Take(read).Any(x => x == 0);                      }                  }                    if (isBinary)                  {                      BinaryFilePath = currentFilePath;                      return;                  }                    var parentFilePath = actualFilename + ".parent";                  var pastFilePath = Path.Combine(Path.GetTempPath()' parentFilePath);                    if (hasPast)                  {                      var changeset = await applicationService.Client.Commits.GetChangeset(username' repository' node);                      var parent = changeset.Parents?.FirstOrDefault();                      if (parent == null)                        throw new Exception("Diff has no parent. Unable to generate view.");                                              using (var stream = new FileStream(pastFilePath' FileMode.Create' FileAccess.Write))                      {                          await applicationService.Client.Repositories.GetRawFile(username' repository' parent' filename' stream);                      }                        using (var stream = new FileStream(pastFilePath' FileMode.Open' FileAccess.Read))                      {                          var buffer = new byte[1024];                          var read = stream.Read(buffer' 0' 1024);                          isBinary = buffer.Take(read).Any(x => x == 0);                      }                  }                    if (isBinary)                  {                      BinaryFilePath = currentFilePath;                      return;                  }                    string newText = null' oldText = null;                    if (hasCurrent)                      newText = await Task.Run(() => File.ReadAllText(currentFilePath));                    if (hasPast)                      oldText = await Task.Run(() => File.ReadAllText(pastFilePath));                    Patch = diffService.CreateDiff(oldText' newText' 5).ToList();                    var items = await applicationService.Client.AllItems(x => x.Commits.GetComments(username' repository' node));                  var comments = items.Where(x => x.Inline?.Path == filename).ToList();                  var commentsMap = comments.ToDictionary(x => x.Id);                  foreach (var comment in comments.Where(x => x.Parent != null))                  {                      var parentComment = commentsMap[comment.Parent.Id];                      while (parentComment?.Parent != null)                          parentComment = commentsMap[parentComment.Parent.Id];                      comment.Inline = parentComment.Inline;                  }                    Comments = comments;              });
Magic Number,CodeBucket.Core.ViewModels.Source,SourceViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Source\SourceViewModel.cs,SourceViewModel,The following statement contains a magic number: LoadCommand = ReactiveCommand.CreateFromTask(async _ =>              {                  var filePath = Path.Combine(Path.GetTempPath()' Path.GetFileName(fileName));                    using (var stream = new FileStream(filePath' FileMode.Create' FileAccess.Write))                  {                      await applicationService.Client.Repositories.GetRawFile(username' repository' branch' path' stream);                  }                    using (var stream = new FileStream(filePath' FileMode.Open' FileAccess.Read))                  {                      var buffer = new byte[1024];                      var read = stream.Read(buffer' 0' 1024);                      IsText = !buffer.Take(read).Any(x => x == 0);                  }                    FilePath = filePath;                  HtmlUrl = $"https://bitbucket.org/{username}/{repository}/raw/{branch}/{path.TrimStart('/')}";              });
Magic Number,CodeBucket.Core.ViewModels.Source,SourceViewModel,D:\research\architectureSmells\repos1\thedillonb_CodeBucket\CodeBucket.Core\ViewModels\Source\SourceViewModel.cs,SourceViewModel,The following statement contains a magic number: LoadCommand = ReactiveCommand.CreateFromTask(async _ =>              {                  var filePath = Path.Combine(Path.GetTempPath()' Path.GetFileName(fileName));                    using (var stream = new FileStream(filePath' FileMode.Create' FileAccess.Write))                  {                      await applicationService.Client.Repositories.GetRawFile(username' repository' branch' path' stream);                  }                    using (var stream = new FileStream(filePath' FileMode.Open' FileAccess.Read))                  {                      var buffer = new byte[1024];                      var read = stream.Read(buffer' 0' 1024);                      IsText = !buffer.Take(read).Any(x => x == 0);                  }                    FilePath = filePath;                  HtmlUrl = $"https://bitbucket.org/{username}/{repository}/raw/{branch}/{path.TrimStart('/')}";              });
