Implementation smell,Namespace,Class,File,Method,Description
Long Method,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The method has 297 lines of code.
Long Method,Examples,FontService,C:\repos\Robmaister_SharpFont\Source\Examples\FontService.cs,RenderString,The method has 226 lines of code.
Complex Method,Examples,FontService,C:\repos\Robmaister_SharpFont\Source\Examples\FontService.cs,RenderString,Cyclomatic complexity of the method is 16
Long Parameter List,Examples,FontService,C:\repos\Robmaister_SharpFont\Source\Examples\FontService.cs,RenderString,The method has 5 parameters. Parameters: library' face' text' foreColor' backColor
Long Identifier,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,,The length of the parameter foregroundColorToolStripMenuItem is 32.
Long Identifier,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,,The length of the parameter backgroundColorToolStripMenuItem is 32.
Empty Catch Block,Examples,FontService,C:\repos\Robmaister_SharpFont\Source\Examples\FontService.cs,RenderString,The method has an empty catch block.
Empty Catch Block,Examples,FontService,C:\repos\Robmaister_SharpFont\Source\Examples\FontService.cs,Dispose,The method has an empty catch block.
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenu.Size = new System.Drawing.Size(584' 24);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenu.Size = new System.Drawing.Size(584' 24);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuFile.Size = new System.Drawing.Size(37' 20);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuFile.Size = new System.Drawing.Size(37' 20);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuFileOpen.Size = new System.Drawing.Size(160' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuFileOpen.Size = new System.Drawing.Size(160' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuFolderOpen.Size = new System.Drawing.Size(160' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuFolderOpen.Size = new System.Drawing.Size(160' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator1.Size = new System.Drawing.Size(157' 6);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator1.Size = new System.Drawing.Size(157' 6);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuFileExit.Size = new System.Drawing.Size(160' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuFileExit.Size = new System.Drawing.Size(160' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuEdit.Size = new System.Drawing.Size(39' 20);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuEdit.Size = new System.Drawing.Size(39' 20);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuEditSharpFont.Size = new System.Drawing.Size(181' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuEditSharpFont.Size = new System.Drawing.Size(181' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuEditSystemDrawing.Size = new System.Drawing.Size(181' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuEditSystemDrawing.Size = new System.Drawing.Size(181' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator2.Size = new System.Drawing.Size(178' 6);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator2.Size = new System.Drawing.Size(178' 6);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuFontSize.Size = new System.Drawing.Size(121' 23);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuFontSize.Size = new System.Drawing.Size(121' 23);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.foregroundColorToolStripMenuItem.Size = new System.Drawing.Size(181' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.foregroundColorToolStripMenuItem.Size = new System.Drawing.Size(181' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.backgroundColorToolStripMenuItem.Size = new System.Drawing.Size(181' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.backgroundColorToolStripMenuItem.Size = new System.Drawing.Size(181' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuView.Size = new System.Drawing.Size(44' 20);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuView.Size = new System.Drawing.Size(44' 20);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuViewDetails.Size = new System.Drawing.Size(145' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuViewDetails.Size = new System.Drawing.Size(145' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuHelp.Size = new System.Drawing.Size(44' 20);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuHelp.Size = new System.Drawing.Size(44' 20);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuHelpAbout.Size = new System.Drawing.Size(107' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.mainMenuHelpAbout.Size = new System.Drawing.Size(107' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(584' 315);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(584' 315);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 135;
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.TabIndex = 2;
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.listBoxFont.Size = new System.Drawing.Size(135' 315);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.listBoxFont.Size = new System.Drawing.Size(135' 315);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(445' 315);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(445' 315);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxText.Location = new System.Drawing.Point(3' 3);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxText.Location = new System.Drawing.Point(3' 3);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxText.Size = new System.Drawing.Size(369' 275);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxText.Size = new System.Drawing.Size(369' 275);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripContainer1.ContentPanel.Size = new System.Drawing.Size(584' 315);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripContainer1.ContentPanel.Size = new System.Drawing.Size(584' 315);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripContainer1.Size = new System.Drawing.Size(584' 361);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripContainer1.Size = new System.Drawing.Size(584' 361);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip1.Size = new System.Drawing.Size(584' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip1.Size = new System.Drawing.Size(584' 22);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.statusLabel.Size = new System.Drawing.Size(66' 17);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.statusLabel.Size = new System.Drawing.Size(66' 17);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(584' 361);
Magic Number,Examples,ExampleForm,C:\repos\Robmaister_SharpFont\Source\Examples\ExampleForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(584' 361);
Magic Number,Examples,FontService,C:\repos\Robmaister_SharpFont\Source\Examples\FontService.cs,SetSize,The following statement contains a magic number: if (FontFace != null)  				FontFace.SetCharSize(0' size' 0' 96);
Magic Number,Examples,FontService,C:\repos\Robmaister_SharpFont\Source\Examples\FontService.cs,RenderString,The following statement contains a magic number: for (int i = 0; i < text.Length; i++)  			{  				#region Load character  				char c = text[i];    				// Look up the glyph index for this character.  				uint glyphIndex = face.GetCharIndex(c);    				// Load the glyph into the font's glyph slot. There is usually only one slot in the font.  				face.LoadGlyph(glyphIndex' LoadFlags.Default' LoadTarget.Normal);    				// Refer to the diagram entitled "Glyph Metrics" at http://www.freetype.org/freetype2/docs/tutorial/step2.html.  				// There is also a glyph diagram included in this example (glyph-dims.svg).  				// The metrics below are for the glyph loaded in the slot.  				float gAdvanceX = (float)face.Glyph.Advance.X; // same as the advance in metrics  				float gBearingX = (float)face.Glyph.Metrics.HorizontalBearingX;  				float gWidth = face.Glyph.Metrics.Width.ToSingle();  				var rc = new DebugChar(c' gAdvanceX' gBearingX' gWidth);  				#endregion  				#region Underrun  				// Negative bearing would cause clipping of the first character  				// at the left boundary' if not accounted for.  				// A positive bearing would cause empty space.  				underrun += -(gBearingX);  				if (stringWidth == 0)  					stringWidth += underrun;  				if (trackingUnderrun)  					rc.Underrun = underrun;  				if (trackingUnderrun && underrun <= 0)  				{  					underrun = 0;  					trackingUnderrun = false;  				}  				#endregion  				#region Overrun  				// Accumulate overrun' which coould cause clipping at the right side of characters near  				// the end of the string (typically affects fonts with slanted characters)  				if (gBearingX + gWidth > 0 || gAdvanceX > 0)  				{  					overrun -= Math.Max(gBearingX + gWidth' gAdvanceX);  					if (overrun <= 0) overrun = 0;  				}  				overrun += (float)(gBearingX == 0 && gWidth == 0 ? 0 : gBearingX + gWidth - gAdvanceX);  				// On the last character' apply whatever overrun we have to the overall width.  				// Positive overrun prevents clipping' negative overrun prevents extra space.  				if (i == text.Length - 1)  					stringWidth += overrun;  				rc.Overrun = overrun; // accumulating (per above)  				#endregion    				#region Top/Bottom  				// If this character goes higher or lower than any previous character' adjust  				// the overall height of the bitmap.  				float glyphTop = (float)face.Glyph.Metrics.HorizontalBearingY;  				float glyphBottom = (float)(face.Glyph.Metrics.Height - face.Glyph.Metrics.HorizontalBearingY);  				if (glyphTop > top)  					top = glyphTop;  				if (glyphBottom > bottom)  					bottom = glyphBottom;  				#endregion    				// Accumulate the distance between the origin of each character (simple width).  				stringWidth += gAdvanceX;  				rc.RightEdge = stringWidth;  				measuredChars.Add(rc);    				#region Kerning (for NEXT character)  				// Calculate kern for the NEXT character (if any)  				// The kern value adjusts the origin of the next character (positive or negative).  				if (face.HasKerning && i < text.Length - 1)  				{  					char cNext = text[i + 1];  					kern = (float)face.GetKerning(glyphIndex' face.GetCharIndex(cNext)' KerningMode.Default).X;  					// sanity check for some fonts that have kern way out of whack  					if (kern > gAdvanceX * 5 || kern < -(gAdvanceX * 5))  						kern = 0;  					rc.Kern = kern;  					stringWidth += kern;  				}    				#endregion  			}
Magic Number,Examples,FontService,C:\repos\Robmaister_SharpFont\Source\Examples\FontService.cs,RenderString,The following statement contains a magic number: for (int i = 0; i < text.Length; i++)  			{  				#region Load character  				char c = text[i];    				// Look up the glyph index for this character.  				uint glyphIndex = face.GetCharIndex(c);    				// Load the glyph into the font's glyph slot. There is usually only one slot in the font.  				face.LoadGlyph(glyphIndex' LoadFlags.Default' LoadTarget.Normal);    				// Refer to the diagram entitled "Glyph Metrics" at http://www.freetype.org/freetype2/docs/tutorial/step2.html.  				// There is also a glyph diagram included in this example (glyph-dims.svg).  				// The metrics below are for the glyph loaded in the slot.  				float gAdvanceX = (float)face.Glyph.Advance.X; // same as the advance in metrics  				float gBearingX = (float)face.Glyph.Metrics.HorizontalBearingX;  				float gWidth = face.Glyph.Metrics.Width.ToSingle();  				var rc = new DebugChar(c' gAdvanceX' gBearingX' gWidth);  				#endregion  				#region Underrun  				// Negative bearing would cause clipping of the first character  				// at the left boundary' if not accounted for.  				// A positive bearing would cause empty space.  				underrun += -(gBearingX);  				if (stringWidth == 0)  					stringWidth += underrun;  				if (trackingUnderrun)  					rc.Underrun = underrun;  				if (trackingUnderrun && underrun <= 0)  				{  					underrun = 0;  					trackingUnderrun = false;  				}  				#endregion  				#region Overrun  				// Accumulate overrun' which coould cause clipping at the right side of characters near  				// the end of the string (typically affects fonts with slanted characters)  				if (gBearingX + gWidth > 0 || gAdvanceX > 0)  				{  					overrun -= Math.Max(gBearingX + gWidth' gAdvanceX);  					if (overrun <= 0) overrun = 0;  				}  				overrun += (float)(gBearingX == 0 && gWidth == 0 ? 0 : gBearingX + gWidth - gAdvanceX);  				// On the last character' apply whatever overrun we have to the overall width.  				// Positive overrun prevents clipping' negative overrun prevents extra space.  				if (i == text.Length - 1)  					stringWidth += overrun;  				rc.Overrun = overrun; // accumulating (per above)  				#endregion    				#region Top/Bottom  				// If this character goes higher or lower than any previous character' adjust  				// the overall height of the bitmap.  				float glyphTop = (float)face.Glyph.Metrics.HorizontalBearingY;  				float glyphBottom = (float)(face.Glyph.Metrics.Height - face.Glyph.Metrics.HorizontalBearingY);  				if (glyphTop > top)  					top = glyphTop;  				if (glyphBottom > bottom)  					bottom = glyphBottom;  				#endregion    				// Accumulate the distance between the origin of each character (simple width).  				stringWidth += gAdvanceX;  				rc.RightEdge = stringWidth;  				measuredChars.Add(rc);    				#region Kerning (for NEXT character)  				// Calculate kern for the NEXT character (if any)  				// The kern value adjusts the origin of the next character (positive or negative).  				if (face.HasKerning && i < text.Length - 1)  				{  					char cNext = text[i + 1];  					kern = (float)face.GetKerning(glyphIndex' face.GetCharIndex(cNext)' KerningMode.Default).X;  					// sanity check for some fonts that have kern way out of whack  					if (kern > gAdvanceX * 5 || kern < -(gAdvanceX * 5))  						kern = 0;  					rc.Kern = kern;  					stringWidth += kern;  				}    				#endregion  			}
Magic Number,Examples,FontService,C:\repos\Robmaister_SharpFont\Source\Examples\FontService.cs,RenderString,The following statement contains a magic number: using (var g = Graphics.FromImage(bmp))  			{  				#region Set up graphics  				// HighQuality and GammaCorrected both specify gamma correction be applied (2.2 in sRGB)  				// https://msdn.microsoft.com/en-us/library/windows/desktop/ms534094(v=vs.85).aspx  				g.CompositingQuality = CompositingQuality.HighQuality;  				// HighQuality and AntiAlias both specify antialiasing  				g.SmoothingMode = SmoothingMode.HighQuality;  				// If a background color is specified' blend over it.  				g.CompositingMode = CompositingMode.SourceOver;    				g.Clear(backColor);  				#endregion    				// Draw the string into the bitmap.  				// A lot of this is a repeat of the measuring steps' but this time we have  				// an actual bitmap to work with (both canvas and bitmaps in the glyph slot).  				for (int i = 0; i < text.Length; i++)  				{  					#region Load character  					char c = text[i];    					// Same as when we were measuring' except RenderGlyph() causes the glyph data  					// to be converted to a bitmap.  					uint glyphIndex = face.GetCharIndex(c);  					face.LoadGlyph(glyphIndex' LoadFlags.Default' LoadTarget.Normal);  					face.Glyph.RenderGlyph(RenderMode.Normal);  					FTBitmap ftbmp = face.Glyph.Bitmap;    					float gAdvanceX = (float)face.Glyph.Advance.X;  					float gBearingX = (float)face.Glyph.Metrics.HorizontalBearingX;  					float gWidth = (float)face.Glyph.Metrics.Width;    					var rc = new DebugChar(c' gAdvanceX' gBearingX' gWidth);  					#endregion  					#region Underrun  					// Underrun  					underrun += -(gBearingX);  					if (penX == 0)  						penX += underrun;  					if (trackingUnderrun)  						rc.Underrun = underrun;  					if (trackingUnderrun && underrun <= 0)  					{  						underrun = 0;  						trackingUnderrun = false;  					}  					#endregion  					#region Draw glyph  					// Whitespace characters sometimes have a bitmap of zero size' but a non-zero advance.  					// We can't draw a 0-size bitmap' but the pen position will still get advanced (below).  					if ((ftbmp.Width > 0 && ftbmp.Rows > 0))  					{  						// Get a bitmap that .Net can draw (GDI+ in this case).  						Bitmap cBmp = ftbmp.ToGdipBitmap(foreColor);  						rc.Width = cBmp.Width;  						rc.BearingX = face.Glyph.BitmapLeft;  						int x = (int)Math.Round(penX + face.Glyph.BitmapLeft);  						int y = (int)Math.Round(penY + top - (float)face.Glyph.Metrics.HorizontalBearingY);  						//Not using g.DrawImage because some characters come out blurry/clipped. (Is this still true?)  						g.DrawImageUnscaled(cBmp' x' y);  						rc.Overrun = face.Glyph.BitmapLeft + cBmp.Width - gAdvanceX;  						// Check if we are aligned properly on the right edge (for debugging)  						rightEdge = Math.Max(rightEdge' x + cBmp.Width);  						spacingError = bmp.Width - rightEdge;  					}  					else  					{  						rightEdge = (int)(penX + gAdvanceX);  						spacingError = bmp.Width - rightEdge;  					}  					#endregion    					#region Overrun  					if (gBearingX + gWidth > 0 || gAdvanceX > 0)  					{  						overrun -= Math.Max(gBearingX + gWidth' gAdvanceX);  						if (overrun <= 0) overrun = 0;  					}  					overrun += (float)(gBearingX == 0 && gWidth == 0 ? 0 : gBearingX + gWidth - gAdvanceX);  					if (i == text.Length - 1) penX += overrun;  					rc.Overrun = overrun;  					#endregion    					// Advance pen positions for drawing the next character.  					penX += (float)face.Glyph.Advance.X; // same as Metrics.HorizontalAdvance?  					penY += (float)face.Glyph.Advance.Y;    					rc.RightEdge = penX;  					spacingError = bmp.Width - (int)Math.Round(rc.RightEdge);  					renderedChars.Add(rc);    					#region Kerning (for NEXT character)  					// Adjust for kerning between this character and the next.  					if (face.HasKerning && i < text.Length - 1)  					{  						char cNext = text[i + 1];  						kern = (float)face.GetKerning(glyphIndex' face.GetCharIndex(cNext)' KerningMode.Default).X;  						if (kern > gAdvanceX * 5 || kern < -(gAdvanceX * 5))  							kern = 0;  						rc.Kern = kern;  						penX += (float)kern;  					}  					#endregion    				}    			}
Magic Number,Examples,FontService,C:\repos\Robmaister_SharpFont\Source\Examples\FontService.cs,RenderString,The following statement contains a magic number: using (var g = Graphics.FromImage(bmp))  			{  				#region Set up graphics  				// HighQuality and GammaCorrected both specify gamma correction be applied (2.2 in sRGB)  				// https://msdn.microsoft.com/en-us/library/windows/desktop/ms534094(v=vs.85).aspx  				g.CompositingQuality = CompositingQuality.HighQuality;  				// HighQuality and AntiAlias both specify antialiasing  				g.SmoothingMode = SmoothingMode.HighQuality;  				// If a background color is specified' blend over it.  				g.CompositingMode = CompositingMode.SourceOver;    				g.Clear(backColor);  				#endregion    				// Draw the string into the bitmap.  				// A lot of this is a repeat of the measuring steps' but this time we have  				// an actual bitmap to work with (both canvas and bitmaps in the glyph slot).  				for (int i = 0; i < text.Length; i++)  				{  					#region Load character  					char c = text[i];    					// Same as when we were measuring' except RenderGlyph() causes the glyph data  					// to be converted to a bitmap.  					uint glyphIndex = face.GetCharIndex(c);  					face.LoadGlyph(glyphIndex' LoadFlags.Default' LoadTarget.Normal);  					face.Glyph.RenderGlyph(RenderMode.Normal);  					FTBitmap ftbmp = face.Glyph.Bitmap;    					float gAdvanceX = (float)face.Glyph.Advance.X;  					float gBearingX = (float)face.Glyph.Metrics.HorizontalBearingX;  					float gWidth = (float)face.Glyph.Metrics.Width;    					var rc = new DebugChar(c' gAdvanceX' gBearingX' gWidth);  					#endregion  					#region Underrun  					// Underrun  					underrun += -(gBearingX);  					if (penX == 0)  						penX += underrun;  					if (trackingUnderrun)  						rc.Underrun = underrun;  					if (trackingUnderrun && underrun <= 0)  					{  						underrun = 0;  						trackingUnderrun = false;  					}  					#endregion  					#region Draw glyph  					// Whitespace characters sometimes have a bitmap of zero size' but a non-zero advance.  					// We can't draw a 0-size bitmap' but the pen position will still get advanced (below).  					if ((ftbmp.Width > 0 && ftbmp.Rows > 0))  					{  						// Get a bitmap that .Net can draw (GDI+ in this case).  						Bitmap cBmp = ftbmp.ToGdipBitmap(foreColor);  						rc.Width = cBmp.Width;  						rc.BearingX = face.Glyph.BitmapLeft;  						int x = (int)Math.Round(penX + face.Glyph.BitmapLeft);  						int y = (int)Math.Round(penY + top - (float)face.Glyph.Metrics.HorizontalBearingY);  						//Not using g.DrawImage because some characters come out blurry/clipped. (Is this still true?)  						g.DrawImageUnscaled(cBmp' x' y);  						rc.Overrun = face.Glyph.BitmapLeft + cBmp.Width - gAdvanceX;  						// Check if we are aligned properly on the right edge (for debugging)  						rightEdge = Math.Max(rightEdge' x + cBmp.Width);  						spacingError = bmp.Width - rightEdge;  					}  					else  					{  						rightEdge = (int)(penX + gAdvanceX);  						spacingError = bmp.Width - rightEdge;  					}  					#endregion    					#region Overrun  					if (gBearingX + gWidth > 0 || gAdvanceX > 0)  					{  						overrun -= Math.Max(gBearingX + gWidth' gAdvanceX);  						if (overrun <= 0) overrun = 0;  					}  					overrun += (float)(gBearingX == 0 && gWidth == 0 ? 0 : gBearingX + gWidth - gAdvanceX);  					if (i == text.Length - 1) penX += overrun;  					rc.Overrun = overrun;  					#endregion    					// Advance pen positions for drawing the next character.  					penX += (float)face.Glyph.Advance.X; // same as Metrics.HorizontalAdvance?  					penY += (float)face.Glyph.Advance.Y;    					rc.RightEdge = penX;  					spacingError = bmp.Width - (int)Math.Round(rc.RightEdge);  					renderedChars.Add(rc);    					#region Kerning (for NEXT character)  					// Adjust for kerning between this character and the next.  					if (face.HasKerning && i < text.Length - 1)  					{  						char cNext = text[i + 1];  						kern = (float)face.GetKerning(glyphIndex' face.GetCharIndex(cNext)' KerningMode.Default).X;  						if (kern > gAdvanceX * 5 || kern < -(gAdvanceX * 5))  							kern = 0;  						rc.Kern = kern;  						penX += (float)kern;  					}  					#endregion    				}    			}
Magic Number,Examples,Program,C:\repos\Robmaister_SharpFont\Source\Examples\Program.cs,Main,The following statement contains a magic number: if (p != 4 && p != 6 && p != 128)  			{  				//Thanks StackOverflow! http://stackoverflow.com/a/2594135/1122135  				string path = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);  				path = Path.Combine(path' IntPtr.Size == 8 ? "x64" : "x86");  				if (!SetDllDirectory(path))  					throw new System.ComponentModel.Win32Exception();  			}
Magic Number,Examples,Program,C:\repos\Robmaister_SharpFont\Source\Examples\Program.cs,Main,The following statement contains a magic number: if (p != 4 && p != 6 && p != 128)  			{  				//Thanks StackOverflow! http://stackoverflow.com/a/2594135/1122135  				string path = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);  				path = Path.Combine(path' IntPtr.Size == 8 ? "x64" : "x86");  				if (!SetDllDirectory(path))  					throw new System.ComponentModel.Win32Exception();  			}
Magic Number,Examples,Program,C:\repos\Robmaister_SharpFont\Source\Examples\Program.cs,Main,The following statement contains a magic number: if (p != 4 && p != 6 && p != 128)  			{  				//Thanks StackOverflow! http://stackoverflow.com/a/2594135/1122135  				string path = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);  				path = Path.Combine(path' IntPtr.Size == 8 ? "x64" : "x86");  				if (!SetDllDirectory(path))  					throw new System.ComponentModel.Win32Exception();  			}
Magic Number,Examples,Program,C:\repos\Robmaister_SharpFont\Source\Examples\Program.cs,Main,The following statement contains a magic number: if (p != 4 && p != 6 && p != 128)  			{  				//Thanks StackOverflow! http://stackoverflow.com/a/2594135/1122135  				string path = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);  				path = Path.Combine(path' IntPtr.Size == 8 ? "x64" : "x86");  				if (!SetDllDirectory(path))  					throw new System.ComponentModel.Win32Exception();  			}
