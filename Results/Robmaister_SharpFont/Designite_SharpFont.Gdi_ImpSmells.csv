Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,SharpFont.Gdi,FTBitmapExtensions,C:\repos\Robmaister_SharpFont\Source\SharpFont.GDI\FTBitmapExtensions.cs,Copy,The method has 5 parameters. Parameters: source' sourceOffset' destination' destinationOffset' count
Long Statement,SharpFont.Gdi,FTBitmapExtensions,C:\repos\Robmaister_SharpFont\Source\SharpFont.GDI\FTBitmapExtensions.cs,ToGdipBitmap,The length of the statement  "						var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' b.Rows)' ImageLockMode.ReadWrite' PixelFormat.Format1bppIndexed); " is 120.
Long Statement,SharpFont.Gdi,FTBitmapExtensions,C:\repos\Robmaister_SharpFont\Source\SharpFont.GDI\FTBitmapExtensions.cs,ToGdipBitmap,The length of the statement  "						var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' b.Rows)' ImageLockMode.ReadWrite' PixelFormat.Format4bppIndexed); " is 120.
Long Statement,SharpFont.Gdi,FTBitmapExtensions,C:\repos\Robmaister_SharpFont\Source\SharpFont.GDI\FTBitmapExtensions.cs,ToGdipBitmap,The length of the statement  "						var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' b.Rows)' ImageLockMode.ReadWrite' PixelFormat.Format8bppIndexed); " is 120.
Long Statement,SharpFont.Gdi,FTBitmapExtensions,C:\repos\Robmaister_SharpFont\Source\SharpFont.GDI\FTBitmapExtensions.cs,ToGdipBitmap,The length of the statement  "						//HACK There's a bug in Mono's libgdiplus requiring the "PaletteHasAlpha" flag to be set for transparency to work properly " is 122.
Long Statement,SharpFont.Gdi,FTBitmapExtensions,C:\repos\Robmaister_SharpFont\Source\SharpFont.GDI\FTBitmapExtensions.cs,ToGdipBitmap,The length of the statement  "								monoPaletteFlagsField = typeof(ColorPalette).GetField("flags"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 147.
Long Statement,SharpFont.Gdi,FTBitmapExtensions,C:\repos\Robmaister_SharpFont\Source\SharpFont.GDI\FTBitmapExtensions.cs,ToGdipBitmap,The length of the statement  "					var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' bmpHeight)' ImageLockMode.ReadWrite' PixelFormat.Format24bppRgb); " is 120.
Magic Number,SharpFont.Gdi,FTBitmapExtensions,C:\repos\Robmaister_SharpFont\Source\SharpFont.GDI\FTBitmapExtensions.cs,ToGdipBitmap,The following statement contains a magic number: switch (b.PixelMode)  			{  				case PixelMode.Mono:  					{  						Bitmap bmp = new Bitmap(b.Width' b.Rows' PixelFormat.Format1bppIndexed);  						var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' b.Rows)' ImageLockMode.ReadWrite' PixelFormat.Format1bppIndexed);    						for (int i = 0; i < b.Rows; i++)  							Copy(b.Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' locked.Stride);    						bmp.UnlockBits(locked);    						ColorPalette palette = bmp.Palette;  						palette.Entries[0] = Color.FromArgb(0' color);  						palette.Entries[1] = Color.FromArgb(255' color);    						bmp.Palette = palette;  						return bmp;  					}    				case PixelMode.Gray4:  					{  						Bitmap bmp = new Bitmap(b.Width' b.Rows' PixelFormat.Format4bppIndexed);  						var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' b.Rows)' ImageLockMode.ReadWrite' PixelFormat.Format4bppIndexed);    						for (int i = 0; i < b.Rows; i++)  							Copy(b.Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' locked.Stride);    						bmp.UnlockBits(locked);    						ColorPalette palette = bmp.Palette;  						for (int i = 0; i < palette.Entries.Length; i++)  						{  							float a = (i * 17) / 255f;  							palette.Entries[i] = Color.FromArgb(i * 17' (int)(color.R * a)' (int)(color.G * a)' (int)(color.B * a));  						}    						bmp.Palette = palette;  						return bmp;  					}    				case PixelMode.Gray:  					{  						Bitmap bmp = new Bitmap(b.Width' b.Rows' PixelFormat.Format8bppIndexed);  						var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' b.Rows)' ImageLockMode.ReadWrite' PixelFormat.Format8bppIndexed);    						for (int i = 0; i < b.Rows; i++)  							Copy(b.Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' locked.Stride);    						bmp.UnlockBits(locked);    						ColorPalette palette = bmp.Palette;  						for (int i = 0; i < palette.Entries.Length; i++)  						{  							float a = i / 255f;  							palette.Entries[i] = Color.FromArgb(i' (int)(color.R * a)' (int)(color.G * a)' (int)(color.B * a));  						}    						//HACK There's a bug in Mono's libgdiplus requiring the "PaletteHasAlpha" flag to be set for transparency to work properly  						//See https://github.com/Robmaister/SharpFont/issues/62  						if (!hasCheckedForMono)  						{  							hasCheckedForMono = true;  							isRunningOnMono = Type.GetType("Mono.Runtime") != null;  							if (isRunningOnMono)  							{  								monoPaletteFlagsField = typeof(ColorPalette).GetField("flags"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic);  							}  						}    						if (isRunningOnMono)  							monoPaletteFlagsField.SetValue(palette' palette.Flags | 1);    						bmp.Palette = palette;  						return bmp;  					}    				case PixelMode.Lcd:  					{  						//TODO apply color  						int bmpWidth = b.Width / 3;  						Bitmap bmp = new Bitmap(bmpWidth' b.Rows' PixelFormat.Format24bppRgb);  						var locked = bmp.LockBits(new Rectangle(0' 0' bmpWidth' b.Rows)' ImageLockMode.ReadWrite' PixelFormat.Format24bppRgb);    						for (int i = 0; i < b.Rows; i++)  							Copy(b.Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' locked.Stride);    						bmp.UnlockBits(locked);    						return bmp;  					}  				/*case PixelMode.VerticalLcd:  				{  					int bmpHeight = b.Rows / 3;  					Bitmap bmp = new Bitmap(b.Width' bmpHeight' PixelFormat.Format24bppRgb);  					var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' bmpHeight)' ImageLockMode.ReadWrite' PixelFormat.Format24bppRgb);  					for (int i = 0; i < bmpHeight; i++)  						PInvokeHelper.Copy(Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' b.Width);  					bmp.UnlockBits(locked);    					return bmp;  				}*/    				default:  					throw new InvalidOperationException("System.Drawing.Bitmap does not support this pixel mode.");  			}
Magic Number,SharpFont.Gdi,FTBitmapExtensions,C:\repos\Robmaister_SharpFont\Source\SharpFont.GDI\FTBitmapExtensions.cs,ToGdipBitmap,The following statement contains a magic number: switch (b.PixelMode)  			{  				case PixelMode.Mono:  					{  						Bitmap bmp = new Bitmap(b.Width' b.Rows' PixelFormat.Format1bppIndexed);  						var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' b.Rows)' ImageLockMode.ReadWrite' PixelFormat.Format1bppIndexed);    						for (int i = 0; i < b.Rows; i++)  							Copy(b.Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' locked.Stride);    						bmp.UnlockBits(locked);    						ColorPalette palette = bmp.Palette;  						palette.Entries[0] = Color.FromArgb(0' color);  						palette.Entries[1] = Color.FromArgb(255' color);    						bmp.Palette = palette;  						return bmp;  					}    				case PixelMode.Gray4:  					{  						Bitmap bmp = new Bitmap(b.Width' b.Rows' PixelFormat.Format4bppIndexed);  						var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' b.Rows)' ImageLockMode.ReadWrite' PixelFormat.Format4bppIndexed);    						for (int i = 0; i < b.Rows; i++)  							Copy(b.Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' locked.Stride);    						bmp.UnlockBits(locked);    						ColorPalette palette = bmp.Palette;  						for (int i = 0; i < palette.Entries.Length; i++)  						{  							float a = (i * 17) / 255f;  							palette.Entries[i] = Color.FromArgb(i * 17' (int)(color.R * a)' (int)(color.G * a)' (int)(color.B * a));  						}    						bmp.Palette = palette;  						return bmp;  					}    				case PixelMode.Gray:  					{  						Bitmap bmp = new Bitmap(b.Width' b.Rows' PixelFormat.Format8bppIndexed);  						var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' b.Rows)' ImageLockMode.ReadWrite' PixelFormat.Format8bppIndexed);    						for (int i = 0; i < b.Rows; i++)  							Copy(b.Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' locked.Stride);    						bmp.UnlockBits(locked);    						ColorPalette palette = bmp.Palette;  						for (int i = 0; i < palette.Entries.Length; i++)  						{  							float a = i / 255f;  							palette.Entries[i] = Color.FromArgb(i' (int)(color.R * a)' (int)(color.G * a)' (int)(color.B * a));  						}    						//HACK There's a bug in Mono's libgdiplus requiring the "PaletteHasAlpha" flag to be set for transparency to work properly  						//See https://github.com/Robmaister/SharpFont/issues/62  						if (!hasCheckedForMono)  						{  							hasCheckedForMono = true;  							isRunningOnMono = Type.GetType("Mono.Runtime") != null;  							if (isRunningOnMono)  							{  								monoPaletteFlagsField = typeof(ColorPalette).GetField("flags"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic);  							}  						}    						if (isRunningOnMono)  							monoPaletteFlagsField.SetValue(palette' palette.Flags | 1);    						bmp.Palette = palette;  						return bmp;  					}    				case PixelMode.Lcd:  					{  						//TODO apply color  						int bmpWidth = b.Width / 3;  						Bitmap bmp = new Bitmap(bmpWidth' b.Rows' PixelFormat.Format24bppRgb);  						var locked = bmp.LockBits(new Rectangle(0' 0' bmpWidth' b.Rows)' ImageLockMode.ReadWrite' PixelFormat.Format24bppRgb);    						for (int i = 0; i < b.Rows; i++)  							Copy(b.Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' locked.Stride);    						bmp.UnlockBits(locked);    						return bmp;  					}  				/*case PixelMode.VerticalLcd:  				{  					int bmpHeight = b.Rows / 3;  					Bitmap bmp = new Bitmap(b.Width' bmpHeight' PixelFormat.Format24bppRgb);  					var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' bmpHeight)' ImageLockMode.ReadWrite' PixelFormat.Format24bppRgb);  					for (int i = 0; i < bmpHeight; i++)  						PInvokeHelper.Copy(Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' b.Width);  					bmp.UnlockBits(locked);    					return bmp;  				}*/    				default:  					throw new InvalidOperationException("System.Drawing.Bitmap does not support this pixel mode.");  			}
Magic Number,SharpFont.Gdi,FTBitmapExtensions,C:\repos\Robmaister_SharpFont\Source\SharpFont.GDI\FTBitmapExtensions.cs,ToGdipBitmap,The following statement contains a magic number: switch (b.PixelMode)  			{  				case PixelMode.Mono:  					{  						Bitmap bmp = new Bitmap(b.Width' b.Rows' PixelFormat.Format1bppIndexed);  						var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' b.Rows)' ImageLockMode.ReadWrite' PixelFormat.Format1bppIndexed);    						for (int i = 0; i < b.Rows; i++)  							Copy(b.Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' locked.Stride);    						bmp.UnlockBits(locked);    						ColorPalette palette = bmp.Palette;  						palette.Entries[0] = Color.FromArgb(0' color);  						palette.Entries[1] = Color.FromArgb(255' color);    						bmp.Palette = palette;  						return bmp;  					}    				case PixelMode.Gray4:  					{  						Bitmap bmp = new Bitmap(b.Width' b.Rows' PixelFormat.Format4bppIndexed);  						var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' b.Rows)' ImageLockMode.ReadWrite' PixelFormat.Format4bppIndexed);    						for (int i = 0; i < b.Rows; i++)  							Copy(b.Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' locked.Stride);    						bmp.UnlockBits(locked);    						ColorPalette palette = bmp.Palette;  						for (int i = 0; i < palette.Entries.Length; i++)  						{  							float a = (i * 17) / 255f;  							palette.Entries[i] = Color.FromArgb(i * 17' (int)(color.R * a)' (int)(color.G * a)' (int)(color.B * a));  						}    						bmp.Palette = palette;  						return bmp;  					}    				case PixelMode.Gray:  					{  						Bitmap bmp = new Bitmap(b.Width' b.Rows' PixelFormat.Format8bppIndexed);  						var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' b.Rows)' ImageLockMode.ReadWrite' PixelFormat.Format8bppIndexed);    						for (int i = 0; i < b.Rows; i++)  							Copy(b.Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' locked.Stride);    						bmp.UnlockBits(locked);    						ColorPalette palette = bmp.Palette;  						for (int i = 0; i < palette.Entries.Length; i++)  						{  							float a = i / 255f;  							palette.Entries[i] = Color.FromArgb(i' (int)(color.R * a)' (int)(color.G * a)' (int)(color.B * a));  						}    						//HACK There's a bug in Mono's libgdiplus requiring the "PaletteHasAlpha" flag to be set for transparency to work properly  						//See https://github.com/Robmaister/SharpFont/issues/62  						if (!hasCheckedForMono)  						{  							hasCheckedForMono = true;  							isRunningOnMono = Type.GetType("Mono.Runtime") != null;  							if (isRunningOnMono)  							{  								monoPaletteFlagsField = typeof(ColorPalette).GetField("flags"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic);  							}  						}    						if (isRunningOnMono)  							monoPaletteFlagsField.SetValue(palette' palette.Flags | 1);    						bmp.Palette = palette;  						return bmp;  					}    				case PixelMode.Lcd:  					{  						//TODO apply color  						int bmpWidth = b.Width / 3;  						Bitmap bmp = new Bitmap(bmpWidth' b.Rows' PixelFormat.Format24bppRgb);  						var locked = bmp.LockBits(new Rectangle(0' 0' bmpWidth' b.Rows)' ImageLockMode.ReadWrite' PixelFormat.Format24bppRgb);    						for (int i = 0; i < b.Rows; i++)  							Copy(b.Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' locked.Stride);    						bmp.UnlockBits(locked);    						return bmp;  					}  				/*case PixelMode.VerticalLcd:  				{  					int bmpHeight = b.Rows / 3;  					Bitmap bmp = new Bitmap(b.Width' bmpHeight' PixelFormat.Format24bppRgb);  					var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' bmpHeight)' ImageLockMode.ReadWrite' PixelFormat.Format24bppRgb);  					for (int i = 0; i < bmpHeight; i++)  						PInvokeHelper.Copy(Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' b.Width);  					bmp.UnlockBits(locked);    					return bmp;  				}*/    				default:  					throw new InvalidOperationException("System.Drawing.Bitmap does not support this pixel mode.");  			}
Magic Number,SharpFont.Gdi,FTBitmapExtensions,C:\repos\Robmaister_SharpFont\Source\SharpFont.GDI\FTBitmapExtensions.cs,ToGdipBitmap,The following statement contains a magic number: switch (b.PixelMode)  			{  				case PixelMode.Mono:  					{  						Bitmap bmp = new Bitmap(b.Width' b.Rows' PixelFormat.Format1bppIndexed);  						var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' b.Rows)' ImageLockMode.ReadWrite' PixelFormat.Format1bppIndexed);    						for (int i = 0; i < b.Rows; i++)  							Copy(b.Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' locked.Stride);    						bmp.UnlockBits(locked);    						ColorPalette palette = bmp.Palette;  						palette.Entries[0] = Color.FromArgb(0' color);  						palette.Entries[1] = Color.FromArgb(255' color);    						bmp.Palette = palette;  						return bmp;  					}    				case PixelMode.Gray4:  					{  						Bitmap bmp = new Bitmap(b.Width' b.Rows' PixelFormat.Format4bppIndexed);  						var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' b.Rows)' ImageLockMode.ReadWrite' PixelFormat.Format4bppIndexed);    						for (int i = 0; i < b.Rows; i++)  							Copy(b.Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' locked.Stride);    						bmp.UnlockBits(locked);    						ColorPalette palette = bmp.Palette;  						for (int i = 0; i < palette.Entries.Length; i++)  						{  							float a = (i * 17) / 255f;  							palette.Entries[i] = Color.FromArgb(i * 17' (int)(color.R * a)' (int)(color.G * a)' (int)(color.B * a));  						}    						bmp.Palette = palette;  						return bmp;  					}    				case PixelMode.Gray:  					{  						Bitmap bmp = new Bitmap(b.Width' b.Rows' PixelFormat.Format8bppIndexed);  						var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' b.Rows)' ImageLockMode.ReadWrite' PixelFormat.Format8bppIndexed);    						for (int i = 0; i < b.Rows; i++)  							Copy(b.Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' locked.Stride);    						bmp.UnlockBits(locked);    						ColorPalette palette = bmp.Palette;  						for (int i = 0; i < palette.Entries.Length; i++)  						{  							float a = i / 255f;  							palette.Entries[i] = Color.FromArgb(i' (int)(color.R * a)' (int)(color.G * a)' (int)(color.B * a));  						}    						//HACK There's a bug in Mono's libgdiplus requiring the "PaletteHasAlpha" flag to be set for transparency to work properly  						//See https://github.com/Robmaister/SharpFont/issues/62  						if (!hasCheckedForMono)  						{  							hasCheckedForMono = true;  							isRunningOnMono = Type.GetType("Mono.Runtime") != null;  							if (isRunningOnMono)  							{  								monoPaletteFlagsField = typeof(ColorPalette).GetField("flags"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic);  							}  						}    						if (isRunningOnMono)  							monoPaletteFlagsField.SetValue(palette' palette.Flags | 1);    						bmp.Palette = palette;  						return bmp;  					}    				case PixelMode.Lcd:  					{  						//TODO apply color  						int bmpWidth = b.Width / 3;  						Bitmap bmp = new Bitmap(bmpWidth' b.Rows' PixelFormat.Format24bppRgb);  						var locked = bmp.LockBits(new Rectangle(0' 0' bmpWidth' b.Rows)' ImageLockMode.ReadWrite' PixelFormat.Format24bppRgb);    						for (int i = 0; i < b.Rows; i++)  							Copy(b.Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' locked.Stride);    						bmp.UnlockBits(locked);    						return bmp;  					}  				/*case PixelMode.VerticalLcd:  				{  					int bmpHeight = b.Rows / 3;  					Bitmap bmp = new Bitmap(b.Width' bmpHeight' PixelFormat.Format24bppRgb);  					var locked = bmp.LockBits(new Rectangle(0' 0' b.Width' bmpHeight)' ImageLockMode.ReadWrite' PixelFormat.Format24bppRgb);  					for (int i = 0; i < bmpHeight; i++)  						PInvokeHelper.Copy(Buffer' i * b.Pitch' locked.Scan0' i * locked.Stride' b.Width);  					bmp.UnlockBits(locked);    					return bmp;  				}*/    				default:  					throw new InvalidOperationException("System.Drawing.Bitmap does not support this pixel mode.");  			}
