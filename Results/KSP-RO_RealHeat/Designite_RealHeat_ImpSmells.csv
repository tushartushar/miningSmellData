Implementation smell,Namespace,Class,File,Method,Description
Complex Method,RealHeat,AtmDataOrganizer,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,LoadConfigNodes,Cyclomatic complexity of the method is 17
Complex Method,RealHeat,AtmosphereComposition,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CreateWorkingGasSpeciesAndMassFractionDict,Cyclomatic complexity of the method is 8
Long Parameter List,RealHeat,CompatibilityChecker,C:\repos\KSP-RO_RealHeat\Source\Checkers.cs,Start,The method has 16 parameters.
Long Identifier,RealHeat,AtmosphereComposition,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,TemperatureAsFunctionOfVelocity,The length of the parameter workingGasSpeciesAndMassFractions is 33.
Long Identifier,RealHeat,AtmosphereComposition,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculateCp,The length of the parameter workingGasSpeciesAndMassFractions is 33.
Long Identifier,RealHeat,AtmosphereComposition,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,Calculate_dCp_dt,The length of the parameter workingGasSpeciesAndMassFractions is 33.
Long Identifier,RealHeat,AtmosphereComposition,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculateEnergyLostThroughDecomposition,The length of the parameter workingGasSpeciesAndMassFractions is 33.
Long Identifier,RealHeat,AtmosphereComposition,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculateEnergyLostThroughDecomposition,The length of the parameter heatOfFormationDecompositionSpecies is 35.
Long Identifier,RealHeat,AtmosphereComposition,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,UpdateCompositionDueToDecomposition,The length of the parameter workingGasSpeciesAndMassFractions is 33.
Long Identifier,RealHeat,AtmosphereComposition,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CreateWorkingGasSpeciesAndMassFractionDict,The length of the parameter workingGasSpeciesAndMassFractions is 33.
Long Statement,RealHeat,CompatibilityChecker,C:\repos\KSP-RO_RealHeat\Source\Checkers.cs,Start,The length of the statement  "	FieldInfo[] fields = getAllTypes ().Where (t => t.Name == "CompatibilityChecker").Select (t => t.GetField ("_version"' BindingFlags.Static | BindingFlags.NonPublic)).Where (f => f != null).Where (f => f.FieldType == typeof(int)).ToArray (); " is 240.
Long Statement,RealHeat,CompatibilityChecker,C:\repos\KSP-RO_RealHeat\Source\Checkers.cs,Start,The length of the statement  "	Debug.Log (String.Format ("[CompatibilityChecker] Running checker version {0} from '{1}'"' _version' Assembly.GetExecutingAssembly ().GetName ().Name)); " is 152.
Long Statement,RealHeat,CompatibilityChecker,C:\repos\KSP-RO_RealHeat\Source\Checkers.cs,Start,The length of the statement  "	String[] incompatible = fields.Select (f => f.DeclaringType.GetMethod ("IsCompatible"' Type.EmptyTypes)).Where (m => m.IsStatic).Where (m => m.ReturnType == typeof(bool)).Where (m =>  { " is 185.
Long Statement,RealHeat,CompatibilityChecker,C:\repos\KSP-RO_RealHeat\Source\Checkers.cs,Start,The length of the statement  "			Debug.LogWarning (String.Format ("[CompatibilityChecker] Exception while invoking IsCompatible() from '{0}':\n\n{1}"' m.DeclaringType.Assembly.GetName ().Name' e)); " is 164.
Long Statement,RealHeat,CompatibilityChecker,C:\repos\KSP-RO_RealHeat\Source\Checkers.cs,Start,The length of the statement  "	String[] incompatibleUnity = fields.Select (f => f.DeclaringType.GetMethod ("IsUnityCompatible"' Type.EmptyTypes)).Where (m => m != null)// Mods without IsUnityCompatible() are assumed to be compatible. " is 202.
Long Statement,RealHeat,CompatibilityChecker,C:\repos\KSP-RO_RealHeat\Source\Checkers.cs,Start,The length of the statement  "			Debug.LogWarning (String.Format ("[CompatibilityChecker] Exception while invoking IsUnityCompatible() from '{0}':\n\n{1}"' m.DeclaringType.Assembly.GetName ().Name' e)); " is 169.
Long Statement,RealHeat,CompatibilityChecker,C:\repos\KSP-RO_RealHeat\Source\Checkers.cs,Start,The length of the statement  "		message += ((message == String.Empty) ? "Some" : "\n\nAdditionally' some") + " installed mods may be incompatible with this version of Kerbal Space Program. Features may be broken or disabled. Please check for updates to the listed mods."; " is 239.
Long Statement,RealHeat,CompatibilityChecker,C:\repos\KSP-RO_RealHeat\Source\Checkers.cs,Start,The length of the statement  "			message += String.Format ("\n\nThese mods are incompatible with KSP {0}.{1}.{2}:\n\n"' Versioning.version_major' Versioning.version_minor' Versioning.Revision); " is 160.
Long Statement,RealHeat,CompatibilityChecker,C:\repos\KSP-RO_RealHeat\Source\Checkers.cs,Start,The length of the statement  "			Debug.LogWarning ("[CompatibilityChecker] Incompatible mods (Unity) detected: " + String.Join ("' "' incompatibleUnity)); " is 121.
Long Statement,RealHeat,CompatibilityChecker,C:\repos\KSP-RO_RealHeat\Source\Checkers.cs,Start,The length of the statement  "		PopupDialog.SpawnPopupDialog (new Vector2 (0' 0)' new Vector2 (0' 0)' "Incompatible Mods Detected"' message' "OK"' true' HighLogic.UISkin); " is 139.
Long Statement,RealHeat,RealHeatUtils,C:\repos\KSP-RO_RealHeat\Source\Utils.cs,UpdateTempCurve,The length of the statement  "	Debug.Log ("Updating temperature curve for current body.\n\rCurrent body is: " + FlightGlobals.currentMainBody.bodyName); " is 121.
Long Statement,RealHeat,AtmDataOrganizer,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,LoadConfigNodes,The length of the statement  "	AtmosphereComposition defaultOxygenatedRocky = new AtmosphereComposition ()' defaultUnoxygenatedRocky = new AtmosphereComposition ()' defaultGasGiant = new AtmosphereComposition (); " is 181.
Long Statement,RealHeat,AtmDataOrganizer,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,LoadConfigNodes,The length of the statement  "				AtmosphericGasSpecies decompositionSpecies = AtmDataOrganizer.idOrganizedListOfGasSpecies [gasSpeciesNode.GetValue ("name")]; " is 125.
Long Statement,RealHeat,AtmDataOrganizer,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,LoadConfigNodes,The length of the statement  "					newComposition.gasConstant = (float)((double)(AtmosphericGasSpecies.UniversalGasConstant) / (body.atmosphereMolarMass * 1000d)); " is 128.
Long Statement,RealHeat,AtmosphereComposition,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,TemperatureAsFunctionOfVelocity,The length of the statement  "	Dictionary<AtmosphericGasSpecies' float[]> workingGasSpeciesAndMassFractions = CreateWorkingGasSpeciesAndMassFractionDict (); " is 125.
Long Statement,RealHeat,AtmosphereComposition,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,TemperatureAsFunctionOfVelocity,The length of the statement  "		//debug.AppendLine("Cp: " + Cp + " dCp_dt: " + dCp_dt + " energyChange: " + energyChange + " vel: " + velocity + " temp: " + temp + " dT_dV: " + dT_dV); " is 152.
Long Statement,RealHeat,AtmosphereComposition,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,Calculate_dCp_dt,The length of the statement  "		dCp_dt += (pair.Key.Calculate_dCp_dT (temp) * pair.Key.CalculatePhi (temp) + pair.Key.Calculate_dPhi_dT (temp) * pair.Key.CalculateCp (temp)) * pair.Value [0]; " is 159.
Long Statement,RealHeat,AtmosphereComposition,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculateEnergyLostThroughDecomposition,The length of the statement  "		energy += pair.Value [1] * (pair.Key.GetHeatOfFormation () - heatOfFormationDecompositionSpecies) * pair.Key.Calculate_dPhi_dT (temp); " is 134.
Long Statement,RealHeat,AtmosphereComposition,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CreateWorkingGasSpeciesAndMassFractionDict,The length of the statement  "	Dictionary<AtmosphericGasSpecies' float[]> workingGasSpeciesAndMassFractions = new Dictionary<AtmosphericGasSpecies' float[]> (); " is 129.
Long Statement,RealHeat,AtmosphereComposition,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CreateWorkingGasSpeciesAndMassFractionDict,The length of the statement  "	//Then' go through each value and add its decomposition species; continue until no more items can be added to the dictionary " is 124.
Long Statement,RealHeat,AtmosphereComposition,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CreateWorkingGasSpeciesAndMassFractionDict,The length of the statement  "			foreach (KeyValuePair<AtmosphericGasSpecies' float> decompositionSpecies in pair.Key.decompositionSpeciesWithFraction) { " is 120.
Long Statement,RealHeat,AtmosphereComposition,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CreateWorkingGasSpeciesAndMassFractionDict,The length of the statement  "		foreach (KeyValuePair<AtmosphericGasSpecies' float> decompositionSpecies in pair.Key.decompositionSpeciesWithFraction) { " is 120.
Long Statement,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,Initialize,The length of the statement  "					AtmosphericGasSpecies decompositionSpecies = AtmDataOrganizer.idOrganizedListOfGasSpecies [decompositionGasSpeciesNode.GetValue ("name")]; " is 138.
Long Statement,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,Initialize,The length of the statement  "	constantsCpCurve [3] = tempLowDegFreedom * tempLowDegFreedom * (tempLowDegFreedom - 3f * tempHighDegFreedom) * tmp + CpLowTemp; " is 127.
Long Statement,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,Initialize,The length of the statement  "	constantsDecompositionCurve [3] = -tempBeginDecomposition * tempBeginDecomposition * (tempBeginDecomposition - 3f * tempEndDecomposition) * tmp + 1f; " is 149.
Long Statement,RealHeat,AtmTempCurve,C:\repos\KSP-RO_RealHeat\Source\AtmTempCurve.cs,CalculateNewAtmTempCurve,The length of the statement  "		ThreadPool.QueueUserWorkItem (AtmDataOrganizer.CalculateNewTemperatureCurve' new tempCurveDataContainer (body' this' dumpText)); " is 128.
Long Statement,RealHeat,AtmTempCurve,C:\repos\KSP-RO_RealHeat\Source\AtmTempCurve.cs,DumpToText,The length of the statement  "		FileStream fs = File.Open (KSPUtil.ApplicationRootPath.Replace ("\\"' "/") + "GameData/RealHeat/" + body.bodyName + "_Curves.csv"' FileMode.Create' FileAccess.Write); " is 166.
Long Statement,RealHeat,RealHeat,C:\repos\KSP-RO_RealHeat\Source\RealHeat.cs,UpdateThermodynamicsPre,The length of the statement  "		fi.Vessel.externalTemperature = fi.externalTemperature = fi.atmosphericTemperature + (double)RealHeatUtils.baseTempCurve.EvaluateTempDiffCurve (spd); " is 149.
Long Statement,RealHeat,RealHeat,C:\repos\KSP-RO_RealHeat\Source\RealHeat.cs,UpdateThermodynamicsPre,The length of the statement  "		fi.backgroundRadiationTemp = CalculateBackgroundRadiationTemperature (fi.atmosphericTemperature' fi.DensityThermalLerp); " is 120.
Long Statement,RealHeat,RealHeat,C:\repos\KSP-RO_RealHeat\Source\RealHeat.cs,UpdateThermodynamicsPre,The length of the statement  "		fi.backgroundRadiationTempExposed = CalculateBackgroundRadiationTemperature (fi.externalTemperature' fi.DensityThermalLerp); " is 124.
Long Statement,RealHeat,RealHeat,C:\repos\KSP-RO_RealHeat\Source\RealHeat.cs,UpdateThermodynamicsPre,The length of the statement  "		//print("At rho " + fi.density + "/" + shockDensity + "' gamma " + gamma + "' DTL " + fi.DensityThermalLerp + "' BT = " + fi.backgroundRadiationTempExposed.ToString("N2") + "/" + fi.backgroundRadiationTemp.ToString("N2")); " is 222.
Magic Number,RealHeat,CompatibilityChecker,C:\repos\KSP-RO_RealHeat\Source\Checkers.cs,IsWin64,The following statement contains a magic number: return (IntPtr.Size == 8) && (Environment.OSVersion.Platform == PlatformID.Win32NT);  
Magic Number,RealHeat,AtmDataOrganizer,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculateNewTemperatureCurve,The following statement contains a magic number: try {  	tempCurveDataContainer container = (tempCurveDataContainer)o;  	AtmosphereComposition atmosphere = bodyOrganizedListOfAtmospheres [container.body];  	//Debug.Log("Beginning Temperature Curve Calculation");  	Curves result = atmosphere.TemperatureAsFunctionOfVelocity (100' 5' atmosphere.maxSimVelocity);  	container.callingCurve.protoTempCurve = result.temp;  	container.callingCurve.protoVelCpCurve = result.cp;  	container.callingCurve.referenceTemp = GetReferenceTemp (container.body);  	container.callingCurve.specificGasConstant = GetGasConstant (container.body);  	if (container.dumpToText)  		container.callingCurve.DumpToText (5' container.body);  }  catch (Exception e) {  	Debug.LogError ("RealHeat: Exception in Temperature Curve Calculation: " + e.StackTrace);  }  
Magic Number,RealHeat,AtmDataOrganizer,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculateNewTemperatureCurve,The following statement contains a magic number: try {  	tempCurveDataContainer container = (tempCurveDataContainer)o;  	AtmosphereComposition atmosphere = bodyOrganizedListOfAtmospheres [container.body];  	//Debug.Log("Beginning Temperature Curve Calculation");  	Curves result = atmosphere.TemperatureAsFunctionOfVelocity (100' 5' atmosphere.maxSimVelocity);  	container.callingCurve.protoTempCurve = result.temp;  	container.callingCurve.protoVelCpCurve = result.cp;  	container.callingCurve.referenceTemp = GetReferenceTemp (container.body);  	container.callingCurve.specificGasConstant = GetGasConstant (container.body);  	if (container.dumpToText)  		container.callingCurve.DumpToText (5' container.body);  }  catch (Exception e) {  	Debug.LogError ("RealHeat: Exception in Temperature Curve Calculation: " + e.StackTrace);  }  
Magic Number,RealHeat,AtmDataOrganizer,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculateNewTemperatureCurve,The following statement contains a magic number: try {  	tempCurveDataContainer container = (tempCurveDataContainer)o;  	AtmosphereComposition atmosphere = bodyOrganizedListOfAtmospheres [container.body];  	//Debug.Log("Beginning Temperature Curve Calculation");  	Curves result = atmosphere.TemperatureAsFunctionOfVelocity (100' 5' atmosphere.maxSimVelocity);  	container.callingCurve.protoTempCurve = result.temp;  	container.callingCurve.protoVelCpCurve = result.cp;  	container.callingCurve.referenceTemp = GetReferenceTemp (container.body);  	container.callingCurve.specificGasConstant = GetGasConstant (container.body);  	if (container.dumpToText)  		container.callingCurve.DumpToText (5' container.body);  }  catch (Exception e) {  	Debug.LogError ("RealHeat: Exception in Temperature Curve Calculation: " + e.StackTrace);  }  
Magic Number,RealHeat,AtmDataOrganizer,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculateNewTemperatureCurve,The following statement contains a magic number: if (container.dumpToText)  	container.callingCurve.DumpToText (5' container.body);  
Magic Number,RealHeat,AtmDataOrganizer,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculateNewTemperatureCurve,The following statement contains a magic number: container.callingCurve.DumpToText (5' container.body);  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,Initialize,The following statement contains a magic number: foreach (ConfigNode node in GameDatabase.Instance.GetConfigNodes ("RH_ATM_GAS_SPECIES")) {  	foreach (ConfigNode gasSpeciesNode in node.GetNodes ("GAS_SPECIES")) {  		if (gasSpeciesNode.GetValue ("name") == this.id) {  			Debug.Log ("Loading '" + id + "' data");  			ConfigNode thisNode = gasSpeciesNode;  			degFreedomLowTemp = int.Parse (thisNode.GetValue ("degFreedomLowTemp"));  			degFreedomHighTemp = int.Parse (thisNode.GetValue ("degFreedomHighTemp"));  			tempLowDegFreedom = float.Parse (thisNode.GetValue ("tempLowDegFreedom"));  			tempHighDegFreedom = float.Parse (thisNode.GetValue ("tempHighDegFreedom"));  			tempBeginDecomposition = float.Parse (thisNode.GetValue ("tempBeginDecomposition"));  			tempEndDecomposition = float.Parse (thisNode.GetValue ("tempEndDecomposition"));  			float molecularMass = float.Parse (thisNode.GetValue ("molecularMass"));  			specificGasConstant = UniversalGasConstant / molecularMass;  			heatOfFormation = float.Parse (thisNode.GetValue ("heatOfFormation")) / molecularMass * 1000000;  			decompositionSpeciesWithFraction = new Dictionary<AtmosphericGasSpecies' float> ();  			foreach (ConfigNode decompositionGasSpeciesNode in thisNode.GetNodes ("DECOMPOSITION_SPECIES")) {  				AtmosphericGasSpecies decompositionSpecies = AtmDataOrganizer.idOrganizedListOfGasSpecies [decompositionGasSpeciesNode.GetValue ("name")];  				float massFraction = float.Parse (decompositionGasSpeciesNode.GetValue ("massFraction"));  				decompositionSpeciesWithFraction.Add (decompositionSpecies' massFraction);  			}  			break;  		}  	}  }  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,Initialize,The following statement contains a magic number: foreach (ConfigNode gasSpeciesNode in node.GetNodes ("GAS_SPECIES")) {  	if (gasSpeciesNode.GetValue ("name") == this.id) {  		Debug.Log ("Loading '" + id + "' data");  		ConfigNode thisNode = gasSpeciesNode;  		degFreedomLowTemp = int.Parse (thisNode.GetValue ("degFreedomLowTemp"));  		degFreedomHighTemp = int.Parse (thisNode.GetValue ("degFreedomHighTemp"));  		tempLowDegFreedom = float.Parse (thisNode.GetValue ("tempLowDegFreedom"));  		tempHighDegFreedom = float.Parse (thisNode.GetValue ("tempHighDegFreedom"));  		tempBeginDecomposition = float.Parse (thisNode.GetValue ("tempBeginDecomposition"));  		tempEndDecomposition = float.Parse (thisNode.GetValue ("tempEndDecomposition"));  		float molecularMass = float.Parse (thisNode.GetValue ("molecularMass"));  		specificGasConstant = UniversalGasConstant / molecularMass;  		heatOfFormation = float.Parse (thisNode.GetValue ("heatOfFormation")) / molecularMass * 1000000;  		decompositionSpeciesWithFraction = new Dictionary<AtmosphericGasSpecies' float> ();  		foreach (ConfigNode decompositionGasSpeciesNode in thisNode.GetNodes ("DECOMPOSITION_SPECIES")) {  			AtmosphericGasSpecies decompositionSpecies = AtmDataOrganizer.idOrganizedListOfGasSpecies [decompositionGasSpeciesNode.GetValue ("name")];  			float massFraction = float.Parse (decompositionGasSpeciesNode.GetValue ("massFraction"));  			decompositionSpeciesWithFraction.Add (decompositionSpecies' massFraction);  		}  		break;  	}  }  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,Initialize,The following statement contains a magic number: if (gasSpeciesNode.GetValue ("name") == this.id) {  	Debug.Log ("Loading '" + id + "' data");  	ConfigNode thisNode = gasSpeciesNode;  	degFreedomLowTemp = int.Parse (thisNode.GetValue ("degFreedomLowTemp"));  	degFreedomHighTemp = int.Parse (thisNode.GetValue ("degFreedomHighTemp"));  	tempLowDegFreedom = float.Parse (thisNode.GetValue ("tempLowDegFreedom"));  	tempHighDegFreedom = float.Parse (thisNode.GetValue ("tempHighDegFreedom"));  	tempBeginDecomposition = float.Parse (thisNode.GetValue ("tempBeginDecomposition"));  	tempEndDecomposition = float.Parse (thisNode.GetValue ("tempEndDecomposition"));  	float molecularMass = float.Parse (thisNode.GetValue ("molecularMass"));  	specificGasConstant = UniversalGasConstant / molecularMass;  	heatOfFormation = float.Parse (thisNode.GetValue ("heatOfFormation")) / molecularMass * 1000000;  	decompositionSpeciesWithFraction = new Dictionary<AtmosphericGasSpecies' float> ();  	foreach (ConfigNode decompositionGasSpeciesNode in thisNode.GetNodes ("DECOMPOSITION_SPECIES")) {  		AtmosphericGasSpecies decompositionSpecies = AtmDataOrganizer.idOrganizedListOfGasSpecies [decompositionGasSpeciesNode.GetValue ("name")];  		float massFraction = float.Parse (decompositionGasSpeciesNode.GetValue ("massFraction"));  		decompositionSpeciesWithFraction.Add (decompositionSpecies' massFraction);  	}  	break;  }  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,Initialize,The following statement contains a magic number: heatOfFormation = float.Parse (thisNode.GetValue ("heatOfFormation")) / molecularMass * 1000000;  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,Initialize,The following statement contains a magic number: constantsCpCurve [2] = 6f * tempLowDegFreedom * tempHighDegFreedom * tmp;  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,Initialize,The following statement contains a magic number: constantsCpCurve [3] = tempLowDegFreedom * tempLowDegFreedom * (tempLowDegFreedom - 3f * tempHighDegFreedom) * tmp + CpLowTemp;  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,Initialize,The following statement contains a magic number: constantsDecompositionCurve [2] = -6f * tempBeginDecomposition * tempEndDecomposition * tmp;  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,Initialize,The following statement contains a magic number: constantsDecompositionCurve [3] = -tempBeginDecomposition * tempBeginDecomposition * (tempBeginDecomposition - 3f * tempEndDecomposition) * tmp + 1f;  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculateCp,The following statement contains a magic number: if (temp <= tempLowDegFreedom)  	return CpLowTemp;  else if (temp >= tempHighDegFreedom)  	return CpHighTemp;  else {  	float Cp = constantsCpCurve [0] * temp;  	Cp += constantsCpCurve [1];  	Cp *= temp;  	Cp += constantsCpCurve [2];  	Cp *= temp;  	Cp += constantsCpCurve [3];  	return Cp;  }  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculateCp,The following statement contains a magic number: if (temp <= tempLowDegFreedom)  	return CpLowTemp;  else if (temp >= tempHighDegFreedom)  	return CpHighTemp;  else {  	float Cp = constantsCpCurve [0] * temp;  	Cp += constantsCpCurve [1];  	Cp *= temp;  	Cp += constantsCpCurve [2];  	Cp *= temp;  	Cp += constantsCpCurve [3];  	return Cp;  }  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculateCp,The following statement contains a magic number: if (temp >= tempHighDegFreedom)  	return CpHighTemp;  else {  	float Cp = constantsCpCurve [0] * temp;  	Cp += constantsCpCurve [1];  	Cp *= temp;  	Cp += constantsCpCurve [2];  	Cp *= temp;  	Cp += constantsCpCurve [3];  	return Cp;  }  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculateCp,The following statement contains a magic number: if (temp >= tempHighDegFreedom)  	return CpHighTemp;  else {  	float Cp = constantsCpCurve [0] * temp;  	Cp += constantsCpCurve [1];  	Cp *= temp;  	Cp += constantsCpCurve [2];  	Cp *= temp;  	Cp += constantsCpCurve [3];  	return Cp;  }  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculateCp,The following statement contains a magic number: Cp += constantsCpCurve [2];  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculateCp,The following statement contains a magic number: Cp += constantsCpCurve [3];  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,Calculate_dCp_dT,The following statement contains a magic number: if (temp <= tempLowDegFreedom)  	return 0f;  else if (temp >= tempHighDegFreedom)  	return 0f;  else {  	float dCp_dT = 3f * constantsCpCurve [0] * temp;  	dCp_dT += 2f * constantsCpCurve [1];  	dCp_dT *= temp;  	dCp_dT += constantsCpCurve [2];  	return dCp_dT;  }  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,Calculate_dCp_dT,The following statement contains a magic number: if (temp >= tempHighDegFreedom)  	return 0f;  else {  	float dCp_dT = 3f * constantsCpCurve [0] * temp;  	dCp_dT += 2f * constantsCpCurve [1];  	dCp_dT *= temp;  	dCp_dT += constantsCpCurve [2];  	return dCp_dT;  }  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,Calculate_dCp_dT,The following statement contains a magic number: dCp_dT += constantsCpCurve [2];  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculatePhi,The following statement contains a magic number: if (temp <= tempBeginDecomposition)  	return 1f;  else if (temp >= tempEndDecomposition)  	return 0f;  else {  	float Phi = constantsDecompositionCurve [0] * temp;  	Phi += constantsDecompositionCurve [1];  	Phi *= temp;  	Phi += constantsDecompositionCurve [2];  	Phi *= temp;  	Phi += constantsDecompositionCurve [3];  	return Phi;  }  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculatePhi,The following statement contains a magic number: if (temp <= tempBeginDecomposition)  	return 1f;  else if (temp >= tempEndDecomposition)  	return 0f;  else {  	float Phi = constantsDecompositionCurve [0] * temp;  	Phi += constantsDecompositionCurve [1];  	Phi *= temp;  	Phi += constantsDecompositionCurve [2];  	Phi *= temp;  	Phi += constantsDecompositionCurve [3];  	return Phi;  }  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculatePhi,The following statement contains a magic number: if (temp >= tempEndDecomposition)  	return 0f;  else {  	float Phi = constantsDecompositionCurve [0] * temp;  	Phi += constantsDecompositionCurve [1];  	Phi *= temp;  	Phi += constantsDecompositionCurve [2];  	Phi *= temp;  	Phi += constantsDecompositionCurve [3];  	return Phi;  }  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculatePhi,The following statement contains a magic number: if (temp >= tempEndDecomposition)  	return 0f;  else {  	float Phi = constantsDecompositionCurve [0] * temp;  	Phi += constantsDecompositionCurve [1];  	Phi *= temp;  	Phi += constantsDecompositionCurve [2];  	Phi *= temp;  	Phi += constantsDecompositionCurve [3];  	return Phi;  }  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculatePhi,The following statement contains a magic number: Phi += constantsDecompositionCurve [2];  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,CalculatePhi,The following statement contains a magic number: Phi += constantsDecompositionCurve [3];  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,Calculate_dPhi_dT,The following statement contains a magic number: if (temp <= tempBeginDecomposition)  	return 0f;  else if (temp >= tempEndDecomposition)  	return 0f;  else {  	float dPhi_dT = 3f * constantsDecompositionCurve [0] * temp;  	dPhi_dT += 2f * constantsDecompositionCurve [1];  	dPhi_dT *= temp;  	dPhi_dT += constantsDecompositionCurve [2];  	return dPhi_dT;  }  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,Calculate_dPhi_dT,The following statement contains a magic number: if (temp >= tempEndDecomposition)  	return 0f;  else {  	float dPhi_dT = 3f * constantsDecompositionCurve [0] * temp;  	dPhi_dT += 2f * constantsDecompositionCurve [1];  	dPhi_dT *= temp;  	dPhi_dT += constantsDecompositionCurve [2];  	return dPhi_dT;  }  
Magic Number,RealHeat,AtmosphericGasSpecies,C:\repos\KSP-RO_RealHeat\Source\AtmData.cs,Calculate_dPhi_dT,The following statement contains a magic number: dPhi_dT += constantsDecompositionCurve [2];  
