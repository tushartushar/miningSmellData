Implementation smell,Namespace,Class,File,Method,Description
Long Statement,MtLogTailer,Program,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\Program.cs,ThrowInvalidArgs,The length of the statement  "	throw new ApplicationException ("Invalid args. Should use MtLogTailer.exe <filePath> (-encoding:int)? (-readFromLast:bool)?"); " is 126.
Long Statement,MtLogTailer,Program,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\Program.cs,Log,The length of the statement  "		var message = string.Format ("-\t{0}\t{1}\t{2}\t{3}"' level.ToString ().ToUpperInvariant ()' FormatTime ()' _version' string.Format (format' args)); " is 148.
Long Statement,MtLogTailer,LogShipper,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\LogShipper.cs,Process,The length of the statement  "			Program.Log (LogLevel.Info' "File '{0}' has changed. Current offset: {1}' previous last write time {2}' file length {3}. Processing..."' _filePath' _offset' _lastWriteTime.ToString ("yyyy-MM-ddTHH:mm:ss.fffffffZ")' stream.Length); " is 230.
Long Statement,MtLogTailer,LogShipper,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\LogShipper.cs,ReadLine,The length of the statement  "				Program.Log (LogLevel.Warn' "File '{0}': incomplete UTF8 char in the log ending is detected. Re-try later."' _filePath); " is 120.
Long Statement,MtLogTailer,LogShipper,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\LogShipper.cs,FormatEncodingMessage,The length of the statement  "	var message = string.Format ("Error when reading a char. File '{0}'' encoding '{1}'' started at {2}' ended at {3}' " + "total length {4}' bytes {5}."' _filePath' _encoding.EncodingName' startPosition' curPosition' stream.Length' Convert.ToBase64String (bytes)); " is 261.
Long Statement,MtLogTailer,LogShipper,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\LogShipper.cs,EnsureInitDone,The length of the statement  "	Program.Log (LogLevel.Info' "LogShipper.Init() done. File '{0}'' encoding: {1}' start offset: {2}"' _filePath' _encoding.EncodingName' _startOffset); " is 149.
Long Statement,MtLogTailer,LogShipper,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\LogShipper.cs,OpenStream,The length of the statement  "	var stream = new FileStream (_filePath' FileMode.Open' FileAccess.Read' FileShare.ReadWrite | FileShare.Delete' BufSize); " is 121.
Complex Conditional,MtLogTailer,FileUtil,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\FileUtil.cs,DetectEncoding,The conditional expression  "bom [0] == 0 && bom [1] == 0 && bom [2] == 0xfe && bom [3] == 0xff"  is complex.
Complex Conditional,MtLogTailer,LogShipper,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\LogShipper.cs,ReadLine,The conditional expression  "ch == '\r' && chNext == '\n' || ch == '\n' && chNext == '\r'"  is complex.
Empty Catch Block,MtLogTailer,Program,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\Program.cs,Main,The method has an empty catch block.
Magic Number,MtLogTailer,CommandLineUtil,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\CommandLineUtil.cs,ParseArgs,The following statement contains a magic number: foreach (var argRaw in args) {  	var arg = argRaw;  	if (arg.StartsWith ("-") || arg.StartsWith ("/")) {  		arg = arg.Substring (1);  		if (!arg.Contains (":")) {  			res.Add (""' arg);  		} else {  			var parts = arg.Split (':');  			var value = parts [1];  			if (parts.Count () > 2) {  				value = string.Join (":"' parts.Skip (1));  			}  			res.Add (parts [0]' value);  		}  	} else {  		res.Add (""' arg);  	}  }  
Magic Number,MtLogTailer,CommandLineUtil,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\CommandLineUtil.cs,ParseArgs,The following statement contains a magic number: if (arg.StartsWith ("-") || arg.StartsWith ("/")) {  	arg = arg.Substring (1);  	if (!arg.Contains (":")) {  		res.Add (""' arg);  	} else {  		var parts = arg.Split (':');  		var value = parts [1];  		if (parts.Count () > 2) {  			value = string.Join (":"' parts.Skip (1));  		}  		res.Add (parts [0]' value);  	}  } else {  	res.Add (""' arg);  }  
Magic Number,MtLogTailer,CommandLineUtil,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\CommandLineUtil.cs,ParseArgs,The following statement contains a magic number: if (!arg.Contains (":")) {  	res.Add (""' arg);  } else {  	var parts = arg.Split (':');  	var value = parts [1];  	if (parts.Count () > 2) {  		value = string.Join (":"' parts.Skip (1));  	}  	res.Add (parts [0]' value);  }  
Magic Number,MtLogTailer,CommandLineUtil,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\CommandLineUtil.cs,ParseArgs,The following statement contains a magic number: if (parts.Count () > 2) {  	value = string.Join (":"' parts.Skip (1));  }  
Magic Number,MtLogTailer,FileUtil,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\FileUtil.cs,DetectEncoding,The following statement contains a magic number: if (bom [0] == 0x2b && bom [1] == 0x2f && bom [2] == 0x76) {  	stream.Position = stream.Position - 1;  	return Encoding.UTF7;  }  
Magic Number,MtLogTailer,FileUtil,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\FileUtil.cs,DetectEncoding,The following statement contains a magic number: if (bom [0] == 0xef && bom [1] == 0xbb && bom [2] == 0xbf) {  	stream.Position = stream.Position - 1;  	return Encoding.UTF8;  }  
Magic Number,MtLogTailer,FileUtil,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\FileUtil.cs,DetectEncoding,The following statement contains a magic number: if (bom [0] == 0xff && bom [1] == 0xfe) {  	stream.Position = stream.Position - 2;  	return Encoding.Unicode;  }  
Magic Number,MtLogTailer,FileUtil,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\FileUtil.cs,DetectEncoding,The following statement contains a magic number: stream.Position = stream.Position - 2;  
Magic Number,MtLogTailer,FileUtil,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\FileUtil.cs,DetectEncoding,The following statement contains a magic number: if (bom [0] == 0xfe && bom [1] == 0xff) {  	stream.Position = stream.Position - 2;  	return Encoding.BigEndianUnicode;  }  
Magic Number,MtLogTailer,FileUtil,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\FileUtil.cs,DetectEncoding,The following statement contains a magic number: stream.Position = stream.Position - 2;  
Magic Number,MtLogTailer,FileUtil,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\FileUtil.cs,DetectEncoding,The following statement contains a magic number: if (bom [0] == 0 && bom [1] == 0 && bom [2] == 0xfe && bom [3] == 0xff)  	return Encoding.UTF32;  
Magic Number,MtLogTailer,FileUtil,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\FileUtil.cs,DetectEncoding,The following statement contains a magic number: if (bom [0] == 0 && bom [1] == 0 && bom [2] == 0xfe && bom [3] == 0xff)  	return Encoding.UTF32;  
Magic Number,MtLogTailer,Program,F:\newReposMay17\cityindex_LogSearchShipper\src\MtLogTailer\Program.cs,Main,The following statement contains a magic number: try {  	Log (LogLevel.Info' "Starting MT4 tailer process");  	InitLogging ();  	var argsDic = CommandLineUtil.ParseArgs (args);  	string path;  	if (!argsDic.TryGetValue (""' out path))  		ThrowInvalidArgs ();  	//Default to gb2312-> ANSI/OEM Simplified Chinese (PRC' Singapore); Chinese Simplified (GB2312)  	var encoding = 936;  	string encodingText;  	if (argsDic.TryGetValue ("encoding"' out encodingText))  		encoding = Convert.ToInt32 (encodingText);  	var readFromLast = true;  	string readFromLastText;  	if (argsDic.TryGetValue ("readFromLast"' out readFromLastText))  		readFromLast = bool.Parse (readFromLastText);  	Console.OutputEncoding = Encoding.UTF8;  	Log (LogLevel.Info' "path: {0}' readFromLast: {1}' default encoding: {2}"' path' readFromLast' encoding);  	var watcher = new PathWatcher (path' encoding' readFromLast);  	Console.CancelKeyPress += (sender' eventArgs) => {  		Terminate = true;  		watcher.Stop ();  		eventArgs.Cancel = true;  	};  	watcher.Process ();  } catch (ThreadInterruptedException) {  } catch (ApplicationException exc) {  	LogError (exc.Message);  } catch (Exception exc) {  	LogError (exc.ToString ());  }  
