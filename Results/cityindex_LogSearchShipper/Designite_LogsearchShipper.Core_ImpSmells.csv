Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,LogSearchShipper.Core,EDBFileWatchParser,C:\repos\cityindex_LogSearchShipper\src\LogsearchShipper.Core\EDBFileWatchParser.cs,AddFileWatchElementForLogFile,The method has 7 parameters. Parameters: logFile' logType' watches' fields' serverNetworkArea' serverName' serviceName
Long Parameter List,LogSearchShipper.Core.NxLog,NativeMethods,C:\repos\cityindex_LogSearchShipper\src\LogsearchShipper.Core\NxLog\NativeMethods.cs,CreateService,The method has 13 parameters. Parameters: hSCManager' lpServiceName' lpDisplayName' dwDesiredAccess' dwServiceType' dwStartType' dwErrorControl' lpBinaryPathName' lpLoadOrderGroup' lpdwTagId' lpDependencies' lpServiceStartName' lpPassword
Long Identifier,LogSearchShipper.Core,LogSearchShipperProcessManager,C:\repos\cityindex_LogSearchShipper\src\LogsearchShipper.Core\LogsearchShipperProcessManager.cs,,The length of the parameter _environmentDiagramLoggingTimers is 32.
Long Identifier,LogSearchShipper.Core.NxLog,NxLogProcessManager,C:\repos\cityindex_LogSearchShipper\src\LogsearchShipper.Core\NxLog\NxLogProcessManager.cs,,The length of the parameter _lastNxlogProcessorSecondsUsed is 30.
Long Statement,LogSearchShipper.Core,LogSearchShipperProcessManager,C:\repos\cityindex_LogSearchShipper\src\LogsearchShipper.Core\LogsearchShipperProcessManager.cs,StartLoggingEnvironmentData,The length of the statement  "			var period = Convert.ToInt64(TimeSpan.FromMinutes(envWatchElement.LogEnvironmentDiagramDataEveryMinutes).TotalMilliseconds); " is 124.
Long Statement,LogSearchShipper.Core,EDBFileWatchParser,C:\repos\cityindex_LogSearchShipper\src\LogsearchShipper.Core\EDBFileWatchParser.cs,AddFileWatchElementForLogFile,The length of the statement  "					"Added file watch from EDB: {0} ({1}) => Matched NetworkArea:{2} ~= {3}' ServerName:{4} ~= {5}' ServiceName:{6} ~= {7}"' " is 120.
Long Statement,LogSearchShipper.Core.NxLog,NxLogProcessManager,C:\repos\cityindex_LogSearchShipper\src\LogsearchShipper.Core\NxLog\NxLogProcessManager.cs,ReportCpuUsage,The length of the statement  "				var messageNormalized = new Dictionary<string' object> { { name + "Normalized"' averageProcessorUsage / Environment.ProcessorCount } }; " is 135.
Long Statement,LogSearchShipper.Core.NxLog,NxLogProcessManager,C:\repos\cityindex_LogSearchShipper\src\LogsearchShipper.Core\NxLog\NxLogProcessManager.cs,AppendCustomFields,The length of the statement  "					var message = string.Format("fileWatch: '{0}' contains invalid field name '{1}' (must contain letters' digits' slashes and underscores only)"' " is 142.
Long Statement,LogSearchShipper.Core.NxLog,NxLogProcessManager,C:\repos\cityindex_LogSearchShipper\src\LogsearchShipper.Core\NxLog\NxLogProcessManager.cs,GenerateWinEventWatcherConfig,The length of the statement  "	Exec delete ($EventID); delete ($EventType); delete ($Keywords); delete ($Task); delete ($RecordNumber); delete ($ProcessID); " is 125.
Long Statement,LogSearchShipper.Core.NxLog,NxLogProcessManager,C:\repos\cityindex_LogSearchShipper\src\LogsearchShipper.Core\NxLog\NxLogProcessManager.cs,InitTimeZoneOffset,The length of the statement  "			// nxlog doesn't handle time zone correctly' so we need to set the correct time zone variable to be used in the nxlog config file " is 129.
Magic Number,LogSearchShipper.Core,JSONFragmentPatternConverter,C:\repos\cityindex_LogSearchShipper\src\LogsearchShipper.Core\CustomPatternLayoutConverter.cs,Convert,The following statement contains a magic number: if (json.StartsWith("{") && json.EndsWith("}"))  				json = json.Substring(1' json.Length - 2);
Magic Number,LogSearchShipper.Core,ProcessUtils,C:\repos\cityindex_LogSearchShipper\src\LogsearchShipper.Core\ProcessUtils.cs,Execute,The following statement contains a magic number: if (!process.WaitForExit(10 * 1000) || process.ExitCode != 0)  				throw new ApplicationException(buf.ToString());
Magic Number,LogSearchShipper.Core,ProcessUtils,C:\repos\cityindex_LogSearchShipper\src\LogsearchShipper.Core\ProcessUtils.cs,Execute,The following statement contains a magic number: if (!process.WaitForExit(10 * 1000) || process.ExitCode != 0)  				throw new ApplicationException(buf.ToString());
Magic Number,LogSearchShipper.Core.NxLog,NxLogProcessManager,C:\repos\cityindex_LogSearchShipper\src\LogsearchShipper.Core\NxLog\NxLogProcessManager.cs,NxLogProcessManager,The following statement contains a magic number: if (_serviceName.Length > 80)  				_serviceName = _serviceName.Substring(0' 80);
Magic Number,LogSearchShipper.Core.NxLog,NxLogProcessManager,C:\repos\cityindex_LogSearchShipper\src\LogsearchShipper.Core\NxLog\NxLogProcessManager.cs,NxLogProcessManager,The following statement contains a magic number: if (_serviceName.Length > 80)  				_serviceName = _serviceName.Substring(0' 80);
Magic Number,LogSearchShipper.Core.NxLog,NxLogProcessManager,C:\repos\cityindex_LogSearchShipper\src\LogsearchShipper.Core\NxLog\NxLogProcessManager.cs,StartNxLogProcess,The following statement contains a magic number: lock (_sync)  			{  				_lastProcessorUsageSentTime = DateTime.UtcNow;  				_lastProcessorSecondsUsed = 0;  				_lastNxlogProcessorSecondsUsed = 0;                    _processorUsageReportingTimer = new System.Timers.Timer                  {                      AutoReset = false'                      Interval = ProcessorUsageReportingIntervalSeconds*1000                  };                  _processorUsageReportingTimer.Elapsed += _processorUsageReportingTimer_Elapsed;  				_processorUsageReportingTimer.Start();  			}
Magic Number,LogSearchShipper.Core.NxLog,NxLogProcessManager,C:\repos\cityindex_LogSearchShipper\src\LogsearchShipper.Core\NxLog\NxLogProcessManager.cs,ReportCpuUsage,The following statement contains a magic number: if (lastProcessorSecondsUsed > 0)  			{  				var secondsPassed = (DateTime.UtcNow - lastSentTime).TotalSeconds;  				var averageProcessorUsage = ((processorSecondsUsed - lastProcessorSecondsUsed) / secondsPassed) * 100;    				var message = new Dictionary<string' object> { { name' averageProcessorUsage } };  				_log.Info(message);    				var messageNormalized = new Dictionary<string' object> { { name + "Normalized"' averageProcessorUsage / Environment.ProcessorCount } };  				_log.Info(messageNormalized);  			}
Magic Number,LogSearchShipper.Core.NxLog,NxLogProcessManager,C:\repos\cityindex_LogSearchShipper\src\LogsearchShipper.Core\NxLog\NxLogProcessManager.cs,GenerateNormalFileWatchConfig,The following statement contains a magic number: res += string.Format(@"  <Input in_file{0}>  	Module	im_file  	InputType	{8}  	File	""{1}""  	ReadFromLast {2}  	SavePos	TRUE  	CloseWhenIdle {7}  	PollInterval {5}  	DirCheckInterval {6}  	Exec	$path = ""{3}""; $type = ""{4}"";  "'  				i'  				inputFileEscaped'  				inputFile.ReadFromLast.ToString().ToUpper()'  				inputFile.Files'  				inputFile.Type'  				FilePollIntervalSeconds'  				FilePollIntervalSeconds * 2'  				inputFile.CloseWhenIdle.ToString().ToUpper()'  				inputFile.MultilineRule);
Magic Number,LogSearchShipper.Core.NxLog,ServiceControllerEx,C:\repos\cityindex_LogSearchShipper\src\LogsearchShipper.Core\NxLog\ServiceControllerEx.cs,StopService,The following statement contains a magic number: var timeout = TimeSpan.FromMinutes(2);
