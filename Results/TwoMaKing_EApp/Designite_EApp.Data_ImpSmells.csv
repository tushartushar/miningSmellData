Implementation smell,Namespace,Class,File,Method,Description
Long Method,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,CreateParamInfoGenerator,The method has 324 lines of code.
Long Method,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetTypeDeserializer,The method has 281 lines of code.
Long Method,Dappers,DynamicParameters,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,AddParameters,The method has 118 lines of code.
Long Method,Dappers,DynamicParameters,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Output,The method has 124 lines of code.
Complex Method,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,PrepareStoredProcedureStringCommand,Cyclomatic complexity of the method is 10
Complex Method,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,Insert,Cyclomatic complexity of the method is 12
Complex Method,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,Update,Cyclomatic complexity of the method is 14
Complex Method,EApp.Data.MySql,MySqlDbProvider,C:\repos\TwoMaKing_EApp\EApp.Data\MySql\MySqlDbProvider.cs,AdjustParameter,Cyclomatic complexity of the method is 14
Complex Method,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,AddTypeHandlerImpl,Cyclomatic complexity of the method is 8
Complex Method,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,LookupDbType,Cyclomatic complexity of the method is 9
Complex Method,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,QueryImpl,Cyclomatic complexity of the method is 8
Complex Method,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,MultiMapImpl,Cyclomatic complexity of the method is 9
Complex Method,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,MultiMapImpl,Cyclomatic complexity of the method is 9
Complex Method,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,CreateParamInfoGenerator,Cyclomatic complexity of the method is 35
Complex Method,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetTypeDeserializer,Cyclomatic complexity of the method is 17
Complex Method,Dappers,DynamicParameters,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,AddParameters,Cyclomatic complexity of the method is 12
Complex Method,Dappers,DefaultTypeMap,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,FindConstructor,Cyclomatic complexity of the method is 9
Complex Method,EApp.Data.SqlServer,SqlServerDbProvider,C:\repos\TwoMaKing_EApp\EApp.Data\SqlServer\SqlServerDbProvider.cs,AdjustParameter,Cyclomatic complexity of the method is 14
Complex Method,EApp.Data.SqlServer,SqlServerStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\SqlServer\SqlServerStatementFactory.cs,CreateSelectRangeStatementForSortedRows,Cyclomatic complexity of the method is 8
Complex Method,EApp.Data.SqlServer,SqlServerStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\SqlServer\SqlServerStatementFactory.cs,CreateSelectRangeStatementForUnsortedRows,Cyclomatic complexity of the method is 8
Long Parameter List,EApp.Data,Database,C:\repos\TwoMaKing_EApp\EApp.Data\Database.cs,CreateAndCacheDbCommandParameters,The method has 5 parameters. Parameters: sqlCommandText' command' paramNames' paramDbTypes' paramValues
Long Parameter List,EApp.Data,Database,C:\repos\TwoMaKing_EApp\EApp.Data\Database.cs,DoUpdateDataSet,The method has 5 parameters. Parameters: dataSet' tableName' insertCommand' updateCommand' deleteCommand
Long Parameter List,EApp.Data,Database,C:\repos\TwoMaKing_EApp\EApp.Data\Database.cs,ConfigureParameter,The method has 11 parameters. Parameters: param' name' dbType' size' direction' nullable' precision' scale' sourceColumn' sourceVersion' value
Long Parameter List,EApp.Data,Database,C:\repos\TwoMaKing_EApp\EApp.Data\Database.cs,CreateParameter,The method has 10 parameters. Parameters: name' dbtype' size' direction' nullable' precision' scale' sourceColumn' sourceVersion' value
Long Parameter List,EApp.Data,Database,C:\repos\TwoMaKing_EApp\EApp.Data\Database.cs,LoadDataSet,The method has 5 parameters. Parameters: transaction' commandType' commandText' dataSet' tableNames
Long Parameter List,EApp.Data,Database,C:\repos\TwoMaKing_EApp\EApp.Data\Database.cs,LoadDataSet,The method has 5 parameters. Parameters: transaction' commandType' commandText' dataSet' tableName
Long Parameter List,EApp.Data,Database,C:\repos\TwoMaKing_EApp\EApp.Data\Database.cs,UpdateDataSet,The method has 6 parameters. Parameters: dataSet' tableName' insertCommand' updateCommand' deleteCommand' transaction
Long Parameter List,EApp.Data,Database,C:\repos\TwoMaKing_EApp\EApp.Data\Database.cs,UpdateDataSet,The method has 5 parameters. Parameters: dataSet' tableName' insertCommand' updateCommand' deleteCommand
Long Parameter List,EApp.Data,Database,C:\repos\TwoMaKing_EApp\EApp.Data\Database.cs,AddParameter,The method has 11 parameters. Parameters: command' name' dbtype' size' direction' nullable' precision' scale' sourceColumn' sourceVersion' value
Long Parameter List,EApp.Data,Database,C:\repos\TwoMaKing_EApp\EApp.Data\Database.cs,AddParameter,The method has 7 parameters. Parameters: command' name' dbtype' direction' sourceColumn' sourceVersion' value
Long Parameter List,EApp.Data,Database,C:\repos\TwoMaKing_EApp\EApp.Data\Database.cs,AddInParameter,The method has 5 parameters. Parameters: command' name' dbType' sourceColumn' sourceVersion
Long Parameter List,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,PrepareStoredProcedureStringCommand,The method has 6 parameters. Parameters: procedureName' inParamNames' inParamDbTypes' inParamValues' outParamNames' outParamDbTypes
Long Parameter List,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,Insert,The method has 5 parameters. Parameters: table' columns' dbTypes' values' transaction
Long Parameter List,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,Update,The method has 6 parameters. Parameters: table' columns' values' where' whereValues' transaction
Long Parameter List,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,Update,The method has 8 parameters. Parameters: table' columns' dbTypes' values' where' whereDbTypes' whereValues' transaction
Long Parameter List,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,Delete,The method has 5 parameters. Parameters: table' where' whereDbTypes' whereValues' transaction
Long Parameter List,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,ExecuteStoredProcedure,The method has 5 parameters. Parameters: storedProcedureName' inParamNames' inParamDbTypes' inParamValues' transaction
Long Parameter List,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,ExecuteStoredProcedure,The method has 8 parameters. Parameters: storedProcedureName' inParamNames' inParamDbTypes' inParamValues' outParamNames' outParamDbTypes' outValues' transaction
Long Parameter List,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,SelectReader,The method has 5 parameters. Parameters: table' columns' where' whereValues' transaction
Long Parameter List,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,SelectReader,The method has 5 parameters. Parameters: table' columns' where' whereValues' orderBy
Long Parameter List,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,SelectReader,The method has 6 parameters. Parameters: table' columns' where' whereValues' orderBy' transaction
Long Parameter List,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,SelectReader,The method has 6 parameters. Parameters: table' columns' where' whereDbTypes' whereValues' orderBy
Long Parameter List,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,SelectReader,The method has 7 parameters. Parameters: table' columns' where' whereDbTypes' whereValues' orderBy' transaction
Long Parameter List,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,SelectReader,The method has 5 parameters. Parameters: sqlBuilder' pageNumber' pageSize' identityColumn' identityColumnIsNumber
Long Parameter List,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,SelectReader,The method has 10 parameters. Parameters: table' columns' where' whereValues' orderBy' groupBy' pageNumber' pageSize' identityColumn' identityColumnIsNumber
Long Parameter List,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,SelectDataSet,The method has 5 parameters. Parameters: table' columns' where' whereValues' transaction
Long Parameter List,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,SelectDataSet,The method has 5 parameters. Parameters: table' columns' where' whereValues' orderBy
Long Parameter List,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,SelectDataSet,The method has 6 parameters. Parameters: table' columns' where' whereValues' orderBy' transaction
Long Parameter List,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,SelectDataSet,The method has 6 parameters. Parameters: table' columns' where' whereDbTypes' whereValues' orderBy
Long Parameter List,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,SelectDataSet,The method has 7 parameters. Parameters: table' columns' where' whereDbTypes' whereValues' orderBy' transaction
Long Parameter List,EApp.Data,DbParameterCache,C:\repos\TwoMaKing_EApp\EApp.Data\DbParameterCache.cs,CreateAndCacheParameters,The method has 5 parameters. Parameters: key' cmd' names' types' values
Long Parameter List,EApp.Data,ISqlStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\ISqlStatementFactory.cs,CreateSelectRangeStatement,The method has 9 parameters. Parameters: tableName' where' orderBy' topCount' skipCount' identityColumn' identityColumnIsNumber' groupBy' includedColumns
Long Parameter List,EApp.Data,SqlQueryUtils,C:\repos\TwoMaKing_EApp\EApp.Data\SqlQueryUtils.cs,ReplaceDatabaseTokens,The method has 6 parameters. Parameters: sql' leftToken' rightToken' paramPrefixToken' wildcharToken' wildsinglecharToken
Long Parameter List,EApp.Data,SqlStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\SqlStatementFactory.cs,CreateSelectRangeStatement,The method has 9 parameters. Parameters: tableName' where' orderBy' topCount' skipCount' identityColumn' identityColumnIsNumber' groupBy' includedColumns
Long Parameter List,EApp.Data,SqlStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\SqlStatementFactory.cs,CreateSelectTopStatement,The method has 6 parameters. Parameters: tableName' where' columns' orderBy' groupBy' topCount
Long Parameter List,EApp.Data,SqlStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\SqlStatementFactory.cs,CreateSelectRangeStatementForSortedRows,The method has 9 parameters. Parameters: tableName' where' columns' orderBy' groupBy' topCount' skipCount' identityColumn' isIdentityColumnDesc
Long Parameter List,EApp.Data,SqlStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\SqlStatementFactory.cs,CreateSelectRangeStatementForUnsortedRows,The method has 8 parameters. Parameters: tableName' where' columns' orderBy' groupBy' topCount' skipCount' identyColumn
Long Parameter List,EApp.Data.MySql,MySqlStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\MySql\MySqlStatementFactory.cs,CreateSelectTopStatement,The method has 6 parameters. Parameters: tableName' where' columns' orderBy' groupBy' topCount
Long Parameter List,EApp.Data.MySql,MySqlStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\MySql\MySqlStatementFactory.cs,CreateSelectRangeStatementForSortedRows,The method has 9 parameters. Parameters: tableName' where' columns' orderBy' groupBy' topCount' skipCount' identityColumn' isIdentityColumnDesc
Long Parameter List,EApp.Data.MySql,MySqlStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\MySql\MySqlStatementFactory.cs,CreateSelectRangeStatementForUnsortedRows,The method has 8 parameters. Parameters: tableName' where' columns' orderBy' groupBy' topCount' skipCount' identyColumn
Long Parameter List,EApp.Data.Oracle,OracleStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\Oracle\OracleStatementFactory.cs,CreateSelectTopStatement,The method has 6 parameters. Parameters: tableName' where' columns' orderBy' groupBy' topCount
Long Parameter List,EApp.Data.Oracle,OracleStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\Oracle\OracleStatementFactory.cs,CreateSelectRangeStatementForSortedRows,The method has 9 parameters. Parameters: tableName' where' columns' orderBy' groupBy' topCount' skipCount' identityColumn' isIdentityColumnDesc
Long Parameter List,EApp.Data.Oracle,OracleStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\Oracle\OracleStatementFactory.cs,CreateSelectRangeStatementForUnsortedRows,The method has 8 parameters. Parameters: tableName' where' columns' orderBy' groupBy' topCount' skipCount' identyColumn
Long Parameter List,EApp.Data.SqlLite,SqlLiteStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\SqlLite\SqlLiteStatementFactory.cs,CreateSelectTopStatement,The method has 6 parameters. Parameters: tableName' where' columns' orderBy' groupBy' topCount
Long Parameter List,EApp.Data.SqlLite,SqlLiteStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\SqlLite\SqlLiteStatementFactory.cs,CreateSelectRangeStatementForSortedRows,The method has 9 parameters. Parameters: tableName' where' columns' orderBy' groupBy' topCount' skipCount' identityColumn' isIdentityColumnDesc
Long Parameter List,EApp.Data.SqlLite,SqlLiteStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\SqlLite\SqlLiteStatementFactory.cs,CreateSelectRangeStatementForUnsortedRows,The method has 8 parameters. Parameters: tableName' where' columns' orderBy' groupBy' topCount' skipCount' identyColumn
Long Parameter List,Dappers,CommandDefinition,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,CommandDefinition,The method has 6 parameters. Parameters: commandText' parameters' transaction' commandTimeout' commandType' flags
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Execute,The method has 6 parameters. Parameters: cnn' sql' param' transaction' commandTimeout' commandType
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,ExecuteScalar,The method has 6 parameters. Parameters: cnn' sql' param' transaction' commandTimeout' commandType
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,ExecuteScalar,The method has 6 parameters. Parameters: cnn' sql' param' transaction' commandTimeout' commandType
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,ExecuteReader,The method has 6 parameters. Parameters: cnn' sql' param' transaction' commandTimeout' commandType
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Query,The method has 7 parameters. Parameters: cnn' sql' param' transaction' buffered' commandTimeout' commandType
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Query,The method has 7 parameters. Parameters: cnn' sql' param' transaction' buffered' commandTimeout' commandType
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Query,The method has 8 parameters. Parameters: cnn' type' sql' param' transaction' buffered' commandTimeout' commandType
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,QueryMultiple,The method has 6 parameters. Parameters: cnn' sql' param' transaction' commandTimeout' commandType
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Query,The method has 9 parameters. Parameters: cnn' sql' map' param' transaction' buffered' splitOn' commandTimeout' commandType
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Query,The method has 9 parameters. Parameters: cnn' sql' map' param' transaction' buffered' splitOn' commandTimeout' commandType
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Query,The method has 9 parameters. Parameters: cnn' sql' map' param' transaction' buffered' splitOn' commandTimeout' commandType
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Query,The method has 9 parameters. Parameters: cnn' sql' map' param' transaction' buffered' splitOn' commandTimeout' commandType
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Query,The method has 9 parameters. Parameters: cnn' sql' map' param' transaction' buffered' splitOn' commandTimeout' commandType
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Query,The method has 9 parameters. Parameters: cnn' sql' map' param' transaction' buffered' splitOn' commandTimeout' commandType
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Query,The method has 10 parameters. Parameters: cnn' sql' types' map' param' transaction' buffered' splitOn' commandTimeout' commandType
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,MultiMap,The method has 9 parameters. Parameters: cnn' sql' map' param' transaction' buffered' splitOn' commandTimeout' commandType
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,MultiMapImpl,The method has 7 parameters. Parameters: cnn' command' map' splitOn' reader' identity' finalize
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,MultiMapImpl,The method has 8 parameters. Parameters: cnn' command' types' map' splitOn' reader' identity' finalize
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetDeserializer,The method has 5 parameters. Parameters: type' reader' startBound' length' returnNullIfFirstMissing
Long Parameter List,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetTypeDeserializer,The method has 5 parameters. Parameters: type' reader' startBound' length' returnNullIfFirstMissing
Long Parameter List,Dappers,Identity,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Identity,The method has 6 parameters. Parameters: sql' commandType' connection' type' parametersType' otherTypes
Long Parameter List,Dappers,Identity,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Identity,The method has 7 parameters. Parameters: sql' commandType' connectionString' type' parametersType' otherTypes' gridIndex
Long Parameter List,Dappers,DynamicParameters,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Add,The method has 5 parameters. Parameters: name' value' dbType' direction' size
Long Parameter List,Dappers,WrappedReader,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetBytes,The method has 5 parameters. Parameters: i' fieldOffset' buffer' bufferoffset' length
Long Parameter List,Dappers,WrappedReader,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetChars,The method has 5 parameters. Parameters: i' fieldoffset' buffer' bufferoffset' length
Long Parameter List,EApp.Data.SqlServer,SqlServerStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\SqlServer\SqlServerStatementFactory.cs,CreateSelectTopStatement,The method has 6 parameters. Parameters: tableName' where' columns' orderBy' groupBy' topCount
Long Parameter List,EApp.Data.SqlServer,SqlServerStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\SqlServer\SqlServerStatementFactory.cs,CreateSelectRangeStatementForSortedRows,The method has 9 parameters. Parameters: tableName' where' columns' orderBy' groupBy' topCount' skipCount' identityColumn' isIdentityColumnDesc
Long Parameter List,EApp.Data.SqlServer,SqlServerStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\SqlServer\SqlServerStatementFactory.cs,CreateSelectRangeStatementForUnsortedRows,The method has 8 parameters. Parameters: tableName' where' columns' orderBy' groupBy' topCount' skipCount' identyColumn
Long Identifier,EApp.Data.Configuration,EAppDataConfigurationSection,C:\repos\TwoMaKing_EApp\EApp.Data\Configuration\EAppDataConfigurationSection.csd.cs,,The length of the parameter EAppDataConfigurationSectionSectionName is 39.
Long Identifier,EApp.Data.Configuration,EAppDataConfigurationSection,C:\repos\TwoMaKing_EApp\EApp.Data\Configuration\EAppDataConfigurationSection.csd.cs,,The length of the parameter EAppDataConfigurationSectionSectionName is 39.
Long Identifier,EApp.Data.Configuration,EAppDataConfigurationSection,C:\repos\TwoMaKing_EApp\EApp.Data\Configuration\EAppDataConfigurationSection.csd.cs,,The length of the parameter EAppDataConfigurationSectionSectionName is 39.
Long Identifier,EApp.Data.Configuration,EntityMappingConfigurationCollection,C:\repos\TwoMaKing_EApp\EApp.Data\Configuration\EAppDataConfigurationSection.csd.cs,,The length of the parameter EntityMappingElementPropertyName is 32.
Long Identifier,EApp.Data.Configuration,EntityMappingConfigurationCollection,C:\repos\TwoMaKing_EApp\EApp.Data\Configuration\EAppDataConfigurationSection.csd.cs,,The length of the parameter EntityMappingElementPropertyName is 32.
Long Identifier,EApp.Data.Configuration,EntityMappingConfigurationCollection,C:\repos\TwoMaKing_EApp\EApp.Data\Configuration\EAppDataConfigurationSection.csd.cs,,The length of the parameter EntityMappingElementPropertyName is 32.
Long Statement,EApp.Data,Database,C:\repos\TwoMaKing_EApp\EApp.Data\Database.cs,CreateParameter,The length of the statement  "            ConfigureParameter(param' name' dbtype' size' direction' nullable' precision' scale' sourceColumn' sourceVersion' value); " is 121.
Long Statement,EApp.Data,Database,C:\repos\TwoMaKing_EApp\EApp.Data\Database.cs,AddParameter,The length of the statement  "            DbParameter parameter = this.CreateParameter(name' dbtype' size' direction' nullable' precision' scale' sourceColumn' sourceVersion' value); " is 140.
Long Statement,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,PrepareStoredProcedureStringCommand,The length of the statement  "                throw new ArgumentException("The length of columns of in parameter should equal the length of db types of parameters."); " is 120.
Long Statement,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,PrepareStoredProcedureStringCommand,The length of the statement  "                throw new ArgumentException("The length of db types of out parameter should equal the length of names of out parameters."); " is 123.
Long Statement,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,PrepareStoredProcedureStringCommand,The length of the statement  "                        this.database.ParameterCache.CreateAndCacheParameters(procedureName' command' inParamNames' inParamDbTypes' inParamValues); " is 123.
Long Statement,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,Insert,The length of the statement  "                    insertCommand.CommandText = insertCommand.CommandText.Trim(';') + " ; " + this.database.DBProvider.SelectLastInsertedRowAutoIDStatement; " is 136.
Long Statement,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,Update,The length of the statement  "                throw new ArgumentException("The length of parameter db types in where sql should equal the length of parameter names in where sql if sql is not null or empty."); " is 162.
Long Statement,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,Update,The length of the statement  "                throw new ArgumentException("The length of parameter names in where sql should equal the length of parameter values in where sql if sql is not null or empty."); " is 160.
Long Statement,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,Delete,The length of the statement  "                throw new ArgumentNullException("The parameter values in where Sql cannot be null or zero if where is not null or empty."); " is 123.
Long Statement,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,Delete,The length of the statement  "                throw new ArgumentException("The length of parameter types in where Sql should equal the length of parameter names in where Sql if where is not null or empty."); " is 161.
Long Statement,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,Delete,The length of the statement  "                throw new ArgumentException("The length of parameter values in where Sql should equal the length of parameter names in where Sql if where is not null or empty.."); " is 163.
Long Statement,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,SelectReader,The length of the statement  "                throw new ArgumentException("The length of parameter types in where Sql should equal the length of parameter names in where Sql if where is not null or empty."); " is 161.
Long Statement,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,SelectReader,The length of the statement  "                throw new ArgumentException("The length of parameter values in where Sql should equal the length of parameter names in where Sql if where is not null or empty."); " is 162.
Long Statement,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,SelectReader,The length of the statement  "                throw new ArgumentOutOfRangeException("pageNumber"' pageNumber' "The pageNumber is one-based and should be larger than zero."); " is 127.
Long Statement,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,SelectReader,The length of the statement  "                throw new ArgumentOutOfRangeException("pageSize"' pageSize' "The pageSize is one-based and should be larger than zero."); " is 121.
Long Statement,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,SelectReader,The length of the statement  "                throw new ArgumentException("The length of parameter values in where Sql should equal the length of parameter names in where Sql if where is not null or empty."); " is 162.
Long Statement,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,SelectDataSet,The length of the statement  "                throw new ArgumentException("The length of parameter types in where Sql should equal the length of parameter names in where Sql if where is not null or empty."); " is 161.
Long Statement,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,SelectDataSet,The length of the statement  "                throw new ArgumentException("The length of parameter values in where Sql should equal the length of parameter names in where Sql if where is not null or empty."); " is 162.
Long Statement,EApp.Data,SqlStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\SqlStatementFactory.cs,CreateSelectRangeStatement,The length of the statement  "                    return CreateSelectRangeStatementForUnsortedRows(tableName' where' includedColumns' orderBy' groupBy' topCount' skipCount' identityColumn); " is 139.
Long Statement,EApp.Data.Configuration,EntityMappingConfigurationCollection,C:\repos\TwoMaKing_EApp\EApp.Data\Configuration\EAppDataConfigurationSection.csd.cs,IsElementName,The length of the statement  "            return (elementName == global::EApp.Data.Configuration.EntityMappingConfigurationCollection.EntityMappingElementPropertyName); " is 126.
Long Statement,EApp.Data.Configuration,EntityMappingConfigurationCollection,C:\repos\TwoMaKing_EApp\EApp.Data\Configuration\EAppDataConfigurationSection.csd.cs,IsElementName,The length of the statement  "            return (elementName == global::EApp.Data.Configuration.EntityMappingConfigurationCollection.EntityMappingElementPropertyName); " is 126.
Long Statement,EApp.Data.Configuration,EntityMappingConfigurationCollection,C:\repos\TwoMaKing_EApp\EApp.Data\Configuration\EAppDataConfigurationSection.csd.cs,IsElementName,The length of the statement  "            return (elementName == global::EApp.Data.Configuration.EntityMappingConfigurationCollection.EntityMappingElementPropertyName); " is 126.
Long Statement,EApp.Data.Mapping,XmlObjectMappingResolver,C:\repos\TwoMaKing_EApp\EApp.Data\Mapping\XmlObjectMappingResolver.cs,ResolveTableName,The length of the statement  "                var entityConfiguration = entityMappingConfiguration.Entities.FirstOrDefault(p => p.TypeName.Equals(objectOrTypeName) || p.Name.Equals(objectOrTypeName)); " is 154.
Long Statement,EApp.Data.Mapping,XmlObjectMappingResolver,C:\repos\TwoMaKing_EApp\EApp.Data\Mapping\XmlObjectMappingResolver.cs,ResolveFieldName,The length of the statement  "                var dataType = entityMappingConfiguration.Entities.FirstOrDefault(p => p.TypeName.Equals(objectOrTypeName) || p.Name.Equals(objectOrTypeName)); " is 143.
Long Statement,EApp.Data.Mapping,XmlObjectMappingResolver,C:\repos\TwoMaKing_EApp\EApp.Data\Mapping\XmlObjectMappingResolver.cs,ResolveTableName,The length of the statement  "                var entityConfiguration = entityMappingConfiguration.Entities.FirstOrDefault(p => p.TypeName.Equals(typeof(T).FullName)); " is 121.
Long Statement,EApp.Data.Queries,SqlBuilder,C:\repos\TwoMaKing_EApp\EApp.Data\Queries\SqlBuilder.cs,Page,The length of the statement  "                throw new ArgumentOutOfRangeException("pageNumber"' pageNumber' "The pageNumber is one-based and should be larger than zero."); " is 127.
Long Statement,EApp.Data.Queries,SqlBuilder,C:\repos\TwoMaKing_EApp\EApp.Data\Queries\SqlBuilder.cs,Page,The length of the statement  "                throw new ArgumentOutOfRangeException("pageSize"' pageSize' "The pageSize is one-based and should be larger than zero."); " is 121.
Long Statement,EApp.Data.Queries,WhereClauseBuilder<TDataObject>,C:\repos\TwoMaKing_EApp\EApp.Data\Queries\Where\WhereClauseBuilder.cs,VisitBinary,The length of the statement  "                    throw new NotSupportedException(string.Format(Resources.EX_EXPRESSION_NODE_TYPE_NOT_SUPPORT' node.NodeType.ToString())); " is 120.
Long Statement,EApp.Data.Queries,WhereClauseBuilder<TDataObject>,C:\repos\TwoMaKing_EApp\EApp.Data\Queries\Where\WhereClauseBuilder.cs,VisitMethodCall,The length of the statement  "                throw new NotSupportedException(string.Format(Resources.EX_METHOD_CALL_ARGUMENT_TYPE_NOT_SUPPORT' expr.GetType().ToString())); " is 126.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,AddTypeHandlerImpl,The length of the statement  "            typeof(TypeHandlerCache<>).MakeGenericType(type).GetMethod("SetHandler"' BindingFlags.Static | BindingFlags.NonPublic).Invoke(null' new object[] { handler }); " is 158.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,AddTypeHandlerImpl,The length of the statement  "                typeof(TypeHandlerCache<>).MakeGenericType(secondary).GetMethod("SetHandler"' BindingFlags.Static | BindingFlags.NonPublic).Invoke(null' new object[] { handler }); " is 163.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,LookupDbType,The length of the statement  "                throw new NotSupportedException(string.Format("The member {0} of type {1} cannot be used as a parameter value"' name' type.FullName)); " is 134.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Execute,The length of the statement  "            var command = new CommandDefinition(sql' (object)param' transaction' commandTimeout' commandType' CommandFlags.Buffered); " is 121.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,ExecuteScalar,The length of the statement  "            var command = new CommandDefinition(sql' (object)param' transaction' commandTimeout' commandType' CommandFlags.Buffered); " is 121.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,ExecuteScalar,The length of the statement  "            var command = new CommandDefinition(sql' (object)param' transaction' commandTimeout' commandType' CommandFlags.Buffered); " is 121.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,ExecuteReader,The length of the statement  "            var command = new CommandDefinition(sql' (object)param' transaction' commandTimeout' commandType' CommandFlags.Buffered); " is 121.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Query,The length of the statement  "            var command = new CommandDefinition(sql' (object)param' transaction' commandTimeout' commandType' buffered ? CommandFlags.Buffered : CommandFlags.None); " is 152.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Query,The length of the statement  "            var command = new CommandDefinition(sql' (object)param' transaction' commandTimeout' commandType' buffered ? CommandFlags.Buffered : CommandFlags.None); " is 152.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,QueryMultiple,The length of the statement  "            var command = new CommandDefinition(sql' (object)param' transaction' commandTimeout' commandType' CommandFlags.Buffered); " is 121.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,QueryMultipleImpl,The length of the statement  "            Identity identity = new Identity(command.CommandText' command.CommandType' cnn' typeof(GridReader)' param == null ? null : param.GetType()' null); " is 146.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,QueryMultipleImpl,The length of the statement  "                reader = cmd.ExecuteReader(wasClosed ? CommandBehavior.CloseConnection | CommandBehavior.SequentialAccess : CommandBehavior.SequentialAccess); " is 142.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,QueryImpl,The length of the statement  "            var identity = new Identity(command.CommandText' command.CommandType' cnn' effectiveType' param == null ? null : param.GetType()' null); " is 136.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,QueryImpl,The length of the statement  "                reader = cmd.ExecuteReader(wasClosed ? CommandBehavior.CloseConnection | CommandBehavior.SequentialAccess : CommandBehavior.SequentialAccess); " is 142.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Query,The length of the statement  "            return MultiMap<TFirst' TSecond' DontMap' DontMap' DontMap' DontMap' DontMap' TReturn>(cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 180.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Query,The length of the statement  "            return MultiMap<TFirst' TSecond' TThird' DontMap' DontMap' DontMap' DontMap' TReturn>(cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 179.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Query,The length of the statement  "            return MultiMap<TFirst' TSecond' TThird' TFourth' DontMap' DontMap' DontMap' TReturn>(cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 179.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Query,The length of the statement  "            return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' DontMap' DontMap' TReturn>(cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 178.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Query,The length of the statement  "            return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' DontMap' TReturn>(cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 177.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Query,The length of the statement  "            return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>(cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 178.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Query,The length of the statement  "            var command = new CommandDefinition(sql' (object)param' transaction' commandTimeout' commandType' buffered ? CommandFlags.Buffered : CommandFlags.None); " is 152.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,MultiMap,The length of the statement  "            var command = new CommandDefinition(sql' (object)param' transaction' commandTimeout' commandType' buffered ? CommandFlags.Buffered : CommandFlags.None); " is 152.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,MultiMap,The length of the statement  "            var results = MultiMapImpl<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>(cnn' command' map' splitOn' null' null' true); " is 142.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,MultiMapImpl,The length of the statement  "            identity = identity ?? new Identity(command.CommandText' command.CommandType' cnn' typeof(TFirst)' param == null ? null : param.GetType()' new[] { typeof(TFirst)' typeof(TSecond)' typeof(TThird)' typeof(TFourth)' typeof(TFifth)' typeof(TSixth)' typeof(TSeventh) }); " is 265.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,MultiMapImpl,The length of the statement  "                    ownedReader = ownedCommand.ExecuteReader(wasClosed ? CommandBehavior.CloseConnection | CommandBehavior.SequentialAccess : CommandBehavior.SequentialAccess); " is 156.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,MultiMapImpl,The length of the statement  "                if ((deserializer = cinfo.Deserializer).Func == null || (otherDeserializers = cinfo.OtherDeserializers) == null || hash != deserializer.Hash) " is 141.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,MultiMapImpl,The length of the statement  "                    var deserializers = GenerateDeserializers(new Type[] { typeof(TFirst)' typeof(TSecond)' typeof(TThird)' typeof(TFourth)' typeof(TFifth)' typeof(TSixth)' typeof(TSeventh) }' splitOn' reader); " is 190.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,MultiMapImpl,The length of the statement  "                Func<IDataReader' TReturn> mapIt = GenerateMapper<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>(deserializer.Func' otherDeserializers' map); " is 163.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,MultiMapImpl,The length of the statement  "            identity = identity ?? new Identity(command.CommandText' command.CommandType' cnn' types[0]' param == null ? null : param.GetType()' types); " is 140.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,MultiMapImpl,The length of the statement  "                if ((deserializer = cinfo.Deserializer).Func == null || (otherDeserializers = cinfo.OtherDeserializers) == null || hash != deserializer.Hash) " is 141.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The length of the statement  "                    return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)); " is 152.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The length of the statement  "                    return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)); " is 196.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The length of the statement  "                    return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)); " is 238.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The length of the statement  "                    return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)); " is 280.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The length of the statement  "                    return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r)); " is 326.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,PassByPosition,The length of the statement  "            Dictionary<string' IDbDataParameter> parameters = new Dictionary<string' IDbDataParameter>(StringComparer.InvariantCulture); " is 124.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,MultiMapException,The length of the statement  "                return new ArgumentException("When using the multi-mapping APIs ensure you set the splitOn param if you have keys other than Id"' "splitOn"); " is 141.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,FilterParameters,The length of the statement  "            return parameters.Where(p => Regex.IsMatch(sql' @"[?@:]" + p.Name + "([^a-z0-9_]+|$)"' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant)); " is 170.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "            var dm = new DynamicMethod(string.Format("ParamInfo{0}"' Guid.NewGuid())' null' new[] { typeof(IDbCommand)' typeof(object) }' type' true); " is 138.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "            il.EmitCall(OpCodes.Callvirt' typeof(IDbCommand).GetProperty("Parameters").GetGetMethod()' null); // stack is now [parameters] " is 126.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "                    il.EmitCall(OpCodes.Call' typeof(SqlMapper).GetMethod("FindOrAddParameter")' null); // stack is [parameters] [parameter] " is 120.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "                    il.EmitCall(OpCodes.Callvirt' typeof(IDbCommand).GetMethod("CreateParameter")' null);// stack is now [parameters] [parameters] [parameter] " is 138.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "                    il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("ParameterName").GetSetMethod()' null);// stack is now [parameters] [parameters] [parameter] " is 157.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "                if (dbType != DbType.Time && handler == null) // https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time " is 214.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "                        il.Emit(callOpCode' prop.GetGetMethod()); // stack is [parameters] [[parameters]] [parameter] [parameter] [object-value] " is 120.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "                        il.Emit(OpCodes.Call' typeof(SqlMapper).GetMethod("GetDbType"' BindingFlags.Static | BindingFlags.Public)); // stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type] " is 185.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "                    il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("DbType").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter] " is 152.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "                il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("Direction").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter] " is 155.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "                        il.EmitCall(OpCodes.Callvirt' prop.PropertyType.GetMethod("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null); " is 121.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "                    il.Emit(OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType(prop.PropertyType).GetMethod("SetValue")); // stack is now [parameters] [[parameters]] [parameter] " is 163.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "                    il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("Value").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter] " is 151.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "                    il.EmitCall(OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty("Size").GetSetMethod()' null); // stack is now [parameters] [[parameters]] [parameter] " is 153.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetStructDeserializer,The length of the statement  "            // no point using special per-type handling here; it boils down to the same' plus not all are supported anyway (see: SqlDataReader.GetChar - not supported!) " is 156.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "            var dm = new DynamicMethod(string.Format("Deserialize{0}"' Guid.NewGuid())' typeof(object)' new[] { typeof(IDataReader) }' true); " is 129.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "                        throw new InvalidOperationException(string.Format("A parameterless default constructor or one matching signature {0} is required for {1} materialization"' proposedTypes' type.FullName)); " is 186.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "                            memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null); // stack is now [target][target][typed-value] " is 158.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "                                il.EmitCall(OpCodes.Call' typeof(Type).GetMethod("GetTypeFromHandle")' null);// stack is now [target][target][enum-type] " is 120.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "                                il.Emit(OpCodes.Newobj' memberType.GetConstructor(new[] { nullUnderlyingType })); // stack is now [target][target][typed-value] " is 127.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "                            il.Emit(OpCodes.Newobj' memberType.GetConstructor(new Type[] { typeof(byte[]) }));// stack is now [target][target][binary] " is 122.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "                            if ((hasTypeHandler = typeHandlers.ContainsKey(unboxType)) || colType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode(nullUnderlyingType)) " is 172.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "                                    il.EmitCall(OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType(unboxType).GetMethod("Parse")' null); // stack is now [target][target][typed-value] " is 152.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "                                    il.Emit(OpCodes.Newobj' unboxType.GetConstructor(new[] { nullUnderlyingType })); // stack is now [target][target][typed-value] " is 126.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,FlexibleConvertBoxedFromHeadOfStack,The length of the statement  "                    il.EmitCall(OpCodes.Call' typeof(Type).GetMethod("GetTypeFromHandle")' null); // stack is now [target][target][value][member-type] " is 130.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,FlexibleConvertBoxedFromHeadOfStack,The length of the statement  "                    il.EmitCall(OpCodes.Call' typeof(Convert).GetMethod("ChangeType"' new Type[] { typeof(object)' typeof(Type) })' null); // stack is now [target][target][boxed-member-type-value] " is 176.
Long Statement,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetOperator,The length of the statement  "            return ResolveOperator(fromMethods = from.GetMethods(BindingFlags.Static | BindingFlags.Public)' from' to' "op_Implicit") " is 121.
Long Statement,Dappers,GridReader,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,ReadImpl,The length of the statement  "                if (reader == null) throw new ObjectDisposedException(GetType().FullName' "The reader has been disposed; this can happen after all data has been consumed"); " is 156.
Long Statement,Dappers,GridReader,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,ReadImpl,The length of the statement  "                if (consumed) throw new InvalidOperationException("Query results must be consumed in the correct order' and each result can only be consumed once"); " is 148.
Long Statement,Dappers,GridReader,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,MultiReadInternal,The length of the statement  "                    foreach (var r in SqlMapper.MultiMapImpl<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>(null' default(CommandDefinition)' func' splitOn' reader' identity' false)) " is 184.
Long Statement,Dappers,DynamicParameters,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Add,The length of the statement  "            parameters[Clean(name)] = new ParamInfo() { Name = name' Value = value' ParameterDirection = direction ?? ParameterDirection.Input' DbType = dbType' Size = size }; " is 163.
Long Statement,Dappers,DynamicParameters,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,AddParameters,The length of the statement  "                if (dbType == null && val != null && !isCustomQueryParameter) dbType = SqlMapper.LookupDbType(val.GetType()' name' true' out handler); " is 134.
Long Statement,Dappers,DynamicParameters,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Output,The length of the statement  "            var dm = new DynamicMethod(string.Format("ExpressionParam{0}"' Guid.NewGuid())' null' new[] { typeof(object)' this.GetType() }' true); " is 134.
Long Statement,Dappers,DynamicParameters,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Output,The length of the statement  "            var paramGetter = this.GetType().GetMethod("Get"' new Type[] { typeof(string) }).MakeGenericMethod(lastMemberAccess.Type); " is 122.
Long Statement,Dappers,DynamicParameters,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Output,The length of the statement  "                    dbType = (!dbType.HasValue) ? SqlMapper.LookupDbType(targetMemberType' targetMemberType.Name' true' out handler) : dbType; " is 122.
Long Statement,Dappers,DbString,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,AddParameter,The length of the statement  "            param.DbType = IsAnsi ? (IsFixedLength ? DbType.AnsiStringFixedLength : DbType.AnsiString) : (IsFixedLength ? DbType.StringFixedLength : DbType.String); " is 152.
Long Statement,Dappers,DefaultTypeMap,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,FindConstructor,The length of the statement  "            foreach (ConstructorInfo ctor in constructors.OrderBy(c => c.IsPublic ? 0 : (c.IsPrivate ? 2 : 1)).ThenBy(c => c.GetParameters().Length)) " is 137.
Long Statement,Dappers,DefaultTypeMap,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,FindExplicitConstructor,The length of the statement  "            var withAttr = constructors.Where(c => c.GetCustomAttributes(typeof(ExplicitConstructorAttribute)' true).Length > 0).ToList(); " is 126.
Long Statement,Dappers,DefaultTypeMap,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetConstructorParameter,The length of the statement  "            return new SimpleMemberMap(columnName' parameters.FirstOrDefault(p => string.Equals(p.Name' columnName' StringComparison.OrdinalIgnoreCase))); " is 142.
Long Statement,Dappers,DefaultTypeMap,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetMember,The length of the statement  "                property = _properties.FirstOrDefault(p => string.Equals(p.Name' columnName.Replace("_"' "")' StringComparison.Ordinal)) " is 120.
Long Statement,Dappers,DefaultTypeMap,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetMember,The length of the statement  "                    ?? _properties.FirstOrDefault(p => string.Equals(p.Name' columnName.Replace("_"' "")' StringComparison.OrdinalIgnoreCase)); " is 123.
Long Statement,EApp.Data.SqlServer,SqlServerStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\SqlServer\SqlServerStatementFactory.cs,CreateSelectRangeStatementForSortedRows,The length of the statement  "            return SqlQueryUtils.ReplaceDatabaseTokens(outerSqlBuilder.ToString()' this.parameterLeftToken' this.parameterRightToken' this.parameterPrefix' this.wildCharToken' this.wildSingleCharToken); " is 190.
Long Statement,EApp.Data.SqlServer,SqlServerStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\SqlServer\SqlServerStatementFactory.cs,CreateSelectRangeStatementForUnsortedRows,The length of the statement  "            return SqlQueryUtils.ReplaceDatabaseTokens(outerSqlBuilder.ToString()' this.parameterLeftToken' this.parameterRightToken' this.parameterPrefix' this.wildCharToken' this.wildSingleCharToken); " is 190.
Complex Conditional,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,GetOutDbParameterValues,The conditional expression  "paramNames == null ||                  paramNames.Length.Equals(0) ||                  command == null ||                  command.Parameters == null ||                  command.Parameters.Count.Equals(0)"  is complex.
Complex Conditional,EApp.Data,SqlQueryUtils,C:\repos\TwoMaKing_EApp\EApp.Data\SqlQueryUtils.cs,OrderByStartsWith,The conditional expression  "string.IsNullOrEmpty(orderByClause) ||                  string.IsNullOrWhiteSpace(orderByClause) ||                  string.IsNullOrEmpty(column) ||                  string.IsNullOrWhiteSpace(column)"  is complex.
Complex Conditional,EApp.Data,SqlStatementFactory,C:\repos\TwoMaKing_EApp\EApp.Data\SqlStatementFactory.cs,CreateSelectRangeStatement,The conditional expression  "identityColumnIsNumber &&                       SqlQueryUtils.OrderByStartsWith(orderBy' identityColumn) &&                      (string.IsNullOrEmpty(groupBy) ||                       groupBy.Equals(identityColumn' StringComparison.InvariantCultureIgnoreCase))"  is complex.
Complex Conditional,EApp.Data.MySql,MySqlDbProvider,C:\repos\TwoMaKing_EApp\EApp.Data\MySql\MySqlDbProvider.cs,AdjustParameter,The conditional expression  "value.GetType() == typeof(Byte) || value.GetType() == typeof(SByte) ||                  value.GetType() == typeof(Int16) || value.GetType() == typeof(Int32) ||                  value.GetType() == typeof(Int64) || value.GetType() == typeof(UInt16) ||                  value.GetType() == typeof(UInt32) || value.GetType() == typeof(UInt64)"  is complex.
Complex Conditional,EApp.Data.MySql,MySqlDbProvider,C:\repos\TwoMaKing_EApp\EApp.Data\MySql\MySqlDbProvider.cs,AdjustParameter,The conditional expression  "value.GetType() == typeof(DateTime) || type.Equals(DbType.DateTime) ||                  type.Equals(DbType.Date) || type.Equals(DbType.Time)"  is complex.
Complex Conditional,EApp.Data.Queries,WhereClauseBuilder<TDataObject>,C:\repos\TwoMaKing_EApp\EApp.Data\Queries\Where\WhereClauseBuilder.cs,VisitMember,The conditional expression  "(node.Member.DeclaringType == typeof(TDataObject) ||                   typeof(TDataObject).IsSubclassOf(node.Member.DeclaringType)) &&                   node.Expression != null &&                   node.Expression is ParameterExpression"  is complex.
Complex Conditional,EApp.Data.Queries,WhereClauseBuilder<TDataObject>,C:\repos\TwoMaKing_EApp\EApp.Data\Queries\Where\WhereClauseBuilder.cs,VisitUnary,The conditional expression  "memberExpression.Expression != null &&                          memberExpression.Expression.Type != null &&                         (memberExpression.Member.DeclaringType == typeof(TDataObject) ||                          memberExpression.Member.DeclaringType.IsAssignableFrom(memberExpression.Expression.Type) ||                          memberExpression.Expression.Type.IsSubclassOf(memberExpression.Member.DeclaringType))"  is complex.
Complex Conditional,Dappers,CommandDefinition,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetBasicPropertySetter,The conditional expression  "prop != null && prop.CanWrite && prop.PropertyType == expectedType                  && ((indexers = prop.GetIndexParameters()) == null || indexers.Length == 0)"  is complex.
Complex Conditional,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetDeserializer,The conditional expression  "!(typeMap.ContainsKey(type) || type.IsEnum || type.FullName == LinqBinary ||                  (type.IsValueType && (underlyingType = Nullable.GetUnderlyingType(type)) != null && underlyingType.IsEnum))"  is complex.
Complex Conditional,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetTypeDeserializer,The conditional expression  "(hasTypeHandler = typeHandlers.ContainsKey(unboxType)) || colType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode(nullUnderlyingType)"  is complex.
Complex Conditional,Dappers,DefaultTypeMap,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,FindConstructor,The conditional expression  "unboxedType != types[i]                          && !(unboxedType.IsEnum && Enum.GetUnderlyingType(unboxedType) == types[i])                          && !(unboxedType == typeof(char) && types[i] == typeof(string))"  is complex.
Complex Conditional,EApp.Data.SqlServer,SqlServerDbProvider,C:\repos\TwoMaKing_EApp\EApp.Data\SqlServer\SqlServerDbProvider.cs,AdjustParameter,The conditional expression  "value.GetType() == typeof(Byte) || value.GetType() == typeof(SByte) ||                  value.GetType() == typeof(Int16) || value.GetType() == typeof(Int32) ||                  value.GetType() == typeof(Int64) || value.GetType() == typeof(UInt16) ||                  value.GetType() == typeof(UInt32) || value.GetType() == typeof(UInt64)"  is complex.
Virtual Method Call from Constructor,EApp.Data.Queries.Criterias,OperatorSqlCriteria,C:\repos\TwoMaKing_EApp\EApp.Data\Queries\Criterias\OperatorSqlCriteria.cs,OperatorSqlCriteria,The constructor "OperatorSqlCriteria" calls a virtual method "BuildColumnName".
Virtual Method Call from Constructor,EApp.Data.Queries.Criterias,OperatorSqlCriteria,C:\repos\TwoMaKing_EApp\EApp.Data\Queries\Criterias\OperatorSqlCriteria.cs,OperatorSqlCriteria,The constructor "OperatorSqlCriteria" calls a virtual method "BuildParameterName".
Empty Catch Block,EApp.Data,Database,C:\repos\TwoMaKing_EApp\EApp.Data\Database.cs,CreateConnection,The method has an empty catch block.
Empty Catch Block,EApp.Data,Database,C:\repos\TwoMaKing_EApp\EApp.Data\Database.cs,ExecuteReader,The method has an empty catch block.
Empty Catch Block,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,QueryMultipleImpl,The method has an empty catch block.
Empty Catch Block,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,QueryImpl,The method has an empty catch block.
Empty Catch Block,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,MultiMapException,The method has an empty catch block.
Magic Number,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,CreateDbProvider,The following statement contains a magic number: if (assemblyAndClassType.Length.Equals(2))              {                  return DbProviderFactory.CreateDbProvider(assemblyAndClassType[1].Trim()'                                                             assemblyAndClassType[0].Trim()'                                                             connectionString);              }              else              {                  return DbProviderFactory.CreateDbProvider(string.Empty' providerName' connectionString);              }
Magic Number,EApp.Data,DbGateway,C:\repos\TwoMaKing_EApp\EApp.Data\DbGateway.cs,PrepareStoredProcedureStringCommand,The following statement contains a magic number: if (outParamNames != null)              {                  for (int i = 0; i < outParamNames.Length; i++)                  {                      this.database.AddOutParameter(command' outParamNames[i]' outParamDbTypes[i]' 4000);                  }              }
Magic Number,EApp.Data,DbParameterCache,C:\repos\TwoMaKing_EApp\EApp.Data\DbParameterCache.cs,AdjustParamNameForOracle,The following statement contains a magic number: if (paramName[0] == ':' && paramName.Length > 25)              {                  string truncatedParamName = paramName.Substring(0' 15) + paramName.Substring(paramName.Length - 11' 10);                  cmd.Parameters[paramName].ParameterName = truncatedParamName;                  cmd.CommandText = cmd.CommandText.Replace(paramName' truncatedParamName);              }
Magic Number,EApp.Data,DbParameterCache,C:\repos\TwoMaKing_EApp\EApp.Data\DbParameterCache.cs,AdjustParamNameForOracle,The following statement contains a magic number: if (paramName[0] == ':' && paramName.Length > 25)              {                  string truncatedParamName = paramName.Substring(0' 15) + paramName.Substring(paramName.Length - 11' 10);                  cmd.Parameters[paramName].ParameterName = truncatedParamName;                  cmd.CommandText = cmd.CommandText.Replace(paramName' truncatedParamName);              }
Magic Number,EApp.Data,DbParameterCache,C:\repos\TwoMaKing_EApp\EApp.Data\DbParameterCache.cs,AdjustParamNameForOracle,The following statement contains a magic number: if (paramName[0] == ':' && paramName.Length > 25)              {                  string truncatedParamName = paramName.Substring(0' 15) + paramName.Substring(paramName.Length - 11' 10);                  cmd.Parameters[paramName].ParameterName = truncatedParamName;                  cmd.CommandText = cmd.CommandText.Replace(paramName' truncatedParamName);              }
Magic Number,EApp.Data,DbParameterCache,C:\repos\TwoMaKing_EApp\EApp.Data\DbParameterCache.cs,AdjustParamNameForOracle,The following statement contains a magic number: if (paramName[0] == ':' && paramName.Length > 25)              {                  string truncatedParamName = paramName.Substring(0' 15) + paramName.Substring(paramName.Length - 11' 10);                  cmd.Parameters[paramName].ParameterName = truncatedParamName;                  cmd.CommandText = cmd.CommandText.Replace(paramName' truncatedParamName);              }
Magic Number,EApp.Data,DbProviderFactory,C:\repos\TwoMaKing_EApp\EApp.Data\DbProviderFactory.cs,CreateDbProvider,The following statement contains a magic number: try              {                  if (assAndClass.Length.Equals(2))                  {                      return CreateDbProvider(assAndClass[1].Trim()' assAndClass[0].Trim()' connectionString);                  }                  else                  {                      return CreateDbProvider(string.Empty' providerName' connectionString);                  }              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,EApp.Data,DbProviderFactory,C:\repos\TwoMaKing_EApp\EApp.Data\DbProviderFactory.cs,CreateDefaultDbProvider,The following statement contains a magic number: try              {                  if (assAndClass.Length.Equals(2))                  {                      return CreateDbProvider(assAndClass[1].Trim()' assAndClass[0].Trim()' connectionString);                  }                  else                  {                      return CreateDbProvider(string.Empty' providerName' connectionString);                  }                }              catch (Exception ex)              {                  throw ex;              }
Magic Number,EApp.Data.Mapping,MetaDataManager,C:\repos\TwoMaKing_EApp\EApp.Data\Mapping\MetaDataManager.cs,LoadEntityMappingConfiguration,The following statement contains a magic number: lock (lockObject)              {                  EAppDataConfigurationSection configuration = (EAppDataConfigurationSection)ConfigurationManager.GetSection("EAppData");                    EntityMappingConfiguration entityMappingConfig = null;                    foreach (EntityMappingElement entityMappingItem in configuration.EntityMappings)                  {                      string mappingName = entityMappingItem.Name;                        string mappingFile = entityMappingItem.File;                        using (FileStream mappingFileStream = new FileStream(mappingFile' FileMode.Open' FileAccess.Read))                      {                          using (MemoryStream mappingMemoryStream = new MemoryStream())                          {                              byte[] buffers = new byte[2048];                                int position = mappingFileStream.Read(buffers' 0' buffers.Length);                                mappingMemoryStream.Seek(0' SeekOrigin.Begin);                                while (position > 0)                              {                                  mappingMemoryStream.Write(buffers' 0' position);                                    position = mappingFileStream.Read(buffers' 0' buffers.Length);                              }                                mappingMemoryStream.Flush();                                entityMappingConfig =                                  ObjectSerializerFactory.GetObjectSerializer("XML").                                  Deserialize<EntityMappingConfiguration>(mappingMemoryStream.ToArray());                                mappingMemoryStream.Close();                          }                            mappingFileStream.Close();                      }                        if (entityMappingConfig.Entities != null &&                          entityMappingConfig.Entities.Length > 0)                      {                          foreach (EntityConfiguration entityConfig in entityMappingConfig.Entities)                          {                              if (!entityConfigs.ContainsKey(entityConfig.Name))                              {                                  entityConfigs.Add(entityConfig.Name' entityConfig);                              }                          }                      }                  }              }
Magic Number,EApp.Data.MySql,MySqlDbProvider,C:\repos\TwoMaKing_EApp\EApp.Data\MySql\MySqlDbProvider.cs,AdjustParameter,The following statement contains a magic number: if (value.GetType() == typeof(string))              {                  mySqlParam.MySqlDbType = MySqlDbType.VarChar;                  if (value.ToString().Length > 2000)                  {                      mySqlParam.MySqlDbType = MySqlDbType.Text;                  }                  return;              }
Magic Number,EApp.Data.Queries,WhereClauseBuilder<TDataObject>,C:\repos\TwoMaKing_EApp\EApp.Data\Queries\Where\WhereClauseBuilder.cs,VisitConstant,The following statement contains a magic number: string paramName = string.Format("{0}{1}"' ParameterChar' Utils.GetUniqueIdentifier(5));
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GetColumnHash,The following statement contains a magic number: unchecked              {                  int colCount = reader.FieldCount' hash = colCount;                  for (int i = 0; i < colCount; i++)                  {   // binding code is only interested in names - not types                      object tmp = reader.GetName(i);                      hash = (hash * 31) + (tmp == null ? 0 : tmp.GetHashCode());                  }                  return hash;              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));                  case 5:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r));                  case 6:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)' (TSixth)otherDeserializers[4](r)' (TSeventh)otherDeserializers[5](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get(command.Connection).Arrays)              {                  var arrayParm = command.CreateParameter();                  arrayParm.Value = value ?? DBNull.Value;                  arrayParm.ParameterName = namePrefix;                  command.Parameters.Add(arrayParm);              }              else              {                  var list = value as IEnumerable;                  var count = 0;                  bool isString = value is IEnumerable<string>;                  bool isDbString = value is IEnumerable<DbString>;                  foreach (var item in list)                  {                      count++;                      var listParam = command.CreateParameter();                      listParam.ParameterName = namePrefix + count;                      if (isString)                      {                          listParam.Size = DbString.DefaultLength;                          if (item != null && ((string)item).Length > DbString.DefaultLength)                          {                              listParam.Size = -1;                          }                      }                      if (isDbString && item as DbString != null)                      {                          var str = item as DbString;                          str.AddParameter(command' listParam.ParameterName);                      }                      else                      {                          listParam.Value = item ?? DBNull.Value;                          command.Parameters.Add(listParam);                      }                  }                    var regexIncludingUnknown = @"([?@:]" + Regex.Escape(namePrefix) + @")(?!\w)(\s+(?i)unknown(?-i))?";                  if (count == 0)                  {                      command.CommandText = Regex.Replace(command.CommandText' regexIncludingUnknown' match =>                      {                          var variableName = match.Groups[1].Value;                          if (match.Groups[2].Success)                          {                              // looks like an optimize hint; leave it alone!                              return match.Value;                          }                          else                          {                              return "(SELECT " + variableName + " WHERE 1 = 0)";                          }                      }' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);                                              var dummyParam = command.CreateParameter();                      dummyParam.ParameterName = namePrefix;                      dummyParam.Value = DBNull.Value;                      command.Parameters.Add(dummyParam);                  }                  else                  {                      command.CommandText = Regex.Replace(command.CommandText' regexIncludingUnknown' match =>                      {                          var variableName = match.Groups[1].Value;                          if (match.Groups[2].Success)                          {                              // looks like an optimize hint; expand it                              var suffix = match.Groups[2].Value;                                                                var sb = GetStringBuilder().Append(variableName).Append(1).Append(suffix);                              for (int i = 2; i <= count; i++)                              {                                  sb.Append(''').Append(variableName).Append(i).Append(suffix);                              }                              return sb.__ToStringRecycle();                          }                          else                          {                              var sb = GetStringBuilder().Append('(').Append(variableName).Append(1);                              for (int i = 2; i <= count; i++)                              {                                  sb.Append(''').Append(variableName).Append(i);                              }                              return sb.Append(')').__ToStringRecycle();                          }                      }' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);                  }              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get(command.Connection).Arrays)              {                  var arrayParm = command.CreateParameter();                  arrayParm.Value = value ?? DBNull.Value;                  arrayParm.ParameterName = namePrefix;                  command.Parameters.Add(arrayParm);              }              else              {                  var list = value as IEnumerable;                  var count = 0;                  bool isString = value is IEnumerable<string>;                  bool isDbString = value is IEnumerable<DbString>;                  foreach (var item in list)                  {                      count++;                      var listParam = command.CreateParameter();                      listParam.ParameterName = namePrefix + count;                      if (isString)                      {                          listParam.Size = DbString.DefaultLength;                          if (item != null && ((string)item).Length > DbString.DefaultLength)                          {                              listParam.Size = -1;                          }                      }                      if (isDbString && item as DbString != null)                      {                          var str = item as DbString;                          str.AddParameter(command' listParam.ParameterName);                      }                      else                      {                          listParam.Value = item ?? DBNull.Value;                          command.Parameters.Add(listParam);                      }                  }                    var regexIncludingUnknown = @"([?@:]" + Regex.Escape(namePrefix) + @")(?!\w)(\s+(?i)unknown(?-i))?";                  if (count == 0)                  {                      command.CommandText = Regex.Replace(command.CommandText' regexIncludingUnknown' match =>                      {                          var variableName = match.Groups[1].Value;                          if (match.Groups[2].Success)                          {                              // looks like an optimize hint; leave it alone!                              return match.Value;                          }                          else                          {                              return "(SELECT " + variableName + " WHERE 1 = 0)";                          }                      }' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);                                              var dummyParam = command.CreateParameter();                      dummyParam.ParameterName = namePrefix;                      dummyParam.Value = DBNull.Value;                      command.Parameters.Add(dummyParam);                  }                  else                  {                      command.CommandText = Regex.Replace(command.CommandText' regexIncludingUnknown' match =>                      {                          var variableName = match.Groups[1].Value;                          if (match.Groups[2].Success)                          {                              // looks like an optimize hint; expand it                              var suffix = match.Groups[2].Value;                                                                var sb = GetStringBuilder().Append(variableName).Append(1).Append(suffix);                              for (int i = 2; i <= count; i++)                              {                                  sb.Append(''').Append(variableName).Append(i).Append(suffix);                              }                              return sb.__ToStringRecycle();                          }                          else                          {                              var sb = GetStringBuilder().Append('(').Append(variableName).Append(1);                              for (int i = 2; i <= count; i++)                              {                                  sb.Append(''').Append(variableName).Append(i);                              }                              return sb.Append(')').__ToStringRecycle();                          }                      }' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);                  }              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get(command.Connection).Arrays)              {                  var arrayParm = command.CreateParameter();                  arrayParm.Value = value ?? DBNull.Value;                  arrayParm.ParameterName = namePrefix;                  command.Parameters.Add(arrayParm);              }              else              {                  var list = value as IEnumerable;                  var count = 0;                  bool isString = value is IEnumerable<string>;                  bool isDbString = value is IEnumerable<DbString>;                  foreach (var item in list)                  {                      count++;                      var listParam = command.CreateParameter();                      listParam.ParameterName = namePrefix + count;                      if (isString)                      {                          listParam.Size = DbString.DefaultLength;                          if (item != null && ((string)item).Length > DbString.DefaultLength)                          {                              listParam.Size = -1;                          }                      }                      if (isDbString && item as DbString != null)                      {                          var str = item as DbString;                          str.AddParameter(command' listParam.ParameterName);                      }                      else                      {                          listParam.Value = item ?? DBNull.Value;                          command.Parameters.Add(listParam);                      }                  }                    var regexIncludingUnknown = @"([?@:]" + Regex.Escape(namePrefix) + @")(?!\w)(\s+(?i)unknown(?-i))?";                  if (count == 0)                  {                      command.CommandText = Regex.Replace(command.CommandText' regexIncludingUnknown' match =>                      {                          var variableName = match.Groups[1].Value;                          if (match.Groups[2].Success)                          {                              // looks like an optimize hint; leave it alone!                              return match.Value;                          }                          else                          {                              return "(SELECT " + variableName + " WHERE 1 = 0)";                          }                      }' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);                                              var dummyParam = command.CreateParameter();                      dummyParam.ParameterName = namePrefix;                      dummyParam.Value = DBNull.Value;                      command.Parameters.Add(dummyParam);                  }                  else                  {                      command.CommandText = Regex.Replace(command.CommandText' regexIncludingUnknown' match =>                      {                          var variableName = match.Groups[1].Value;                          if (match.Groups[2].Success)                          {                              // looks like an optimize hint; expand it                              var suffix = match.Groups[2].Value;                                                                var sb = GetStringBuilder().Append(variableName).Append(1).Append(suffix);                              for (int i = 2; i <= count; i++)                              {                                  sb.Append(''').Append(variableName).Append(i).Append(suffix);                              }                              return sb.__ToStringRecycle();                          }                          else                          {                              var sb = GetStringBuilder().Append('(').Append(variableName).Append(1);                              for (int i = 2; i <= count; i++)                              {                                  sb.Append(''').Append(variableName).Append(i);                              }                              return sb.Append(')').__ToStringRecycle();                          }                      }' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);                  }              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get(command.Connection).Arrays)              {                  var arrayParm = command.CreateParameter();                  arrayParm.Value = value ?? DBNull.Value;                  arrayParm.ParameterName = namePrefix;                  command.Parameters.Add(arrayParm);              }              else              {                  var list = value as IEnumerable;                  var count = 0;                  bool isString = value is IEnumerable<string>;                  bool isDbString = value is IEnumerable<DbString>;                  foreach (var item in list)                  {                      count++;                      var listParam = command.CreateParameter();                      listParam.ParameterName = namePrefix + count;                      if (isString)                      {                          listParam.Size = DbString.DefaultLength;                          if (item != null && ((string)item).Length > DbString.DefaultLength)                          {                              listParam.Size = -1;                          }                      }                      if (isDbString && item as DbString != null)                      {                          var str = item as DbString;                          str.AddParameter(command' listParam.ParameterName);                      }                      else                      {                          listParam.Value = item ?? DBNull.Value;                          command.Parameters.Add(listParam);                      }                  }                    var regexIncludingUnknown = @"([?@:]" + Regex.Escape(namePrefix) + @")(?!\w)(\s+(?i)unknown(?-i))?";                  if (count == 0)                  {                      command.CommandText = Regex.Replace(command.CommandText' regexIncludingUnknown' match =>                      {                          var variableName = match.Groups[1].Value;                          if (match.Groups[2].Success)                          {                              // looks like an optimize hint; leave it alone!                              return match.Value;                          }                          else                          {                              return "(SELECT " + variableName + " WHERE 1 = 0)";                          }                      }' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);                                              var dummyParam = command.CreateParameter();                      dummyParam.ParameterName = namePrefix;                      dummyParam.Value = DBNull.Value;                      command.Parameters.Add(dummyParam);                  }                  else                  {                      command.CommandText = Regex.Replace(command.CommandText' regexIncludingUnknown' match =>                      {                          var variableName = match.Groups[1].Value;                          if (match.Groups[2].Success)                          {                              // looks like an optimize hint; expand it                              var suffix = match.Groups[2].Value;                                                                var sb = GetStringBuilder().Append(variableName).Append(1).Append(suffix);                              for (int i = 2; i <= count; i++)                              {                                  sb.Append(''').Append(variableName).Append(i).Append(suffix);                              }                              return sb.__ToStringRecycle();                          }                          else                          {                              var sb = GetStringBuilder().Append('(').Append(variableName).Append(1);                              for (int i = 2; i <= count; i++)                              {                                  sb.Append(''').Append(variableName).Append(i);                              }                              return sb.Append(')').__ToStringRecycle();                          }                      }' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);                  }              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get(command.Connection).Arrays)              {                  var arrayParm = command.CreateParameter();                  arrayParm.Value = value ?? DBNull.Value;                  arrayParm.ParameterName = namePrefix;                  command.Parameters.Add(arrayParm);              }              else              {                  var list = value as IEnumerable;                  var count = 0;                  bool isString = value is IEnumerable<string>;                  bool isDbString = value is IEnumerable<DbString>;                  foreach (var item in list)                  {                      count++;                      var listParam = command.CreateParameter();                      listParam.ParameterName = namePrefix + count;                      if (isString)                      {                          listParam.Size = DbString.DefaultLength;                          if (item != null && ((string)item).Length > DbString.DefaultLength)                          {                              listParam.Size = -1;                          }                      }                      if (isDbString && item as DbString != null)                      {                          var str = item as DbString;                          str.AddParameter(command' listParam.ParameterName);                      }                      else                      {                          listParam.Value = item ?? DBNull.Value;                          command.Parameters.Add(listParam);                      }                  }                    var regexIncludingUnknown = @"([?@:]" + Regex.Escape(namePrefix) + @")(?!\w)(\s+(?i)unknown(?-i))?";                  if (count == 0)                  {                      command.CommandText = Regex.Replace(command.CommandText' regexIncludingUnknown' match =>                      {                          var variableName = match.Groups[1].Value;                          if (match.Groups[2].Success)                          {                              // looks like an optimize hint; leave it alone!                              return match.Value;                          }                          else                          {                              return "(SELECT " + variableName + " WHERE 1 = 0)";                          }                      }' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);                                              var dummyParam = command.CreateParameter();                      dummyParam.ParameterName = namePrefix;                      dummyParam.Value = DBNull.Value;                      command.Parameters.Add(dummyParam);                  }                  else                  {                      command.CommandText = Regex.Replace(command.CommandText' regexIncludingUnknown' match =>                      {                          var variableName = match.Groups[1].Value;                          if (match.Groups[2].Success)                          {                              // looks like an optimize hint; expand it                              var suffix = match.Groups[2].Value;                                                                var sb = GetStringBuilder().Append(variableName).Append(1).Append(suffix);                              for (int i = 2; i <= count; i++)                              {                                  sb.Append(''').Append(variableName).Append(i).Append(suffix);                              }                              return sb.__ToStringRecycle();                          }                          else                          {                              var sb = GetStringBuilder().Append('(').Append(variableName).Append(1);                              for (int i = 2; i <= count; i++)                              {                                  sb.Append(''').Append(variableName).Append(i);                              }                              return sb.Append(')').__ToStringRecycle();                          }                      }' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);                  }              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,LoadLocal,The following statement contains a magic number: switch (index)              {                  case 0: il.Emit(OpCodes.Ldloc_0); break;                  case 1: il.Emit(OpCodes.Ldloc_1); break;                  case 2: il.Emit(OpCodes.Ldloc_2); break;                  case 3: il.Emit(OpCodes.Ldloc_3); break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Ldloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Ldloc' (short)index);                      }                      break;              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,LoadLocal,The following statement contains a magic number: switch (index)              {                  case 0: il.Emit(OpCodes.Ldloc_0); break;                  case 1: il.Emit(OpCodes.Ldloc_1); break;                  case 2: il.Emit(OpCodes.Ldloc_2); break;                  case 3: il.Emit(OpCodes.Ldloc_3); break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Ldloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Ldloc' (short)index);                      }                      break;              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,LoadLocal,The following statement contains a magic number: switch (index)              {                  case 0: il.Emit(OpCodes.Ldloc_0); break;                  case 1: il.Emit(OpCodes.Ldloc_1); break;                  case 2: il.Emit(OpCodes.Ldloc_2); break;                  case 3: il.Emit(OpCodes.Ldloc_3); break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Ldloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Ldloc' (short)index);                      }                      break;              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,StoreLocal,The following statement contains a magic number: switch (index)              {                  case 0: il.Emit(OpCodes.Stloc_0); break;                  case 1: il.Emit(OpCodes.Stloc_1); break;                  case 2: il.Emit(OpCodes.Stloc_2); break;                  case 3: il.Emit(OpCodes.Stloc_3); break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Stloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Stloc' (short)index);                      }                      break;              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,StoreLocal,The following statement contains a magic number: switch (index)              {                  case 0: il.Emit(OpCodes.Stloc_0); break;                  case 1: il.Emit(OpCodes.Stloc_1); break;                  case 2: il.Emit(OpCodes.Stloc_2); break;                  case 3: il.Emit(OpCodes.Stloc_3); break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Stloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Stloc' (short)index);                      }                      break;              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,StoreLocal,The following statement contains a magic number: switch (index)              {                  case 0: il.Emit(OpCodes.Stloc_0); break;                  case 1: il.Emit(OpCodes.Stloc_1); break;                  case 2: il.Emit(OpCodes.Stloc_2); break;                  case 3: il.Emit(OpCodes.Stloc_3); break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Stloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Stloc' (short)index);                      }                      break;              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,LoadLocalAddress,The following statement contains a magic number: if (index <= 255)              {                  il.Emit(OpCodes.Ldloca_S' (byte)index);              }              else              {                  il.Emit(OpCodes.Ldloca' (short)index);              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,Dappers,Identity,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : SqlMapper.connectionStringComparer.GetHashCode(connectionString));                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,Dappers,Identity,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : SqlMapper.connectionStringComparer.GetHashCode(connectionString));                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,Dappers,Identity,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : SqlMapper.connectionStringComparer.GetHashCode(connectionString));                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,Dappers,Identity,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : SqlMapper.connectionStringComparer.GetHashCode(connectionString));                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,Dappers,Identity,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : SqlMapper.connectionStringComparer.GetHashCode(connectionString));                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,Dappers,Identity,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : SqlMapper.connectionStringComparer.GetHashCode(connectionString));                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,Dappers,Identity,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : SqlMapper.connectionStringComparer.GetHashCode(connectionString));                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,Dappers,Identity,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : SqlMapper.connectionStringComparer.GetHashCode(connectionString));                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,Dappers,DefaultTypeMap,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,FindConstructor,The following statement contains a magic number: foreach (ConstructorInfo ctor in constructors.OrderBy(c => c.IsPublic ? 0 : (c.IsPrivate ? 2 : 1)).ThenBy(c => c.GetParameters().Length))              {                  ParameterInfo[] ctorParameters = ctor.GetParameters();                  if (ctorParameters.Length == 0)                      return ctor;                    if (ctorParameters.Length != types.Length)                      continue;                    int i = 0;                  for (; i < ctorParameters.Length; i++)                  {                      if (!String.Equals(ctorParameters[i].Name' names[i]' StringComparison.OrdinalIgnoreCase))                          break;                      if (types[i] == typeof(byte[]) && ctorParameters[i].ParameterType.FullName == SqlMapper.LinqBinary)                          continue;                      var unboxedType = Nullable.GetUnderlyingType(ctorParameters[i].ParameterType) ?? ctorParameters[i].ParameterType;                      if (unboxedType != types[i]                          && !(unboxedType.IsEnum && Enum.GetUnderlyingType(unboxedType) == types[i])                          && !(unboxedType == typeof(char) && types[i] == typeof(string)))                          break;                  }                    if (i == ctorParameters.Length)                      return ctor;              }
Magic Number,EApp.Data.SqlServer,SqlServerDbProvider,C:\repos\TwoMaKing_EApp\EApp.Data\SqlServer\SqlServerDbProvider.cs,AdjustParameter,The following statement contains a magic number: if (value.GetType() == typeof(string))              {                  sqlParam.SqlDbType = SqlDbType.NVarChar;                  if (value.ToString().Length > 2000)                  {                      sqlParam.SqlDbType = SqlDbType.Text;                  }                  return;              }
Missing Default,Dappers,SqlMapper,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,LookupDbType,The following switch statement is missing a default case: switch (type.FullName)              {                  case "Microsoft.SqlServer.Types.SqlGeography":                      AddTypeHandler(type' handler = new UdtTypeHandler("GEOGRAPHY"));                      return DbType.Object;                  case "Microsoft.SqlServer.Types.SqlGeometry":                      AddTypeHandler(type' handler = new UdtTypeHandler("GEOMETRY"));                      return DbType.Object;                  case "Microsoft.SqlServer.Types.SqlHierarchyId":                      AddTypeHandler(type' handler = new UdtTypeHandler("HIERARCHYID"));                      return DbType.Object;              }
Missing Default,Dappers,DynamicParameters,C:\repos\TwoMaKing_EApp\EApp.Data\SqlMapper.cs,Clean,The following switch statement is missing a default case: switch (name[0])                  {                      case '@':                      case ':':                      case '?':                          return name.Substring(1);                  }
