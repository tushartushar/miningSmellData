Implementation smell,Namespace,Class,File,Method,Description
Long Method,EApp.Core.Application,App,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\Application\App.cs,App,The method has 125 lines of code.
Long Method,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseNumber,The method has 60 lines of code.
Long Method,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,IsCompatibleWith,The method has 116 lines of code.
Long Method,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,NextToken,The method has 173 lines of code.
Long Method,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseNumber,The method has 60 lines of code.
Long Method,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,IsCompatibleWith,The method has 116 lines of code.
Long Method,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,NextToken,The method has 173 lines of code.
Complex Method,EApp.Core.Application,App,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\Application\App.cs,App,Cyclomatic complexity of the method is 30
Complex Method,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseComparison,Cyclomatic complexity of the method is 29
Complex Method,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseAdditive,Cyclomatic complexity of the method is 14
Complex Method,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseMultiplicative,Cyclomatic complexity of the method is 11
Complex Method,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParsePrimaryStart,Cyclomatic complexity of the method is 7
Complex Method,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseNew,Cyclomatic complexity of the method is 7
Complex Method,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseTypeAccess,Cyclomatic complexity of the method is 9
Complex Method,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseMemberAccess,Cyclomatic complexity of the method is 15
Complex Method,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseElementAccess,Cyclomatic complexity of the method is 8
Complex Method,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,GetNumericTypeKind,Cyclomatic complexity of the method is 13
Complex Method,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,PromoteExpression,Cyclomatic complexity of the method is 17
Complex Method,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseNumber,Cyclomatic complexity of the method is 44
Complex Method,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,IsCompatibleWith,Cyclomatic complexity of the method is 30
Complex Method,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,NextToken,Cyclomatic complexity of the method is 111
Complex Method,EApp.Core,Utils,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\Utils.cs,GetSignature,Cyclomatic complexity of the method is 7
Complex Method,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseComparison,Cyclomatic complexity of the method is 29
Complex Method,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseAdditive,Cyclomatic complexity of the method is 14
Complex Method,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseMultiplicative,Cyclomatic complexity of the method is 11
Complex Method,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParsePrimaryStart,Cyclomatic complexity of the method is 7
Complex Method,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseNew,Cyclomatic complexity of the method is 7
Complex Method,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseTypeAccess,Cyclomatic complexity of the method is 9
Complex Method,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseMemberAccess,Cyclomatic complexity of the method is 15
Complex Method,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseElementAccess,Cyclomatic complexity of the method is 8
Complex Method,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,GetNumericTypeKind,Cyclomatic complexity of the method is 13
Complex Method,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,PromoteExpression,Cyclomatic complexity of the method is 17
Complex Method,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseNumber,Cyclomatic complexity of the method is 44
Complex Method,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,IsCompatibleWith,Cyclomatic complexity of the method is 30
Complex Method,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,NextToken,Cyclomatic complexity of the method is 111
Long Parameter List,EApp.Core,DynamicExpression,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseLambda,The method has 4 parameters.
Long Parameter List,EApp.Core,DynamicExpression,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseLambda,The method has 4 parameters.
Long Parameter List,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,GenerateConditional,The method has 4 parameters.
Long Parameter List,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseAggregate,The method has 4 parameters.
Long Parameter List,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,CheckAndPromoteOperand,The method has 4 parameters.
Long Parameter List,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,CheckAndPromoteOperands,The method has 5 parameters.
Long Parameter List,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,IncompatibleOperandsError,The method has 4 parameters.
Long Parameter List,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,FindMethod,The method has 5 parameters.
Long Parameter List,EApp.Core,IObjectContainer,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\IObjectContainer.cs,RegisterType,The method has 4 parameters.
Long Parameter List,EApp.Core.DynamicQuery,DynamicQueryable,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,GroupBy,The method has 4 parameters.
Long Parameter List,EApp.Core.DynamicQuery,DynamicExpression,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseLambda,The method has 4 parameters.
Long Parameter List,EApp.Core.DynamicQuery,DynamicExpression,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseLambda,The method has 4 parameters.
Long Parameter List,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,GenerateConditional,The method has 4 parameters.
Long Parameter List,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseAggregate,The method has 4 parameters.
Long Parameter List,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,CheckAndPromoteOperand,The method has 4 parameters.
Long Parameter List,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,CheckAndPromoteOperands,The method has 5 parameters.
Long Parameter List,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,IncompatibleOperandsError,The method has 4 parameters.
Long Parameter List,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,FindMethod,The method has 5 parameters.
Long Parameter List,EApp.Core.IoC,NInjectObjectContainer,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\IoC\NInject\NInjectObjectContainer.cs,RegisterType,The method has 4 parameters.
Long Parameter List,EApp.Core.IoC,UnityObjectContainer,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\IoC\Unity\UnityObjectContainer.cs,RegisterType,The method has 4 parameters.
Long Parameter List,EApp.Core.Query,PagingResult,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\Query\PagingResult.cs,PagingResult,The method has 5 parameters.
Long Parameter List,EApp.Core.Configuration.Fluent,ObjectContainerConfigurator,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\Configuration\Fluent\ObjectContainerConfigurator.cs,ObjectContainerConfigurator,The method has 4 parameters.
Long Parameter List,EApp.Core.Plugin,PluginItem,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\Plugin\PluginItem.cs,PluginItem,The method has 4 parameters.
Long Parameter List,EApp.Core.Plugin,PluginItem,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\Plugin\PluginItem.cs,PluginItem,The method has 5 parameters.
Long Parameter List,EApp.Core.Plugin,PluginItem,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\Plugin\PluginItem.cs,CreatePluginItem,The method has 5 parameters.
Long Identifier,EApp.Core.Application,App,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\Application\App.cs,App,The length of the parameter objectContainerFactoryProviderName is 34.
Long Identifier,EApp.Core.Application,App,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\Application\App.cs,App,The length of the parameter serviceProviderFacotryTypeName is 30.
Long Statement,EApp.Core.Application,EAppRuntime,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\Application\EAppRuntime.cs,Create,The length of the statement  "		throw new ConfigException ("Either EApp configuration or EApp application configuration has not been initialized in the ConfigSource instance."); " is 145.
Long Statement,EApp.Core,ClassFactory,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,GenerateProperties,The length of the statement  "		MethodBuilder mbGet = tb.DefineMethod ("get_" + dp.Name' MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig' dp.Type' Type.EmptyTypes); " is 168.
Long Statement,EApp.Core,ClassFactory,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,GenerateProperties,The length of the statement  "		MethodBuilder mbSet = tb.DefineMethod ("set_" + dp.Name' MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig' null' new Type[] { " is 160.
Long Statement,EApp.Core,ClassFactory,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,GenerateEquals,The length of the statement  "	MethodBuilder mb = tb.DefineMethod ("Equals"' MethodAttributes.Public | MethodAttributes.ReuseSlot | MethodAttributes.Virtual | MethodAttributes.HideBySig' typeof(bool)' new Type[] { " is 182.
Long Statement,EApp.Core,ClassFactory,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,GenerateGetHashCode,The length of the statement  "	MethodBuilder mb = tb.DefineMethod ("GetHashCode"' MethodAttributes.Public | MethodAttributes.ReuseSlot | MethodAttributes.Virtual | MethodAttributes.HideBySig' typeof(int)' Type.EmptyTypes); " is 191.
Long Statement,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseComparison,The length of the statement  "	while (token.id == TokenId.Equal || token.id == TokenId.DoubleEqual || token.id == TokenId.ExclamationEqual || token.id == TokenId.LessGreater || token.id == TokenId.GreaterThan || token.id == TokenId.GreaterThanEqual || token.id == TokenId.LessThan || token.id == TokenId.LessThanEqual) { " is 289.
Long Statement,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseComparison,The length of the statement  "		bool isEquality = op.id == TokenId.Equal || op.id == TokenId.DoubleEqual || op.id == TokenId.ExclamationEqual || op.id == TokenId.LessGreater; " is 142.
Long Statement,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseComparison,The length of the statement  "			CheckAndPromoteOperands (isEquality ? typeof(IEqualitySignatures) : typeof(IRelationalSignatures)' op.text' ref left' ref right' op.pos); " is 137.
Long Statement,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseMultiplicative,The length of the statement  "	while (token.id == TokenId.Asterisk || token.id == TokenId.Slash || token.id == TokenId.Percent || TokenIdentifierIs ("mod")) { " is 127.
Long Statement,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseIdentifier,The length of the statement  "	if (symbols.TryGetValue (token.text' out value) || externals != null && externals.TryGetValue (token.text' out value)) { " is 120.
Long Statement,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseMemberAccess,The length of the statement  "		return member is PropertyInfo ? Expression.Property (instance' (PropertyInfo)member) : Expression.Field (instance' (FieldInfo)member); " is 134.
Long Statement,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,IncompatibleOperandsError,The length of the statement  "	return ParseError (pos' ExpressionParserRes.IncompatibleOperands' opName' GetTypeName (left.Type)' GetTypeName (right.Type)); " is 125.
Long Statement,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,FindPropertyOrField,The length of the statement  "	BindingFlags flags = BindingFlags.Public | BindingFlags.DeclaredOnly | (staticAccess ? BindingFlags.Static : BindingFlags.Instance); " is 132.
Long Statement,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,FindPropertyOrField,The length of the statement  "		MemberInfo[] members = t.FindMembers (MemberTypes.Property | MemberTypes.Field' flags' Type.FilterNameIgnoreCase' memberName); " is 126.
Long Statement,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,FindMethod,The length of the statement  "	BindingFlags flags = BindingFlags.Public | BindingFlags.DeclaredOnly | (staticAccess ? BindingFlags.Static : BindingFlags.Instance); " is 132.
Long Statement,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,FindIndexer,The length of the statement  "			IEnumerable<MethodBase> methods = members.OfType<PropertyInfo> ().Select (p => (MethodBase)p.GetGetMethod ()).Where (m => m != null); " is 133.
Long Statement,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseEnum,The length of the statement  "		MemberInfo[] memberInfos = type.FindMembers (MemberTypes.Field' BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Static' Type.FilterNameIgnoreCase' name); " is 168.
Long Statement,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseError,The length of the statement  "	return new ExpressionParseException (string.Format (System.Globalization.CultureInfo.CurrentCulture' format' args)' pos); " is 121.
Long Statement,EApp.Core,WindowsMvcControllerBuilder,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\WindowsMvcControllerBuilder.cs,SetControllerFactory,The length of the statement  "		this.controllerFactory = (IControllerFactory)EAppRuntime.Instance.CurrentApp.ObjectContainer.Resolve (controllerFactoryType); " is 125.
Long Statement,EApp.Core.DynamicQuery,ClassFactory,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,GenerateProperties,The length of the statement  "		MethodBuilder mbGet = tb.DefineMethod ("get_" + dp.Name' MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig' dp.Type' Type.EmptyTypes); " is 168.
Long Statement,EApp.Core.DynamicQuery,ClassFactory,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,GenerateProperties,The length of the statement  "		MethodBuilder mbSet = tb.DefineMethod ("set_" + dp.Name' MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig' null' new Type[] { " is 160.
Long Statement,EApp.Core.DynamicQuery,ClassFactory,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,GenerateEquals,The length of the statement  "	MethodBuilder mb = tb.DefineMethod ("Equals"' MethodAttributes.Public | MethodAttributes.ReuseSlot | MethodAttributes.Virtual | MethodAttributes.HideBySig' typeof(bool)' new Type[] { " is 182.
Long Statement,EApp.Core.DynamicQuery,ClassFactory,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,GenerateGetHashCode,The length of the statement  "	MethodBuilder mb = tb.DefineMethod ("GetHashCode"' MethodAttributes.Public | MethodAttributes.ReuseSlot | MethodAttributes.Virtual | MethodAttributes.HideBySig' typeof(int)' Type.EmptyTypes); " is 191.
Long Statement,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseComparison,The length of the statement  "	while (token.id == TokenId.Equal || token.id == TokenId.DoubleEqual || token.id == TokenId.ExclamationEqual || token.id == TokenId.LessGreater || token.id == TokenId.GreaterThan || token.id == TokenId.GreaterThanEqual || token.id == TokenId.LessThan || token.id == TokenId.LessThanEqual) { " is 289.
Long Statement,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseComparison,The length of the statement  "		bool isEquality = op.id == TokenId.Equal || op.id == TokenId.DoubleEqual || op.id == TokenId.ExclamationEqual || op.id == TokenId.LessGreater; " is 142.
Long Statement,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseComparison,The length of the statement  "			CheckAndPromoteOperands (isEquality ? typeof(IEqualitySignatures) : typeof(IRelationalSignatures)' op.text' ref left' ref right' op.pos); " is 137.
Long Statement,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseMultiplicative,The length of the statement  "	while (token.id == TokenId.Asterisk || token.id == TokenId.Slash || token.id == TokenId.Percent || TokenIdentifierIs ("mod")) { " is 127.
Long Statement,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseIdentifier,The length of the statement  "	if (symbols.TryGetValue (token.text' out value) || externals != null && externals.TryGetValue (token.text' out value)) { " is 120.
Long Statement,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseMemberAccess,The length of the statement  "		return member is PropertyInfo ? Expression.Property (instance' (PropertyInfo)member) : Expression.Field (instance' (FieldInfo)member); " is 134.
Long Statement,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,FindPropertyOrField,The length of the statement  "	BindingFlags flags = BindingFlags.Public | BindingFlags.DeclaredOnly | (staticAccess ? BindingFlags.Static : BindingFlags.Instance); " is 132.
Long Statement,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,FindPropertyOrField,The length of the statement  "		MemberInfo[] members = t.FindMembers (MemberTypes.Property | MemberTypes.Field' flags' Type.FilterNameIgnoreCase' memberName); " is 126.
Long Statement,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,FindMethod,The length of the statement  "	BindingFlags flags = BindingFlags.Public | BindingFlags.DeclaredOnly | (staticAccess ? BindingFlags.Static : BindingFlags.Instance); " is 132.
Long Statement,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,FindIndexer,The length of the statement  "			IEnumerable<MethodBase> methods = members.OfType<PropertyInfo> ().Select (p => (MethodBase)p.GetGetMethod ()).Where (m => m != null); " is 133.
Long Statement,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseEnum,The length of the statement  "		MemberInfo[] memberInfos = type.FindMembers (MemberTypes.Field' BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Static' Type.FilterNameIgnoreCase' name); " is 168.
Long Statement,EApp.Core.IoC,NInjectObjectContainer,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\IoC\NInject\NInjectObjectContainer.cs,GetWrapperContainer,The length of the statement  "	throw new InfrastructureException ("The wrapped container type provided by the current object container should be '{0}'."' typeof(StandardKernel)); " is 147.
Long Statement,EApp.Core.IoC,UnityObjectContainer,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\IoC\Unity\UnityObjectContainer.cs,GetWrapperContainer,The length of the statement  "	throw new InfrastructureException ("The wrapped container type provided by the current object container should be '{0}'."' typeof(UnityContainer)); " is 147.
Long Statement,EApp.Core.Configuration,PluginRegisterElementCollection,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\Configuration\EAppConfiguration.csd.cs,IsElementName,The length of the statement  "	return (elementName == global::EApp.Core.Configuration.PluginRegisterElementCollection.PluginRegisterElementPropertyName); " is 122.
Long Statement,EApp.Core.Configuration,SerializationFormatElementCollection,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\Configuration\EAppConfiguration.csd.cs,IsElementName,The length of the statement  "	return (elementName == global::EApp.Core.Configuration.SerializationFormatElementCollection.NameTypeElementPropertyName); " is 121.
Long Statement,EApp.Core.Configuration,RegularConfigSource,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\Configuration\RegularConfigSource.cs,AddAppPlugin,The length of the statement  "		if (appPluginItem.Name.Equals (name' StringComparison.InvariantCultureIgnoreCase) || appPluginItem.Type.Equals (type.AssemblyQualifiedName' StringComparison.InvariantCultureIgnoreCase)) { " is 187.
Long Statement,EApp.Core.Configuration,RegularConfigSource,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\Configuration\RegularConfigSource.cs,AddResourceManager,The length of the statement  "		if (resourceItem.Name.Equals (name' StringComparison.InvariantCultureIgnoreCase) || resourceItem.Type.Equals (type.AssemblyQualifiedName' StringComparison.InvariantCultureIgnoreCase)) { " is 185.
Complex Conditional,EApp.Core.Application,App,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\Application\App.cs,App,The conditional expression  "configSource.Config.PluginContainer != null && configSource.Config.PluginContainer.ElementInformation.IsPresent && configSource.Config.PluginContainer.Host != null && configSource.Config.PluginContainer.Host.ElementInformation.IsPresent"  is complex.
Complex Conditional,EApp.Core.Application,App,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\Application\App.cs,App,The conditional expression  "configSource.Config.PluginContainer != null && configSource.Config.PluginContainer.ElementInformation.IsPresent && configSource.Config.PluginContainer.PluginRegisters != null && configSource.Config.PluginContainer.PluginRegisters.Count > 0"  is complex.
Complex Conditional,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,GenerateConversion,The conditional expression  "(IsNumericType (exprType) || IsEnumType (exprType)) && (IsNumericType (type)) || IsEnumType (type)"  is complex.
Complex Conditional,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,GenerateConversion,The conditional expression  "exprType.IsAssignableFrom (type) || type.IsAssignableFrom (exprType) || exprType.IsInterface || type.IsInterface"  is complex.
Complex Conditional,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,GenerateConversion,The conditional expression  "(IsNumericType (exprType) || IsEnumType (exprType)) && (IsNumericType (type)) || IsEnumType (type)"  is complex.
Complex Conditional,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,GenerateConversion,The conditional expression  "exprType.IsAssignableFrom (type) || type.IsAssignableFrom (exprType) || exprType.IsInterface || type.IsInterface"  is complex.
Magic Number,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseIif,The following statement contains a magic number: if (args.Length != 3)  	throw ParseError (errorPos' ExpressionParserRes.IifRequiresThreeArgs);  
Magic Number,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseIif,The following statement contains a magic number: return GenerateConditional (args [0]' args [1]' args [2]' errorPos);  
Magic Number,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,IsSignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind (type) == 2;  
Magic Number,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,IsUnsignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind (type) == 3;  
Magic Number,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Char:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return 1;  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  	return 2;  case TypeCode.Byte:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  	return 3;  default:  	return 0;  }  
Magic Number,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Char:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return 1;  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  	return 2;  case TypeCode.Byte:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  	return 3;  default:  	return 0;  }  
Magic Number,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,GetNumericTypeKind,The following statement contains a magic number: return 2;  
Magic Number,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,GetNumericTypeKind,The following statement contains a magic number: return 3;  
Magic Number,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseIif,The following statement contains a magic number: if (args.Length != 3)  	throw ParseError (errorPos' Res.IifRequiresThreeArgs);  
Magic Number,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseIif,The following statement contains a magic number: return GenerateConditional (args [0]' args [1]' args [2]' errorPos);  
Magic Number,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,IsSignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind (type) == 2;  
Magic Number,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,IsUnsignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind (type) == 3;  
Magic Number,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Char:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return 1;  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  	return 2;  case TypeCode.Byte:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  	return 3;  default:  	return 0;  }  
Magic Number,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Char:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return 1;  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  	return 2;  case TypeCode.Byte:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  	return 3;  default:  	return 0;  }  
Magic Number,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,GetNumericTypeKind,The following statement contains a magic number: return 2;  
Magic Number,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,GetNumericTypeKind,The following statement contains a magic number: return 3;  
Missing Default,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseComparison,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Equal:  case TokenId.DoubleEqual:  	left = GenerateEqual (left' right);  	break;  case TokenId.ExclamationEqual:  case TokenId.LessGreater:  	left = GenerateNotEqual (left' right);  	break;  case TokenId.GreaterThan:  	left = GenerateGreaterThan (left' right);  	break;  case TokenId.GreaterThanEqual:  	left = GenerateGreaterThanEqual (left' right);  	break;  case TokenId.LessThan:  	left = GenerateLessThan (left' right);  	break;  case TokenId.LessThanEqual:  	left = GenerateLessThanEqual (left' right);  	break;  }  
Missing Default,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseAdditive,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Plus:  	if (left.Type == typeof(string) || right.Type == typeof(string))  		goto case TokenId.Amphersand;  	CheckAndPromoteOperands (typeof(IAddSignatures)' op.text' ref left' ref right' op.pos);  	left = GenerateAdd (left' right);  	break;  case TokenId.Minus:  	CheckAndPromoteOperands (typeof(ISubtractSignatures)' op.text' ref left' ref right' op.pos);  	left = GenerateSubtract (left' right);  	break;  case TokenId.Amphersand:  	left = GenerateStringConcat (left' right);  	break;  }  
Missing Default,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseMultiplicative,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Asterisk:  	left = Expression.Multiply (left' right);  	break;  case TokenId.Slash:  	left = Expression.Divide (left' right);  	break;  case TokenId.Percent:  case TokenId.Identifier:  	left = Expression.Modulo (left' right);  	break;  }  
Missing Default,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,PromoteExpression,The following switch statement is missing a default case: switch (Type.GetTypeCode (ce.Type)) {  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  	value = ParseNumber (text' target);  	break;  case TypeCode.Double:  	if (target == typeof(decimal))  		value = ParseNumber (text' target);  	break;  case TypeCode.String:  	value = ParseEnum (text' target);  	break;  }  
Missing Default,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,ParseNumber,The following switch statement is missing a default case: switch (Type.GetTypeCode (GetNonNullableType (type))) {  case TypeCode.SByte:  	sbyte sb;  	if (sbyte.TryParse (text' out sb))  		return sb;  	break;  case TypeCode.Byte:  	byte b;  	if (byte.TryParse (text' out b))  		return b;  	break;  case TypeCode.Int16:  	short s;  	if (short.TryParse (text' out s))  		return s;  	break;  case TypeCode.UInt16:  	ushort us;  	if (ushort.TryParse (text' out us))  		return us;  	break;  case TypeCode.Int32:  	int i;  	if (int.TryParse (text' out i))  		return i;  	break;  case TypeCode.UInt32:  	uint ui;  	if (uint.TryParse (text' out ui))  		return ui;  	break;  case TypeCode.Int64:  	long l;  	if (long.TryParse (text' out l))  		return l;  	break;  case TypeCode.UInt64:  	ulong ul;  	if (ulong.TryParse (text' out ul))  		return ul;  	break;  case TypeCode.Single:  	float f;  	if (float.TryParse (text' out f))  		return f;  	break;  case TypeCode.Double:  	double d;  	if (double.TryParse (text' out d))  		return d;  	break;  case TypeCode.Decimal:  	decimal e;  	if (decimal.TryParse (text' out e))  		return e;  	break;  }  
Missing Default,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Byte:  case TypeCode.Int16:  case TypeCode.UInt16:  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt16:  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,EApp.Core,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\ExpressionParser.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Single:  case TypeCode.Double:  	return true;  }  
Missing Default,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseComparison,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Equal:  case TokenId.DoubleEqual:  	left = GenerateEqual (left' right);  	break;  case TokenId.ExclamationEqual:  case TokenId.LessGreater:  	left = GenerateNotEqual (left' right);  	break;  case TokenId.GreaterThan:  	left = GenerateGreaterThan (left' right);  	break;  case TokenId.GreaterThanEqual:  	left = GenerateGreaterThanEqual (left' right);  	break;  case TokenId.LessThan:  	left = GenerateLessThan (left' right);  	break;  case TokenId.LessThanEqual:  	left = GenerateLessThanEqual (left' right);  	break;  }  
Missing Default,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseAdditive,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Plus:  	if (left.Type == typeof(string) || right.Type == typeof(string))  		goto case TokenId.Amphersand;  	CheckAndPromoteOperands (typeof(IAddSignatures)' op.text' ref left' ref right' op.pos);  	left = GenerateAdd (left' right);  	break;  case TokenId.Minus:  	CheckAndPromoteOperands (typeof(ISubtractSignatures)' op.text' ref left' ref right' op.pos);  	left = GenerateSubtract (left' right);  	break;  case TokenId.Amphersand:  	left = GenerateStringConcat (left' right);  	break;  }  
Missing Default,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseMultiplicative,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Asterisk:  	left = Expression.Multiply (left' right);  	break;  case TokenId.Slash:  	left = Expression.Divide (left' right);  	break;  case TokenId.Percent:  case TokenId.Identifier:  	left = Expression.Modulo (left' right);  	break;  }  
Missing Default,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,PromoteExpression,The following switch statement is missing a default case: switch (Type.GetTypeCode (ce.Type)) {  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  	value = ParseNumber (text' target);  	break;  case TypeCode.Double:  	if (target == typeof(decimal))  		value = ParseNumber (text' target);  	break;  case TypeCode.String:  	value = ParseEnum (text' target);  	break;  }  
Missing Default,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,ParseNumber,The following switch statement is missing a default case: switch (Type.GetTypeCode (GetNonNullableType (type))) {  case TypeCode.SByte:  	sbyte sb;  	if (sbyte.TryParse (text' out sb))  		return sb;  	break;  case TypeCode.Byte:  	byte b;  	if (byte.TryParse (text' out b))  		return b;  	break;  case TypeCode.Int16:  	short s;  	if (short.TryParse (text' out s))  		return s;  	break;  case TypeCode.UInt16:  	ushort us;  	if (ushort.TryParse (text' out us))  		return us;  	break;  case TypeCode.Int32:  	int i;  	if (int.TryParse (text' out i))  		return i;  	break;  case TypeCode.UInt32:  	uint ui;  	if (uint.TryParse (text' out ui))  		return ui;  	break;  case TypeCode.Int64:  	long l;  	if (long.TryParse (text' out l))  		return l;  	break;  case TypeCode.UInt64:  	ulong ul;  	if (ulong.TryParse (text' out ul))  		return ul;  	break;  case TypeCode.Single:  	float f;  	if (float.TryParse (text' out f))  		return f;  	break;  case TypeCode.Double:  	double d;  	if (double.TryParse (text' out d))  		return d;  	break;  case TypeCode.Decimal:  	decimal e;  	if (decimal.TryParse (text' out e))  		return e;  	break;  }  
Missing Default,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Byte:  case TypeCode.Int16:  case TypeCode.UInt16:  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt16:  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,EApp.Core.DynamicQuery,ExpressionParser,D:\newReposJune17\TwoMaKing_EApp\EApp.Core\DynamicQueryable.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Single:  case TypeCode.Double:  	return true;  }  
