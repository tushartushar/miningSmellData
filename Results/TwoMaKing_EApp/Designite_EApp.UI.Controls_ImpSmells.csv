Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,SetBounds,The method has 101 lines of code.
Long Method,System.Windows.Forms,RibbonDesigner,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonDesigner.cs,HitOn,The method has 112 lines of code.
Long Method,System.Windows.Forms,RibbonProfesionalRendererColorTableBlack,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfesionalRendererColorTableBlack.cs,RibbonProfesionalRendererColorTableBlack,The method has 110 lines of code.
Long Method,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonList,The method has 161 lines of code.
Long Method,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The method has 190 lines of code.
Long Method,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderRibbonItem,The method has 127 lines of code.
Complex Method,EApp.UI.Controls.UIHandler,RibbonHelper,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\UIHandler\RibbonHelper.cs,FindRibbonItem,Cyclomatic complexity of the method is 12
Complex Method,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,UpdateRegions,Cyclomatic complexity of the method is 10
Complex Method,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,SetBounds,Cyclomatic complexity of the method is 12
Complex Method,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,OnMouseDown,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Forms,RibbonFormHelper,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonFormHelper.cs,NonClientHitTest,Cyclomatic complexity of the method is 10
Complex Method,System.Windows.Forms,RibbonMouseSensor,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonMouseSensor.cs,Control_MouseUp,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Forms,RibbonMouseSensor,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonMouseSensor.cs,Control_MouseDown,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Forms,RibbonMouseSensor,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonMouseSensor.cs,Control_MouseMove,Cyclomatic complexity of the method is 14
Complex Method,System.Windows.Forms,RibbonMouseSensor,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonMouseSensor.cs,HitTest,Cyclomatic complexity of the method is 14
Complex Method,System.Windows.Forms,RibbonPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanel.cs,UpdateRegionsFlowsToRight,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Forms,RibbonTab,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTab.cs,UpdateScrollBounds,Cyclomatic complexity of the method is 9
Long Parameter List,EApp.UI.Controls.UIHandler,RibbonHelper,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\UIHandler\RibbonHelper.cs,SetRibbonItemTextToolTip,The method has 5 parameters. Parameters: ribbon' ribbonTabText' ribbonItemName' text' tooltip
Long Parameter List,System.Windows.Forms.RibbonHelpers,WinApi,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\WinApi.cs,ToAscii,The method has 5 parameters. Parameters: uVirtKey' uScanCode' lpbKeyState' lpwTransKey' fuState
Long Parameter List,System.Windows.Forms.RibbonHelpers,WinApi,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\WinApi.cs,DrawThemeTextEx,The method has 9 parameters. Parameters: hTheme' hdc' iPartId' iStateId' text' iCharCount' dwFlags' pRect' pOptions
Long Parameter List,System.Windows.Forms.RibbonHelpers,WinApi,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\WinApi.cs,DrawThemeText,The method has 9 parameters. Parameters: hTheme' hdc' iPartId' iStateId' text' iCharCount' dwFlags1' dwFlags2' pRect
Long Parameter List,System.Windows.Forms.RibbonHelpers,WinApi,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\WinApi.cs,CreateDIBSection,The method has 6 parameters. Parameters: hdc' pbmi' iUsage' ppvBits' hSection' dwOffset
Long Parameter List,System.Windows.Forms.RibbonHelpers,WinApi,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\WinApi.cs,BitBlt,The method has 9 parameters. Parameters: hdc' nXDest' nYDest' nWidth' nHeight' hdcSrc' nXSrc' nYSrc' dwRop
Long Parameter List,System.Windows.Forms.RibbonHelpers,WinApi,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\WinApi.cs,DwmDefWindowProc,The method has 5 parameters. Parameters: hwnd' msg' wParam' lParam' result
Long Parameter List,System.Windows.Forms.RibbonHelpers,WinApi,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\WinApi.cs,DrawTextOnGlass,The method has 5 parameters. Parameters: hwnd' text' font' ctlrct' iglowSize
Long Parameter List,System.Windows.Forms,RibbonCanvasEventArgs,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonCanvasEventArgs.cs,RibbonCanvasEventArgs,The method has 5 parameters. Parameters: owner' g' bounds' canvas' relatedObject
Long Parameter List,System.Windows.Forms,RibbonItemBoundsEventArgs,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonItemBoundsEventArgs.cs,RibbonItemBoundsEventArgs,The method has 5 parameters. Parameters: owner' g' clip' item' bounds
Long Parameter List,System.Windows.Forms,RibbonMouseSensor,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonMouseSensor.cs,RibbonMouseSensor,The method has 5 parameters. Parameters: control' ribbon' tabs' panels' items
Long Parameter List,System.Windows.Forms,RibbonPanelRenderEventArgs,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanelRenderEventArgs.cs,RibbonPanelRenderEventArgs,The method has 5 parameters. Parameters: owner' g' clip' panel' canvas
Long Parameter List,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateQuickAccessPath,The method has 9 parameters. Parameters: a' b' c' d' e' bounds' offsetx' offsety' ribbon
Long Parameter List,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The method has 5 parameters. Parameters: g' r' image' selected' pressed
Long Parameter List,System.Windows.Forms,RibbonTextEventArgs,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTextEventArgs.cs,RibbonTextEventArgs,The method has 6 parameters. Parameters: owner' g' clip' item' bounds' text
Long Parameter List,System.Windows.Forms,RibbonTextEventArgs,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTextEventArgs.cs,RibbonTextEventArgs,The method has 7 parameters. Parameters: owner' g' clip' item' bounds' text' style
Long Parameter List,System.Windows.Forms,RibbonTextEventArgs,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTextEventArgs.cs,RibbonTextEventArgs,The method has 7 parameters. Parameters: owner' g' clip' item' bounds' text' format
Long Parameter List,System.Windows.Forms,RibbonTextEventArgs,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTextEventArgs.cs,RibbonTextEventArgs,The method has 9 parameters. Parameters: owner' g' clip' item' bounds' text' color' style' format
Long Identifier,System.Windows.Forms,RibbonProfesionalRendererColorTable,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfesionalRendererColorTable.cs,,The length of the parameter PanelOverflowBackgroundPressed is 30.
Long Identifier,System.Windows.Forms,RibbonProfesionalRendererColorTable,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfesionalRendererColorTable.cs,,The length of the parameter PanelOverflowBackgroundSelectedNorth is 36.
Long Identifier,System.Windows.Forms,RibbonProfesionalRendererColorTable,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfesionalRendererColorTable.cs,,The length of the parameter PanelOverflowBackgroundSelectedSouth is 36.
Long Statement,EApp.UI.Controls.UIHandler,DataGridViewHelper,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\UIHandler\DataGridViewHelper.cs,SetDataGridViewCellImage,The length of the statement  "            imageCell.Value = EAppRuntime.Instance.CurrentApp.ResourceManagers[valueImage.ResourceManagerName].GetImage(valueImage.ImageName); " is 130.
Long Statement,EApp.UI.Controls.Common,RoundedCornerPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Common\RoundedCornerPanel.cs,ApplyPanelCorners,The length of the statement  "            panelCornersPath.AddArc(rightX - theRadiusLength' topY' theRadiusLength' theRadiusLength' 270' 90); // right top rounded corner " is 127.
Long Statement,EApp.UI.Controls.Common,RoundedCornerPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Common\RoundedCornerPanel.cs,ApplyPanelCorners,The length of the statement  "            panelCornersPath.AddArc(rightX - theRadiusLength' bottomY - theRadiusLength' theRadiusLength' theRadiusLength' 0' 90); // right bottom rounded corner " is 149.
Long Statement,EApp.UI.Controls.Common,RoundedCornerPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Common\RoundedCornerPanel.cs,ApplyPanelCorners,The length of the statement  "            panelCornersPath.AddArc(leftX' bottomY - theRadiusLength' theRadiusLength' theRadiusLength' 90' 90); // left bottom rounded corner " is 130.
Long Statement,EApp.UI.Controls.Common,RoundedCornerPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Common\RoundedCornerPanel.cs,ApplyGradientColors,The length of the statement  "                LinearGradientBrush brushBackground = new LinearGradientBrush(rectBackground' this.startColor' this.endColor' myGradientDirection); " is 131.
Long Statement,System.Windows.Forms.RibbonHelpers,GlobalHook,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\GlobalHook.cs,KeyboardProc,The length of the statement  "            WinApi.KeyboardLLHookStruct hookStruct = (WinApi.KeyboardLLHookStruct)Marshal.PtrToStructure(lParam' typeof(WinApi.KeyboardLLHookStruct)); " is 138.
Long Statement,System.Windows.Forms.RibbonHelpers,GlobalHook,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\GlobalHook.cs,MouseProc,The length of the statement  "            WinApi.MouseLLHookStruct hookStruct = (WinApi.MouseLLHookStruct)Marshal.PtrToStructure(lParam' typeof(WinApi.MouseLLHookStruct)); " is 129.
Long Statement,System.Windows.Forms.RibbonHelpers,GlobalHook,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\GlobalHook.cs,InstallHook,The length of the statement  "            _hHook = WinApi.SetWindowsHookEx(htype' _HookProc' Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0])' 0); " is 125.
Long Statement,System.Windows.Forms.RibbonHelpers,WinApi,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\WinApi.cs,DrawTextOnGlass,The length of the statement  "                    bitmap = CreateDIBSection(Memdc' ref dib' DIB_RGB_COLORS' 0' IntPtr.Zero' 0);   // Create a 32-bit bmp for use in offscreen drawing when glass is on " is 148.
Long Statement,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,UpdateRegions,The length of the statement  "            QuickAcessToolbar.SetBounds(new Rectangle(new Point(OrbBounds.Right + QuickAcessToolbar.Margin.Left' OrbBounds.Top - 2)' QuickAcessToolbar.LastMeasuredSize)); " is 158.
Long Statement,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,WndProc,The length of the statement  "            if (WinApi.IsWindows && (ActualBorderMode == RibbonWindowMode.NonClientAreaGlass || ActualBorderMode == RibbonWindowMode.NonClientAreaCustomDrawn) ) " is 148.
Long Statement,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,WndProc,The length of the statement  "                    if (QuickAccessVisible && QuickAcessToolbar.DropDownButtonVisible) captionLeft = QuickAcessToolbar.DropDownButton.Bounds.Right; " is 127.
Long Statement,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,PaintDoubleBuffered,The length of the statement  "                    WinApi.BitBlt(wndGraphics.GetHdc()' clip.X' clip.Y' clip.Width' clip.Height' g.GetHdc()' clip.X' clip.Y' WinApi.SRCCOPY); " is 121.
Long Statement,System.Windows.Forms,RibbonButton,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButton.cs,MeasureSize,The length of the statement  "            int largeHeight = OwnerPanel == null ? 0 : OwnerPanel.ContentBounds.Height - Owner.ItemPadding.Vertical;// -Owner.ItemMargin.Vertical; //58; " is 140.
Long Statement,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,RedrawScroll,The length of the statement  "                Canvas.Invalidate(Rectangle.FromLTRB(ButtonDownBounds.X' ButtonUpBounds.Y' ButtonDownBounds.Right' ButtonDownBounds.Bottom)); " is 125.
Long Statement,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,RedrawControlButtons,The length of the statement  "                    Canvas.Invalidate(Rectangle.FromLTRB(ButtonUpBounds.Left' ButtonUpBounds.Top' ButtonDropDownBounds.Right' ButtonDropDownBounds.Bottom)); " is 136.
Long Statement,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,MeasureSize,The length of the statement  "                _thumbBounds = new Rectangle(Point.Empty' ScrollBarRenderer.GetSizeBoxSize(e.Graphics' System.Windows.Forms.VisualStyles.ScrollBarState.Normal)); " is 145.
Long Statement,System.Windows.Forms,RibbonDescriptionMenuItem,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonDescriptionMenuItem.cs,OnGetTextBounds,The length of the statement  "            DescriptionBounds = Rectangle.FromLTRB(DescriptionBounds.Left' r.Bottom' DescriptionBounds.Right' DescriptionBounds.Bottom); " is 124.
Long Statement,System.Windows.Forms,RibbonDropDown,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonDropDown.cs,UpdateSize,The length of the statement  "            Size sz = new Size(maxWidth + OwnerRibbon.DropDownMargin.Horizontal' heightSum  + (ShowSizingGrip? SizingGripHeight + 2 : 0)); " is 126.
Long Statement,System.Windows.Forms,RibbonFormHelper,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonFormHelper.cs,WndProc,The length of the statement  "                    WinApi.NCCALCSIZE_PARAMS nccsp = (WinApi.NCCALCSIZE_PARAMS)Marshal.PtrToStructure(m.LParam' typeof(WinApi.NCCALCSIZE_PARAMS)); " is 126.
Long Statement,System.Windows.Forms,RibbonFormHelper,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonFormHelper.cs,WndProc,The length of the statement  "                    m.Result = new IntPtr(Convert.ToInt32(NonClientHitTest(new Point(WinApi.LoWord((int)m.LParam)' WinApi.HiWord((int)m.LParam))))); " is 128.
Long Statement,System.Windows.Forms,RibbonFormHelper,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonFormHelper.cs,WndProc,The length of the statement  "                //else if ((m.Msg == WinApi.WM_SIZE) && Ribbon != null && Ribbon.ActualBorderMode == RibbonWindowMode.NonClientAreaGlass) " is 121.
Long Statement,System.Windows.Forms,RibbonFormHelper,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonFormHelper.cs,NonClientHitTest,The length of the statement  "            Rectangle topright = Form.RectangleToScreen(new Rectangle(Form.Width - Margins.Right' 0' Margins.Right' Margins.Right)); " is 120.
Long Statement,System.Windows.Forms,RibbonFormHelper,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonFormHelper.cs,NonClientHitTest,The length of the statement  "            Rectangle botleft = Form.RectangleToScreen(new Rectangle(0' Form.Height - Margins.Bottom' Margins.Left' Margins.Bottom)); " is 121.
Long Statement,System.Windows.Forms,RibbonFormHelper,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonFormHelper.cs,NonClientHitTest,The length of the statement  "            Rectangle botright = Form.RectangleToScreen(new Rectangle(Form.Width - Margins.Right' Form.Height - Margins.Bottom' Margins.Right' Margins.Bottom)); " is 148.
Long Statement,System.Windows.Forms,RibbonPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanel.cs,OnPaint,The length of the statement  "                Owner.Renderer.OnRenderRibbonPanelBackground(new RibbonPanelRenderEventArgs(Owner' e.Graphics' e.Clip' fakePanel' e.Control)); " is 126.
Long Statement,System.Windows.Forms,RibbonPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanel.cs,OnPaint,The length of the statement  "                Owner.Renderer.OnRenderRibbonPanelText(new RibbonPanelRenderEventArgs(Owner' e.Graphics' e.Clip' fakePanel' e.Control)); " is 120.
Long Statement,System.Windows.Forms,RibbonPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanel.cs,OnPaint,The length of the statement  "                Owner.Renderer.OnRenderRibbonPanelBackground(new RibbonPanelRenderEventArgs(Owner' e.Graphics' e.Clip' this' e.Control)); " is 121.
Long Statement,System.Windows.Forms,RibbonPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanel.cs,MeasureSizeFlowsToBottom,The length of the statement  "            int availableHeight = OwnerTab.TabContentBounds.Height - Owner.TabContentMargin.Vertical - Owner.PanelPadding.Vertical - Owner.PanelMargin.Vertical; " is 148.
Long Statement,System.Windows.Forms,RibbonPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanel.cs,MeasureSizeFlowsToBottom,The length of the statement  "            return new Size(maxRight + Owner.ItemPadding.Right + Owner.PanelMargin.Right + 1' 0); //Height is provided by MeasureSize " is 121.
Long Statement,System.Windows.Forms,RibbonPanelPopup,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanelPopup.cs,OnPaint,The length of the statement  "            Panel.Owner.Renderer.OnRenderRibbonPanelText(new RibbonPanelRenderEventArgs(Panel.Owner' e.Graphics' e.ClipRectangle' Panel' this)); " is 132.
Long Statement,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The length of the statement  "            path.AddLine(t.TabContentBounds.Right' t.TabContentBounds.Top + corner' t.TabContentBounds.Right' t.TabContentBounds.Bottom - corner); " is 134.
Long Statement,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The length of the statement  "                t.TabContentBounds.Right - corner' t.TabContentBounds.Bottom - corner' t.TabContentBounds.Right' t.TabContentBounds.Bottom)' " is 124.
Long Statement,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The length of the statement  "            path.AddLine(t.TabContentBounds.Right - corner' t.TabContentBounds.Bottom' t.TabContentBounds.Left + corner' t.TabContentBounds.Bottom); " is 136.
Long Statement,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The length of the statement  "                t.TabContentBounds.Left' t.TabContentBounds.Bottom - corner' t.TabContentBounds.Left + corner' t.TabContentBounds.Bottom)' " is 122.
Long Statement,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The length of the statement  "            path.AddLine(t.TabContentBounds.Left' t.TabContentBounds.Bottom - corner' t.TabContentBounds.Left' t.TabBounds.Bottom + corner); " is 128.
Long Statement,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawCompleteTab,The length of the statement  "            Rectangle glossy = Rectangle.FromLTRB(e.Tab.TabContentBounds.Left' e.Tab.TabContentBounds.Top + 0' e.Tab.TabContentBounds.Right' e.Tab.TabContentBounds.Top + 18); " is 162.
Long Statement,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowImage,The length of the statement  "                        imgSquareR.Top + ((imgSquareR.Height - imgSquareBottomR.Height) - e.Panel.Image.Height) / 2' e.Panel.Image.Width' e.Panel.Image.Height); " is 136.
Long Statement,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,LargeButtonDropDownArrowBounds,The length of the statement  "                    lastCharBounds.Bottom + ((textLayout.Bottom - lastCharBounds.Bottom) - arrowSize.Height) / 2' arrowSize.Width' arrowSize.Height); " is 129.
Long Statement,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawSplitButtonSelected,The length of the statement  "            using (Pen p = new Pen(button.Pressed && button.SizeMode != RibbonElementSizeMode.DropDown ? ColorTable.ButtonPressedBorderOut : ColorTable.ButtonSelectedBorderOut)) " is 165.
Long Statement,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawSplitButtonSelected,The length of the statement  "            using (Pen p = new Pen(button.Pressed && button.SizeMode != RibbonElementSizeMode.DropDown ? ColorTable.ButtonPressedBorderIn : ColorTable.ButtonSelectedBorderIn)) " is 163.
Long Statement,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawSplitButtonDropDownSelected,The length of the statement  "            using (Pen p = new Pen(button.Pressed && button.SizeMode != RibbonElementSizeMode.DropDown ? ColorTable.ButtonPressedBorderIn : ColorTable.ButtonSelectedBorderIn)) " is 163.
Long Statement,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawSplitButtonDropDownSelected,The length of the statement  "            using (Pen p = new Pen(button.Pressed && button.SizeMode != RibbonElementSizeMode.DropDown ? ColorTable.ButtonPressedBorderOut : ColorTable.ButtonSelectedBorderOut)) " is 165.
Long Statement,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The length of the statement  "                using (LinearGradientBrush b = new LinearGradientBrush(new Point(r.Left' r.Top)' new Point(r.Left' p1.Y)' Color.White' Color.Transparent)) " is 138.
Long Statement,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderRibbonBackground,The length of the statement  "            //    e.Graphics.FillRectangle(new SolidBrush(ColorTable.RibbonBackground)' new Rectangle(0' e.Ribbon.CaptionBarSize + 1' e.Ribbon.Width' e.Ribbon.Height)); " is 156.
Long Statement,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderRibbonItem,The length of the statement  "                if (b.Style != RibbonButtonStyle.Normal && !(b.Style == RibbonButtonStyle.DropDown && b.SizeMode == RibbonElementSizeMode.Large)) " is 129.
Long Statement,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderDropDownBackground,The length of the statement  "                    using (GraphicsPath r = RoundRectangle(new Rectangle(Point.Empty' new Size(dd.Size.Width -1 ' dd.Size.Height -1))' dd.BorderRoundness)) " is 135.
Long Statement,System.Windows.Forms,RibbonRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonRenderer.cs,CreateDisabledImage,The length of the statement  "            graphics.DrawImage(normalImage' new Rectangle(0' 0' size.Width' size.Height)' 0' 0' size.Width' size.Height' GraphicsUnit.Pixel' imageAttr); " is 140.
Long Statement,System.Windows.Forms,RibbonSeparator,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonSeparator.cs,MeasureSize,The length of the statement  "                    SetLastMeasuredSize( new Size(2' OwnerPanel.ContentBounds.Height - Owner.ItemPadding.Vertical - Owner.ItemMargin.Vertical)); " is 124.
Long Statement,System.Windows.Forms,RibbonTab,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTab.cs,UpdatePanelsRegions,The length of the statement  "                    RibbonElementSizeMode sMode = panel.FlowsTo == RibbonPanelFlowDirection.Right ? RibbonElementSizeMode.Medium : RibbonElementSizeMode.Large; " is 139.
Long Statement,System.Windows.Forms,RibbonTab,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTab.cs,UpdatePanelsRegions,The length of the statement  "                        larger.SetBounds(new Rectangle(larger.Bounds.Location' new Size(size.Width + Owner.PanelMargin.Horizontal' size.Height))); " is 122.
Long Statement,System.Windows.Forms,RibbonTextBox,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTextBox.cs,OnPaint,The length of the statement  "            Owner.Renderer.OnRenderRibbonItemText(new RibbonTextEventArgs(Owner' e.Graphics' Bounds' this' TextBoxTextBounds' TextBoxText' f)); " is 131.
Complex Conditional,EApp.UI.Controls.UIHandler,RibbonHelper,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\UIHandler\RibbonHelper.cs,SetRibbonQuickAccessBarItemEnableStatus,The conditional expression  "ribbon == null ||                  ribbon.QuickAcessToolbar == null ||                  ribbon.QuickAcessToolbar.Items == null ||                  ribbon.QuickAcessToolbar.Items.Count.Equals(0)"  is complex.
Complex Conditional,EApp.UI.Controls.UIHandler,RibbonHelper,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\UIHandler\RibbonHelper.cs,IsActiveRibbonTab,The conditional expression  "ribbon == null ||                  ribbon.Tabs == null ||                  ribbon.Tabs.Count.Equals(0) ||                  ribbon.ActiveTab == null"  is complex.
Complex Conditional,EApp.UI.Controls.UIHandler,RibbonHelper,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\UIHandler\RibbonHelper.cs,FindRibbonTab,The conditional expression  "ribbon == null ||                  ribbon.Tabs == null ||                  ribbon.Tabs.Count.Equals(0) ||                  string.IsNullOrEmpty(ribbonTabText)"  is complex.
Complex Conditional,EApp.UI.Controls.UIHandler,RibbonHelper,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\UIHandler\RibbonHelper.cs,FindRibbonItem,The conditional expression  "ribbon == null ||                  ribbon.Tabs == null ||                  ribbon.Tabs.Count.Equals(0) ||                  string.IsNullOrEmpty(ribbonTabText) ||                  string.IsNullOrEmpty(ribbonItemName)"  is complex.
Complex Conditional,EApp.UI.Controls.UIHandler,RibbonHelper,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\UIHandler\RibbonHelper.cs,FindRibbonItem,The conditional expression  "ribbon == null ||                 ((ribbon.Tabs == null ||                   ribbon.Tabs.Count.Equals(0)) &&                  (ribbon.QuickAcessToolbar == null ||                   ribbon.QuickAcessToolbar.Items.Count.Equals(0)) &&                   (ribbon.OrbDropDown == null ||                   ribbon.OrbDropDown.MenuItems.Count.Equals(0))) ||                  string.IsNullOrEmpty(ribbonItemName)"  is complex.
Complex Conditional,EApp.UI.Controls.UIHandler,RibbonHelper,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\UIHandler\RibbonHelper.cs,FindRibbonItems,The conditional expression  "ribbon == null ||                  ribbon.Tabs == null ||                  ribbon.Tabs.Count.Equals(0) ||                  string.IsNullOrEmpty(ribbonTabText) ||                  ribbonItemNames == null"  is complex.
Complex Conditional,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,OnMouseMove,The conditional expression  "(upCache != _buttonUpSelected)                  || (downCache != _buttonDownSelected)                  || (dropCache != _buttonDropDownSelected)                  || (thumbCache != _thumbSelected)"  is complex.
Complex Conditional,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,OnMouseDown,The conditional expression  "ScrollType == ListScrollType.Scrollbar &&                  ScrollBarBounds.Contains(e.Location) &&                  e.Y >= ButtonUpBounds.Bottom && e.Y <= ButtonDownBounds.Y &&                  !ThumbBounds.Contains(e.Location) &&                  !ButtonDownBounds.Contains(e.Location) &&                  !ButtonUpBounds.Contains(e.Location)"  is complex.
Complex Conditional,System.Windows.Forms,RibbonFormHelper,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonFormHelper.cs,WndProc,The conditional expression  "(Ribbon != null && Ribbon.ActualBorderMode != RibbonWindowMode.NonClientAreaCustomDrawn) &&                      (m.Msg == 0x112 || m.Msg == 0x47 || m.Msg == 0x46 || m.Msg == 0x2a2)"  is complex.
Complex Conditional,System.Windows.Forms,RibbonPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanel.cs,OnMouseMove,The conditional expression  "ButtonMoreEnabled && ButtonMoreVisible && ButtonMoreBounds.Contains(e.X' e.Y) && !Collapsed"  is complex.
Complex Conditional,System.Windows.Forms,RibbonPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanel.cs,OnMouseDown,The conditional expression  "ButtonMoreEnabled && ButtonMoreVisible && ButtonMoreBounds.Contains(e.X' e.Y) && !Collapsed"  is complex.
Complex Conditional,System.Windows.Forms,RibbonPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanel.cs,OnMouseUp,The conditional expression  "ButtonMoreEnabled && ButtonMoreVisible && ButtonMorePressed && !Collapsed"  is complex.
Virtual Method Call from Constructor,System.Windows.Forms,RibbonDropDown,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonDropDown.cs,RibbonDropDown,The constructor "RibbonDropDown" calls a virtual method "SetSizeMode".
Virtual Method Call from Constructor,System.Windows.Forms,RibbonQuickAccessToolbar,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonQuickAccessToolbar.cs,RibbonQuickAccessToolbar,The constructor "RibbonQuickAccessToolbar" calls a virtual method "SetOwner".
Magic Number,EApp.UI.Controls.Common,RoundedCornerPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Common\RoundedCornerPanel.cs,ApplyPanelCorners,The following statement contains a magic number: panelCornersPath.AddArc(leftX' topY' theRadiusLength' theRadiusLength' 180' 90);
Magic Number,EApp.UI.Controls.Common,RoundedCornerPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Common\RoundedCornerPanel.cs,ApplyPanelCorners,The following statement contains a magic number: panelCornersPath.AddArc(leftX' topY' theRadiusLength' theRadiusLength' 180' 90);
Magic Number,EApp.UI.Controls.Common,RoundedCornerPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Common\RoundedCornerPanel.cs,ApplyPanelCorners,The following statement contains a magic number: panelCornersPath.AddArc(rightX - theRadiusLength' topY' theRadiusLength' theRadiusLength' 270' 90);
Magic Number,EApp.UI.Controls.Common,RoundedCornerPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Common\RoundedCornerPanel.cs,ApplyPanelCorners,The following statement contains a magic number: panelCornersPath.AddArc(rightX - theRadiusLength' topY' theRadiusLength' theRadiusLength' 270' 90);
Magic Number,EApp.UI.Controls.Common,RoundedCornerPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Common\RoundedCornerPanel.cs,ApplyPanelCorners,The following statement contains a magic number: panelCornersPath.AddArc(rightX - theRadiusLength' bottomY - theRadiusLength' theRadiusLength' theRadiusLength' 0' 90);
Magic Number,EApp.UI.Controls.Common,RoundedCornerPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Common\RoundedCornerPanel.cs,ApplyPanelCorners,The following statement contains a magic number: panelCornersPath.AddArc(leftX' bottomY - theRadiusLength' theRadiusLength' theRadiusLength' 90' 90);
Magic Number,EApp.UI.Controls.Common,RoundedCornerPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Common\RoundedCornerPanel.cs,ApplyPanelCorners,The following statement contains a magic number: panelCornersPath.AddArc(leftX' bottomY - theRadiusLength' theRadiusLength' theRadiusLength' 90' 90);
Magic Number,System.Windows.Forms.RibbonHelpers,GlobalHook,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\GlobalHook.cs,KeyboardProc,The following statement contains a magic number: if (msg == WinApi.WM_KEYDOWN && KeyPress != null)              {                  byte[] keyState = new byte[256];                  byte[] buffer = new byte[2];                  WinApi.GetKeyboardState(keyState);                  int conversion = WinApi.ToAscii(hookStruct.vkCode' hookStruct.scanCode' keyState' buffer' hookStruct.flags);                    if (conversion == 1 || conversion == 2)                  {                      bool shift = (WinApi.GetKeyState(WinApi.VK_SHIFT) & 0x80) == 0x80;                      bool capital = WinApi.GetKeyState(WinApi.VK_CAPITAL) != 0;                      char c = (char)buffer[0];                      if ((shift ^ capital) && Char.IsLetter(c))                      {                          c = Char.ToUpper(c);                      }                      KeyPressEventArgs e = new KeyPressEventArgs(c);                      OnKeyPress(e);                      handled |= e.Handled;                  }              }
Magic Number,System.Windows.Forms.RibbonHelpers,GlobalHook,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\GlobalHook.cs,KeyboardProc,The following statement contains a magic number: if (msg == WinApi.WM_KEYDOWN && KeyPress != null)              {                  byte[] keyState = new byte[256];                  byte[] buffer = new byte[2];                  WinApi.GetKeyboardState(keyState);                  int conversion = WinApi.ToAscii(hookStruct.vkCode' hookStruct.scanCode' keyState' buffer' hookStruct.flags);                    if (conversion == 1 || conversion == 2)                  {                      bool shift = (WinApi.GetKeyState(WinApi.VK_SHIFT) & 0x80) == 0x80;                      bool capital = WinApi.GetKeyState(WinApi.VK_CAPITAL) != 0;                      char c = (char)buffer[0];                      if ((shift ^ capital) && Char.IsLetter(c))                      {                          c = Char.ToUpper(c);                      }                      KeyPressEventArgs e = new KeyPressEventArgs(c);                      OnKeyPress(e);                      handled |= e.Handled;                  }              }
Magic Number,System.Windows.Forms.RibbonHelpers,GlobalHook,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\GlobalHook.cs,KeyboardProc,The following statement contains a magic number: if (msg == WinApi.WM_KEYDOWN && KeyPress != null)              {                  byte[] keyState = new byte[256];                  byte[] buffer = new byte[2];                  WinApi.GetKeyboardState(keyState);                  int conversion = WinApi.ToAscii(hookStruct.vkCode' hookStruct.scanCode' keyState' buffer' hookStruct.flags);                    if (conversion == 1 || conversion == 2)                  {                      bool shift = (WinApi.GetKeyState(WinApi.VK_SHIFT) & 0x80) == 0x80;                      bool capital = WinApi.GetKeyState(WinApi.VK_CAPITAL) != 0;                      char c = (char)buffer[0];                      if ((shift ^ capital) && Char.IsLetter(c))                      {                          c = Char.ToUpper(c);                      }                      KeyPressEventArgs e = new KeyPressEventArgs(c);                      OnKeyPress(e);                      handled |= e.Handled;                  }              }
Magic Number,System.Windows.Forms.RibbonHelpers,GlobalHook,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\GlobalHook.cs,MouseProc,The following statement contains a magic number: int delta = (short)((hookStruct.mouseData >> 16) & 0xffff);
Magic Number,System.Windows.Forms.RibbonHelpers,WinApi,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\WinApi.cs,HiWord,The following statement contains a magic number: return (dwValue >> 16) & 0xFFFF;
Magic Number,System.Windows.Forms.RibbonHelpers,WinApi,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\WinApi.cs,MakeLParam,The following statement contains a magic number: return new IntPtr((HiWord << 16) | (LoWord & 0xffff));
Magic Number,System.Windows.Forms.RibbonHelpers,WinApi,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\WinApi.cs,FillForGlass,The following statement contains a magic number: dib.bmiHeader.biBitCount = 32;
Magic Number,System.Windows.Forms.RibbonHelpers,WinApi,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\WinApi.cs,DrawTextOnGlass,The following statement contains a magic number: if (IsGlassEnabled)              {                  RECT rc = new RECT();                  RECT rc2 = new RECT();                    rc.Left = ctlrct.Left;                  rc.Right = ctlrct.Right;// +2 * iglowSize;  //make it larger to contain the glow effect                  rc.Top = ctlrct.Top;                  rc.Bottom = ctlrct.Bottom;// +2 * iglowSize;                    //Just the same rect with rc'but (0'0) at the lefttop                  rc2.Left = 0;                  rc2.Top = 0;                  rc2.Right = rc.Right - rc.Left;                  rc2.Bottom = rc.Bottom - rc.Top;                    IntPtr destdc = GetDC(hwnd);    //hwnd must be the handle of form'not control                  IntPtr Memdc = CreateCompatibleDC(destdc);   // Set up a memory DC where we'll draw the text.                  IntPtr bitmap;                  IntPtr bitmapOld = IntPtr.Zero;                  IntPtr logfnotOld;                    int uFormat = DT_SINGLELINE | DT_CENTER | DT_VCENTER | DT_NOPREFIX;   //text format                    BITMAPINFO dib = new BITMAPINFO();                  dib.bmiHeader.biHeight = -(rc.Bottom - rc.Top);         // negative because DrawThemeTextEx() uses a top-down DIB                  dib.bmiHeader.biWidth = rc.Right - rc.Left;                  dib.bmiHeader.biPlanes = 1;                  dib.bmiHeader.biSize = Marshal.SizeOf(typeof(BITMAPINFOHEADER));                  dib.bmiHeader.biBitCount = 32;                  dib.bmiHeader.biCompression = BI_RGB;                  if (!(SaveDC(Memdc) == 0))                  {                      bitmap = CreateDIBSection(Memdc' ref dib' DIB_RGB_COLORS' 0' IntPtr.Zero' 0);   // Create a 32-bit bmp for use in offscreen drawing when glass is on                      if (!(bitmap == IntPtr.Zero))                      {                          bitmapOld = SelectObject(Memdc' bitmap);                          IntPtr hFont = font.ToHfont();                          logfnotOld = SelectObject(Memdc' hFont);                          try                          {                                VisualStyleRenderer renderer = new VisualStyleRenderer(VisualStyleElement.Window.Caption.Active);                                                            DTTOPTS dttOpts = new DTTOPTS();                                dttOpts.dwSize = (uint)Marshal.SizeOf(typeof(DTTOPTS));                                dttOpts.dwFlags = DTT_COMPOSITED | DTT_GLOWSIZE;                                  dttOpts.iGlowSize = iglowSize;                                int dtter = DrawThemeTextEx(renderer.Handle' Memdc' 0' 0' text' -1' uFormat' ref rc2' ref dttOpts);                                bool bbr = BitBlt(destdc' rc.Left' rc.Top' rc.Right - rc.Left' rc.Bottom - rc.Top' Memdc' 0' 0' SRCCOPY);                                if (!bbr)                              {                                  //throw new Exception("???");                              }                                                        }                          catch (Exception e)                          {                              Console.WriteLine(e.ToString());                              //throw new Exception("???");                          }                              //Remember to clean up                          SelectObject(Memdc' bitmapOld);                          SelectObject(Memdc' logfnotOld);                          DeleteObject(bitmap);                          DeleteObject(hFont);                            ReleaseDC(Memdc' -1);                          DeleteDC(Memdc);                            }                      else                      {                          //throw new Exception("???");                      }                  }                  else                  {                      //throw new Exception("???");                  }                    }
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _tabsMargin = new Padding(12' 24 + 2' 20' 0);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _tabsMargin = new Padding(12' 24 + 2' 20' 0);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _tabsMargin = new Padding(12' 24 + 2' 20' 0);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _tabsMargin = new Padding(12' 24 + 2' 20' 0);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _tabTextMargin = new Padding(4' 2' 4' 2);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _tabTextMargin = new Padding(4' 2' 4' 2);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _tabTextMargin = new Padding(4' 2' 4' 2);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _tabTextMargin = new Padding(4' 2' 4' 2);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _tabsPadding = new Padding(8' 5' 8' 3);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _tabsPadding = new Padding(8' 5' 8' 3);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _tabsPadding = new Padding(8' 5' 8' 3);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _tabsPadding = new Padding(8' 5' 8' 3);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _tabContentMargin = new Padding(1' 0' 1' 2);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _panelPadding = new Padding(3);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _panelMargin = new Padding(3' 2' 3' 15);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _panelMargin = new Padding(3' 2' 3' 15);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _panelMargin = new Padding(3' 2' 3' 15);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _panelMargin = new Padding(3' 2' 3' 15);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _panelSpacing = 3;
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _itemMargin = new Padding(4' 2' 4' 2);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _itemMargin = new Padding(4' 2' 4' 2);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _itemMargin = new Padding(4' 2' 4' 2);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _itemMargin = new Padding(4' 2' 4' 2);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _tabSpacing = 6;
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,Ribbon,The following statement contains a magic number: _dropDownMargin = new Padding(2);
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,ShowOrbDropDown,The following statement contains a magic number: OrbDropDown.Show(PointToScreen(new Point(OrbBounds.X - 4' OrbBounds.Bottom - OrbDropDown.ContentMargin.Top + 2)));
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,ShowOrbDropDown,The following statement contains a magic number: OrbDropDown.Show(PointToScreen(new Point(OrbBounds.X - 4' OrbBounds.Bottom - OrbDropDown.ContentMargin.Top + 2)));
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,TabHitTest,The following statement contains a magic number: if (Rectangle.FromLTRB(Right - 10' Bottom - 10' Right' Bottom).Contains(x' y))              {                  MessageBox.Show(cr);              }
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,TabHitTest,The following statement contains a magic number: if (Rectangle.FromLTRB(Right - 10' Bottom - 10' Right' Bottom).Contains(x' y))              {                  MessageBox.Show(cr);              }
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,UpdateRegions,The following statement contains a magic number: QuickAcessToolbar.SetBounds(new Rectangle(new Point(OrbBounds.Right + QuickAcessToolbar.Margin.Left' OrbBounds.Top - 2)' QuickAcessToolbar.LastMeasuredSize));
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,UpdateRegions,The following statement contains a magic number: if (CaptionButtonsVisible)              {                  Size cbs = new Size(20'20);                  int cbg = 2;                  CloseButton.SetBounds(new Rectangle(new Point(ClientRectangle.Right - cbs.Width - cbg' cbg)' cbs));                  MaximizeRestoreButton.SetBounds(new Rectangle(new Point(CloseButton.Bounds.Left - cbs.Width' cbg)' cbs));                  MinimizeButton.SetBounds(new Rectangle(new Point(MaximizeRestoreButton.Bounds.Left - cbs.Width' cbg)' cbs));              }
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,UpdateRegions,The following statement contains a magic number: if (CaptionButtonsVisible)              {                  Size cbs = new Size(20'20);                  int cbg = 2;                  CloseButton.SetBounds(new Rectangle(new Point(ClientRectangle.Right - cbs.Width - cbg' cbg)' cbs));                  MaximizeRestoreButton.SetBounds(new Rectangle(new Point(CloseButton.Bounds.Left - cbs.Width' cbg)' cbs));                  MinimizeButton.SetBounds(new Rectangle(new Point(MaximizeRestoreButton.Bounds.Left - cbs.Width' cbg)' cbs));              }
Magic Number,System.Windows.Forms,Ribbon,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\Ribbon.cs,UpdateRegions,The following statement contains a magic number: if (CaptionButtonsVisible)              {                  Size cbs = new Size(20'20);                  int cbg = 2;                  CloseButton.SetBounds(new Rectangle(new Point(ClientRectangle.Right - cbs.Width - cbg' cbg)' cbs));                  MaximizeRestoreButton.SetBounds(new Rectangle(new Point(CloseButton.Bounds.Left - cbs.Width' cbg)' cbs));                  MinimizeButton.SetBounds(new Rectangle(new Point(MaximizeRestoreButton.Bounds.Left - cbs.Width' cbg)' cbs));              }
Magic Number,System.Windows.Forms,RibbonButton,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButton.cs,RibbonButton,The following statement contains a magic number: _dropDownArrowSize = new Size(5' 3);
Magic Number,System.Windows.Forms,RibbonButton,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButton.cs,RibbonButton,The following statement contains a magic number: _dropDownArrowSize = new Size(5' 3);
Magic Number,System.Windows.Forms,RibbonButton,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButton.cs,RibbonButton,The following statement contains a magic number: _dropDownMargin = new Padding(6);
Magic Number,System.Windows.Forms,RibbonButton,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButton.cs,RibbonButton,The following statement contains a magic number: Image = CreateImage(32);
Magic Number,System.Windows.Forms,RibbonButton,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButton.cs,RibbonButton,The following statement contains a magic number: SmallImage = CreateImage(16);
Magic Number,System.Windows.Forms,RibbonButton,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButton.cs,OnGetImageBounds,The following statement contains a magic number: if (sMode == RibbonElementSizeMode.Large)// || this is RibbonOrbMenuItem)              {                  if (Image != null)                  {                      return new Rectangle(                      Bounds.Left + ((Bounds.Width - Image.Width) / 2)'                      Bounds.Top + Owner.ItemMargin.Top'                      Image.Width'                      Image.Height);                  }                  else                  {                      return new Rectangle(ContentBounds.Location' new Size(32' 32));                  }              }              else              {                  if (SmallImage != null)                  {                      return new Rectangle(                          Bounds.Left + Owner.ItemMargin.Left'                          Bounds.Top + ((Bounds.Height - SmallImage.Height) / 2)'                          SmallImage.Width'                          SmallImage.Height);                  }                  else                  {                      return new Rectangle(ContentBounds.Location' new Size(0' 0));                  }              }
Magic Number,System.Windows.Forms,RibbonButton,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButton.cs,OnGetImageBounds,The following statement contains a magic number: if (sMode == RibbonElementSizeMode.Large)// || this is RibbonOrbMenuItem)              {                  if (Image != null)                  {                      return new Rectangle(                      Bounds.Left + ((Bounds.Width - Image.Width) / 2)'                      Bounds.Top + Owner.ItemMargin.Top'                      Image.Width'                      Image.Height);                  }                  else                  {                      return new Rectangle(ContentBounds.Location' new Size(32' 32));                  }              }              else              {                  if (SmallImage != null)                  {                      return new Rectangle(                          Bounds.Left + Owner.ItemMargin.Left'                          Bounds.Top + ((Bounds.Height - SmallImage.Height) / 2)'                          SmallImage.Width'                          SmallImage.Height);                  }                  else                  {                      return new Rectangle(ContentBounds.Location' new Size(0' 0));                  }              }
Magic Number,System.Windows.Forms,RibbonButton,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButton.cs,OnGetImageBounds,The following statement contains a magic number: if (sMode == RibbonElementSizeMode.Large)// || this is RibbonOrbMenuItem)              {                  if (Image != null)                  {                      return new Rectangle(                      Bounds.Left + ((Bounds.Width - Image.Width) / 2)'                      Bounds.Top + Owner.ItemMargin.Top'                      Image.Width'                      Image.Height);                  }                  else                  {                      return new Rectangle(ContentBounds.Location' new Size(32' 32));                  }              }              else              {                  if (SmallImage != null)                  {                      return new Rectangle(                          Bounds.Left + Owner.ItemMargin.Left'                          Bounds.Top + ((Bounds.Height - SmallImage.Height) / 2)'                          SmallImage.Width'                          SmallImage.Height);                  }                  else                  {                      return new Rectangle(ContentBounds.Location' new Size(0' 0));                  }              }
Magic Number,System.Windows.Forms,RibbonButton,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButton.cs,OnGetImageBounds,The following statement contains a magic number: if (sMode == RibbonElementSizeMode.Large)// || this is RibbonOrbMenuItem)              {                  if (Image != null)                  {                      return new Rectangle(                      Bounds.Left + ((Bounds.Width - Image.Width) / 2)'                      Bounds.Top + Owner.ItemMargin.Top'                      Image.Width'                      Image.Height);                  }                  else                  {                      return new Rectangle(ContentBounds.Location' new Size(32' 32));                  }              }              else              {                  if (SmallImage != null)                  {                      return new Rectangle(                          Bounds.Left + Owner.ItemMargin.Left'                          Bounds.Top + ((Bounds.Height - SmallImage.Height) / 2)'                          SmallImage.Width'                          SmallImage.Height);                  }                  else                  {                      return new Rectangle(ContentBounds.Location' new Size(0' 0));                  }              }
Magic Number,System.Windows.Forms,RibbonButton,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButton.cs,OnGetDropDownBounds,The following statement contains a magic number: Rectangle sideBounds = Rectangle.FromLTRB(                      bounds.Right - _dropDownMargin.Horizontal - 2'                      bounds.Top' bounds.Right' bounds.Bottom);
Magic Number,System.Windows.Forms,RibbonButton,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButton.cs,OnGetButtonFaceBounds,The following statement contains a magic number: Rectangle sideBounds = Rectangle.FromLTRB(                  bounds.Right - _dropDownMargin.Horizontal - 2'                  bounds.Top' bounds.Right' bounds.Bottom);
Magic Number,System.Windows.Forms,RibbonButton,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButton.cs,MeasureStringLargeSize,The following statement contains a magic number: if (words.Length > 1)              {                  width = Math.Max(sz.Width / 2' g.MeasureString(longestWord' font).ToSize().Width) + 1;              }              else              {                  return g.MeasureString(text' font).ToSize();              }
Magic Number,System.Windows.Forms,RibbonButton,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButton.cs,MeasureSize,The following statement contains a magic number: if (theSize == RibbonElementSizeMode.DropDown)              {                  heightSum += 2;              }
Magic Number,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,RibbonButtonList,The following statement contains a magic number: _controlButtonsWidth = 16;
Magic Number,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,RibbonButtonList,The following statement contains a magic number: _itemsInLargeMode = 7;
Magic Number,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,RibbonButtonList,The following statement contains a magic number: _itemsInMediumMode = 3;
Magic Number,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,RibbonButtonList,The following statement contains a magic number: _ItemsInDropwDownMode = new Size(7' 5);
Magic Number,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,RibbonButtonList,The following statement contains a magic number: _ItemsInDropwDownMode = new Size(7' 5);
Magic Number,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,SetBounds,The following statement contains a magic number: if (ScrollType != ListScrollType.Scrollbar)              {                  #region Custom Buttons                  int cbtns = 3; // Canvas is RibbonDropDown ? 2 : 3;                  int buttonHeight = bounds.Height / cbtns;                  int buttonWidth = _controlButtonsWidth;                    _buttonUpBounds = Rectangle.FromLTRB(bounds.Right - buttonWidth'                      bounds.Top' bounds.Right' bounds.Top + buttonHeight);                    _buttonDownBounds = Rectangle.FromLTRB(_buttonUpBounds.Left' _buttonUpBounds.Bottom'                      bounds.Right' _buttonUpBounds.Bottom + buttonHeight);                    if (cbtns == 2)                  {                      _buttonDropDownBounds = Rectangle.Empty;                  }                  else                  {                      _buttonDropDownBounds = Rectangle.FromLTRB(_buttonDownBounds.Left' _buttonDownBounds.Bottom'                      bounds.Right' bounds.Bottom + 1);                  }                    _thumbBounds.Location = Point.Empty;                    #endregion              }              else              {                  #region Scrollbar                    int bwidth = ThumbBounds.Width;                  int bheight = ThumbBounds.Width;                    _buttonUpBounds = Rectangle.FromLTRB(bounds.Right - bwidth'                      bounds.Top' bounds.Right' bounds.Top + bheight);                    _buttonDownBounds = Rectangle.FromLTRB(_buttonUpBounds.Left' bounds.Height - bheight'                      bounds.Right' bounds.Height);                    _buttonDropDownBounds = Rectangle.Empty;                    _thumbBounds.X = _buttonUpBounds.Left;                    #endregion              }
Magic Number,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,SetBounds,The following statement contains a magic number: if (ScrollType != ListScrollType.Scrollbar)              {                  #region Custom Buttons                  int cbtns = 3; // Canvas is RibbonDropDown ? 2 : 3;                  int buttonHeight = bounds.Height / cbtns;                  int buttonWidth = _controlButtonsWidth;                    _buttonUpBounds = Rectangle.FromLTRB(bounds.Right - buttonWidth'                      bounds.Top' bounds.Right' bounds.Top + buttonHeight);                    _buttonDownBounds = Rectangle.FromLTRB(_buttonUpBounds.Left' _buttonUpBounds.Bottom'                      bounds.Right' _buttonUpBounds.Bottom + buttonHeight);                    if (cbtns == 2)                  {                      _buttonDropDownBounds = Rectangle.Empty;                  }                  else                  {                      _buttonDropDownBounds = Rectangle.FromLTRB(_buttonDownBounds.Left' _buttonDownBounds.Bottom'                      bounds.Right' bounds.Bottom + 1);                  }                    _thumbBounds.Location = Point.Empty;                    #endregion              }              else              {                  #region Scrollbar                    int bwidth = ThumbBounds.Width;                  int bheight = ThumbBounds.Width;                    _buttonUpBounds = Rectangle.FromLTRB(bounds.Right - bwidth'                      bounds.Top' bounds.Right' bounds.Top + bheight);                    _buttonDownBounds = Rectangle.FromLTRB(_buttonUpBounds.Left' bounds.Height - bheight'                      bounds.Right' bounds.Height);                    _buttonDropDownBounds = Rectangle.Empty;                    _thumbBounds.X = _buttonUpBounds.Left;                    #endregion              }
Magic Number,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,SetBounds,The following statement contains a magic number: if (contentHeight > viewHeight && contentHeight != 0)              {                  double viewPercent = contentHeight > viewHeight ? viewHeight / contentHeight : 0.0;                  double availHeight = ButtonDownBounds.Top - ButtonUpBounds.Bottom;                  double thumbHeight = Math.Ceiling(viewPercent * availHeight);                    if (thumbHeight < 30)                  {                      if (availHeight >= 30)                      {                          thumbHeight = 30;                      }                      else                      {                          thumbHeight = availHeight;                      }                  }                    _thumbBounds.Height = Convert.ToInt32(thumbHeight);                    fullContentBounds = Rectangle.FromLTRB(ContentBounds.Left' iniTop' ContentBounds.Right' maxBottom);                    _scrollBarEnabled = true;                    UpdateThumbPos();              }              else              {                  _scrollBarEnabled = false;              }
Magic Number,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,SetBounds,The following statement contains a magic number: if (contentHeight > viewHeight && contentHeight != 0)              {                  double viewPercent = contentHeight > viewHeight ? viewHeight / contentHeight : 0.0;                  double availHeight = ButtonDownBounds.Top - ButtonUpBounds.Bottom;                  double thumbHeight = Math.Ceiling(viewPercent * availHeight);                    if (thumbHeight < 30)                  {                      if (availHeight >= 30)                      {                          thumbHeight = 30;                      }                      else                      {                          thumbHeight = availHeight;                      }                  }                    _thumbBounds.Height = Convert.ToInt32(thumbHeight);                    fullContentBounds = Rectangle.FromLTRB(ContentBounds.Left' iniTop' ContentBounds.Right' maxBottom);                    _scrollBarEnabled = true;                    UpdateThumbPos();              }              else              {                  _scrollBarEnabled = false;              }
Magic Number,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,SetBounds,The following statement contains a magic number: if (contentHeight > viewHeight && contentHeight != 0)              {                  double viewPercent = contentHeight > viewHeight ? viewHeight / contentHeight : 0.0;                  double availHeight = ButtonDownBounds.Top - ButtonUpBounds.Bottom;                  double thumbHeight = Math.Ceiling(viewPercent * availHeight);                    if (thumbHeight < 30)                  {                      if (availHeight >= 30)                      {                          thumbHeight = 30;                      }                      else                      {                          thumbHeight = availHeight;                      }                  }                    _thumbBounds.Height = Convert.ToInt32(thumbHeight);                    fullContentBounds = Rectangle.FromLTRB(ContentBounds.Left' iniTop' ContentBounds.Right' maxBottom);                    _scrollBarEnabled = true;                    UpdateThumbPos();              }              else              {                  _scrollBarEnabled = false;              }
Magic Number,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,MeasureSize,The following statement contains a magic number: int height = OwnerPanel.ContentBounds.Height - Owner.ItemPadding.Vertical - 4;
Magic Number,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,MeasureSize,The following statement contains a magic number: if (ScrollBarRenderer.IsSupported)              {                  _thumbBounds = new Rectangle(Point.Empty' ScrollBarRenderer.GetSizeBoxSize(e.Graphics' System.Windows.Forms.VisualStyles.ScrollBarState.Normal));              }              else              {                  _thumbBounds = new Rectangle(Point.Empty' new Size(16' 16));              }
Magic Number,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,MeasureSize,The following statement contains a magic number: if (ScrollBarRenderer.IsSupported)              {                  _thumbBounds = new Rectangle(Point.Empty' ScrollBarRenderer.GetSizeBoxSize(e.Graphics' System.Windows.Forms.VisualStyles.ScrollBarState.Normal));              }              else              {                  _thumbBounds = new Rectangle(Point.Empty' new Size(16' 16));              }
Magic Number,System.Windows.Forms,RibbonCaptionButton,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonCaptionButton.cs,OnGetTextBounds,The following statement contains a magic number: r.X = bounds.Left + 3;
Magic Number,System.Windows.Forms,RibbonColorChooser,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonColorChooser.cs,RibbonColorChooser,The following statement contains a magic number: _imageColorHeight = 8;
Magic Number,System.Windows.Forms,RibbonColorChooser,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonColorChooser.cs,RibbonColorChooser,The following statement contains a magic number: _smallImageColorHeight = 4;
Magic Number,System.Windows.Forms,RibbonColorChooser,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonColorChooser.cs,CreateColorBmp,The following statement contains a magic number: Bitmap b = new Bitmap(16' 16);
Magic Number,System.Windows.Forms,RibbonColorChooser,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonColorChooser.cs,CreateColorBmp,The following statement contains a magic number: Bitmap b = new Bitmap(16' 16);
Magic Number,System.Windows.Forms,RibbonColorChooser,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonColorChooser.cs,CreateColorBmp,The following statement contains a magic number: using (Graphics g = Graphics.FromImage(b))              {                  using (SolidBrush br = new SolidBrush(c))                  {                      g.FillRectangle(br' new Rectangle(0' 0' 15' 15));                  }                    g.DrawRectangle(Pens.DimGray' new Rectangle(0' 0' 15' 15));              }
Magic Number,System.Windows.Forms,RibbonColorChooser,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonColorChooser.cs,CreateColorBmp,The following statement contains a magic number: using (Graphics g = Graphics.FromImage(b))              {                  using (SolidBrush br = new SolidBrush(c))                  {                      g.FillRectangle(br' new Rectangle(0' 0' 15' 15));                  }                    g.DrawRectangle(Pens.DimGray' new Rectangle(0' 0' 15' 15));              }
Magic Number,System.Windows.Forms,RibbonColorChooser,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonColorChooser.cs,CreateColorBmp,The following statement contains a magic number: using (Graphics g = Graphics.FromImage(b))              {                  using (SolidBrush br = new SolidBrush(c))                  {                      g.FillRectangle(br' new Rectangle(0' 0' 15' 15));                  }                    g.DrawRectangle(Pens.DimGray' new Rectangle(0' 0' 15' 15));              }
Magic Number,System.Windows.Forms,RibbonColorChooser,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonColorChooser.cs,CreateColorBmp,The following statement contains a magic number: using (Graphics g = Graphics.FromImage(b))              {                  using (SolidBrush br = new SolidBrush(c))                  {                      g.FillRectangle(br' new Rectangle(0' 0' 15' 15));                  }                    g.DrawRectangle(Pens.DimGray' new Rectangle(0' 0' 15' 15));              }
Magic Number,System.Windows.Forms,RibbonComboBox,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonComboBox.cs,SetBounds,The following statement contains a magic number: _dropDownBounds = Rectangle.FromLTRB(                  bounds.Right - 15'                  bounds.Top'                  bounds.Right + 1'                  bounds.Bottom + 1);
Magic Number,System.Windows.Forms,RibbonDescriptionMenuItem,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonDescriptionMenuItem.cs,RibbonDescriptionMenuItem,The following statement contains a magic number: SetDropDownMargin(new Padding(10));
Magic Number,System.Windows.Forms,RibbonDescriptionMenuItem,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonDescriptionMenuItem.cs,MeasureSize,The following statement contains a magic number: s.Height = 52;
Magic Number,System.Windows.Forms,RibbonDescriptionMenuItem,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonDescriptionMenuItem.cs,OnGetTextBounds,The following statement contains a magic number: r.Height = 20;
Magic Number,System.Windows.Forms,RibbonDesigner,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonDesigner.cs,HiWord,The following statement contains a magic number: return (dwValue >> 16) & 0xFFFF;
Magic Number,System.Windows.Forms,RibbonDropDown,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonDropDown.cs,RibbonDropDown,The following statement contains a magic number: _sizingGripHeight = 12;
Magic Number,System.Windows.Forms,RibbonDropDown,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonDropDown.cs,UpdateSize,The following statement contains a magic number: Size sz = new Size(maxWidth + OwnerRibbon.DropDownMargin.Horizontal' heightSum  + (ShowSizingGrip? SizingGripHeight + 2 : 0));
Magic Number,System.Windows.Forms,RibbonFormHelper,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonFormHelper.cs,PaintTitleBar,The following statement contains a magic number: int radius1 = 4' radius2 = radius1 - 0;
Magic Number,System.Windows.Forms,RibbonItemCollection,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonItemCollection.cs,CenterItemsInto,The following statement contains a magic number: int x = rectangle.Left + (rectangle.Width - GetItemsWidth()) / 2;
Magic Number,System.Windows.Forms,RibbonItemCollection,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonItemCollection.cs,CenterItemsInto,The following statement contains a magic number: int y = rectangle.Top + (rectangle.Height - GetItemsHeight()) / 2;
Magic Number,System.Windows.Forms,RibbonItemCollection,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonItemCollection.cs,CenterItemsVerticallyInto,The following statement contains a magic number: int y = rectangle.Top + (rectangle.Height - GetItemsHeight(items)) / 2;
Magic Number,System.Windows.Forms,RibbonItemCollection,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonItemCollection.cs,CenterItemsHorizontallyInto,The following statement contains a magic number: int x = rectangle.Left + (rectangle.Width - GetItemsWidth(items)) / 2;
Magic Number,System.Windows.Forms,RibbonItemGroup,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonItemGroup.cs,MeasureSize,The following statement contains a magic number: int minWidth = 16;
Magic Number,System.Windows.Forms,RibbonItemGroup,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonItemGroup.cs,MeasureSize,The following statement contains a magic number: int maxHeight = 16;
Magic Number,System.Windows.Forms,RibbonItemGroup,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonItemGroup.cs,MeasureSize,The following statement contains a magic number: if (Site != null && Site.DesignMode)              {                  widthSum += 10;              }
Magic Number,System.Windows.Forms,RibbonOrbDropDown,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonOrbDropDown.cs,RibbonOrbDropDown,The following statement contains a magic number: _optionsPadding = 6;
Magic Number,System.Windows.Forms,RibbonOrbDropDown,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonOrbDropDown.cs,RibbonOrbDropDown,The following statement contains a magic number: Size = new System.Drawing.Size(527' 447);
Magic Number,System.Windows.Forms,RibbonOrbDropDown,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonOrbDropDown.cs,RibbonOrbDropDown,The following statement contains a magic number: Size = new System.Drawing.Size(527' 447);
Magic Number,System.Windows.Forms,RibbonOrbDropDown,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonOrbDropDown.cs,RibbonOrbDropDown,The following statement contains a magic number: BorderRoundness = 8;
Magic Number,System.Windows.Forms,RibbonOrbDropDown,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonOrbDropDown.cs,SeparatorHeight,The following statement contains a magic number: if (!string.IsNullOrEmpty(s.Text))              {                  return 20;              }              else              {                  return 3;              }
Magic Number,System.Windows.Forms,RibbonOrbDropDown,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonOrbDropDown.cs,SeparatorHeight,The following statement contains a magic number: if (!string.IsNullOrEmpty(s.Text))              {                  return 20;              }              else              {                  return 3;              }
Magic Number,System.Windows.Forms,RibbonOrbDropDown,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonOrbDropDown.cs,UpdateRegions,The following statement contains a magic number: int menuItemHeight = 44;
Magic Number,System.Windows.Forms,RibbonOrbDropDown,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonOrbDropDown.cs,UpdateRegions,The following statement contains a magic number: int recentHeight = 22;
Magic Number,System.Windows.Forms,RibbonOrbDropDown,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonOrbDropDown.cs,UpdateRegions,The following statement contains a magic number: foreach (RibbonItem item in MenuItems)              {                  Rectangle ritem = new Rectangle(rbuttons.Left + mbuttons' curtop' rbuttons.Width - mbuttons * 2' menuItemHeight);                    if (item is RibbonSeparator) ritem.Height = SeparatorHeight(item as RibbonSeparator);                    item.SetBounds(ritem);                    curtop += ritem.Height;              }
Magic Number,System.Windows.Forms,RibbonOrbDropDown,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonOrbDropDown.cs,UpdateRegions,The following statement contains a magic number: foreach (RibbonItem item in RecentItems)              {                  Rectangle ritem = new Rectangle(rrecent.Left + mrecent' curtop' rrecent.Width - mrecent * 2' recentHeight);                    if (item is RibbonSeparator) ritem.Height = SeparatorHeight(item as RibbonSeparator);                    item.SetBounds(ritem);                    curtop += ritem.Height;              }
Magic Number,System.Windows.Forms,RibbonOrbDropDown,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonOrbDropDown.cs,UpdateRegions,The following statement contains a magic number: if (RibbonDesigner.Current != null)              {                  actualHeight += ButtonsGlyphBounds.Height + glyphGap * 2;              }
Magic Number,System.Windows.Forms,RibbonOrbDropDown,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonOrbDropDown.cs,UpdateRegions,The following statement contains a magic number: using (Graphics g = CreateGraphics())              {                  foreach (RibbonItem item in OptionItems)                  {                      Size s = item.MeasureSize(this' new RibbonElementMeasureSizeEventArgs(g' RibbonElementSizeMode.DropDown));                      curtop = rcontent.Bottom + (ContentMargin.Bottom - s.Height) / 2;                      item.SetBounds(new Rectangle(new Point(curright - s.Width' curtop)' s));                      curright = item.Bounds.Left - OptionItemsPadding;                  }               }
Magic Number,System.Windows.Forms,RibbonOrbDropDown,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonOrbDropDown.cs,OnPaint,The following statement contains a magic number: if (RibbonInDesignMode)              {                  using (SolidBrush b = new SolidBrush(Color.FromArgb(50' Color.Blue)))                  {                      e.Graphics.FillRectangle(b' ButtonsGlyphBounds);                      e.Graphics.FillRectangle(b' RecentGlyphBounds);                      e.Graphics.FillRectangle(b' OptionGlyphBounds);                      e.Graphics.FillRectangle(b' ButtonsSeparatorGlyphBounds);                  }                    using (StringFormat sf = new StringFormat())                  {                      sf.Alignment = StringAlignment.Center;                      sf.LineAlignment = StringAlignment.Center;                      sf.Trimming = StringTrimming.None;                      e.Graphics.DrawString("+"' Font' Brushes.White' ButtonsGlyphBounds' sf);                      e.Graphics.DrawString("+"' Font' Brushes.White' RecentGlyphBounds' sf);                      e.Graphics.DrawString("+"' Font' Brushes.White' OptionGlyphBounds' sf);                      e.Graphics.DrawString("---"' Font' Brushes.White' ButtonsSeparatorGlyphBounds' sf);                  }                    using (Pen p = new Pen(Color.Black))                  {                      p.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;                      e.Graphics.DrawRectangle(p' designerSelectedBounds);                  }                    //e.Graphics.DrawString("Press ESC to Hide"' Font' Brushes.Black' Width - 100f' 2f);              }
Magic Number,System.Windows.Forms,RibbonOrbMenuItem,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonOrbMenuItem.cs,RibbonOrbMenuItem,The following statement contains a magic number: SetDropDownMargin(new Padding(10));
Magic Number,System.Windows.Forms,RibbonOrbRecentItem,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonOrbRecentItem.cs,OnGetTextBounds,The following statement contains a magic number: r.X = Bounds.Left + 3;
Magic Number,System.Windows.Forms,RibbonPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanel.cs,SetBounds,The following statement contains a magic number: if (ButtonMoreVisible)              {                  SetMoreBounds(                      Rectangle.FromLTRB(                          bounds.Right - 15'                          _contentBounds.Bottom + 1'                          bounds.Right'                          bounds.Bottom)                      );              }              else              {                  SetMoreBounds(Rectangle.Empty);              }
Magic Number,System.Windows.Forms,RibbonPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanel.cs,MeasureSize,The following statement contains a magic number: if (ButtonMoreVisible)              {                  minSize.Width += ButtonMoreBounds.Width + 3;              }
Magic Number,System.Windows.Forms,RibbonPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanel.cs,MeasureSizeFlowsToRight,The following statement contains a magic number: switch (e.SizeMode)              {                  case RibbonElementSizeMode.Large:                      dividedWidth = widthSum / 1; //Show items on one row                      break;                  case RibbonElementSizeMode.Medium:                      dividedWidth = widthSum / 2; //Show items on two rows                      break;                  case RibbonElementSizeMode.Compact:                      dividedWidth = widthSum / 3; //Show items on three rows                      break;                  default:                      break;              }
Magic Number,System.Windows.Forms,RibbonPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanel.cs,MeasureSizeFlowsToRight,The following statement contains a magic number: switch (e.SizeMode)              {                  case RibbonElementSizeMode.Large:                      dividedWidth = widthSum / 1; //Show items on one row                      break;                  case RibbonElementSizeMode.Medium:                      dividedWidth = widthSum / 2; //Show items on two rows                      break;                  case RibbonElementSizeMode.Compact:                      dividedWidth = widthSum / 3; //Show items on three rows                      break;                  default:                      break;              }
Magic Number,System.Windows.Forms,RibbonPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanel.cs,UpdateRegionsFlowsToRight,The following statement contains a magic number: int padding = mode == RibbonElementSizeMode.Medium ? 7 : 0;
Magic Number,System.Windows.Forms,RibbonPanelGlyph,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanelGlyph.cs,RibbonPanelGlyph,The following statement contains a magic number: size = new Size(60' 16);
Magic Number,System.Windows.Forms,RibbonPanelGlyph,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanelGlyph.cs,RibbonPanelGlyph,The following statement contains a magic number: size = new Size(60' 16);
Magic Number,System.Windows.Forms,RibbonPanelGlyph,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanelGlyph.cs,Paint,The following statement contains a magic number: using (GraphicsPath p = RibbonProfessionalRenderer.RoundRectangle(Bounds' 9))              {                  using (SolidBrush b = new SolidBrush(Color.FromArgb(50' Color.Blue)))                  {                      pe.Graphics.FillPath(b' p);                  }              }
Magic Number,System.Windows.Forms,RibbonPanelGlyph,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanelGlyph.cs,Paint,The following statement contains a magic number: using (GraphicsPath p = RibbonProfessionalRenderer.RoundRectangle(Bounds' 9))              {                  using (SolidBrush b = new SolidBrush(Color.FromArgb(50' Color.Blue)))                  {                      pe.Graphics.FillPath(b' p);                  }              }
Magic Number,System.Windows.Forms,RibbonPanelPopup,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanelPopup.cs,RibbonPanelPopup,The following statement contains a magic number: using (Graphics g = CreateGraphics())              {                  panel.overflowBoundsBuffer = panel.Bounds;                  Size s = panel.SwitchToSize(this' g' GetSizeMode(panel));                  s.Width += 100;                  s.Height += 100;                  Size = s;                                }
Magic Number,System.Windows.Forms,RibbonPanelPopup,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanelPopup.cs,RibbonPanelPopup,The following statement contains a magic number: using (Graphics g = CreateGraphics())              {                  panel.overflowBoundsBuffer = panel.Bounds;                  Size s = panel.SwitchToSize(this' g' GetSizeMode(panel));                  s.Width += 100;                  s.Height += 100;                  Size = s;                                }
Magic Number,System.Windows.Forms,RibbonPopup,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPopup.cs,RibbonPopup,The following statement contains a magic number: BorderRoundness = 3;
Magic Number,System.Windows.Forms,RibbonProfesionalRendererColorTable,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfesionalRendererColorTable.cs,FromHex,The following statement contains a magic number: if (hex.Length != 6) throw new Exception("Color not valid");
Magic Number,System.Windows.Forms,RibbonProfesionalRendererColorTable,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfesionalRendererColorTable.cs,FromHex,The following statement contains a magic number: return Color.FromArgb(                  int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber)'                  int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber)'                  int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber));
Magic Number,System.Windows.Forms,RibbonProfesionalRendererColorTable,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfesionalRendererColorTable.cs,FromHex,The following statement contains a magic number: return Color.FromArgb(                  int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber)'                  int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber)'                  int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber));
Magic Number,System.Windows.Forms,RibbonProfesionalRendererColorTable,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfesionalRendererColorTable.cs,FromHex,The following statement contains a magic number: return Color.FromArgb(                  int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber)'                  int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber)'                  int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber));
Magic Number,System.Windows.Forms,RibbonProfesionalRendererColorTable,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfesionalRendererColorTable.cs,FromHex,The following statement contains a magic number: return Color.FromArgb(                  int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber)'                  int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber)'                  int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber));
Magic Number,System.Windows.Forms,RibbonProfesionalRendererColorTable,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfesionalRendererColorTable.cs,FromHex,The following statement contains a magic number: return Color.FromArgb(                  int.Parse(hex.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber)'                  int.Parse(hex.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber)'                  int.Parse(hex.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber));
Magic Number,System.Windows.Forms,RibbonProfesionalRendererColorTable,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfesionalRendererColorTable.cs,ToGray,The following statement contains a magic number: int m = (c.R + c.G + c.B ) / 3;
Magic Number,System.Windows.Forms,RibbonProfesionalRendererColorTableBlack,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfesionalRendererColorTableBlack.cs,RibbonProfesionalRendererColorTableBlack,The following statement contains a magic number: PanelOverflowBackgroundSelectedNorth = Color.FromArgb(100' Color.White);
Magic Number,System.Windows.Forms,RibbonProfesionalRendererColorTableBlack,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfesionalRendererColorTableBlack.cs,RibbonProfesionalRendererColorTableBlack,The following statement contains a magic number: PanelOverflowBackgroundSelectedSouth = Color.FromArgb(102' FromHex("#EBEBEB"));
Magic Number,System.Windows.Forms,RibbonProfesionalRendererColorTableBlack,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfesionalRendererColorTableBlack.cs,RibbonProfesionalRendererColorTableBlack,The following statement contains a magic number: ItemGroupInnerBorder = Color.FromArgb(51' Color.White);
Magic Number,System.Windows.Forms,RibbonProfesionalRendererColorTableBlack,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfesionalRendererColorTableBlack.cs,RibbonProfesionalRendererColorTableBlack,The following statement contains a magic number: ItemGroupSeparatorLight = Color.FromArgb(64' Color.White);
Magic Number,System.Windows.Forms,RibbonProfesionalRendererColorTableBlack,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfesionalRendererColorTableBlack.cs,RibbonProfesionalRendererColorTableBlack,The following statement contains a magic number: ItemGroupSeparatorDark = Color.FromArgb(38' FromHex("#ADB7BB"));
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,RoundRectangle,The following statement contains a magic number: int d = radius * 2;
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,RoundRectangle,The following statement contains a magic number: if (ne > 0)              {                  path.AddArc(Rectangle.FromLTRB(r.Right - ne' r.Top' r.Right' r.Top + ne)'                      -90' 90);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,RoundRectangle,The following statement contains a magic number: if (ne > 0)              {                  path.AddArc(Rectangle.FromLTRB(r.Right - ne' r.Top' r.Right' r.Top + ne)'                      -90' 90);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,RoundRectangle,The following statement contains a magic number: if (se > 0)              {                  path.AddArc(Rectangle.FromLTRB(r.Right - se' r.Bottom - se' r.Right' r.Bottom)'                      0' 90);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,RoundRectangle,The following statement contains a magic number: if (sw > 0)              {                  path.AddArc(Rectangle.FromLTRB(r.Left' r.Bottom - sw' r.Left + sw' r.Bottom)'                      90' 90);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,RoundRectangle,The following statement contains a magic number: if (sw > 0)              {                  path.AddArc(Rectangle.FromLTRB(r.Left' r.Bottom - sw' r.Left + sw' r.Bottom)'                      90' 90);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,RoundRectangle,The following statement contains a magic number: if (nw > 0)              {                  path.AddArc(Rectangle.FromLTRB(r.Left' r.Top' r.Left + nw' r.Top + nw)'                      180' 90);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,RoundRectangle,The following statement contains a magic number: if (nw > 0)              {                  path.AddArc(Rectangle.FromLTRB(r.Left' r.Top' r.Left + nw' r.Top + nw)'                      180' 90);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPressedShadow,The following statement contains a magic number: Rectangle shadow = Rectangle.FromLTRB(r.Left' r.Top' r.Right' r.Top + 4);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPressedShadow,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(shadow' 3' Corners.NorthEast | Corners.NorthWest))              {                  using (LinearGradientBrush b = new LinearGradientBrush(shadow'                      Color.FromArgb(50' Color.Black)'                      Color.FromArgb(0' Color.Black)'                      90))                  {                      b.WrapMode = WrapMode.TileFlipXY;                      g.FillPath(b' path);                    }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPressedShadow,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(shadow' 3' Corners.NorthEast | Corners.NorthWest))              {                  using (LinearGradientBrush b = new LinearGradientBrush(shadow'                      Color.FromArgb(50' Color.Black)'                      Color.FromArgb(0' Color.Black)'                      90))                  {                      b.WrapMode = WrapMode.TileFlipXY;                      g.FillPath(b' path);                    }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPressedShadow,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(shadow' 3' Corners.NorthEast | Corners.NorthWest))              {                  using (LinearGradientBrush b = new LinearGradientBrush(shadow'                      Color.FromArgb(50' Color.Black)'                      Color.FromArgb(0' Color.Black)'                      90))                  {                      b.WrapMode = WrapMode.TileFlipXY;                      g.FillPath(b' path);                    }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawArrow,The following statement contains a magic number: if(b.Width % 2 != 0 && (d == RibbonArrowDirection.Up ))                  bounds = new Rectangle(new Point(b.Left - 1' b.Top -1)' new Size(b.Width + 1' b.Height + 1));
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawArrow,The following statement contains a magic number: if (d == RibbonArrowDirection.Up)              {                  path.AddLine(bounds.Left' bounds.Bottom' bounds.Right' bounds.Bottom);                  path.AddLine(bounds.Right' bounds.Bottom' bounds.Left + bounds.Width / 2' bounds.Top);              }              else if(d == RibbonArrowDirection.Down)              {                  path.AddLine(bounds.Left' bounds.Top' bounds.Right ' bounds.Top);                  path.AddLine(bounds.Right' bounds.Top' bounds.Left + bounds.Width / 2' bounds.Bottom);              }              else if (d == RibbonArrowDirection.Left)              {                  path.AddLine(bounds.Left' bounds.Top' bounds.Right' bounds.Top + bounds.Height / 2);                  path.AddLine(bounds.Right' bounds.Top + bounds.Height / 2' bounds.Left' bounds.Bottom);              }              else              {                  path.AddLine(bounds.Right' bounds.Top' bounds.Left' bounds.Top + bounds.Height / 2);                  path.AddLine(bounds.Left' bounds.Top + bounds.Height / 2' bounds.Right' bounds.Bottom);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawArrow,The following statement contains a magic number: if (d == RibbonArrowDirection.Up)              {                  path.AddLine(bounds.Left' bounds.Bottom' bounds.Right' bounds.Bottom);                  path.AddLine(bounds.Right' bounds.Bottom' bounds.Left + bounds.Width / 2' bounds.Top);              }              else if(d == RibbonArrowDirection.Down)              {                  path.AddLine(bounds.Left' bounds.Top' bounds.Right ' bounds.Top);                  path.AddLine(bounds.Right' bounds.Top' bounds.Left + bounds.Width / 2' bounds.Bottom);              }              else if (d == RibbonArrowDirection.Left)              {                  path.AddLine(bounds.Left' bounds.Top' bounds.Right' bounds.Top + bounds.Height / 2);                  path.AddLine(bounds.Right' bounds.Top + bounds.Height / 2' bounds.Left' bounds.Bottom);              }              else              {                  path.AddLine(bounds.Right' bounds.Top' bounds.Left' bounds.Top + bounds.Height / 2);                  path.AddLine(bounds.Left' bounds.Top + bounds.Height / 2' bounds.Right' bounds.Bottom);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawArrow,The following statement contains a magic number: if (d == RibbonArrowDirection.Up)              {                  path.AddLine(bounds.Left' bounds.Bottom' bounds.Right' bounds.Bottom);                  path.AddLine(bounds.Right' bounds.Bottom' bounds.Left + bounds.Width / 2' bounds.Top);              }              else if(d == RibbonArrowDirection.Down)              {                  path.AddLine(bounds.Left' bounds.Top' bounds.Right ' bounds.Top);                  path.AddLine(bounds.Right' bounds.Top' bounds.Left + bounds.Width / 2' bounds.Bottom);              }              else if (d == RibbonArrowDirection.Left)              {                  path.AddLine(bounds.Left' bounds.Top' bounds.Right' bounds.Top + bounds.Height / 2);                  path.AddLine(bounds.Right' bounds.Top + bounds.Height / 2' bounds.Left' bounds.Bottom);              }              else              {                  path.AddLine(bounds.Right' bounds.Top' bounds.Left' bounds.Top + bounds.Height / 2);                  path.AddLine(bounds.Left' bounds.Top + bounds.Height / 2' bounds.Right' bounds.Bottom);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawArrow,The following statement contains a magic number: if (d == RibbonArrowDirection.Up)              {                  path.AddLine(bounds.Left' bounds.Bottom' bounds.Right' bounds.Bottom);                  path.AddLine(bounds.Right' bounds.Bottom' bounds.Left + bounds.Width / 2' bounds.Top);              }              else if(d == RibbonArrowDirection.Down)              {                  path.AddLine(bounds.Left' bounds.Top' bounds.Right ' bounds.Top);                  path.AddLine(bounds.Right' bounds.Top' bounds.Left + bounds.Width / 2' bounds.Bottom);              }              else if (d == RibbonArrowDirection.Left)              {                  path.AddLine(bounds.Left' bounds.Top' bounds.Right' bounds.Top + bounds.Height / 2);                  path.AddLine(bounds.Right' bounds.Top + bounds.Height / 2' bounds.Left' bounds.Bottom);              }              else              {                  path.AddLine(bounds.Right' bounds.Top' bounds.Left' bounds.Top + bounds.Height / 2);                  path.AddLine(bounds.Left' bounds.Top + bounds.Height / 2' bounds.Right' bounds.Bottom);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawArrow,The following statement contains a magic number: if (d == RibbonArrowDirection.Up)              {                  path.AddLine(bounds.Left' bounds.Bottom' bounds.Right' bounds.Bottom);                  path.AddLine(bounds.Right' bounds.Bottom' bounds.Left + bounds.Width / 2' bounds.Top);              }              else if(d == RibbonArrowDirection.Down)              {                  path.AddLine(bounds.Left' bounds.Top' bounds.Right ' bounds.Top);                  path.AddLine(bounds.Right' bounds.Top' bounds.Left + bounds.Width / 2' bounds.Bottom);              }              else if (d == RibbonArrowDirection.Left)              {                  path.AddLine(bounds.Left' bounds.Top' bounds.Right' bounds.Top + bounds.Height / 2);                  path.AddLine(bounds.Right' bounds.Top + bounds.Height / 2' bounds.Left' bounds.Bottom);              }              else              {                  path.AddLine(bounds.Right' bounds.Top' bounds.Left' bounds.Top + bounds.Height / 2);                  path.AddLine(bounds.Left' bounds.Top + bounds.Height / 2' bounds.Right' bounds.Bottom);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawArrow,The following statement contains a magic number: if (d == RibbonArrowDirection.Up)              {                  path.AddLine(bounds.Left' bounds.Bottom' bounds.Right' bounds.Bottom);                  path.AddLine(bounds.Right' bounds.Bottom' bounds.Left + bounds.Width / 2' bounds.Top);              }              else if(d == RibbonArrowDirection.Down)              {                  path.AddLine(bounds.Left' bounds.Top' bounds.Right ' bounds.Top);                  path.AddLine(bounds.Right' bounds.Top' bounds.Left + bounds.Width / 2' bounds.Bottom);              }              else if (d == RibbonArrowDirection.Left)              {                  path.AddLine(bounds.Left' bounds.Top' bounds.Right' bounds.Top + bounds.Height / 2);                  path.AddLine(bounds.Right' bounds.Top + bounds.Height / 2' bounds.Left' bounds.Bottom);              }              else              {                  path.AddLine(bounds.Right' bounds.Top' bounds.Left' bounds.Top + bounds.Height / 2);                  path.AddLine(bounds.Left' bounds.Top + bounds.Height / 2' bounds.Right' bounds.Bottom);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawArrowShaded,The following statement contains a magic number: Point arrowP = new Point(                  b.Left + (b.Width - arrSize.Width) / 2'                  b.Top + (b.Height - arrSize.Height) / 2                  );
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawArrowShaded,The following statement contains a magic number: Point arrowP = new Point(                  b.Left + (b.Width - arrSize.Width) / 2'                  b.Top + (b.Height - arrSize.Height) / 2                  );
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CenterOn,The following statement contains a magic number: Rectangle result = new Rectangle(                  container.Left + ((container.Width - r.Width) / 2)'                  container.Top + ((container.Height - r.Height) / 2)'                  r.Width' r.Height);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CenterOn,The following statement contains a magic number: Rectangle result = new Rectangle(                  container.Left + ((container.Width - r.Width) / 2)'                  container.Top + ((container.Height - r.Height) / 2)'                  r.Width' r.Height);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawGripDot,The following statement contains a magic number: Rectangle lt = new Rectangle(location.X - 1' location.Y + 1' 2' 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawGripDot,The following statement contains a magic number: Rectangle lt = new Rectangle(location.X - 1' location.Y + 1' 2' 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawGripDot,The following statement contains a magic number: Rectangle dk = new Rectangle(location' new Size(2' 2));
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawGripDot,The following statement contains a magic number: Rectangle dk = new Rectangle(location' new Size(2' 2));
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The following statement contains a magic number: int corner = 6;
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The following statement contains a magic number: path.AddArc(                  Rectangle.FromLTRB(t.TabBounds.Right - corner' t.TabBounds.Top' t.TabBounds.Right' t.TabBounds.Top + corner)'                  -90' 90);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The following statement contains a magic number: path.AddArc(                  Rectangle.FromLTRB(t.TabBounds.Right - corner' t.TabBounds.Top' t.TabBounds.Right' t.TabBounds.Top + corner)'                  -90' 90);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The following statement contains a magic number: path.AddArc(Rectangle.FromLTRB(                  t.TabBounds.Right' t.TabBounds.Bottom - corner' t.TabBounds.Right + corner' t.TabBounds.Bottom)'                  -180' -90);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The following statement contains a magic number: path.AddArc(Rectangle.FromLTRB(                  t.TabBounds.Right' t.TabBounds.Bottom - corner' t.TabBounds.Right + corner' t.TabBounds.Bottom)'                  -180' -90);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The following statement contains a magic number: path.AddArc(Rectangle.FromLTRB(                  t.TabContentBounds.Right - corner' t.TabBounds.Bottom' t.TabContentBounds.Right' t.TabBounds.Bottom + corner)'                  -90' 90);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The following statement contains a magic number: path.AddArc(Rectangle.FromLTRB(                  t.TabContentBounds.Right - corner' t.TabBounds.Bottom' t.TabContentBounds.Right' t.TabBounds.Bottom + corner)'                  -90' 90);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The following statement contains a magic number: path.AddArc(Rectangle.FromLTRB(                  t.TabContentBounds.Right - corner' t.TabContentBounds.Bottom - corner' t.TabContentBounds.Right' t.TabContentBounds.Bottom)'                  0' 90);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The following statement contains a magic number: path.AddArc(Rectangle.FromLTRB(                  t.TabContentBounds.Left' t.TabContentBounds.Bottom - corner' t.TabContentBounds.Left + corner' t.TabContentBounds.Bottom)'                  90' 90);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The following statement contains a magic number: path.AddArc(Rectangle.FromLTRB(                  t.TabContentBounds.Left' t.TabContentBounds.Bottom - corner' t.TabContentBounds.Left + corner' t.TabContentBounds.Bottom)'                  90' 90);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The following statement contains a magic number: path.AddArc(Rectangle.FromLTRB(                  t.TabContentBounds.Left' t.TabBounds.Bottom' t.TabContentBounds.Left + corner' t.TabBounds.Bottom + corner)'                  180' 90);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The following statement contains a magic number: path.AddArc(Rectangle.FromLTRB(                  t.TabContentBounds.Left' t.TabBounds.Bottom' t.TabContentBounds.Left + corner' t.TabBounds.Bottom + corner)'                  180' 90);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The following statement contains a magic number: path.AddArc(Rectangle.FromLTRB(                  t.TabBounds.Left - corner' t.TabBounds.Bottom - corner' t.TabBounds.Left' t.TabBounds.Bottom)'                  90' -90);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The following statement contains a magic number: path.AddArc(Rectangle.FromLTRB(                  t.TabBounds.Left - corner' t.TabBounds.Bottom - corner' t.TabBounds.Left' t.TabBounds.Bottom)'                  90' -90);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The following statement contains a magic number: path.AddArc(Rectangle.FromLTRB(                  t.TabBounds.Left' t.TabBounds.Top' t.TabBounds.Left + corner' t.TabBounds.Top + corner)'                  180' 90);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateCompleteTabPath,The following statement contains a magic number: path.AddArc(Rectangle.FromLTRB(                  t.TabBounds.Left' t.TabBounds.Top' t.TabBounds.Left + corner' t.TabBounds.Top + corner)'                  180' 90);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateTabPath,The following statement contains a magic number: int corner = 6;
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateTabPath,The following statement contains a magic number: path.AddArc(                  new Rectangle(                  t.TabBounds.Left' t.TabBounds.Top'                  corner' corner)'                  180' 90);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateTabPath,The following statement contains a magic number: path.AddArc(                  new Rectangle(                  t.TabBounds.Left' t.TabBounds.Top'                  corner' corner)'                  180' 90);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateTabPath,The following statement contains a magic number: path.AddArc(                  new Rectangle(                  t.TabBounds.Right - corner - rightOffset' t.TabBounds.Top'                  corner' corner)'                  -90' 90);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateTabPath,The following statement contains a magic number: path.AddArc(                  new Rectangle(                  t.TabBounds.Right - corner - rightOffset' t.TabBounds.Top'                  corner' corner)'                  -90' 90);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawCompleteTab,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(e.Tab.TabContentBounds' 4))              {                  Color north = ColorTable.TabContentNorth;                  Color south = ColorTable.TabContentSouth;                    if (e.Tab.Contextual)                  {                      north = ColorTable.DropDownBg;                      south = north;                  }                    using (LinearGradientBrush b = new LinearGradientBrush(                      new Point(0' e.Tab.TabContentBounds.Top + 30)'                       new Point(0' e.Tab.TabContentBounds.Bottom - 10)' north' south))                  {                      b.WrapMode = WrapMode.TileFlipXY;                      e.Graphics.FillPath(b' path);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawCompleteTab,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(e.Tab.TabContentBounds' 4))              {                  Color north = ColorTable.TabContentNorth;                  Color south = ColorTable.TabContentSouth;                    if (e.Tab.Contextual)                  {                      north = ColorTable.DropDownBg;                      south = north;                  }                    using (LinearGradientBrush b = new LinearGradientBrush(                      new Point(0' e.Tab.TabContentBounds.Top + 30)'                       new Point(0' e.Tab.TabContentBounds.Bottom - 10)' north' south))                  {                      b.WrapMode = WrapMode.TileFlipXY;                      e.Graphics.FillPath(b' path);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawCompleteTab,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(e.Tab.TabContentBounds' 4))              {                  Color north = ColorTable.TabContentNorth;                  Color south = ColorTable.TabContentSouth;                    if (e.Tab.Contextual)                  {                      north = ColorTable.DropDownBg;                      south = north;                  }                    using (LinearGradientBrush b = new LinearGradientBrush(                      new Point(0' e.Tab.TabContentBounds.Top + 30)'                       new Point(0' e.Tab.TabContentBounds.Bottom - 10)' north' south))                  {                      b.WrapMode = WrapMode.TileFlipXY;                      e.Graphics.FillPath(b' path);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawCompleteTab,The following statement contains a magic number: Rectangle glossy = Rectangle.FromLTRB(e.Tab.TabContentBounds.Left' e.Tab.TabContentBounds.Top + 0' e.Tab.TabContentBounds.Right' e.Tab.TabContentBounds.Top + 18);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawCompleteTab,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(glossy' 6' Corners.NorthWest | Corners.NorthEast))              {                  using (Brush b = new SolidBrush(Color.FromArgb(30' Color.White)))                  {                      e.Graphics.FillPath(b' path);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawCompleteTab,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(glossy' 6' Corners.NorthWest | Corners.NorthEast))              {                  using (Brush b = new SolidBrush(Color.FromArgb(30' Color.White)))                  {                      e.Graphics.FillPath(b' path);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawCompleteTab,The following statement contains a magic number: if (e.Tab.Selected)              {                  //Selected glow                  using (GraphicsPath path = CreateTabPath(e.Tab))                  {                      Pen p = new Pen(Color.FromArgb(150' Color.Gold));                      p.Width = 2;                        e.Graphics.DrawPath(p' path);                        p.Dispose();                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawCompleteTab,The following statement contains a magic number: if (e.Tab.Selected)              {                  //Selected glow                  using (GraphicsPath path = CreateTabPath(e.Tab))                  {                      Pen p = new Pen(Color.FromArgb(150' Color.Gold));                      p.Width = 2;                        e.Graphics.DrawPath(p' path);                        p.Dispose();                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabSelected,The following statement contains a magic number: Rectangle glossyR = Rectangle.FromLTRB(                  innerR.Left + 1'                  innerR.Top + 1'                  innerR.Right - 1'                  innerR.Top + e.Tab.TabBounds.Height / 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabSelected,The following statement contains a magic number: GraphicsPath outer = RoundRectangle(outerR' 3' Corners.NorthEast | Corners.NorthWest);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabSelected,The following statement contains a magic number: GraphicsPath inner = RoundRectangle(innerR' 3' Corners.NorthEast | Corners.NorthWest);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabSelected,The following statement contains a magic number: GraphicsPath glossy = RoundRectangle(glossyR' 3' Corners.NorthEast | Corners.NorthWest);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabSelected,The following statement contains a magic number: using (Pen p = new Pen(Color.FromArgb(200' Color.White)))              {                  e.Graphics.DrawPath(p' inner);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabSelected,The following statement contains a magic number: using (GraphicsPath radialPath = new GraphicsPath())              {                  radialPath.AddRectangle(innerR);                  //radialPath.AddEllipse(innerR);                  radialPath.CloseFigure();                    PathGradientBrush gr = new PathGradientBrush(radialPath);                  gr.CenterPoint = new PointF(                      Convert.ToSingle(innerR.Left + innerR.Width / 2)'                      Convert.ToSingle(innerR.Top - 5));                  gr.CenterColor = Color.Transparent;                  gr.SurroundColors = new Color[] { ColorTable.TabSelectedGlow };                    Blend blend = new Blend(3);                  blend.Factors = new float[] { 0.0f' 0.9f' 0.0f };                  blend.Positions = new float[] { 0.0f' 0.8f' 1.0f };                    gr.Blend = blend;                    e.Graphics.FillPath(gr' radialPath);                    gr.Dispose();              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabSelected,The following statement contains a magic number: using (GraphicsPath radialPath = new GraphicsPath())              {                  radialPath.AddRectangle(innerR);                  //radialPath.AddEllipse(innerR);                  radialPath.CloseFigure();                    PathGradientBrush gr = new PathGradientBrush(radialPath);                  gr.CenterPoint = new PointF(                      Convert.ToSingle(innerR.Left + innerR.Width / 2)'                      Convert.ToSingle(innerR.Top - 5));                  gr.CenterColor = Color.Transparent;                  gr.SurroundColors = new Color[] { ColorTable.TabSelectedGlow };                    Blend blend = new Blend(3);                  blend.Factors = new float[] { 0.0f' 0.9f' 0.0f };                  blend.Positions = new float[] { 0.0f' 0.8f' 1.0f };                    gr.Blend = blend;                    e.Graphics.FillPath(gr' radialPath);                    gr.Dispose();              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabSelected,The following statement contains a magic number: using (GraphicsPath radialPath = new GraphicsPath())              {                  radialPath.AddRectangle(innerR);                  //radialPath.AddEllipse(innerR);                  radialPath.CloseFigure();                    PathGradientBrush gr = new PathGradientBrush(radialPath);                  gr.CenterPoint = new PointF(                      Convert.ToSingle(innerR.Left + innerR.Width / 2)'                      Convert.ToSingle(innerR.Top - 5));                  gr.CenterColor = Color.Transparent;                  gr.SurroundColors = new Color[] { ColorTable.TabSelectedGlow };                    Blend blend = new Blend(3);                  blend.Factors = new float[] { 0.0f' 0.9f' 0.0f };                  blend.Positions = new float[] { 0.0f' 0.8f' 1.0f };                    gr.Blend = blend;                    e.Graphics.FillPath(gr' radialPath);                    gr.Dispose();              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabSelected,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(Color.FromArgb(100' Color.White)))              {                  e.Graphics.FillPath(b' glossy);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabActive,The following statement contains a magic number: Rectangle glossy = new Rectangle(e.Tab.TabBounds.Left' e.Tab.TabBounds.Top' e.Tab.TabBounds.Width' 4);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabActive,The following statement contains a magic number: shadow.Offset(2' 1);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabActive,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(shadow' 6' Corners.NorthWest | Corners.NorthEast))              {                  using (PathGradientBrush b = new PathGradientBrush(path))                  {                      b.WrapMode = WrapMode.Clamp;                        ColorBlend cb = new ColorBlend(3);                      cb.Colors = new Color[]{Color.Transparent'                          Color.FromArgb(50' Color.Black)'                          Color.FromArgb(100' Color.Black)};                      cb.Positions = new float[] { 0f' .1f' 1f };                        b.InterpolationColors = cb;                        e.Graphics.FillPath(b' path);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabActive,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(shadow' 6' Corners.NorthWest | Corners.NorthEast))              {                  using (PathGradientBrush b = new PathGradientBrush(path))                  {                      b.WrapMode = WrapMode.Clamp;                        ColorBlend cb = new ColorBlend(3);                      cb.Colors = new Color[]{Color.Transparent'                          Color.FromArgb(50' Color.Black)'                          Color.FromArgb(100' Color.Black)};                      cb.Positions = new float[] { 0f' .1f' 1f };                        b.InterpolationColors = cb;                        e.Graphics.FillPath(b' path);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabActive,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(shadow' 6' Corners.NorthWest | Corners.NorthEast))              {                  using (PathGradientBrush b = new PathGradientBrush(path))                  {                      b.WrapMode = WrapMode.Clamp;                        ColorBlend cb = new ColorBlend(3);                      cb.Colors = new Color[]{Color.Transparent'                          Color.FromArgb(50' Color.Black)'                          Color.FromArgb(100' Color.Black)};                      cb.Positions = new float[] { 0f' .1f' 1f };                        b.InterpolationColors = cb;                        e.Graphics.FillPath(b' path);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabActive,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(shadow' 6' Corners.NorthWest | Corners.NorthEast))              {                  using (PathGradientBrush b = new PathGradientBrush(path))                  {                      b.WrapMode = WrapMode.Clamp;                        ColorBlend cb = new ColorBlend(3);                      cb.Colors = new Color[]{Color.Transparent'                          Color.FromArgb(50' Color.Black)'                          Color.FromArgb(100' Color.Black)};                      cb.Positions = new float[] { 0f' .1f' 1f };                        b.InterpolationColors = cb;                        e.Graphics.FillPath(b' path);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabActive,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(tab' 6' Corners.North))              {                  Color north = ColorTable.TabNorth;                  Color south = ColorTable.TabSouth;                    if (e.Tab.Contextual)                  {                      north = e.Tab.Context.GlowColor;                      south = Color.FromArgb(10' north);                  }                    using (Pen p = new Pen(ColorTable.TabNorth' 1.6f))                  {                      e.Graphics.DrawPath(p' path);                  }                    using (LinearGradientBrush b = new LinearGradientBrush(                      e.Tab.TabBounds' ColorTable.TabNorth' ColorTable.TabSouth' 90))                  {                      e.Graphics.FillPath(b' path);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabActive,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(tab' 6' Corners.North))              {                  Color north = ColorTable.TabNorth;                  Color south = ColorTable.TabSouth;                    if (e.Tab.Contextual)                  {                      north = e.Tab.Context.GlowColor;                      south = Color.FromArgb(10' north);                  }                    using (Pen p = new Pen(ColorTable.TabNorth' 1.6f))                  {                      e.Graphics.DrawPath(p' path);                  }                    using (LinearGradientBrush b = new LinearGradientBrush(                      e.Tab.TabBounds' ColorTable.TabNorth' ColorTable.TabSouth' 90))                  {                      e.Graphics.FillPath(b' path);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabActive,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(tab' 6' Corners.North))              {                  Color north = ColorTable.TabNorth;                  Color south = ColorTable.TabSouth;                    if (e.Tab.Contextual)                  {                      north = e.Tab.Context.GlowColor;                      south = Color.FromArgb(10' north);                  }                    using (Pen p = new Pen(ColorTable.TabNorth' 1.6f))                  {                      e.Graphics.DrawPath(p' path);                  }                    using (LinearGradientBrush b = new LinearGradientBrush(                      e.Tab.TabBounds' ColorTable.TabNorth' ColorTable.TabSouth' 90))                  {                      e.Graphics.FillPath(b' path);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabActive,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(glossy' 6' Corners.North))              {                  using (Brush b = new SolidBrush(Color.FromArgb(180' Color.White)))                  {                      e.Graphics.FillPath(b' path);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTabActive,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(glossy' 6' Corners.North))              {                  using (Brush b = new SolidBrush(Color.FromArgb(180' Color.White)))                  {                      e.Graphics.FillPath(b' path);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelNormal,The following statement contains a magic number: GraphicsPath dark = RoundRectangle(darkBorder' 3);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelNormal,The following statement contains a magic number: GraphicsPath light = RoundRectangle(lightBorder' 3);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelNormal,The following statement contains a magic number: GraphicsPath txt = RoundRectangle(textArea' 3' Corners.SouthEast | Corners.SouthWest);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelSelected,The following statement contains a magic number: GraphicsPath dark = RoundRectangle(darkBorder' 3);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelSelected,The following statement contains a magic number: GraphicsPath light = RoundRectangle(lightBorder' 3);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelSelected,The following statement contains a magic number: GraphicsPath txt = RoundRectangle(textArea' 3' Corners.SouthEast | Corners.SouthWest);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonMoreGlyph,The following statement contains a magic number: Point d = new Point(f.X' f.Y - 3);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonMoreGlyph,The following statement contains a magic number: Point e = new Point(f.X - 3' f.Y);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonMoreGlyph,The following statement contains a magic number: Point g = new Point(f.X - 3' f.Y - 3);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonMoreGlyph,The following statement contains a magic number: Point g = new Point(f.X - 3' f.Y - 3);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowNormal,The following statement contains a magic number: GraphicsPath dark = RoundRectangle(darkBorder' 3);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowNormal,The following statement contains a magic number: GraphicsPath light = RoundRectangle(lightBorder' 3);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPannelOveflowSelected,The following statement contains a magic number: GraphicsPath dark = RoundRectangle(darkBorder' 3);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPannelOveflowSelected,The following statement contains a magic number: GraphicsPath light = RoundRectangle(lightBorder' 3);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPannelOveflowSelected,The following statement contains a magic number: using (LinearGradientBrush b = new LinearGradientBrush(                  lightBorder' ColorTable.PanelOverflowBackgroundSelectedNorth' Color.Transparent' 90))              {                  e.Graphics.FillPath(b' light);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowPressed,The following statement contains a magic number: Rectangle glossy = Rectangle.FromLTRB(                  e.Panel.Bounds.Left'                  e.Panel.Bounds.Top'                  e.Panel.Bounds.Right'                  e.Panel.Bounds.Top + 17);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowPressed,The following statement contains a magic number: GraphicsPath dark = RoundRectangle(darkBorder' 3);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowPressed,The following statement contains a magic number: GraphicsPath light = RoundRectangle(lightBorder' 3);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowPressed,The following statement contains a magic number: using (LinearGradientBrush b = new LinearGradientBrush(lightBorder'                  ColorTable.PanelOverflowBackgroundPressed'                  ColorTable.PanelOverflowBackgroundSelectedSouth' 90))              {                  b.WrapMode = WrapMode.TileFlipXY;                  e.Graphics.FillPath(b' dark);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowPressed,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(glossy' 3' Corners.NorthEast | Corners.NorthWest))              {                  using (LinearGradientBrush b = new LinearGradientBrush(                      glossy'                      Color.FromArgb(150' Color.White)'                      Color.FromArgb(50' Color.White)' 90                      ))                  {                      b.WrapMode = WrapMode.TileFlipXY;                      e.Graphics.FillPath(b' path);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowPressed,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(glossy' 3' Corners.NorthEast | Corners.NorthWest))              {                  using (LinearGradientBrush b = new LinearGradientBrush(                      glossy'                      Color.FromArgb(150' Color.White)'                      Color.FromArgb(50' Color.White)' 90                      ))                  {                      b.WrapMode = WrapMode.TileFlipXY;                      e.Graphics.FillPath(b' path);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowPressed,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(glossy' 3' Corners.NorthEast | Corners.NorthWest))              {                  using (LinearGradientBrush b = new LinearGradientBrush(                      glossy'                      Color.FromArgb(150' Color.White)'                      Color.FromArgb(50' Color.White)' 90                      ))                  {                      b.WrapMode = WrapMode.TileFlipXY;                      e.Graphics.FillPath(b' path);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowPressed,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(glossy' 3' Corners.NorthEast | Corners.NorthWest))              {                  using (LinearGradientBrush b = new LinearGradientBrush(                      glossy'                      Color.FromArgb(150' Color.White)'                      Color.FromArgb(50' Color.White)' 90                      ))                  {                      b.WrapMode = WrapMode.TileFlipXY;                      e.Graphics.FillPath(b' path);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowPressed,The following statement contains a magic number: using (Pen p = new Pen(Color.FromArgb(40' Color.White)))              {                  e.Graphics.DrawPath(p' light);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowImage,The following statement contains a magic number: int margin =3;
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowImage,The following statement contains a magic number: Size imgSquareSize = new Size(32' 32);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowImage,The following statement contains a magic number: Size imgSquareSize = new Size(32' 32);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowImage,The following statement contains a magic number: Rectangle imgSquareR = new Rectangle(new Point(                  e.Panel.Bounds.Left + (e.Panel.Bounds.Width - imgSquareSize.Width) / 2'                  e.Panel.Bounds.Top+ 5)' imgSquareSize);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowImage,The following statement contains a magic number: Rectangle imgSquareR = new Rectangle(new Point(                  e.Panel.Bounds.Left + (e.Panel.Bounds.Width - imgSquareSize.Width) / 2'                  e.Panel.Bounds.Top+ 5)' imgSquareSize);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowImage,The following statement contains a magic number: Rectangle imgSquareBottomR = Rectangle.FromLTRB(                  imgSquareR.Left' imgSquareR.Bottom - 10' imgSquareR.Right' imgSquareR.Bottom);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowImage,The following statement contains a magic number: GraphicsPath imgSq = RoundRectangle(imgSquareR' 5);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowImage,The following statement contains a magic number: GraphicsPath imgSqB = RoundRectangle(imgSquareBottomR' 5' Corners.South);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowImage,The following statement contains a magic number: using (LinearGradientBrush b = new LinearGradientBrush(                  imgSquareR' ColorTable.TabContentNorth' ColorTable.TabContentSouth' 90                  ))              {                  e.Graphics.FillPath(b' imgSq);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowImage,The following statement contains a magic number: if (e.Panel.Image != null)              {                  e.Graphics.DrawImage(e.Panel.Image'                                               imgSquareR.Left + (imgSquareR.Width - e.Panel.Image.Width) / 2'                          imgSquareR.Top + ((imgSquareR.Height - imgSquareBottomR.Height) - e.Panel.Image.Height) / 2' e.Panel.Image.Width' e.Panel.Image.Height);                }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawPanelOverflowImage,The following statement contains a magic number: if (e.Panel.Image != null)              {                  e.Graphics.DrawImage(e.Panel.Image'                                               imgSquareR.Left + (imgSquareR.Width - e.Panel.Image.Width) / 2'                          imgSquareR.Top + ((imgSquareR.Height - imgSquareBottomR.Height) - e.Panel.Image.Height) / 2' e.Panel.Image.Width' e.Panel.Image.Height);                }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrbOptionButton,The following statement contains a magic number: using (GraphicsPath p = RoundRectangle(bounds' 3))              {                  using (SolidBrush b = new SolidBrush(ColorTable.OrbOptionBackground))                  {                      g.FillPath(b' p);                  }                    GradientRect(g' Rectangle.FromLTRB(bounds.Left' bounds.Top + bounds.Height / 2' bounds.Right' bounds.Bottom - 2)'                      ColorTable.OrbOptionShine' ColorTable.OrbOptionBackground);                    using (Pen pen = new Pen(ColorTable.OrbOptionBorder))                  {                      g.DrawPath(pen' p);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrbOptionButton,The following statement contains a magic number: using (GraphicsPath p = RoundRectangle(bounds' 3))              {                  using (SolidBrush b = new SolidBrush(ColorTable.OrbOptionBackground))                  {                      g.FillPath(b' p);                  }                    GradientRect(g' Rectangle.FromLTRB(bounds.Left' bounds.Top + bounds.Height / 2' bounds.Right' bounds.Bottom - 2)'                      ColorTable.OrbOptionShine' ColorTable.OrbOptionBackground);                    using (Pen pen = new Pen(ColorTable.OrbOptionBorder))                  {                      g.DrawPath(pen' p);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrbOptionButton,The following statement contains a magic number: using (GraphicsPath p = RoundRectangle(bounds' 3))              {                  using (SolidBrush b = new SolidBrush(ColorTable.OrbOptionBackground))                  {                      g.FillPath(b' p);                  }                    GradientRect(g' Rectangle.FromLTRB(bounds.Left' bounds.Top + bounds.Height / 2' bounds.Right' bounds.Bottom - 2)'                      ColorTable.OrbOptionShine' ColorTable.OrbOptionBackground);                    using (Pen pen = new Pen(ColorTable.OrbOptionBorder))                  {                      g.DrawPath(pen' p);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButton,The following statement contains a magic number: Rectangle innerR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Bottom - 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButton,The following statement contains a magic number: Rectangle innerR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Bottom - 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButton,The following statement contains a magic number: Rectangle glossyR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Top + Convert.ToInt32((double)bounds.Height * .36));
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButton,The following statement contains a magic number: Rectangle glossyR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Top + Convert.ToInt32((double)bounds.Height * .36));
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButton,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      if (glossyR.Width > 0 && glossyR.Height > 0)                          using (LinearGradientBrush b = new LinearGradientBrush(                              glossyR' ColorTable.ButtonGlossyNorth' ColorTable.ButtonGlossySouth' 90))                          {                              b.WrapMode = WrapMode.TileFlipXY;                              g.FillPath(b' path);                          }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButton,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      if (glossyR.Width > 0 && glossyR.Height > 0)                          using (LinearGradientBrush b = new LinearGradientBrush(                              glossyR' ColorTable.ButtonGlossyNorth' ColorTable.ButtonGlossySouth' 90))                          {                              b.WrapMode = WrapMode.TileFlipXY;                              g.FillPath(b' path);                          }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButton,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      if (glossyR.Width > 0 && glossyR.Height > 0)                          using (LinearGradientBrush b = new LinearGradientBrush(                              glossyR' ColorTable.ButtonGlossyNorth' ColorTable.ButtonGlossySouth' 90))                          {                              b.WrapMode = WrapMode.TileFlipXY;                              g.FillPath(b' path);                          }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButton,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      if (glossyR.Width > 0 && glossyR.Height > 0)                          using (LinearGradientBrush b = new LinearGradientBrush(                              glossyR' ColorTable.ButtonGlossyNorth' ColorTable.ButtonGlossySouth' 90))                          {                              b.WrapMode = WrapMode.TileFlipXY;                              g.FillPath(b' path);                          }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButton,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      if (glossyR.Width > 0 && glossyR.Height > 0)                          using (LinearGradientBrush b = new LinearGradientBrush(                              glossyR' ColorTable.ButtonGlossyNorth' ColorTable.ButtonGlossySouth' 90))                          {                              b.WrapMode = WrapMode.TileFlipXY;                              g.FillPath(b' path);                          }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButton,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      if (glossyR.Width > 0 && glossyR.Height > 0)                          using (LinearGradientBrush b = new LinearGradientBrush(                              glossyR' ColorTable.ButtonGlossyNorth' ColorTable.ButtonGlossySouth' 90))                          {                              b.WrapMode = WrapMode.TileFlipXY;                              g.FillPath(b' path);                          }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButton,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      if (glossyR.Width > 0 && glossyR.Height > 0)                          using (LinearGradientBrush b = new LinearGradientBrush(                              glossyR' ColorTable.ButtonGlossyNorth' ColorTable.ButtonGlossySouth' 90))                          {                              b.WrapMode = WrapMode.TileFlipXY;                              g.FillPath(b' path);                          }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,LargeButtonDropDownArrowBounds,The following statement contains a magic number: if (moreWords)              {                  return new Rectangle(lastCharBounds.Right + 3'                      lastCharBounds.Top + (lastCharBounds.Height - arrowSize.Height) / 2' arrowSize.Width' arrowSize.Height);              }              else              {                  return new Rectangle(                      textLayout.Left + (textLayout.Width - arrowSize.Width) / 2'                      lastCharBounds.Bottom + ((textLayout.Bottom - lastCharBounds.Bottom) - arrowSize.Height) / 2' arrowSize.Width' arrowSize.Height);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,LargeButtonDropDownArrowBounds,The following statement contains a magic number: if (moreWords)              {                  return new Rectangle(lastCharBounds.Right + 3'                      lastCharBounds.Top + (lastCharBounds.Height - arrowSize.Height) / 2' arrowSize.Width' arrowSize.Height);              }              else              {                  return new Rectangle(                      textLayout.Left + (textLayout.Width - arrowSize.Width) / 2'                      lastCharBounds.Bottom + ((textLayout.Bottom - lastCharBounds.Bottom) - arrowSize.Height) / 2' arrowSize.Width' arrowSize.Height);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,LargeButtonDropDownArrowBounds,The following statement contains a magic number: if (moreWords)              {                  return new Rectangle(lastCharBounds.Right + 3'                      lastCharBounds.Top + (lastCharBounds.Height - arrowSize.Height) / 2' arrowSize.Width' arrowSize.Height);              }              else              {                  return new Rectangle(                      textLayout.Left + (textLayout.Width - arrowSize.Width) / 2'                      lastCharBounds.Bottom + ((textLayout.Bottom - lastCharBounds.Bottom) - arrowSize.Height) / 2' arrowSize.Width' arrowSize.Height);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,LargeButtonDropDownArrowBounds,The following statement contains a magic number: if (moreWords)              {                  return new Rectangle(lastCharBounds.Right + 3'                      lastCharBounds.Top + (lastCharBounds.Height - arrowSize.Height) / 2' arrowSize.Width' arrowSize.Height);              }              else              {                  return new Rectangle(                      textLayout.Left + (textLayout.Width - arrowSize.Width) / 2'                      lastCharBounds.Bottom + ((textLayout.Bottom - lastCharBounds.Bottom) - arrowSize.Height) / 2' arrowSize.Width' arrowSize.Height);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonDisabled,The following statement contains a magic number: Rectangle innerR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Bottom - 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonDisabled,The following statement contains a magic number: Rectangle innerR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Bottom - 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonDisabled,The following statement contains a magic number: Rectangle glossyR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Top + Convert.ToInt32((double)bounds.Height * .36));
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonDisabled,The following statement contains a magic number: Rectangle glossyR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Top + Convert.ToInt32((double)bounds.Height * .36));
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonDisabled,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonDisabledBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonDisabledBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonDisabledBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonDisabledBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonDisabledBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonDisabledGlossyNorth' ColorTable.ButtonDisabledGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonDisabled,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonDisabledBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonDisabledBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonDisabledBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonDisabledBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonDisabledBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonDisabledGlossyNorth' ColorTable.ButtonDisabledGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonDisabled,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonDisabledBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonDisabledBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonDisabledBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonDisabledBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonDisabledBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonDisabledGlossyNorth' ColorTable.ButtonDisabledGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonDisabled,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonDisabledBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonDisabledBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonDisabledBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonDisabledBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonDisabledBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonDisabledGlossyNorth' ColorTable.ButtonDisabledGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonDisabled,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonDisabledBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonDisabledBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonDisabledBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonDisabledBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonDisabledBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonDisabledGlossyNorth' ColorTable.ButtonDisabledGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonDisabled,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonDisabledBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonDisabledBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonDisabledBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonDisabledBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonDisabledBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonDisabledGlossyNorth' ColorTable.ButtonDisabledGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonDisabled,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonDisabledBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonDisabledBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonDisabledBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonDisabledBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonDisabledBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonDisabledGlossyNorth' ColorTable.ButtonDisabledGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonPressed,The following statement contains a magic number: Rectangle innerR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Bottom - 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonPressed,The following statement contains a magic number: Rectangle innerR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Bottom - 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonPressed,The following statement contains a magic number: Rectangle glossyR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Top + Convert.ToInt32((double)bounds.Height * .36));
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonPressed,The following statement contains a magic number: Rectangle glossyR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Top + Convert.ToInt32((double)bounds.Height * .36));
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonPressed,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonPressedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonPressedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonPressedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonPressedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonPressedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonPressedGlossyNorth' ColorTable.ButtonPressedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonPressed,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonPressedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonPressedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonPressedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonPressedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonPressedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonPressedGlossyNorth' ColorTable.ButtonPressedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonPressed,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonPressedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonPressedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonPressedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonPressedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonPressedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonPressedGlossyNorth' ColorTable.ButtonPressedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonPressed,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonPressedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonPressedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonPressedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonPressedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonPressedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonPressedGlossyNorth' ColorTable.ButtonPressedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonPressed,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonPressedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonPressedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonPressedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonPressedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonPressedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonPressedGlossyNorth' ColorTable.ButtonPressedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonPressed,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonPressedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonPressedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonPressedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonPressedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonPressedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonPressedGlossyNorth' ColorTable.ButtonPressedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonPressed,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonPressedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonPressedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonPressedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonPressedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonPressedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonPressedGlossyNorth' ColorTable.ButtonPressedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonSelected,The following statement contains a magic number: Rectangle innerR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Bottom - 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonSelected,The following statement contains a magic number: Rectangle innerR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Bottom - 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonSelected,The following statement contains a magic number: Rectangle glossyR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Top + Convert.ToInt32((double)bounds.Height * .36));
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonSelected,The following statement contains a magic number: Rectangle glossyR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Top + Convert.ToInt32((double)bounds.Height * .36));
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonSelected,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonSelectedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonSelectedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonSelectedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonSelectedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonSelectedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonSelectedGlossyNorth' ColorTable.ButtonSelectedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonSelected,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonSelectedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonSelectedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonSelectedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonSelectedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonSelectedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonSelectedGlossyNorth' ColorTable.ButtonSelectedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonSelected,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonSelectedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonSelectedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonSelectedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonSelectedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonSelectedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonSelectedGlossyNorth' ColorTable.ButtonSelectedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonSelected,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonSelectedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonSelectedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonSelectedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonSelectedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonSelectedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonSelectedGlossyNorth' ColorTable.ButtonSelectedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonSelected,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonSelectedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonSelectedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonSelectedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonSelectedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonSelectedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonSelectedGlossyNorth' ColorTable.ButtonSelectedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonSelected,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonSelectedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonSelectedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonSelectedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonSelectedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonSelectedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonSelectedGlossyNorth' ColorTable.ButtonSelectedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonSelected,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonSelectedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonSelectedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonSelectedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonSelectedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonSelectedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonSelectedGlossyNorth' ColorTable.ButtonSelectedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonChecked,The following statement contains a magic number: Rectangle innerR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Bottom - 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonChecked,The following statement contains a magic number: Rectangle innerR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Bottom - 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonChecked,The following statement contains a magic number: Rectangle glossyR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Top + Convert.ToInt32((double)bounds.Height * .36));
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonChecked,The following statement contains a magic number: Rectangle glossyR = Rectangle.FromLTRB(                  bounds.Left + 1'                  bounds.Top + 1'                  bounds.Right - 2'                  bounds.Top + Convert.ToInt32((double)bounds.Height * .36));
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonChecked,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonCheckedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonCheckedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonCheckedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonCheckedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonCheckedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonCheckedGlossyNorth' ColorTable.ButtonCheckedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonChecked,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonCheckedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonCheckedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonCheckedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonCheckedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonCheckedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonCheckedGlossyNorth' ColorTable.ButtonCheckedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonChecked,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonCheckedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonCheckedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonCheckedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonCheckedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonCheckedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonCheckedGlossyNorth' ColorTable.ButtonCheckedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonChecked,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonCheckedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonCheckedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonCheckedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonCheckedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonCheckedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonCheckedGlossyNorth' ColorTable.ButtonCheckedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonChecked,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonCheckedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonCheckedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonCheckedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonCheckedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonCheckedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonCheckedGlossyNorth' ColorTable.ButtonCheckedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonChecked,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonCheckedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonCheckedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonCheckedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonCheckedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonCheckedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonCheckedGlossyNorth' ColorTable.ButtonCheckedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonChecked,The following statement contains a magic number: using (GraphicsPath boundsPath = RoundRectangle(outerR' 3' corners))              {                  using (SolidBrush brus = new SolidBrush(ColorTable.ButtonCheckedBgOut))                  {                      g.FillPath(brus' boundsPath);                  }                    #region Main Bg                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddEllipse(new Rectangle(bounds.Left' bounds.Top' bounds.Width' bounds.Height * 2));                      path.CloseFigure();                      using (PathGradientBrush gradient = new PathGradientBrush(path))                      {                          gradient.WrapMode = WrapMode.Clamp;                          gradient.CenterPoint = new PointF(                              Convert.ToSingle(bounds.Left + bounds.Width / 2)'                              Convert.ToSingle(bounds.Bottom));                          gradient.CenterColor = ColorTable.ButtonCheckedBgCenter;                          gradient.SurroundColors = new Color[] { ColorTable.ButtonCheckedBgOut };                            Blend blend = new Blend(3);                          blend.Factors = new float[] { 0f' 0.8f' 0f };                          blend.Positions = new float[] { 0f' 0.30f' 1f };                              Region lastClip = g.Clip;                          Region newClip = new Region(boundsPath);                          newClip.Intersect(lastClip);                          g.SetClip(newClip.GetBounds(g));                          g.FillPath(gradient' path);                          g.Clip = lastClip;                      }                  }                  #endregion                    //Border                  using (Pen p = new Pen(ColorTable.ButtonCheckedBorderOut))                  {                      g.DrawPath(p' boundsPath);                  }                    //Inner border                  using (GraphicsPath path = RoundRectangle(innerR' 3' corners))                  {                      using (Pen p = new Pen(ColorTable.ButtonCheckedBorderIn))                      {                          g.DrawPath(p' path);                      }                  }                    //Glossy effect                  using (GraphicsPath path = RoundRectangle(glossyR' 3' (corners & Corners.NorthWest) | (corners & Corners.NorthEast)))                  {                      using (LinearGradientBrush b = new LinearGradientBrush(                          glossyR' ColorTable.ButtonCheckedGlossyNorth' ColorTable.ButtonCheckedGlossySouth' 90))                      {                          b.WrapMode = WrapMode.TileFlipXY;                          g.FillPath(b' path);                      }                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawSplitButtonSelected,The following statement contains a magic number: GraphicsPath outer = RoundRectangle(outerR' 3' ddCorners);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawSplitButtonSelected,The following statement contains a magic number: GraphicsPath inner = RoundRectangle(innerR' 2' ddCorners);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawSplitButtonSelected,The following statement contains a magic number: GraphicsPath faceOuter = RoundRectangle(faceOuterR' 3' faceCorners);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawSplitButtonSelected,The following statement contains a magic number: GraphicsPath faceInner = RoundRectangle(faceInnerR' 2' faceCorners);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawSplitButtonSelected,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(Color.FromArgb(150' Color.White)))              {                  e.Graphics.FillPath(b' inner);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawSplitButtonDropDownSelected,The following statement contains a magic number: GraphicsPath outer = RoundRectangle(outerR' 3' ddCorners);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawSplitButtonDropDownSelected,The following statement contains a magic number: GraphicsPath inner = RoundRectangle(innerR' 2' ddCorners);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawSplitButtonDropDownSelected,The following statement contains a magic number: GraphicsPath faceOuter = RoundRectangle(faceOuterR' 3' faceCorners);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawSplitButtonDropDownSelected,The following statement contains a magic number: GraphicsPath faceInner = RoundRectangle(faceInnerR' 2' faceCorners);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawSplitButtonDropDownSelected,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(Color.FromArgb(150' Color.White)))              {                  e.Graphics.FillPath(b' faceInner);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawItemGroup,The following statement contains a magic number: Rectangle glossyR = Rectangle.FromLTRB(                  outerR.Left + 1'                  outerR.Top + outerR.Height / 2 + 1'                  outerR.Right - 1'                  outerR.Bottom - 1);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawItemGroup,The following statement contains a magic number: GraphicsPath outer = RoundRectangle(outerR' 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawItemGroup,The following statement contains a magic number: GraphicsPath inner = RoundRectangle(innerR' 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawItemGroup,The following statement contains a magic number: GraphicsPath glossy = RoundRectangle(glossyR' 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawItemGroup,The following statement contains a magic number: using (LinearGradientBrush b = new LinearGradientBrush(                  innerR' ColorTable.ItemGroupBgNorth' ColorTable.ItemGroupBgSouth' 90))              {                  e.Graphics.FillPath(b' inner);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawItemGroup,The following statement contains a magic number: using (LinearGradientBrush b = new LinearGradientBrush(                  glossyR' ColorTable.ItemGroupBgGlossy' Color.Transparent' 90))              {                  e.Graphics.FillPath(b' glossy);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawItemGroupBorder,The following statement contains a magic number: GraphicsPath outer = RoundRectangle(outerR' 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawItemGroupBorder,The following statement contains a magic number: GraphicsPath inner = RoundRectangle(innerR' 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonList,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(outerR' 3' Corners.East))              {                  Color bgcolor = list.Selected ? ColorTable.ButtonListBgSelected : ColorTable.ButtonListBg;                    if (list.Canvas is RibbonDropDown) bgcolor = ColorTable.DropDownBg;                    using (SolidBrush b = new SolidBrush(bgcolor))                  {                      g.FillPath(b' path);                  }                    using (Pen p = new Pen(ColorTable.ButtonListBorder))                  {                      g.DrawPath(p' path);                  }               }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonList,The following statement contains a magic number: if (list.ScrollType == RibbonButtonList.ListScrollType.Scrollbar && ScrollBarRenderer.IsSupported)              {                                    ScrollBarRenderer.DrawUpperVerticalTrack(g' list.ScrollBarBounds' ScrollBarState.Normal);                    if (list.ThumbPressed)                  {                      ScrollBarRenderer.DrawVerticalThumb(g' list.ThumbBounds' ScrollBarState.Pressed);                      ScrollBarRenderer.DrawVerticalThumbGrip(g' list.ThumbBounds' ScrollBarState.Pressed);                  }                  else if (list.ThumbSelected)                  {                      ScrollBarRenderer.DrawVerticalThumb(g' list.ThumbBounds' ScrollBarState.Hot);                      ScrollBarRenderer.DrawVerticalThumbGrip(g' list.ThumbBounds' ScrollBarState.Hot);                  }                  else                  {                      ScrollBarRenderer.DrawVerticalThumb(g' list.ThumbBounds' ScrollBarState.Normal);                      ScrollBarRenderer.DrawVerticalThumbGrip(g' list.ThumbBounds' ScrollBarState.Normal);                  }                    if (list.ButtonUpPressed)                  {                      ScrollBarRenderer.DrawArrowButton(g' list.ButtonUpBounds' ScrollBarArrowButtonState.UpPressed);                  }                  else if (list.ButtonUpSelected)                  {                      ScrollBarRenderer.DrawArrowButton(g' list.ButtonUpBounds' ScrollBarArrowButtonState.UpHot);                  }                  else                  {                      ScrollBarRenderer.DrawArrowButton(g' list.ButtonUpBounds' ScrollBarArrowButtonState.UpNormal);                  }                    if (list.ButtonDownPressed)                  {                      ScrollBarRenderer.DrawArrowButton(g' list.ButtonDownBounds' ScrollBarArrowButtonState.DownPressed);                  }                  else if (list.ButtonDownSelected)                  {                      ScrollBarRenderer.DrawArrowButton(g' list.ButtonDownBounds' ScrollBarArrowButtonState.DownHot);                  }                  else                  {                      ScrollBarRenderer.DrawArrowButton(g' list.ButtonDownBounds' ScrollBarArrowButtonState.DownNormal);                  }              }              else              {                  #region Control Buttons                    if (list.ScrollType == RibbonButtonList.ListScrollType.Scrollbar)                  {                      using (SolidBrush b = new SolidBrush(ColorTable.ButtonGlossyNorth))                      {                          g.FillRectangle(b' list.ScrollBarBounds);                      }                  }                    if (!list.ButtonDownEnabled)                  {                      DrawButtonDisabled(g' list.ButtonDownBounds' list.ButtonDropDownPresent ? Corners.None : Corners.SouthEast);                  }                  else if (list.ButtonDownPressed)                  {                      DrawButtonPressed(g' list.ButtonDownBounds' list.ButtonDropDownPresent ? Corners.None : Corners.SouthEast);                  }                  else if (list.ButtonDownSelected)                  {                      DrawButtonSelected(g' list.ButtonDownBounds' list.ButtonDropDownPresent ? Corners.None : Corners.SouthEast);                  }                  else                  {                      DrawButton(g' list.ButtonDownBounds' Corners.None);                  }                    if (!list.ButtonUpEnabled)                  {                      DrawButtonDisabled(g' list.ButtonUpBounds' Corners.NorthEast);                  }                  else if (list.ButtonUpPressed)                  {                      DrawButtonPressed(g' list.ButtonUpBounds' Corners.NorthEast);                  }                  else if (list.ButtonUpSelected)                  {                      DrawButtonSelected(g' list.ButtonUpBounds' Corners.NorthEast);                  }                  else                  {                      DrawButton(g' list.ButtonUpBounds' Corners.NorthEast);                  }                    if (list.ButtonDropDownPresent)                  {                      if (list.ButtonDropDownPressed)                      {                          DrawButtonPressed(g' list.ButtonDropDownBounds' Corners.SouthEast);                      }                      else if (list.ButtonDropDownSelected)                      {                          DrawButtonSelected(g' list.ButtonDropDownBounds' Corners.SouthEast);                      }                      else                      {                          DrawButton(g' list.ButtonDropDownBounds' Corners.SouthEast);                      }                  }                    if (list.ScrollType == RibbonButtonList.ListScrollType.Scrollbar && list.ScrollBarEnabled)                  {                      if (list.ThumbPressed)                      {                          DrawButtonPressed(g' list.ThumbBounds' Corners.All);                      }                      else if (list.ThumbSelected)                      {                          DrawButtonSelected(g' list.ThumbBounds' Corners.All);                      }                      else                      {                          DrawButton(g' list.ThumbBounds' Corners.All);                      }                    }                    Color dk = ColorTable.Arrow;                  Color lt = ColorTable.ArrowLight;                  Color ds = ColorTable.ArrowDisabled;                    Rectangle arrUp = CenterOn(list.ButtonUpBounds' new Rectangle(Point.Empty' arrowSize)); arrUp.Offset(0' 1);                  Rectangle arrD = CenterOn(list.ButtonDownBounds' new Rectangle(Point.Empty' arrowSize)); arrD.Offset(0' 1);                  Rectangle arrdd = CenterOn(list.ButtonDropDownBounds' new Rectangle(Point.Empty' arrowSize)); arrdd.Offset(0' 3);                    DrawArrow(g' arrUp' list.ButtonUpEnabled ? lt : Color.Transparent' RibbonArrowDirection.Up); arrUp.Offset(0' -1);                  DrawArrow(g' arrUp' list.ButtonUpEnabled ? dk : ds' RibbonArrowDirection.Up);                    DrawArrow(g' arrD' list.ButtonDownEnabled ? lt : Color.Transparent' RibbonArrowDirection.Down); arrD.Offset(0' -1);                  DrawArrow(g' arrD' list.ButtonDownEnabled ? dk : ds' RibbonArrowDirection.Down);                    if (list.ButtonDropDownPresent)                  {                          using (SolidBrush b = new SolidBrush(ColorTable.Arrow))                      {                          SmoothingMode sm = g.SmoothingMode;                          g.SmoothingMode = SmoothingMode.None;                          g.FillRectangle(b' new Rectangle(new Point(arrdd.Left - 1' arrdd.Top - 4)' new Size(arrowSize.Width + 2' 1)));                          g.SmoothingMode = sm;                      }                        DrawArrow(g' arrdd' lt' RibbonArrowDirection.Down); arrdd.Offset(0' -1);                      DrawArrow(g' arrdd' dk' RibbonArrowDirection.Down);                  }                  #endregion              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonList,The following statement contains a magic number: if (list.ScrollType == RibbonButtonList.ListScrollType.Scrollbar && ScrollBarRenderer.IsSupported)              {                                    ScrollBarRenderer.DrawUpperVerticalTrack(g' list.ScrollBarBounds' ScrollBarState.Normal);                    if (list.ThumbPressed)                  {                      ScrollBarRenderer.DrawVerticalThumb(g' list.ThumbBounds' ScrollBarState.Pressed);                      ScrollBarRenderer.DrawVerticalThumbGrip(g' list.ThumbBounds' ScrollBarState.Pressed);                  }                  else if (list.ThumbSelected)                  {                      ScrollBarRenderer.DrawVerticalThumb(g' list.ThumbBounds' ScrollBarState.Hot);                      ScrollBarRenderer.DrawVerticalThumbGrip(g' list.ThumbBounds' ScrollBarState.Hot);                  }                  else                  {                      ScrollBarRenderer.DrawVerticalThumb(g' list.ThumbBounds' ScrollBarState.Normal);                      ScrollBarRenderer.DrawVerticalThumbGrip(g' list.ThumbBounds' ScrollBarState.Normal);                  }                    if (list.ButtonUpPressed)                  {                      ScrollBarRenderer.DrawArrowButton(g' list.ButtonUpBounds' ScrollBarArrowButtonState.UpPressed);                  }                  else if (list.ButtonUpSelected)                  {                      ScrollBarRenderer.DrawArrowButton(g' list.ButtonUpBounds' ScrollBarArrowButtonState.UpHot);                  }                  else                  {                      ScrollBarRenderer.DrawArrowButton(g' list.ButtonUpBounds' ScrollBarArrowButtonState.UpNormal);                  }                    if (list.ButtonDownPressed)                  {                      ScrollBarRenderer.DrawArrowButton(g' list.ButtonDownBounds' ScrollBarArrowButtonState.DownPressed);                  }                  else if (list.ButtonDownSelected)                  {                      ScrollBarRenderer.DrawArrowButton(g' list.ButtonDownBounds' ScrollBarArrowButtonState.DownHot);                  }                  else                  {                      ScrollBarRenderer.DrawArrowButton(g' list.ButtonDownBounds' ScrollBarArrowButtonState.DownNormal);                  }              }              else              {                  #region Control Buttons                    if (list.ScrollType == RibbonButtonList.ListScrollType.Scrollbar)                  {                      using (SolidBrush b = new SolidBrush(ColorTable.ButtonGlossyNorth))                      {                          g.FillRectangle(b' list.ScrollBarBounds);                      }                  }                    if (!list.ButtonDownEnabled)                  {                      DrawButtonDisabled(g' list.ButtonDownBounds' list.ButtonDropDownPresent ? Corners.None : Corners.SouthEast);                  }                  else if (list.ButtonDownPressed)                  {                      DrawButtonPressed(g' list.ButtonDownBounds' list.ButtonDropDownPresent ? Corners.None : Corners.SouthEast);                  }                  else if (list.ButtonDownSelected)                  {                      DrawButtonSelected(g' list.ButtonDownBounds' list.ButtonDropDownPresent ? Corners.None : Corners.SouthEast);                  }                  else                  {                      DrawButton(g' list.ButtonDownBounds' Corners.None);                  }                    if (!list.ButtonUpEnabled)                  {                      DrawButtonDisabled(g' list.ButtonUpBounds' Corners.NorthEast);                  }                  else if (list.ButtonUpPressed)                  {                      DrawButtonPressed(g' list.ButtonUpBounds' Corners.NorthEast);                  }                  else if (list.ButtonUpSelected)                  {                      DrawButtonSelected(g' list.ButtonUpBounds' Corners.NorthEast);                  }                  else                  {                      DrawButton(g' list.ButtonUpBounds' Corners.NorthEast);                  }                    if (list.ButtonDropDownPresent)                  {                      if (list.ButtonDropDownPressed)                      {                          DrawButtonPressed(g' list.ButtonDropDownBounds' Corners.SouthEast);                      }                      else if (list.ButtonDropDownSelected)                      {                          DrawButtonSelected(g' list.ButtonDropDownBounds' Corners.SouthEast);                      }                      else                      {                          DrawButton(g' list.ButtonDropDownBounds' Corners.SouthEast);                      }                  }                    if (list.ScrollType == RibbonButtonList.ListScrollType.Scrollbar && list.ScrollBarEnabled)                  {                      if (list.ThumbPressed)                      {                          DrawButtonPressed(g' list.ThumbBounds' Corners.All);                      }                      else if (list.ThumbSelected)                      {                          DrawButtonSelected(g' list.ThumbBounds' Corners.All);                      }                      else                      {                          DrawButton(g' list.ThumbBounds' Corners.All);                      }                    }                    Color dk = ColorTable.Arrow;                  Color lt = ColorTable.ArrowLight;                  Color ds = ColorTable.ArrowDisabled;                    Rectangle arrUp = CenterOn(list.ButtonUpBounds' new Rectangle(Point.Empty' arrowSize)); arrUp.Offset(0' 1);                  Rectangle arrD = CenterOn(list.ButtonDownBounds' new Rectangle(Point.Empty' arrowSize)); arrD.Offset(0' 1);                  Rectangle arrdd = CenterOn(list.ButtonDropDownBounds' new Rectangle(Point.Empty' arrowSize)); arrdd.Offset(0' 3);                    DrawArrow(g' arrUp' list.ButtonUpEnabled ? lt : Color.Transparent' RibbonArrowDirection.Up); arrUp.Offset(0' -1);                  DrawArrow(g' arrUp' list.ButtonUpEnabled ? dk : ds' RibbonArrowDirection.Up);                    DrawArrow(g' arrD' list.ButtonDownEnabled ? lt : Color.Transparent' RibbonArrowDirection.Down); arrD.Offset(0' -1);                  DrawArrow(g' arrD' list.ButtonDownEnabled ? dk : ds' RibbonArrowDirection.Down);                    if (list.ButtonDropDownPresent)                  {                          using (SolidBrush b = new SolidBrush(ColorTable.Arrow))                      {                          SmoothingMode sm = g.SmoothingMode;                          g.SmoothingMode = SmoothingMode.None;                          g.FillRectangle(b' new Rectangle(new Point(arrdd.Left - 1' arrdd.Top - 4)' new Size(arrowSize.Width + 2' 1)));                          g.SmoothingMode = sm;                      }                        DrawArrow(g' arrdd' lt' RibbonArrowDirection.Down); arrdd.Offset(0' -1);                      DrawArrow(g' arrdd' dk' RibbonArrowDirection.Down);                  }                  #endregion              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawButtonList,The following statement contains a magic number: if (list.ScrollType == RibbonButtonList.ListScrollType.Scrollbar && ScrollBarRenderer.IsSupported)              {                                    ScrollBarRenderer.DrawUpperVerticalTrack(g' list.ScrollBarBounds' ScrollBarState.Normal);                    if (list.ThumbPressed)                  {                      ScrollBarRenderer.DrawVerticalThumb(g' list.ThumbBounds' ScrollBarState.Pressed);                      ScrollBarRenderer.DrawVerticalThumbGrip(g' list.ThumbBounds' ScrollBarState.Pressed);                  }                  else if (list.ThumbSelected)                  {                      ScrollBarRenderer.DrawVerticalThumb(g' list.ThumbBounds' ScrollBarState.Hot);                      ScrollBarRenderer.DrawVerticalThumbGrip(g' list.ThumbBounds' ScrollBarState.Hot);                  }                  else                  {                      ScrollBarRenderer.DrawVerticalThumb(g' list.ThumbBounds' ScrollBarState.Normal);                      ScrollBarRenderer.DrawVerticalThumbGrip(g' list.ThumbBounds' ScrollBarState.Normal);                  }                    if (list.ButtonUpPressed)                  {                      ScrollBarRenderer.DrawArrowButton(g' list.ButtonUpBounds' ScrollBarArrowButtonState.UpPressed);                  }                  else if (list.ButtonUpSelected)                  {                      ScrollBarRenderer.DrawArrowButton(g' list.ButtonUpBounds' ScrollBarArrowButtonState.UpHot);                  }                  else                  {                      ScrollBarRenderer.DrawArrowButton(g' list.ButtonUpBounds' ScrollBarArrowButtonState.UpNormal);                  }                    if (list.ButtonDownPressed)                  {                      ScrollBarRenderer.DrawArrowButton(g' list.ButtonDownBounds' ScrollBarArrowButtonState.DownPressed);                  }                  else if (list.ButtonDownSelected)                  {                      ScrollBarRenderer.DrawArrowButton(g' list.ButtonDownBounds' ScrollBarArrowButtonState.DownHot);                  }                  else                  {                      ScrollBarRenderer.DrawArrowButton(g' list.ButtonDownBounds' ScrollBarArrowButtonState.DownNormal);                  }              }              else              {                  #region Control Buttons                    if (list.ScrollType == RibbonButtonList.ListScrollType.Scrollbar)                  {                      using (SolidBrush b = new SolidBrush(ColorTable.ButtonGlossyNorth))                      {                          g.FillRectangle(b' list.ScrollBarBounds);                      }                  }                    if (!list.ButtonDownEnabled)                  {                      DrawButtonDisabled(g' list.ButtonDownBounds' list.ButtonDropDownPresent ? Corners.None : Corners.SouthEast);                  }                  else if (list.ButtonDownPressed)                  {                      DrawButtonPressed(g' list.ButtonDownBounds' list.ButtonDropDownPresent ? Corners.None : Corners.SouthEast);                  }                  else if (list.ButtonDownSelected)                  {                      DrawButtonSelected(g' list.ButtonDownBounds' list.ButtonDropDownPresent ? Corners.None : Corners.SouthEast);                  }                  else                  {                      DrawButton(g' list.ButtonDownBounds' Corners.None);                  }                    if (!list.ButtonUpEnabled)                  {                      DrawButtonDisabled(g' list.ButtonUpBounds' Corners.NorthEast);                  }                  else if (list.ButtonUpPressed)                  {                      DrawButtonPressed(g' list.ButtonUpBounds' Corners.NorthEast);                  }                  else if (list.ButtonUpSelected)                  {                      DrawButtonSelected(g' list.ButtonUpBounds' Corners.NorthEast);                  }                  else                  {                      DrawButton(g' list.ButtonUpBounds' Corners.NorthEast);                  }                    if (list.ButtonDropDownPresent)                  {                      if (list.ButtonDropDownPressed)                      {                          DrawButtonPressed(g' list.ButtonDropDownBounds' Corners.SouthEast);                      }                      else if (list.ButtonDropDownSelected)                      {                          DrawButtonSelected(g' list.ButtonDropDownBounds' Corners.SouthEast);                      }                      else                      {                          DrawButton(g' list.ButtonDropDownBounds' Corners.SouthEast);                      }                  }                    if (list.ScrollType == RibbonButtonList.ListScrollType.Scrollbar && list.ScrollBarEnabled)                  {                      if (list.ThumbPressed)                      {                          DrawButtonPressed(g' list.ThumbBounds' Corners.All);                      }                      else if (list.ThumbSelected)                      {                          DrawButtonSelected(g' list.ThumbBounds' Corners.All);                      }                      else                      {                          DrawButton(g' list.ThumbBounds' Corners.All);                      }                    }                    Color dk = ColorTable.Arrow;                  Color lt = ColorTable.ArrowLight;                  Color ds = ColorTable.ArrowDisabled;                    Rectangle arrUp = CenterOn(list.ButtonUpBounds' new Rectangle(Point.Empty' arrowSize)); arrUp.Offset(0' 1);                  Rectangle arrD = CenterOn(list.ButtonDownBounds' new Rectangle(Point.Empty' arrowSize)); arrD.Offset(0' 1);                  Rectangle arrdd = CenterOn(list.ButtonDropDownBounds' new Rectangle(Point.Empty' arrowSize)); arrdd.Offset(0' 3);                    DrawArrow(g' arrUp' list.ButtonUpEnabled ? lt : Color.Transparent' RibbonArrowDirection.Up); arrUp.Offset(0' -1);                  DrawArrow(g' arrUp' list.ButtonUpEnabled ? dk : ds' RibbonArrowDirection.Up);                    DrawArrow(g' arrD' list.ButtonDownEnabled ? lt : Color.Transparent' RibbonArrowDirection.Down); arrD.Offset(0' -1);                  DrawArrow(g' arrD' list.ButtonDownEnabled ? dk : ds' RibbonArrowDirection.Down);                    if (list.ButtonDropDownPresent)                  {                          using (SolidBrush b = new SolidBrush(ColorTable.Arrow))                      {                          SmoothingMode sm = g.SmoothingMode;                          g.SmoothingMode = SmoothingMode.None;                          g.FillRectangle(b' new Rectangle(new Point(arrdd.Left - 1' arrdd.Top - 4)' new Size(arrowSize.Width + 2' 1)));                          g.SmoothingMode = sm;                      }                        DrawArrow(g' arrdd' lt' RibbonArrowDirection.Down); arrdd.Offset(0' -1);                      DrawArrow(g' arrdd' dk' RibbonArrowDirection.Down);                  }                  #endregion              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawSeparator,The following statement contains a magic number: if (separator.SizeMode == RibbonElementSizeMode.DropDown)              {                  if (!string.IsNullOrEmpty(separator.Text))                  {                      using (SolidBrush b = new SolidBrush(ColorTable.SeparatorBg))                      {                          g.FillRectangle(b' separator.Bounds);                      }                        using (Pen p = new Pen(ColorTable.SeparatorLine))                      {                          g.DrawLine(p'                              new Point(separator.Bounds.Left' separator.Bounds.Bottom)'                              new Point(separator.Bounds.Right' separator.Bounds.Bottom));                      }                  }                  else                  {                      using (Pen p = new Pen(ColorTable.DropDownImageSeparator))                      {                          g.DrawLine(p'                              new Point(separator.Bounds.Left + 30' separator.Bounds.Top + 1)'                              new Point(separator.Bounds.Right' separator.Bounds.Top + 1));                      }                  }              }              else              {                  using (Pen p = new Pen(ColorTable.SeparatorDark))                  {                      g.DrawLine(p'                          new Point(separator.Bounds.Left' separator.Bounds.Top)'                          new Point(separator.Bounds.Left' separator.Bounds.Bottom));                  }                    using (Pen p = new Pen(ColorTable.SeparatorLight))                  {                      g.DrawLine(p'                          new Point(separator.Bounds.Left + 1' separator.Bounds.Top)'                          new Point(separator.Bounds.Left + 1' separator.Bounds.Bottom));                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawTextBoxSelected,The following statement contains a magic number: using (GraphicsPath path = RoundRectangle(bounds' 3))              {                  using (SolidBrush b = new SolidBrush(SystemColors.Window))                  {                      //g.FillPath(b' path);                      g.FillRectangle(b' bounds);                  }                    using (Pen p = new Pen(ColorTable.TextBoxBorder))                  {                      //g.DrawPath(p' path);                      g.DrawRectangle(p' bounds);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawCaptionBarBackground,The following statement contains a magic number: Rectangle r1 = new Rectangle(r.Left' r.Top' r.Width' 4);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawCaptionBarBackground,The following statement contains a magic number: Rectangle r2 = new Rectangle(r.Left' r1.Bottom' r.Width' 4);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawCaptionBarBackground,The following statement contains a magic number: Rectangle r3 = new Rectangle(r.Left' r2.Bottom' r.Width' r.Height - 8);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawCaptionBarBackground,The following statement contains a magic number: for (int i = 0; i < rects.Length; i++)              {                  Rectangle grect = rects[i]; grect.Height += 2; grect.Y -= 1;                  using (LinearGradientBrush b = new LinearGradientBrush(grect' colors[i' 0]' colors[i' 1]' 90))                  {                      g.FillRectangle(b' rects[i]);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawCaptionBarBackground,The following statement contains a magic number: for (int i = 0; i < rects.Length; i++)              {                  Rectangle grect = rects[i]; grect.Height += 2; grect.Y -= 1;                  using (LinearGradientBrush b = new LinearGradientBrush(grect' colors[i' 0]' colors[i' 1]' 90))                  {                      g.FillRectangle(b' rects[i]);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawCaptionBarText,The following statement contains a magic number: if (e.Ribbon.ActualBorderMode == RibbonWindowMode.NonClientAreaGlass)              {                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddString(f.Text' ft.FontFamily' (int)ft.Style' ft.SizeInPoints + 3' captionBar' sf);                        if (f.WindowState != FormWindowState.Maximized)                      {                          using (Pen p = new Pen(Color.FromArgb(90' Color.White)' 4))                          {                              e.Graphics.DrawPath(p' path);                          }                      }                        e.Graphics.FillPath(f.WindowState == FormWindowState.Maximized ? Brushes.White : Brushes.Black' path);                  }              }              else if (e.Ribbon.ActualBorderMode == RibbonWindowMode.NonClientAreaCustomDrawn)              {                  TextRenderer.DrawText(e.Graphics' f.Text' ft' captionBar' ColorTable.FormBorder);                                }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawCaptionBarText,The following statement contains a magic number: if (e.Ribbon.ActualBorderMode == RibbonWindowMode.NonClientAreaGlass)              {                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddString(f.Text' ft.FontFamily' (int)ft.Style' ft.SizeInPoints + 3' captionBar' sf);                        if (f.WindowState != FormWindowState.Maximized)                      {                          using (Pen p = new Pen(Color.FromArgb(90' Color.White)' 4))                          {                              e.Graphics.DrawPath(p' path);                          }                      }                        e.Graphics.FillPath(f.WindowState == FormWindowState.Maximized ? Brushes.White : Brushes.Black' path);                  }              }              else if (e.Ribbon.ActualBorderMode == RibbonWindowMode.NonClientAreaCustomDrawn)              {                  TextRenderer.DrawText(e.Graphics' f.Text' ft' captionBar' ColorTable.FormBorder);                                }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawCaptionBarText,The following statement contains a magic number: if (e.Ribbon.ActualBorderMode == RibbonWindowMode.NonClientAreaGlass)              {                  using (GraphicsPath path = new GraphicsPath())                  {                      path.AddString(f.Text' ft.FontFamily' (int)ft.Style' ft.SizeInPoints + 3' captionBar' sf);                        if (f.WindowState != FormWindowState.Maximized)                      {                          using (Pen p = new Pen(Color.FromArgb(90' Color.White)' 4))                          {                              e.Graphics.DrawPath(p' path);                          }                      }                        e.Graphics.FillPath(f.WindowState == FormWindowState.Maximized ? Brushes.White : Brushes.Black' path);                  }              }              else if (e.Ribbon.ActualBorderMode == RibbonWindowMode.NonClientAreaCustomDrawn)              {                  TextRenderer.DrawText(e.Graphics' f.Text' ft' captionBar' ColorTable.FormBorder);                                }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderRibbonQuickAccessToolbarBackground,The following statement contains a magic number: Point z = new Point(c.X - 2' a.Y + bounds.Height / 2 - 1);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderRibbonQuickAccessToolbarBackground,The following statement contains a magic number: Point z = new Point(c.X - 2' a.Y + bounds.Height / 2 - 1);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderRibbonQuickAccessToolbarBackground,The following statement contains a magic number: if (!aero)              {                  using (Pen p = new Pen(ColorTable.QuickAccessBorderLight' 3))                  {                      using (GraphicsPath path = CreateQuickAccessPath(a' b' c' d' z' bounds' 0' 0' e.Ribbon))                      {                          e.Graphics.DrawPath(p' path);                      }                  }               }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderRibbonQuickAccessToolbarBackground,The following statement contains a magic number: using (GraphicsPath path = CreateQuickAccessPath(a' b' c' d' z' bounds' 0' 0' e.Ribbon))              {                                    using (Pen p = new Pen(ColorTable.QuickAccessBorderDark))                  {                      if (aero) p.Color = Color.FromArgb(150' 150' 150) ;                      e.Graphics.DrawPath(p' path);                  }                      if (!aero)                  {                      using (LinearGradientBrush br = new LinearGradientBrush(                                              b' d' Color.FromArgb(150' ColorTable.QuickAccessUpper)' Color.FromArgb(150' ColorTable.QuickAccessLower)                                              ))                      {                          e.Graphics.FillPath(br' path);                      }                  }                  else                  {                      using (LinearGradientBrush br = new LinearGradientBrush(                          b' d'                           Color.FromArgb(66' RibbonProfesionalRendererColorTable.ToGray(ColorTable.QuickAccessUpper))'                           Color.FromArgb(66' RibbonProfesionalRendererColorTable.ToGray(ColorTable.QuickAccessLower))                          ))                      {                          e.Graphics.FillPath(br' path);                      }                  }                }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderRibbonQuickAccessToolbarBackground,The following statement contains a magic number: using (GraphicsPath path = CreateQuickAccessPath(a' b' c' d' z' bounds' 0' 0' e.Ribbon))              {                                    using (Pen p = new Pen(ColorTable.QuickAccessBorderDark))                  {                      if (aero) p.Color = Color.FromArgb(150' 150' 150) ;                      e.Graphics.DrawPath(p' path);                  }                      if (!aero)                  {                      using (LinearGradientBrush br = new LinearGradientBrush(                                              b' d' Color.FromArgb(150' ColorTable.QuickAccessUpper)' Color.FromArgb(150' ColorTable.QuickAccessLower)                                              ))                      {                          e.Graphics.FillPath(br' path);                      }                  }                  else                  {                      using (LinearGradientBrush br = new LinearGradientBrush(                          b' d'                           Color.FromArgb(66' RibbonProfesionalRendererColorTable.ToGray(ColorTable.QuickAccessUpper))'                           Color.FromArgb(66' RibbonProfesionalRendererColorTable.ToGray(ColorTable.QuickAccessLower))                          ))                      {                          e.Graphics.FillPath(br' path);                      }                  }                }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderRibbonQuickAccessToolbarBackground,The following statement contains a magic number: using (GraphicsPath path = CreateQuickAccessPath(a' b' c' d' z' bounds' 0' 0' e.Ribbon))              {                                    using (Pen p = new Pen(ColorTable.QuickAccessBorderDark))                  {                      if (aero) p.Color = Color.FromArgb(150' 150' 150) ;                      e.Graphics.DrawPath(p' path);                  }                      if (!aero)                  {                      using (LinearGradientBrush br = new LinearGradientBrush(                                              b' d' Color.FromArgb(150' ColorTable.QuickAccessUpper)' Color.FromArgb(150' ColorTable.QuickAccessLower)                                              ))                      {                          e.Graphics.FillPath(br' path);                      }                  }                  else                  {                      using (LinearGradientBrush br = new LinearGradientBrush(                          b' d'                           Color.FromArgb(66' RibbonProfesionalRendererColorTable.ToGray(ColorTable.QuickAccessUpper))'                           Color.FromArgb(66' RibbonProfesionalRendererColorTable.ToGray(ColorTable.QuickAccessLower))                          ))                      {                          e.Graphics.FillPath(br' path);                      }                  }                }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderRibbonQuickAccessToolbarBackground,The following statement contains a magic number: using (GraphicsPath path = CreateQuickAccessPath(a' b' c' d' z' bounds' 0' 0' e.Ribbon))              {                                    using (Pen p = new Pen(ColorTable.QuickAccessBorderDark))                  {                      if (aero) p.Color = Color.FromArgb(150' 150' 150) ;                      e.Graphics.DrawPath(p' path);                  }                      if (!aero)                  {                      using (LinearGradientBrush br = new LinearGradientBrush(                                              b' d' Color.FromArgb(150' ColorTable.QuickAccessUpper)' Color.FromArgb(150' ColorTable.QuickAccessLower)                                              ))                      {                          e.Graphics.FillPath(br' path);                      }                  }                  else                  {                      using (LinearGradientBrush br = new LinearGradientBrush(                          b' d'                           Color.FromArgb(66' RibbonProfesionalRendererColorTable.ToGray(ColorTable.QuickAccessUpper))'                           Color.FromArgb(66' RibbonProfesionalRendererColorTable.ToGray(ColorTable.QuickAccessLower))                          ))                      {                          e.Graphics.FillPath(br' path);                      }                  }                }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderRibbonQuickAccessToolbarBackground,The following statement contains a magic number: using (GraphicsPath path = CreateQuickAccessPath(a' b' c' d' z' bounds' 0' 0' e.Ribbon))              {                                    using (Pen p = new Pen(ColorTable.QuickAccessBorderDark))                  {                      if (aero) p.Color = Color.FromArgb(150' 150' 150) ;                      e.Graphics.DrawPath(p' path);                  }                      if (!aero)                  {                      using (LinearGradientBrush br = new LinearGradientBrush(                                              b' d' Color.FromArgb(150' ColorTable.QuickAccessUpper)' Color.FromArgb(150' ColorTable.QuickAccessLower)                                              ))                      {                          e.Graphics.FillPath(br' path);                      }                  }                  else                  {                      using (LinearGradientBrush br = new LinearGradientBrush(                          b' d'                           Color.FromArgb(66' RibbonProfesionalRendererColorTable.ToGray(ColorTable.QuickAccessUpper))'                           Color.FromArgb(66' RibbonProfesionalRendererColorTable.ToGray(ColorTable.QuickAccessLower))                          ))                      {                          e.Graphics.FillPath(br' path);                      }                  }                }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderRibbonQuickAccessToolbarBackground,The following statement contains a magic number: using (GraphicsPath path = CreateQuickAccessPath(a' b' c' d' z' bounds' 0' 0' e.Ribbon))              {                                    using (Pen p = new Pen(ColorTable.QuickAccessBorderDark))                  {                      if (aero) p.Color = Color.FromArgb(150' 150' 150) ;                      e.Graphics.DrawPath(p' path);                  }                      if (!aero)                  {                      using (LinearGradientBrush br = new LinearGradientBrush(                                              b' d' Color.FromArgb(150' ColorTable.QuickAccessUpper)' Color.FromArgb(150' ColorTable.QuickAccessLower)                                              ))                      {                          e.Graphics.FillPath(br' path);                      }                  }                  else                  {                      using (LinearGradientBrush br = new LinearGradientBrush(                          b' d'                           Color.FromArgb(66' RibbonProfesionalRendererColorTable.ToGray(ColorTable.QuickAccessUpper))'                           Color.FromArgb(66' RibbonProfesionalRendererColorTable.ToGray(ColorTable.QuickAccessLower))                          ))                      {                          e.Graphics.FillPath(br' path);                      }                  }                }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderRibbonQuickAccessToolbarBackground,The following statement contains a magic number: using (GraphicsPath path = CreateQuickAccessPath(a' b' c' d' z' bounds' 0' 0' e.Ribbon))              {                                    using (Pen p = new Pen(ColorTable.QuickAccessBorderDark))                  {                      if (aero) p.Color = Color.FromArgb(150' 150' 150) ;                      e.Graphics.DrawPath(p' path);                  }                      if (!aero)                  {                      using (LinearGradientBrush br = new LinearGradientBrush(                                              b' d' Color.FromArgb(150' ColorTable.QuickAccessUpper)' Color.FromArgb(150' ColorTable.QuickAccessLower)                                              ))                      {                          e.Graphics.FillPath(br' path);                      }                  }                  else                  {                      using (LinearGradientBrush br = new LinearGradientBrush(                          b' d'                           Color.FromArgb(66' RibbonProfesionalRendererColorTable.ToGray(ColorTable.QuickAccessUpper))'                           Color.FromArgb(66' RibbonProfesionalRendererColorTable.ToGray(ColorTable.QuickAccessLower))                          ))                      {                          e.Graphics.FillPath(br' path);                      }                  }                }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateQuickAccessPath,The following statement contains a magic number: path.AddArc(new Rectangle(b.X - bounds.Height / 2' b.Y' bounds.Height' bounds.Height)' -90' 180);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateQuickAccessPath,The following statement contains a magic number: path.AddArc(new Rectangle(b.X - bounds.Height / 2' b.Y' bounds.Height' bounds.Height)' -90' 180);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateQuickAccessPath,The following statement contains a magic number: path.AddArc(new Rectangle(b.X - bounds.Height / 2' b.Y' bounds.Height' bounds.Height)' -90' 180);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateQuickAccessPath,The following statement contains a magic number: if (ribbon.OrbVisible)              {                  path.AddCurve(new Point[] { c' e' a });              }              else              {                  path.AddArc(new Rectangle(a.X - bounds.Height / 2' a.Y' bounds.Height' bounds.Height)' 90' 180);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateQuickAccessPath,The following statement contains a magic number: if (ribbon.OrbVisible)              {                  path.AddCurve(new Point[] { c' e' a });              }              else              {                  path.AddArc(new Rectangle(a.X - bounds.Height / 2' a.Y' bounds.Height' bounds.Height)' 90' 180);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,CreateQuickAccessPath,The following statement contains a magic number: if (ribbon.OrbVisible)              {                  path.AddCurve(new Point[] { c' e' a });              }              else              {                  path.AddArc(new Rectangle(a.X - bounds.Height / 2' a.Y' bounds.Height' bounds.Height)' 90' 180);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: shadow.Inflate(2' 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: shadow.Inflate(2' 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p =  new GraphicsPath())              {                  p.AddEllipse(shadow);                    using (PathGradientBrush gradient = new PathGradientBrush(p))                  {                      gradient.WrapMode = WrapMode.Clamp;                      gradient.CenterPoint = new PointF(shadow.Left + shadow.Width / 2' shadow.Top + shadow.Height / 2);                      gradient.CenterColor = Color.FromArgb(180' Color.Black);                      gradient.SurroundColors = new Color[] { Color.Transparent };                        Blend blend = new Blend(3);                      blend.Factors = new float[] { 0f' 1f' 1f };                      blend.Positions = new float[] { 0' 0.2f' 1f };                      gradient.Blend = blend;                        g.FillPath(gradient' p);                  }                }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p =  new GraphicsPath())              {                  p.AddEllipse(shadow);                    using (PathGradientBrush gradient = new PathGradientBrush(p))                  {                      gradient.WrapMode = WrapMode.Clamp;                      gradient.CenterPoint = new PointF(shadow.Left + shadow.Width / 2' shadow.Top + shadow.Height / 2);                      gradient.CenterColor = Color.FromArgb(180' Color.Black);                      gradient.SurroundColors = new Color[] { Color.Transparent };                        Blend blend = new Blend(3);                      blend.Factors = new float[] { 0f' 1f' 1f };                      blend.Positions = new float[] { 0' 0.2f' 1f };                      gradient.Blend = blend;                        g.FillPath(gradient' p);                  }                }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p =  new GraphicsPath())              {                  p.AddEllipse(shadow);                    using (PathGradientBrush gradient = new PathGradientBrush(p))                  {                      gradient.WrapMode = WrapMode.Clamp;                      gradient.CenterPoint = new PointF(shadow.Left + shadow.Width / 2' shadow.Top + shadow.Height / 2);                      gradient.CenterColor = Color.FromArgb(180' Color.Black);                      gradient.SurroundColors = new Color[] { Color.Transparent };                        Blend blend = new Blend(3);                      blend.Factors = new float[] { 0f' 1f' 1f };                      blend.Positions = new float[] { 0' 0.2f' 1f };                      gradient.Blend = blend;                        g.FillPath(gradient' p);                  }                }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p =  new GraphicsPath())              {                  p.AddEllipse(shadow);                    using (PathGradientBrush gradient = new PathGradientBrush(p))                  {                      gradient.WrapMode = WrapMode.Clamp;                      gradient.CenterPoint = new PointF(shadow.Left + shadow.Width / 2' shadow.Top + shadow.Height / 2);                      gradient.CenterColor = Color.FromArgb(180' Color.Black);                      gradient.SurroundColors = new Color[] { Color.Transparent };                        Blend blend = new Blend(3);                      blend.Factors = new float[] { 0f' 1f' 1f };                      blend.Positions = new float[] { 0' 0.2f' 1f };                      gradient.Blend = blend;                        g.FillPath(gradient' p);                  }                }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  p.AddEllipse(r);                  using (PathGradientBrush gradient = new PathGradientBrush(p))                  {                      gradient.WrapMode = WrapMode.Clamp;                      gradient.CenterPoint = new PointF(Convert.ToSingle(r.Left + r.Width / 2)' Convert.ToSingle(r.Bottom));                      gradient.CenterColor = bglight;                      gradient.SurroundColors = new Color[] { bgmed };                        Blend blend = new Blend(3);                      blend.Factors = new float[] { 0f' .8f' 1f };                      blend.Positions = new float[] { 0' 0.50f' 1f };                      gradient.Blend = blend;                                                                  g.FillPath(gradient' p);                  }               }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  p.AddEllipse(r);                  using (PathGradientBrush gradient = new PathGradientBrush(p))                  {                      gradient.WrapMode = WrapMode.Clamp;                      gradient.CenterPoint = new PointF(Convert.ToSingle(r.Left + r.Width / 2)' Convert.ToSingle(r.Bottom));                      gradient.CenterColor = bglight;                      gradient.SurroundColors = new Color[] { bgmed };                        Blend blend = new Blend(3);                      blend.Factors = new float[] { 0f' .8f' 1f };                      blend.Positions = new float[] { 0' 0.50f' 1f };                      gradient.Blend = blend;                                                                  g.FillPath(gradient' p);                  }               }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: Rectangle bshine = new Rectangle(0' 0' r.Width / 2' r.Height / 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: Rectangle bshine = new Rectangle(0' 0' r.Width / 2' r.Height / 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: bshine.X = r.X + (r.Width - bshine.Width) / 2;
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: bshine.Y = r.Y + r.Height / 2;
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  p.AddEllipse(bshine);                    using (PathGradientBrush gradient = new PathGradientBrush(p))                  {                      gradient.WrapMode = WrapMode.Clamp;                      gradient.CenterPoint = new PointF(Convert.ToSingle(r.Left + r.Width / 2)' Convert.ToSingle(r.Bottom));                      gradient.CenterColor = Color.White;                      gradient.SurroundColors = new Color[] { Color.Transparent };                        g.FillPath(gradient' p);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  sweep = 160;                  start = 180 + (180 - sweep) / 2;                  p.AddArc(rinner' start' sweep);                    p1 = Point.Round(p.PathData.Points[0]);                  p2 = Point.Round(p.PathData.Points[p.PathData.Points.Length - 1]);                  p3 = new Point(rinner.Left + rinner.Width / 2' p2.Y - 3);                  p.AddCurve(new Point[] { p2' p3' p1 });                    using (PathGradientBrush gradient = new PathGradientBrush(p))                  {                      gradient.WrapMode = WrapMode.Clamp;                      gradient.CenterPoint = p3;                      gradient.CenterColor = Color.Transparent;                      gradient.SurroundColors = new Color[] { light };                        Blend blend = new Blend(3);                      blend.Factors = new float[] { .3f' .8f' 1f };                      blend.Positions = new float[] { 0' 0.50f' 1f };                      gradient.Blend = blend;                        g.FillPath(gradient' p);                  }                    using (LinearGradientBrush b = new LinearGradientBrush(new Point(r.Left' r.Top)' new Point(r.Left' p1.Y)' Color.White' Color.Transparent))                  {                      Blend blend = new Blend(4);                      blend.Factors = new float[] { 0f' .4f' .8f' 1f };                      blend.Positions = new float[] { 0f' .3f' .4f' 1f };                      b.Blend = blend;                      g.FillPath(b' p);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  sweep = 160;                  start = 180 + (180 - sweep) / 2;                  p.AddArc(rinner' start' sweep);                    p1 = Point.Round(p.PathData.Points[0]);                  p2 = Point.Round(p.PathData.Points[p.PathData.Points.Length - 1]);                  p3 = new Point(rinner.Left + rinner.Width / 2' p2.Y - 3);                  p.AddCurve(new Point[] { p2' p3' p1 });                    using (PathGradientBrush gradient = new PathGradientBrush(p))                  {                      gradient.WrapMode = WrapMode.Clamp;                      gradient.CenterPoint = p3;                      gradient.CenterColor = Color.Transparent;                      gradient.SurroundColors = new Color[] { light };                        Blend blend = new Blend(3);                      blend.Factors = new float[] { .3f' .8f' 1f };                      blend.Positions = new float[] { 0' 0.50f' 1f };                      gradient.Blend = blend;                        g.FillPath(gradient' p);                  }                    using (LinearGradientBrush b = new LinearGradientBrush(new Point(r.Left' r.Top)' new Point(r.Left' p1.Y)' Color.White' Color.Transparent))                  {                      Blend blend = new Blend(4);                      blend.Factors = new float[] { 0f' .4f' .8f' 1f };                      blend.Positions = new float[] { 0f' .3f' .4f' 1f };                      b.Blend = blend;                      g.FillPath(b' p);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  sweep = 160;                  start = 180 + (180 - sweep) / 2;                  p.AddArc(rinner' start' sweep);                    p1 = Point.Round(p.PathData.Points[0]);                  p2 = Point.Round(p.PathData.Points[p.PathData.Points.Length - 1]);                  p3 = new Point(rinner.Left + rinner.Width / 2' p2.Y - 3);                  p.AddCurve(new Point[] { p2' p3' p1 });                    using (PathGradientBrush gradient = new PathGradientBrush(p))                  {                      gradient.WrapMode = WrapMode.Clamp;                      gradient.CenterPoint = p3;                      gradient.CenterColor = Color.Transparent;                      gradient.SurroundColors = new Color[] { light };                        Blend blend = new Blend(3);                      blend.Factors = new float[] { .3f' .8f' 1f };                      blend.Positions = new float[] { 0' 0.50f' 1f };                      gradient.Blend = blend;                        g.FillPath(gradient' p);                  }                    using (LinearGradientBrush b = new LinearGradientBrush(new Point(r.Left' r.Top)' new Point(r.Left' p1.Y)' Color.White' Color.Transparent))                  {                      Blend blend = new Blend(4);                      blend.Factors = new float[] { 0f' .4f' .8f' 1f };                      blend.Positions = new float[] { 0f' .3f' .4f' 1f };                      b.Blend = blend;                      g.FillPath(b' p);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  sweep = 160;                  start = 180 + (180 - sweep) / 2;                  p.AddArc(rinner' start' sweep);                    p1 = Point.Round(p.PathData.Points[0]);                  p2 = Point.Round(p.PathData.Points[p.PathData.Points.Length - 1]);                  p3 = new Point(rinner.Left + rinner.Width / 2' p2.Y - 3);                  p.AddCurve(new Point[] { p2' p3' p1 });                    using (PathGradientBrush gradient = new PathGradientBrush(p))                  {                      gradient.WrapMode = WrapMode.Clamp;                      gradient.CenterPoint = p3;                      gradient.CenterColor = Color.Transparent;                      gradient.SurroundColors = new Color[] { light };                        Blend blend = new Blend(3);                      blend.Factors = new float[] { .3f' .8f' 1f };                      blend.Positions = new float[] { 0' 0.50f' 1f };                      gradient.Blend = blend;                        g.FillPath(gradient' p);                  }                    using (LinearGradientBrush b = new LinearGradientBrush(new Point(r.Left' r.Top)' new Point(r.Left' p1.Y)' Color.White' Color.Transparent))                  {                      Blend blend = new Blend(4);                      blend.Factors = new float[] { 0f' .4f' .8f' 1f };                      blend.Positions = new float[] { 0f' .3f' .4f' 1f };                      b.Blend = blend;                      g.FillPath(b' p);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  sweep = 160;                  start = 180 + (180 - sweep) / 2;                  p.AddArc(rinner' start' sweep);                    p1 = Point.Round(p.PathData.Points[0]);                  p2 = Point.Round(p.PathData.Points[p.PathData.Points.Length - 1]);                  p3 = new Point(rinner.Left + rinner.Width / 2' p2.Y - 3);                  p.AddCurve(new Point[] { p2' p3' p1 });                    using (PathGradientBrush gradient = new PathGradientBrush(p))                  {                      gradient.WrapMode = WrapMode.Clamp;                      gradient.CenterPoint = p3;                      gradient.CenterColor = Color.Transparent;                      gradient.SurroundColors = new Color[] { light };                        Blend blend = new Blend(3);                      blend.Factors = new float[] { .3f' .8f' 1f };                      blend.Positions = new float[] { 0' 0.50f' 1f };                      gradient.Blend = blend;                        g.FillPath(gradient' p);                  }                    using (LinearGradientBrush b = new LinearGradientBrush(new Point(r.Left' r.Top)' new Point(r.Left' p1.Y)' Color.White' Color.Transparent))                  {                      Blend blend = new Blend(4);                      blend.Factors = new float[] { 0f' .4f' .8f' 1f };                      blend.Positions = new float[] { 0f' .3f' .4f' 1f };                      b.Blend = blend;                      g.FillPath(b' p);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  sweep = 160;                  start = 180 + (180 - sweep) / 2;                  p.AddArc(rinner' start' sweep);                    p1 = Point.Round(p.PathData.Points[0]);                  p2 = Point.Round(p.PathData.Points[p.PathData.Points.Length - 1]);                  p3 = new Point(rinner.Left + rinner.Width / 2' p2.Y - 3);                  p.AddCurve(new Point[] { p2' p3' p1 });                    using (PathGradientBrush gradient = new PathGradientBrush(p))                  {                      gradient.WrapMode = WrapMode.Clamp;                      gradient.CenterPoint = p3;                      gradient.CenterColor = Color.Transparent;                      gradient.SurroundColors = new Color[] { light };                        Blend blend = new Blend(3);                      blend.Factors = new float[] { .3f' .8f' 1f };                      blend.Positions = new float[] { 0' 0.50f' 1f };                      gradient.Blend = blend;                        g.FillPath(gradient' p);                  }                    using (LinearGradientBrush b = new LinearGradientBrush(new Point(r.Left' r.Top)' new Point(r.Left' p1.Y)' Color.White' Color.Transparent))                  {                      Blend blend = new Blend(4);                      blend.Factors = new float[] { 0f' .4f' .8f' 1f };                      blend.Positions = new float[] { 0f' .3f' .4f' 1f };                      b.Blend = blend;                      g.FillPath(b' p);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  sweep = 160;                  start = 180 + (180 - sweep) / 2;                  p.AddArc(rinner' start' sweep);                    p1 = Point.Round(p.PathData.Points[0]);                  p2 = Point.Round(p.PathData.Points[p.PathData.Points.Length - 1]);                  p3 = new Point(rinner.Left + rinner.Width / 2' p2.Y - 3);                  p.AddCurve(new Point[] { p2' p3' p1 });                    using (PathGradientBrush gradient = new PathGradientBrush(p))                  {                      gradient.WrapMode = WrapMode.Clamp;                      gradient.CenterPoint = p3;                      gradient.CenterColor = Color.Transparent;                      gradient.SurroundColors = new Color[] { light };                        Blend blend = new Blend(3);                      blend.Factors = new float[] { .3f' .8f' 1f };                      blend.Positions = new float[] { 0' 0.50f' 1f };                      gradient.Blend = blend;                        g.FillPath(gradient' p);                  }                    using (LinearGradientBrush b = new LinearGradientBrush(new Point(r.Left' r.Top)' new Point(r.Left' p1.Y)' Color.White' Color.Transparent))                  {                      Blend blend = new Blend(4);                      blend.Factors = new float[] { 0f' .4f' .8f' 1f };                      blend.Positions = new float[] { 0f' .3f' .4f' 1f };                      b.Blend = blend;                      g.FillPath(b' p);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  sweep = 160;                  start = 180 + (180 - sweep) / 2;                  p.AddArc(rinner' start' sweep);                    p1 = Point.Round(p.PathData.Points[0]);                  p2 = Point.Round(p.PathData.Points[p.PathData.Points.Length - 1]);                  p3 = new Point(rinner.Left + rinner.Width / 2' p2.Y - 3);                  p.AddCurve(new Point[] { p2' p3' p1 });                    using (PathGradientBrush gradient = new PathGradientBrush(p))                  {                      gradient.WrapMode = WrapMode.Clamp;                      gradient.CenterPoint = p3;                      gradient.CenterColor = Color.Transparent;                      gradient.SurroundColors = new Color[] { light };                        Blend blend = new Blend(3);                      blend.Factors = new float[] { .3f' .8f' 1f };                      blend.Positions = new float[] { 0' 0.50f' 1f };                      gradient.Blend = blend;                        g.FillPath(gradient' p);                  }                    using (LinearGradientBrush b = new LinearGradientBrush(new Point(r.Left' r.Top)' new Point(r.Left' p1.Y)' Color.White' Color.Transparent))                  {                      Blend blend = new Blend(4);                      blend.Factors = new float[] { 0f' .4f' .8f' 1f };                      blend.Positions = new float[] { 0f' .3f' .4f' 1f };                      b.Blend = blend;                      g.FillPath(b' p);                  }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  sweep = 160;                  start = 180 + (180 - sweep) / 2;                  p.AddArc(rinner' start' sweep);                    using (Pen pen = new Pen(Color.White))                  {                      g.DrawPath(pen' p);                   }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  sweep = 160;                  start = 180 + (180 - sweep) / 2;                  p.AddArc(rinner' start' sweep);                    using (Pen pen = new Pen(Color.White))                  {                      g.DrawPath(pen' p);                   }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  sweep = 160;                  start = 180 + (180 - sweep) / 2;                  p.AddArc(rinner' start' sweep);                    using (Pen pen = new Pen(Color.White))                  {                      g.DrawPath(pen' p);                   }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  sweep = 160;                  start = 180 + (180 - sweep) / 2;                  p.AddArc(rinner' start' sweep);                    using (Pen pen = new Pen(Color.White))                  {                      g.DrawPath(pen' p);                   }              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  sweep = 160;                  start = (180 - sweep) / 2;                  p.AddArc(rinner' start' sweep);                  Point pt = Point.Round(p.PathData.Points[0]);                    Rectangle rrinner = rinner; rrinner.Inflate(-1' -1);                  sweep = 160;                  start = (180 - sweep) / 2;                  p.AddArc(rrinner' start' sweep);                    using (LinearGradientBrush b = new LinearGradientBrush(                      new Point(rinner.Left' rinner.Bottom)'                      new Point(rinner.Left' pt.Y - 1)'                      light' Color.FromArgb(50' light)))                  {                      g.FillPath(b' p);                  }                    //p1 = Point.Round(p.PathData.Points[0]);                  //p2 = Point.Round(p.PathData.Points[p.PathData.Points.Length - 1]);                  //p3 = new Point(rinner.Left + rinner.Width / 2' rinner.Bottom - 1);                  //p.AddCurve(new Point[] { p2' p3' p1 });                    //using (LinearGradientBrush b = new LinearGradientBrush(                  //    new Point(rinner.Left' rinner.Bottom + 1)'                  //    new Point(rinner.Left' p1.Y)'                  //    Color.FromArgb(200' Color.White)' Color.Transparent))                  //{                  //    g.FillPath(b' p);                  //}              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  sweep = 160;                  start = (180 - sweep) / 2;                  p.AddArc(rinner' start' sweep);                  Point pt = Point.Round(p.PathData.Points[0]);                    Rectangle rrinner = rinner; rrinner.Inflate(-1' -1);                  sweep = 160;                  start = (180 - sweep) / 2;                  p.AddArc(rrinner' start' sweep);                    using (LinearGradientBrush b = new LinearGradientBrush(                      new Point(rinner.Left' rinner.Bottom)'                      new Point(rinner.Left' pt.Y - 1)'                      light' Color.FromArgb(50' light)))                  {                      g.FillPath(b' p);                  }                    //p1 = Point.Round(p.PathData.Points[0]);                  //p2 = Point.Round(p.PathData.Points[p.PathData.Points.Length - 1]);                  //p3 = new Point(rinner.Left + rinner.Width / 2' rinner.Bottom - 1);                  //p.AddCurve(new Point[] { p2' p3' p1 });                    //using (LinearGradientBrush b = new LinearGradientBrush(                  //    new Point(rinner.Left' rinner.Bottom + 1)'                  //    new Point(rinner.Left' p1.Y)'                  //    Color.FromArgb(200' Color.White)' Color.Transparent))                  //{                  //    g.FillPath(b' p);                  //}              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  sweep = 160;                  start = (180 - sweep) / 2;                  p.AddArc(rinner' start' sweep);                  Point pt = Point.Round(p.PathData.Points[0]);                    Rectangle rrinner = rinner; rrinner.Inflate(-1' -1);                  sweep = 160;                  start = (180 - sweep) / 2;                  p.AddArc(rrinner' start' sweep);                    using (LinearGradientBrush b = new LinearGradientBrush(                      new Point(rinner.Left' rinner.Bottom)'                      new Point(rinner.Left' pt.Y - 1)'                      light' Color.FromArgb(50' light)))                  {                      g.FillPath(b' p);                  }                    //p1 = Point.Round(p.PathData.Points[0]);                  //p2 = Point.Round(p.PathData.Points[p.PathData.Points.Length - 1]);                  //p3 = new Point(rinner.Left + rinner.Width / 2' rinner.Bottom - 1);                  //p.AddCurve(new Point[] { p2' p3' p1 });                    //using (LinearGradientBrush b = new LinearGradientBrush(                  //    new Point(rinner.Left' rinner.Bottom + 1)'                  //    new Point(rinner.Left' p1.Y)'                  //    Color.FromArgb(200' Color.White)' Color.Transparent))                  //{                  //    g.FillPath(b' p);                  //}              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  sweep = 160;                  start = (180 - sweep) / 2;                  p.AddArc(rinner' start' sweep);                  Point pt = Point.Round(p.PathData.Points[0]);                    Rectangle rrinner = rinner; rrinner.Inflate(-1' -1);                  sweep = 160;                  start = (180 - sweep) / 2;                  p.AddArc(rrinner' start' sweep);                    using (LinearGradientBrush b = new LinearGradientBrush(                      new Point(rinner.Left' rinner.Bottom)'                      new Point(rinner.Left' pt.Y - 1)'                      light' Color.FromArgb(50' light)))                  {                      g.FillPath(b' p);                  }                    //p1 = Point.Round(p.PathData.Points[0]);                  //p2 = Point.Round(p.PathData.Points[p.PathData.Points.Length - 1]);                  //p3 = new Point(rinner.Left + rinner.Width / 2' rinner.Bottom - 1);                  //p.AddCurve(new Point[] { p2' p3' p1 });                    //using (LinearGradientBrush b = new LinearGradientBrush(                  //    new Point(rinner.Left' rinner.Bottom + 1)'                  //    new Point(rinner.Left' p1.Y)'                  //    Color.FromArgb(200' Color.White)' Color.Transparent))                  //{                  //    g.FillPath(b' p);                  //}              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  sweep = 160;                  start = (180 - sweep) / 2;                  p.AddArc(rinner' start' sweep);                  Point pt = Point.Round(p.PathData.Points[0]);                    Rectangle rrinner = rinner; rrinner.Inflate(-1' -1);                  sweep = 160;                  start = (180 - sweep) / 2;                  p.AddArc(rrinner' start' sweep);                    using (LinearGradientBrush b = new LinearGradientBrush(                      new Point(rinner.Left' rinner.Bottom)'                      new Point(rinner.Left' pt.Y - 1)'                      light' Color.FromArgb(50' light)))                  {                      g.FillPath(b' p);                  }                    //p1 = Point.Round(p.PathData.Points[0]);                  //p2 = Point.Round(p.PathData.Points[p.PathData.Points.Length - 1]);                  //p3 = new Point(rinner.Left + rinner.Width / 2' rinner.Bottom - 1);                  //p.AddCurve(new Point[] { p2' p3' p1 });                    //using (LinearGradientBrush b = new LinearGradientBrush(                  //    new Point(rinner.Left' rinner.Bottom + 1)'                  //    new Point(rinner.Left' p1.Y)'                  //    Color.FromArgb(200' Color.White)' Color.Transparent))                  //{                  //    g.FillPath(b' p);                  //}              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  sweep = 160;                  start = (180 - sweep) / 2;                  p.AddArc(rinner' start' sweep);                  Point pt = Point.Round(p.PathData.Points[0]);                    Rectangle rrinner = rinner; rrinner.Inflate(-1' -1);                  sweep = 160;                  start = (180 - sweep) / 2;                  p.AddArc(rrinner' start' sweep);                    using (LinearGradientBrush b = new LinearGradientBrush(                      new Point(rinner.Left' rinner.Bottom)'                      new Point(rinner.Left' pt.Y - 1)'                      light' Color.FromArgb(50' light)))                  {                      g.FillPath(b' p);                  }                    //p1 = Point.Round(p.PathData.Points[0]);                  //p2 = Point.Round(p.PathData.Points[p.PathData.Points.Length - 1]);                  //p3 = new Point(rinner.Left + rinner.Width / 2' rinner.Bottom - 1);                  //p.AddCurve(new Point[] { p2' p3' p1 });                    //using (LinearGradientBrush b = new LinearGradientBrush(                  //    new Point(rinner.Left' rinner.Bottom + 1)'                  //    new Point(rinner.Left' p1.Y)'                  //    Color.FromArgb(200' Color.White)' Color.Transparent))                  //{                  //    g.FillPath(b' p);                  //}              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: using (GraphicsPath p = new GraphicsPath())              {                  sweep = 160;                  start = (180 - sweep) / 2;                  p.AddArc(rinner' start' sweep);                  Point pt = Point.Round(p.PathData.Points[0]);                    Rectangle rrinner = rinner; rrinner.Inflate(-1' -1);                  sweep = 160;                  start = (180 - sweep) / 2;                  p.AddArc(rrinner' start' sweep);                    using (LinearGradientBrush b = new LinearGradientBrush(                      new Point(rinner.Left' rinner.Bottom)'                      new Point(rinner.Left' pt.Y - 1)'                      light' Color.FromArgb(50' light)))                  {                      g.FillPath(b' p);                  }                    //p1 = Point.Round(p.PathData.Points[0]);                  //p2 = Point.Round(p.PathData.Points[p.PathData.Points.Length - 1]);                  //p3 = new Point(rinner.Left + rinner.Width / 2' rinner.Bottom - 1);                  //p.AddCurve(new Point[] { p2' p3' p1 });                    //using (LinearGradientBrush b = new LinearGradientBrush(                  //    new Point(rinner.Left' rinner.Bottom + 1)'                  //    new Point(rinner.Left' p1.Y)'                  //    Color.FromArgb(200' Color.White)' Color.Transparent))                  //{                  //    g.FillPath(b' p);                  //}              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: if (image != null)              {                  Rectangle irect = new Rectangle(Point.Empty' image.Size);                  irect.X = r.X + (r.Width - irect.Width) / 2;                  irect.Y = r.Y + (r.Height - irect.Height) / 2;                  g.DrawImage(image' irect);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,DrawOrb,The following statement contains a magic number: if (image != null)              {                  Rectangle irect = new Rectangle(Point.Empty' image.Size);                  irect.X = r.X + (r.Width - irect.Width) / 2;                  irect.Y = r.Y + (r.Height - irect.Height) / 2;                  g.DrawImage(image' irect);              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderOrbDropDownBackground,The following statement contains a magic number: Rectangle InnerRect = new Rectangle(1' 1' Width - 3' Height - 3);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderOrbDropDownBackground,The following statement contains a magic number: Rectangle InnerRect = new Rectangle(1' 1' Width - 3' Height - 3);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderOrbDropDownBackground,The following statement contains a magic number: Rectangle NorthNorthRect = new Rectangle(1' 1' Width - 3' OrbDDContent.Top / 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderOrbDropDownBackground,The following statement contains a magic number: Rectangle NorthNorthRect = new Rectangle(1' 1' Width - 3' OrbDDContent.Top / 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderOrbDropDownBackground,The following statement contains a magic number: Rectangle northSouthRect = new Rectangle(1' NorthNorthRect.Bottom' NorthNorthRect.Width' OrbDDContent.Top / 2);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderOrbDropDownBackground,The following statement contains a magic number: Rectangle southSouthRect = Rectangle.FromLTRB(1'                  (Height - OrbDDContent.Bottom) / 2 + OrbDDContent.Bottom' Width - 1' Height - 1);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderOrbDropDownBackground,The following statement contains a magic number: GraphicsPath innerPath = RoundRectangle(InnerRect' 6);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderOrbDropDownBackground,The following statement contains a magic number: GraphicsPath outerPath = RoundRectangle(OuterRect' 6);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderOrbDropDownBackground,The following statement contains a magic number: using (Brush b = new SolidBrush(Color.FromArgb(0x8e' 0x8e' 0x8e)))              {                  e.Graphics.FillRectangle(b' new Rectangle(Width - 10' Height - 10' 10' 10));              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderOrbDropDownBackground,The following statement contains a magic number: using (Brush b = new SolidBrush(Color.FromArgb(0x8e' 0x8e' 0x8e)))              {                  e.Graphics.FillRectangle(b' new Rectangle(Width - 10' Height - 10' 10' 10));              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderOrbDropDownBackground,The following statement contains a magic number: using (Brush b = new SolidBrush(Color.FromArgb(0x8e' 0x8e' 0x8e)))              {                  e.Graphics.FillRectangle(b' new Rectangle(Width - 10' Height - 10' 10' 10));              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderOrbDropDownBackground,The following statement contains a magic number: using (Brush b = new SolidBrush(Color.FromArgb(0x8e' 0x8e' 0x8e)))              {                  e.Graphics.FillRectangle(b' new Rectangle(Width - 10' Height - 10' 10' 10));              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderPanelPopupBackground,The following statement contains a magic number: GraphicsPath dark = RoundRectangle(darkBorder' 3);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderPanelPopupBackground,The following statement contains a magic number: GraphicsPath light = RoundRectangle(lightBorder' 3);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderPanelPopupBackground,The following statement contains a magic number: GraphicsPath txt = RoundRectangle(textArea' 3' Corners.SouthEast | Corners.SouthWest);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderDropDownBackground,The following statement contains a magic number: Rectangle imgsR = new Rectangle(0' 0' 26' e.Bounds.Height);
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderDropDownBackground,The following statement contains a magic number: if (dd.ShowSizingGrip)              {                  Rectangle gripArea = Rectangle.FromLTRB(                      e.Bounds.Left + 1'                      e.Bounds.Bottom - dd.SizingGripHeight'                      e.Bounds.Right - 1'                      e.Bounds.Bottom - 1);                                    using (LinearGradientBrush b = new LinearGradientBrush(                      gripArea' ColorTable.DropDownGripNorth' ColorTable.DropDownGripSouth' 90))                  {                      e.Graphics.FillRectangle(b' gripArea);                  }                    using (Pen p = new Pen(ColorTable.DropDownGripBorder))                  {                      e.Graphics.DrawLine(p'                          gripArea.Location'                          new Point(gripArea.Right - 1' gripArea.Top));                  }                    DrawGripDot(e.Graphics' new Point(gripArea.Right - 7' gripArea.Bottom - 3));                  DrawGripDot(e.Graphics' new Point(gripArea.Right - 3' gripArea.Bottom - 7));                  DrawGripDot(e.Graphics' new Point(gripArea.Right - 3' gripArea.Bottom - 3));              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderDropDownBackground,The following statement contains a magic number: if (dd.ShowSizingGrip)              {                  Rectangle gripArea = Rectangle.FromLTRB(                      e.Bounds.Left + 1'                      e.Bounds.Bottom - dd.SizingGripHeight'                      e.Bounds.Right - 1'                      e.Bounds.Bottom - 1);                                    using (LinearGradientBrush b = new LinearGradientBrush(                      gripArea' ColorTable.DropDownGripNorth' ColorTable.DropDownGripSouth' 90))                  {                      e.Graphics.FillRectangle(b' gripArea);                  }                    using (Pen p = new Pen(ColorTable.DropDownGripBorder))                  {                      e.Graphics.DrawLine(p'                          gripArea.Location'                          new Point(gripArea.Right - 1' gripArea.Top));                  }                    DrawGripDot(e.Graphics' new Point(gripArea.Right - 7' gripArea.Bottom - 3));                  DrawGripDot(e.Graphics' new Point(gripArea.Right - 3' gripArea.Bottom - 7));                  DrawGripDot(e.Graphics' new Point(gripArea.Right - 3' gripArea.Bottom - 3));              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderDropDownBackground,The following statement contains a magic number: if (dd.ShowSizingGrip)              {                  Rectangle gripArea = Rectangle.FromLTRB(                      e.Bounds.Left + 1'                      e.Bounds.Bottom - dd.SizingGripHeight'                      e.Bounds.Right - 1'                      e.Bounds.Bottom - 1);                                    using (LinearGradientBrush b = new LinearGradientBrush(                      gripArea' ColorTable.DropDownGripNorth' ColorTable.DropDownGripSouth' 90))                  {                      e.Graphics.FillRectangle(b' gripArea);                  }                    using (Pen p = new Pen(ColorTable.DropDownGripBorder))                  {                      e.Graphics.DrawLine(p'                          gripArea.Location'                          new Point(gripArea.Right - 1' gripArea.Top));                  }                    DrawGripDot(e.Graphics' new Point(gripArea.Right - 7' gripArea.Bottom - 3));                  DrawGripDot(e.Graphics' new Point(gripArea.Right - 3' gripArea.Bottom - 7));                  DrawGripDot(e.Graphics' new Point(gripArea.Right - 3' gripArea.Bottom - 3));              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderDropDownBackground,The following statement contains a magic number: if (dd.ShowSizingGrip)              {                  Rectangle gripArea = Rectangle.FromLTRB(                      e.Bounds.Left + 1'                      e.Bounds.Bottom - dd.SizingGripHeight'                      e.Bounds.Right - 1'                      e.Bounds.Bottom - 1);                                    using (LinearGradientBrush b = new LinearGradientBrush(                      gripArea' ColorTable.DropDownGripNorth' ColorTable.DropDownGripSouth' 90))                  {                      e.Graphics.FillRectangle(b' gripArea);                  }                    using (Pen p = new Pen(ColorTable.DropDownGripBorder))                  {                      e.Graphics.DrawLine(p'                          gripArea.Location'                          new Point(gripArea.Right - 1' gripArea.Top));                  }                    DrawGripDot(e.Graphics' new Point(gripArea.Right - 7' gripArea.Bottom - 3));                  DrawGripDot(e.Graphics' new Point(gripArea.Right - 3' gripArea.Bottom - 7));                  DrawGripDot(e.Graphics' new Point(gripArea.Right - 3' gripArea.Bottom - 3));              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderDropDownBackground,The following statement contains a magic number: if (dd.ShowSizingGrip)              {                  Rectangle gripArea = Rectangle.FromLTRB(                      e.Bounds.Left + 1'                      e.Bounds.Bottom - dd.SizingGripHeight'                      e.Bounds.Right - 1'                      e.Bounds.Bottom - 1);                                    using (LinearGradientBrush b = new LinearGradientBrush(                      gripArea' ColorTable.DropDownGripNorth' ColorTable.DropDownGripSouth' 90))                  {                      e.Graphics.FillRectangle(b' gripArea);                  }                    using (Pen p = new Pen(ColorTable.DropDownGripBorder))                  {                      e.Graphics.DrawLine(p'                          gripArea.Location'                          new Point(gripArea.Right - 1' gripArea.Top));                  }                    DrawGripDot(e.Graphics' new Point(gripArea.Right - 7' gripArea.Bottom - 3));                  DrawGripDot(e.Graphics' new Point(gripArea.Right - 3' gripArea.Bottom - 7));                  DrawGripDot(e.Graphics' new Point(gripArea.Right - 3' gripArea.Bottom - 3));              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderDropDownBackground,The following statement contains a magic number: if (dd.ShowSizingGrip)              {                  Rectangle gripArea = Rectangle.FromLTRB(                      e.Bounds.Left + 1'                      e.Bounds.Bottom - dd.SizingGripHeight'                      e.Bounds.Right - 1'                      e.Bounds.Bottom - 1);                                    using (LinearGradientBrush b = new LinearGradientBrush(                      gripArea' ColorTable.DropDownGripNorth' ColorTable.DropDownGripSouth' 90))                  {                      e.Graphics.FillRectangle(b' gripArea);                  }                    using (Pen p = new Pen(ColorTable.DropDownGripBorder))                  {                      e.Graphics.DrawLine(p'                          gripArea.Location'                          new Point(gripArea.Right - 1' gripArea.Top));                  }                    DrawGripDot(e.Graphics' new Point(gripArea.Right - 7' gripArea.Bottom - 3));                  DrawGripDot(e.Graphics' new Point(gripArea.Right - 3' gripArea.Bottom - 7));                  DrawGripDot(e.Graphics' new Point(gripArea.Right - 3' gripArea.Bottom - 3));              }
Magic Number,System.Windows.Forms,RibbonProfessionalRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonProfessionalRenderer.cs,OnRenderDropDownBackground,The following statement contains a magic number: if (dd.ShowSizingGrip)              {                  Rectangle gripArea = Rectangle.FromLTRB(                      e.Bounds.Left + 1'                      e.Bounds.Bottom - dd.SizingGripHeight'                      e.Bounds.Right - 1'                      e.Bounds.Bottom - 1);                                    using (LinearGradientBrush b = new LinearGradientBrush(                      gripArea' ColorTable.DropDownGripNorth' ColorTable.DropDownGripSouth' 90))                  {                      e.Graphics.FillRectangle(b' gripArea);                  }                    using (Pen p = new Pen(ColorTable.DropDownGripBorder))                  {                      e.Graphics.DrawLine(p'                          gripArea.Location'                          new Point(gripArea.Right - 1' gripArea.Top));                  }                    DrawGripDot(e.Graphics' new Point(gripArea.Right - 7' gripArea.Bottom - 3));                  DrawGripDot(e.Graphics' new Point(gripArea.Right - 3' gripArea.Bottom - 7));                  DrawGripDot(e.Graphics' new Point(gripArea.Right - 3' gripArea.Bottom - 3));              }
Magic Number,System.Windows.Forms,RibbonQuickAccessToolbar,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonQuickAccessToolbar.cs,RibbonQuickAccessToolbar,The following statement contains a magic number: _margin = new Padding(9);
Magic Number,System.Windows.Forms,RibbonQuickAccessToolbar,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonQuickAccessToolbar.cs,RibbonQuickAccessToolbar,The following statement contains a magic number: _padding = new Padding(3' 0' 0' 0);
Magic Number,System.Windows.Forms,RibbonQuickAccessToolbar,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonQuickAccessToolbar.cs,CreateDropDownButtonImage,The following statement contains a magic number: Bitmap bmp = new Bitmap(7' 7);
Magic Number,System.Windows.Forms,RibbonQuickAccessToolbar,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonQuickAccessToolbar.cs,CreateDropDownButtonImage,The following statement contains a magic number: Bitmap bmp = new Bitmap(7' 7);
Magic Number,System.Windows.Forms,RibbonQuickAccessToolbar,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonQuickAccessToolbar.cs,DrawDropDownButtonArrow,The following statement contains a magic number: using (Pen p = new Pen(c))              {                  using (SolidBrush b = new SolidBrush(c))                  {                                                g.DrawLine(p' x' y' x + 4' y);                          g.FillPolygon(b' new Point[] {                               new Point(x' y + 3)'                              new Point(x + 5' y + 3)'                              new Point(x + 2' y + 6)                          });                     }              }
Magic Number,System.Windows.Forms,RibbonQuickAccessToolbar,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonQuickAccessToolbar.cs,DrawDropDownButtonArrow,The following statement contains a magic number: using (Pen p = new Pen(c))              {                  using (SolidBrush b = new SolidBrush(c))                  {                                                g.DrawLine(p' x' y' x + 4' y);                          g.FillPolygon(b' new Point[] {                               new Point(x' y + 3)'                              new Point(x + 5' y + 3)'                              new Point(x + 2' y + 6)                          });                     }              }
Magic Number,System.Windows.Forms,RibbonQuickAccessToolbar,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonQuickAccessToolbar.cs,DrawDropDownButtonArrow,The following statement contains a magic number: using (Pen p = new Pen(c))              {                  using (SolidBrush b = new SolidBrush(c))                  {                                                g.DrawLine(p' x' y' x + 4' y);                          g.FillPolygon(b' new Point[] {                               new Point(x' y + 3)'                              new Point(x + 5' y + 3)'                              new Point(x + 2' y + 6)                          });                     }              }
Magic Number,System.Windows.Forms,RibbonQuickAccessToolbar,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonQuickAccessToolbar.cs,DrawDropDownButtonArrow,The following statement contains a magic number: using (Pen p = new Pen(c))              {                  using (SolidBrush b = new SolidBrush(c))                  {                                                g.DrawLine(p' x' y' x + 4' y);                          g.FillPolygon(b' new Point[] {                               new Point(x' y + 3)'                              new Point(x + 5' y + 3)'                              new Point(x + 2' y + 6)                          });                     }              }
Magic Number,System.Windows.Forms,RibbonQuickAccessToolbar,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonQuickAccessToolbar.cs,DrawDropDownButtonArrow,The following statement contains a magic number: using (Pen p = new Pen(c))              {                  using (SolidBrush b = new SolidBrush(c))                  {                                                g.DrawLine(p' x' y' x + 4' y);                          g.FillPolygon(b' new Point[] {                               new Point(x' y + 3)'                              new Point(x + 5' y + 3)'                              new Point(x + 2' y + 6)                          });                     }              }
Magic Number,System.Windows.Forms,RibbonQuickAccessToolbar,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonQuickAccessToolbar.cs,DrawDropDownButtonArrow,The following statement contains a magic number: using (Pen p = new Pen(c))              {                  using (SolidBrush b = new SolidBrush(c))                  {                                                g.DrawLine(p' x' y' x + 4' y);                          g.FillPolygon(b' new Point[] {                               new Point(x' y + 3)'                              new Point(x + 5' y + 3)'                              new Point(x + 2' y + 6)                          });                     }              }
Magic Number,System.Windows.Forms,RibbonQuickAccessToolbar,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonQuickAccessToolbar.cs,MeasureSize,The following statement contains a magic number: int maxHeight = 16;
Magic Number,System.Windows.Forms,RibbonQuickAccessToolbar,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonQuickAccessToolbar.cs,MeasureSize,The following statement contains a magic number: if (Site != null && Site.DesignMode) widthSum += 16;
Magic Number,System.Windows.Forms,RibbonQuickAccessToolbar,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonQuickAccessToolbar.cs,SetBounds,The following statement contains a magic number: DropDownButton.SetBounds(new Rectangle(bounds.Right + bounds.Height / 2 + 2' bounds.Top' 12' bounds.Height));
Magic Number,System.Windows.Forms,RibbonQuickAccessToolbar,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonQuickAccessToolbar.cs,SetBounds,The following statement contains a magic number: DropDownButton.SetBounds(new Rectangle(bounds.Right + bounds.Height / 2 + 2' bounds.Top' 12' bounds.Height));
Magic Number,System.Windows.Forms,RibbonQuickAccessToolbar,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonQuickAccessToolbar.cs,SetBounds,The following statement contains a magic number: DropDownButton.SetBounds(new Rectangle(bounds.Right + bounds.Height / 2 + 2' bounds.Top' 12' bounds.Height));
Magic Number,System.Windows.Forms,RibbonQuickAccessToolbarGlyph,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonQuickAccessToolbarGlyph.cs,Paint,The following statement contains a magic number: using (SolidBrush b = new SolidBrush(Color.FromArgb(50'Color.Blue)))              {                  pe.Graphics.FillEllipse(b' Bounds);               }
Magic Number,System.Windows.Forms,RibbonRenderer,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonRenderer.cs,MultiplyColorMatrix,The following statement contains a magic number: int num = 5;
Magic Number,System.Windows.Forms,RibbonSeparator,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonSeparator.cs,MeasureSize,The following statement contains a magic number: if (e.SizeMode == RibbonElementSizeMode.DropDown)                  {                      if (string.IsNullOrEmpty(Text))                      {                          SetLastMeasuredSize(new Size(1' 3));                      }                      else                      {                          Size sz = e.Graphics.MeasureString(Text' new Font(Owner.Font' FontStyle.Bold)).ToSize();                          SetLastMeasuredSize(new Size(sz.Width + Owner.ItemMargin.Horizontal' sz.Height + Owner.ItemMargin.Vertical));                      }                  }                  else                  {                      SetLastMeasuredSize( new Size(2' OwnerPanel.ContentBounds.Height - Owner.ItemPadding.Vertical - Owner.ItemMargin.Vertical));                  }
Magic Number,System.Windows.Forms,RibbonSeparator,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonSeparator.cs,MeasureSize,The following statement contains a magic number: if (e.SizeMode == RibbonElementSizeMode.DropDown)                  {                      if (string.IsNullOrEmpty(Text))                      {                          SetLastMeasuredSize(new Size(1' 3));                      }                      else                      {                          Size sz = e.Graphics.MeasureString(Text' new Font(Owner.Font' FontStyle.Bold)).ToSize();                          SetLastMeasuredSize(new Size(sz.Width + Owner.ItemMargin.Horizontal' sz.Height + Owner.ItemMargin.Vertical));                      }                  }                  else                  {                      SetLastMeasuredSize( new Size(2' OwnerPanel.ContentBounds.Height - Owner.ItemPadding.Vertical - Owner.ItemMargin.Vertical));                  }
Magic Number,System.Windows.Forms,RibbonTab,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTab.cs,UpdateScrollBounds,The following statement contains a magic number: int w = 13;
Magic Number,System.Windows.Forms,RibbonTab,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTab.cs,ScrollLeft,The following statement contains a magic number: ScrollOffset(50);
Magic Number,System.Windows.Forms,RibbonTab,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTab.cs,ScrollRight,The following statement contains a magic number: ScrollOffset(-50);
Magic Number,System.Windows.Forms,RibbonTabGlyph,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTabGlyph.cs,RibbonTabGlyph,The following statement contains a magic number: size = new Size(60' 16);
Magic Number,System.Windows.Forms,RibbonTabGlyph,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTabGlyph.cs,RibbonTabGlyph,The following statement contains a magic number: size = new Size(60' 16);
Magic Number,System.Windows.Forms,RibbonTabGlyph,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTabGlyph.cs,Paint,The following statement contains a magic number: using (GraphicsPath p = RibbonProfessionalRenderer.RoundRectangle(Bounds' 2))              {                  using (SolidBrush b = new SolidBrush(Color.FromArgb(50' Color.Blue)))                  {                      pe.Graphics.FillPath(b' p);                  }               }
Magic Number,System.Windows.Forms,RibbonTabGlyph,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTabGlyph.cs,Paint,The following statement contains a magic number: using (GraphicsPath p = RibbonProfessionalRenderer.RoundRectangle(Bounds' 2))              {                  using (SolidBrush b = new SolidBrush(Color.FromArgb(50' Color.Blue)))                  {                      pe.Graphics.FillPath(b' p);                  }               }
Magic Number,System.Windows.Forms,RibbonTextBox,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTextBox.cs,RibbonTextBox,The following statement contains a magic number: _textboxWidth = 100;
Magic Number,System.Windows.Forms,RibbonTextBox,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTextBox.cs,InitTextBox,The following statement contains a magic number: t.Width = TextBoxBounds.Width - 2;
Magic Number,System.Windows.Forms,RibbonTextBox,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTextBox.cs,InitTextBox,The following statement contains a magic number: t.Location = new Point(                  TextBoxBounds.Left + 2'                  Bounds.Top + (Bounds.Height - t.Height) / 2);
Magic Number,System.Windows.Forms,RibbonTextBox,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTextBox.cs,InitTextBox,The following statement contains a magic number: t.Location = new Point(                  TextBoxBounds.Left + 2'                  Bounds.Top + (Bounds.Height - t.Height) / 2);
Magic Number,System.Windows.Forms,RibbonTextBox,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTextBox.cs,MeasureHeight,The following statement contains a magic number: return 16 + Owner.ItemMargin.Vertical;
Missing Default,System.Windows.Forms,RibbonButton,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButton.cs,OnGetDropDownBounds,The following switch statement is missing a default case: switch (SizeMode)              {                  case RibbonElementSizeMode.Large:                  case RibbonElementSizeMode.Overflow:                      return Rectangle.FromLTRB(bounds.Left'                          bounds.Top + Image.Height + Owner.ItemMargin.Vertical'                          bounds.Right' bounds.Bottom);                    case RibbonElementSizeMode.DropDown:                  case RibbonElementSizeMode.Medium:                  case RibbonElementSizeMode.Compact:                      return sideBounds;              }
Missing Default,System.Windows.Forms,RibbonButton,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButton.cs,OnGetButtonFaceBounds,The following switch statement is missing a default case: switch (SizeMode)              {                  case RibbonElementSizeMode.Large:                  case RibbonElementSizeMode.Overflow:                      return Rectangle.FromLTRB(bounds.Left'                          bounds.Top' bounds.Right' _dropDownBounds.Top);                    case RibbonElementSizeMode.DropDown:                  case RibbonElementSizeMode.Medium:                  case RibbonElementSizeMode.Compact:                      return Rectangle.FromLTRB(bounds.Left' bounds.Top'                          _dropDownBounds.Left' bounds.Bottom);                }
Missing Default,System.Windows.Forms,RibbonButtonList,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonButtonList.cs,MeasureSize,The following switch statement is missing a default case: switch (e.SizeMode)              {                  case RibbonElementSizeMode.DropDown:                      itemsWide = ItemsSizeInDropwDownMode.Width;                      break;                  case RibbonElementSizeMode.Large:                      itemsWide = ItemsWideInLargeMode;                      break;                  case RibbonElementSizeMode.Medium:                      itemsWide = ItemsWideInMediumMode;                      break;                  case RibbonElementSizeMode.Compact:                      itemsWide = 0;                      break;              }
Missing Default,System.Windows.Forms,RibbonPanel,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonPanel.cs,UpdateItemsRegions,The following switch statement is missing a default case: switch (FlowsTo)              {                  case RibbonPanelFlowDirection.Right:                      UpdateRegionsFlowsToRight(g' mode);                      break;                  case RibbonPanelFlowDirection.Bottom:                      UpdateRegionsFlowsToBottom(g' mode);                      break;              }
Missing Default,System.Windows.Forms,RibbonTextBox,C:\repos\TwoMaKing_EApp\EApp.UI.Controls\Ribbon\RibbonTextBox.cs,MeasureSize,The following switch statement is missing a default case: switch (e.SizeMode)              {                  case RibbonElementSizeMode.Large:                      w += iwidth + lwidth;                      break;                  case RibbonElementSizeMode.Medium:                      w += iwidth;                      break;              }
