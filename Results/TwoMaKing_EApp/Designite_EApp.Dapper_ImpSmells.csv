Implementation smell,Namespace,Class,File,Method,Description
Long Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,MultiMapImpl,The method has 66 lines of code.
Long Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The method has 68 lines of code.
Long Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,CreateParamInfoGenerator,The method has 355 lines of code.
Long Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The method has 262 lines of code.
Long Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,FlexibleConvertBoxedFromHeadOfStack,The method has 93 lines of code.
Long Method,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,AddParameters,The method has 97 lines of code.
Long Method,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Output,The method has 115 lines of code.
Complex Method,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,DoUpdateDataSet,Cyclomatic complexity of the method is 7
Complex Method,EApp.Dapper,SqlQueryUtils,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlQueryUtils.cs,AppendColumnName,Cyclomatic complexity of the method is 8
Complex Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,AddTypeHandlerImpl,Cyclomatic complexity of the method is 8
Complex Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,LookupDbType,Cyclomatic complexity of the method is 13
Complex Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,ExecuteImpl,Cyclomatic complexity of the method is 8
Complex Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,QueryImpl,Cyclomatic complexity of the method is 8
Complex Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,MultiMapImpl,Cyclomatic complexity of the method is 9
Complex Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,MultiMapImpl,Cyclomatic complexity of the method is 9
Complex Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,Cyclomatic complexity of the method is 8
Complex Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateDeserializers,Cyclomatic complexity of the method is 9
Complex Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetCacheInfo,Cyclomatic complexity of the method is 7
Complex Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,Cyclomatic complexity of the method is 7
Complex Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Format,Cyclomatic complexity of the method is 22
Complex Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,CreateParamInfoGenerator,Cyclomatic complexity of the method is 66
Complex Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,Cyclomatic complexity of the method is 37
Complex Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,FlexibleConvertBoxedFromHeadOfStack,Cyclomatic complexity of the method is 18
Complex Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,LoadLocal,Cyclomatic complexity of the method is 17
Complex Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,StoreLocal,Cyclomatic complexity of the method is 17
Complex Method,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,EmitInt32,Cyclomatic complexity of the method is 34
Complex Method,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,AddDynamicParams,Cyclomatic complexity of the method is 9
Complex Method,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,AddParameters,Cyclomatic complexity of the method is 22
Complex Method,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Output,Cyclomatic complexity of the method is 10
Complex Method,Dappers,DefaultTypeMap,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,FindConstructor,Cyclomatic complexity of the method is 7
Long Parameter List,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,CreateAndCacheDbCommandParameters,The method has 5 parameters.
Long Parameter List,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,DoUpdateDataSet,The method has 5 parameters.
Long Parameter List,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,ConfigureParameter,The method has 11 parameters.
Long Parameter List,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,CreateParameter,The method has 10 parameters.
Long Parameter List,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,LoadDataSet,The method has 4 parameters.
Long Parameter List,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,LoadDataSet,The method has 4 parameters.
Long Parameter List,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,LoadDataSet,The method has 4 parameters.
Long Parameter List,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,LoadDataSet,The method has 4 parameters.
Long Parameter List,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,LoadDataSet,The method has 5 parameters.
Long Parameter List,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,LoadDataSet,The method has 5 parameters.
Long Parameter List,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,UpdateDataSet,The method has 6 parameters.
Long Parameter List,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,UpdateDataSet,The method has 5 parameters.
Long Parameter List,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,AddParameter,The method has 11 parameters.
Long Parameter List,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,AddParameter,The method has 7 parameters.
Long Parameter List,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,AddOutParameter,The method has 4 parameters.
Long Parameter List,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,AddInParameter,The method has 4 parameters.
Long Parameter List,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,AddInParameter,The method has 5 parameters.
Long Parameter List,EApp.Dapper,DbParameterCache,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\DbParameterCache.cs,AddParametersFromCache,The method has 4 parameters.
Long Parameter List,EApp.Dapper,DbParameterCache,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\DbParameterCache.cs,CreateAndCacheParameters,The method has 5 parameters.
Long Parameter List,EApp.Dapper,ISqlStatementFactory,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\ISqlStatementFactory.cs,CreateSelectSqlStatement,The method has 4 parameters.
Long Parameter List,EApp.Dapper,ISqlStatementFactory,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\ISqlStatementFactory.cs,CreateSelectRangeSqlStatement,The method has 9 parameters.
Long Parameter List,EApp.Dapper,SqlQueryUtils,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlQueryUtils.cs,ReplaceDatabaseTokens,The method has 6 parameters.
Long Parameter List,EApp.Dapper,SqlQueryUtils,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlQueryUtils.cs,AppendColumnName,The method has 4 parameters.
Long Parameter List,EApp.Dapper,SqlStatementFactory,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlStatementFactory.cs,CreateSelectSqlStatement,The method has 4 parameters.
Long Parameter List,EApp.Dapper,SqlStatementFactory,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlStatementFactory.cs,CreateSelectRangeSqlStatement,The method has 9 parameters.
Long Parameter List,EApp.Dapper,SqlStatementFactory,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlStatementFactory.cs,CreateSelectTopSqlStatement,The method has 6 parameters.
Long Parameter List,EApp.Dapper,SqlStatementFactory,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlStatementFactory.cs,CreateSelectRangeSqlStatementForSortedRows,The method has 9 parameters.
Long Parameter List,EApp.Dapper,SqlStatementFactory,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlStatementFactory.cs,CreateSelectRangeSqlStatementForUnsortedRows,The method has 8 parameters.
Long Parameter List,Dappers,CommandDefinition,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,CommandDefinition,The method has 6 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,LookupDbType,The method has 4 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Execute,The method has 6 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,ExecuteScalar,The method has 6 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,ExecuteScalar,The method has 6 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,ExecuteReader,The method has 6 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Query,The method has 7 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Query,The method has 7 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Query,The method has 8 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,QueryMultiple,The method has 6 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Query,The method has 9 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Query,The method has 10 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,MultiMap,The method has 9 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,MultiMapImpl,The method has 7 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,MultiMapImpl,The method has 8 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The method has 4 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetDeserializer,The method has 5 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetDapperRowDeserializer,The method has 4 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,CreateParamInfoGenerator,The method has 4 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,ExecuteReaderImpl,The method has 4 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The method has 5 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,FlexibleConvertBoxedFromHeadOfStack,The method has 4 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,ResolveOperator,The method has 4 parameters.
Long Parameter List,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,ThrowDataException,The method has 4 parameters.
Long Parameter List,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Add,The method has 5 parameters.
Long Parameter List,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Output,The method has 4 parameters.
Long Parameter List,Dappers,WrappedReader,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetBytes,The method has 5 parameters.
Long Parameter List,Dappers,WrappedReader,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetChars,The method has 5 parameters.
Long Statement,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,CreateParameter,The length of the statement  "	ConfigureParameter (param' name' dbtype' size' direction' nullable' precision' scale' sourceColumn' sourceVersion' value); " is 122.
Long Statement,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,AddParameter,The length of the statement  "	DbParameter parameter = this.CreateParameter (name' dbtype' size' direction' nullable' precision' scale' sourceColumn' sourceVersion' value); " is 141.
Long Statement,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,AddOutParameter,The length of the statement  "	AddParameter (command' name' dbType' size' ParameterDirection.Output' true' 0' 0' string.Empty' DataRowVersion.Default' DBNull.Value); " is 134.
Long Statement,EApp.Dapper,SqlQueryUtils,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlQueryUtils.cs,OrderByStartsWith,The length of the statement  "	if (string.IsNullOrEmpty (orderByClause) || string.IsNullOrWhiteSpace (orderByClause) || string.IsNullOrEmpty (column) || string.IsNullOrWhiteSpace (column)) { " is 159.
Long Statement,EApp.Dapper,SqlQueryUtils,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlQueryUtils.cs,AppendColumnName,The length of the statement  "			if (splittedColumnSections [i] == "*" || splittedColumnSections [i].Contains (leftToken) || splittedColumnSections [i].Contains (rightToken)) { " is 143.
Long Statement,EApp.Dapper,SqlStatementFactory,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlStatementFactory.cs,CreateSelectRangeSqlStatement,The length of the statement  "		if (identityColumnIsNumber && SqlQueryUtils.OrderByStartsWith (orderBy' identityColumn) && (string.IsNullOrEmpty (groupBy) || groupBy.Equals (identityColumn' StringComparison.InvariantCultureIgnoreCase))) { " is 206.
Long Statement,EApp.Dapper,SqlStatementFactory,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlStatementFactory.cs,CreateSelectRangeSqlStatement,The length of the statement  "			return CreateSelectRangeSqlStatementForSortedRows (tableNames' whereSql' columns' orderBy' groupBy' topCount' skipCount' identityColumn' SqlQueryUtils.OrderByStartsWith (orderBy' identityColumn + " DESC")); " is 206.
Long Statement,EApp.Dapper,SqlStatementFactory,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlStatementFactory.cs,CreateSelectRangeSqlStatement,The length of the statement  "			return CreateSelectRangeSqlStatementForUnsortedRows (tableNames' whereSql' columns' orderBy' groupBy' topCount' skipCount' identityColumn); " is 139.
Long Statement,EApp.Dapper.Mapping,MemberMapping,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Mapping\MemberMapping.cs,InitializeColumnAttributeMapping,The length of the statement  "	if (this.dbType == DBType.Char || this.dbType == DBType.NChar || this.dbType == DBType.NVarChar || this.dbType == DBType.VarChar) { " is 131.
Long Statement,EApp.Dapper.Mapping,MemberMapping,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Mapping\MemberMapping.cs,InitializeColumnAttributeMapping,The length of the statement  "	if (column.IsVersion && (this.dbType == DBType.Int16 || this.dbType == DBType.Int32 || this.dbType == DBType.Int64 || this.dbType == DBType.DateTime)) { " is 152.
Long Statement,EApp.Dapper.Mapping,MemberMapping,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Mapping\MemberMapping.cs,InitializeColumnAttributeMapping,The length of the statement  "		throw new MappingException (string.Format ("Invalid Version member type '{0}' for  '{1}' ' version type must be int or datetime type."' this.dbType.ToString ()' this.entity.EntityType.Name + "." + this.memberInfo.Name)); " is 220.
Long Statement,EApp.Dapper.Mapping,MemberMapping,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Mapping\MemberMapping.cs,InitializeAssociationAttributeMapping,The length of the statement  "	this.thisKeyMembers = thisKey.Split (separators).Select (m => GetMemberMapping (this.Entity.EntityType' m' this.entity)).ToArray (); " is 132.
Long Statement,Dappers,CommandDefinition,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetBasicPropertySetter,The length of the statement  "	if (prop != null && prop.CanWrite && prop.PropertyType == expectedType && ((indexers = prop.GetIndexParameters ()) == null || indexers.Length == 0)) { " is 150.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetCachedSQL,The length of the statement  "	var data = _queryCache.Select (pair => Tuple.Create (pair.Key.connectionString' pair.Key.sql' pair.Value.GetHitCount ())); " is 122.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,AddTypeHandlerImpl,The length of the statement  "	typeof(TypeHandlerCache<>).MakeGenericType (type).GetMethod ("SetHandler"' BindingFlags.Static | BindingFlags.NonPublic).Invoke (null' new object[] { " is 149.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,AddTypeHandlerImpl,The length of the statement  "		typeof(TypeHandlerCache<>).MakeGenericType (secondary).GetMethod ("SetHandler"' BindingFlags.Static | BindingFlags.NonPublic).Invoke (null' new object[] { " is 154.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,LookupDbType,The length of the statement  "		throw new NotSupportedException (string.Format ("The member {0} of type {1} cannot be used as a parameter value"' name' type.FullName)); " is 136.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Execute,The length of the statement  "	var command = new CommandDefinition (sql' (object)param' transaction' commandTimeout' commandType' CommandFlags.Buffered); " is 122.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,ExecuteScalar,The length of the statement  "	var command = new CommandDefinition (sql' (object)param' transaction' commandTimeout' commandType' CommandFlags.Buffered); " is 122.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,ExecuteScalar,The length of the statement  "	var command = new CommandDefinition (sql' (object)param' transaction' commandTimeout' commandType' CommandFlags.Buffered); " is 122.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetMultiExec,The length of the statement  "	return (param is IEnumerable && !(param is string || param is IEnumerable<KeyValuePair<string' object>>)) ? (IEnumerable)param : null; " is 134.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,ExecuteReader,The length of the statement  "	var command = new CommandDefinition (sql' (object)param' transaction' commandTimeout' commandType' CommandFlags.Buffered); " is 122.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Query,The length of the statement  "	var command = new CommandDefinition (sql' (object)param' transaction' commandTimeout' commandType' buffered ? CommandFlags.Buffered : CommandFlags.None); " is 153.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Query,The length of the statement  "	var command = new CommandDefinition (sql' (object)param' transaction' commandTimeout' commandType' buffered ? CommandFlags.Buffered : CommandFlags.None); " is 153.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,QueryMultiple,The length of the statement  "	var command = new CommandDefinition (sql' (object)param' transaction' commandTimeout' commandType' CommandFlags.Buffered); " is 122.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,QueryMultipleImpl,The length of the statement  "	Identity identity = new Identity (command.CommandText' command.CommandType' cnn' typeof(GridReader)' param == null ? null : param.GetType ()' null); " is 148.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,QueryMultipleImpl,The length of the statement  "		reader = cmd.ExecuteReader (wasClosed ? CommandBehavior.CloseConnection | CommandBehavior.SequentialAccess : CommandBehavior.SequentialAccess); " is 143.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,QueryImpl,The length of the statement  "	var identity = new Identity (command.CommandText' command.CommandType' cnn' effectiveType' param == null ? null : param.GetType ()' null); " is 138.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,QueryImpl,The length of the statement  "		reader = cmd.ExecuteReader (wasClosed ? CommandBehavior.CloseConnection | CommandBehavior.SequentialAccess : CommandBehavior.SequentialAccess); " is 143.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' DontMap' DontMap' DontMap' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 181.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' DontMap' DontMap' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 180.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' DontMap' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 180.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' DontMap' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 179.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' DontMap' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 178.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Query,The length of the statement  "	return MultiMap<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn> (cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 179.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Query,The length of the statement  "	var command = new CommandDefinition (sql' (object)param' transaction' commandTimeout' commandType' buffered ? CommandFlags.Buffered : CommandFlags.None); " is 153.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,MultiMap,The length of the statement  "	var command = new CommandDefinition (sql' (object)param' transaction' commandTimeout' commandType' buffered ? CommandFlags.Buffered : CommandFlags.None); " is 153.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,MultiMap,The length of the statement  "	var results = MultiMapImpl<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn> (cnn' command' map' splitOn' null' null' true); " is 143.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,MultiMapImpl,The length of the statement  "	identity = identity ?? new Identity (command.CommandText' command.CommandType' cnn' typeof(TFirst)' param == null ? null : param.GetType ()' new[] { " is 148.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,MultiMapImpl,The length of the statement  "			ownedReader = ownedCommand.ExecuteReader (wasClosed ? CommandBehavior.CloseConnection | CommandBehavior.SequentialAccess : CommandBehavior.SequentialAccess); " is 157.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,MultiMapImpl,The length of the statement  "		if ((deserializer = cinfo.Deserializer).Func == null || (otherDeserializers = cinfo.OtherDeserializers) == null || hash != deserializer.Hash) { " is 143.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,MultiMapImpl,The length of the statement  "		Func<IDataReader' TReturn> mapIt = GenerateMapper<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn> (deserializer.Func' otherDeserializers' map); " is 164.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,MultiMapImpl,The length of the statement  "	identity = identity ?? new Identity (command.CommandText' command.CommandType' cnn' types [0]' param == null ? null : param.GetType ()' types); " is 143.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,MultiMapImpl,The length of the statement  "		if ((deserializer = cinfo.Deserializer).Func == null || (otherDeserializers = cinfo.OtherDeserializers) == null || hash != deserializer.Hash) { " is 143.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)); " is 158.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)); " is 204.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)); " is 248.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)); " is 292.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The length of the statement  "		return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r)); " is 340.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetCacheInfo,The length of the statement  "			if ((identity.commandType == null || identity.commandType == CommandType.Text) && ShouldPassByPosition (identity.sql)) { " is 120.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PassByPosition,The length of the statement  "	Dictionary<string' IDbDataParameter> parameters = new Dictionary<string' IDbDataParameter> (StringComparer.InvariantCulture); " is 125.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PassByPosition,The length of the statement  "			throw new InvalidOperationException ("When passing parameters by position' each parameter can only be referenced once"); " is 120.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetDeserializer,The length of the statement  "	if (!(typeMap.ContainsKey (type) || type.IsEnum || type.FullName == LinqBinary || (type.IsValueType && (underlyingType = Nullable.GetUnderlyingType (type)) != null && underlyingType.IsEnum))) { " is 193.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,MultiMapException,The length of the statement  "		return new ArgumentException ("When using the multi-mapping APIs ensure you set the splitOn param if you have keys other than Id"' "splitOn"); " is 142.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,FilterParameters,The length of the statement  "	return parameters.Where (p => Regex.IsMatch (sql' @"[?@:]" + p.Name + "([^a-z0-9_]+|$)"' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant)); " is 172.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "		if (dbType != DbType.Time && handler == null)// https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time " is 213.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,CreateParamInfoGenerator,The length of the statement  "				il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null); " is 123.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetStructDeserializer,The length of the statement  "	// no point using special per-type handling here; it boils down to the same' plus not all are supported anyway (see: SqlDataReader.GetChar - not supported!) " is 156.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "				string proposedTypes = "(" + string.Join ("' "' types.Select ((t' i) => t.FullName + " " + names [i]).ToArray ()) + ")"; " is 120.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "				throw new InvalidOperationException (string.Format ("A parameterless default constructor or one matching signature {0} is required for {1} materialization"' proposedTypes' type.FullName)); " is 188.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "	var members = (specializedConstructor != null ? names.Select (n => typeMap.GetConstructorParameter (specializedConstructor' n)) : names.Select (n => typeMap.GetMember (n))).ToList (); " is 183.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "				il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod (memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null); " is 168.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The length of the statement  "					if ((hasTypeHandler = typeHandlers.ContainsKey (unboxType)) || colType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) { " is 176.
Long Statement,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetOperator,The length of the statement  "	return ResolveOperator (fromMethods = from.GetMethods (BindingFlags.Static | BindingFlags.Public)' from' to' "op_Implicit") ?? ResolveOperator (toMethods = to.GetMethods (BindingFlags.Static | BindingFlags.Public)' from' to' "op_Implicit") ?? ResolveOperator (fromMethods' from' to' "op_Explicit") ?? ResolveOperator (toMethods' from' to' "op_Explicit"); " is 354.
Long Statement,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Output,The length of the statement  "	if (lastMemberAccess == null || (lastMemberAccess.Member.MemberType != MemberTypes.Property && lastMemberAccess.Member.MemberType != MemberTypes.Field)) { " is 154.
Long Statement,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Output,The length of the statement  "		if (expression.Body.NodeType == ExpressionType.Convert && expression.Body.Type == typeof(object) && ((UnaryExpression)expression.Body).Operand is MemberExpression) { " is 165.
Long Statement,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Output,The length of the statement  "		} else if (diving == null || (diving.Member.MemberType != MemberTypes.Property && diving.Member.MemberType != MemberTypes.Field)) { " is 131.
Long Statement,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Output,The length of the statement  "			dbType = (!dbType.HasValue) ? SqlMapper.LookupDbType (targetMemberType' targetMemberType.Name' true' out handler) : dbType; " is 123.
Long Statement,Dappers,DbString,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,AddParameter,The length of the statement  "	param.DbType = IsAnsi ? (IsFixedLength ? DbType.AnsiStringFixedLength : DbType.AnsiString) : (IsFixedLength ? DbType.StringFixedLength : DbType.String); " is 152.
Long Statement,Dappers,DefaultTypeMap,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetPropertySetter,The length of the statement  "	return propertyInfo.DeclaringType == type ? propertyInfo.GetSetMethod (true) : propertyInfo.DeclaringType.GetProperty (propertyInfo.Name' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' Type.DefaultBinder' propertyInfo.PropertyType' propertyInfo.GetIndexParameters ().Select (p => p.ParameterType).ToArray ()' null).GetSetMethod (true); " is 358.
Long Statement,Dappers,DefaultTypeMap,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetSettableProps,The length of the statement  "	return t.GetProperties (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).Where (p => GetPropertySetter (p' t) != null).ToList (); " is 150.
Long Statement,Dappers,DefaultTypeMap,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,FindConstructor,The length of the statement  "	foreach (ConstructorInfo ctor in constructors.OrderBy (c => c.IsPublic ? 0 : (c.IsPrivate ? 2 : 1)).ThenBy (c => c.GetParameters ().Length)) { " is 142.
Long Statement,Dappers,DefaultTypeMap,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,FindConstructor,The length of the statement  "			if (unboxedType != types [i] && !(unboxedType.IsEnum && Enum.GetUnderlyingType (unboxedType) == types [i]) && !(unboxedType == typeof(char) && types [i] == typeof(string))) " is 172.
Long Statement,Dappers,DefaultTypeMap,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,FindExplicitConstructor,The length of the statement  "	var withAttr = constructors.Where (c => c.GetCustomAttributes (typeof(ExplicitConstructorAttribute)' true).Length > 0).ToList (); " is 129.
Long Statement,Dappers,DefaultTypeMap,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetConstructorParameter,The length of the statement  "	return new SimpleMemberMap (columnName' parameters.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.OrdinalIgnoreCase))); " is 145.
Long Statement,Dappers,DefaultTypeMap,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetMember,The length of the statement  "	var property = _properties.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.Ordinal)) ?? _properties.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.OrdinalIgnoreCase)); " is 218.
Long Statement,Dappers,DefaultTypeMap,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetMember,The length of the statement  "		property = _properties.FirstOrDefault (p => string.Equals (p.Name' columnName.Replace ("_"' "")' StringComparison.Ordinal)) ?? _properties.FirstOrDefault (p => string.Equals (p.Name' columnName.Replace ("_"' "")' StringComparison.OrdinalIgnoreCase)); " is 250.
Long Statement,Dappers,DefaultTypeMap,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetMember,The length of the statement  "	var field = _fields.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.Ordinal)) ?? _fields.FirstOrDefault (p => string.Equals (p.Name' columnName' StringComparison.OrdinalIgnoreCase)); " is 207.
Long Statement,Dappers,DefaultTypeMap,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetMember,The length of the statement  "		field = _fields.FirstOrDefault (p => string.Equals (p.Name' columnName.Replace ("_"' "")' StringComparison.Ordinal)) ?? _fields.FirstOrDefault (p => string.Equals (p.Name' columnName.Replace ("_"' "")' StringComparison.OrdinalIgnoreCase)); " is 239.
Complex Conditional,EApp.Dapper,SqlQueryUtils,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlQueryUtils.cs,OrderByStartsWith,The conditional expression  "string.IsNullOrEmpty (orderByClause) || string.IsNullOrWhiteSpace (orderByClause) || string.IsNullOrEmpty (column) || string.IsNullOrWhiteSpace (column)"  is complex.
Complex Conditional,EApp.Dapper,SqlStatementFactory,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlStatementFactory.cs,CreateSelectRangeSqlStatement,The conditional expression  "identityColumnIsNumber && SqlQueryUtils.OrderByStartsWith (orderBy' identityColumn) && (string.IsNullOrEmpty (groupBy) || groupBy.Equals (identityColumn' StringComparison.InvariantCultureIgnoreCase))"  is complex.
Complex Conditional,EApp.Dapper.Mapping,MemberMapping,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Mapping\MemberMapping.cs,InitializeColumnAttributeMapping,The conditional expression  "this.dbType == DBType.Char || this.dbType == DBType.NChar || this.dbType == DBType.NVarChar || this.dbType == DBType.VarChar"  is complex.
Complex Conditional,EApp.Dapper.Mapping,MemberMapping,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Mapping\MemberMapping.cs,InitializeColumnAttributeMapping,The conditional expression  "column.IsVersion && (this.dbType == DBType.Int16 || this.dbType == DBType.Int32 || this.dbType == DBType.Int64 || this.dbType == DBType.DateTime)"  is complex.
Complex Conditional,Dappers,CommandDefinition,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetBasicPropertySetter,The conditional expression  "prop != null && prop.CanWrite && prop.PropertyType == expectedType && ((indexers = prop.GetIndexParameters ()) == null || indexers.Length == 0)"  is complex.
Complex Conditional,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetDeserializer,The conditional expression  "!(typeMap.ContainsKey (type) || type.IsEnum || type.FullName == LinqBinary || (type.IsValueType && (underlyingType = Nullable.GetUnderlyingType (type)) != null && underlyingType.IsEnum))"  is complex.
Complex Conditional,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The conditional expression  "(hasTypeHandler = typeHandlers.ContainsKey (unboxType)) || colType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)"  is complex.
Complex Conditional,Dappers,DefaultTypeMap,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,FindConstructor,The conditional expression  "unboxedType != types [i] && !(unboxedType.IsEnum && Enum.GetUnderlyingType (unboxedType) == types [i]) && !(unboxedType == typeof(char) && types [i] == typeof(string))"  is complex.
Empty Catch Block,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,CreateConnection,The method has an empty catch block.
Empty Catch Block,EApp.Dapper,Database,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\Database.cs,ExecuteReader,The method has an empty catch block.
Empty Catch Block,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,QueryMultipleImpl,The method has an empty catch block.
Empty Catch Block,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,QueryImpl,The method has an empty catch block.
Empty Catch Block,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,MultiMapException,The method has an empty catch block.
Magic Number,EApp.Dapper,DbParameterCache,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\DbParameterCache.cs,AdjustParamNameForOracle,The following statement contains a magic number: if (paramName [0] == ':' && paramName.Length > 25) {  	string truncatedParamName = paramName.Substring (0' 15) + paramName.Substring (paramName.Length - 11' 10);  	cmd.Parameters [paramName].ParameterName = truncatedParamName;  	cmd.CommandText = cmd.CommandText.Replace (paramName' truncatedParamName);  }  
Magic Number,EApp.Dapper,DbParameterCache,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\DbParameterCache.cs,AdjustParamNameForOracle,The following statement contains a magic number: if (paramName [0] == ':' && paramName.Length > 25) {  	string truncatedParamName = paramName.Substring (0' 15) + paramName.Substring (paramName.Length - 11' 10);  	cmd.Parameters [paramName].ParameterName = truncatedParamName;  	cmd.CommandText = cmd.CommandText.Replace (paramName' truncatedParamName);  }  
Magic Number,EApp.Dapper,DbParameterCache,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\DbParameterCache.cs,AdjustParamNameForOracle,The following statement contains a magic number: if (paramName [0] == ':' && paramName.Length > 25) {  	string truncatedParamName = paramName.Substring (0' 15) + paramName.Substring (paramName.Length - 11' 10);  	cmd.Parameters [paramName].ParameterName = truncatedParamName;  	cmd.CommandText = cmd.CommandText.Replace (paramName' truncatedParamName);  }  
Magic Number,EApp.Dapper,DbParameterCache,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\DbParameterCache.cs,AdjustParamNameForOracle,The following statement contains a magic number: if (paramName [0] == ':' && paramName.Length > 25) {  	string truncatedParamName = paramName.Substring (0' 15) + paramName.Substring (paramName.Length - 11' 10);  	cmd.Parameters [paramName].ParameterName = truncatedParamName;  	cmd.CommandText = cmd.CommandText.Replace (paramName' truncatedParamName);  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetColumnHash,The following statement contains a magic number: unchecked {  	int colCount = reader.FieldCount' hash = colCount;  	for (int i = 0; i < colCount; i++) {  		// binding code is only interested in names - not types  		object tmp = reader.GetName (i);  		hash = (hash * 31) + (tmp == null ? 0 : tmp.GetHashCode ());  	}  	return hash;  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetColumnHash,The following statement contains a magic number: for (int i = 0; i < colCount; i++) {  	// binding code is only interested in names - not types  	object tmp = reader.GetName (i);  	hash = (hash * 31) + (tmp == null ? 0 : tmp.GetHashCode ());  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetColumnHash,The following statement contains a magic number: hash = (hash * 31) + (tmp == null ? 0 : tmp.GetHashCode ());  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length) {  case 1:  	return r => ((Func<TFirst' TSecond' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r));  case 2:  	return r => ((Func<TFirst' TSecond' TThird' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r));  case 3:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  #if !CSHARP30  case 4:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  case 5:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  case 6:  	return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  #endif  default:  	throw new NotSupportedException ();  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r));  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r));  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r));  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GenerateMapper,The following statement contains a magic number: return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TSixth' TSeventh' TReturn>)map) ((TFirst)deserializer (r)' (TSecond)otherDeserializers [0] (r)' (TThird)otherDeserializers [1] (r)' (TFourth)otherDeserializers [2] (r)' (TFifth)otherDeserializers [3] (r)' (TSixth)otherDeserializers [4] (r)' (TSeventh)otherDeserializers [5] (r));  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = value ?? DBNull.Value;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  } else {  	var list = value as IEnumerable;  	var count = 0;  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		if (isString) {  			listParam.Size = DbString.DefaultLength;  			if (item != null && ((string)item).Length > DbString.DefaultLength) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		} else {  			listParam.Value = item ?? DBNull.Value;  			command.Parameters.Add (listParam);  		}  	}  	var regexIncludingUnknown = @"([?@:]" + Regex.Escape (namePrefix) + @")(?!\w)(\s+(?i)unknown(?-i))?";  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; leave it alone!  				return match.Value;  			} else {  				return "(SELECT " + variableName + " WHERE 1 = 0)";  			}  		}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  		var dummyParam = command.CreateParameter ();  		dummyParam.ParameterName = namePrefix;  		dummyParam.Value = DBNull.Value;  		command.Parameters.Add (dummyParam);  	} else {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; expand it  				var suffix = match.Groups [2].Value;  				var sb = GetStringBuilder ().Append (variableName).Append (1).Append (suffix);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i).Append (suffix);  				}  				return sb.__ToStringRecycle ();  			} else {  				var sb = GetStringBuilder ().Append ('(').Append (variableName).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i);  				}  				return sb.Append (')').__ToStringRecycle ();  			}  		}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  	}  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = value ?? DBNull.Value;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  } else {  	var list = value as IEnumerable;  	var count = 0;  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		if (isString) {  			listParam.Size = DbString.DefaultLength;  			if (item != null && ((string)item).Length > DbString.DefaultLength) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		} else {  			listParam.Value = item ?? DBNull.Value;  			command.Parameters.Add (listParam);  		}  	}  	var regexIncludingUnknown = @"([?@:]" + Regex.Escape (namePrefix) + @")(?!\w)(\s+(?i)unknown(?-i))?";  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; leave it alone!  				return match.Value;  			} else {  				return "(SELECT " + variableName + " WHERE 1 = 0)";  			}  		}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  		var dummyParam = command.CreateParameter ();  		dummyParam.ParameterName = namePrefix;  		dummyParam.Value = DBNull.Value;  		command.Parameters.Add (dummyParam);  	} else {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; expand it  				var suffix = match.Groups [2].Value;  				var sb = GetStringBuilder ().Append (variableName).Append (1).Append (suffix);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i).Append (suffix);  				}  				return sb.__ToStringRecycle ();  			} else {  				var sb = GetStringBuilder ().Append ('(').Append (variableName).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i);  				}  				return sb.Append (')').__ToStringRecycle ();  			}  		}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  	}  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = value ?? DBNull.Value;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  } else {  	var list = value as IEnumerable;  	var count = 0;  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		if (isString) {  			listParam.Size = DbString.DefaultLength;  			if (item != null && ((string)item).Length > DbString.DefaultLength) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		} else {  			listParam.Value = item ?? DBNull.Value;  			command.Parameters.Add (listParam);  		}  	}  	var regexIncludingUnknown = @"([?@:]" + Regex.Escape (namePrefix) + @")(?!\w)(\s+(?i)unknown(?-i))?";  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; leave it alone!  				return match.Value;  			} else {  				return "(SELECT " + variableName + " WHERE 1 = 0)";  			}  		}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  		var dummyParam = command.CreateParameter ();  		dummyParam.ParameterName = namePrefix;  		dummyParam.Value = DBNull.Value;  		command.Parameters.Add (dummyParam);  	} else {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; expand it  				var suffix = match.Groups [2].Value;  				var sb = GetStringBuilder ().Append (variableName).Append (1).Append (suffix);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i).Append (suffix);  				}  				return sb.__ToStringRecycle ();  			} else {  				var sb = GetStringBuilder ().Append ('(').Append (variableName).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i);  				}  				return sb.Append (')').__ToStringRecycle ();  			}  		}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  	}  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = value ?? DBNull.Value;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  } else {  	var list = value as IEnumerable;  	var count = 0;  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		if (isString) {  			listParam.Size = DbString.DefaultLength;  			if (item != null && ((string)item).Length > DbString.DefaultLength) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		} else {  			listParam.Value = item ?? DBNull.Value;  			command.Parameters.Add (listParam);  		}  	}  	var regexIncludingUnknown = @"([?@:]" + Regex.Escape (namePrefix) + @")(?!\w)(\s+(?i)unknown(?-i))?";  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; leave it alone!  				return match.Value;  			} else {  				return "(SELECT " + variableName + " WHERE 1 = 0)";  			}  		}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  		var dummyParam = command.CreateParameter ();  		dummyParam.ParameterName = namePrefix;  		dummyParam.Value = DBNull.Value;  		command.Parameters.Add (dummyParam);  	} else {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; expand it  				var suffix = match.Groups [2].Value;  				var sb = GetStringBuilder ().Append (variableName).Append (1).Append (suffix);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i).Append (suffix);  				}  				return sb.__ToStringRecycle ();  			} else {  				var sb = GetStringBuilder ().Append ('(').Append (variableName).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i);  				}  				return sb.Append (')').__ToStringRecycle ();  			}  		}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  	}  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (FeatureSupport.Get (command.Connection).Arrays) {  	var arrayParm = command.CreateParameter ();  	arrayParm.Value = value ?? DBNull.Value;  	arrayParm.ParameterName = namePrefix;  	command.Parameters.Add (arrayParm);  } else {  	var list = value as IEnumerable;  	var count = 0;  	bool isString = value is IEnumerable<string>;  	bool isDbString = value is IEnumerable<DbString>;  	foreach (var item in list) {  		count++;  		var listParam = command.CreateParameter ();  		listParam.ParameterName = namePrefix + count;  		if (isString) {  			listParam.Size = DbString.DefaultLength;  			if (item != null && ((string)item).Length > DbString.DefaultLength) {  				listParam.Size = -1;  			}  		}  		if (isDbString && item as DbString != null) {  			var str = item as DbString;  			str.AddParameter (command' listParam.ParameterName);  		} else {  			listParam.Value = item ?? DBNull.Value;  			command.Parameters.Add (listParam);  		}  	}  	var regexIncludingUnknown = @"([?@:]" + Regex.Escape (namePrefix) + @")(?!\w)(\s+(?i)unknown(?-i))?";  	if (count == 0) {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; leave it alone!  				return match.Value;  			} else {  				return "(SELECT " + variableName + " WHERE 1 = 0)";  			}  		}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  		var dummyParam = command.CreateParameter ();  		dummyParam.ParameterName = namePrefix;  		dummyParam.Value = DBNull.Value;  		command.Parameters.Add (dummyParam);  	} else {  		command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  			var variableName = match.Groups [1].Value;  			if (match.Groups [2].Success) {  				// looks like an optimize hint; expand it  				var suffix = match.Groups [2].Value;  				var sb = GetStringBuilder ().Append (variableName).Append (1).Append (suffix);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i).Append (suffix);  				}  				return sb.__ToStringRecycle ();  			} else {  				var sb = GetStringBuilder ().Append ('(').Append (variableName).Append (1);  				for (int i = 2; i <= count; i++) {  					sb.Append (''').Append (variableName).Append (i);  				}  				return sb.Append (')').__ToStringRecycle ();  			}  		}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  	}  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (count == 0) {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; leave it alone!  			return match.Value;  		} else {  			return "(SELECT " + variableName + " WHERE 1 = 0)";  		}  	}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  	var dummyParam = command.CreateParameter ();  	dummyParam.ParameterName = namePrefix;  	dummyParam.Value = DBNull.Value;  	command.Parameters.Add (dummyParam);  } else {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; expand it  			var suffix = match.Groups [2].Value;  			var sb = GetStringBuilder ().Append (variableName).Append (1).Append (suffix);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i).Append (suffix);  			}  			return sb.__ToStringRecycle ();  		} else {  			var sb = GetStringBuilder ().Append ('(').Append (variableName).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i);  			}  			return sb.Append (')').__ToStringRecycle ();  		}  	}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (count == 0) {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; leave it alone!  			return match.Value;  		} else {  			return "(SELECT " + variableName + " WHERE 1 = 0)";  		}  	}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  	var dummyParam = command.CreateParameter ();  	dummyParam.ParameterName = namePrefix;  	dummyParam.Value = DBNull.Value;  	command.Parameters.Add (dummyParam);  } else {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; expand it  			var suffix = match.Groups [2].Value;  			var sb = GetStringBuilder ().Append (variableName).Append (1).Append (suffix);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i).Append (suffix);  			}  			return sb.__ToStringRecycle ();  		} else {  			var sb = GetStringBuilder ().Append ('(').Append (variableName).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i);  			}  			return sb.Append (')').__ToStringRecycle ();  		}  	}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (count == 0) {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; leave it alone!  			return match.Value;  		} else {  			return "(SELECT " + variableName + " WHERE 1 = 0)";  		}  	}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  	var dummyParam = command.CreateParameter ();  	dummyParam.ParameterName = namePrefix;  	dummyParam.Value = DBNull.Value;  	command.Parameters.Add (dummyParam);  } else {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; expand it  			var suffix = match.Groups [2].Value;  			var sb = GetStringBuilder ().Append (variableName).Append (1).Append (suffix);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i).Append (suffix);  			}  			return sb.__ToStringRecycle ();  		} else {  			var sb = GetStringBuilder ().Append ('(').Append (variableName).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i);  			}  			return sb.Append (')').__ToStringRecycle ();  		}  	}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (count == 0) {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; leave it alone!  			return match.Value;  		} else {  			return "(SELECT " + variableName + " WHERE 1 = 0)";  		}  	}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  	var dummyParam = command.CreateParameter ();  	dummyParam.ParameterName = namePrefix;  	dummyParam.Value = DBNull.Value;  	command.Parameters.Add (dummyParam);  } else {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; expand it  			var suffix = match.Groups [2].Value;  			var sb = GetStringBuilder ().Append (variableName).Append (1).Append (suffix);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i).Append (suffix);  			}  			return sb.__ToStringRecycle ();  		} else {  			var sb = GetStringBuilder ().Append ('(').Append (variableName).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i);  			}  			return sb.Append (')').__ToStringRecycle ();  		}  	}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (count == 0) {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; leave it alone!  			return match.Value;  		} else {  			return "(SELECT " + variableName + " WHERE 1 = 0)";  		}  	}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  	var dummyParam = command.CreateParameter ();  	dummyParam.ParameterName = namePrefix;  	dummyParam.Value = DBNull.Value;  	command.Parameters.Add (dummyParam);  } else {  	command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  		var variableName = match.Groups [1].Value;  		if (match.Groups [2].Success) {  			// looks like an optimize hint; expand it  			var suffix = match.Groups [2].Value;  			var sb = GetStringBuilder ().Append (variableName).Append (1).Append (suffix);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i).Append (suffix);  			}  			return sb.__ToStringRecycle ();  		} else {  			var sb = GetStringBuilder ().Append ('(').Append (variableName).Append (1);  			for (int i = 2; i <= count; i++) {  				sb.Append (''').Append (variableName).Append (i);  			}  			return sb.Append (')').__ToStringRecycle ();  		}  	}' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  	var variableName = match.Groups [1].Value;  	if (match.Groups [2].Success) {  		// looks like an optimize hint; leave it alone!  		return match.Value;  	} else {  		return "(SELECT " + variableName + " WHERE 1 = 0)";  	}  }' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (match.Groups [2].Success) {  	// looks like an optimize hint; leave it alone!  	return match.Value;  } else {  	return "(SELECT " + variableName + " WHERE 1 = 0)";  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  	var variableName = match.Groups [1].Value;  	if (match.Groups [2].Success) {  		// looks like an optimize hint; expand it  		var suffix = match.Groups [2].Value;  		var sb = GetStringBuilder ().Append (variableName).Append (1).Append (suffix);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (variableName).Append (i).Append (suffix);  		}  		return sb.__ToStringRecycle ();  	} else {  		var sb = GetStringBuilder ().Append ('(').Append (variableName).Append (1);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (variableName).Append (i);  		}  		return sb.Append (')').__ToStringRecycle ();  	}  }' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  	var variableName = match.Groups [1].Value;  	if (match.Groups [2].Success) {  		// looks like an optimize hint; expand it  		var suffix = match.Groups [2].Value;  		var sb = GetStringBuilder ().Append (variableName).Append (1).Append (suffix);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (variableName).Append (i).Append (suffix);  		}  		return sb.__ToStringRecycle ();  	} else {  		var sb = GetStringBuilder ().Append ('(').Append (variableName).Append (1);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (variableName).Append (i);  		}  		return sb.Append (')').__ToStringRecycle ();  	}  }' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  	var variableName = match.Groups [1].Value;  	if (match.Groups [2].Success) {  		// looks like an optimize hint; expand it  		var suffix = match.Groups [2].Value;  		var sb = GetStringBuilder ().Append (variableName).Append (1).Append (suffix);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (variableName).Append (i).Append (suffix);  		}  		return sb.__ToStringRecycle ();  	} else {  		var sb = GetStringBuilder ().Append ('(').Append (variableName).Append (1);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (variableName).Append (i);  		}  		return sb.Append (')').__ToStringRecycle ();  	}  }' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: command.CommandText = Regex.Replace (command.CommandText' regexIncludingUnknown' match => {  	var variableName = match.Groups [1].Value;  	if (match.Groups [2].Success) {  		// looks like an optimize hint; expand it  		var suffix = match.Groups [2].Value;  		var sb = GetStringBuilder ().Append (variableName).Append (1).Append (suffix);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (variableName).Append (i).Append (suffix);  		}  		return sb.__ToStringRecycle ();  	} else {  		var sb = GetStringBuilder ().Append ('(').Append (variableName).Append (1);  		for (int i = 2; i <= count; i++) {  			sb.Append (''').Append (variableName).Append (i);  		}  		return sb.Append (')').__ToStringRecycle ();  	}  }' RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.CultureInvariant);  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (match.Groups [2].Success) {  	// looks like an optimize hint; expand it  	var suffix = match.Groups [2].Value;  	var sb = GetStringBuilder ().Append (variableName).Append (1).Append (suffix);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (variableName).Append (i).Append (suffix);  	}  	return sb.__ToStringRecycle ();  } else {  	var sb = GetStringBuilder ().Append ('(').Append (variableName).Append (1);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (variableName).Append (i);  	}  	return sb.Append (')').__ToStringRecycle ();  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (match.Groups [2].Success) {  	// looks like an optimize hint; expand it  	var suffix = match.Groups [2].Value;  	var sb = GetStringBuilder ().Append (variableName).Append (1).Append (suffix);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (variableName).Append (i).Append (suffix);  	}  	return sb.__ToStringRecycle ();  } else {  	var sb = GetStringBuilder ().Append ('(').Append (variableName).Append (1);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (variableName).Append (i);  	}  	return sb.Append (')').__ToStringRecycle ();  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (match.Groups [2].Success) {  	// looks like an optimize hint; expand it  	var suffix = match.Groups [2].Value;  	var sb = GetStringBuilder ().Append (variableName).Append (1).Append (suffix);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (variableName).Append (i).Append (suffix);  	}  	return sb.__ToStringRecycle ();  } else {  	var sb = GetStringBuilder ().Append ('(').Append (variableName).Append (1);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (variableName).Append (i);  	}  	return sb.Append (')').__ToStringRecycle ();  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: if (match.Groups [2].Success) {  	// looks like an optimize hint; expand it  	var suffix = match.Groups [2].Value;  	var sb = GetStringBuilder ().Append (variableName).Append (1).Append (suffix);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (variableName).Append (i).Append (suffix);  	}  	return sb.__ToStringRecycle ();  } else {  	var sb = GetStringBuilder ().Append ('(').Append (variableName).Append (1);  	for (int i = 2; i <= count; i++) {  		sb.Append (''').Append (variableName).Append (i);  	}  	return sb.Append (')').__ToStringRecycle ();  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: for (int i = 2; i <= count; i++) {  	sb.Append (''').Append (variableName).Append (i).Append (suffix);  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,PackListParameters,The following statement contains a magic number: for (int i = 2; i <= count; i++) {  	sb.Append (''').Append (variableName).Append (i);  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,ReplaceLiterals,The following statement contains a magic number: foreach (var token in tokens) {  	object value = parameters [token.Member];  	#pragma  	string text = Format (value);  	#pragma  	sql = sql.Replace (token.Token' text);  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,ReplaceLiterals,The following statement contains a magic number: foreach (var token in tokens) {  	object value = parameters [token.Member];  	#pragma  	string text = Format (value);  	#pragma  	sql = sql.Replace (token.Token' text);  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: foreach (var prop in props) {  	if (typeof(ICustomQueryParameter).IsAssignableFrom (prop.PropertyType)) {  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [typed-param]  		il.Emit (callOpCode' prop.GetGetMethod ());  		// stack is [parameters] [custom]  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [custom] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [custom] [command] [name]  		il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("AddParameter")' null);  		// stack is now [parameters]  		continue;  	}  	ITypeHandler handler;  	DbType dbType = LookupDbType (prop.PropertyType' prop.Name' true' out handler);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		// this actually represents special handling for list types;  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [command] [name]  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [command] [name] [typed-param]  		il.Emit (callOpCode' prop.GetGetMethod ());  		// stack is [parameters] [command] [name] [typed-value]  		if (prop.PropertyType.IsValueType) {  			il.Emit (OpCodes.Box' prop.PropertyType);  			// stack is [parameters] [command] [name] [boxed-value]  		}  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("PackListParameters")' null);  		// stack is [parameters]  		continue;  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters]  	il.Emit (OpCodes.Ldarg_0);  	// stack is now [parameters] [parameters] [command]  	if (checkForDuplicates) {  		// need to be a little careful about adding; use a utility method  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [command] [name]  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("FindOrAddParameter")' null);  		// stack is [parameters] [parameter]  	} else {  		// no risk of duplicates; just blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IDbCommand).GetMethod ("CreateParameter")' null);  		// stack is now [parameters] [parameters] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [parameters] [parameter] [parameter]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [parameter] [parameter] [name]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("ParameterName").GetSetMethod ()' null);  		// stack is now [parameters] [parameters] [parameter]  	}  	if (dbType != DbType.Time && handler == null)// https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time  	 {  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		if (dbType == DbType.Object && prop.PropertyType == typeof(object))// includes dynamic  		 {  			// look it up from the param value  			il.Emit (OpCodes.Ldloc_0);  			// stack is now [parameters] [[parameters]] [parameter] [parameter] [typed-param]  			il.Emit (callOpCode' prop.GetGetMethod ());  			// stack is [parameters] [[parameters]] [parameter] [parameter] [object-value]  			il.Emit (OpCodes.Call' typeof(SqlMapper).GetMethod ("GetDbType"' BindingFlags.Static | BindingFlags.Public));  			// stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type]  		} else {  			// constant value; nice and simple  			EmitInt32 (il' (int)dbType);  			// stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type]  		}  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("DbType").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	EmitInt32 (il' (int)ParameterDirection.Input);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [dir]  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Direction").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	il.Emit (OpCodes.Ldloc_0);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [typed-param]  	il.Emit (callOpCode' prop.GetGetMethod ());  	// stack is [parameters] [[parameters]] [parameter] [parameter] [typed-value]  	bool checkForNull = true;  	if (prop.PropertyType.IsValueType) {  		il.Emit (OpCodes.Box' prop.PropertyType);  		// stack is [parameters] [[parameters]] [parameter] [parameter] [boxed-value]  		if (Nullable.GetUnderlyingType (prop.PropertyType) == null) {  			// struct but not Nullable<T>; boxed value cannot be null  			checkForNull = false;  		}  	}  	if (checkForNull) {  		if ((dbType == DbType.String || dbType == DbType.AnsiString) && !haveInt32Arg1) {  			il.DeclareLocal (typeof(int));  			haveInt32Arg1 = true;  		}  		// relative stack: [boxed value]  		il.Emit (OpCodes.Dup);  		// relative stack: [boxed value] [boxed value]  		Label notNull = il.DefineLabel ();  		Label? allDone = (dbType == DbType.String || dbType == DbType.AnsiString) ? il.DefineLabel () : (Label?)null;  		il.Emit (OpCodes.Brtrue_S' notNull);  		// relative stack [boxed value = null]  		il.Emit (OpCodes.Pop);  		// relative stack empty  		il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  		// relative stack [DBNull]  		if (dbType == DbType.String || dbType == DbType.AnsiString) {  			EmitInt32 (il' 0);  			il.Emit (OpCodes.Stloc_1);  		}  		if (allDone != null)  			il.Emit (OpCodes.Br_S' allDone.Value);  		il.MarkLabel (notNull);  		if (prop.PropertyType == typeof(string)) {  			il.Emit (OpCodes.Dup);  			// [string] [string]  			il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  			// [string] [length]  			EmitInt32 (il' DbString.DefaultLength);  			// [string] [length] [4000]  			il.Emit (OpCodes.Cgt);  			// [string] [0 or 1]  			Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  			il.Emit (OpCodes.Brtrue_S' isLong);  			EmitInt32 (il' DbString.DefaultLength);  			// [string] [4000]  			il.Emit (OpCodes.Br_S' lenDone);  			il.MarkLabel (isLong);  			EmitInt32 (il' -1);  			// [string] [-1]  			il.MarkLabel (lenDone);  			il.Emit (OpCodes.Stloc_1);  			// [string]   		}  		if (prop.PropertyType.FullName == LinqBinary) {  			il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  		}  		if (allDone != null)  			il.MarkLabel (allDone.Value);  		// relative stack [boxed value or DBNull]  	}  	if (handler != null) {  		#pragma  		il.Emit (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (prop.PropertyType).GetMethod ("SetValue"));  		// stack is now [parameters] [[parameters]] [parameter]  		#pragma  	} else {  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Value").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  	}  	if (prop.PropertyType == typeof(string)) {  		var endOfSize = il.DefineLabel ();  		// don't set if 0  		il.Emit (OpCodes.Ldloc_1);  		// [parameters] [[parameters]] [parameter] [size]  		il.Emit (OpCodes.Brfalse_S' endOfSize);  		// [parameters] [[parameters]] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		il.Emit (OpCodes.Ldloc_1);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [size]  		il.EmitCall (OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty ("Size").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  		il.MarkLabel (endOfSize);  	}  	if (checkForDuplicates) {  		// stack is now [parameters] [parameter]  		il.Emit (OpCodes.Pop);  		// don't need parameter any more  	} else {  		// stack is now [parameters] [parameters] [parameter]  		// blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IList).GetMethod ("Add")' null);  		// stack is now [parameters]  		il.Emit (OpCodes.Pop);  		// IList.Add returns the new index (int); we don't care  	}  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: foreach (var prop in props) {  	if (typeof(ICustomQueryParameter).IsAssignableFrom (prop.PropertyType)) {  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [typed-param]  		il.Emit (callOpCode' prop.GetGetMethod ());  		// stack is [parameters] [custom]  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [custom] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [custom] [command] [name]  		il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("AddParameter")' null);  		// stack is now [parameters]  		continue;  	}  	ITypeHandler handler;  	DbType dbType = LookupDbType (prop.PropertyType' prop.Name' true' out handler);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		// this actually represents special handling for list types;  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [parameters] [command]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [command] [name]  		il.Emit (OpCodes.Ldloc_0);  		// stack is now [parameters] [command] [name] [typed-param]  		il.Emit (callOpCode' prop.GetGetMethod ());  		// stack is [parameters] [command] [name] [typed-value]  		if (prop.PropertyType.IsValueType) {  			il.Emit (OpCodes.Box' prop.PropertyType);  			// stack is [parameters] [command] [name] [boxed-value]  		}  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("PackListParameters")' null);  		// stack is [parameters]  		continue;  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [parameters]  	il.Emit (OpCodes.Ldarg_0);  	// stack is now [parameters] [parameters] [command]  	if (checkForDuplicates) {  		// need to be a little careful about adding; use a utility method  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [command] [name]  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod ("FindOrAddParameter")' null);  		// stack is [parameters] [parameter]  	} else {  		// no risk of duplicates; just blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IDbCommand).GetMethod ("CreateParameter")' null);  		// stack is now [parameters] [parameters] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [parameters] [parameter] [parameter]  		il.Emit (OpCodes.Ldstr' prop.Name);  		// stack is now [parameters] [parameters] [parameter] [parameter] [name]  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("ParameterName").GetSetMethod ()' null);  		// stack is now [parameters] [parameters] [parameter]  	}  	if (dbType != DbType.Time && handler == null)// https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time  	 {  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		if (dbType == DbType.Object && prop.PropertyType == typeof(object))// includes dynamic  		 {  			// look it up from the param value  			il.Emit (OpCodes.Ldloc_0);  			// stack is now [parameters] [[parameters]] [parameter] [parameter] [typed-param]  			il.Emit (callOpCode' prop.GetGetMethod ());  			// stack is [parameters] [[parameters]] [parameter] [parameter] [object-value]  			il.Emit (OpCodes.Call' typeof(SqlMapper).GetMethod ("GetDbType"' BindingFlags.Static | BindingFlags.Public));  			// stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type]  		} else {  			// constant value; nice and simple  			EmitInt32 (il' (int)dbType);  			// stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type]  		}  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("DbType").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  	}  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	EmitInt32 (il' (int)ParameterDirection.Input);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [dir]  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Direction").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  	il.Emit (OpCodes.Dup);  	// stack is now [parameters] [[parameters]] [parameter] [parameter]  	il.Emit (OpCodes.Ldloc_0);  	// stack is now [parameters] [[parameters]] [parameter] [parameter] [typed-param]  	il.Emit (callOpCode' prop.GetGetMethod ());  	// stack is [parameters] [[parameters]] [parameter] [parameter] [typed-value]  	bool checkForNull = true;  	if (prop.PropertyType.IsValueType) {  		il.Emit (OpCodes.Box' prop.PropertyType);  		// stack is [parameters] [[parameters]] [parameter] [parameter] [boxed-value]  		if (Nullable.GetUnderlyingType (prop.PropertyType) == null) {  			// struct but not Nullable<T>; boxed value cannot be null  			checkForNull = false;  		}  	}  	if (checkForNull) {  		if ((dbType == DbType.String || dbType == DbType.AnsiString) && !haveInt32Arg1) {  			il.DeclareLocal (typeof(int));  			haveInt32Arg1 = true;  		}  		// relative stack: [boxed value]  		il.Emit (OpCodes.Dup);  		// relative stack: [boxed value] [boxed value]  		Label notNull = il.DefineLabel ();  		Label? allDone = (dbType == DbType.String || dbType == DbType.AnsiString) ? il.DefineLabel () : (Label?)null;  		il.Emit (OpCodes.Brtrue_S' notNull);  		// relative stack [boxed value = null]  		il.Emit (OpCodes.Pop);  		// relative stack empty  		il.Emit (OpCodes.Ldsfld' typeof(DBNull).GetField ("Value"));  		// relative stack [DBNull]  		if (dbType == DbType.String || dbType == DbType.AnsiString) {  			EmitInt32 (il' 0);  			il.Emit (OpCodes.Stloc_1);  		}  		if (allDone != null)  			il.Emit (OpCodes.Br_S' allDone.Value);  		il.MarkLabel (notNull);  		if (prop.PropertyType == typeof(string)) {  			il.Emit (OpCodes.Dup);  			// [string] [string]  			il.EmitCall (OpCodes.Callvirt' typeof(string).GetProperty ("Length").GetGetMethod ()' null);  			// [string] [length]  			EmitInt32 (il' DbString.DefaultLength);  			// [string] [length] [4000]  			il.Emit (OpCodes.Cgt);  			// [string] [0 or 1]  			Label isLong = il.DefineLabel ()' lenDone = il.DefineLabel ();  			il.Emit (OpCodes.Brtrue_S' isLong);  			EmitInt32 (il' DbString.DefaultLength);  			// [string] [4000]  			il.Emit (OpCodes.Br_S' lenDone);  			il.MarkLabel (isLong);  			EmitInt32 (il' -1);  			// [string] [-1]  			il.MarkLabel (lenDone);  			il.Emit (OpCodes.Stloc_1);  			// [string]   		}  		if (prop.PropertyType.FullName == LinqBinary) {  			il.EmitCall (OpCodes.Callvirt' prop.PropertyType.GetMethod ("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);  		}  		if (allDone != null)  			il.MarkLabel (allDone.Value);  		// relative stack [boxed value or DBNull]  	}  	if (handler != null) {  		#pragma  		il.Emit (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (prop.PropertyType).GetMethod ("SetValue"));  		// stack is now [parameters] [[parameters]] [parameter]  		#pragma  	} else {  		il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Value").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  	}  	if (prop.PropertyType == typeof(string)) {  		var endOfSize = il.DefineLabel ();  		// don't set if 0  		il.Emit (OpCodes.Ldloc_1);  		// [parameters] [[parameters]] [parameter] [size]  		il.Emit (OpCodes.Brfalse_S' endOfSize);  		// [parameters] [[parameters]] [parameter]  		il.Emit (OpCodes.Dup);  		// stack is now [parameters] [[parameters]] [parameter] [parameter]  		il.Emit (OpCodes.Ldloc_1);  		// stack is now [parameters] [[parameters]] [parameter] [parameter] [size]  		il.EmitCall (OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty ("Size").GetSetMethod ()' null);  		// stack is now [parameters] [[parameters]] [parameter]  		il.MarkLabel (endOfSize);  	}  	if (checkForDuplicates) {  		// stack is now [parameters] [parameter]  		il.Emit (OpCodes.Pop);  		// don't need parameter any more  	} else {  		// stack is now [parameters] [parameters] [parameter]  		// blindly add  		il.EmitCall (OpCodes.Callvirt' typeof(IList).GetMethod ("Add")' null);  		// stack is now [parameters]  		il.Emit (OpCodes.Pop);  		// IList.Add returns the new index (int); we don't care  	}  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (handler != null) {  	#pragma  	il.Emit (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (prop.PropertyType).GetMethod ("SetValue"));  	// stack is now [parameters] [[parameters]] [parameter]  	#pragma  } else {  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Value").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: if (handler != null) {  	#pragma  	il.Emit (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (prop.PropertyType).GetMethod ("SetValue"));  	// stack is now [parameters] [[parameters]] [parameter]  	#pragma  } else {  	il.EmitCall (OpCodes.Callvirt' typeof(IDataParameter).GetProperty ("Value").GetSetMethod ()' null);  	// stack is now [parameters] [[parameters]] [parameter]  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: foreach (var item in members) {  	if (item != null) {  		if (specializedConstructor == null)  			il.Emit (OpCodes.Dup);  		// stack is now [target][target]  		Label isDbNullLabel = il.DefineLabel ();  		Label finishLabel = il.DefineLabel ();  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [target][target][reader]  		EmitInt32 (il' index);  		// stack is now [target][target][reader][index]  		il.Emit (OpCodes.Dup);  		// stack is now [target][target][reader][index][index]  		il.Emit (OpCodes.Stloc_0);  		// stack is now [target][target][reader][index]  		il.Emit (OpCodes.Callvirt' getItem);  		// stack is now [target][target][value-as-object]  		il.Emit (OpCodes.Dup);  		// stack is now [target][target][value-as-object][value-as-object]  		StoreLocal (il' valueCopyLocal);  		Type colType = reader.GetFieldType (index);  		Type memberType = item.MemberType;  		if (memberType == typeof(char) || memberType == typeof(char?)) {  			il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod (memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null);  			// stack is now [target][target][typed-value]  		} else {  			il.Emit (OpCodes.Dup);  			// stack is now [target][target][value][value]  			il.Emit (OpCodes.Isinst' typeof(DBNull));  			// stack is now [target][target][value-as-object][DBNull or null]  			il.Emit (OpCodes.Brtrue_S' isDbNullLabel);  			// stack is now [target][target][value-as-object]  			// unbox nullable enums as the primitive' i.e. byte etc  			var nullUnderlyingType = Nullable.GetUnderlyingType (memberType);  			var unboxType = nullUnderlyingType != null && nullUnderlyingType.IsEnum ? nullUnderlyingType : memberType;  			if (unboxType.IsEnum) {  				Type numericType = Enum.GetUnderlyingType (unboxType);  				if (colType == typeof(string)) {  					if (enumDeclareLocal == -1) {  						enumDeclareLocal = il.DeclareLocal (typeof(string)).LocalIndex;  					}  					il.Emit (OpCodes.Castclass' typeof(string));  					// stack is now [target][target][string]  					StoreLocal (il' enumDeclareLocal);  					// stack is now [target][target]  					il.Emit (OpCodes.Ldtoken' unboxType);  					// stack is now [target][target][enum-type-token]  					il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  					// stack is now [target][target][enum-type]  					LoadLocal (il' enumDeclareLocal);  					// stack is now [target][target][enum-type][string]  					il.Emit (OpCodes.Ldc_I4_1);  					// stack is now [target][target][enum-type][string][true]  					il.EmitCall (OpCodes.Call' enumParse' null);  					// stack is now [target][target][enum-as-object]  					il.Emit (OpCodes.Unbox_Any' unboxType);  					// stack is now [target][target][typed-value]  				} else {  					FlexibleConvertBoxedFromHeadOfStack (il' colType' unboxType' numericType);  				}  				if (nullUnderlyingType != null) {  					il.Emit (OpCodes.Newobj' memberType.GetConstructor (new[] {  						nullUnderlyingType  					}));  					// stack is now [target][target][typed-value]  				}  			} else if (memberType.FullName == LinqBinary) {  				il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  				// stack is now [target][target][byte-array]  				il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  					typeof(byte[])  				}));  				// stack is now [target][target][binary]  			} else {  				TypeCode dataTypeCode = Type.GetTypeCode (colType)' unboxTypeCode = Type.GetTypeCode (unboxType);  				bool hasTypeHandler;  				if ((hasTypeHandler = typeHandlers.ContainsKey (unboxType)) || colType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  					if (hasTypeHandler) {  						#pragma  						il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  						// stack is now [target][target][typed-value]  						#pragma  					} else {  						il.Emit (OpCodes.Unbox_Any' unboxType);  						// stack is now [target][target][typed-value]  					}  				} else {  					// not a direct match; need to tweak the unbox  					FlexibleConvertBoxedFromHeadOfStack (il' colType' nullUnderlyingType ?? unboxType' null);  					if (nullUnderlyingType != null) {  						il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  							nullUnderlyingType  						}));  						// stack is now [target][target][typed-value]  					}  				}  			}  		}  		if (specializedConstructor == null) {  			// Store the value in the property/field  			if (item.Property != null) {  				if (type.IsValueType) {  					il.Emit (OpCodes.Call' DefaultTypeMap.GetPropertySetter (item.Property' type));  					// stack is now [target]  				} else {  					il.Emit (OpCodes.Callvirt' DefaultTypeMap.GetPropertySetter (item.Property' type));  					// stack is now [target]  				}  			} else {  				il.Emit (OpCodes.Stfld' item.Field);  				// stack is now [target]  			}  		}  		il.Emit (OpCodes.Br_S' finishLabel);  		// stack is now [target]  		il.MarkLabel (isDbNullLabel);  		// incoming stack: [target][target][value]  		if (specializedConstructor != null) {  			il.Emit (OpCodes.Pop);  			if (item.MemberType.IsValueType) {  				int localIndex = il.DeclareLocal (item.MemberType).LocalIndex;  				LoadLocalAddress (il' localIndex);  				il.Emit (OpCodes.Initobj' item.MemberType);  				LoadLocal (il' localIndex);  			} else {  				il.Emit (OpCodes.Ldnull);  			}  		} else {  			il.Emit (OpCodes.Pop);  			// stack is now [target][target]  			il.Emit (OpCodes.Pop);  			// stack is now [target]  		}  		if (first && returnNullIfFirstMissing) {  			il.Emit (OpCodes.Pop);  			il.Emit (OpCodes.Ldnull);  			// stack is now [null]  			il.Emit (OpCodes.Stloc_1);  			il.Emit (OpCodes.Br' allDone);  		}  		il.MarkLabel (finishLabel);  	}  	first = false;  	index += 1;  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: foreach (var item in members) {  	if (item != null) {  		if (specializedConstructor == null)  			il.Emit (OpCodes.Dup);  		// stack is now [target][target]  		Label isDbNullLabel = il.DefineLabel ();  		Label finishLabel = il.DefineLabel ();  		il.Emit (OpCodes.Ldarg_0);  		// stack is now [target][target][reader]  		EmitInt32 (il' index);  		// stack is now [target][target][reader][index]  		il.Emit (OpCodes.Dup);  		// stack is now [target][target][reader][index][index]  		il.Emit (OpCodes.Stloc_0);  		// stack is now [target][target][reader][index]  		il.Emit (OpCodes.Callvirt' getItem);  		// stack is now [target][target][value-as-object]  		il.Emit (OpCodes.Dup);  		// stack is now [target][target][value-as-object][value-as-object]  		StoreLocal (il' valueCopyLocal);  		Type colType = reader.GetFieldType (index);  		Type memberType = item.MemberType;  		if (memberType == typeof(char) || memberType == typeof(char?)) {  			il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod (memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null);  			// stack is now [target][target][typed-value]  		} else {  			il.Emit (OpCodes.Dup);  			// stack is now [target][target][value][value]  			il.Emit (OpCodes.Isinst' typeof(DBNull));  			// stack is now [target][target][value-as-object][DBNull or null]  			il.Emit (OpCodes.Brtrue_S' isDbNullLabel);  			// stack is now [target][target][value-as-object]  			// unbox nullable enums as the primitive' i.e. byte etc  			var nullUnderlyingType = Nullable.GetUnderlyingType (memberType);  			var unboxType = nullUnderlyingType != null && nullUnderlyingType.IsEnum ? nullUnderlyingType : memberType;  			if (unboxType.IsEnum) {  				Type numericType = Enum.GetUnderlyingType (unboxType);  				if (colType == typeof(string)) {  					if (enumDeclareLocal == -1) {  						enumDeclareLocal = il.DeclareLocal (typeof(string)).LocalIndex;  					}  					il.Emit (OpCodes.Castclass' typeof(string));  					// stack is now [target][target][string]  					StoreLocal (il' enumDeclareLocal);  					// stack is now [target][target]  					il.Emit (OpCodes.Ldtoken' unboxType);  					// stack is now [target][target][enum-type-token]  					il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  					// stack is now [target][target][enum-type]  					LoadLocal (il' enumDeclareLocal);  					// stack is now [target][target][enum-type][string]  					il.Emit (OpCodes.Ldc_I4_1);  					// stack is now [target][target][enum-type][string][true]  					il.EmitCall (OpCodes.Call' enumParse' null);  					// stack is now [target][target][enum-as-object]  					il.Emit (OpCodes.Unbox_Any' unboxType);  					// stack is now [target][target][typed-value]  				} else {  					FlexibleConvertBoxedFromHeadOfStack (il' colType' unboxType' numericType);  				}  				if (nullUnderlyingType != null) {  					il.Emit (OpCodes.Newobj' memberType.GetConstructor (new[] {  						nullUnderlyingType  					}));  					// stack is now [target][target][typed-value]  				}  			} else if (memberType.FullName == LinqBinary) {  				il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  				// stack is now [target][target][byte-array]  				il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  					typeof(byte[])  				}));  				// stack is now [target][target][binary]  			} else {  				TypeCode dataTypeCode = Type.GetTypeCode (colType)' unboxTypeCode = Type.GetTypeCode (unboxType);  				bool hasTypeHandler;  				if ((hasTypeHandler = typeHandlers.ContainsKey (unboxType)) || colType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  					if (hasTypeHandler) {  						#pragma  						il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  						// stack is now [target][target][typed-value]  						#pragma  					} else {  						il.Emit (OpCodes.Unbox_Any' unboxType);  						// stack is now [target][target][typed-value]  					}  				} else {  					// not a direct match; need to tweak the unbox  					FlexibleConvertBoxedFromHeadOfStack (il' colType' nullUnderlyingType ?? unboxType' null);  					if (nullUnderlyingType != null) {  						il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  							nullUnderlyingType  						}));  						// stack is now [target][target][typed-value]  					}  				}  			}  		}  		if (specializedConstructor == null) {  			// Store the value in the property/field  			if (item.Property != null) {  				if (type.IsValueType) {  					il.Emit (OpCodes.Call' DefaultTypeMap.GetPropertySetter (item.Property' type));  					// stack is now [target]  				} else {  					il.Emit (OpCodes.Callvirt' DefaultTypeMap.GetPropertySetter (item.Property' type));  					// stack is now [target]  				}  			} else {  				il.Emit (OpCodes.Stfld' item.Field);  				// stack is now [target]  			}  		}  		il.Emit (OpCodes.Br_S' finishLabel);  		// stack is now [target]  		il.MarkLabel (isDbNullLabel);  		// incoming stack: [target][target][value]  		if (specializedConstructor != null) {  			il.Emit (OpCodes.Pop);  			if (item.MemberType.IsValueType) {  				int localIndex = il.DeclareLocal (item.MemberType).LocalIndex;  				LoadLocalAddress (il' localIndex);  				il.Emit (OpCodes.Initobj' item.MemberType);  				LoadLocal (il' localIndex);  			} else {  				il.Emit (OpCodes.Ldnull);  			}  		} else {  			il.Emit (OpCodes.Pop);  			// stack is now [target][target]  			il.Emit (OpCodes.Pop);  			// stack is now [target]  		}  		if (first && returnNullIfFirstMissing) {  			il.Emit (OpCodes.Pop);  			il.Emit (OpCodes.Ldnull);  			// stack is now [null]  			il.Emit (OpCodes.Stloc_1);  			il.Emit (OpCodes.Br' allDone);  		}  		il.MarkLabel (finishLabel);  	}  	first = false;  	index += 1;  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (item != null) {  	if (specializedConstructor == null)  		il.Emit (OpCodes.Dup);  	// stack is now [target][target]  	Label isDbNullLabel = il.DefineLabel ();  	Label finishLabel = il.DefineLabel ();  	il.Emit (OpCodes.Ldarg_0);  	// stack is now [target][target][reader]  	EmitInt32 (il' index);  	// stack is now [target][target][reader][index]  	il.Emit (OpCodes.Dup);  	// stack is now [target][target][reader][index][index]  	il.Emit (OpCodes.Stloc_0);  	// stack is now [target][target][reader][index]  	il.Emit (OpCodes.Callvirt' getItem);  	// stack is now [target][target][value-as-object]  	il.Emit (OpCodes.Dup);  	// stack is now [target][target][value-as-object][value-as-object]  	StoreLocal (il' valueCopyLocal);  	Type colType = reader.GetFieldType (index);  	Type memberType = item.MemberType;  	if (memberType == typeof(char) || memberType == typeof(char?)) {  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod (memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null);  		// stack is now [target][target][typed-value]  	} else {  		il.Emit (OpCodes.Dup);  		// stack is now [target][target][value][value]  		il.Emit (OpCodes.Isinst' typeof(DBNull));  		// stack is now [target][target][value-as-object][DBNull or null]  		il.Emit (OpCodes.Brtrue_S' isDbNullLabel);  		// stack is now [target][target][value-as-object]  		// unbox nullable enums as the primitive' i.e. byte etc  		var nullUnderlyingType = Nullable.GetUnderlyingType (memberType);  		var unboxType = nullUnderlyingType != null && nullUnderlyingType.IsEnum ? nullUnderlyingType : memberType;  		if (unboxType.IsEnum) {  			Type numericType = Enum.GetUnderlyingType (unboxType);  			if (colType == typeof(string)) {  				if (enumDeclareLocal == -1) {  					enumDeclareLocal = il.DeclareLocal (typeof(string)).LocalIndex;  				}  				il.Emit (OpCodes.Castclass' typeof(string));  				// stack is now [target][target][string]  				StoreLocal (il' enumDeclareLocal);  				// stack is now [target][target]  				il.Emit (OpCodes.Ldtoken' unboxType);  				// stack is now [target][target][enum-type-token]  				il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  				// stack is now [target][target][enum-type]  				LoadLocal (il' enumDeclareLocal);  				// stack is now [target][target][enum-type][string]  				il.Emit (OpCodes.Ldc_I4_1);  				// stack is now [target][target][enum-type][string][true]  				il.EmitCall (OpCodes.Call' enumParse' null);  				// stack is now [target][target][enum-as-object]  				il.Emit (OpCodes.Unbox_Any' unboxType);  				// stack is now [target][target][typed-value]  			} else {  				FlexibleConvertBoxedFromHeadOfStack (il' colType' unboxType' numericType);  			}  			if (nullUnderlyingType != null) {  				il.Emit (OpCodes.Newobj' memberType.GetConstructor (new[] {  					nullUnderlyingType  				}));  				// stack is now [target][target][typed-value]  			}  		} else if (memberType.FullName == LinqBinary) {  			il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  			// stack is now [target][target][byte-array]  			il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  				typeof(byte[])  			}));  			// stack is now [target][target][binary]  		} else {  			TypeCode dataTypeCode = Type.GetTypeCode (colType)' unboxTypeCode = Type.GetTypeCode (unboxType);  			bool hasTypeHandler;  			if ((hasTypeHandler = typeHandlers.ContainsKey (unboxType)) || colType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  				if (hasTypeHandler) {  					#pragma  					il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  					// stack is now [target][target][typed-value]  					#pragma  				} else {  					il.Emit (OpCodes.Unbox_Any' unboxType);  					// stack is now [target][target][typed-value]  				}  			} else {  				// not a direct match; need to tweak the unbox  				FlexibleConvertBoxedFromHeadOfStack (il' colType' nullUnderlyingType ?? unboxType' null);  				if (nullUnderlyingType != null) {  					il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  						nullUnderlyingType  					}));  					// stack is now [target][target][typed-value]  				}  			}  		}  	}  	if (specializedConstructor == null) {  		// Store the value in the property/field  		if (item.Property != null) {  			if (type.IsValueType) {  				il.Emit (OpCodes.Call' DefaultTypeMap.GetPropertySetter (item.Property' type));  				// stack is now [target]  			} else {  				il.Emit (OpCodes.Callvirt' DefaultTypeMap.GetPropertySetter (item.Property' type));  				// stack is now [target]  			}  		} else {  			il.Emit (OpCodes.Stfld' item.Field);  			// stack is now [target]  		}  	}  	il.Emit (OpCodes.Br_S' finishLabel);  	// stack is now [target]  	il.MarkLabel (isDbNullLabel);  	// incoming stack: [target][target][value]  	if (specializedConstructor != null) {  		il.Emit (OpCodes.Pop);  		if (item.MemberType.IsValueType) {  			int localIndex = il.DeclareLocal (item.MemberType).LocalIndex;  			LoadLocalAddress (il' localIndex);  			il.Emit (OpCodes.Initobj' item.MemberType);  			LoadLocal (il' localIndex);  		} else {  			il.Emit (OpCodes.Ldnull);  		}  	} else {  		il.Emit (OpCodes.Pop);  		// stack is now [target][target]  		il.Emit (OpCodes.Pop);  		// stack is now [target]  	}  	if (first && returnNullIfFirstMissing) {  		il.Emit (OpCodes.Pop);  		il.Emit (OpCodes.Ldnull);  		// stack is now [null]  		il.Emit (OpCodes.Stloc_1);  		il.Emit (OpCodes.Br' allDone);  	}  	il.MarkLabel (finishLabel);  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (item != null) {  	if (specializedConstructor == null)  		il.Emit (OpCodes.Dup);  	// stack is now [target][target]  	Label isDbNullLabel = il.DefineLabel ();  	Label finishLabel = il.DefineLabel ();  	il.Emit (OpCodes.Ldarg_0);  	// stack is now [target][target][reader]  	EmitInt32 (il' index);  	// stack is now [target][target][reader][index]  	il.Emit (OpCodes.Dup);  	// stack is now [target][target][reader][index][index]  	il.Emit (OpCodes.Stloc_0);  	// stack is now [target][target][reader][index]  	il.Emit (OpCodes.Callvirt' getItem);  	// stack is now [target][target][value-as-object]  	il.Emit (OpCodes.Dup);  	// stack is now [target][target][value-as-object][value-as-object]  	StoreLocal (il' valueCopyLocal);  	Type colType = reader.GetFieldType (index);  	Type memberType = item.MemberType;  	if (memberType == typeof(char) || memberType == typeof(char?)) {  		il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod (memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null);  		// stack is now [target][target][typed-value]  	} else {  		il.Emit (OpCodes.Dup);  		// stack is now [target][target][value][value]  		il.Emit (OpCodes.Isinst' typeof(DBNull));  		// stack is now [target][target][value-as-object][DBNull or null]  		il.Emit (OpCodes.Brtrue_S' isDbNullLabel);  		// stack is now [target][target][value-as-object]  		// unbox nullable enums as the primitive' i.e. byte etc  		var nullUnderlyingType = Nullable.GetUnderlyingType (memberType);  		var unboxType = nullUnderlyingType != null && nullUnderlyingType.IsEnum ? nullUnderlyingType : memberType;  		if (unboxType.IsEnum) {  			Type numericType = Enum.GetUnderlyingType (unboxType);  			if (colType == typeof(string)) {  				if (enumDeclareLocal == -1) {  					enumDeclareLocal = il.DeclareLocal (typeof(string)).LocalIndex;  				}  				il.Emit (OpCodes.Castclass' typeof(string));  				// stack is now [target][target][string]  				StoreLocal (il' enumDeclareLocal);  				// stack is now [target][target]  				il.Emit (OpCodes.Ldtoken' unboxType);  				// stack is now [target][target][enum-type-token]  				il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  				// stack is now [target][target][enum-type]  				LoadLocal (il' enumDeclareLocal);  				// stack is now [target][target][enum-type][string]  				il.Emit (OpCodes.Ldc_I4_1);  				// stack is now [target][target][enum-type][string][true]  				il.EmitCall (OpCodes.Call' enumParse' null);  				// stack is now [target][target][enum-as-object]  				il.Emit (OpCodes.Unbox_Any' unboxType);  				// stack is now [target][target][typed-value]  			} else {  				FlexibleConvertBoxedFromHeadOfStack (il' colType' unboxType' numericType);  			}  			if (nullUnderlyingType != null) {  				il.Emit (OpCodes.Newobj' memberType.GetConstructor (new[] {  					nullUnderlyingType  				}));  				// stack is now [target][target][typed-value]  			}  		} else if (memberType.FullName == LinqBinary) {  			il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  			// stack is now [target][target][byte-array]  			il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  				typeof(byte[])  			}));  			// stack is now [target][target][binary]  		} else {  			TypeCode dataTypeCode = Type.GetTypeCode (colType)' unboxTypeCode = Type.GetTypeCode (unboxType);  			bool hasTypeHandler;  			if ((hasTypeHandler = typeHandlers.ContainsKey (unboxType)) || colType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  				if (hasTypeHandler) {  					#pragma  					il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  					// stack is now [target][target][typed-value]  					#pragma  				} else {  					il.Emit (OpCodes.Unbox_Any' unboxType);  					// stack is now [target][target][typed-value]  				}  			} else {  				// not a direct match; need to tweak the unbox  				FlexibleConvertBoxedFromHeadOfStack (il' colType' nullUnderlyingType ?? unboxType' null);  				if (nullUnderlyingType != null) {  					il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  						nullUnderlyingType  					}));  					// stack is now [target][target][typed-value]  				}  			}  		}  	}  	if (specializedConstructor == null) {  		// Store the value in the property/field  		if (item.Property != null) {  			if (type.IsValueType) {  				il.Emit (OpCodes.Call' DefaultTypeMap.GetPropertySetter (item.Property' type));  				// stack is now [target]  			} else {  				il.Emit (OpCodes.Callvirt' DefaultTypeMap.GetPropertySetter (item.Property' type));  				// stack is now [target]  			}  		} else {  			il.Emit (OpCodes.Stfld' item.Field);  			// stack is now [target]  		}  	}  	il.Emit (OpCodes.Br_S' finishLabel);  	// stack is now [target]  	il.MarkLabel (isDbNullLabel);  	// incoming stack: [target][target][value]  	if (specializedConstructor != null) {  		il.Emit (OpCodes.Pop);  		if (item.MemberType.IsValueType) {  			int localIndex = il.DeclareLocal (item.MemberType).LocalIndex;  			LoadLocalAddress (il' localIndex);  			il.Emit (OpCodes.Initobj' item.MemberType);  			LoadLocal (il' localIndex);  		} else {  			il.Emit (OpCodes.Ldnull);  		}  	} else {  		il.Emit (OpCodes.Pop);  		// stack is now [target][target]  		il.Emit (OpCodes.Pop);  		// stack is now [target]  	}  	if (first && returnNullIfFirstMissing) {  		il.Emit (OpCodes.Pop);  		il.Emit (OpCodes.Ldnull);  		// stack is now [null]  		il.Emit (OpCodes.Stloc_1);  		il.Emit (OpCodes.Br' allDone);  	}  	il.MarkLabel (finishLabel);  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (memberType == typeof(char) || memberType == typeof(char?)) {  	il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod (memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null);  	// stack is now [target][target][typed-value]  } else {  	il.Emit (OpCodes.Dup);  	// stack is now [target][target][value][value]  	il.Emit (OpCodes.Isinst' typeof(DBNull));  	// stack is now [target][target][value-as-object][DBNull or null]  	il.Emit (OpCodes.Brtrue_S' isDbNullLabel);  	// stack is now [target][target][value-as-object]  	// unbox nullable enums as the primitive' i.e. byte etc  	var nullUnderlyingType = Nullable.GetUnderlyingType (memberType);  	var unboxType = nullUnderlyingType != null && nullUnderlyingType.IsEnum ? nullUnderlyingType : memberType;  	if (unboxType.IsEnum) {  		Type numericType = Enum.GetUnderlyingType (unboxType);  		if (colType == typeof(string)) {  			if (enumDeclareLocal == -1) {  				enumDeclareLocal = il.DeclareLocal (typeof(string)).LocalIndex;  			}  			il.Emit (OpCodes.Castclass' typeof(string));  			// stack is now [target][target][string]  			StoreLocal (il' enumDeclareLocal);  			// stack is now [target][target]  			il.Emit (OpCodes.Ldtoken' unboxType);  			// stack is now [target][target][enum-type-token]  			il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  			// stack is now [target][target][enum-type]  			LoadLocal (il' enumDeclareLocal);  			// stack is now [target][target][enum-type][string]  			il.Emit (OpCodes.Ldc_I4_1);  			// stack is now [target][target][enum-type][string][true]  			il.EmitCall (OpCodes.Call' enumParse' null);  			// stack is now [target][target][enum-as-object]  			il.Emit (OpCodes.Unbox_Any' unboxType);  			// stack is now [target][target][typed-value]  		} else {  			FlexibleConvertBoxedFromHeadOfStack (il' colType' unboxType' numericType);  		}  		if (nullUnderlyingType != null) {  			il.Emit (OpCodes.Newobj' memberType.GetConstructor (new[] {  				nullUnderlyingType  			}));  			// stack is now [target][target][typed-value]  		}  	} else if (memberType.FullName == LinqBinary) {  		il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  		// stack is now [target][target][byte-array]  		il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  			typeof(byte[])  		}));  		// stack is now [target][target][binary]  	} else {  		TypeCode dataTypeCode = Type.GetTypeCode (colType)' unboxTypeCode = Type.GetTypeCode (unboxType);  		bool hasTypeHandler;  		if ((hasTypeHandler = typeHandlers.ContainsKey (unboxType)) || colType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  			if (hasTypeHandler) {  				#pragma  				il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  				// stack is now [target][target][typed-value]  				#pragma  			} else {  				il.Emit (OpCodes.Unbox_Any' unboxType);  				// stack is now [target][target][typed-value]  			}  		} else {  			// not a direct match; need to tweak the unbox  			FlexibleConvertBoxedFromHeadOfStack (il' colType' nullUnderlyingType ?? unboxType' null);  			if (nullUnderlyingType != null) {  				il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  					nullUnderlyingType  				}));  				// stack is now [target][target][typed-value]  			}  		}  	}  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (memberType == typeof(char) || memberType == typeof(char?)) {  	il.EmitCall (OpCodes.Call' typeof(SqlMapper).GetMethod (memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null);  	// stack is now [target][target][typed-value]  } else {  	il.Emit (OpCodes.Dup);  	// stack is now [target][target][value][value]  	il.Emit (OpCodes.Isinst' typeof(DBNull));  	// stack is now [target][target][value-as-object][DBNull or null]  	il.Emit (OpCodes.Brtrue_S' isDbNullLabel);  	// stack is now [target][target][value-as-object]  	// unbox nullable enums as the primitive' i.e. byte etc  	var nullUnderlyingType = Nullable.GetUnderlyingType (memberType);  	var unboxType = nullUnderlyingType != null && nullUnderlyingType.IsEnum ? nullUnderlyingType : memberType;  	if (unboxType.IsEnum) {  		Type numericType = Enum.GetUnderlyingType (unboxType);  		if (colType == typeof(string)) {  			if (enumDeclareLocal == -1) {  				enumDeclareLocal = il.DeclareLocal (typeof(string)).LocalIndex;  			}  			il.Emit (OpCodes.Castclass' typeof(string));  			// stack is now [target][target][string]  			StoreLocal (il' enumDeclareLocal);  			// stack is now [target][target]  			il.Emit (OpCodes.Ldtoken' unboxType);  			// stack is now [target][target][enum-type-token]  			il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  			// stack is now [target][target][enum-type]  			LoadLocal (il' enumDeclareLocal);  			// stack is now [target][target][enum-type][string]  			il.Emit (OpCodes.Ldc_I4_1);  			// stack is now [target][target][enum-type][string][true]  			il.EmitCall (OpCodes.Call' enumParse' null);  			// stack is now [target][target][enum-as-object]  			il.Emit (OpCodes.Unbox_Any' unboxType);  			// stack is now [target][target][typed-value]  		} else {  			FlexibleConvertBoxedFromHeadOfStack (il' colType' unboxType' numericType);  		}  		if (nullUnderlyingType != null) {  			il.Emit (OpCodes.Newobj' memberType.GetConstructor (new[] {  				nullUnderlyingType  			}));  			// stack is now [target][target][typed-value]  		}  	} else if (memberType.FullName == LinqBinary) {  		il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  		// stack is now [target][target][byte-array]  		il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  			typeof(byte[])  		}));  		// stack is now [target][target][binary]  	} else {  		TypeCode dataTypeCode = Type.GetTypeCode (colType)' unboxTypeCode = Type.GetTypeCode (unboxType);  		bool hasTypeHandler;  		if ((hasTypeHandler = typeHandlers.ContainsKey (unboxType)) || colType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  			if (hasTypeHandler) {  				#pragma  				il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  				// stack is now [target][target][typed-value]  				#pragma  			} else {  				il.Emit (OpCodes.Unbox_Any' unboxType);  				// stack is now [target][target][typed-value]  			}  		} else {  			// not a direct match; need to tweak the unbox  			FlexibleConvertBoxedFromHeadOfStack (il' colType' nullUnderlyingType ?? unboxType' null);  			if (nullUnderlyingType != null) {  				il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  					nullUnderlyingType  				}));  				// stack is now [target][target][typed-value]  			}  		}  	}  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (unboxType.IsEnum) {  	Type numericType = Enum.GetUnderlyingType (unboxType);  	if (colType == typeof(string)) {  		if (enumDeclareLocal == -1) {  			enumDeclareLocal = il.DeclareLocal (typeof(string)).LocalIndex;  		}  		il.Emit (OpCodes.Castclass' typeof(string));  		// stack is now [target][target][string]  		StoreLocal (il' enumDeclareLocal);  		// stack is now [target][target]  		il.Emit (OpCodes.Ldtoken' unboxType);  		// stack is now [target][target][enum-type-token]  		il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  		// stack is now [target][target][enum-type]  		LoadLocal (il' enumDeclareLocal);  		// stack is now [target][target][enum-type][string]  		il.Emit (OpCodes.Ldc_I4_1);  		// stack is now [target][target][enum-type][string][true]  		il.EmitCall (OpCodes.Call' enumParse' null);  		// stack is now [target][target][enum-as-object]  		il.Emit (OpCodes.Unbox_Any' unboxType);  		// stack is now [target][target][typed-value]  	} else {  		FlexibleConvertBoxedFromHeadOfStack (il' colType' unboxType' numericType);  	}  	if (nullUnderlyingType != null) {  		il.Emit (OpCodes.Newobj' memberType.GetConstructor (new[] {  			nullUnderlyingType  		}));  		// stack is now [target][target][typed-value]  	}  } else if (memberType.FullName == LinqBinary) {  	il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  	// stack is now [target][target][byte-array]  	il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  		typeof(byte[])  	}));  	// stack is now [target][target][binary]  } else {  	TypeCode dataTypeCode = Type.GetTypeCode (colType)' unboxTypeCode = Type.GetTypeCode (unboxType);  	bool hasTypeHandler;  	if ((hasTypeHandler = typeHandlers.ContainsKey (unboxType)) || colType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  		if (hasTypeHandler) {  			#pragma  			il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  			// stack is now [target][target][typed-value]  			#pragma  		} else {  			il.Emit (OpCodes.Unbox_Any' unboxType);  			// stack is now [target][target][typed-value]  		}  	} else {  		// not a direct match; need to tweak the unbox  		FlexibleConvertBoxedFromHeadOfStack (il' colType' nullUnderlyingType ?? unboxType' null);  		if (nullUnderlyingType != null) {  			il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  				nullUnderlyingType  			}));  			// stack is now [target][target][typed-value]  		}  	}  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (unboxType.IsEnum) {  	Type numericType = Enum.GetUnderlyingType (unboxType);  	if (colType == typeof(string)) {  		if (enumDeclareLocal == -1) {  			enumDeclareLocal = il.DeclareLocal (typeof(string)).LocalIndex;  		}  		il.Emit (OpCodes.Castclass' typeof(string));  		// stack is now [target][target][string]  		StoreLocal (il' enumDeclareLocal);  		// stack is now [target][target]  		il.Emit (OpCodes.Ldtoken' unboxType);  		// stack is now [target][target][enum-type-token]  		il.EmitCall (OpCodes.Call' typeof(Type).GetMethod ("GetTypeFromHandle")' null);  		// stack is now [target][target][enum-type]  		LoadLocal (il' enumDeclareLocal);  		// stack is now [target][target][enum-type][string]  		il.Emit (OpCodes.Ldc_I4_1);  		// stack is now [target][target][enum-type][string][true]  		il.EmitCall (OpCodes.Call' enumParse' null);  		// stack is now [target][target][enum-as-object]  		il.Emit (OpCodes.Unbox_Any' unboxType);  		// stack is now [target][target][typed-value]  	} else {  		FlexibleConvertBoxedFromHeadOfStack (il' colType' unboxType' numericType);  	}  	if (nullUnderlyingType != null) {  		il.Emit (OpCodes.Newobj' memberType.GetConstructor (new[] {  			nullUnderlyingType  		}));  		// stack is now [target][target][typed-value]  	}  } else if (memberType.FullName == LinqBinary) {  	il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  	// stack is now [target][target][byte-array]  	il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  		typeof(byte[])  	}));  	// stack is now [target][target][binary]  } else {  	TypeCode dataTypeCode = Type.GetTypeCode (colType)' unboxTypeCode = Type.GetTypeCode (unboxType);  	bool hasTypeHandler;  	if ((hasTypeHandler = typeHandlers.ContainsKey (unboxType)) || colType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  		if (hasTypeHandler) {  			#pragma  			il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  			// stack is now [target][target][typed-value]  			#pragma  		} else {  			il.Emit (OpCodes.Unbox_Any' unboxType);  			// stack is now [target][target][typed-value]  		}  	} else {  		// not a direct match; need to tweak the unbox  		FlexibleConvertBoxedFromHeadOfStack (il' colType' nullUnderlyingType ?? unboxType' null);  		if (nullUnderlyingType != null) {  			il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  				nullUnderlyingType  			}));  			// stack is now [target][target][typed-value]  		}  	}  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (memberType.FullName == LinqBinary) {  	il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  	// stack is now [target][target][byte-array]  	il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  		typeof(byte[])  	}));  	// stack is now [target][target][binary]  } else {  	TypeCode dataTypeCode = Type.GetTypeCode (colType)' unboxTypeCode = Type.GetTypeCode (unboxType);  	bool hasTypeHandler;  	if ((hasTypeHandler = typeHandlers.ContainsKey (unboxType)) || colType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  		if (hasTypeHandler) {  			#pragma  			il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  			// stack is now [target][target][typed-value]  			#pragma  		} else {  			il.Emit (OpCodes.Unbox_Any' unboxType);  			// stack is now [target][target][typed-value]  		}  	} else {  		// not a direct match; need to tweak the unbox  		FlexibleConvertBoxedFromHeadOfStack (il' colType' nullUnderlyingType ?? unboxType' null);  		if (nullUnderlyingType != null) {  			il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  				nullUnderlyingType  			}));  			// stack is now [target][target][typed-value]  		}  	}  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (memberType.FullName == LinqBinary) {  	il.Emit (OpCodes.Unbox_Any' typeof(byte[]));  	// stack is now [target][target][byte-array]  	il.Emit (OpCodes.Newobj' memberType.GetConstructor (new Type[] {  		typeof(byte[])  	}));  	// stack is now [target][target][binary]  } else {  	TypeCode dataTypeCode = Type.GetTypeCode (colType)' unboxTypeCode = Type.GetTypeCode (unboxType);  	bool hasTypeHandler;  	if ((hasTypeHandler = typeHandlers.ContainsKey (unboxType)) || colType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  		if (hasTypeHandler) {  			#pragma  			il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  			// stack is now [target][target][typed-value]  			#pragma  		} else {  			il.Emit (OpCodes.Unbox_Any' unboxType);  			// stack is now [target][target][typed-value]  		}  	} else {  		// not a direct match; need to tweak the unbox  		FlexibleConvertBoxedFromHeadOfStack (il' colType' nullUnderlyingType ?? unboxType' null);  		if (nullUnderlyingType != null) {  			il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  				nullUnderlyingType  			}));  			// stack is now [target][target][typed-value]  		}  	}  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if ((hasTypeHandler = typeHandlers.ContainsKey (unboxType)) || colType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  	if (hasTypeHandler) {  		#pragma  		il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  		// stack is now [target][target][typed-value]  		#pragma  	} else {  		il.Emit (OpCodes.Unbox_Any' unboxType);  		// stack is now [target][target][typed-value]  	}  } else {  	// not a direct match; need to tweak the unbox  	FlexibleConvertBoxedFromHeadOfStack (il' colType' nullUnderlyingType ?? unboxType' null);  	if (nullUnderlyingType != null) {  		il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  			nullUnderlyingType  		}));  		// stack is now [target][target][typed-value]  	}  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if ((hasTypeHandler = typeHandlers.ContainsKey (unboxType)) || colType == unboxType || dataTypeCode == unboxTypeCode || dataTypeCode == Type.GetTypeCode (nullUnderlyingType)) {  	if (hasTypeHandler) {  		#pragma  		il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  		// stack is now [target][target][typed-value]  		#pragma  	} else {  		il.Emit (OpCodes.Unbox_Any' unboxType);  		// stack is now [target][target][typed-value]  	}  } else {  	// not a direct match; need to tweak the unbox  	FlexibleConvertBoxedFromHeadOfStack (il' colType' nullUnderlyingType ?? unboxType' null);  	if (nullUnderlyingType != null) {  		il.Emit (OpCodes.Newobj' unboxType.GetConstructor (new[] {  			nullUnderlyingType  		}));  		// stack is now [target][target][typed-value]  	}  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (hasTypeHandler) {  	#pragma  	il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  	// stack is now [target][target][typed-value]  	#pragma  } else {  	il.Emit (OpCodes.Unbox_Any' unboxType);  	// stack is now [target][target][typed-value]  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,GetTypeDeserializer,The following statement contains a magic number: if (hasTypeHandler) {  	#pragma  	il.EmitCall (OpCodes.Call' typeof(TypeHandlerCache<>).MakeGenericType (unboxType).GetMethod ("Parse")' null);  	// stack is now [target][target][typed-value]  	#pragma  } else {  	il.Emit (OpCodes.Unbox_Any' unboxType);  	// stack is now [target][target][typed-value]  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,LoadLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	il.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	il.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	il.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Ldloc_S' (byte)index);  	} else {  		il.Emit (OpCodes.Ldloc' (short)index);  	}  	break;  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,LoadLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	il.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	il.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	il.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Ldloc_S' (byte)index);  	} else {  		il.Emit (OpCodes.Ldloc' (short)index);  	}  	break;  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,LoadLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	il.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	il.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	il.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Ldloc_S' (byte)index);  	} else {  		il.Emit (OpCodes.Ldloc' (short)index);  	}  	break;  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,LoadLocal,The following statement contains a magic number: if (index <= 255) {  	il.Emit (OpCodes.Ldloc_S' (byte)index);  } else {  	il.Emit (OpCodes.Ldloc' (short)index);  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,StoreLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Stloc_0);  	break;  case 1:  	il.Emit (OpCodes.Stloc_1);  	break;  case 2:  	il.Emit (OpCodes.Stloc_2);  	break;  case 3:  	il.Emit (OpCodes.Stloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Stloc_S' (byte)index);  	} else {  		il.Emit (OpCodes.Stloc' (short)index);  	}  	break;  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,StoreLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Stloc_0);  	break;  case 1:  	il.Emit (OpCodes.Stloc_1);  	break;  case 2:  	il.Emit (OpCodes.Stloc_2);  	break;  case 3:  	il.Emit (OpCodes.Stloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Stloc_S' (byte)index);  	} else {  		il.Emit (OpCodes.Stloc' (short)index);  	}  	break;  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,StoreLocal,The following statement contains a magic number: switch (index) {  case 0:  	il.Emit (OpCodes.Stloc_0);  	break;  case 1:  	il.Emit (OpCodes.Stloc_1);  	break;  case 2:  	il.Emit (OpCodes.Stloc_2);  	break;  case 3:  	il.Emit (OpCodes.Stloc_3);  	break;  default:  	if (index <= 255) {  		il.Emit (OpCodes.Stloc_S' (byte)index);  	} else {  		il.Emit (OpCodes.Stloc' (short)index);  	}  	break;  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,StoreLocal,The following statement contains a magic number: if (index <= 255) {  	il.Emit (OpCodes.Stloc_S' (byte)index);  } else {  	il.Emit (OpCodes.Stloc' (short)index);  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,LoadLocalAddress,The following statement contains a magic number: if (index <= 255) {  	il.Emit (OpCodes.Ldloca_S' (byte)index);  } else {  	il.Emit (OpCodes.Ldloca' (short)index);  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: switch (value) {  case -1:  	il.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value >= -128 && value <= 127) {  		il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		il.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: if (value >= -128 && value <= 127) {  	il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  } else {  	il.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,EmitInt32,The following statement contains a magic number: if (value >= -128 && value <= 127) {  	il.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  } else {  	il.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	if (param.CameFromTemplate)  		continue;  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	var isCustomQueryParameter = val is SqlMapper.ICustomQueryParameter;  	SqlMapper.ITypeHandler handler = null;  	if (dbType == null && val != null && !isCustomQueryParameter)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name' true' out handler);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	} else if (isCustomQueryParameter) {  		((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  	} else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		} else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Direction = param.ParameterDirection;  		if (handler == null) {  			p.Value = val ?? DBNull.Value;  			if (dbType != null && p.DbType != dbType) {  				p.DbType = dbType.Value;  			}  			var s = val as string;  			if (s != null) {  				if (s.Length <= DbString.DefaultLength) {  					p.Size = DbString.DefaultLength;  				}  			}  			if (param.Size != null) {  				p.Size = param.Size.Value;  			}  		} else {  			if (dbType != null)  				p.DbType = dbType.Value;  			if (param.Size != null)  				p.Size = param.Size.Value;  			handler.SetValue (p' val ?? DBNull.Value);  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	if (param.CameFromTemplate)  		continue;  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	var isCustomQueryParameter = val is SqlMapper.ICustomQueryParameter;  	SqlMapper.ITypeHandler handler = null;  	if (dbType == null && val != null && !isCustomQueryParameter)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name' true' out handler);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	} else if (isCustomQueryParameter) {  		((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  	} else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		} else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Direction = param.ParameterDirection;  		if (handler == null) {  			p.Value = val ?? DBNull.Value;  			if (dbType != null && p.DbType != dbType) {  				p.DbType = dbType.Value;  			}  			var s = val as string;  			if (s != null) {  				if (s.Length <= DbString.DefaultLength) {  					p.Size = DbString.DefaultLength;  				}  			}  			if (param.Size != null) {  				p.Size = param.Size.Value;  			}  		} else {  			if (dbType != null)  				p.DbType = dbType.Value;  			if (param.Size != null)  				p.Size = param.Size.Value;  			handler.SetValue (p' val ?? DBNull.Value);  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	if (param.CameFromTemplate)  		continue;  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	var isCustomQueryParameter = val is SqlMapper.ICustomQueryParameter;  	SqlMapper.ITypeHandler handler = null;  	if (dbType == null && val != null && !isCustomQueryParameter)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name' true' out handler);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	} else if (isCustomQueryParameter) {  		((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  	} else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		} else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Direction = param.ParameterDirection;  		if (handler == null) {  			p.Value = val ?? DBNull.Value;  			if (dbType != null && p.DbType != dbType) {  				p.DbType = dbType.Value;  			}  			var s = val as string;  			if (s != null) {  				if (s.Length <= DbString.DefaultLength) {  					p.Size = DbString.DefaultLength;  				}  			}  			if (param.Size != null) {  				p.Size = param.Size.Value;  			}  		} else {  			if (dbType != null)  				p.DbType = dbType.Value;  			if (param.Size != null)  				p.Size = param.Size.Value;  			handler.SetValue (p' val ?? DBNull.Value);  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values) {  	if (param.CameFromTemplate)  		continue;  	var dbType = param.DbType;  	var val = param.Value;  	string name = Clean (param.Name);  	var isCustomQueryParameter = val is SqlMapper.ICustomQueryParameter;  	SqlMapper.ITypeHandler handler = null;  	if (dbType == null && val != null && !isCustomQueryParameter)  		dbType = SqlMapper.LookupDbType (val.GetType ()' name' true' out handler);  	if (dbType == DynamicParameters.EnumerableMultiParameter) {  		#pragma  		SqlMapper.PackListParameters (command' name' val);  		#pragma  	} else if (isCustomQueryParameter) {  		((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  	} else {  		bool add = !command.Parameters.Contains (name);  		IDbDataParameter p;  		if (add) {  			p = command.CreateParameter ();  			p.ParameterName = name;  		} else {  			p = (IDbDataParameter)command.Parameters [name];  		}  		p.Direction = param.ParameterDirection;  		if (handler == null) {  			p.Value = val ?? DBNull.Value;  			if (dbType != null && p.DbType != dbType) {  				p.DbType = dbType.Value;  			}  			var s = val as string;  			if (s != null) {  				if (s.Length <= DbString.DefaultLength) {  					p.Size = DbString.DefaultLength;  				}  			}  			if (param.Size != null) {  				p.Size = param.Size.Value;  			}  		} else {  			if (dbType != null)  				p.DbType = dbType.Value;  			if (param.Size != null)  				p.Size = param.Size.Value;  			handler.SetValue (p' val ?? DBNull.Value);  		}  		if (add) {  			command.Parameters.Add (p);  		}  		param.AttachedParam = p;  	}  }  
Magic Number,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  } else if (isCustomQueryParameter) {  	((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  } else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	} else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Direction = param.ParameterDirection;  	if (handler == null) {  		p.Value = val ?? DBNull.Value;  		if (dbType != null && p.DbType != dbType) {  			p.DbType = dbType.Value;  		}  		var s = val as string;  		if (s != null) {  			if (s.Length <= DbString.DefaultLength) {  				p.Size = DbString.DefaultLength;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  	} else {  		if (dbType != null)  			p.DbType = dbType.Value;  		if (param.Size != null)  			p.Size = param.Size.Value;  		handler.SetValue (p' val ?? DBNull.Value);  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  } else if (isCustomQueryParameter) {  	((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  } else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	} else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Direction = param.ParameterDirection;  	if (handler == null) {  		p.Value = val ?? DBNull.Value;  		if (dbType != null && p.DbType != dbType) {  			p.DbType = dbType.Value;  		}  		var s = val as string;  		if (s != null) {  			if (s.Length <= DbString.DefaultLength) {  				p.Size = DbString.DefaultLength;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  	} else {  		if (dbType != null)  			p.DbType = dbType.Value;  		if (param.Size != null)  			p.Size = param.Size.Value;  		handler.SetValue (p' val ?? DBNull.Value);  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  } else if (isCustomQueryParameter) {  	((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  } else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	} else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Direction = param.ParameterDirection;  	if (handler == null) {  		p.Value = val ?? DBNull.Value;  		if (dbType != null && p.DbType != dbType) {  			p.DbType = dbType.Value;  		}  		var s = val as string;  		if (s != null) {  			if (s.Length <= DbString.DefaultLength) {  				p.Size = DbString.DefaultLength;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  	} else {  		if (dbType != null)  			p.DbType = dbType.Value;  		if (param.Size != null)  			p.Size = param.Size.Value;  		handler.SetValue (p' val ?? DBNull.Value);  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,AddParameters,The following statement contains a magic number: if (dbType == DynamicParameters.EnumerableMultiParameter) {  	#pragma  	SqlMapper.PackListParameters (command' name' val);  	#pragma  } else if (isCustomQueryParameter) {  	((SqlMapper.ICustomQueryParameter)val).AddParameter (command' name);  } else {  	bool add = !command.Parameters.Contains (name);  	IDbDataParameter p;  	if (add) {  		p = command.CreateParameter ();  		p.ParameterName = name;  	} else {  		p = (IDbDataParameter)command.Parameters [name];  	}  	p.Direction = param.ParameterDirection;  	if (handler == null) {  		p.Value = val ?? DBNull.Value;  		if (dbType != null && p.DbType != dbType) {  			p.DbType = dbType.Value;  		}  		var s = val as string;  		if (s != null) {  			if (s.Length <= DbString.DefaultLength) {  				p.Size = DbString.DefaultLength;  			}  		}  		if (param.Size != null) {  			p.Size = param.Size.Value;  		}  	} else {  		if (dbType != null)  			p.DbType = dbType.Value;  		if (param.Size != null)  			p.Size = param.Size.Value;  		handler.SetValue (p' val ?? DBNull.Value);  	}  	if (add) {  		command.Parameters.Add (p);  	}  	param.AttachedParam = p;  }  
Magic Number,Dappers,DefaultTypeMap,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,FindConstructor,The following statement contains a magic number: foreach (ConstructorInfo ctor in constructors.OrderBy (c => c.IsPublic ? 0 : (c.IsPrivate ? 2 : 1)).ThenBy (c => c.GetParameters ().Length)) {  	ParameterInfo[] ctorParameters = ctor.GetParameters ();  	if (ctorParameters.Length == 0)  		return ctor;  	if (ctorParameters.Length != types.Length)  		continue;  	int i = 0;  	for (; i < ctorParameters.Length; i++) {  		if (!String.Equals (ctorParameters [i].Name' names [i]' StringComparison.OrdinalIgnoreCase))  			break;  		if (types [i] == typeof(byte[]) && ctorParameters [i].ParameterType.FullName == SqlMapper.LinqBinary)  			continue;  		var unboxedType = Nullable.GetUnderlyingType (ctorParameters [i].ParameterType) ?? ctorParameters [i].ParameterType;  		if (unboxedType != types [i] && !(unboxedType.IsEnum && Enum.GetUnderlyingType (unboxedType) == types [i]) && !(unboxedType == typeof(char) && types [i] == typeof(string)))  			break;  	}  	if (i == ctorParameters.Length)  		return ctor;  }  
Missing Default,Dappers,SqlMapper,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,LookupDbType,The following switch statement is missing a default case: switch (type.FullName) {  case "Microsoft.SqlServer.Types.SqlGeography":  	AddTypeHandler (type' handler = new UdtTypeHandler ("GEOGRAPHY"));  	return DbType.Object;  case "Microsoft.SqlServer.Types.SqlGeometry":  	AddTypeHandler (type' handler = new UdtTypeHandler ("GEOMETRY"));  	return DbType.Object;  case "Microsoft.SqlServer.Types.SqlHierarchyId":  	AddTypeHandler (type' handler = new UdtTypeHandler ("HIERARCHYID"));  	return DbType.Object;  }  
Missing Default,Dappers,DynamicParameters,D:\newReposJune17\TwoMaKing_EApp\EApp.Dapper\SqlMapper.cs,Clean,The following switch statement is missing a default case: switch (name [0]) {  case '@':  case ':':  case '?':  	return name.Substring (1);  }  
