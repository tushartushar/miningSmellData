Implementation smell,Namespace,Class,File,Method,Description
Long Method,Xpress.Core.Logic,BaseCostManager<TCostLineItem>,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\BaseCostManager.cs,GetCellDetail,The method has 111 lines of code.
Complex Method,Xpress.Core.Common,DataGridViewCellHandler,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Common\DataGridViewCellHandler.cs,UpdateNewValueIntoCellDatail,Cyclomatic complexity of the method is 12
Complex Method,Xpress.Core.Logic,BaseCostManager<TCostLineItem>,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\BaseCostManager.cs,GetCellDetail,Cyclomatic complexity of the method is 14
Long Parameter List,Xpress.Core.Plugin,XpressModulePluginItem,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginItem.cs,XpressModulePluginItem,The method has 5 parameters. Parameters: name' text' tooltip' providerType' navigationNode
Long Identifier,Xpress.Core.Entities,CostColumnContainer,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\CostColumnContainer.cs,,The length of the parameter CostColumn_ProdLifeORLeaseTerm is 30.
Long Identifier,Xpress.Core.Entities,CostColumnContainer,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\CostColumnContainer.cs,,The length of the parameter CostColumn_CompliantLeaseOption is 31.
Long Identifier,Xpress.Core.Plugin,XpressModulePluginProvider,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginProvider.cs,InitializeCostModulePluginItems,The length of the parameter standardServiceModuleCommandItem is 32.
Long Identifier,Xpress.Core.Plugin,XpressModulePluginProvider,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginProvider.cs,InitializePriceModulePluginItems,The length of the parameter addDirectPricingModuleCommandItem is 33.
Long Identifier,Xpress.Core.Plugin,XpressModulePluginProvider,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginProvider.cs,InitializePriceModulePluginItems,The length of the parameter deleteDirectPricingModuleCommandItem is 36.
Long Identifier,Xpress.Core.Plugin,XpressModulePluginProvider,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginProvider.cs,InitializePriceModulePluginItems,The length of the parameter addNonStandardPaymentModuleCommandItem is 38.
Long Identifier,Xpress.Core.Plugin,XpressModulePluginProvider,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginProvider.cs,InitializePriceModulePluginItems,The length of the parameter deleteNonStandardPaymentModuleCommandItem is 41.
Long Identifier,Xpress.Core.Plugin,XpressModulePluginProvider,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginProvider.cs,InitializePriceModulePluginItems,The length of the parameter directPricingModuleCommandItem is 30.
Long Identifier,Xpress.Core.Plugin,XpressModulePluginProvider,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginProvider.cs,InitializePriceModulePluginItems,The length of the parameter nonStandardPaymentModuleCommandItem is 35.
Long Statement,Xpress.Core.Entities,EntityConstants,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\EntityConstants.cs,InitializeEnumValueTextPair,The length of the statement  "            CompliantLeaseOptions[0] = new string[] { CompliantLeaseOption.FullAssetRecovery.ToString()' "Non-Compliant ICOEM - Full Asset Recovery" }; " is 139.
Long Statement,Xpress.Core.Entities,EntityConstants,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\EntityConstants.cs,InitializeEnumValueTextPair,The length of the statement  "            CompliantLeaseOptions[1] = new string[] { CompliantLeaseOption.PartialAssetRecovery.ToString()' "Non-Compliant ICOEM - Partial Asset Recovery" }; " is 145.
Long Statement,Xpress.Core.Entities,EntityConstants,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\EntityConstants.cs,InitializeEnumValueTextPair,The length of the statement  "            CompliantLeaseOptions[2] = new string[] { CompliantLeaseOption.Compliant.ToString()' "Compliant/Non-Compliant - Revenue Share" }; " is 129.
Long Statement,Xpress.Core.Logic,BaseCostManager<TCostLineItem>,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\BaseCostManager.cs,UpdateCellValue,The length of the statement  "                        bool parsedSuccessfully = Enum.TryParse<ProductionSource>(costCellDetail.GetValue<string>()' out outputProductionSource); " is 121.
Long Statement,Xpress.Core.Logic,CostManagerFactory,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\CostManagerFactory.cs,GetCostManager,The length of the statement  "            string costManagerTypeName = EAppRuntime.Instance.CurrentApp.ConfigSource.Config.MiscSettings[typeof(TCostLineItem).Name].value; " is 128.
Long Statement,Xpress.Core.Logic,CostManagerFactory,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\CostManagerFactory.cs,GetCostManager,The length of the statement  "            return (BaseCostManager<TCostLineItem>)EAppRuntime.Instance.CurrentApp.ObjectContainer.Resolve(specifiedCostManagerType); " is 121.
Long Statement,Xpress.Core.Logic,CostManagerFactory,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\CostManagerFactory.cs,GetInstance,The length of the statement  "            string costManagerTypeName = EAppRuntime.Instance.CurrentApp.ConfigSource.Config.MiscSettings[costType.ToString()].value; " is 121.
Long Statement,Xpress.Core.Plugin,XpressModulePluginProvider,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginProvider.cs,InitializeCostModulePluginItems,The length of the statement  "            PluginItemCollection<RibbonModulePluginItem> costPluginModuleCommandItems = new PluginItemCollection<RibbonModulePluginItem>(); " is 127.
Long Statement,Xpress.Core.Plugin,XpressModulePluginProvider,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginProvider.cs,InitializeCostModulePluginItems,The length of the statement  "            var purchaseModuleCommandItem = CreateXpressModulePluginItem<XpressModulePluginItem>("Purchase"' "Purchase"' "server_add_32x32"' string.Empty' costNavigation); " is 159.
Long Statement,Xpress.Core.Plugin,XpressModulePluginProvider,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginProvider.cs,InitializeCostModulePluginItems,The length of the statement  "            var LeaseModuleCommandItem = CreateXpressModulePluginItem<XpressModulePluginItem>("Lease"' "Lease"' "contract_32x32"' string.Empty' costNavigation); " is 148.
Long Statement,Xpress.Core.Plugin,XpressModulePluginProvider,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginProvider.cs,InitializeCostModulePluginItems,The length of the statement  "            var maintenanceModuleCommandItem = CreateXpressModulePluginItem<XpressModulePluginItem>("Maintenance"' "Maintenance"' "toolbox_32x32"' string.Empty' costNavigation); " is 165.
Long Statement,Xpress.Core.Plugin,XpressModulePluginProvider,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginProvider.cs,InitializeCostModulePluginItems,The length of the statement  "            var hrModuleCommandItem = CreateXpressModulePluginItem<XpressModulePluginItem>("HR"' "HR"' "user_monitor_32x32"' string.Empty' costNavigation); " is 143.
Long Statement,Xpress.Core.Plugin,XpressModulePluginProvider,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginProvider.cs,InitializeCostModulePluginItems,The length of the statement  "            var laborModuleCommandItem = CreateXpressModulePluginItem<XpressModulePluginItem>("Labor"' "Labor"' "users4_32x32"' string.Empty' costNavigation); " is 146.
Long Statement,Xpress.Core.Plugin,XpressModulePluginProvider,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginProvider.cs,InitializeCostModulePluginItems,The length of the statement  "            var standardServiceModuleCommandItem = CreateXpressModulePluginItem<XpressModulePluginItem>("Standard Service"' "Standard Service"' "box_software_32x32"' string.Empty' costNavigation); " is 184.
Long Statement,Xpress.Core.Plugin,XpressModulePluginProvider,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginProvider.cs,InitializeCostModulePluginItems,The length of the statement  "            var costAddNewModuleCommandItem = CreateXpressModulePluginItem<XpressModulePluginItem>("Add New Cost"' "New Line"' "table_row_add_32x32"' string.Empty' costNavigation); " is 168.
Long Statement,Xpress.Core.Plugin,XpressModulePluginProvider,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginProvider.cs,InitializePriceModulePluginItems,The length of the statement  "            PluginItemCollection<RibbonModulePluginItem> pricePluginModuleCommandItems = new PluginItemCollection<RibbonModulePluginItem>(); " is 128.
Long Statement,Xpress.Core.Plugin,XpressModulePluginProvider,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginProvider.cs,InitializePriceModulePluginItems,The length of the statement  "                CreateXpressModulePluginItem<XpressModulePluginItem>("Delete Non-Standard Payment"' "Delete Payment"' "CANCEL_RED_16x16"'  " is 121.
Long Statement,Xpress.Core.Plugin,XpressModulePluginProvider,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginProvider.cs,InitializePriceModulePluginItems,The length of the statement  "            var directPricingModuleCommandItem = CreateXpressModulePluginItem<XpressModulePluginItem>("Direct Pricing"' "Direct Pricing"' "invoice_dollar_32x32"'  " is 149.
Long Statement,Xpress.Core.Plugin,XpressModulePluginProvider,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Plugin\XpressModulePluginProvider.cs,InitializePriceModulePluginItems,The length of the statement  "            var nonStandardPaymentModuleCommandItem = CreateXpressModulePluginItem<XpressModulePluginItem>("Non-Standard Payment"' "Non-Standard Payment"'  " is 142.
Magic Number,Xpress.Core.Entities,EntityConstants,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\EntityConstants.cs,InitializeEnumValueTextPair,The following statement contains a magic number: ProductionSources = new string[2][];
Magic Number,Xpress.Core.Entities,EntityConstants,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\EntityConstants.cs,InitializeEnumValueTextPair,The following statement contains a magic number: HRSettlementModes = new string[4][];
Magic Number,Xpress.Core.Entities,EntityConstants,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\EntityConstants.cs,InitializeEnumValueTextPair,The following statement contains a magic number: HRSettlementModes[2] = new string[] { HRSettlementMode.Relocation.ToString()' "Relocation" };
Magic Number,Xpress.Core.Entities,EntityConstants,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\EntityConstants.cs,InitializeEnumValueTextPair,The following statement contains a magic number: HRSettlementModes[3] = new string[] { HRSettlementMode.Miscellaneous.ToString()' "Miscellaneous" };
Magic Number,Xpress.Core.Entities,EntityConstants,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\EntityConstants.cs,InitializeEnumValueTextPair,The following statement contains a magic number: InvoicingTreatments = new string[3][];
Magic Number,Xpress.Core.Entities,EntityConstants,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\EntityConstants.cs,InitializeEnumValueTextPair,The following statement contains a magic number: InvoicingTreatments[2] = new string[] { InvoicingTreatment.Milestone.ToString()' "Milestone" };
Magic Number,Xpress.Core.Entities,EntityConstants,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\EntityConstants.cs,InitializeEnumValueTextPair,The following statement contains a magic number: CompliantLeaseOptions = new string[3][];
Magic Number,Xpress.Core.Entities,EntityConstants,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\EntityConstants.cs,InitializeEnumValueTextPair,The following statement contains a magic number: CompliantLeaseOptions[2] = new string[] { CompliantLeaseOption.Compliant.ToString()' "Compliant/Non-Compliant - Revenue Share" };
Magic Number,Xpress.Core.Entities,XpressTestingFakeData,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\XpressTestingFakeData.cs,GenerateGroupTestingData,The following statement contains a magic number: group.Id = 1000 + i;
Magic Number,Xpress.Core.Entities,XpressTestingFakeData,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\XpressTestingFakeData.cs,GenerateGroupTestingData,The following statement contains a magic number: subgroup.Id = 1000 + j;
Magic Number,Xpress.Core.Entities,XpressTestingFakeData,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\XpressTestingFakeData.cs,GenerateGroupTestingData,The following statement contains a magic number: j < 10
Magic Number,Xpress.Core.Entities,XpressTestingFakeData,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\XpressTestingFakeData.cs,GenerateGroupTestingData,The following statement contains a magic number: i < 10
Magic Number,Xpress.Core.Entities,XpressTestingFakeData,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\XpressTestingFakeData.cs,GenerateJobTypeTestingData,The following statement contains a magic number: decimal utilRate = 0.1M;
Magic Number,Xpress.Core.Entities,XpressTestingFakeData,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\XpressTestingFakeData.cs,GenerateJobTypeTestingData,The following statement contains a magic number: decimal baseAmount = 1000;
Magic Number,Xpress.Core.Entities,XpressTestingFakeData,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\XpressTestingFakeData.cs,GenerateJobTypeTestingData,The following statement contains a magic number: jobType.Id = 1000 + i;
Magic Number,Xpress.Core.Entities,XpressTestingFakeData,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\XpressTestingFakeData.cs,GenerateJobTypeTestingData,The following statement contains a magic number: baseAmount += 1000;
Magic Number,Xpress.Core.Entities,XpressTestingFakeData,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Entities\XpressTestingFakeData.cs,GenerateJobTypeTestingData,The following statement contains a magic number: i < 10
Magic Number,Xpress.Core.Logic,BaseCostManager<TCostLineItem>,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\BaseCostManager.cs,InitializeAllCostLines,The following statement contains a magic number: newCostLine.Id = 1000 + i;
Magic Number,Xpress.Core.Logic,BaseCostManager<TCostLineItem>,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\BaseCostManager.cs,InitializeAllCostLines,The following statement contains a magic number: newCostLine.TotalCost = 1000 + i * 50;
Magic Number,Xpress.Core.Logic,BaseCostManager<TCostLineItem>,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\BaseCostManager.cs,InitializeAllCostLines,The following statement contains a magic number: newCostLine.TotalCost = 1000 + i * 50;
Magic Number,Xpress.Core.Logic,BaseCostManager<TCostLineItem>,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\BaseCostManager.cs,InitializeAllCostLines,The following statement contains a magic number: newCostLine.TotalPrice = 2000 + i * 50;
Magic Number,Xpress.Core.Logic,BaseCostManager<TCostLineItem>,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\BaseCostManager.cs,InitializeAllCostLines,The following statement contains a magic number: newCostLine.TotalPrice = 2000 + i * 50;
Magic Number,Xpress.Core.Logic,BaseCostManager<TCostLineItem>,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\BaseCostManager.cs,InitializeAllCostLines,The following statement contains a magic number: i < 5
Magic Number,Xpress.Core.Logic,LaborCostManager,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\LaborCostManager.cs,CreateNewCostLineItem,The following statement contains a magic number: newCostLine.JobTypeId = 1000;
Magic Number,Xpress.Core.Logic,LeaseCostManager,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\LeaseCostManager.cs,GetCellDetail,The following statement contains a magic number: switch (columnName)              {                  case CostColumnContainer.CostColumn_LeaseRateFactor:                      {                          costCellDetail =                              PurchaseCostManager.CreateDataCostCellDetail(costLine.LeaseRateFactor'                              GridViewColumnAccess.Edit'                              GridViewColumnType.EditBox'                              GridViewCellValueType.Percentage);                            costCellDetail.DisplayValue = LocalizationUtils.FormatRateToString(costLine.LeaseRateFactor' 6);                            return costCellDetail;                      }                  case CostColumnContainer.CostColumn_CompliantLeaseOption:                      {                          costCellDetail =                              PurchaseCostManager.CreateDataCostCellDetail(costLine.CompliantLeaseOption'                              GridViewColumnAccess.Edit'                              GridViewColumnType.ComboBox'                              GridViewCellValueType.String);                            costCellDetail.DataSource = EntityConstants.CompliantLeaseOptions;                            return costCellDetail;                      }                  default:                      {                          break;                      }              }
Magic Number,Xpress.Core.Logic,MaintenanceCostManager,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\MaintenanceCostManager.cs,CreateNewCostLineItem,The following statement contains a magic number: newCostLine.ServiceAmount = 1000;
Magic Number,Xpress.Core.Logic,PurchaseCostManager,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\PurchaseCostManager.cs,CreateNewCostLineItem,The following statement contains a magic number: newCostLine.ProductionLifetime = 20;
Missing Default,Xpress.Core.Logic,BaseCostManager<TCostLineItem>,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\BaseCostManager.cs,UpdateCellValue,The following switch statement is missing a default case: switch (columnName)              {                  case CostColumnContainer.CostColumn_Group:                      {                          costLine.GroupId = costCellDetail.GetValue<int>();                            return true;                      }                  case CostColumnContainer.CostColumn_Subgroup:                      {                          costLine.SubgroupId = costCellDetail.GetValue<int>();                            return true;                      }                  case CostColumnContainer.CostColumn_HPOR3rd:                      {                          ProductionSource outputProductionSource;                            bool parsedSuccessfully = Enum.TryParse<ProductionSource>(costCellDetail.GetValue<string>()' out outputProductionSource);                            if (parsedSuccessfully)                          {                              costLine.ProductionSource = outputProductionSource;                          }                            return parsedSuccessfully;                      }                  case CostColumnContainer.CostColumn_TotalCost:                      {                          costLine.TotalCost = costCellDetail.GetValue<decimal>();                            return true;                      }                  case CostColumnContainer.CostColumn_TotalPrice:                      {                          costLine.TotalPrice = costCellDetail.GetValue<decimal>();                            return true;                      }              }
Missing Default,Xpress.Core.Logic,HRCostManager,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\HRCostManager.cs,UpdateCellValue,The following switch statement is missing a default case: switch (columnName)              {                  case CostColumnContainer.CostColumn_HRSettlement:                      {                          HRSettlementMode settlementMode;                            bool parseSuccess = Enum.TryParse<HRSettlementMode>(costCellDetail.GetValue<string>()' out settlementMode);                            if (parseSuccess)                          {                              costLine.SettlementMode = settlementMode;                          }                            return parseSuccess;                      }              }
Missing Default,Xpress.Core.Logic,LaborCostManager,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\LaborCostManager.cs,GetCellDetail,The following switch statement is missing a default case: switch (columnName)              {                  case CostColumnContainer.CostColumn_JobType:                      {                          costCellDetail =                              PurchaseCostManager.CreateDataCostCellDetail(costLine.JobTypeId'                              GridViewColumnAccess.Edit'                              GridViewColumnType.ComboBox'                              GridViewCellValueType.Integer);                            costCellDetail.DataSource = XpressTestingFakeData.JobTypeDataSource;                            return costCellDetail;                      }              }
Missing Default,Xpress.Core.Logic,LaborCostManager,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\LaborCostManager.cs,UpdateCellValue,The following switch statement is missing a default case: switch (columnName)              {                  case CostColumnContainer.CostColumn_JobType:                      {                          costLine.JobTypeId = costCellDetail.GetValue<int>();                            return true;                      }              }
Missing Default,Xpress.Core.Logic,LeaseCostManager,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\LeaseCostManager.cs,UpdateCellValue,The following switch statement is missing a default case: switch (columnName)              {                  case CostColumnContainer.CostColumn_LeaseRateFactor:                      {                          costLine.LeaseRateFactor = costCellDetail.GetValue<decimal>();                            return true;                      }                  case CostColumnContainer.CostColumn_CompliantLeaseOption:                      {                          CompliantLeaseOption compliantLeaseOption;                            bool parseSuccess = Enum.TryParse<CompliantLeaseOption>(costCellDetail.GetValue<string>()' out compliantLeaseOption);                            if (parseSuccess)                          {                              costLine.CompliantLeaseOption = compliantLeaseOption;                          }                            return parseSuccess;                      }              }
Missing Default,Xpress.Core.Logic,MaintenanceCostManager,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\MaintenanceCostManager.cs,GetCellDetail,The following switch statement is missing a default case: switch (columnName)              {                  case CostColumnContainer.CostColumn_ServiceAmount:                      {                          costCellDetail =                              PurchaseCostManager.CreateDataCostCellDetail(costLine.ServiceAmount'                              GridViewColumnAccess.Edit'                              GridViewColumnType.EditBox'                              GridViewCellValueType.Decimal);                            if (costLine.ServiceAmount.HasValue)                          {                              costCellDetail.DisplayValue = costLine.ServiceAmount.Value.ToString("0.00");                          }                            return costCellDetail;                      }              }
Missing Default,Xpress.Core.Logic,MaintenanceCostManager,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\MaintenanceCostManager.cs,UpdateCellValue,The following switch statement is missing a default case: switch (columnName)              {                  case CostColumnContainer.CostColumn_ServiceAmount:                      {                          costLine.ServiceAmount = costCellDetail.GetValue<decimal>();                                                    return true;                      }              }
Missing Default,Xpress.Core.Logic,PurchaseCostManager,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\PurchaseCostManager.cs,UpdateCellValue,The following switch statement is missing a default case: switch (columnName)              {                  case CostColumnContainer.CostColumn_ProdLifeORLeaseTerm:                      {                          costLine.ProductionLifetime = costCellDetail.GetValue<int>();                            return true;                      }              }
Missing Default,Xpress.Core.Logic,StandardServiceCostManager,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\StandardServiceCostManager.cs,GetCellDetail,The following switch statement is missing a default case: switch (columnName)              {                  case CostColumnContainer.CostColumn_InvTreat:                      {                          costCellDetail =                              PurchaseCostManager.CreateDataCostCellDetail(costLine.InvoicingTreatment'                              GridViewColumnAccess.Edit'                              GridViewColumnType.ComboBox'                              GridViewCellValueType.String);                            costCellDetail.DataSource = EntityConstants.InvoicingTreatments;                            return costCellDetail;                      }              }
Missing Default,Xpress.Core.Logic,StandardServiceCostManager,D:\research\architectureSmells\repos1\TwoMaKing_EApp\Xpress.Core\Logic\StandardServiceCostManager.cs,UpdateCellValue,The following switch statement is missing a default case: switch (columnName)              {                  case CostColumnContainer.CostColumn_InvTreat:                      {                          InvoicingTreatment invoicingTreatment;                            bool parseSuccess = Enum.TryParse<InvoicingTreatment>(costCellDetail.GetValue<string>()' out invoicingTreatment);                            if (parseSuccess)                          {                              costLine.InvoicingTreatment = invoicingTreatment;                          }                            return parseSuccess;                      }              }
