Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,A00TwoInsertOrReplaceCallsConflictingOnTheHead,The method has 125 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunTemperBatchOperation,The method has 106 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,ExecuteBatchOperationAndValidate,The method has 118 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,AddNewHeadReplicaTest,The method has 127 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,RemoveAndReAddHeadReplicaTest,The method has 181 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The method has 106 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The method has 209 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The method has 141 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestThrowIfChainIsNotValid,The method has 166 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetViewWithPartitioningFeature,The method has 138 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTable,The method has 115 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The method has 356 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestIsConfiguredTableWithPartitioningFeature,The method has 251 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The method has 243 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJsonWithPartitioningFeature,The method has 117 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The method has 140 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestEnableWriteOnReplicas_Rule1_WithTablesNotInConversionMode,The method has 225 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestEnableWriteOnReplicas_Rule1_WithTablesInConversionMode,The method has 137 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestEnableWriteOnReplicas_Rule1_WithPartitionedTablesInConversionMode,The method has 157 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestEnableWriteOnReplicas_Rule2_WithTablesNotInConversionMode,The method has 225 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestEnableWriteOnReplicas_Rule2_WithTablesInConversionMode,The method has 137 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestEnableWriteOnReplicas_Rule2_WithPartitionedTablesInConversionMode,The method has 157 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestEnableReadWriteOnReplicas,The method has 121 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfiguredTableTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfiguredTableTest.cs,TestIsTablePartitioned,The method has 208 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,XStoreCRUDTest,The method has 109 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrReplaceSync,The method has 111 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,UpdateInStaleViewConflictingWithUpdateInNewView_T01,The method has 100 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,UpdateInStaleViewConflictingWithUpdateInNewView_T02,The method has 109 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The method has 154 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableProjection,The method has 188 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,ExceptionWhenUsingSmallerViewId,The method has 141 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,RowsWithHigherViewIdNotFoundWhenIgnoreHigherViewIdRowsFlagIsSet,The method has 132 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperTestBase.cs,PerformOperationAndValidate,The method has 107 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperTestBase.cs,PerformIndividualOperationAndValidate,The method has 120 lines of code.
Complex Method,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunTemperBatchOperation,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,ExecuteBatchOperationAndValidate,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,AddNewHeadReplicaTest,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,RemoveAndReAddHeadReplicaTest,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperTestBase.cs,PerformOperationAndValidate,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperTestBase.cs,PerformIndividualOperationAndValidate,Cyclomatic complexity of the method is 11
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunXStoreHttpManglerTest,The method has 5 parameters. Parameters: entityPartitionKey' entityRowKey' targetStorageAccount' targetApiExpectedToFail' behaviors
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunTamperTableBehavior,The method has 8 parameters. Parameters: entityPartitionKey' entityRowKey' targetStorageAccount' targetApi' targetApiExpectedToFail' checkOriginalEntityUnchanged' checkStorageAccountsConsistent' skipInitialSessions
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunTamperTableBehavior,The method has 9 parameters. Parameters: entityPartitionKey' entityRowKey' targetStorageAccount' targetApi' targetApiExpectedToFail' checkOriginalEntityUnchanged' checkStorageAccountsConsistent' httpManglerStartTime' skipInitialSessions
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunTemperBatchOperation,The method has 10 parameters. Parameters: count' jobType' jobId' targetStorageAccount' opTypes' targetApiExpectedToFail' checkOriginalEntityUnchanged' checkStorageAccountsConsistent' httpManglerStartTime' skipInitialSessions
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunTamperTableBehavior,The method has 7 parameters. Parameters: entityPartitionKey' entityRowKey' targetStorageAccount' targetApi' targetApiExpectedToFail' checkOriginalEntityUnchanged' checkStorageAccountsConsistent
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunDelayTableBehavior,The method has 6 parameters. Parameters: entityPartitionKey' entityRowKey' targetStorageAccount' delayInMs' targetApi' targetApiExpectedToFail
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunThrottleTableBehavior,The method has 8 parameters. Parameters: entityPartitionKey' entityRowKey' targetStorageAccount' targetApi' targetApiExpectedToFail' checkOriginalEntityUnchanged' checkStorageAccountsConsistent' skipInitialSessions
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunThrottleTableBehavior,The method has 9 parameters. Parameters: entityPartitionKey' entityRowKey' targetStorageAccount' targetApi' targetApiExpectedToFail' checkOriginalEntityUnchanged' checkStorageAccountsConsistent' httpManglerStartTime' skipInitialSessions
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunDelayTableBehavior,The method has 9 parameters. Parameters: entityPartitionKey' entityRowKey' targetStorageAccount' targetApi' targetApiExpectedToFail' checkOriginalEntityUnchanged' checkStorageAccountsConsistent' httpManglerStartTime' skipInitialSessions
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,ExecuteBatchOperationAndValidate,The method has 5 parameters. Parameters: count' partitionKey' jobType' jobId' opTypes
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunHttpManglerBehaviorHelper,The method has 6 parameters. Parameters: entityPartitionKey' entityRowKey' behaviors' targetApi' targetApiExpectedToFail' httpManglerStartTime
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunHttpManglerBehaviorHelper,The method has 5 parameters. Parameters: entityPartitionKey' entityRowKey' behaviors' targetApi' targetApiExpectedToFail
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,RunHttpManglerBehaviorHelper,The method has 5 parameters. Parameters: originalEntity' behaviors' targetApi' targetApiExpectedToFail' httpManglerStartTime
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,RunHttpManglerBehaviorHelper,The method has 5 parameters. Parameters: originalEntity' behaviors' targetApi' targetApiExpectedToFail' httpManglerStartTime
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,SetupRTableEnv,The method has 6 parameters. Parameters: tableName' useHttps' viewIdString' actualStorageAccountsToBeUsed' convertXStoreTableMode' numberOfBlobs
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,RefreshRTableEnvJsonConfigBlob,The method has 5 parameters. Parameters: updatedViewId' convertXStoreTableMode' readViewHeadIndex' blobIndexes' waitForConfig
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,InitialSetup,The method has 5 parameters. Parameters: tableName' useHttps' viewId' convertXStoreTableMode' numberOfBlobs
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperTestBase.cs,PerformIndividualOperationAndValidate,The method has 7 parameters. Parameters: opType' jobType' jobId' partition' row' originalMessage' updatedMessage
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperTestBase.cs,ValidateRetrievedRTableEntity,The method has 7 parameters. Parameters: retrievedEntity' jobType' jobId' message' partition' row' checkViewId
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,TestHelper,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\TestHelper.cs,ValidateResponse,The method has 5 parameters. Parameters: opContext' expectedAttempts' expectedStatusCode' allowedErrorCodes' errorMessageBeginsWith
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,TestHelper,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\TestHelper.cs,ValidateResponse,The method has 5 parameters. Parameters: opContext' expectedAttempts' expectedStatusCode' allowedErrorCodes' errorMessageBeginsWith
Long Parameter List,Microsoft.Azure.Toolkit.Replication.Test,TestHelper,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\TestHelper.cs,ValidateResponse,The method has 6 parameters. Parameters: opContext' expectedAttempts' expectedStatusCode' allowedErrorCodes' errorMessageBeginsWith' stripIndex
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunTamperTableBehavior,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunTamperTableBehavior,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunTemperBatchOperation,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunTamperTableBehavior,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunThrottleTableBehavior,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunThrottleTableBehavior,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunDelayTableBehavior,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,,The length of the parameter ConflictExceptionSleepTimeInMsec is 32.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestInstrumentationFlagV1,The length of the parameter testConfigWithNoInstrumentation is 31.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestInstrumentationFlagV1,The length of the parameter testConfigWithInstrumentationAsTrue is 35.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestInstrumentationFlag,The length of the parameter testConfigWithNoInstrumentation is 31.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestInstrumentationFlag,The length of the parameter testConfigWithInstrumentationAsTrue is 35.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestIgnoreHigherViewIdRowsFlag,The length of the parameter testConfigWithNoIgnoreHigherViewIdRows is 38.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestIgnoreHigherViewIdRowsFlag,The length of the parameter testConfigWithIgnoreHigherViewIdRows is 36.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestIgnoreHigherViewIdRowsFlag,The length of the parameter testConfigWithIgnoreHigherViewIdRowsAsTrue is 42.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,GetRTableConfigurationLocationInfo,The length of the parameter configurationStoreLocationInfo is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperBase<T>,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperBase.cs,,The length of the parameter WaitTimeForConflictRetryInSeconds is 33.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,A00TamperReplaceRowHeadTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,A00TamperSkipReplaceRowHeadTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,B00TamperReplaceRowInnerTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,B00TamperSkipReplaceRowInnerTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,C00TamperReplaceRowTailTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,A00TamperDeleteRowHeadTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,A00TamperSkipDeleteRowHeadTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,B00TamperDeleteRowInnerTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,B00TamperSkipDeleteRowInnerTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,C00TamperDeleteRowTailTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,B00TamperBatchReplaceInnerTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,C00TamperBatchReplaceTailTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,B00TamperBatchDeleteInnerTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,C00TamperBatchDeleteTailTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,A00TamperReadRowHeadTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,B00TamperReadRowInnerTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,A00ThrottleReplaceRowHeadTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,A00ThrottleSkipReplaceRowHeadTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,B00ThrottleReplaceRowInnerTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,B00ThrottleSkipReplaceRowInnerTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,C00ThrottleReplaceRowTailTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,A00ThrottleDeleteRowHeadTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,A00ThrottleSkipDeleteRowHeadTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,B00ThrottleDeleteRowInnerTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,B00ThrottleSkipDeleteRowInnerTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,C00ThrottleDeleteRowTailTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication.Test,ViewChangeTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ViewChangeTests.cs,ReplaceRowTest,The length of the parameter checkStorageAccountsConsistent is 30.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ConvertXStoreTableAPITests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ConvertXStoreTableAPITests.cs,ConvertXStoreTable,The length of the statement  "            IQueryable<InitDynamicReplicatedTableEntity> virtualizedRtableQuery = this.repTable.CreateReplicatedQuery<InitDynamicReplicatedTableEntity>(); " is 142.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ConvertXStoreTableOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ConvertXStoreTableOperationTests.cs,RetrieveViaXStoreThenEnableRTableThenReplaceViaRTable,The length of the statement  "            InitDynamicReplicatedTableEntity replaceTableEntity = SampleXStoreEntity.ToInitDynamicReplicatedTableEntity(retrievedEntity); " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ConvertXStoreTableOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ConvertXStoreTableOperationTests.cs,RetrieveViaXStoreThenEnableRTableThenMergeViaRTable,The length of the statement  "            InitDynamicReplicatedTableEntity mergeTableEntity = SampleXStoreEntity.ToInitDynamicReplicatedTableEntity(retrievedEntity); " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ConvertXStoreTableOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ConvertXStoreTableOperationTests.cs,RetrieveViaXStoreThenEnableRTableThenDeleteViaRTable,The length of the statement  "            InitDynamicReplicatedTableEntity deleteTableEntity = SampleXStoreEntity.ToInitDynamicReplicatedTableEntity(retrievedEntity); " is 124.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ConvertXStoreTableTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ConvertXStoreTableTestBase.cs,InsertXStoreEntities,The length of the statement  "                    Assert.AreEqual((int)HttpStatusCode.NoContent' insertResult.HttpStatusCode' "entry #{0} row {1}: insertResult.HttpStatusCode mismatch"' i' j); " is 142.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ConvertXStoreTableTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ConvertXStoreTableTestBase.cs,InsertXStoreEntities,The length of the statement  "                    Assert.IsFalse(string.IsNullOrEmpty(insertResult.Etag)' "partition #{0} row {1}: insertResult.ETag = null or empty"' i' j); " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ConvertXStoreTableTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ConvertXStoreTableTestBase.cs,InsertXStoreEntities,The length of the statement  "                    Assert.AreEqual((int)HttpStatusCode.OK' retrieveResult.HttpStatusCode' "partition #{0} row {1}: retrieveResult.HttpStatusCode mismatch"' i' j); " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ConvertXStoreTableTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ConvertXStoreTableTestBase.cs,ReplaceXStoreEntities,The length of the statement  "                    Assert.AreEqual((int)HttpStatusCode.NoContent' replaceResult.HttpStatusCode' "entry #{0} row {1}: insertResult.HttpStatusCode mismatch"' i' j); " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,A00InsertOrReplaceCallConflictingWithDeleteOnTheHead,The length of the statement  "                    Console.WriteLine("Upsert completed with HttpStatus={0}"' upsertResult == null ? "NULL" : upsertResult.HttpStatusCode.ToString()); " is 130.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,RepairMidAnUpdate,The length of the statement  "                Console.WriteLine("RepairRow completed with HttpStatus={0}"' repairResult == null ? "NULL" : repairResult.HttpStatusCode.ToString()); " is 133.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,TxnViewExpiresAndViewIdHasChanged,The length of the statement  "                    Assert.AreNotEqual(this.configurationService.GetTableView(this.repTable.TableName).ViewId' viewBeforeTx.ViewId' "ViewId should have changed!"); " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,TxnViewExpiresAndViewIdHasChanged,The length of the statement  "                    Assert.AreNotEqual((int)HttpStatusCode.NoContent' replaceResult.HttpStatusCode' "upsertResult.HttpStatusCode mismatch"); " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SetupAndRunXStoreHttpManglerTest,The length of the statement  "                        throw new Exception("SetupAndRunXStoreHttpManglerTest(): Should not reach here. HttpMangler allowed an targetApi() to go through UNEXPECTEDLY."); " is 145.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,ExecuteReplaceRowAndValidate,The length of the statement  "                    Console.WriteLine("\nretries={0}. Will modify Message and calling ReplaceRow(originalEntity). New referenceMessage={1}"' " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,ExecuteReplaceRowAndValidate,The length of the statement  "                    Assert.IsNotNull(originalEntity' "originalEntity is null. Make sure entity exists before calling ExecuteReplaceRowAndValidate()"); " is 130.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,ExecuteReplaceRowAndValidate,The length of the statement  "            Console.WriteLine("gotExceptionInLastAttempt={0} retries={1} MaxRetries={2}"' gotExceptionInLastAttempt' retries' MaxRetries); " is 126.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,ExecuteDeleteRowAndValidate,The length of the statement  "            Console.WriteLine("gotExceptionInLastAttempt={0} retries={1} MaxRetries={2}"' gotExceptionInLastAttempt' retries' MaxRetries); " is 126.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SleepUntilRowLockHasExpired,The length of the statement  "            // After recovery from short outage' sleep some time to wait for entity to be unlocked' then confirm that we can update the row. " is 128.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,SleepUntilRowLockHasExpired,The length of the statement  "            sleepTimeInMs -= ConflictExceptionSleepTimeInMsec; // reduce the sleep time a little bit so that we will hit "_rtable_RowLock not expired" in RTable library. " is 157.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,RunHttpManglerBehaviorHelper,The length of the statement  "                        throw new Exception("RunHttpManglerBehaviorHelper(): Should not reach here. HttpMangler allowed an targetApi() to go through UNEXPECTEDLY."); " is 141.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,RunHttpManglerBehaviorHelper,The length of the statement  "                        string.Format("RunHttpManglerBehaviorHelper(): targetApi() is NOT unexpected to throw an exception. Got this exception: {0}"' " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,RunHttpManglerBehaviorHelper,The length of the statement  "                        throw new Exception("RunHttpManglerBehaviorHelper(): Should not reach here. HttpMangler allowed an targetApi() to go through UNEXPECTEDLY."); " is 141.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,RunHttpManglerBehaviorHelper,The length of the statement  "                        string.Format("RunHttpManglerBehaviorHelper(): targetApi() is NOT unexpected to throw an exception. Got this exception: {0}"' " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,RunHttpManglerBehaviorHelper,The length of the statement  "            Console.WriteLine("\nRunHttpManglerBehaviorHelper(): Call this.repTable.ExecuteBatch(batchOperation) with HttpMangler enabled...");             " is 131.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,RunHttpManglerBehaviorHelper,The length of the statement  "                        throw new Exception("RunHttpManglerBehaviorHelper(): Should not reach here. HttpMangler allowed this.repTable.ExecuteBatch(batchOperation) to go through UNEXPECTEDLY."); " is 169.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,RunHttpManglerBehaviorHelper,The length of the statement  "                        string.Format("RunHttpManglerBehaviorHelper(): this.repTable.ExecuteBatch(batchOperation) is NOT unexpected to throw an exception. Got this exception: {0}"' " is 156.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,HttpManglerTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\HttpManglerTestBase.cs,RunHttpManglerBehaviorHelper,The length of the statement  "                    Console.WriteLine("\nException is Expected. this.repTable.ExecuteBatch(batchOperation) threw an exception: {0}\n"' ex.ToString()); " is 130.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,JsonStore<T>,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\JsonStore.cs,Serialize,The length of the statement  "            // JSon converts a / forward slash into a \/ on serialization. That cannot be prevented. We need to remove it since svdgenerator does not work. " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,JsonStore<T>,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\JsonStore.cs,ConvertDoubleQuotesToSingleQuoteForXmlCompatibility,The length of the statement  "                string message = String.Format(CultureInfo.InvariantCulture' "Could not perform Json Serialization on {0} since it contains ' single-quote"' jsonString); " is 153.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,JsonStore<T>,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\JsonStore.cs,Deserialize,The length of the statement  "                string message = String.Format(CultureInfo.InvariantCulture' "Could not perform Json Deserialization on {0}"' jsonString); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,AddNewHeadReplicaTest,The length of the statement  "                string jobTypeDelete = "jobType-AddNewHeadReplicaTest-Delete"; // will call Delete in Phase One' then try to Insert again in Phase Two " is 134.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,AddNewHeadReplicaTest,The length of the statement  "                string jobTypeStatic = "jobType-AddNewHeadReplicaTest-Static"; // will NOT call Replace in Phase One. Let RepairTable() fix this row. Call Replace in Phase Two. " is 160.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,AddNewHeadReplicaTest,The length of the statement  "                Console.WriteLine("\n\nPhase One: New Head Replica has been added. readViewHeadIndex = 1. Verifying Replace()' Delete() and Insert() API..."); " is 142.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,AddNewHeadReplicaTest,The length of the statement  "                string jobTypeInsert = "jobType-AddNewHeadReplicaTest-Insert"; // Will call Insert in Phase One' and Replace in Phase Two " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,AddNewHeadReplicaTest,The length of the statement  "                Console.WriteLine("\n\nDone repairing. Changing RTable config to use ReadViewHeadIndex=0' will sleep for some time..."); " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,AddNewHeadReplicaTest,The length of the statement  "                Console.WriteLine("\n\nPhase Two: RepairTable() completed successfully. readViewHeadIndex = 0. Verifying Replace()' Delete() and Insert() API..."); " is 147.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,RemoveAndReAddHeadReplicaTest,The length of the statement  "                string jobTypeInsert = "jobType-RemoveAndReAddHeadReplicaTest-Insert"; // will call Insert() in Phase One' Two (expect to fail)' Three (expect to fail) " is 151.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,RemoveAndReAddHeadReplicaTest,The length of the statement  "                string jobTypeStatic = "jobType-RemoveAndReAddHeadReplicaTest-Static"; // will NOT call Replace() in Phase One. Let RepairTable() fix this row. " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,RemoveAndReAddHeadReplicaTest,The length of the statement  "                string jobTypeDelete = "jobType-RemoveAndReAddHeadReplicaTest-Delete"; // will call Delete() in Phase One' Insert() in Phase Two. " is 129.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,RemoveAndReAddHeadReplicaTest,The length of the statement  "                string jobTypeReplaceDelete = "jobType-RemoveAndReAddHeadReplicaTest-ReplaceDelete"; // will call Replace() in Phase One' Delete() in Phase Two' Insert() in Phase Three. " is 169.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,RemoveAndReAddHeadReplicaTest,The length of the statement  "                Console.WriteLine("\n\nPhase One: Head Replica has been removed. Using Tail Replica only. Verifying Replace() and Delete() API..."); " is 132.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,RemoveAndReAddHeadReplicaTest,The length of the statement  "                Console.WriteLine("\n\nPhase Two: Head Replica has been added back. readViewHeadIndex = 1. Verifying Replace()' Delete() and Insert() API..."); " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,RemoveAndReAddHeadReplicaTest,The length of the statement  "                Console.WriteLine("Verifying jobIdDelete does not exist in Phase Two (Head and Tail Replica; readViewHeadIndex = 1)..."); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,RemoveAndReAddHeadReplicaTest,The length of the statement  "                Console.WriteLine("Should be able to Insert() jobIdDelete in Phase Two (Head and Tail Replica; readViewHeadIndex = 1)..."); " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,RemoveAndReAddHeadReplicaTest,The length of the statement  "                Console.WriteLine("Verifying Delete() jobTypeReplaceDelete in Phase Two (Head and Tail Replica; readViewHeadIndex = 1)..."); " is 124.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,RemoveAndReAddHeadReplicaTest,The length of the statement  "                Console.WriteLine("\n\nDone repairing. Changing RTable config to use ReadViewHeadIndex=0' will sleep for some time..."); " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,RemoveAndReAddHeadReplicaTest,The length of the statement  "                Console.WriteLine("\n\nPhase Three: RepairTable() completed successfully. readViewHeadIndex = 0. Verifying Replace()' Delete() and Insert() API..."); " is 149.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,RemoveAndReAddHeadReplicaTest,The length of the statement  "                Console.WriteLine("Verifying jobTypeReplaceDelete does not exist in Phase Three (Head and Tail Replica; readViewHeadIndex = 0)..."); " is 132.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,RemoveAndReAddHeadReplicaTest,The length of the statement  "                Console.WriteLine("Should be able to Insert() jobTypeReplaceDelete in Phase Three (Head and Tail Replica; readViewHeadIndex = 0)..."); " is 134.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicaInfoTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicaInfoTest.cs,TestToString,The length of the statement  "            Assert.IsTrue(replica.ToString() == string.Format("Account Name: {0}' AccountKey: {1}' ViewInWhichAddedToChain: {2}' Status: {3}"' acc' "***********"' whenAddedToChain' ReplicaStatus.ReadWrite)); " is 195.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The length of the statement  "            Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.WriteOnly && r.ViewInWhichAddedToChain == 6) == 1); " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.MoveReplicaToHeadAndSetViewToReadOnly("view1"' "R3")' "we can't change replica from WriteOnly to ReadOnly"); " is 171.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' : can't set a WriteOnly replica to ReadOnly !!!"' "view1")); " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.MoveReplicaToHeadAndSetViewToReadOnly("view1"' "R4")' "we can't change replica from WriteOnly to ReadOnly"); " is 171.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' : can't set a WriteOnly replica to ReadOnly !!!"' "view1")); " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnlyWillResetReadViewTailIndexOnSuccess,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.MoveReplicaToHeadAndSetViewToReadOnly("view1"' "R4")' "we can't change replica from WriteOnly to ReadOnly"); " is 171.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnlyWillResetReadViewTailIndexOnSuccess,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' : can't set a WriteOnly replica to ReadOnly !!!"' "view1")); " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The length of the statement  "            // in reality' we would not end-up calling this function with such chain' ... that is enforced by the business logic (i.e. TurnOn replica). " is 139.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestThrowIfChainIsNotValid,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.ThrowIfChainIsNotValid("view1")' "we need to have at least one Readable replica"); " is 145.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestThrowIfChainIsNotValid,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.ThrowIfChainIsNotValid("view1")' "Replicas must be not Writable or All are Wraitable"); " is 150.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestThrowIfChainIsNotValid,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.ThrowIfChainIsNotValid("view1")' "Replicas must be not Writable or All are Wraitable"); " is 150.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestThrowIfChainIsNotValid,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.ThrowIfChainIsNotValid("view1")' "Replicas must be not Writable or All are Wraitable"); " is 150.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,DeserializeJsonConfig,The length of the statement  "            jsonConf = @"{'ConvertXStoreTableMode': true' 'LeaseDuration': 60' 'ReadViewHeadIndex': 1' 'ReplicaChain': ''' 'Timestamp': '/Date(1460152261966)/'' 'ViewId': 58}"; " is 164.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,DeserializeJsonConfig,The length of the statement  "            jsonConf = @"{'ConvertXStoreTableMode': true' 'LeaseDuration': 60' 'ReadViewHeadIndex': 1' 'ReplicaChain': []' 'Timestamp': '/Date(1460152261966)/'' 'ViewId': 58}"; " is 164.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,DeserializeJsonConfig,The length of the statement  "            configPath = Directory.GetCurrentDirectory() + "\\" + @"..\Tests\ConfigFiles\V1ConfigWithV2AttributesWithoutAccKey.txt"; " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestInstrumentationFlagV1,The length of the statement  "                @"{'ConvertXStoreTableMode': true' 'LeaseDuration': 60' 'ReadViewHeadIndex': 1' 'ReplicaChain': ''' 'Timestamp': '/Date(1460152261966)/'' 'ViewId': 58}"; " is 153.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestInstrumentationFlagV1,The length of the statement  "               @"{'ConvertXStoreTableMode': true' 'LeaseDuration': 60' 'ReadViewHeadIndex': 1' 'ReplicaChain': ''' 'Timestamp': '/Date(1460152261966)/'' 'ViewId': 58' 'Instrumentation': false}"; " is 179.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestInstrumentationFlagV1,The length of the statement  "               @"{'ConvertXStoreTableMode': true' 'LeaseDuration': 60' 'ReadViewHeadIndex': 1' 'ReplicaChain': ''' 'Timestamp': '/Date(1460152261966)/'' 'ViewId': 58' 'Instrumentation': true}"; " is 178.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestReadViewTailIndexInV1,The length of the statement  "            jsonConf = @"{'ConvertXStoreTableMode': true' 'LeaseDuration': 60' 'ReadViewHeadIndex': 1' 'ReplicaChain': ''' 'Timestamp': '/Date(1460152261966)/'' 'ViewId': 58}"; " is 164.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestReadViewTailIndexInV1,The length of the statement  "            jsonConf = @"{'ConvertXStoreTableMode': true' 'LeaseDuration': 60' 'ReadViewHeadIndex': 1' 'ReadViewTailIndex': 33' 'ReplicaChain': ''' 'Timestamp': '/Date(1460152261966)/'' 'ViewId': 58}"; " is 189.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestThrowIfReadViewTailIndexIsNotValid,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.ThrowIfReadViewTailIndexIsNotValid("view1")' "ReadViewTailIndex should be less then replica-chain size"); " is 168.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestThrowIfReadViewTailIndexIsNotValid,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' - ReadViewTailIndex:\'{1}\' is out of bounds' replica size:\'{2}\' !!!"' "view1"' 2' 2)); " is 152.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestThrowIfReadViewTailIndexIsNotValid,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.ThrowIfReadViewTailIndexIsNotValid("view1")' "ReadViewTailIndex should be less then replica-chain size"); " is 168.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestThrowIfReadViewTailIndexIsNotValid,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' - ReadViewTailIndex:\'{1}\' is out of bounds' replica size:\'{2}\' !!!"' "view1"' 15' 2)); " is 153.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetView,The length of the statement  "            nullException = TestHelper.ExpectedException<ArgumentNullException>(() => conf.SetView(null' null)' "SetView should fail if view name is null"); " is 144.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetView,The length of the statement  "            nullException = TestHelper.ExpectedException<ArgumentNullException>(() => conf.SetView(""' null)' "SetView should fail if view name is empty"); " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetView,The length of the statement  "            nullException = TestHelper.ExpectedException<ArgumentNullException>(() => conf.SetView("view1"' null)' "SetView should fail if config is null"); " is 144.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetView,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetView("view1"' viewConf)' "SetView should fail if replica chain is null"); " is 139.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetView,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetView("view1"' viewConf)' "SetView should fail if replica chain any null element"); " is 148.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetView,The length of the statement  "            // - Make view1 a single-replica again' and add a table with ConvertToRTable = true' and refering to a single-replica view1 " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetView,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetView("view1"' viewConf2)' "SetView should not break existing table constraints"); " is 147.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetView,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' should not have a view:\'{1}\' with more than 1 replica since it is in Conversion mode!"' table2.TableName' "view1")); " is 182.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetViewThrowIfReadViewTailIndexIsNotValid,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetView("view1"' viewConf)' "ReadViewTailIndex should be less then replica size"); " is 145.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetViewThrowIfReadViewTailIndexIsNotValid,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' - ReadViewTailIndex:\'{1}\' is out of bounds' replica size:\'{2}\' !!!"' "view1"' 0' 0)); " is 152.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetViewThrowIfReadViewTailIndexIsNotValid,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetView("view1"' viewConf)' "ReadViewTailIndex should be less then replica size"); " is 145.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetViewThrowIfReadViewTailIndexIsNotValid,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' - ReadViewTailIndex:\'{1}\' is out of bounds' replica size:\'{2}\' !!!"' "view1"' 1' 1)); " is 152.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetViewThrowIfReadViewTailIndexIsNotValid,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetView("view1"' viewConf)' "ReadViewTailIndex should be less then replica size"); " is 145.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetViewThrowIfReadViewTailIndexIsNotValid,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' - ReadViewTailIndex:\'{1}\' is out of bounds' replica size:\'{2}\' !!!"' "view1"' 2' 2)); " is 152.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetViewThrowIfReadViewTailIndexIsNotValid,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetView("view1"' viewConf)' "ReadViewTailIndex should be less then replica size"); " is 145.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetViewThrowIfReadViewTailIndexIsNotValid,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' - ReadViewTailIndex:\'{1}\' is out of bounds' replica size:\'{2}\' !!!"' "view1"' 33' 2)); " is 153.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetViewWithPartitioningFeature,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetView("view1"' twoReplicasView)' "SetView should fail if the view is a partition view of a table in conversion mode"); " is 183.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetViewWithPartitioningFeature,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' should not have a view:\'{1}\' with more than 1 replica since it is in Conversion mode!"' "tabl5"' "view1")); " is 173.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestRemoveView,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.RemoveView("view2")' "RemoveSetView should fail if view is referenced"); " is 135.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestRemoveView,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' is referenced by table:\'{1}\'! First' delete the table then the view."' "view2"' "tbl2")); " is 154.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestRemoveViewWithPartitioningFeature,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.RemoveView("view1")' "RemoveView should fail if the view is a partition view of a table"); " is 153.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestRemoveViewWithPartitioningFeature,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' is referenced by table:\'{1}\'! First' delete the table then the view."' "view1"' "tabl5")); " is 155.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTable,The length of the statement  "            nullException = TestHelper.ExpectedException<ArgumentNullException>(() => conf.SetTable(null)' "SetTable should fail if config is null"); " is 137.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTable,The length of the statement  "            nullException = TestHelper.ExpectedException<ArgumentNullException>(() => conf.SetTable(tableConf)' "SetTable should fail if TableName is null"); " is 145.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTable,The length of the statement  "            nullException = TestHelper.ExpectedException<ArgumentNullException>(() => conf.SetTable(tableConf)' "SetTable should fail if TableName is empty"); " is 146.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTable,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetTable(table3)' "SetTable should fail if table refers a missing view"); " is 136.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTable,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' refers a missing view:\'{1}\'! First' create the view and then configure the table."'table3.TableName' table3.ViewName)); " is 185.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTable,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetTable(table6)' "SetTable should fail if table in convert mode refers a view with many replica"); " is 162.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTable,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' refers a view:\'{1}\' with more than 1 replica while in Conversion mode!"' table6.TableName' table6.ViewName)); " is 175.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetTable(partitionedTable1)' "SetTable should fail if table partition map butpartitioning is disabled"); " is 167.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' can't have a partition view while partitioning is disabled!"' partitionedTable1.TableName)); " is 156.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetTable(partitionedTable1)' "SetTable should fail if table partition map butpartitioning is disabled"); " is 167.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' can't have a partition view while partitioning is disabled!"' partitionedTable1.TableName)); " is 156.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetTable(partitionedTable1)' "SetTable should fail if table has no default view and at least one partition value has a view"); " is 189.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' can't have a partition view but no default view."' partitionedTable1.TableName)); " is 145.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetTable(partitionedTable1)' "SetTable should fail if table has no default view and at least one partition value has a view"); " is 189.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' can't have a partition view but no default view."' partitionedTable1.TableName)); " is 145.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetTable(partitionedTable1)' "SetTable should fail if table partition map butpartitioning is disabled"); " is 167.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' can't have a partition view while partitioning is disabled!"' partitionedTable1.TableName)); " is 156.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetTable(partitionedTable1)' "SetTable should fail if table partition map butpartitioning is disabled"); " is 167.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' can't have a partition view while partitioning is disabled!"' partitionedTable1.TableName)); " is 156.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetTable(partitionedTable1)' "SetTable should fail if table has a configured partition view which is empty"); " is 172.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' refers a missing partition view:\'{1}\'! First' create the view and then configure the table."' partitionedTable1.TableName' "")); " is 194.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetTable(partitionedTable1)' "SetTable should fail if table has a configured partition view which doesn't exist"); " is 177.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' refers a missing partition view:\'{1}\'! First' create the view and then configure the table."' partitionedTable1.TableName' "view1")); " is 199.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetTable(partitionedTable1)' "SetTable should fail if table has a configured partition view which doesn't exist"); " is 177.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' refers a missing partition view:\'{1}\'! First' create the view and then configure the table."' partitionedTable1.TableName' "view2")); " is 199.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetTable(partitionedTable1)' "SetTable should fail if table partition map butpartitioning is disabled"); " is 167.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' can't have a partition view while partitioning is disabled!"' partitionedTable1.TableName)); " is 156.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetTable(partitionedTable1)' "SetTable should fail if table partition map butpartitioning is disabled"); " is 167.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' can't have a partition view while partitioning is disabled!"' partitionedTable1.TableName)); " is 156.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetTable(partitionedTable1)' "SetTable should fail if table in conversion mode has a configured partition view with >=2 replicas"); " is 194.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTableWithPartitioningFeature,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' refers a partition view:\'{1}\' with more than 1 replica while in Conversion mode!"' partitionedTable1.TableName' "view2")); " is 188.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestGenerateNewConfigId,The length of the statement  "            nullException = TestHelper.ExpectedException<ArgumentNullException>(() => ReplicatedTableConfiguration.GenerateNewConfigId(null)' "Config can't be null"); " is 154.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The length of the statement  "            // *** well-sequencing of replicas is covered in TestSetView() UT as this is common part. Here we won't test on that *** " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The length of the statement  "                    exception = TestHelper.ExpectedException<Exception>(() => ReplicatedTableConfiguration.FromJson(sr.ReadToEnd())' "Parsing config. fails if replica chain is null"); " is 163.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The length of the statement  "                    Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' has a null replica(s) !!!"' "ViewHasEmptyReplicaChain")); " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The length of the statement  "                    exception = TestHelper.ExpectedException<Exception>(() => ReplicatedTableConfiguration.FromJson(sr.ReadToEnd())' "Parsing config. fails if replica chain is null"); " is 163.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The length of the statement  "                    Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' has a null replica(s) !!!"' "ViewHasEmptyReplicaChain")); " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The length of the statement  "                    exception = TestHelper.ExpectedException<Exception>(() => ReplicatedTableConfiguration.FromJson(sr.ReadToEnd())' "Parsing config. fails if 'ReadViewTailIndex' is invalid"); " is 172.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The length of the statement  "                    Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' - ReadViewTailIndex:\'{1}\' is out of bounds' replica size:\'{2}\' !!!"' "view2"' 2' 2)); " is 152.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The length of the statement  "                    exception = TestHelper.ExpectedException<Exception>(() => ReplicatedTableConfiguration.FromJson(sr.ReadToEnd())' "Config can't have duplicate TableConfig"); " is 156.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The length of the statement  "                    Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' is configured more than once! Only one config per table."' "tbl2")); " is 132.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The length of the statement  "                    exception = TestHelper.ExpectedException<Exception>(() => ReplicatedTableConfiguration.FromJson(sr.ReadToEnd())' "Table can't refer a missing view"); " is 149.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The length of the statement  "                    Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' refers a missing view:\'{1}\'! First' create the view and then configure the table."' "tbl3"' "MissingViewName")); " is 178.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The length of the statement  "            configPath = Directory.GetCurrentDirectory() + "\\" + @"..\Tests\ConfigFiles\TableInConvertModeRefersNoneSingleReplica.txt"; " is 124.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The length of the statement  "                    exception = TestHelper.ExpectedException<Exception>(() => ReplicatedTableConfiguration.FromJson(sr.ReadToEnd())' "Table in convert mode can refer only a single-replica view"); " is 175.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The length of the statement  "                    Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' refers a view:\'{1}\' with more than 1 replica while in Conversion mode!"' "tbl4"' "view2")); " is 157.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The length of the statement  "                    exception = TestHelper.ExpectedException<Exception>(() => ReplicatedTableConfiguration.FromJson(sr.ReadToEnd())' "We can't have more than one default table config"); " is 165.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestInstrumentationFlag,The length of the statement  "               @"{'viewMap': null' 'tableList': null' 'LeaseDuration': 10' 'Id': '450a44a6-26fd-4ca2-89b1-32bf99af9248'' 'Instrumentation': false}"; " is 133.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestInstrumentationFlag,The length of the statement  "               @"{'viewMap': null' 'tableList': null' 'LeaseDuration': 10' 'Id': '450a44a6-26fd-4ca2-89b1-32bf99af9248'' 'Instrumentation': true}"; " is 132.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestIgnoreHigherViewIdRowsFlag,The length of the statement  "                @"{'viewMap': null' 'tableList': null' 'LeaseDuration': 10' 'Id': '450a44a6-26fd-4ca2-89b1-32bf99af9248'' 'IgnoreHigherViewIdRows': false}"; " is 140.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestIgnoreHigherViewIdRowsFlag,The length of the statement  "                @"{'viewMap': null' 'tableList': null' 'LeaseDuration': 10' 'Id': '450a44a6-26fd-4ca2-89b1-32bf99af9248'' 'IgnoreHigherViewIdRows': true}"; " is 139.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJsonWithPartitioningFeature,The length of the statement  "                    exception = TestHelper.ExpectedException<Exception>(() => ReplicatedTableConfiguration.FromJson(sr.ReadToEnd())' "Table can't have a partition view and no default view"); " is 170.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJsonWithPartitioningFeature,The length of the statement  "                    Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' can't have a partition view but no default view."' "tbl5")); " is 124.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJsonWithPartitioningFeature,The length of the statement  "                    exception = TestHelper.ExpectedException<Exception>(() => ReplicatedTableConfiguration.FromJson(sr.ReadToEnd())' "Table can't have a missing partition view"); " is 158.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJsonWithPartitioningFeature,The length of the statement  "                    Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' refers a missing partition view:\'{1}\'! First' create the view and then configure the table."' "tbl5"' "MissingView")); " is 184.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJsonWithPartitioningFeature,The length of the statement  "            configPath = Directory.GetCurrentDirectory() + "\\" + @"..\Tests\ConfigFiles\PartitionedTableInConvertModeRefersNoneSingleReplica.txt"; " is 135.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJsonWithPartitioningFeature,The length of the statement  "                    exception = TestHelper.ExpectedException<Exception>(() => ReplicatedTableConfiguration.FromJson(sr.ReadToEnd())' "Table in convert mode can refer only single-replica partition view"); " is 183.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJsonWithPartitioningFeature,The length of the statement  "                    Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' refers a partition view:\'{1}\' with more than 1 replica while in Conversion mode!"' "tbl5"' "view2")); " is 167.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJsonWithPartitioningFeature,The length of the statement  "            configPath = Directory.GetCurrentDirectory() + "\\" + @"..\Tests\ConfigFiles\PartitionedTableWherePartitioningIsDisable.txt"; " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJsonWithPartitioningFeature,The length of the statement  "                    exception = TestHelper.ExpectedException<Exception>(() => ReplicatedTableConfiguration.FromJson(sr.ReadToEnd())' "We can't have a partition view map when partitioning is disabled."); " is 182.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJsonWithPartitioningFeature,The length of the statement  "                    Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' can't have a partition view while partitioning is disabled!"' "tbl3")); " is 135.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.MoveReplicaToHeadAndSetViewToReadOnly("Acc1")' "can't turn WriteOnly replica to ReadOnly!"); " is 155.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' : can't set a WriteOnly replica to ReadOnly !!!"' "view6")); " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnlyWillResetReadViewTailIndexOnSuccess,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.MoveReplicaToHeadAndSetViewToReadOnly("Acc1")' "can't turn WriteOnly replica to ReadOnly!"); " is 155.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnlyWillResetReadViewTailIndexOnSuccess,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' : can't set a WriteOnly replica to ReadOnly !!!"' "view3")); " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestEnableWriteOnReplicas_Rule1_WithTablesInConversionMode,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.EnableWriteOnReplicas("Acc1")' "can't change the view in a view table constraint is broken"); " is 156.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestEnableWriteOnReplicas_Rule1_WithTablesInConversionMode,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' should not have a view:\'{1}\' with more than 1 replica since it is in Conversion mode!"' "tabl2"' "view2")); " is 173.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestEnableWriteOnReplicas_Rule1_WithPartitionedTablesInConversionMode,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.EnableWriteOnReplicas("Acc1")' "can't change the view in a view table constraint is broken"); " is 156.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestEnableWriteOnReplicas_Rule1_WithPartitionedTablesInConversionMode,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' should not have a view:\'{1}\' with more than 1 replica since it is in Conversion mode!"' "partitioned_tabl2"' "view2")); " is 185.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestEnableWriteOnReplicas_Rule2_WithTablesInConversionMode,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.EnableWriteOnReplicas("Acc1")' "can't change the view in a view table constraint is broken"); " is 156.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestEnableWriteOnReplicas_Rule2_WithTablesInConversionMode,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' should not have a view:\'{1}\' with more than 1 replica since it is in Conversion mode!"' "tabl2"' "view2")); " is 173.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestEnableWriteOnReplicas_Rule2_WithPartitionedTablesInConversionMode,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.EnableWriteOnReplicas("Acc1")' "can't change the view in a view table constraint is broken"); " is 156.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestEnableWriteOnReplicas_Rule2_WithPartitionedTablesInConversionMode,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("Table:\'{0}\' should not have a view:\'{1}\' with more than 1 replica since it is in Conversion mode!"' "partitioned_tabl2"' "view2")); " is 185.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestEnableReadWriteOnReplicas,The length of the statement  "            // basic feature is already UTed by implementing class' we need UT here to validate we iterate on all configured views ... " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestEnableReadWriteOnReplicas,The length of the statement  "                This API doesn't do post-check on the validity of the resulting replica-chain. The caller is responsible of ensuring that. " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestEnableReadWriteOnReplicas,The length of the statement  "            exception = TestHelper.ExpectedException<Exception>(() => conf.SetView("viewInvalid"' view5)' "Replicas chain is invalid"); " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestEnableReadWriteOnReplicas,The length of the statement  "            Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' has invalid Read chain:\'{1}\' !!!"' "viewInvalid"' "RWR")); " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestTurnReplicaOff,The length of the statement  "            // basic feature is already UTed by implementing class' we need UT here to validate we iterate on all configured views ... " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestTurnReplicaOffWillResetReadViewTailIndexOnSuccess,The length of the statement  "            // basic feature is already UTed by implementing class' we need UT here to validate we iterate on all configured views ... " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchInsertFailSync,The length of the statement  "                TestHelper.ValidateResponse(opContext' 1' (int)HttpStatusCode.Conflict' new string[] { "EntityAlreadyExists" }' "The specified entity already exists"); " is 151.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchInsertOrMergeSync,The length of the statement  "            DynamicReplicatedTableEntity insertOrMergeEntity = new DynamicReplicatedTableEntity("batchInsertOrMerge entity"' "foo"); " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchInsertOrMergeSync,The length of the statement  "            TableResult result = this.repTable.Execute(TableOperation.Retrieve<DynamicReplicatedTableEntity>(insertOrMergeEntity.PartitionKey' insertOrMergeEntity.RowKey)); " is 160.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchInsertOrMergeSync,The length of the statement  "            result = this.repTable.Execute(TableOperation.Retrieve<DynamicReplicatedTableEntity>(insertOrMergeEntity.PartitionKey' insertOrMergeEntity.RowKey)); " is 148.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchInsertOrMergeSync,The length of the statement  "            Assert.AreEqual(2' retrievedEntity.Properties.Count' "retrievedEntity.Properties.Count={0}. (Expecting 2)"' retrievedEntity.Properties.Count); " is 142.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchDeleteSyncUsingExecuteQuery,The length of the statement  "            IEnumerable<DynamicReplicatedTableEntity> allEntities = this.repTable.ExecuteQuery<DynamicReplicatedTableEntity>(query); " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchDeleteSyncUsingRetrieve,The length of the statement  "            TableResult result = this.repTable.Execute(TableOperation.Retrieve<DynamicReplicatedTableEntity>(baseEntity.PartitionKey' baseEntity.RowKey)); " is 142.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchDeleteSync,The length of the statement  "                TestHelper.ValidateResponse(opContext' 1' (int)HttpStatusCode.NotFound' new string[] { "ResourceNotFound" }' "The specified resource does not exist."); " is 151.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchMergeSync,The length of the statement  "            DynamicReplicatedTableEntity mergeEntity = new DynamicReplicatedTableEntity(baseEntity.PartitionKey' baseEntity.RowKey) { ETag = baseEntity.ETag }; " is 147.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchMergeSync,The length of the statement  "            TableResult result = this.repTable.Execute(TableOperation.Retrieve<DynamicReplicatedTableEntity>(baseEntity.PartitionKey' baseEntity.RowKey)); " is 142.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchReplaceSync,The length of the statement  "            DynamicReplicatedTableEntity replaceEntity = new DynamicReplicatedTableEntity(baseEntity.PartitionKey' baseEntity.RowKey)  " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchReplaceSync,The length of the statement  "            TableResult result = this.repTable.Execute(TableOperation.Retrieve<DynamicReplicatedTableEntity>(baseEntity.PartitionKey' baseEntity.RowKey)); " is 142.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchReplaceSync,The length of the statement  "            result = this.repTable.Execute(TableOperation.Retrieve<DynamicReplicatedTableEntity>(baseEntity.PartitionKey' baseEntity.RowKey)); " is 130.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchOperationsWithEmptyKeys,The length of the statement  "            DynamicReplicatedTableEntity mergeEntity = new DynamicReplicatedTableEntity(retrievedEntity.PartitionKey' retrievedEntity.RowKey) { ETag = retrievedEntity.ETag }; " is 162.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchOperationsWithEmptyKeys,The length of the statement  "            DynamicReplicatedTableEntity replaceEntity = new DynamicReplicatedTableEntity(ent.PartitionKey' ent.RowKey) { ETag = retrievedEntity.ETag }; " is 140.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchWithMultipleOperationsOnSameEntityShouldFail,The length of the statement  "                TestHelper.ValidateResponse(opContext' 1' (int)HttpStatusCode.BadRequest' new string[] { "InvalidInput" }' new string[] { "99:One of the request inputs is not valid." }' false); " is 177.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchOver100EntitiesShouldThrow,The length of the statement  "                TestHelper.ValidateResponse(opContext' 1' (int)HttpStatusCode.BadRequest' new string[] { "InvalidInput" }' "One of the request inputs is not valid."); " is 150.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchEntityOver1MBShouldThrow,The length of the statement  "                TestHelper.ValidateResponse(opContext' 2' (int)HttpStatusCode.BadRequest' new string[] { "EntityTooLarge" }' "The entity is larger than the maximum allowed size (1MB)."); " is 170.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchOver4MBShouldThrow,The length of the statement  "                //TestHelper.ValidateResponse(opContext' 1' (int)HttpStatusCode.BadRequest' new string[] { "ContentLengthExceeded" }' "The content length for the requested operation has exceeded the limit (4MB)."); " is 198.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchWithPropertyOver255CharsShouldThrow,The length of the statement  "                TestHelper.ValidateResponse(opContext' 2' (int)HttpStatusCode.BadRequest' new string[] { "PropertyNameTooLong" }' "The property name exceeds the maximum allowed length (255)."); " is 177.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableConfigurationServiceTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableConfigurationServiceTests.cs,AddReplicaTest,The length of the statement  "            Assert.IsFalse(this.configurationWrapper.IsViewStable()' "View = {0}"' this.configurationWrapper.GetWriteView().IsStable); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCreateTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCreateTableTests.cs,RTableCreateTableAlreadyExistsSync,The length of the statement  "                Assert.AreEqual(replicasCreated' 0' "Calling CreateIfNotExists() again returned replicasCreated={0} > 0. Should be 0."' replicasCreated); " is 137.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,XStoreCRUDTest,The length of the statement  "            Assert.AreEqual((int)HttpStatusCode.OK' retrieveResult.HttpStatusCode' "RetrieveAfterReplace: retrieveResult.HttpStatusCode mismatch"); " is 135.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,XStoreCRUDTest,The length of the statement  "            Assert.AreEqual((int)HttpStatusCode.NotFound' retrieveResult.HttpStatusCode' "RetrieveAfterDelete: retrieveResult.HttpStatusCode mismatch"); " is 140.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,XStoreCRUDTest,The length of the statement  "                        Assert.AreEqual(HttpStatusCode.NotFound.ToString()' webResponse.StatusCode.ToString()' "RetrieveAfterDelete: webResponse.StatusCode mismatch"); " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrReplaceSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' row._rtable_ViewId' "row._rtable_ViewId mismatch"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrReplaceSync,The length of the statement  "            Assert.IsTrue(retrievedResult.Result is IReplicatedTableEntity' "Expected entity to be of type IReplicatedTableEntity"); " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrReplaceSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' row._rtable_ViewId' "row._rtable_ViewId mismatch"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrReplaceSync,The length of the statement  "            Assert.IsTrue(retrievedResult.Result is IReplicatedTableEntity' "Expected entity to be of type IReplicatedTableEntity"); " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrReplaceSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' customer._rtable_ViewId' "customer._rtable_ViewId mismatch"); " is 132.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrReplaceSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' row._rtable_ViewId' "row._rtable_ViewId mismatch"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrReplaceSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' customer._rtable_ViewId' "customer._rtable_ViewId mismatch"); " is 132.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableUpsert,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' row._rtable_ViewId' "row._rtable_ViewId mismatch"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableUpsert,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' row._rtable_ViewId' "row._rtable_ViewId mismatch"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertRetrieveSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' row._rtable_ViewId' "row._rtable_ViewId mismatch"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertRetrieveSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' customer._rtable_ViewId' "customer._rtable_ViewId mismatch"); " is 132.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertRetrieveSync,The length of the statement  "            Assert.AreEqual(result.HttpStatusCode' (int) HttpStatusCode.Conflict' "Duplicate insert should result in a conflict error. Error = {0}"' result.HttpStatusCode); " is 160.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertRetrieveSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' currentRow._rtable_ViewId' "currentRow._rtable_ViewId mismatch"); " is 136.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceWithStarEtagSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' row._rtable_ViewId' "row._rtable_ViewId mismatch"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceWithStarEtagSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' customer._rtable_ViewId' "customer._rtable_ViewId mismatch"); " is 132.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceWithStarEtagSync,The length of the statement  "            Assert.IsTrue(result.HttpStatusCode == (int)HttpStatusCode.NoContent || result.HttpStatusCode == (int)HttpStatusCode.OK'  " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceWithStarEtagSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' dynCustomer._rtable_ViewId' "customer._rtable_ViewId mismatch"); " is 135.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceWithStarEtagSync,The length of the statement  "            Assert.AreEqual(customer.PhoneNumber' dynCustomer.Properties["PhoneNumber"].StringValue' "dynCustomer.PhoneNumber mismatch"); " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceWithStarEtagSync,The length of the statement  "            dynCustomer.Properties["Email"] = EntityProperty.CreateEntityPropertyFromObject("nongenretrieveandreplace@company.com"); " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceWithStarEtagSync,The length of the statement  "            Assert.IsTrue(result.HttpStatusCode == (int)HttpStatusCode.NoContent || result.HttpStatusCode == (int)HttpStatusCode.OK' " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' row._rtable_ViewId' "row._rtable_ViewId mismatch"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' customer._rtable_ViewId' "customer._rtable_ViewId mismatch"); " is 132.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' dynCustomer._rtable_ViewId' "customer._rtable_ViewId mismatch"); " is 135.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceSync,The length of the statement  "            Assert.AreEqual(customer.PhoneNumber' dynCustomer.Properties["PhoneNumber"].StringValue' "dynCustomer.PhoneNumber mismatch"); " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceSync,The length of the statement  "            dynCustomer.Properties["Email"] = EntityProperty.CreateEntityPropertyFromObject("nongenretrieveandreplace@company.com"); " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceSync,The length of the statement  "            Assert.IsTrue(result.HttpStatusCode == (int)HttpStatusCode.NoContent || result.HttpStatusCode == (int)HttpStatusCode.OK' " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' dynCustomer._rtable_ViewId' "customer._rtable_ViewId mismatch"); " is 135.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceSync,The length of the statement  "            Assert.AreEqual(customer.PhoneNumber' dynCustomer.Properties["PhoneNumber"].StringValue' "dynCustomer.PhoneNumber mismatch"); " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceSync,The length of the statement  "            Assert.AreEqual("nongenretrieveandreplace@company.com"' dynCustomer.Properties["Email"].StringValue' "dynCustomer.Email mismatch"); " is 131.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableDeleteSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' row._rtable_ViewId' "row._rtable_ViewId mismatch"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableDeleteSync,The length of the statement  "            Assert.AreEqual((int)HttpStatusCode.NotFound' retrievedResult2.HttpStatusCode' "retrievedResult2.HttpStatusCode mismatch"); " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableDeleteWithStarEtagSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' row._rtable_ViewId' "row._rtable_ViewId mismatch"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableDeleteWithStarEtagSync,The length of the statement  "            Assert.AreEqual((int)HttpStatusCode.NotFound' retrievedResult2.HttpStatusCode' "retrievedResult2.HttpStatusCode mismatch"); " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableMergeSync,The length of the statement  "            result = currentTable.Execute(TableOperation.Retrieve<DynamicReplicatedTableEntity>(baseEntity.PartitionKey' baseEntity.RowKey)); " is 129.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableMergeSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' row._rtable_ViewId' "row._rtable_ViewId mismatch"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableMergeSync,The length of the statement  "            DynamicReplicatedTableEntity mergeEntity = new DynamicReplicatedTableEntity(baseEntity.PartitionKey' baseEntity.RowKey) { ETag = result.Etag }; " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableMergeSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' row._rtable_ViewId' "row._rtable_ViewId mismatch"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableMergeSync,The length of the statement  "            result = currentTable.Execute(TableOperation.Retrieve<DynamicReplicatedTableEntity>(baseEntity.PartitionKey' baseEntity.RowKey)); " is 129.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableMergeSync,The length of the statement  "            Assert.AreEqual(this.rtableTestConfiguration.RTableInformation.ViewId' row._rtable_ViewId' "row._rtable_ViewId mismatch"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrMergeSync,The length of the statement  "            DynamicReplicatedTableEntity mergeEntity = new DynamicReplicatedTableEntity(baseEntity.PartitionKey' baseEntity.RowKey) { ETag = result.Etag }; " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrMergeSync,The length of the statement  "            DynamicReplicatedTableEntity mergeEntity2 = new DynamicReplicatedTableEntity(baseEntity.PartitionKey' baseEntity.RowKey) { ETag = result.Etag }; " is 144.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrMergeSync,The length of the statement  "            Assert.AreEqual((int)HttpStatusCode.NoContent' result.HttpStatusCode' "InsertOrMerge(): result.HttpStatusCode mismatch"); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrMergeSync,The length of the statement  "            result = currentTable.Execute(TableOperation.Retrieve<DynamicReplicatedTableEntity>(baseEntity.PartitionKey' baseEntity.RowKey)); " is 129.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrMergeSync,The length of the statement  "            InitDynamicReplicatedTableEntity initEntity = new InitDynamicReplicatedTableEntity("0"' "devicetype__Cisco-ASR-1006"' null' properties); " is 136.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCutOffTailTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCutOffTailTests.cs,SetupStaleViewAndNewView,The length of the statement  "            configServiceOne = new ReplicatedTableConfigurationServiceV2(this.configurationInfos' this.connectionStringMap' useHttps); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCutOffTailTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCutOffTailTests.cs,SetupStaleViewAndNewView,The length of the statement  "            configServiceTwo = new ReplicatedTableConfigurationServiceV2(this.configurationInfos' this.connectionStringMap' useHttps); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCutOffTailTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCutOffTailTests.cs,ConfigurationChangeNotificationAfterDetectingStaleView,The length of the statement  "                Assert.IsTrue(ex.Message.Contains(string.Format("current _rtable_ViewId {0} is smaller than _rtable_ViewId of existing row {1}"' staleViewId' latestViewId))' "Got unexpected exception message"); " is 194.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCutOffTailTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCutOffTailTests.cs,ConfigurationChangeNotificationAfterDetectingStaleView,The length of the statement  "            Assert.AreEqual(configServiceOne.GetTableView(this.repTable.TableName).ViewId' staleViewId' "we should see old View!!!"); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCutOffTailTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCutOffTailTests.cs,ConfigurationChangeNotificationAfterDetectingStaleView,The length of the statement  "            Assert.AreEqual(configServiceOne.GetTableView(this.repTable.TableName).ViewId' latestViewId' "we should see latest View!!!"); " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableCutOffTailTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCutOffTailTests.cs,ReadingUncommittedDataFromReplicaIdentifiedByReadTailIndexWontThrow,The length of the statement  "            Assert.AreEqual((int)HttpStatusCode.ServiceUnavailable' oldUpdateResult.HttpStatusCode' "oldUpdateResult.HttpStatusCode mismatch"); " is 131.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,SetupStaleViewAndNewView,The length of the statement  "            configServiceOne = new ReplicatedTableConfigurationServiceV2(this.configurationInfos' this.connectionStringMap' useHttps); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,SetupStaleViewAndNewView,The length of the statement  "            configServiceTwo = new ReplicatedTableConfigurationServiceV2(this.configurationInfos' this.connectionStringMap' useHttps); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,ConfigurationChangeNotificationAfterDetectingStaleView,The length of the statement  "                Assert.IsTrue(ex.Message.Contains(string.Format("current _rtable_ViewId {0} is smaller than _rtable_ViewId of existing row {1}"' staleViewId' latestViewId))' "Got unexpected exception message"); " is 194.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,ConfigurationChangeNotificationAfterDetectingStaleView,The length of the statement  "            Assert.AreEqual(configServiceOne.GetTableView(this.repTable.TableName).ViewId' staleViewId' "we should see old View!!!"); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,ConfigurationChangeNotificationAfterDetectingStaleView,The length of the statement  "            Assert.AreEqual(configServiceOne.GetTableView(this.repTable.TableName).ViewId' latestViewId' "we should see latest View!!!"); " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,UpdateInStaleViewConflictingWithUpdateInNewView_T01,The length of the statement  "            Assert.AreEqual((int)HttpStatusCode.NoContent' oldUpdateResult.HttpStatusCode' "oldUpdateResult.HttpStatusCode mismatch"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,UpdateInStaleViewConflictingWithUpdateInNewView_T01,The length of the statement  "            Assert.AreEqual((int)HttpStatusCode.PreconditionFailed' newUpdateResult.HttpStatusCode' "newUpdateResult.HttpStatusCode mismatch"); " is 131.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,UpdateInStaleViewConflictingWithUpdateInNewView_T02,The length of the statement  "            Assert.AreEqual((int)HttpStatusCode.NoContent' oldUpdateResult.HttpStatusCode' "oldUpdateResult.HttpStatusCode mismatch"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,UpdateInStaleViewConflictingWithUpdateInNewView_T02,The length of the statement  "            Assert.AreEqual((int)HttpStatusCode.NoContent' newUpdateResult.HttpStatusCode' "newUpdateResult.HttpStatusCode mismatch"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,InsertInStaleViewConflictingWithInsertInNewView,The length of the statement  "            Assert.AreEqual((int)HttpStatusCode.NoContent' oldInsertResult.HttpStatusCode' "oldInsertResult.HttpStatusCode mismatch"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,InsertInStaleViewConflictingWithInsertInNewView,The length of the statement  "            Assert.AreEqual((int)HttpStatusCode.Conflict' newInsertResult.HttpStatusCode' "newUpdateResult.HttpStatusCode mismatch"); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,RepairTableWontRepairRowsWithHigherViewIdWhenIgnoreHigherViewIdRowsFlagIsSet,The length of the statement  "                Assert.IsTrue(result != null && result.HttpStatusCode == (int)HttpStatusCode.OK && (CustomerEntity)result.Result != null' "Retrieve customer failed"); " is 150.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,RepairTableWontRepairRowsWithHigherViewIdWhenIgnoreHigherViewIdRowsFlagIsSet,The length of the statement  "                    Assert.AreEqual((int)HttpStatusCode.NotFound' retrievedResult.HttpStatusCode' "retrievedResult.HttpStatusCode mismatch"); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,RepairTableWontRepairRowsWithHigherViewIdWhenIgnoreHigherViewIdRowsFlagIsSet,The length of the statement  "                    Assert.AreEqual((int)HttpStatusCode.NotFound' retrievedResult.HttpStatusCode' "retrievedResult.HttpStatusCode mismatch"); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,CaseNoRepair_ReadRowFromOldViewCutOffTailUpdateRow,The length of the statement  "            Assert.IsTrue(result != null && result.HttpStatusCode == (int)HttpStatusCode.NotFound' "Update customer should failed"); " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,LoadTestConfiguration,The length of the statement  "            if (this.rtableTestConfiguration.StorageInformation.AccountKeys.Count() != this.rtableTestConfiguration.StorageInformation.AccountNames.Count()) " is 144.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,LoadTestConfiguration,The length of the statement  "                throw new Exception(string.Format("Must specify the same number of AccountNames and AccountKeys in RTableTestConfiguration: {0}"' filename)); " is 141.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,SetupRTableEnv,The length of the statement  "            // If user does not specify which storage accounts to construct the RTable' then use all the storage accounts in the xml. " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,DeleteConfigurationBlob,The length of the statement  "                if (blobName.Equals(this.rtableTestConfiguration.RTableInformation.BlobName' StringComparison.InvariantCultureIgnoreCase)) " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,GetRTableConfigurationLocationInfo,The length of the statement  "            string configFilePath = string.Format(@"{0}/{1}"' this.rtableTestConfiguration.RTableInformation.ContainerName' blobName); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,GetConnectionString,The length of the statement  "            return string.Format(@"DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};BlobEndpoint=https://{0}.blob.{2};QueueEndpoint=https://{0}.queue.{2};TableEndpoint=https://{0}.table.{2}"' " is 192.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,ReadFromIndividualAccountsDirectly,The length of the statement  "                foreach (var item in ((CloudTableClient) configurationWrapper.GetWriteView()[i]).GetTableReference(repTable.TableName).ExecuteQuery(query)) " is 139.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,ReadFromIndividualAccountsDirectly,The length of the statement  "                    Assert.IsTrue((entities[0] == null && entities[i] == null) || (entities[0]  != null && entities[0].Equals(entities[i]))' " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,PerformInvariantChecks,The length of the statement  "            var headEntities = configurationWrapper.GetWriteView()[headReplicaAccountIndex].GetTableReference(repTable.TableName).ExecuteQuery(query).ToDictionary(e => e.RowKey' e => e); " is 174.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,PerformInvariantChecks,The length of the statement  "            var tailEntities = configurationWrapper.GetWriteView()[tailReplicaAccountIndex].GetTableReference(repTable.TableName).ExecuteQuery(query).ToDictionary(e => e.RowKey' e => e); " is 174.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,InitialSetup,The length of the statement  "            this.configurationService = new ReplicatedTableConfigurationServiceV2(this.configurationInfos' this.connectionStringMap' useHttps); " is 131.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,UploadRTableConfigToBlob,The length of the statement  "                CloudBlobContainer container = cloudBloblClient.GetContainerReference(this.rtableTestConfiguration.RTableInformation.ContainerName); " is 132.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,ModifyConfigurationBlob,The length of the statement  "                ReplicatedTableConfiguration newConfig = this.GetRTableConfiguration(updatedViewId' convertXStoreTableMode' readViewHeadIndex); " is 127.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,ModifyConfigurationBlob,The length of the statement  "                ReplicatedTableQuorumWriteResult writeResult = this.configurationService.UploadConfigurationToBlobs(blobIndexes' newConfig); " is 124.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnEntriesWithTombstone,The length of the statement  "                    Assert.AreEqual((int)HttpStatusCode.ServiceUnavailable' deleteResult.HttpStatusCode' "deleteResult.HttpStatusCode mismatch"); " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontThrowOnStaleViewByDefault,The length of the statement  "            Assert.AreEqual(staleViewId' this.configurationService.GetTableView(this.repTable.TableName).ViewId' "View should be 5!!!"); " is 124.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontThrowOnStaleViewByDefault,The length of the statement  "            Assert.AreEqual(newViewId' this.configurationService.GetTableView(this.repTable.TableName).ViewId' "View should be 6!!!"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontThrowOnStaleViewByDefault,The length of the statement  "            Assert.IsTrue(result != null && result.HttpStatusCode == (int)HttpStatusCode.OK && (CustomerEntity)result.Result != null' "Retrieve customer failed"); " is 150.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontThrowOnStaleViewByDefault,The length of the statement  "            Assert.AreEqual(staleViewId' this.configurationService.GetTableView(this.repTable.TableName).ViewId' "View should be 5!!!"); " is 124.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontThrowOnStaleViewByDefault,The length of the statement  "                Assert.IsTrue(ex.Message.Contains(string.Format("current _rtable_ViewId {0} is smaller than _rtable_ViewId of existing row {1}"' staleViewId' newViewId))' "Got unexpected exception message"); " is 191.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesThrowAfterDetectingStaleViewWhenThrowOnStaleViewInLinqQueryFlagIsSet,The length of the statement  "            Assert.AreEqual(staleViewId' this.configurationService.GetTableView(this.repTable.TableName).ViewId' "View should be 5!!!"); " is 124.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesThrowAfterDetectingStaleViewWhenThrowOnStaleViewInLinqQueryFlagIsSet,The length of the statement  "            Assert.AreEqual(newViewId' this.configurationService.GetTableView(this.repTable.TableName).ViewId' "View should be 6!!!"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesThrowAfterDetectingStaleViewWhenThrowOnStaleViewInLinqQueryFlagIsSet,The length of the statement  "            Assert.IsTrue(result != null && result.HttpStatusCode == (int)HttpStatusCode.OK && (CustomerEntity)result.Result != null' "Retrieve customer failed"); " is 150.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesThrowAfterDetectingStaleViewWhenThrowOnStaleViewInLinqQueryFlagIsSet,The length of the statement  "            Assert.AreEqual(staleViewId' this.configurationService.GetTableView(this.repTable.TableName).ViewId' "View should be 5!!!"); " is 124.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesThrowAfterDetectingStaleViewWhenThrowOnStaleViewInLinqQueryFlagIsSet,The length of the statement  "                Assert.IsTrue(ex.Message.Contains(string.Format("current _rtable_ViewId {0} is smaller than _rtable_ViewId of existing row {1}"' staleViewId' newViewId))' "Got unexpected exception message"); " is 191.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesThrowAfterDetectingStaleViewWhenThrowOnStaleViewInLinqQueryFlagIsSet,The length of the statement  "                Assert.IsTrue(ex.Message.Contains(string.Format("current _rtable_ViewId {0} is smaller than _rtable_ViewId of existing row {1}"' staleViewId' newViewId))' "Got unexpected exception message"); " is 191.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesThrowAfterDetectingStaleViewWhenThrowOnStaleViewInLinqQueryFlagIsSet,The length of the statement  "                Assert.IsTrue(ex.Message.Contains(string.Format("current _rtable_ViewId {0} is smaller than _rtable_ViewId of existing row {1}"' staleViewId' newViewId))' "Got unexpected exception message"); " is 191.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnRowsWithHighViewIdWhenFlagIgnoreHigherViewIdRowsIsSet,The length of the statement  "            Assert.AreEqual(staleViewId' this.configurationService.GetTableView(this.repTable.TableName).ViewId' "View should be 5!!!"); " is 124.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnRowsWithHighViewIdWhenFlagIgnoreHigherViewIdRowsIsSet,The length of the statement  "            Assert.AreEqual(newViewId' this.configurationService.GetTableView(this.repTable.TableName).ViewId' "View should be 6!!!"); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnRowsWithHighViewIdWhenFlagIgnoreHigherViewIdRowsIsSet,The length of the statement  "                Assert.IsTrue(result != null && result.HttpStatusCode == (int)HttpStatusCode.OK && (CustomerEntity)result.Result != null' "Retrieve customer failed"); " is 150.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnRowsWithHighViewIdWhenFlagIgnoreHigherViewIdRowsIsSet,The length of the statement  "            Assert.AreEqual(staleViewId' this.configurationService.GetTableView(this.repTable.TableName).ViewId' "View should be 5!!!"); " is 124.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnRowsWithHighViewIdWhenFlagIgnoreHigherViewIdRowsIsSet,The length of the statement  "                    Assert.AreEqual((int)HttpStatusCode.NotFound' retrievedResult.HttpStatusCode' "retrievedResult.HttpStatusCode mismatch"); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesAreServedFromTailWhenReadViewTailIndexIsNotSet,The length of the statement  "                    Assert.AreEqual((int)HttpStatusCode.ServiceUnavailable' replaceResult.HttpStatusCode' "replaceResult.HttpStatusCode mismatch"); " is 127.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesAreServedFromHeadWhenReadViewTailIndexIsSet,The length of the statement  "                    Assert.AreEqual((int)HttpStatusCode.ServiceUnavailable' replaceResult.HttpStatusCode' "replaceResult.HttpStatusCode mismatch"); " is 127.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesAreServedFromHeadWhenReadViewTailIndexIsSet,The length of the statement  "            Assert.AreEqual(0' this.configurationService.GetTableView(this.repTable.TableName).ReadTailIndex' "ReadTailIndex should be 0!!!"); " is 130.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableExecuteQueryGeneric,The length of the statement  "            RTableWrapperForSampleRTableEntity localRTableWrapper = RTableWrapperForSampleRTableEntity.GetRTableWrapper(localRTable); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBasicWithResolverSync,The length of the statement  "            List<string> segList = currentTable.ExecuteQuerySegmented(query2' (pk' rk' ts' props' etag) => props["a"].StringValue' null).ToList(); " is 134.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableCombineFilters,The length of the statement  "                                                    where ((ent.RowKey.CompareTo("0050") == 0 || ent.RowKey.CompareTo("0051") == 0) && ent.PartitionKey == "tables_batch_2") " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableFirst,The length of the statement  "            TestHelper.ExpectedException<TargetInvocationException>(() => (from ent in currentTable.CreateQuery<DynamicReplicatedTableEntity>() " is 131.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableSingle,The length of the statement  "            TestHelper.ExpectedException<TargetInvocationException>(() => (from ent in currentTable.CreateQuery<DynamicReplicatedTableEntity>() " is 131.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableSingle,The length of the statement  "            TestHelper.ExpectedException<TargetInvocationException>(() => (from ent in currentTable.CreateQuery<DynamicReplicatedTableEntity>() " is 131.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableMultipleTake,The length of the statement  "            TestHelper.ExpectedException<ArgumentException>(() => (from ent in currentTable.CreateQuery<DynamicReplicatedTableEntity>() " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableComplexFilter,The length of the statement  "                                               where ((ent.RowKey == "0050" && ent.Int32 == 50) || ((ent.Int32 == 30) && (ent.String == "wrong string" || ent.Bool == true)) || (ent.LongPrimitiveN == (long)int.MaxValue + 50)) " is 177.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableNestedParanthesis,The length of the statement  "                                               ((ent.Int32 == 30) && (ent.String == "wrong string" || ent.Bool == true) && !(ent.IntegerPrimitive == 31 && ent.LongPrimitive == (long)int.MaxValue + 31)) || " is 157.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBasicWithResolverTask,The length of the statement  "            List<string> segList = currentTable.ExecuteQuerySegmentedAsync(query2' (pk' rk' ts' props' etag) => props["a"].StringValue' null).Result.ToList(); " is 146.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableProjection,The length of the statement  "            TestHelper.ExpectedException<TargetInvocationException>(() => (from ent in complexEntityTable.CreateQuery<ComplexEntity>() " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableProjection,The length of the statement  "            TestHelper.ExpectedException<TargetInvocationException>(() => (from ent in complexEntityTable.CreateQuery<ComplexEntity>() " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableMultipleFrom,The length of the statement  "            TestHelper.ExpectedException<NotSupportedException>(() => query.ExecuteSegmented(null)' "Multiple from option not allowed in a query"); " is 135.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableSetOperators,The length of the statement  "            TestHelper.ExpectedException<TargetInvocationException>(() => query.Intersect(query2).Count()' "Intersect is not supported"); " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableSetOperators,The length of the statement  "            TestHelper.ExpectedException<TargetInvocationException>(() => query.SequenceEqual(query2)' "SequenceEqual is not supported"); " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableElementAt,The length of the statement  "            TestHelper.ExpectedException<TargetInvocationException>(() => (from ent in currentTable.CreateQuery<DynamicReplicatedTableEntity>() " is 131.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableElementAt,The length of the statement  "            TestHelper.ExpectedException<TargetInvocationException>(() => (from ent in currentTable.CreateQuery<DynamicReplicatedTableEntity>() " is 131.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableAggregation,The length of the statement  "            TestHelper.ExpectedException<TargetInvocationException>(() => (from ent in complexEntityTable.CreateQuery<ComplexEntity>() " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableAggregation,The length of the statement  "            TestHelper.ExpectedException<TargetInvocationException>(() => (from ent in complexEntityTable.CreateQuery<ComplexEntity>() " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableAggregation,The length of the statement  "            TestHelper.ExpectedException<TargetInvocationException>(() => (from ent in complexEntityTable.CreateQuery<ComplexEntity>() " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableAggregation,The length of the statement  "            TestHelper.ExpectedException<TargetInvocationException>(() => (from ent in complexEntityTable.CreateQuery<ComplexEntity>() " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableGenericWithResolver,The length of the statement  "            foreach (string ent in currentTable.ExecuteQuery(query' (pk' rk' ts' prop' etag) => prop["A"].StringValue + prop["C"].StringValue)) " is 131.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableGenericWithResolver,The length of the statement  "                (pk' rk' ts' prop' etag) => new BaseEntity() { PartitionKey = pk' RowKey = rk' Timestamp = ts' A = prop["A"].StringValue' C = prop["C"].StringValue' ETag = etag })) " is 164.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryResolverWithDynamic,The length of the statement  "            foreach (string ent in currentTable.ExecuteQuery(query' (pk' rk' ts' prop' etag) => prop["A"].StringValue + prop["C"].StringValue)) " is 131.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryResolverWithDynamic,The length of the statement  "                            (pk' rk' ts' prop' etag) => new BaseEntity() { PartitionKey = pk' RowKey = rk' Timestamp = ts' A = prop["A"].StringValue' C = prop["C"].StringValue' ETag = etag })) " is 164.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQuerySegmentedResolver,The length of the statement  "                TableQuerySegment<string> segment = currentTable.ExecuteQuerySegmented<TableEntity' string>(query' (pk' rk' ts' prop' etag) => prop["A"].StringValue + prop["C"].StringValue' token); " is 181.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQuerySegmentedResolver,The length of the statement  "                TableQuerySegment<BaseEntity> segment = currentTable.ExecuteQuerySegmented<TableEntity' BaseEntity>(query' (pk' rk' ts' prop' etag) => new BaseEntity() { PartitionKey = pk' RowKey = rk' Timestamp = ts' A = prop["A"].StringValue' C = prop["C"].StringValue' ETag = etag }' token); " is 278.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQuerySegmentedResolverWithDynamic,The length of the statement  "                TableQuerySegment<string> segment = currentTable.ExecuteQuerySegmented<string>(query' (pk' rk' ts' prop' etag) => prop["A"].StringValue + prop["C"].StringValue' token); " is 168.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQuerySegmentedResolverWithDynamic,The length of the statement  "                TableQuerySegment<BaseEntity> segment = currentTable.ExecuteQuerySegmented<BaseEntity>(query' (pk' rk' ts' prop' etag) => new BaseEntity() { PartitionKey = pk' RowKey = rk' Timestamp = ts' A = prop["A"].StringValue' C = prop["C"].StringValue' ETag = etag }' token); " is 265.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableGenericWithResolverAPM,The length of the statement  "                    IAsyncResult result = currentTable.BeginExecuteQuerySegmented(query' (pk' rk' ts' prop' etag) => prop["A"].StringValue + prop["C"].StringValue' token' ar => waitHandle.Set()' null); " is 181.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryResolverWithDynamicAPM,The length of the statement  "                    IAsyncResult result = currentTable.BeginExecuteQuerySegmented(query' (pk' rk' ts' prop' etag) => prop["A"].StringValue + prop["C"].StringValue' token' ar => waitHandle.Set()' null); " is 181.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryResolverWithDynamicAPM,The length of the statement  "                    IAsyncResult result = currentTable.BeginExecuteQuerySegmented(query' (pk' rk' ts' prop' etag) => new BaseEntity() { PartitionKey = pk' RowKey = rk' Timestamp = ts' A = prop["A"].StringValue' C = prop["C"].StringValue' ETag = etag }' token' ar => waitHandle.Set()' null); " is 270.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryGenericWithTakeCountAndResolver,The length of the statement  "            IEnumerable<string> enumerable = currentTable.ExecuteQuery(query' (pk' rk' ts' prop' etag) => pk + rk' null' opContext); " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableGenericQueryWithInternalType,The length of the statement  "            TableQuery<InternalEntity> query = new TableQuery<InternalEntity>().Where(TableQuery.GenerateFilterCondition("PartitionKey"' QueryComparisons.Equal' "tables_batch_1")); " is 168.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableGenericQueryOnTypeWithNoCtor,The length of the statement  "            TestHelper.ExpectedException<NotSupportedException>(() => new TableQuery<NoCtorEntity>()' "TableQuery should not be able to be instantiated with a generic type that has no default constructor"); " is 194.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryableCreateQueryGeneric,The length of the statement  "            RTableWrapperForSampleRTableEntity localRTableWrapper = RTableWrapperForSampleRTableEntity.GetRTableWrapper(localRTable); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryableCreateQueryGeneric,The length of the statement  "                IQueryable<BaseEntity> virtualizedRtableQuery = localRTable.CreateReplicatedQuery<BaseEntity>().Where(x => x.PartitionKey == pk); " is 129.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryableCreateQueryNoPartitionKey,The length of the statement  "            RTableWrapperForSampleRTableEntity localRTableWrapper = RTableWrapperForSampleRTableEntity.GetRTableWrapper(localRTable); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableRetrieveTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableRetrieveTests.cs,WhenReadFromTailFailsWithServiceUnavailableWeReadFromHeadAndSucceed,The length of the statement  "            // Using xstore modify the row in each replica individually ... so we know' later' which replica RTable will retrieve from " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableRetrieveTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableRetrieveTests.cs,WhenReadFromAllReplicasFailsWithServiceUnavailableWeShouldReturnServiceUnavailable,The length of the statement  "            // Using xstore modify the row in each replica individually ... so we know' later' which replica RTable will retrieve from " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableRetrieveTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableRetrieveTests.cs,WhenReadFromAllReplicasFailsWithServiceUnavailableWeShouldReturnServiceUnavailable,The length of the statement  "                Assert.AreEqual((int)HttpStatusCode.ServiceUnavailable' retrievedResult.HttpStatusCode' "retrievedResult.HttpStatusCode mismatch"); " is 131.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableStressTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableStressTests.cs,RandomTableOperationTest,The length of the statement  "                PerformIndividualOperationAndValidate((TableOperationType)operation' JobType' JobId' partitionIndex' randomRow' OriginalMessage); " is 129.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableStressTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableStressTests.cs,RandomTableOperationTest,The length of the statement  "            SampleRTableEntity.GenerateKeys(this.GenerateJobType(JobType' partitionIndex)' "don't care"' out partitionKey' out rowKey); " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,ExceptionWhenUsingSmallerViewId,The length of the statement  "                Assert.IsTrue(ex.Message.Contains(string.Format("current _rtable_ViewId {0} is smaller than"' badViewId))' "Got unexpected exception message"); " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,ExceptionWhenUsingSmallerViewId,The length of the statement  "                Assert.IsTrue(ex.Message.Contains(string.Format("current _rtable_ViewId {0} is smaller than"' badViewId))' "Got unexpected exception message"); " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,ExceptionWhenUsingSmallerViewId,The length of the statement  "                Assert.IsTrue(ex.Message.Contains(string.Format("current _rtable_ViewId {0} is smaller than"' badViewId))' "Got unexpected exception message"); " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,ExceptionWhenUsingSmallerViewId,The length of the statement  "                Assert.IsTrue(ex.Message.Contains(string.Format("current _rtable_ViewId {0} is smaller than"' badViewId))' "Got unexpected exception message"); " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,ExceptionWhenUsingSmallerViewId,The length of the statement  "                Assert.IsTrue(ex.Message.Contains(string.Format("current _rtable_ViewId {0} is smaller than"' badViewId))' "Got unexpected exception message"); " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,ExceptionWhenUsingSmallerViewId,The length of the statement  "                Assert.IsTrue(ex.Message.Contains(string.Format("current _rtable_ViewId {0} is smaller than"' badViewId))' "Got unexpected exception message"); " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,RowsWithHigherViewIdNotFoundWhenIgnoreHigherViewIdRowsFlagIsSet,The length of the statement  "                Assert.AreEqual((int)HttpStatusCode.NotFound' retrievedResult.HttpStatusCode' "retrievedResult.HttpStatusCode mismatch"); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,RowsWithHigherViewIdNotFoundWhenIgnoreHigherViewIdRowsFlagIsSet,The length of the statement  "                Assert.AreEqual((int)HttpStatusCode.NotFound' retrievedResult.HttpStatusCode' "retrievedResult.HttpStatusCode mismatch"); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,RowsWithHigherViewIdNotFoundWhenIgnoreHigherViewIdRowsFlagIsSet,The length of the statement  "                Assert.AreEqual((int)HttpStatusCode.Conflict' retrievedResult.HttpStatusCode' "retrievedResult.HttpStatusCode mismatch"); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,RowsWithHigherViewIdNotFoundWhenIgnoreHigherViewIdRowsFlagIsSet,The length of the statement  "                Assert.AreEqual((int)HttpStatusCode.Conflict' retrievedResult.HttpStatusCode' "retrievedResult.HttpStatusCode mismatch"); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,RowsWithHigherViewIdNotFoundWhenIgnoreHigherViewIdRowsFlagIsSet,The length of the statement  "                Assert.AreEqual((int)HttpStatusCode.NotFound' retrievedResult.HttpStatusCode' "retrievedResult.HttpStatusCode mismatch"); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,RowsWithHigherViewIdNotFoundWhenIgnoreHigherViewIdRowsFlagIsSet,The length of the statement  "                Assert.AreEqual((int)HttpStatusCode.NotFound' retrievedResult.HttpStatusCode' "retrievedResult.HttpStatusCode mismatch"); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,ReplaceUsingLargerViewId,The length of the statement  "            Assert.AreEqual((int)HttpStatusCode.NotFound' retrievedResult2.HttpStatusCode' "retrievedResult2.HttpStatusCode mismatch"); " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,MergeUsingLargerViewId,The length of the statement  "            DynamicReplicatedTableEntity mergeEntity = new DynamicReplicatedTableEntity(baseEntity.PartitionKey' baseEntity.RowKey) { ETag = result.Etag }; " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,MergeUsingLargerViewId,The length of the statement  "            DynamicReplicatedTableEntity mergeEntity2 = new DynamicReplicatedTableEntity(baseEntity.PartitionKey' baseEntity.RowKey) { ETag = result.Etag }; " is 144.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,MergeUsingLargerViewId,The length of the statement  "            Assert.AreEqual((int)HttpStatusCode.NoContent' result.HttpStatusCode' "InsertOrMerge(): result.HttpStatusCode mismatch"); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,MergeUsingLargerViewId,The length of the statement  "            result = this.repTable.Execute(TableOperation.Retrieve<DynamicReplicatedTableEntity>(baseEntity.PartitionKey' baseEntity.RowKey)); " is 130.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,BatchOperationExceptionWhenUsingSmallerViewId,The length of the statement  "                Assert.IsTrue(ex.Message.Contains(string.Format("current _rtable_ViewId {0} is smaller than"' badViewId))' "Got unexpected exception message"); " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperBase<T>,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperBase.cs,InsertRow,The length of the statement  "            // TODO What exception to throw if the item could not be inserted? (Maybe because it already exists... Found? Conflict?) " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperBase<T>,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperBase.cs,FindRowWithRetry,The length of the statement  "                        throw new RTableException(String.Format("Unable to find row in table {0} after {1} retries "' rTable.TableName' retryCount)); " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperBase<T>,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperBase.cs,FindOrInsertRowWithRetry,The length of the statement  "                        throw new RTableException(String.Format("Unable to add row to table {0} after {1} retries "' rTable.TableName' retryCount)); " is 124.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperBase<T>,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperBase.cs,ReplaceRowWithRetryInternal,The length of the statement  "                    //As such' only when we have waited for a duration >= LockTimeoutInSeconds and retry counts have exceeded the threshold'  " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperBase<T>,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperBase.cs,ReplaceRowWithRetryInternal,The length of the statement  "                    //we can declare the write operation as truly failed. Until then' we have to retry' with a short wait time of WaitTimeForConflictRetryInSeconds " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperTestBase.cs,PerformRetrieveOperationAndValidate,The length of the statement  "                Assert.AreEqual(this.numberOfRowsPerPartition' j' "Partition {0} only has {1} rows. Expected {2} rows"' i' j' this.numberOfRowsPerPartition); " is 141.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperTestBase.cs,PerformOperationAndValidate,The length of the statement  "                Assert.AreEqual(this.numberOfRowsPerPartition' j' "Partition {0} only has {1} rows. Expected {2} rows"' i' j' this.numberOfRowsPerPartition); " is 141.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperTestBase.cs,PerformOperationAndValidate,The length of the statement  "                Assert.AreEqual(this.numberOfRowsPerPartition' j' "Partition {0} only has {1} rows. Expected {2} rows"' i' j' this.numberOfRowsPerPartition); " is 141.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperTestBase.cs,PerformIndividualOperationAndValidate,The length of the statement  "            SampleRTableEntity.GenerateKeys(this.GenerateJobType(jobType' partition)' this.GenerateJobId(jobId' partition' row)' out partitionKey' out rowKey); " is 147.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperTestBase.cs,PerformIndividualOperationAndValidate,The length of the statement  "                    Console.WriteLine("attempts={0}. partitionKey={1} rowKey={2}. Calling {3} API..."' attempts' partitionKey' rowKey' opType); " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,SampleRTableEntity,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\SampleRTableEntity.cs,ToString,The length of the statement  "            return string.Format("\tJobType={0}\n\tJobId={1}\n\tMessage={2}\n\tRowLock={3}\n\tTombstone={4}\n\tVersion={5}\n\tViewId={6}\n\tETag={7}\n\tLockAcquisition={8}"'  " is 161.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,B00TamperReplaceRowInnerTest,The length of the statement  "            // After recovery from short outage' sleep some time to wait for entity to be unlocked' confirm that we can update the row. " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,B00TamperSkipReplaceRowInnerTest,The length of the statement  "            // After recovery from short outage' sleep some time to wait for entity to be unlocked' then confirm that we can update the row. " is 128.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,C00TamperReplaceRowTailTest,The length of the statement  "            // After recovery from short outage' sleep some time to wait for entity to be unlocked' then confirm that we can update the row. " is 128.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,B00TamperDeleteRowInnerTest,The length of the statement  "                // After recovery from outage' sleep some time to wait for entity to be unlocked' then confirm that we can delete the row. " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,B00TamperSkipDeleteRowInnerTest,The length of the statement  "                // After recovery from outage' sleep some time to wait for entity to be unlocked' then confirm that we can delete the row. " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,C00TamperDeleteRowTailTest,The length of the statement  "                // After recovery from outage' sleep some time to wait for entity to be unlocked' then confirm that we can delete the row. " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,B00TamperBatchReplaceInnerTest,The length of the statement  "            // After recovery from short outage' sleep some time to wait for entity to be unlocked' confirm that we can update the row. " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,C00TamperBatchReplaceTailTest,The length of the statement  "            // After recovery from short outage' sleep some time to wait for entity to be unlocked' confirm that we can update the row. " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,B00TamperBatchDeleteInnerTest,The length of the statement  "            // After recovery from short outage' sleep some time to wait for entity to be unlocked' confirm that we can update the row. " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,C00TamperBatchDeleteTailTest,The length of the statement  "            // After recovery from short outage' sleep some time to wait for entity to be unlocked' confirm that we can update the row. " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,TestHelper,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\TestHelper.cs,AssertNAttempts,The length of the statement  "            Assert.AreEqual(n' ctx.RequestResults.Count()' String.Format("_rtable_Operation took more than {0} attempt(s) to complete"' n)); " is 128.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,TestHelper,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\TestHelper.cs,ValidateResponse,The length of the statement  "            ValidateResponse(opContext' expectedAttempts' expectedStatusCode' allowedErrorCodes' new string[] { errorMessageBeginsWith }); " is 126.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,TestHelper,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\TestHelper.cs,ValidateResponse,The length of the statement  "            Assert.IsTrue(allowedErrorCodes.Contains(opContext.LastResult.ExtendedErrorInformation.ErrorCode)' "Unexpected Error Code' received: " + opContext.LastResult.ExtendedErrorInformation.ErrorCode); " is 194.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,TestHelper,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\TestHelper.cs,ValidateResponse,The length of the statement  "                Assert.IsTrue(errorMessageBeginsWith.Where((s) => message.StartsWith(s)).Any()' "Got this opContext.LastResult.ExtendedErrorInformation = {0}"' opContext.LastResult.ExtendedErrorInformation.ErrorMessage);             " is 204.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,A00ThrottleSkipReplaceRowHeadTest,The length of the statement  "            // After recovery from throttling' sleep some time to wait for entity to be unlocked' then confirm that we can update the row. " is 126.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,B00ThrottleReplaceRowInnerTest,The length of the statement  "            // After recovery from throttling' sleep some time to wait for entity to be unlocked' thenconfirm that we can update the row. " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,B00ThrottleSkipReplaceRowInnerTest,The length of the statement  "            // After recovery from throttling' sleep some time to wait for entity to be unlocked' then confirm that we can update the row. " is 126.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,C00ThrottleReplaceRowTailTest,The length of the statement  "            // After recovery from throttling' sleep some time to wait for entity to be unlocked' then confirm that we can update the row. " is 126.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,A00ThrottleSkipDeleteRowHeadTest,The length of the statement  "                // After recovery from throttling' sleep some time to wait for entity to be unlocked' then confirm that we can delete the row. " is 126.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,B00ThrottleDeleteRowInnerTest,The length of the statement  "                // After recovery from throttling' sleep some time to wait for entity to be unlocked' confirm that we can delete the row. " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,B00ThrottleSkipDeleteRowInnerTest,The length of the statement  "                // After recovery from throttling' sleep some time to wait for entity to be unlocked' then confirm that we can delete the row. " is 126.
Long Statement,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,C00ThrottleDeleteRowTailTest,The length of the statement  "                // After recovery from throttling' sleep some time to wait for entity to be unlocked' then confirm that we can delete the row. " is 126.
Complex Conditional,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,A00TwoInsertOrReplaceCallsConflictingOnTheHead,The conditional expression  "session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"_rtable_Operation\":\"Replace\"") &&                              body.Contains("\"_rtable_RowLock\":false") &&                              body.Contains("\"Message\":\"upsert message 0\"")"  is complex.
Complex Conditional,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,A00TwoInsertOrReplaceCallsConflictingOnTheHead,The conditional expression  "session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"_rtable_Operation\":\"Replace\"") &&                              body.Contains("\"_rtable_RowLock\":true") &&                              body.Contains("\"Message\":\"upsert message 1\"")"  is complex.
Complex Conditional,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,A00TwoInsertOrReplaceCallsConflictingOnTheHead,The conditional expression  "session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"_rtable_Operation\":\"Replace\"") &&                              body.Contains("\"_rtable_RowLock\":true") &&                              body.Contains("\"Message\":\"upsert message 1\"")"  is complex.
Complex Conditional,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,A00InsertOrReplaceCallConflictingWithDeleteOnTheHead,The conditional expression  "session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"_rtable_Operation\":\"Replace\"") &&                              body.Contains("\"_rtable_RowLock\":true") &&                              body.Contains("\"_rtable_Tombstone\":true")"  is complex.
Complex Conditional,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,TxnViewExpiresButViewIdDoesntChange,The conditional expression  "session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"_rtable_Operation\":\"Replace\"") &&                              body.Contains("\"_rtable_RowLock\":true")"  is complex.
Complex Conditional,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,TxnViewExpiresAndViewIdHasChanged,The conditional expression  "session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"_rtable_Operation\":\"Replace\"") &&                              body.Contains("\"_rtable_RowLock\":true")"  is complex.
Complex Conditional,Microsoft.Azure.Toolkit.Replication.Test,RTableCutOffTailTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCutOffTailTests.cs,ReadingUncommittedDataFromReplicaIdentifiedByReadTailIndexWontThrow,The conditional expression  "session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"Email\":\"workerOne\"") &&                              body.Contains(string.Format("\"_rtable_ViewId\":\"{0}\""' staleViewId)) &&                              body.Contains("\"_rtable_RowLock\":true")"  is complex.
Complex Conditional,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,UpdateInStaleViewConflictingWithUpdateInNewView_T01,The conditional expression  "session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"Email\":\"workerOne\"") &&                              body.Contains(string.Format("\"_rtable_ViewId\":\"{0}\""' staleViewId)) &&                              body.Contains("\"_rtable_RowLock\":false")"  is complex.
Complex Conditional,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,UpdateInStaleViewConflictingWithUpdateInNewView_T02,The conditional expression  "session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"Email\":\"workerOne\"") &&                              body.Contains(string.Format("\"_rtable_ViewId\":\"{0}\""' staleViewId)) &&                              body.Contains("\"_rtable_RowLock\":false")"  is complex.
Complex Conditional,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,InsertInStaleViewConflictingWithInsertInNewView,The conditional expression  "session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"Email\":\"workerOne\"") &&                              body.Contains(string.Format("\"_rtable_ViewId\":\"{0}\""' staleViewId)) &&                              body.Contains("\"_rtable_RowLock\":false")"  is complex.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication.Test,ConvertXStoreTableOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ConvertXStoreTableOperationTests.cs,TestFixtureSetup,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchAddNullShouldThrow,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchAddNullShouldThrow,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchAddMultiQueryShouldThrow,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchAddQueryAndOneMoreOperationShouldThrow,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchAddQueryAndOneMoreOperationShouldThrow,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchAddQueryAndOneMoreOperationShouldThrow,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchAddQueryAndOneMoreOperationShouldThrow,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchLockToPartitionKey,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperTestBase.cs,PerformOperationAndValidate,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperTestBase.cs,PerformIndividualOperationAndValidate,The method has an empty catch block.
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ConvertXStoreTableAPITests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ConvertXStoreTableAPITests.cs,ConvertXStoreTable,The following statement contains a magic number: Assert.AreEqual(expectedSccess * 2' successCount' "Number of successfully converted entries does NOT match");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,A00DelayReplaceRowHeadTest,The following statement contains a magic number: int delayInMs = 3000;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,B00DelayReplaceRowInnerTest,The following statement contains a magic number: int delayInMs = 3000;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,C00DelayReplaceRowTailTest,The following statement contains a magic number: int delayInMs = 3000;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,A00DelayDeleteRowHeadTest,The following statement contains a magic number: int delayInMs = 3000;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,B00DelayDeleteRowInnerTest,The following statement contains a magic number: int delayInMs = 3000;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,C00DelayDeleteRowTailTest,The following statement contains a magic number: int delayInMs = 3000;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,A00DelayTwoConflictingInsertOrReplaceCalls,The following statement contains a magic number: int delayInMs = 3000;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,A00DelayTwoConflictingInsertOrReplaceCalls,The following statement contains a magic number: ProxyBehavior[] behaviors = new[]              {                  // Delay Insert calls so they end up conflicting                  TamperBehaviors.TamperAllRequestsIf(                      (session =>                      {                          Interlocked.Increment(ref insertRequestCount);                            while (insertRequestCount != 2)                          {                              Console.WriteLine("insertRequestCount={0}. Waiting on count to reach 2 ..."' insertRequestCount);                              Thread.Sleep(delayInMs);                          }                      })'                      (session =>                      {                          if (session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("POST") &&                              session.GetRequestBodyAsString().Contains("\"_rtable_Operation\":\"Insert\""))                          {                              return true;                          }                            return false;                      }))'                    // Delay conflict response                  DelayBehaviors.DelayAllResponsesIf(                      delayInMs'                      (session =>                      {                          if (session.hostname.Contains(accountNameToTamper + ".") &&                              session.GetRequestBodyAsString().Contains("\"_rtable_Operation\":\"Insert\""))                          {                              if (session.responseCode == (int) HttpStatusCode.Conflict)                              {                                  Interlocked.Increment(ref conflictResponseCount);                                    return true;                              }                          }                            return false;                      }))'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,A00DelayTwoConflictingInsertOrReplaceCalls,The following statement contains a magic number: Parallel.For(0' 2' (index) =>                  {                      var entry = new SampleRTableEntity(entityPartitionKey' entityRowKey' string.Format("upsert message {0}"' index));                      try                      {                          this.rtableWrapper.InsertOrReplaceRow(entry);                      }                      catch (RTableConflictException)                      {                          if (secondUpsertConflicted)                          {                              // should never reach here                              throw;                          }                            // That's possible' but that's the Replace step of upsert which conflicted with ongoing write                          // can't do anything' client should retry on conflict                          secondUpsertConflicted = true;                      }                  });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,A00DelayTwoConflictingInsertOrReplaceCalls,The following statement contains a magic number: Assert.AreEqual(2' insertRequestCount' "Two insert calls expected!");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,A00TwoInsertOrReplaceCallsConflictingOnTheHead,The following statement contains a magic number: int delayInMs = 3000;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,A00TwoInsertOrReplaceCallsConflictingOnTheHead,The following statement contains a magic number: ProxyBehavior[] behaviors = new[]              {                  // Writter-1 tampering                  TamperBehaviors.TamperAllRequestsIf(                      (session =>                      {                          int iter = 0;                            // Signal Writter-2                          firstWritterInitiatingCommit = true;                            // Blobk commit to head ... until Writter-2 try to lock the head                          while (!secondWritterTriedLockingHead)                          {                              Console.WriteLine("Writter-1 waiting on Writter-2 to try to lock the Head (#{0})"' iter);                              Thread.Sleep(delayInMs);                                if (++iter > 10)                              {                                  break;                              }                          }                      })'                      (session =>                      {                          var body = session.GetRequestBodyAsString();                            // Writter-1 committing to head                          if (session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"_rtable_Operation\":\"Replace\"") &&                              body.Contains("\"_rtable_RowLock\":false") &&                              body.Contains("\"Message\":\"upsert message 0\"")                          )                          {                              return true;                          }                            return false;                      }))'                    // Writter-2 tampering                  TamperBehaviors.TamperAllRequestsIf(                      (session =>                      {                          // Block till Writter-1 issues a commit to head                          while (!firstWritterInitiatingCommit)                          {                              Console.WriteLine("Writter-2 waiting on Writter-1 to issue a commit to head");                              Thread.Sleep(delayInMs);                          }                      })'                      (session =>                      {                          var body = session.GetRequestBodyAsString();                            // Writter-2 locking the head                          if (session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"_rtable_Operation\":\"Replace\"") &&                              body.Contains("\"_rtable_RowLock\":true") &&                              body.Contains("\"Message\":\"upsert message 1\"")                          )                          {                              return true;                          }                            return false;                      }))'                    // Delay Writter-2 lock-to-the-head's response' so Writter-1 can continue with its commit.                  DelayBehaviors.DelayAllResponsesIf(                      delayInMs'                      (session =>                      {                          var body = session.GetRequestBodyAsString();                            // Writter-2 locking the head response                          if (session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"_rtable_Operation\":\"Replace\"") &&                              body.Contains("\"_rtable_RowLock\":true") &&                              body.Contains("\"Message\":\"upsert message 1\"")                          )                          {                              // Signal Writter-1 so it can continue with commit to head                              secondWritterTriedLockingHead = true;                              return true;                          }                            return false;                      }))'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,A00TwoInsertOrReplaceCallsConflictingOnTheHead,The following statement contains a magic number: var results = new TableResult[2];
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,A00TwoInsertOrReplaceCallsConflictingOnTheHead,The following statement contains a magic number: Parallel.For(0' 2' (index) =>                  {                      entry = new SampleRTableEntity(entityPartitionKey' entityRowKey' string.Format("upsert message {0}"' index));                        try                      {                          var table = new ReplicatedTable(this.repTable.TableName' this.configurationService);                            TableOperation operation = TableOperation.InsertOrReplace(entry);                          results[index] = table.Execute(operation);                      }                      catch (AggregateException ex)                      {                          Console.WriteLine(ex);                      }                  });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,A00InsertOrReplaceCallConflictingWithDeleteOnTheHead,The following statement contains a magic number: var upsertTask = Task.Run(() =>              {                  while (!deleteLockedHead)                  {                      Thread.Sleep(5);                  }                    try                  {                      entry = new SampleRTableEntity(entityPartitionKey' entityRowKey' "upsert message");                      var table = new ReplicatedTable(this.repTable.TableName' this.configurationService);                        TableOperation upserOperation = TableOperation.InsertOrReplace(entry);                        Console.WriteLine("Upsert started ...");                      upsertResult = table.Execute(upserOperation);                      Console.WriteLine("Upsert completed with HttpStatus={0}"' upsertResult == null ? "NULL" : upsertResult.HttpStatusCode.ToString());                  }                  catch (AggregateException ex)                  {                      Console.WriteLine(ex);                  }              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,A00InsertOrReplaceCallConflictingWithDeleteOnTheHead,The following statement contains a magic number: int delayInMs = 5;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,RepairMidAnUpdate,The following statement contains a magic number: Task.Run(() =>              {                  ReplicatedTable repairTable = new ReplicatedTable(this.repTable.TableName' this.configurationService);                    while (!triggerRepair)                  {                      Thread.Sleep(5);                  }                    Console.WriteLine("RepairRow started ...");                  repairResult = repairTable.RepairRow(entry.PartitionKey' entry.RowKey' null);                  Console.WriteLine("RepairRow completed with HttpStatus={0}"' repairResult == null ? "NULL" : repairResult.HttpStatusCode.ToString());                    // Check the entry at the Head is still locked i.e. RepairRow was NOP                  headAfterRepairWasLocked = HeadIsLocked(entry);                    Console.WriteLine("Signal the commit to Head job");                  repaireDone = true;              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,RepairMidAnUpdate,The following statement contains a magic number: ProxyBehavior[] behaviors = new[]              {                  TamperBehaviors.TamperAllRequestsIf(                      (session =>                      {                          Console.WriteLine("Delaying commit to the Head ... => signal RepairRow job");                            // Let RepairRow task go through                          triggerRepair = true;                            int iter = 0;                          while (!repaireDone)                          {                              // TODO: break the loop after couple of iteration ...                                Thread.Sleep(100);                              Console.WriteLine("Waiting on RepairRow to finish ({0}) ..."' ++iter);                          }                            Console.WriteLine("Request a commit to the head");                      })'                      (session =>                      {                          // Commit on head i.e. a PUT with RowLock == false                          if (session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              session.GetRequestBodyAsString().Contains("\"_rtable_RowLock\":false"))                          {                              return true;                          }                            return false;                      }))              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,TxnViewExpiresButViewIdDoesntChange,The following statement contains a magic number: int leaseDurationInSec = 3;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,TxnViewExpiresButViewIdDoesntChange,The following statement contains a magic number: ProxyBehavior[] behaviors = new[]              {                  DelayBehaviors.DelayAllResponsesIf(                      1'                      (session =>                      {                          var body = session.GetRequestBodyAsString();                            // Delay lock of the Head response enough so the txView expires                          if (session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"_rtable_Operation\":\"Replace\"") &&                              body.Contains("\"_rtable_RowLock\":true"))                          {                              // ensure txView expires                              Thread.Sleep(2 * leaseDurationInSec * 1000);                              return true;                          }                            return false;                      }))'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,TxnViewExpiresButViewIdDoesntChange,The following statement contains a magic number: ProxyBehavior[] behaviors = new[]              {                  DelayBehaviors.DelayAllResponsesIf(                      1'                      (session =>                      {                          var body = session.GetRequestBodyAsString();                            // Delay lock of the Head response enough so the txView expires                          if (session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"_rtable_Operation\":\"Replace\"") &&                              body.Contains("\"_rtable_RowLock\":true"))                          {                              // ensure txView expires                              Thread.Sleep(2 * leaseDurationInSec * 1000);                              return true;                          }                            return false;                      }))'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,TxnViewExpiresAndViewIdHasChanged,The following statement contains a magic number: int leaseDurationInSec = 3;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,TxnViewExpiresAndViewIdHasChanged,The following statement contains a magic number: ProxyBehavior[] behaviors = new[]              {                  DelayBehaviors.DelayAllResponsesIf(                      1'                      (session =>                      {                          var body = session.GetRequestBodyAsString();                            // Delay lock of the Head response enough so the txView expires ...                          // And' upload a new config with a new viewId                          if (session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"_rtable_Operation\":\"Replace\"") &&                              body.Contains("\"_rtable_RowLock\":true"))                          {                              // Upload a new config with a new ViewId                              View view = this.configurationService.GetTableView(this.repTable.TableName);                              config.GetView(view.Name).ViewId++;                              this.configurationService.UpdateConfiguration(config' false);                                // ensure txView expires                              Thread.Sleep(2 * leaseDurationInSec * 1000);                              return true;                          }                            return false;                      }))'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,DelayTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\DelayTests.cs,TxnViewExpiresAndViewIdHasChanged,The following statement contains a magic number: ProxyBehavior[] behaviors = new[]              {                  DelayBehaviors.DelayAllResponsesIf(                      1'                      (session =>                      {                          var body = session.GetRequestBodyAsString();                            // Delay lock of the Head response enough so the txView expires ...                          // And' upload a new config with a new viewId                          if (session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"_rtable_Operation\":\"Replace\"") &&                              body.Contains("\"_rtable_RowLock\":true"))                          {                              // Upload a new config with a new ViewId                              View view = this.configurationService.GetTableView(this.repTable.TableName);                              config.GetView(view.Name).ViewId++;                              this.configurationService.UpdateConfiguration(config' false);                                // ensure txView expires                              Thread.Sleep(2 * leaseDurationInSec * 1000);                              return true;                          }                            return false;                      }))'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,AddNewHeadReplicaTest,The following statement contains a magic number: int retrieveAttemtps = 2;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,RemoveAndReAddHeadReplicaTest,The following statement contains a magic number: int retrieveAttemtps = 2;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RepairRTableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RepairRTableTests.cs,RemoveAndReAddHeadReplicaTest,The following statement contains a magic number: Assert.AreEqual(2' this.actualStorageAccountsUsed.Count' "Two stoarge accounts should be used at this point.");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicaInfoTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicaInfoTest.cs,TestToString,The following statement contains a magic number: int whenAddedToChain = 8;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicaInfoTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicaInfoTest.cs,TestReplicaEquality,The following statement contains a magic number: var r1 = new ReplicaInfo              {                  StorageAccountName = "Acc1"'                  ViewInWhichAddedToChain = 8'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicaInfoTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicaInfoTest.cs,TestReplicaEquality,The following statement contains a magic number: var r3 = new ReplicaInfo              {                  StorageAccountName = "Acc1"'                  ViewInWhichAddedToChain = 6'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicaInfoTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicaInfoTest.cs,TestReplicaEquality,The following statement contains a magic number: var r4 = new ReplicaInfo              {                  StorageAccountName = "Acc1"'                  ViewInWhichAddedToChain = 8'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestReplicatedTableConfigurationStoreEquality,The following statement contains a magic number: var conf1 = new ReplicatedTableConfigurationStore              {                  ViewId = 5'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestReplicatedTableConfigurationStoreEquality,The following statement contains a magic number: var conf2 = new ReplicatedTableConfigurationStore              {                  ViewId = 6'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestReplicatedTableConfigurationStoreEquality,The following statement contains a magic number: var conf3 = new ReplicatedTableConfigurationStore              {                  ViewId = 5'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: var view = new View("view empty")              {                  ViewId = 9'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: conf.ViewId = 3;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 3 && conf.Timestamp > old);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6 && conf.Timestamp > old);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  Status = ReplicaStatus.ReadOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  Status = ReplicaStatus.ReadOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.ViewInWhichAddedToChain == 3) == 4);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.ViewInWhichAddedToChain == 3) == 4);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  Status = ReplicaStatus.WriteOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  Status = ReplicaStatus.ReadWrite'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.WriteOnly && r.ViewInWhichAddedToChain == 6) == 1);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.ViewInWhichAddedToChain == 3) == 3);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestSanitizeWithCurrentView,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.ViewInWhichAddedToChain == 3) == 3);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R1"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R2"'                  Status = ReplicaStatus.ReadOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R3"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R4"'                  Status = ReplicaStatus.ReadOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.None) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.ReadOnly) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 7);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.None) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.ReadOnly) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ViewId = 9;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 10);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.None) == 3);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R1"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R2"'                  Status = ReplicaStatus.WriteOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R3"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R4"'                  Status = ReplicaStatus.ReadWrite'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ViewId = 5;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 5);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.None) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.IsWritable()) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ViewId = 5;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 5);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.None) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.IsWritable()) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ViewId = 5;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 5);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.None) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.IsWritable()) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ViewId = 5;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.None) == 3);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ViewId = 9;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 10);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.None) == 3);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R1"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R2"'                  Status = ReplicaStatus.ReadWrite'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R3"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R4"'                  Status = ReplicaStatus.ReadWrite'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ViewId = 5;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.None) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.IsReadable()) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R1"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R2"'                  Status = ReplicaStatus.ReadWrite'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R3"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R4"'                  Status = ReplicaStatus.ReadWrite'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: conf.ViewId = 5;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.None) == 3);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnlyWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R1"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnlyWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R2"'                  Status = ReplicaStatus.ReadOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnlyWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R3"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnlyWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R4"'                  Status = ReplicaStatus.ReadOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnlyWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnlyWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnlyWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnlyWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 7);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnlyWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R1"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnlyWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R2"'                  Status = ReplicaStatus.WriteOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnlyWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R3"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnlyWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R4"'                  Status = ReplicaStatus.ReadWrite'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnlyWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ViewId = 5;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnlyWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 5);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R1"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R2"'                  Status = ReplicaStatus.ReadOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R3"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R4"'                  Status = ReplicaStatus.ReadOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.None) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.ReadOnly) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.None) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.ReadOnly) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.None) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.ReadOnly) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 7);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.ReadWrite) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.IsWritable()) == 3);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R1"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R2"'                  Status = ReplicaStatus.WriteOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R3"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R4"'                  Status = ReplicaStatus.ReadWrite'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 7);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.Status == ReplicaStatus.ReadWrite) == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count(r => r.IsWritable()) == 3);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R1"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R2"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicas,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 7);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicasWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicasWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicasWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R1"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicasWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R2"'                  Status = ReplicaStatus.ReadOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicasWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R3"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicasWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R4"'                  Status = ReplicaStatus.ReadOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicasWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicasWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicasWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicasWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicasWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableWriteOnReplicasWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 7);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableReadWriteOnReplica,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableReadWriteOnReplica,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableReadWriteOnReplica,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R1"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableReadWriteOnReplica,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R2"'                  Status = ReplicaStatus.ReadOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableReadWriteOnReplica,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableReadWriteOnReplica,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableReadWriteOnReplica,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R1"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableReadWriteOnReplica,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R2"'                  Status = ReplicaStatus.ReadOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableReadWriteOnReplica,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableReadWriteOnReplica,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableReadWriteOnReplica,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R1"'                  Status = ReplicaStatus.ReadOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableReadWriteOnReplica,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R2"'                  Status = ReplicaStatus.ReadOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableReadWriteOnReplica,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableReadWriteOnReplica,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableReadWriteOnReplica,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R1"'                  Status = ReplicaStatus.WriteOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableReadWriteOnReplica,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R2"'                  Status = ReplicaStatus.ReadWrite'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableReadWriteOnReplica,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestEnableReadWriteOnReplica,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 7);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOff,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R1"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOff,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R2"'                  Status = ReplicaStatus.ReadOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOff,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R3"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOff,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R4"'                  Status = ReplicaStatus.ReadOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOff,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOff,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOff,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOff,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOff,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOff,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 7);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOff,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain[3].StorageAccountName == "R4");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOff,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain[3].Status == ReplicaStatus.None);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOff,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain[3].ViewWhenTurnedOff == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOff,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain[3].ViewWhenTurnedOff == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOffWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R1"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOffWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R2"'                  Status = ReplicaStatus.ReadOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOffWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R3"'                  Status = ReplicaStatus.None'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOffWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ReplicaChain.Add(new ReplicaInfo              {                  StorageAccountName = "R4"'                  Status = ReplicaStatus.ReadOnly'                  ViewInWhichAddedToChain = 3'              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOffWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOffWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOffWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOffWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOffWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: conf.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestTurnReplicaOffWillResetReadViewTailIndexOnSuccess,The following statement contains a magic number: Assert.IsTrue(conf.ViewId == 7);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,DeserializeJsonConfig,The following statement contains a magic number: Assert.True(conf.ViewId == 58);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,DeserializeJsonConfig,The following statement contains a magic number: Assert.True(conf.ViewId == 58);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,DeserializeJsonConfig,The following statement contains a magic number: Assert.True(conf.ViewId == 58);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,DeserializeJsonConfig,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,DeserializeJsonConfig,The following statement contains a magic number: Assert.True(conf.ViewId == 58);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,DeserializeJsonConfig,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,DeserializeJsonConfig,The following statement contains a magic number: Assert.True(conf.ViewId == 58);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,DeserializeJsonConfig,The following statement contains a magic number: Assert.IsTrue(conf.ReplicaChain.Count == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestReadViewTailIndexInV1,The following statement contains a magic number: Assert.IsTrue(conf.ReadViewTailIndex == 33);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestThrowIfReadViewTailIndexIsNotValid,The following statement contains a magic number: conf.ReadViewTailIndex = -50;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestThrowIfReadViewTailIndexIsNotValid,The following statement contains a magic number: conf.ReadViewTailIndex = 2;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestThrowIfReadViewTailIndexIsNotValid,The following statement contains a magic number: Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' - ReadViewTailIndex:\'{1}\' is out of bounds' replica size:\'{2}\' !!!"' "view1"' 2' 2));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestThrowIfReadViewTailIndexIsNotValid,The following statement contains a magic number: Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' - ReadViewTailIndex:\'{1}\' is out of bounds' replica size:\'{2}\' !!!"' "view1"' 2' 2));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestThrowIfReadViewTailIndexIsNotValid,The following statement contains a magic number: conf.ReadViewTailIndex = 15;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestThrowIfReadViewTailIndexIsNotValid,The following statement contains a magic number: Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' - ReadViewTailIndex:\'{1}\' is out of bounds' replica size:\'{2}\' !!!"' "view1"' 15' 2));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestThrowIfReadViewTailIndexIsNotValid,The following statement contains a magic number: Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' - ReadViewTailIndex:\'{1}\' is out of bounds' replica size:\'{2}\' !!!"' "view1"' 15' 2));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetView,The following statement contains a magic number: var conf = new ReplicatedTableConfiguration              {                  LeaseDuration = 5'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetViewThrowIfReadViewTailIndexIsNotValid,The following statement contains a magic number: var conf = new ReplicatedTableConfiguration              {                  LeaseDuration = 5'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetViewThrowIfReadViewTailIndexIsNotValid,The following statement contains a magic number: viewConf.ReadViewTailIndex = 2;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetViewThrowIfReadViewTailIndexIsNotValid,The following statement contains a magic number: Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' - ReadViewTailIndex:\'{1}\' is out of bounds' replica size:\'{2}\' !!!"' "view1"' 2' 2));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetViewThrowIfReadViewTailIndexIsNotValid,The following statement contains a magic number: Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' - ReadViewTailIndex:\'{1}\' is out of bounds' replica size:\'{2}\' !!!"' "view1"' 2' 2));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetViewThrowIfReadViewTailIndexIsNotValid,The following statement contains a magic number: viewConf.ReadViewTailIndex = 33;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetViewThrowIfReadViewTailIndexIsNotValid,The following statement contains a magic number: Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' - ReadViewTailIndex:\'{1}\' is out of bounds' replica size:\'{2}\' !!!"' "view1"' 33' 2));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetViewThrowIfReadViewTailIndexIsNotValid,The following statement contains a magic number: Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' - ReadViewTailIndex:\'{1}\' is out of bounds' replica size:\'{2}\' !!!"' "view1"' 33' 2));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetViewThrowIfReadViewTailIndexIsNotValid,The following statement contains a magic number: viewConf.ReadViewTailIndex = -10;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestGetView,The following statement contains a magic number: var conf = new ReplicatedTableConfiguration              {                  LeaseDuration = 5'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestRemoveView,The following statement contains a magic number: var conf = new ReplicatedTableConfiguration              {                  LeaseDuration = 5'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestSetTable,The following statement contains a magic number: var conf = new ReplicatedTableConfiguration              {                  LeaseDuration = 5'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestGetTable,The following statement contains a magic number: var conf = new ReplicatedTableConfiguration              {                  LeaseDuration = 5'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestGetDefaultConfiguredTable,The following statement contains a magic number: var conf = new ReplicatedTableConfiguration              {                  LeaseDuration = 5'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestRemoveTable,The following statement contains a magic number: var conf = new ReplicatedTableConfiguration              {                  LeaseDuration = 5'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestIsConfiguredTable,The following statement contains a magic number: var conf = new ReplicatedTableConfiguration              {                  LeaseDuration = 5'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestReplicatedTableConfigurationEquality,The following statement contains a magic number: var conf1 = new ReplicatedTableConfiguration              {                  LeaseDuration = 5'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestReplicatedTableConfigurationEquality,The following statement contains a magic number: var conf2 = new ReplicatedTableConfiguration              {                  LeaseDuration = 5'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestMakeCopy,The following statement contains a magic number: var conf = new ReplicatedTableConfiguration              {                  LeaseDuration = 5'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestGenerateNewConfigId,The following statement contains a magic number: var conf = new ReplicatedTableConfiguration              {                  LeaseDuration = 5'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The following statement contains a magic number: Assert.True(conf.LeaseDuration == 10);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The following statement contains a magic number: Assert.True(conf.LeaseDuration == 10);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The following statement contains a magic number: Assert.True(conf.GetViewSize() == 2 && conf.GetTableSize() == 0);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The following statement contains a magic number: Assert.True(conf.GetViewSize() == 2 && conf.GetTableSize() == 0);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The following statement contains a magic number: Assert.True(conf.GetViewSize() == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The following statement contains a magic number: Assert.True(conf.GetViewSize() == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The following statement contains a magic number: Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' - ReadViewTailIndex:\'{1}\' is out of bounds' replica size:\'{2}\' !!!"' "view2"' 2' 2));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The following statement contains a magic number: Assert.IsTrue(exception.Message == string.Format("View:\'{0}\' - ReadViewTailIndex:\'{1}\' is out of bounds' replica size:\'{2}\' !!!"' "view2"' 2' 2));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The following statement contains a magic number: Assert.True(conf.GetViewSize() == 1 && conf.GetTableSize() == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJson,The following statement contains a magic number: Assert.True(conf.GetViewSize() == 1 && conf.GetTableSize() == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJsonWithPartitioningFeature,The following statement contains a magic number: Assert.IsTrue(conf.GetViewSize() == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJsonWithPartitioningFeature,The following statement contains a magic number: Assert.IsTrue(conf.GetTableSize() == 5);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJsonWithPartitioningFeature,The following statement contains a magic number: Assert.IsTrue(configuredTable.PartitionsToViewMap != null && configuredTable.PartitionsToViewMap.Count == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJsonWithPartitioningFeature,The following statement contains a magic number: Assert.IsTrue(configuredTable.PartitionsToViewMap != null && configuredTable.PartitionsToViewMap.Count == 3);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestFromJsonWithPartitioningFeature,The following statement contains a magic number: Assert.IsTrue(configuredTable.PartitionsToViewMap != null && configuredTable.PartitionsToViewMap.Count == 3);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.GetView("view6").ReplicaChain[2].StorageAccountName == "Acc3");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The following statement contains a magic number: Assert.IsTrue(conf.GetView("view6").ReplicaChain[2].Status == ReplicaStatus.ReadWrite);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestTurnReplicaOff,The following statement contains a magic number: view0.ViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestTurnReplicaOff,The following statement contains a magic number: view1.ViewId = 7;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestTurnReplicaOff,The following statement contains a magic number: view2.ViewId = 8;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestTurnReplicaOff,The following statement contains a magic number: view3.ViewId = 9;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestTurnReplicaOff,The following statement contains a magic number: Assert.IsTrue(conf.GetView("view0").ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestTurnReplicaOff,The following statement contains a magic number: Assert.IsTrue(conf.GetView("view1").ReplicaChain[0].ViewWhenTurnedOff == 7);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestTurnReplicaOff,The following statement contains a magic number: Assert.IsTrue(conf.GetView("view1").ViewId == 8);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestTurnReplicaOff,The following statement contains a magic number: Assert.IsTrue(conf.GetView("view2").ViewId == 8);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestTurnReplicaOff,The following statement contains a magic number: Assert.IsTrue(conf.GetView("view3").ReplicaChain[1].ViewWhenTurnedOff == 9);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestTurnReplicaOff,The following statement contains a magic number: Assert.IsTrue(conf.GetView("view3").ViewId == 10);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestTurnReplicaOff,The following statement contains a magic number: Assert.IsTrue(conf.GetView("view0").ViewId == 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestTurnReplicaOff,The following statement contains a magic number: Assert.IsTrue(conf.GetView("view1").ViewId == 8);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestTurnReplicaOff,The following statement contains a magic number: Assert.IsTrue(conf.GetView("view2").ViewId == 8);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationTest.cs,TestTurnReplicaOff,The following statement contains a magic number: Assert.IsTrue(conf.GetView("view3").ViewId == 10);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableEntityPropertyGenerator,The following statement contains a magic number: EntityProperty doubleEntity = EntityProperty.GeneratePropertyForDouble(0.1);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableEntityPropertySetter,The following statement contains a magic number: doubleEntity.DoubleValue = 0.1;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchInsertSync,The following statement contains a magic number: m < 3
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchInsertSync,The following statement contains a magic number: Assert.AreEqual(results.Count' 4);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchInsertOrMergeSync,The following statement contains a magic number: Assert.AreEqual(2' retrievedEntity.Properties.Count' "retrievedEntity.Properties.Count={0}. (Expecting 2)"' retrievedEntity.Properties.Count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchMergeSync,The following statement contains a magic number: Assert.AreEqual(2' retrievedEntity.Properties.Count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchAllSupportedOperationsSync,The following statement contains a magic number: Assert.AreEqual(results.Count' 6);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchInsert10,The following statement contains a magic number: InsertAndDeleteBatchWithNEntities(10);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchInsert99,The following statement contains a magic number: InsertAndDeleteBatchWithNEntities(99);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchInsert100,The following statement contains a magic number: InsertAndDeleteBatchWithNEntities(100);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchInsertOrMerge10,The following statement contains a magic number: InsertOrMergeBatchWithNEntities(10);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchInsertOrMerge99,The following statement contains a magic number: InsertOrMergeBatchWithNEntities(99);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchInsertOrMerge100,The following statement contains a magic number: InsertOrMergeBatchWithNEntities(100);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchWithMultipleOperationsOnSameEntityShouldFail,The following statement contains a magic number: m < 99
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchOver100EntitiesShouldThrow,The following statement contains a magic number: m < 101
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchEntityOver1MBShouldThrow,The following statement contains a magic number: ent.Properties.Add("binary"' EntityProperty.GeneratePropertyForByteArray(new byte[1024 * 1024]));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchEntityOver1MBShouldThrow,The following statement contains a magic number: ent.Properties.Add("binary"' EntityProperty.GeneratePropertyForByteArray(new byte[1024 * 1024]));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchOver4MBShouldThrow,The following statement contains a magic number: ent.Properties.Add("binary"' EntityProperty.GeneratePropertyForByteArray(new byte[64 * 1024]));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchOver4MBShouldThrow,The following statement contains a magic number: ent.Properties.Add("binary"' EntityProperty.GeneratePropertyForByteArray(new byte[64 * 1024]));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchOver4MBShouldThrow,The following statement contains a magic number: m < 65
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableBatchOperationTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableBatchOperationTests.cs,TableBatchWithPropertyOver255CharsShouldThrow,The following statement contains a magic number: string propName = new string('a'' 256);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableConfigurationServiceTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableConfigurationServiceTests.cs,QuorumViewTest,The following statement contains a magic number: Assert.IsTrue(v.Chain.Count >= 3' "Replica chain only has {0} accounts"' v.Chain.Count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableConfigurationServiceTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableConfigurationServiceTests.cs,QuorumViewTest,The following statement contains a magic number: RefreshRTableEnvJsonConfigBlob(v.ViewId + 2' false' 0' new List<int>{0}' false);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableConfigurationServiceTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableConfigurationServiceTests.cs,QuorumViewTest,The following statement contains a magic number: Thread.Sleep(Constants.LeaseDurationInSec * 1000);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableConfigurationServiceTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableConfigurationServiceTests.cs,QuorumViewTest,The following statement contains a magic number: RefreshRTableEnvJsonConfigBlob(v.ViewId + 2' false' 0' new List<int>{0' 2}' true);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableConfigurationServiceTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableConfigurationServiceTests.cs,QuorumViewTest,The following statement contains a magic number: RefreshRTableEnvJsonConfigBlob(v.ViewId + 2' false' 0' new List<int>{0' 2}' true);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableConfigurationServiceTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableConfigurationServiceTests.cs,QuorumViewTest,The following statement contains a magic number: Assert.IsTrue(this.configurationWrapper.GetWriteView().ViewId == v.ViewId + 2'                  "View did not get updated to +2 = {0}"' this.configurationWrapper.GetWriteView());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrReplaceSync,The following statement contains a magic number: Assert.IsTrue(readRow.Properties.Count == 2' "DynamicRTableEntity returned contained diff number of properties");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrReplaceSync,The following statement contains a magic number: Assert.IsTrue(readRow.Properties.Count == 2' "DynamicRTableEntity returned contained diff number of properties");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrReplaceSync,The following statement contains a magic number: Assert.AreEqual(2' row._rtable_Version' "row._rtable_Version mismatch");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrReplaceSync,The following statement contains a magic number: Assert.AreEqual(2' customer._rtable_Version' "customer._rtable_Version mismatch");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableUpsert,The following statement contains a magic number: Assert.AreEqual(2' row._rtable_Version' "row._rtable_Version mismatch");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceWithStarEtagSync,The following statement contains a magic number: Assert.AreEqual(2' customer._rtable_Version' "customer._rtable_Version mismatch");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceWithStarEtagSync,The following statement contains a magic number: Assert.AreEqual(3' dynCustomer._rtable_Version' "dynCustomer._rtable_Version mismatch");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceSync,The following statement contains a magic number: Assert.AreEqual(2' customer._rtable_Version' "customer._rtable_Version mismatch");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceSync,The following statement contains a magic number: Assert.AreEqual(2' dynCustomer._rtable_Version' "dynCustomer._rtable_Version mismatch");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableReplaceSync,The following statement contains a magic number: Assert.AreEqual(3' dynCustomer._rtable_Version' "dynCustomer._rtable_Version mismatch");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableDeleteSync,The following statement contains a magic number: Assert.AreNotEqual(result.HttpStatusCode' 503);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableDeleteWithStarEtagSync,The following statement contains a magic number: Assert.AreNotEqual(result.HttpStatusCode' 503);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableMergeSync,The following statement contains a magic number: Assert.AreEqual(2' row._rtable_Version' "row._rtable_Version mismatch");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableMergeSync,The following statement contains a magic number: Assert.AreEqual(2' row._rtable_Version' "row._rtable_Version mismatch");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableMergeSync,The following statement contains a magic number: Assert.AreEqual(2' retrievedEntity.Properties.Count' "retrievedEntity.Properties.Count mismatch");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrMergeSync,The following statement contains a magic number: Assert.AreEqual(3' retrievedEntity.Properties.Count' "Properties.Count mismatch");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrMergeSync,The following statement contains a magic number: properties.Add("MaxSubInterfaces"' EntityProperty.GeneratePropertyForInt(1000));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrMergeSync,The following statement contains a magic number: properties.Add("MaxTunnelInterfaces"' EntityProperty.GeneratePropertyForInt(4000));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrMergeSync,The following statement contains a magic number: properties.Add("MaxVrfs"' EntityProperty.GeneratePropertyForInt(4000));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDUnitTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDUnitTests.cs,RTableInsertOrMergeSync,The following statement contains a magic number: properties.Add("MaxBfdSessions"' EntityProperty.GeneratePropertyForInt(4000));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCutOffTailTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCutOffTailTests.cs,TestFixtureTearDown,The following statement contains a magic number: EnableTailInView(this.configurationWrapper.GetWriteView().Name' 60' this.configurationService);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCutOffTailTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCutOffTailTests.cs,SetupStaleViewAndNewView,The following statement contains a magic number: Assert.IsTrue(view.Chain.Count == 2' "expects 2 replicas only!");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCutOffTailTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCutOffTailTests.cs,SetupStaleViewAndNewView,The following statement contains a magic number: int leaseDurationInSec = 6000;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCutOffTailTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCutOffTailTests.cs,UploadHeadTailView,The following statement contains a magic number: Assert.IsTrue(viewConfg.GetCurrentReplicaChain().Count == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCutOffTailTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCutOffTailTests.cs,CutOffTailInView,The following statement contains a magic number: Assert.IsTrue(viewConfg.ReplicaChain.Count == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCutOffTailTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCutOffTailTests.cs,EnableTailInView,The following statement contains a magic number: Assert.IsTrue(viewConfg.ReplicaChain.Count == 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,SetupStaleViewAndNewView,The following statement contains a magic number: Assert.IsTrue(view.Chain.Count == 2' "expects 2 replicas only!");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,SetupStaleViewAndNewView,The following statement contains a magic number: int leaseDurationInSec = 6000;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,UpdateInStaleViewConflictingWithUpdateInNewView_T01,The following statement contains a magic number: var newUpdateTask = Task.Run(() =>              {                  while (!triggerUpdateWithNewView)                  {                      Thread.Sleep(100);                  }                    /*                   * 3 - Executes after step 2 below:                   *     WorkerTwo => updates the entry using new View                   */                  customer = RetrieveCustomer(firstName' lastName' workerTwo);                  customer.Email = "workerTwo";                    TableOperation operation = TableOperation.Replace(customer);                  newUpdateResult = workerTwo.Execute(operation);                    oldUpdateResume = true;              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,UpdateInStaleViewConflictingWithUpdateInNewView_T01,The following statement contains a magic number: ProxyBehavior[] behaviors =              {                  TamperBehaviors.TamperAllRequestsIf(                      (session =>                      {                          // => trigger new update to start                          triggerUpdateWithNewView = true;                            // Delaying commit to the Tail by stale view Update                          while (!oldUpdateResume)                          {                              Thread.Sleep(100);                          }                      })'                      (session =>                      {                          var body = session.GetRequestBodyAsString();                            // Commit to Tail by stale view                          if (session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"Email\":\"workerOne\"") &&                              body.Contains(string.Format("\"_rtable_ViewId\":\"{0}\""' staleViewId)) &&                              body.Contains("\"_rtable_RowLock\":false"))                          {                              return true;                          }                            return false;                      }))'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,UpdateInStaleViewConflictingWithUpdateInNewView_T02,The following statement contains a magic number: var newUpdateTask = Task.Run(() =>              {                  while (!triggerUpdateWithNewView)                  {                      Thread.Sleep(100);                  }                    /*                   * 3 - Executes after step 2 below:                   *     WorkerTwo => reads the entry using new View while it is locked by WorkeOne (not yet commited)                   */                  customer = RetrieveCustomer(firstName' lastName' workerTwo);                    // Signal old Update to resume ... and wait for it to commit the write                  oldUpdateResume = true;                  while (!updateWithOldViewFinished)                  {                      Thread.Sleep(100);                  }                    /*                   * 4 - WorkerTwo => updates the entry using new View ...                   */                  customer.Email = "workerTwo";                  TableOperation operation = TableOperation.Replace(customer);                  newUpdateResult = workerTwo.Execute(operation);              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,UpdateInStaleViewConflictingWithUpdateInNewView_T02,The following statement contains a magic number: var newUpdateTask = Task.Run(() =>              {                  while (!triggerUpdateWithNewView)                  {                      Thread.Sleep(100);                  }                    /*                   * 3 - Executes after step 2 below:                   *     WorkerTwo => reads the entry using new View while it is locked by WorkeOne (not yet commited)                   */                  customer = RetrieveCustomer(firstName' lastName' workerTwo);                    // Signal old Update to resume ... and wait for it to commit the write                  oldUpdateResume = true;                  while (!updateWithOldViewFinished)                  {                      Thread.Sleep(100);                  }                    /*                   * 4 - WorkerTwo => updates the entry using new View ...                   */                  customer.Email = "workerTwo";                  TableOperation operation = TableOperation.Replace(customer);                  newUpdateResult = workerTwo.Execute(operation);              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,UpdateInStaleViewConflictingWithUpdateInNewView_T02,The following statement contains a magic number: ProxyBehavior[] behaviors =              {                  TamperBehaviors.TamperAllRequestsIf(                      (session =>                      {                          // => trigger new update to start                          triggerUpdateWithNewView = true;                            // Delaying commit to the Tail by stale view Update                          while (!oldUpdateResume)                          {                              Thread.Sleep(100);                          }                      })'                      (session =>                      {                          var body = session.GetRequestBodyAsString();                            // Commit to Tail by stale view                          if (session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"Email\":\"workerOne\"") &&                              body.Contains(string.Format("\"_rtable_ViewId\":\"{0}\""' staleViewId)) &&                              body.Contains("\"_rtable_RowLock\":false"))                          {                              return true;                          }                            return false;                      }))'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,InsertInStaleViewConflictingWithInsertInNewView,The following statement contains a magic number: var newInsertTask = Task.Run(() =>              {                  while (!triggerInsertWithNewView)                  {                      Thread.Sleep(100);                  }                    /*                   * 2 - Executes after step 1 below:                   *     WorkerTwo => Insert a new row using new view                   */                  var customer = new CustomerEntity(firstName' lastName);                  customer.Email = "workerTwo";                    TableOperation operation = TableOperation.Insert(customer);                  newInsertResult = workerTwo.Execute(operation);                    // Signal old Insert to resume                  oldInsertResume = true;              });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,InsertInStaleViewConflictingWithInsertInNewView,The following statement contains a magic number: ProxyBehavior[] behaviors =              {                  TamperBehaviors.TamperAllRequestsIf(                      (session =>                      {                          // => trigger new insert to start                          triggerInsertWithNewView = true;                            // Delaying commit to the Tail by stale view Update                          while (!oldInsertResume)                          {                              Thread.Sleep(100);                          }                      })'                      (session =>                      {                          var body = session.GetRequestBodyAsString();                            // Commit to Tail by stale view                          if (session.hostname.Contains(accountNameToTamper + ".") &&                              session.HTTPMethodIs("PUT") &&                              body.Contains("\"Email\":\"workerOne\"") &&                              body.Contains(string.Format("\"_rtable_ViewId\":\"{0}\""' staleViewId)) &&                              body.Contains("\"_rtable_RowLock\":false"))                          {                              return true;                          }                            return false;                      }))'              };
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,RepairTableWontRepairRowsWithHigherViewIdWhenIgnoreHigherViewIdRowsFlagIsSet,The following statement contains a magic number: Assert.IsTrue(view.Chain.Count == 2' "expects 2 replicas only!");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,RepairTableWontRepairRowsWithHigherViewIdWhenIgnoreHigherViewIdRowsFlagIsSet,The following statement contains a magic number: RemoveHeadFromView(view.Name' 600' this.configurationService);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,RepairTableWontRepairRowsWithHigherViewIdWhenIgnoreHigherViewIdRowsFlagIsSet,The following statement contains a magic number: i < 10
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,RepairTableWontRepairRowsWithHigherViewIdWhenIgnoreHigherViewIdRowsFlagIsSet,The following statement contains a magic number: viewConfg.ViewId += 100;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,RepairTableWontRepairRowsWithHigherViewIdWhenIgnoreHigherViewIdRowsFlagIsSet,The following statement contains a magic number: new int[] { 5' 8 }
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,RepairTableWontRepairRowsWithHigherViewIdWhenIgnoreHigherViewIdRowsFlagIsSet,The following statement contains a magic number: new int[] { 5' 8 }
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,RepairTableWontRepairRowsWithHigherViewIdWhenIgnoreHigherViewIdRowsFlagIsSet,The following statement contains a magic number: viewConfg.ViewId -= 100;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,RepairTableWontRepairRowsWithHigherViewIdWhenIgnoreHigherViewIdRowsFlagIsSet,The following statement contains a magic number: new int[] { 5' 8 }
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,RepairTableWontRepairRowsWithHigherViewIdWhenIgnoreHigherViewIdRowsFlagIsSet,The following statement contains a magic number: new int[] { 5' 8 }
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,RepairTableWontRepairRowsWithHigherViewIdWhenIgnoreHigherViewIdRowsFlagIsSet,The following statement contains a magic number: InsertHeadInView(view.Name' 600' this.configurationService);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,RepairTableWontRepairRowsWithHigherViewIdWhenIgnoreHigherViewIdRowsFlagIsSet,The following statement contains a magic number: new int[] { 5' 8 }
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,RepairTableWontRepairRowsWithHigherViewIdWhenIgnoreHigherViewIdRowsFlagIsSet,The following statement contains a magic number: new int[] { 5' 8 }
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,CaseNoRepair_ReadRowFromOldViewCutOffTailUpdateRow,The following statement contains a magic number: Assert.IsTrue(view.Chain.Count == 2' "expects 2 replicas only!");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,CaseNoRepair_ReadRowFromOldViewCutOffTailUpdateRow,The following statement contains a magic number: i < 3
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,CaseNoRepair_ReadRowFromOldViewCutOffTailUpdateRow,The following statement contains a magic number: i < 13
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,CaseNoRepair_ReadRowFromNewViewCutOffTailUpdateRow,The following statement contains a magic number: Assert.IsTrue(view.Chain.Count == 2' "expects 2 replicas only!");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,CaseNoRepair_ReadRowFromNewViewCutOffTailUpdateRow,The following statement contains a magic number: i < 3
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,CaseNoRepair_ReadRowFromNewViewCutOffTailUpdateRow,The following statement contains a magic number: i < 13
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableInsertHeadTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableInsertHeadTests.cs,CaseNoRepair_ReadRowFromNewViewCutOffTailUpdateRow,The following statement contains a magic number: int entryId = 10;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,LoadTestConfiguration,The following statement contains a magic number: this.rtableTestConfiguration.StorageInformation.AccountNames.Count() < 2
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,LoadTestConfiguration,The following statement contains a magic number: this.rtableTestConfiguration.StorageInformation.AccountKeys.Count() < 2
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,UpdateConfigurationConstants,The following statement contains a magic number: Constants.LeaseDurationInSec = 5;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,UpdateConfigurationConstants,The following statement contains a magic number: Constants.LockTimeoutInSeconds = 5;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,GenerateRandomTableName,The following statement contains a magic number: return randomTableName.Substring(0' 64);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,GenerateRandomTableName,The following statement contains a magic number: randomTableName.Length > 64
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,RefreshRTableEnvJsonConfigBlob,The following statement contains a magic number: Console.WriteLine("Sleeping {0} seconds for new viewId to take effect..."'                      Constants.LeaseDurationInSec/2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,RefreshRTableEnvJsonConfigBlob,The following statement contains a magic number: Thread.Sleep((Constants.LeaseDurationInSec/2)*1000);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,RefreshRTableEnvJsonConfigBlob,The following statement contains a magic number: Thread.Sleep((Constants.LeaseDurationInSec/2)*1000);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableLibraryTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableLibraryTestBase.cs,RefreshRTableEnvJsonConfigBlob,The following statement contains a magic number: this.RefreshRTableEnvJsonConfigBlob(++viewId' convertXStoreTableMode' 0' new List<int> { 0' 1' 2});
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDPerfTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDPerfTests.cs,DeleteEntriesPerf,The following statement contains a magic number: Assert.IsTrue(customer._rtable_Version == 2' "entry was updated once' version should be 2");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableCRUDPerfTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableCRUDPerfTests.cs,RTableStableTwoReplicaCRUDTest,The following statement contains a magic number: Assert.IsTrue(view != null && view.Chain != null && view.Chain.Count == 2 && view.IsStable);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnPhysicallyDeletedEntries,The following statement contains a magic number: i < 10
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnPhysicallyDeletedEntries,The following statement contains a magic number: new int[] {2'4}
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnPhysicallyDeletedEntries,The following statement contains a magic number: new int[] {2'4}
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnPhysicallyDeletedEntries,The following statement contains a magic number: Assert.AreNotEqual(id' 2' "entry #2 should have been deleted");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnPhysicallyDeletedEntries,The following statement contains a magic number: Assert.AreNotEqual(id' 4' "entry #4 should have been deleted");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnPhysicallyDeletedEntries,The following statement contains a magic number: Assert.AreNotEqual(id' 2' "entry #2 should have been deleted");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnPhysicallyDeletedEntries,The following statement contains a magic number: Assert.AreNotEqual(id' 4' "entry #4 should have been deleted");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnEntriesWithTombstone,The following statement contains a magic number: i < 10
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnEntriesWithTombstone,The following statement contains a magic number: new int[] { 2' 4 }
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnEntriesWithTombstone,The following statement contains a magic number: new int[] { 2' 4 }
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnEntriesWithTombstone,The following statement contains a magic number: int deleteId = 2;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnEntriesWithTombstone,The following statement contains a magic number: deleteId = 4;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnEntriesWithTombstone,The following statement contains a magic number: Assert.AreNotEqual(id' 2' "entry #2 should have been deleted");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnEntriesWithTombstone,The following statement contains a magic number: Assert.AreNotEqual(id' 4' "entry #4 should have been deleted");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnEntriesWithTombstone,The following statement contains a magic number: Assert.AreNotEqual(id' 2' "entry #2 should have been deleted");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnEntriesWithTombstone,The following statement contains a magic number: Assert.AreNotEqual(id' 4' "entry #4 should have been deleted");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontThrowOnStaleViewByDefault,The following statement contains a magic number: long staleViewId = 5;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontThrowOnStaleViewByDefault,The following statement contains a magic number: i < 10
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontThrowOnStaleViewByDefault,The following statement contains a magic number: long newViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontThrowOnStaleViewByDefault,The following statement contains a magic number: int entryId = 5;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesThrowAfterDetectingStaleViewWhenThrowOnStaleViewInLinqQueryFlagIsSet,The following statement contains a magic number: long staleViewId = 5;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesThrowAfterDetectingStaleViewWhenThrowOnStaleViewInLinqQueryFlagIsSet,The following statement contains a magic number: i < 10
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesThrowAfterDetectingStaleViewWhenThrowOnStaleViewInLinqQueryFlagIsSet,The following statement contains a magic number: long newViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesThrowAfterDetectingStaleViewWhenThrowOnStaleViewInLinqQueryFlagIsSet,The following statement contains a magic number: int entryId = 5;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnRowsWithHighViewIdWhenFlagIgnoreHigherViewIdRowsIsSet,The following statement contains a magic number: long staleViewId = 5;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnRowsWithHighViewIdWhenFlagIgnoreHigherViewIdRowsIsSet,The following statement contains a magic number: i < 10
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnRowsWithHighViewIdWhenFlagIgnoreHigherViewIdRowsIsSet,The following statement contains a magic number: long newViewId = 6;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnRowsWithHighViewIdWhenFlagIgnoreHigherViewIdRowsIsSet,The following statement contains a magic number: new int[]{5' 8}
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnRowsWithHighViewIdWhenFlagIgnoreHigherViewIdRowsIsSet,The following statement contains a magic number: new int[]{5' 8}
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnRowsWithHighViewIdWhenFlagIgnoreHigherViewIdRowsIsSet,The following statement contains a magic number: new int[] {5' 8}
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnRowsWithHighViewIdWhenFlagIgnoreHigherViewIdRowsIsSet,The following statement contains a magic number: new int[] {5' 8}
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnRowsWithHighViewIdWhenFlagIgnoreHigherViewIdRowsIsSet,The following statement contains a magic number: Assert.AreNotEqual(id' 5' "row #5 should not be returned");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnRowsWithHighViewIdWhenFlagIgnoreHigherViewIdRowsIsSet,The following statement contains a magic number: Assert.AreNotEqual(id' 8' "row #8 should not be returned");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnRowsWithHighViewIdWhenFlagIgnoreHigherViewIdRowsIsSet,The following statement contains a magic number: Assert.AreNotEqual(id' 5' "row #5 should not be returned");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesDontReturnRowsWithHighViewIdWhenFlagIgnoreHigherViewIdRowsIsSet,The following statement contains a magic number: Assert.AreNotEqual(id' 8' "row #8 should not be returned");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesAreServedFromTailWhenReadViewTailIndexIsNotSet,The following statement contains a magic number: int dataSize = 5;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableAdditionalTests.cs,LinqQueriesAreServedFromHeadWhenReadViewTailIndexIsSet,The following statement contains a magic number: int dataSize = 5;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TestFixtureSetup,The following statement contains a magic number: complexEntity.Bool = m % 2 == 0 ? true : false;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TestFixtureSetup,The following statement contains a magic number: complexEntity.BoolPrimitive = m % 2 == 0 ? true : false;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TestFixtureSetup,The following statement contains a magic number: complexEntity.Double = m + ((double)m / 100);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TestFixtureSetup,The following statement contains a magic number: complexEntity.DoublePrimitive = m + ((double)m / 100);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TestFixtureSetup,The following statement contains a magic number: m == 50
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TestFixtureSetup,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TestFixtureSetup,The following statement contains a magic number: m < 100
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableExecuteQuerySync,The following statement contains a magic number: Assert.AreEqual(ent.Properties.Count' 4);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableExecuteQuerySync,The following statement contains a magic number: Assert.AreEqual(ent.Properties.Count' 4);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableExecuteQueryWithResolverSync,The following statement contains a magic number: Assert.AreEqual(100' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableExecuteQueryWithResolverSync,The following statement contains a magic number: Assert.AreEqual(100' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBasicSync,The following statement contains a magic number: Assert.AreEqual(ent.Properties.Count' 4);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBasicSync,The following statement contains a magic number: Assert.AreEqual(ent.Properties.Count' 4);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBasicWithResolverSync,The following statement contains a magic number: Assert.AreEqual(100' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBasicWithResolverSync,The following statement contains a magic number: Assert.AreEqual(100' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(4' ent.Properties.Count' "ent.Properties.Count={0} != 4"' ent.Properties.Count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(100' count' "count != 100");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(4' ent.Properties.Count' "ent.Properties.Count={0} != 4"' ent.Properties.Count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(99' count' "count != 99");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(4' ent.Properties.Count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(50' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(4' ent.Properties.Count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(49' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(4' ent.Properties.Count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(50' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(4' ent.Properties.Count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(51' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: TableQuery<ComplexEntity> query7 = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                  where (ent.Int32) < 1 + 50                                                  select ent).AsTableQuery();
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(51' seg7.Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: TableQuery<ComplexEntity> query8 = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                  where (ent.Int32) < 100 - 50                                                  select ent).AsTableQuery();
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: TableQuery<ComplexEntity> query8 = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                  where (ent.Int32) < 100 - 50                                                  select ent).AsTableQuery();
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(50' seg8.Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: TableQuery<ComplexEntity> query9 = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                  where (ent.Int32) < 2 * 25                                                  select ent).AsTableQuery();
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: TableQuery<ComplexEntity> query9 = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                  where (ent.Int32) < 2 * 25                                                  select ent).AsTableQuery();
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(50' seg9.Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: TableQuery<ComplexEntity> query10 = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                   where (ent.Int32) < 100 / 2                                                   select ent).AsTableQuery();
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: TableQuery<ComplexEntity> query10 = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                   where (ent.Int32) < 100 / 2                                                   select ent).AsTableQuery();
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(50' seg10.Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: TableQuery<ComplexEntity> query11 = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                   where (ent.Int32) < 100 % 12                                                   select ent).AsTableQuery();
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: TableQuery<ComplexEntity> query11 = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                   where (ent.Int32) < 100 % 12                                                   select ent).AsTableQuery();
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(4' seg11.Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: TableQuery<ComplexEntity> query12 = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                   where (ent.Int32) < (1 << 2)                                                   select ent).AsTableQuery();
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(4' seg12.Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: TableQuery<ComplexEntity> query13 = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                   where (ent.Int32) < (8 >> 1)                                                   select ent).AsTableQuery();
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(4' seg13.Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: TableQuery<ComplexEntity> query14 = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                   where (ent.Int32) > (2 & 4)                                                   select ent).AsTableQuery();
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: TableQuery<ComplexEntity> query14 = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                   where (ent.Int32) > (2 & 4)                                                   select ent).AsTableQuery();
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(99' seg14.Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: TableQuery<ComplexEntity> query15 = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                   where (ent.Int32) > (2 | 4)                                                   select ent).AsTableQuery();
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: TableQuery<ComplexEntity> query15 = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                   where (ent.Int32) > (2 | 4)                                                   select ent).AsTableQuery();
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBinaryOperatorsSync,The following statement contains a magic number: Assert.AreEqual(93' seg15.Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableCombineFilters,The following statement contains a magic number: Assert.AreEqual(100' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableCombineFilters,The following statement contains a magic number: Assert.AreEqual(2' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableTake,The following statement contains a magic number: IQueryable<DynamicReplicatedTableEntity> query2 = (from ent in currentTable.CreateQuery<DynamicReplicatedTableEntity>()                                                        where (ent.PartitionKey == "tables_batch_1" && ent.RowKey.CompareTo("0050") > 0)                                                        select ent).Take(5);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableTake,The following statement contains a magic number: Assert.AreEqual(5' query2.ToList().Count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableTake,The following statement contains a magic number: IQueryable<DynamicReplicatedTableEntity> query3 = (from ent in currentTable.CreateQuery<DynamicReplicatedTableEntity>()                                                        where (ent.PartitionKey == "tables_batch_1" && ent.RowKey.CompareTo("0050") > 0)                                                        select ent).Take(51);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableTake,The following statement contains a magic number: Assert.AreEqual(49' query3.ToList().Count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableMultipleTake,The following statement contains a magic number: IQueryable<DynamicReplicatedTableEntity> query = (from ent in currentTable.CreateQuery<DynamicReplicatedTableEntity>()                                                       where (ent.PartitionKey == "tables_batch_1" && ent.RowKey.CompareTo("0050") > 0)                                                       select ent).Take(5).Take(1);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableMultipleTake,The following statement contains a magic number: IQueryable<DynamicReplicatedTableEntity> query2 = (from ent in currentTable.CreateQuery<DynamicReplicatedTableEntity>()                                                        where (ent.PartitionKey == "tables_batch_1" && ent.RowKey.CompareTo("0050") > 0)                                                        select ent).Take(1).Take(5);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableCast,The following statement contains a magic number: Assert.AreEqual(49' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableCast,The following statement contains a magic number: Assert.AreEqual(49' count2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableMultipleCast,The following statement contains a magic number: Assert.AreEqual(49' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableMultipleCast,The following statement contains a magic number: Assert.AreEqual(49' count2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableToArray,The following statement contains a magic number: DynamicReplicatedTableEntity[] query2 = (from ent in currentTable.CreateQuery<DynamicReplicatedTableEntity>()                                              where (ent.PartitionKey == "tables_batch_1" && ent.RowKey.CompareTo("0050") > 0)                                              select ent).Take(5).ToArray();
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableToArray,The following statement contains a magic number: Assert.AreEqual(5' query2.Length);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableToArray,The following statement contains a magic number: DynamicReplicatedTableEntity[] query3 = (from ent in currentTable.CreateQuery<DynamicReplicatedTableEntity>()                                              where (ent.PartitionKey == "tables_batch_1" && ent.RowKey.CompareTo("0050") > 0)                                              select ent).Take(51).ToArray();
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableToArray,The following statement contains a magic number: Assert.AreEqual(49' query3.Length);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableFilterPredicate,The following statement contains a magic number: Assert.AreEqual(99' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableFilterPredicate,The following statement contains a magic number: Assert.AreEqual(99' count2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableComplexFilter,The following statement contains a magic number: IQueryable<ComplexEntity> query = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                 where ((ent.RowKey == "0050" && ent.Int32 == 50) || ((ent.Int32 == 30) && (ent.String == "wrong string" || ent.Bool == true)) || (ent.LongPrimitiveN == (long)int.MaxValue + 50))                                                 select ent);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableComplexFilter,The following statement contains a magic number: IQueryable<ComplexEntity> query = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                 where ((ent.RowKey == "0050" && ent.Int32 == 50) || ((ent.Int32 == 30) && (ent.String == "wrong string" || ent.Bool == true)) || (ent.LongPrimitiveN == (long)int.MaxValue + 50))                                                 select ent);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableComplexFilter,The following statement contains a magic number: IQueryable<ComplexEntity> query = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                 where ((ent.RowKey == "0050" && ent.Int32 == 50) || ((ent.Int32 == 30) && (ent.String == "wrong string" || ent.Bool == true)) || (ent.LongPrimitiveN == (long)int.MaxValue + 50))                                                 select ent);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableComplexFilter,The following statement contains a magic number: Assert.IsTrue(ent.Int32 == 50 || ent.Int32 == 30);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableComplexFilter,The following statement contains a magic number: Assert.IsTrue(ent.Int32 == 50 || ent.Int32 == 30);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableComplexFilter,The following statement contains a magic number: Assert.AreEqual(2' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableNestedParanthesis,The following statement contains a magic number: IQueryable<ComplexEntity> query = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                 where ((ent.RowKey == "0050" && ent.Int32 == 50) ||                                                 ((ent.Int32 == 30) && (ent.String == "wrong string" || ent.Bool == true) && !(ent.IntegerPrimitive == 31 && ent.LongPrimitive == (long)int.MaxValue + 31)) ||                                                 (ent.LongPrimitiveN == (long)int.MaxValue + 50))                                                 select ent);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableNestedParanthesis,The following statement contains a magic number: IQueryable<ComplexEntity> query = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                 where ((ent.RowKey == "0050" && ent.Int32 == 50) ||                                                 ((ent.Int32 == 30) && (ent.String == "wrong string" || ent.Bool == true) && !(ent.IntegerPrimitive == 31 && ent.LongPrimitive == (long)int.MaxValue + 31)) ||                                                 (ent.LongPrimitiveN == (long)int.MaxValue + 50))                                                 select ent);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableNestedParanthesis,The following statement contains a magic number: IQueryable<ComplexEntity> query = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                 where ((ent.RowKey == "0050" && ent.Int32 == 50) ||                                                 ((ent.Int32 == 30) && (ent.String == "wrong string" || ent.Bool == true) && !(ent.IntegerPrimitive == 31 && ent.LongPrimitive == (long)int.MaxValue + 31)) ||                                                 (ent.LongPrimitiveN == (long)int.MaxValue + 50))                                                 select ent);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableNestedParanthesis,The following statement contains a magic number: IQueryable<ComplexEntity> query = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                 where ((ent.RowKey == "0050" && ent.Int32 == 50) ||                                                 ((ent.Int32 == 30) && (ent.String == "wrong string" || ent.Bool == true) && !(ent.IntegerPrimitive == 31 && ent.LongPrimitive == (long)int.MaxValue + 31)) ||                                                 (ent.LongPrimitiveN == (long)int.MaxValue + 50))                                                 select ent);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableNestedParanthesis,The following statement contains a magic number: IQueryable<ComplexEntity> query = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                 where ((ent.RowKey == "0050" && ent.Int32 == 50) ||                                                 ((ent.Int32 == 30) && (ent.String == "wrong string" || ent.Bool == true) && !(ent.IntegerPrimitive == 31 && ent.LongPrimitive == (long)int.MaxValue + 31)) ||                                                 (ent.LongPrimitiveN == (long)int.MaxValue + 50))                                                 select ent);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableNestedParanthesis,The following statement contains a magic number: Assert.IsTrue(ent.Int32 == 50 || ent.Int32 == 30);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableNestedParanthesis,The following statement contains a magic number: Assert.IsTrue(ent.Int32 == 50 || ent.Int32 == 30);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableNestedParanthesis,The following statement contains a magic number: Assert.AreEqual(2' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableUnary,The following statement contains a magic number: Assert.AreEqual(99' queryResult.Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableUnary,The following statement contains a magic number: TableQuery<ComplexEntity> query = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                 where +(ent.Int32) < +50                                                 select ent).AsTableQuery();
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableUnary,The following statement contains a magic number: Assert.AreEqual(50' seg.Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableUnary,The following statement contains a magic number: Assert.AreEqual(100' seg2.Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableWithContinuationSync,The following statement contains a magic number: Assert.AreEqual(ent.Properties.Count' 4);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableWithContinuationSync,The following statement contains a magic number: Assert.AreEqual(ent.Properties.Count' 4);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableWithContinuationSync,The following statement contains a magic number: Assert.AreEqual(1500' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableWithContinuationSync,The following statement contains a magic number: TestHelper.AssertNAttempts(opContext' 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableGenericQueryableBasicAPM,The following statement contains a magic number: Assert.AreEqual(ent.Properties.Count' 4);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableGenericQueryableBasicAPM,The following statement contains a magic number: Assert.AreEqual(ent.Properties.Count' 4);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableGenericQueryableBasicWithResolverAPM,The following statement contains a magic number: Assert.AreEqual(100' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableGenericQueryableBasicWithResolverAPM,The following statement contains a magic number: Assert.AreEqual(100' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableGenericQueryableWithContinuationAPM,The following statement contains a magic number: Assert.AreEqual(ent.Properties.Count' 4);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableGenericQueryableWithContinuationAPM,The following statement contains a magic number: Assert.AreEqual(ent.Properties.Count' 4);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableGenericQueryableWithContinuationAPM,The following statement contains a magic number: Assert.AreEqual(1500' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableGenericQueryableWithContinuationAPM,The following statement contains a magic number: TestHelper.AssertNAttempts(opContext' 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBasicTask,The following statement contains a magic number: Assert.AreEqual(ent.Properties.Count' 4);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBasicTask,The following statement contains a magic number: Assert.AreEqual(ent.Properties.Count' 4);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBasicWithResolverTask,The following statement contains a magic number: Assert.AreEqual(100' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableBasicWithResolverTask,The following statement contains a magic number: Assert.AreEqual(100' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableWithContinuationTask,The following statement contains a magic number: Assert.AreEqual(ent.Properties.Count' 4);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableWithContinuationTask,The following statement contains a magic number: Assert.AreEqual(ent.Properties.Count' 4);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableWithContinuationTask,The following statement contains a magic number: Assert.AreEqual(1500' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableWithContinuationTask,The following statement contains a magic number: TestHelper.AssertNAttempts(opContext' 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableDynamicTableEntityQuery,The following statement contains a magic number: Assert.AreEqual(entities.Count' 50);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableWhere,The following statement contains a magic number: Assert.AreEqual(ent.RowKey' string.Format("{0:0000}"' count + 50));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableWhere,The following statement contains a magic number: Assert.AreEqual(count' 50);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableMultipleWhereSync,The following statement contains a magic number: Assert.AreEqual(ent.RowKey' string.Format("{0:0000}"' count + 50));
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableMultipleWhereSync,The following statement contains a magic number: Assert.AreEqual(count' 50);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableEnumerateTwice,The following statement contains a magic number: Assert.AreEqual(ent.Properties.Count' 4);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableEnumerateTwice,The following statement contains a magic number: Assert.AreEqual(ent.Properties.Count' 4);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableProjection,The following statement contains a magic number: TestHelper.ExpectedException<TargetInvocationException>(() => (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                                                                             where ent.RowKey.CompareTo("0050") > 0                                                                             select ent.Int32).Skip(5).Single()' "Specifying any operation after last navigation other than take should fail");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableProjection,The following statement contains a magic number: Assert.AreEqual(1500' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableProjection,The following statement contains a magic number: Assert.AreEqual(49' count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableProjection,The following statement contains a magic number: Assert.AreEqual(1500' anonymousRes.ToList().Count);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypes,The following statement contains a magic number: Assert.AreEqual(50' stringQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypes,The following statement contains a magic number: Assert.AreEqual(50' longQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypes,The following statement contains a magic number: Assert.AreEqual(50' longPrimitiveQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypes,The following statement contains a magic number: Assert.AreEqual(50' longNullableQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypes,The following statement contains a magic number: Assert.AreEqual(50' doubleQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypes,The following statement contains a magic number: Assert.AreEqual(50' doubleNullableQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypes,The following statement contains a magic number: Assert.AreEqual(50' int32Query.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypes,The following statement contains a magic number: Assert.AreEqual(50' int32NullableQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypes,The following statement contains a magic number: Assert.AreEqual(50' dtoQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypes,The following statement contains a magic number: Assert.AreEqual(50' boolQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypes,The following statement contains a magic number: Assert.AreEqual(50' boolPrimitiveQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypes,The following statement contains a magic number: Assert.AreEqual(50' complexFilter.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypesViaDynamicTableEntity,The following statement contains a magic number: Assert.AreEqual(50' stringQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypesViaDynamicTableEntity,The following statement contains a magic number: Assert.AreEqual(50' longQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypesViaDynamicTableEntity,The following statement contains a magic number: Assert.AreEqual(50' longPrimitiveQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypesViaDynamicTableEntity,The following statement contains a magic number: Assert.AreEqual(50' longNullableQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypesViaDynamicTableEntity,The following statement contains a magic number: Assert.AreEqual(50' doubleQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypesViaDynamicTableEntity,The following statement contains a magic number: Assert.AreEqual(50' doubleNullableQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypesViaDynamicTableEntity,The following statement contains a magic number: Assert.AreEqual(50' int32Query.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypesViaDynamicTableEntity,The following statement contains a magic number: Assert.AreEqual(50' int32NullableQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypesViaDynamicTableEntity,The following statement contains a magic number: Assert.AreEqual(50' dtoQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypesViaDynamicTableEntity,The following statement contains a magic number: Assert.AreEqual(50' boolQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypesViaDynamicTableEntity,The following statement contains a magic number: Assert.AreEqual(50' boolPrimitiveQuery.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableOnSupportedTypesViaDynamicTableEntity,The following statement contains a magic number: Assert.AreEqual(50' complexFilter.AsTableQuery().Execute().Count());
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryableTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryableTests.cs,TableQueryableGroupBy,The following statement contains a magic number: var query = (from ent in complexEntityTable.CreateQuery<ComplexEntity>()                           group ent.Int32 by ent.Int32 % 5 into mod5Group                           select new                           {                               numbers = mod5Group                           });
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericAdditionalTests.cs,TestFixtureSetup,The following statement contains a magic number: complexEntity.Bool = m % 2 == 0 ? true : false;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericAdditionalTests.cs,TestFixtureSetup,The following statement contains a magic number: complexEntity.BoolPrimitive = m % 2 == 0 ? true : false;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericAdditionalTests.cs,TestFixtureSetup,The following statement contains a magic number: complexEntity.Double = m + ((double)m / 100);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericAdditionalTests.cs,TestFixtureSetup,The following statement contains a magic number: complexEntity.DoublePrimitive = m + ((double)m / 100);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericAdditionalTests.cs,TestFixtureSetup,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericAdditionalTests.cs,TableGenericQueryWithSpecificOnSupportedTypes,The following statement contains a magic number: ExecuteQueryAndAssertResults(this.currentTable'                      TableQuery.GenerateFilterCondition("String"' QueryComparisons.GreaterThanOrEqual' "0050")' 50);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericAdditionalTests.cs,TableGenericQueryWithSpecificOnSupportedTypes,The following statement contains a magic number: ExecuteQueryAndAssertResults(this.currentTable'                      TableQuery.GenerateFilterConditionForLong("Int64"' QueryComparisons.GreaterThanOrEqual'                              middleRef.LongPrimitive)' 50);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericAdditionalTests.cs,TableGenericQueryWithSpecificOnSupportedTypes,The following statement contains a magic number: ExecuteQueryAndAssertResults(this.currentTable' TableQuery.GenerateFilterConditionForLong("LongPrimitive"'                      QueryComparisons.GreaterThanOrEqual' middleRef.LongPrimitive)' 50);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericAdditionalTests.cs,TableGenericQueryWithSpecificOnSupportedTypes,The following statement contains a magic number: ExecuteQueryAndAssertResults(this.currentTable'                      TableQuery.GenerateFilterConditionForDouble("Double"' QueryComparisons.GreaterThanOrEqual'                              middleRef.Double)' 50);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericAdditionalTests.cs,TableGenericQueryWithSpecificOnSupportedTypes,The following statement contains a magic number: ExecuteQueryAndAssertResults(this.currentTable' TableQuery.GenerateFilterConditionForDouble("DoublePrimitive"'                      QueryComparisons.GreaterThanOrEqual' middleRef.DoublePrimitive)' 50);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericAdditionalTests.cs,TableGenericQueryWithSpecificOnSupportedTypes,The following statement contains a magic number: ExecuteQueryAndAssertResults(this.currentTable'                      TableQuery.GenerateFilterConditionForInt("Int32"' QueryComparisons.GreaterThanOrEqual'                              middleRef.Int32)' 50);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericAdditionalTests.cs,TableGenericQueryWithSpecificOnSupportedTypes,The following statement contains a magic number: ExecuteQueryAndAssertResults(this.currentTable' TableQuery.GenerateFilterConditionForInt("IntegerPrimitive"'                      QueryComparisons.GreaterThanOrEqual' middleRef.IntegerPrimitive)' 50);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericAdditionalTests.cs,TableGenericQueryWithSpecificOnSupportedTypes,The following statement contains a magic number: ExecuteQueryAndAssertResults(this.currentTable'                      TableQuery.GenerateFilterConditionForDate("DateTimeOffset"' QueryComparisons.GreaterThanOrEqual'                              middleRef.DateTimeOffset)' 50);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericAdditionalTests.cs,TableGenericQueryWithSpecificOnSupportedTypes,The following statement contains a magic number: ExecuteQueryAndAssertResults(this.currentTable'                      TableQuery.GenerateFilterConditionForBool("Bool"' QueryComparisons.Equal' middleRef.Bool)' 50);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericAdditionalTests.cs,TableGenericQueryWithSpecificOnSupportedTypes,The following statement contains a magic number: ExecuteQueryAndAssertResults(this.currentTable'                      TableQuery.GenerateFilterConditionForBool("BoolPrimitive"' QueryComparisons.Equal' middleRef.BoolPrimitive)'                      50);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericAdditionalTests.cs,TableGenericQueryWithSpecificOnSupportedTypes,The following statement contains a magic number: ExecuteQueryAndAssertResults(this.currentTable'                      TableQuery.GenerateFilterConditionForBinary("Binary"' QueryComparisons.GreaterThanOrEqual'                              middleRef.Binary)' 50);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericAdditionalTests.cs,TableGenericQueryWithSpecificOnSupportedTypes,The following statement contains a magic number: ExecuteQueryAndAssertResults(this.currentTable' TableQuery.GenerateFilterConditionForBinary("BinaryPrimitive"'                      QueryComparisons.GreaterThanOrEqual' middleRef.BinaryPrimitive)' 50);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericAdditionalTests.cs,TableGenericQueryWithSpecificOnSupportedTypes,The following statement contains a magic number: ExecuteQueryAndAssertResults(this.currentTable' TableQuery.CombineFilters(                      TableQuery.GenerateFilterCondition("PartitionKey"' QueryComparisons.Equal'                              middleRef.PartitionKey)'                      TableOperators.And'                      TableQuery.GenerateFilterConditionForBinary("Binary"' QueryComparisons.GreaterThanOrEqual'                              middleRef.Binary))' 50);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericAdditionalTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericAdditionalTests.cs,TableGenericQueryWithSpecificOnSupportedTypes,The following statement contains a magic number: ExecuteQueryAndAssertResults(this.currentTable' TableQuery.GenerateFilterConditionForBinary("BinaryPrimitive"'                      QueryComparisons.GreaterThanOrEqual' middleRef.BinaryPrimitive)' 50);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableGenericQueryWithFilter,The following statement contains a magic number: int ninety = 90;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableGenericWithResolver,The following statement contains a magic number: query.TakeCount = 1000;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableGenericWithResolver,The following statement contains a magic number: Assert.AreEqual(1000' query.TakeCount);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryGenericWithTakeCount,The following statement contains a magic number: TableQuery<BaseEntity> query = new TableQuery<BaseEntity>().Take(100);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryGenericWithTakeCount,The following statement contains a magic number: query.TakeCount = 1200;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryGenericWithTakeCount,The following statement contains a magic number: TestHelper.AssertNAttempts(opContext' 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryGenericWithTakeCountAndResolver,The following statement contains a magic number: TableQuery<BaseEntity> query = new TableQuery<BaseEntity>().Take(100);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryGenericWithTakeCountAndResolver,The following statement contains a magic number: query.TakeCount = 1200;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryGenericWithTakeCountAndResolver,The following statement contains a magic number: TestHelper.AssertNAttempts(opContext' 2);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryableCreateQueryGeneric,The following statement contains a magic number: j < 10
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryableCreateQueryGeneric,The following statement contains a magic number: Assert.IsTrue(tableCount == 10' "Query counts are different");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryableCreateQueryNoPartitionKey,The following statement contains a magic number: Thread.Sleep(10000);
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryableCreateQueryNoPartitionKey,The following statement contains a magic number: j < 10
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryableCreateQueryNoPartitionKey,The following statement contains a magic number: j < 10
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableQueryGenericTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableQueryGenericTests.cs,TableQueryableCreateQueryNoPartitionKey,The following statement contains a magic number: Assert.IsTrue(tableCount == 20' "Query counts are different");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableStressTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableStressTests.cs,TestFixtureSetup,The following statement contains a magic number: Assert.AreEqual(2' this.actualStorageAccountsUsed.Count' "Two storage accounts should be used at this point.");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,ExceptionWhenUsingSmallerViewId,The following statement contains a magic number: long currentViewId = 100;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,RowsWithHigherViewIdNotFoundWhenIgnoreHigherViewIdRowsFlagIsSet,The following statement contains a magic number: long higherViewId = 200;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,RowsWithHigherViewIdNotFoundWhenIgnoreHigherViewIdRowsFlagIsSet,The following statement contains a magic number: long currentViewId = 10;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,ReplaceUsingLargerViewId,The following statement contains a magic number: long currentViewId = 100;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,ReplaceUsingLargerViewId,The following statement contains a magic number: Assert.AreEqual(2' customer2._rtable_Version' "customer2._rtable_Version mismatch");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,MergeUsingLargerViewId,The following statement contains a magic number: long currentViewId = 100;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,MergeUsingLargerViewId,The following statement contains a magic number: Assert.AreEqual(3' retrievedEntity.Properties.Count' "Properties.Count mismatch");
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,BatchOperationExceptionWhenUsingSmallerViewId,The following statement contains a magic number: long currentViewId = 100;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,BatchOperationExceptionWhenUsingSmallerViewId,The following statement contains a magic number: int count = 3;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,BatchOperationUsingLargerViewId,The following statement contains a magic number: long currentViewId = 100;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableViewIdTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableViewIdTests.cs,BatchOperationUsingLargerViewId,The following statement contains a magic number: int count = 2;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperTestBase.cs,PerformOperationAndValidate,The following statement contains a magic number: attempts < 3
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperTestBase.cs,PerformInsertOperationAndValidate,The following statement contains a magic number: attempts < 3
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperTestBase.cs,PerformInsertOperationAndExpectToFail,The following statement contains a magic number: attempts < 3
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,RTableWrapperTestBase,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\RTableWrapperTestBase.cs,PerformIndividualOperationAndValidate,The following statement contains a magic number: attempts < 3
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,B00TamperSkipReplaceRowInnerTest,The following statement contains a magic number: int skipInitialSessions = 2;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,A00TamperSkipDeleteRowHeadTest,The following statement contains a magic number: int skipInitialiSessions = 2;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,B00TamperSkipDeleteRowInnerTest,The following statement contains a magic number: int skipInitialiSessions = 2;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,B00TamperBatchReplaceInnerTest,The following statement contains a magic number: int count = 2;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,C00TamperBatchReplaceTailTest,The following statement contains a magic number: int count = 2;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,B00TamperBatchDeleteInnerTest,The following statement contains a magic number: int count = 2;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,C00TamperBatchDeleteTailTest,The following statement contains a magic number: int count = 2;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,A00TamperReadRowHeadTest,The following statement contains a magic number: i < 3 * this.actualStorageAccountsUsed.Count
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ShortOutageTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ShortOutageTests.cs,B00TamperReadRowInnerTest,The following statement contains a magic number: i < 3 * this.actualStorageAccountsUsed.Count
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,TestHelper,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\TestHelper.cs,ValidateResponse,The following statement contains a magic number: semDex = semDex > 2 ? -1 : semDex;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,A00ThrottleSkipReplaceRowHeadTest,The following statement contains a magic number: int skipInitialSessions = 2;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,B00ThrottleSkipReplaceRowInnerTest,The following statement contains a magic number: int skipInitialSessions = 2;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,A00ThrottleSkipDeleteRowHeadTest,The following statement contains a magic number: int skipInitialiSessions = 2;
Magic Number,Microsoft.Azure.Toolkit.Replication.Test,ThrottlingTests,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ThrottlingTests.cs,B00ThrottleSkipDeleteRowInnerTest,The following statement contains a magic number: int skipInitialiSessions = 2;
Duplicate Code,Microsoft.Azure.Toolkit.Replication.Test,ReplicatedTableConfigurationStoreTest,D:\research\architectureSmells\repos\Azure_rtable\Test\Tests\ReplicatedTableConfigurationStoreTest.cs,TestMoveReplicaToHeadAndSetViewToReadOnly,The method contains a code clone-set at the following line numbers (starting from the method definition): ((153' 181)' (192' 220))
