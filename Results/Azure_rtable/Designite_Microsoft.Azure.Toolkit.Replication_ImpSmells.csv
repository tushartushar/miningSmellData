Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,TransformOp,The method has 114 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,ReplaceInternal,The method has 106 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,FlushAndRetrieveInternal,The method has 106 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,RunBatchSplit,The method has 117 lines of code.
Long Method,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,RepairRowInternal,The method has 160 lines of code.
Complex Method,Microsoft.Azure.Toolkit.Replication,TypeSystem,C:\repos\Azure_rtable\library\ReplicatedTableQueryProvider.cs,FindIEnumerable,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Azure.Toolkit.Replication,CloudBlobHelpers,C:\repos\Azure_rtable\library\CloudBlobHelpers.cs,FindMajority,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,TransformOp,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,Retrieve,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,FlushAndRetrieveInternal,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,InsertUpdateOrDeleteRow,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,RepairRowInternal,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.Azure.Toolkit.Replication,View,C:\repos\Azure_rtable\library\View.cs,InitFromConfigVer1,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.Azure.Toolkit.Replication,CloudBlobHelpers,C:\repos\Azure_rtable\library\CloudBlobHelpers.cs,TryWriteBlobQuorum,The method has 5 parameters. Parameters: blobs' configuration' ParseBlobFunc' ConfigIdComparer' GenerateConfigId
Long Parameter List,Microsoft.Azure.Toolkit.Replication,DynamicReplicatedTableEntity,C:\repos\Azure_rtable\library\DynamicReplicatedTableEntity.cs,DynamicReplicatedTableEntity,The method has 5 parameters. Parameters: partitionKey' rowKey' timestamp' etag' properties
Long Parameter List,Microsoft.Azure.Toolkit.Replication,IReplicatedTableConfigurationParser,C:\repos\Azure_rtable\library\IReplicatedTableConfigurationParser.cs,ParseBlob,The method has 7 parameters. Parameters: blobs' SetConnectionString' tableConfigList' leaseDuration' configId' instrumentation' ignoreHigherViewIdRows
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTableConfigurationManager,C:\repos\Azure_rtable\library\ReplicatedTableConfigurationManager.cs,ReplicatedTableConfigurationManager,The method has 5 parameters. Parameters: blobLocations' connectionStringMap' useHttps' lockTimeoutInSeconds' blobParser
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTableConfigurationParser,C:\repos\Azure_rtable\library\ReplicatedTableConfigurationParser.cs,ParseBlob,The method has 7 parameters. Parameters: blobs' SetConnectionString' tableConfigList' leaseDuration' configId' instrumentation' ignoreHigherViewIdRows
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTableConfigurationStoreParser,C:\repos\Azure_rtable\library\ReplicatedTableConfigurationStoreParser.cs,ParseBlob,The method has 7 parameters. Parameters: blobs' SetConnectionString' tableConfigList' leaseDuration' configId' instrumentation' ignoreHigherViewIdRows
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,TransformOp,The method has 8 parameters. Parameters: txnView' row' phase' index' needInsertTombstone' insertTombstones' requestOptions' operationContext
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,TransformUpdateBatchOp,The method has 7 parameters. Parameters: txnView' batch' phase' index' results' requestOptions' operationContext
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,Flush2PCBatch,The method has 5 parameters. Parameters: txnView' batch' headResults' requestOptions' operationContext
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,MergeInternal,The method has 5 parameters. Parameters: txnView' operation' retrievedResult' requestOptions' operationContext
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,ReplaceInternal,The method has 5 parameters. Parameters: txnView' operation' retrievedResult' requestOptions' operationContext
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,InsertInternal,The method has 5 parameters. Parameters: txnView' operation' retrievedResult' requestOptions' operationContext
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,FlushAndRetrieveInternal,The method has 5 parameters. Parameters: txnView' row' requestOptions' operationContext' virtualizeEtag
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,RetrieveFromReplica,The method has 5 parameters. Parameters: txnView' index' operation' requestOptions' operationContext
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,Flush2PC,The method has 5 parameters. Parameters: txnView' row' requestOptions' operationContext' etagOnHead
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,FlushPreparePhase,The method has 5 parameters. Parameters: txnView' row' requestOptions' operationContext' eTagsStrings
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,FlushCommitPhase,The method has 5 parameters. Parameters: txnView' row' requestOptions' operationContext' eTagStrings
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,InsertUpdateOrDeleteRow,The method has 6 parameters. Parameters: txnView' index' row' Etag' requestOptions' operationContext
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,RunBatch,The method has 5 parameters. Parameters: tableClient' batch' unlock' requestOptions' operationContext
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,RunBatchSplit,The method has 6 parameters. Parameters: tableClient' batch' unlock' outBatch' requestOptions' operationContext
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,FlushRecoveryBatch,The method has 9 parameters. Parameters: unfinishedOps' maxBatchSize' status' newTableClient' headTableClient' batchHead' batchNewReplica' batchCount' batchId
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,ConvertXStoreTable,The method has 5 parameters. Parameters: successCount' skippedCount' failedCount' requestOptions' operationContext
Long Parameter List,Microsoft.Azure.Toolkit.Replication,ReplicatedTableV2,C:\repos\Azure_rtable\library\ReplicatedTableV2.cs,ConvertXStoreTable,The method has 5 parameters. Parameters: successCount' skippedCount' failedCount' requestOptions' operationContext
Long Identifier,Microsoft.Azure.Toolkit.Replication,CloudBlobHelpers,C:\repos\Azure_rtable\library\CloudBlobHelpers.cs,GetBlockBlob,The length of the parameter configurationStorageConnectionString is 36.
Long Identifier,Microsoft.Azure.Toolkit.Replication,Constants,C:\repos\Azure_rtable\library\Constants.cs,,The length of the parameter ConfigurationStoreUpdatingText is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication,Constants,C:\repos\Azure_rtable\library\Constants.cs,,The length of the parameter RTableConfigurationBlobLocationContainerName is 44.
Long Identifier,Microsoft.Azure.Toolkit.Replication,ConfigurationStoreLocationInfo,C:\repos\Azure_rtable\library\ConfigurationStoreLocationInfo.cs,ConfigurationStoreLocationInfo,The length of the parameter storageAccountConnectionString is 30.
Long Identifier,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,ReplicatedTable,The length of the parameter replicatedTableConfigurationAgent is 33.
Long Identifier,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,ReplicatedTable,The length of the parameter replicatedTableConfigurationAgent is 33.
Long Identifier,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,,The length of the parameter ThrowOnStaleViewInLinqQueryFlag is 31.
Long Identifier,Microsoft.Azure.Toolkit.Replication,ReplicatedTableV2,C:\repos\Azure_rtable\library\ReplicatedTableV2.cs,ReplicatedTableV2,The length of the parameter replicatedTableConfigurationAgent is 33.
Long Identifier,Microsoft.Azure.Toolkit.Replication,StopWatchInternal,C:\repos\Azure_rtable\library\StopWatchInternal.cs,StopWatchInternal,The length of the parameter replicatedTableConfigurationWrapper is 35.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTableQuery<TElement>,C:\repos\Azure_rtable\library\ReplicatedTableQueryProvider.cs,GetEnumerator,The length of the statement  "            return new ReplicatedTableEnumerator<TElement>(innerTableQuery.GetEnumerator()' isConvertMode' txnViewId' staleViewHandling); " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTableQueryProvider,C:\repos\Azure_rtable\library\ReplicatedTableQueryProvider.cs,CreateQuery,The length of the statement  "            return new ReplicatedTableQuery<TResult>(innerQueryProvider.CreateQuery<TResult>(expression)' isConvertMode' txnViewId' staleViewHandling); " is 139.
Long Statement,Microsoft.Azure.Toolkit.Replication,CloudBlobHelpers,C:\repos\Azure_rtable\library\CloudBlobHelpers.cs,TryReadBlobQuorum,The length of the statement  "            List<ReplicatedTableReadBlobResult> resultArray = TryReadAllBlobs(blobs' out valuesArray' out eTagsArray' ParseBlobFunc); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication,CloudBlobHelpers,C:\repos\Azure_rtable\library\CloudBlobHelpers.cs,TryReadBlobQuorum,The length of the statement  "            ReplicatedTableQuorumReadResult majority = FindMajority(resultArray.AsReadOnly()' valuesArray.AsReadOnly()' out quorumIndex); " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication,CloudBlobHelpers,C:\repos\Azure_rtable\library\CloudBlobHelpers.cs,TryWriteBlobQuorum,The length of the statement  "            List<ReplicatedTableReadBlobResult> resultArray = TryReadAllBlobs(blobs' out valuesArray' out eTagsArray' ParseBlobFunc); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication,CloudBlobHelpers,C:\repos\Azure_rtable\library\CloudBlobHelpers.cs,TryWriteBlobQuorum,The length of the statement  "            ReplicatedTableQuorumReadResult majority = FindMajority(resultArray.AsReadOnly()' valuesArray.AsReadOnly()' out quorumIndex); " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication,CloudBlobHelpers,C:\repos\Azure_rtable\library\CloudBlobHelpers.cs,TryWriteBlobQuorum,The length of the statement  "                return new ReplicatedTableQuorumWriteResult(ReplicatedTableQuorumWriteCode.Success' newConfId' writeResultArray.ToList()); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication,CloudBlobHelpers,C:\repos\Azure_rtable\library\CloudBlobHelpers.cs,TryWriteBlobQuorum,The length of the statement  "            return new ReplicatedTableQuorumWriteResult(ReplicatedTableQuorumWriteCode.QuorumWriteFailure' writeResultArray.ToList()); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication,CloudBlobHelpers,C:\repos\Azure_rtable\library\CloudBlobHelpers.cs,TryUploadBlobs,The length of the statement  "            return new ReplicatedTableQuorumWriteResult(ReplicatedTableQuorumWriteCode.QuorumWriteFailure' writeResultArray.ToList()); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication,InitDynamicReplicatedTableEntity,C:\repos\Azure_rtable\library\DynamicReplicatedTableEntity.cs,ReadEntity,The length of the statement  "                _rtable_LockAcquisition = (DateTimeOffset)prop["_rtable_LockAcquisition"].DateTimeOffsetValue; prop.Remove("_rtable_LockAcquisition"); " is 134.
Long Statement,Microsoft.Azure.Toolkit.Replication,DynamicReplicatedTableEntity,C:\repos\Azure_rtable\library\DynamicReplicatedTableEntity.cs,ReadEntity,The length of the statement  "            _rtable_LockAcquisition = (DateTimeOffset)prop["_rtable_LockAcquisition"].DateTimeOffsetValue; prop.Remove("_rtable_LockAcquisition"); " is 134.
Long Statement,Microsoft.Azure.Toolkit.Replication,JsonStore<T>,C:\repos\Azure_rtable\library\JsonStore.cs,Serialize,The length of the statement  "            // JSon converts a / forward slash into a \/ on serialization. That cannot be prevented. We need to remove it since svdgenerator does not work. " is 143.
Long Statement,Microsoft.Azure.Toolkit.Replication,JsonStore<T>,C:\repos\Azure_rtable\library\JsonStore.cs,ConvertDoubleQuotesToSingleQuoteForXmlCompatibility,The length of the statement  "                string message = String.Format(CultureInfo.InvariantCulture' "Could not perform Json Serialization on {0} since it contains ' single-quote"' jsonString); " is 153.
Long Statement,Microsoft.Azure.Toolkit.Replication,JsonStore<T>,C:\repos\Azure_rtable\library\JsonStore.cs,Deserialize,The length of the statement  "                string message = String.Format(CultureInfo.InvariantCulture' "Could not perform Json Deserialization on {0}"' jsonString); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTableConfiguration,C:\repos\Azure_rtable\library\ReplicatedTableConfiguration.cs,ThrowIfViewBreaksTableConstraint,The length of the statement  "                var msg = string.Format("Table:\'{0}\' should not have a view:\'{1}\' with more than 1 replica since it is in Conversion mode!"' " is 128.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTableConfiguration,C:\repos\Azure_rtable\library\ReplicatedTableConfiguration.cs,ThrowIfViewIsMissing,The length of the statement  "            var msg = string.Format("Table:\'{0}\' refers a missing view:\'{1}\'! First' create the view and then configure the table."' " is 124.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTableConfiguration,C:\repos\Azure_rtable\library\ReplicatedTableConfiguration.cs,ThrowIfAnyPartitionViewIsMissing,The length of the statement  "                    var msg = string.Format("Table:\'{0}\' refers a missing partition view:\'{1}\'! First' create the view and then configure the table."' " is 134.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTableConfiguration,C:\repos\Azure_rtable\library\ReplicatedTableConfiguration.cs,ThrowIfAnyPartitionViewHasManyReplicasInConversionMode,The length of the statement  "                var msg = string.Format("Table:\'{0}\' refers a partition view:\'{1}\' with more than 1 replica while in Conversion mode!"' " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTableConfiguration,C:\repos\Azure_rtable\library\ReplicatedTableConfiguration.cs,ValidateAndFixConfig,The length of the statement  "                    var msg = string.Format("Table:\'{0}\' is configured more than once! Only one config per table."' duplicates.First().Key); " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTableConfigurationManager,C:\repos\Azure_rtable\library\ReplicatedTableConfigurationManager.cs,OldStrategyToSetConnectionString,The length of the statement  "            string connectionString = String.Format(Constants.ShortConnectioStringTemplate' useHttps ? "https" : "http"' replica.StorageAccountName' replica.StorageAccountKey); " is 164.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTableConfigurationParser,C:\repos\Azure_rtable\library\ReplicatedTableConfigurationParser.cs,ParseBlob,The length of the statement  "                    ReplicatedTableLogger.LogError("ReadHeadIndex={0} of  ViewName={1} is out of range. Must be <= {2}"' view.ReadHeadIndex' view.Name' view.TailIndex); " is 148.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTableConfigurationServiceV2,C:\repos\Azure_rtable\library\ReplicatedTableConfigurationServiceV2.cs,TurnReplicaOn,The length of the statement  "                var msg = string.Format("TurnReplicaOn={0}: failed to read configuration' \n{1}"' storageAccountName' readResult.ToString()); " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTableConfigurationServiceV2,C:\repos\Azure_rtable\library\ReplicatedTableConfigurationServiceV2.cs,TurnReplicaOn,The length of the statement  "            //   but don't validate it is loaded bcz if all views of the config are empty' the config won't be refreshed by RefreshReadAndWriteViewsFromBlobs() thread! " is 155.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTableConfigurationServiceV2,C:\repos\Azure_rtable\library\ReplicatedTableConfigurationServiceV2.cs,TurnReplicaOff,The length of the statement  "                var msg = string.Format("TurnReplicaOff={0}: failed to read configuration' \n{1}"' storageAccountName' readResult.ToString()); " is 126.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTableConfigurationServiceV2,C:\repos\Azure_rtable\library\ReplicatedTableConfigurationServiceV2.cs,TurnReplicaOff,The length of the statement  "                var msg = string.Format("TurnReplicaOff={0}: failed to update configuration' \n{1}"' storageAccountName' writeResult.ToString()); " is 129.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTableConfigurationServiceV2,C:\repos\Azure_rtable\library\ReplicatedTableConfigurationServiceV2.cs,RepairTable,The length of the statement  "                    return new ReplicatedTableRepairResult(ReplicatedTableRepairCode.NotImpactedTable' tableName' viewName' storageAccountName); " is 124.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTableConfigurationServiceV2,C:\repos\Azure_rtable\library\ReplicatedTableConfigurationServiceV2.cs,RepairTable,The length of the statement  "                ReplicatedTableLogger.LogInformational("RepairTable={0}' View={1}' StorageAccountName={2}' from viewId={3} => Status={4}"' " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,TransformOp,The length of the statement  "                            ReplicatedTableLogger.LogInformational("TransformOp(): Etag does not match. row.ETag ({0}) != currentRow._rtable_Version ({1})"' " is 128.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,GetEntityKeysFromOperation,The length of the statement  "            PropertyInfo pkProp = operation.GetType().GetProperty("RetrievePartitionKey"' System.Reflection.BindingFlags.GetProperty | " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,TransformUpdateBatchOp,The length of the statement  "                    if ((prepOp = TransformOp(txnView' row' phase' index' tombstone' ref insertTombstone' requestOptions' operationContext)) == null) " is 129.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,TransformUpdateBatchOp,The length of the statement  "                    if ((prepOp = TransformOp(txnView' row' phase' index' tombstone' ref insertTombstone' requestOptions' operationContext)) == null) " is 129.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,PostProcessBatchExec,The length of the statement  "                // 2. Virtualize etags in the results as well as request (etags include physical etags in the batch after their execution). " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,FlushAndRetrieveBatch,The length of the statement  "                                ReplicatedTableLogger.LogInformational("FlushAndRetrieveBatch(): Row is locked and has expired. PartitionKey={0} RowKey={1}"' " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,FlushAndRetrieveBatch,The length of the statement  "                            ReplicatedTableLogger.LogInformational("FlushAndRetrieveBatch(): Row is locked but NOT expired. PartitionKey={0} RowKey={1}"' " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,RunPreparePhaseAgainstHeadReplica,The length of the statement  "            TableBatchOperation batchOp = TransformUpdateBatchOp(txnView' batch' phase' txnView.WriteHeadIndex' null' requestOptions' " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,Retrieve,The length of the statement  "            // for latency. If read load balancing across replicas is desired' then choose a random replica and read if lock bit is 0. " is 122.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,InsertInternal,The length of the statement  "                ReplicatedTableLogger.LogError("Insert: Failed to insert at the head with HttpStatusCode = {0}"' result.HttpStatusCode); " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,InsertOrReplace,The length of the statement  "                     (result.HttpStatusCode == (int) HttpStatusCode.Conflict || result.HttpStatusCode == (int) HttpStatusCode.PreconditionFailed) && " is 127.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,FlushAndRetrieveInternal,The length of the statement  "                (repairRowTableResult.HttpStatusCode != (int)HttpStatusCode.OK && repairRowTableResult.HttpStatusCode != (int) HttpStatusCode.NoContent)) " is 137.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,ThrowIfViewIdNotConsistent,The length of the statement  "                var msg = string.Format("current _rtable_ViewId {0} is smaller than _rtable_ViewId of existing row {1}"' txnViewId' rowViewId); " is 127.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,ConvertToIReplicatedTableEntity,The length of the statement  "                                                    ? new InitDynamicReplicatedTableEntity(tableEntity.PartitionKey' tableEntity.RowKey' tableEntity.ETag' tableEntity.Properties) " is 126.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,ConvertToIReplicatedTableEntity,The length of the statement  "                                                    : new DynamicReplicatedTableEntity(tableEntity.PartitionKey' tableEntity.RowKey' tableEntity.ETag' tableEntity.Properties); " is 123.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,InsertUpdateOrDeleteRow,The length of the statement  "                if (row._rtable_Operation == GetTableOperation(TableOperationType.Delete) || (row._rtable_Tombstone && row._rtable_RowLock == false)) " is 133.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,RepairTable,The length of the statement  "                // Now we are relying on caller to pass the viewIdToRecoverFrom. Instead' we can find the viewIdToRecoverFrom of the old replica  " is 128.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,RepairRowInternal,The length of the statement  "                ReplicatedTableLogger.LogError("RepairRow: unexpected result on the read view head: {0}"' readHeadResult.HttpStatusCode); " is 121.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,RepairRowInternal,The length of the statement  "            bool readHeadLockExpired = (readHeadEntity._rtable_LockAcquisition + this._configurationWrapper.GetLockTimeout() < DateTime.UtcNow); " is 132.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,ConvertXStoreTable,The length of the statement  "                throw new InvalidOperationException("ConvertXStoreTable() API is NOT supported when ReplicatedTable is NOT in ConvertToRTable."); " is 129.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,ConvertXStoreTable,The length of the statement  "                        ReplicatedTableLogger.LogInformational("Skipped XStore entity with Partition={0} Row={1}"' entity.PartitionKey' entity.RowKey); " is 127.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,ConvertXStoreTable,The length of the statement  "                    // _rtable_ViewId = 0 means that the entity has not been operated on since the XStore Table was converted to ReplicatedTable. " is 125.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,ConvertXStoreTable,The length of the statement  "                        ReplicatedTableLogger.LogInformational("Converted XStore entity with Partition={0} Row={1}"' entity.PartitionKey' entity.RowKey); " is 129.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,ConvertXStoreTable,The length of the statement  "            ReplicatedTableLogger.LogInformational("ConvertXStoreTable() finished {0}. Time took to convert = {1}"' endTime' endTime - startTime); " is 134.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,ConvertXStoreTable,The length of the statement  "            ReplicatedTableLogger.LogInformational("successCount={0} skippedCount={1} failedCount={2}"' successCount' skippedCount' failedCount); " is 133.
Long Statement,Microsoft.Azure.Toolkit.Replication,ReplicatedTableConfigurationService,C:\repos\Azure_rtable\library\ReplicatedTableConfigurationService.cs,UpdateConfiguration,The length of the statement  "                 * This is to support multiple clients updating the config' not a high priority scenario but something we should look at. " is 120.
Long Statement,Microsoft.Azure.Toolkit.Replication,StopWatchInternal,C:\repos\Azure_rtable\library\StopWatchInternal.cs,Dispose,The length of the statement  "                    ReplicatedTableLogger.LogVerbose("[Instrumentation] {0}:{1} took {2} ms"' _tableName' _context' _stopWatch.ElapsedMilliseconds); " is 128.
Complex Conditional,Microsoft.Azure.Toolkit.Replication,CloudBlobHelpers,C:\repos\Azure_rtable\library\CloudBlobHelpers.cs,TryReadBlobQuorumFast,The conditional expression  "majority.Code == ReplicatedTableQuorumReadCode.NotFound ||                      majority.Code == ReplicatedTableQuorumReadCode.UpdateInProgress ||                      majority.Code == ReplicatedTableQuorumReadCode.Exception ||                      majority.Code == ReplicatedTableQuorumReadCode.Success"  is complex.
Complex Conditional,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,TransformOp,The conditional expression  "(row._rtable_Operation == GetTableOperation(TableOperationType.Replace))                  ||                  (((row._rtable_Operation == GetTableOperation(TableOperationType.Insert)) ||                  (row._rtable_Operation == GetTableOperation(TableOperationType.InsertOrMerge)) ||                  (row._rtable_Operation == GetTableOperation(TableOperationType.InsertOrReplace)))                  && (phase == COMMIT_PHASE) && (index != tailIndex))"  is complex.
Complex Conditional,Microsoft.Azure.Toolkit.Replication,ReplicatedTableEntity,C:\repos\Azure_rtable\library\ReplicatedTableEntity.cs,Equals,The conditional expression  "(this.PartitionKey != that.PartitionKey) ||                  (this.RowKey != that.RowKey) ||                  (this._rtable_RowLock != that._rtable_RowLock) ||                  (this._rtable_Version != that._rtable_Version) ||                  (this._rtable_Tombstone != that._rtable_Tombstone)"  is complex.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication,ReplicatedTableEventListener,C:\repos\Azure_rtable\library\ReplicatedTableEventListener.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication,InitDynamicReplicatedTableEntity,C:\repos\Azure_rtable\library\DynamicReplicatedTableEntity.cs,ReadEntity,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication,InitDynamicReplicatedTableEntity,C:\repos\Azure_rtable\library\DynamicReplicatedTableEntity.cs,ReadEntity,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication,InitDynamicReplicatedTableEntity,C:\repos\Azure_rtable\library\DynamicReplicatedTableEntity.cs,ReadEntity,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication,InitDynamicReplicatedTableEntity,C:\repos\Azure_rtable\library\DynamicReplicatedTableEntity.cs,ReadEntity,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication,InitDynamicReplicatedTableEntity,C:\repos\Azure_rtable\library\DynamicReplicatedTableEntity.cs,ReadEntity,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication,InitDynamicReplicatedTableEntity,C:\repos\Azure_rtable\library\DynamicReplicatedTableEntity.cs,ReadEntity,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication,InitDynamicReplicatedTableEntity,C:\repos\Azure_rtable\library\DynamicReplicatedTableEntity.cs,ReadEntity,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Toolkit.Replication,PeriodicTimer,C:\repos\Azure_rtable\library\PeriodicTimer.cs,InternalCallback,The method has an empty catch block.
Magic Number,Microsoft.Azure.Toolkit.Replication,CloudBlobHelpers,C:\repos\Azure_rtable\library\CloudBlobHelpers.cs,GetBlockBlob,The following statement contains a magic number: if (container.CreateIfNotExists())              {                  container.SetPermissions(new BlobContainerPermissions() { PublicAccess = BlobContainerPublicAccessType.Off });                  container.FetchAttributes(null' new BlobRequestOptions() { ServerTimeout = new TimeSpan(0' 10' 0) });              }
Magic Number,Microsoft.Azure.Toolkit.Replication,CloudBlobHelpers,C:\repos\Azure_rtable\library\CloudBlobHelpers.cs,FindMajority,The following statement contains a magic number: int quorum = (numberOfBlobs / 2) + 1;
Magic Number,Microsoft.Azure.Toolkit.Replication,CloudBlobHelpers,C:\repos\Azure_rtable\library\CloudBlobHelpers.cs,TryWriteBlobQuorum,The following statement contains a magic number: int quorum = (numberOfBlobs / 2) + 1;
Magic Number,Microsoft.Azure.Toolkit.Replication,ReplicatedTableConfigurationManager,C:\repos\Azure_rtable\library\ReplicatedTableConfigurationManager.cs,Initialize,The following statement contains a magic number: if ((this.blobLocations.Count % 2) == 0)              {                  throw new ArgumentException("Number of blob locations must be odd");              }
Magic Number,Microsoft.Azure.Toolkit.Replication,ReplicatedTableConfigurationManager,C:\repos\Azure_rtable\library\ReplicatedTableConfigurationManager.cs,Initialize,The following statement contains a magic number: int quorumSize = (this.blobLocations.Count / 2) + 1;
Magic Number,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,InsertOrReplace,The following statement contains a magic number: int retryLimit = 10;
Magic Number,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,InsertOrReplace,The following statement contains a magic number: Func<bool> RetryIf = RetryPolicy.RetryWithDelayIf(() => rnd.Next(100' 300)' () => --retryLimit > 0);
Magic Number,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,InsertOrReplace,The following statement contains a magic number: Func<bool> RetryIf = RetryPolicy.RetryWithDelayIf(() => rnd.Next(100' 300)' () => --retryLimit > 0);
Magic Number,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,ValidateAndUnlock,The following statement contains a magic number: if (iter == null || inBatch.Count != results.Count)              {                  result2 = false;              }              else              {                  IEnumerator<TableOperation> enumerator = inBatch.GetEnumerator();                  while (enumerator.MoveNext() && iter.MoveNext())                  {                      TableResult result = iter.Current;                      if (result == null || (result.HttpStatusCode != 201 && result.HttpStatusCode != 204))                      {                          result2 = false;                          return result2;                      }                      if (unlock)                      {                          TableOperation operation = enumerator.Current;                          IReplicatedTableEntity row = (IReplicatedTableEntity)this.GetEntityFromOperation(operation);                          row._rtable_RowLock = false;                          row.ETag = result.Etag;                      }                  }                  result2 = true;              }
Magic Number,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,ValidateAndUnlock,The following statement contains a magic number: if (iter == null || inBatch.Count != results.Count)              {                  result2 = false;              }              else              {                  IEnumerator<TableOperation> enumerator = inBatch.GetEnumerator();                  while (enumerator.MoveNext() && iter.MoveNext())                  {                      TableResult result = iter.Current;                      if (result == null || (result.HttpStatusCode != 201 && result.HttpStatusCode != 204))                      {                          result2 = false;                          return result2;                      }                      if (unlock)                      {                          TableOperation operation = enumerator.Current;                          IReplicatedTableEntity row = (IReplicatedTableEntity)this.GetEntityFromOperation(operation);                          row._rtable_RowLock = false;                          row.ETag = result.Etag;                      }                  }                  result2 = true;              }
Magic Number,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,RunBatchSplit,The following statement contains a magic number: if (batchSize == 0)              {                  result = null;              }              else              {                  IList<TableResult> leftResults;                  if ((leftResults = this.RunBatch(tableClient' batch' unlock' requestOptions' operationContext)) != null)                  {                      this.MergeOperations(batch' outBatch);                      result = leftResults;                  }                  else                  {                      int i = 0;                      while (i < batchSize && enumerator.MoveNext())                      {                          if (i < batchSize / 2)                          {                              leftBatch.Add(enumerator.Current);                          }                          else                          {                              rightBatch.Add(enumerator.Current);                          }                          i++;                      }                      if ((leftResults = this.RunBatch(tableClient' leftBatch' unlock' requestOptions' operationContext)) !=                          null)                      {                          this.MergeOperations(leftBatch' outBatch);                          IList<TableResult> rightResults;                          if (                              (rightResults =                                  this.RunBatch(tableClient' rightBatch' unlock' requestOptions' operationContext)) !=                              null)                          {                              this.MergeOperations(rightBatch' outBatch);                              this.MergeResults(rightResults' leftResults);                          }                          else                          {                              if (                                  (rightResults =                                      this.RunBatchSplit(tableClient' rightBatch' unlock' ref outBatch' requestOptions'                                          operationContext)) != null)                              {                                  this.MergeOperations(rightBatch' outBatch);                                  this.MergeResults(rightResults' leftResults);                              }                              else                              {                                  if (rightBatch.Count > 0)                                  {                                      result = leftResults;                                      return result;                                  }                              }                          }                      }                      else                      {                          if (                              (leftResults =                                  this.RunBatchSplit(tableClient' leftBatch' unlock' ref outBatch' requestOptions'                                      operationContext)) != null)                          {                              this.MergeOperations(leftBatch' outBatch);                              IList<TableResult> rightResults;                              if (                                  (rightResults =                                      this.RunBatch(tableClient' rightBatch' unlock' requestOptions' operationContext)) !=                                  null)                              {                                  this.MergeOperations(rightBatch' outBatch);                                  this.MergeResults(rightResults' leftResults);                              }                              else                              {                                  if (                                      (rightResults =                                          this.RunBatchSplit(tableClient' rightBatch' unlock' ref outBatch' requestOptions'                                              operationContext)) != null)                                  {                                      this.MergeOperations(rightBatch' outBatch);                                      this.MergeResults(rightResults' leftResults);                                  }                                  else                                  {                                      if (rightBatch.Count > 0)                                      {                                          result = leftResults;                                          return result;                                      }                                  }                              }                          }                          else                          {                              if (leftBatch.Count > 0)                              {                                  result = null;                                  return result;                              }                          }                      }                      result = leftResults;                  }              }
Magic Number,Microsoft.Azure.Toolkit.Replication,ReplicatedTableEntity,C:\repos\Azure_rtable\library\ReplicatedTableEntity.cs,ReplicatedTableEntity,The following statement contains a magic number: this._rtable_LockAcquisition = new DateTimeOffset(2000' 1' 1' 0' 0' 0' TimeSpan.FromTicks(0));
Magic Number,Microsoft.Azure.Toolkit.Replication,ReplicatedTableEventSource,C:\repos\Azure_rtable\library\ReplicatedTableEventSource.cs,Warning,The following statement contains a magic number: this.WriteEvent(2' message);
Magic Number,Microsoft.Azure.Toolkit.Replication,ReplicatedTableEventSource,C:\repos\Azure_rtable\library\ReplicatedTableEventSource.cs,Informational,The following statement contains a magic number: this.WriteEvent(3' message);
Magic Number,Microsoft.Azure.Toolkit.Replication,ReplicatedTableEventSource,C:\repos\Azure_rtable\library\ReplicatedTableEventSource.cs,Verbose,The following statement contains a magic number: this.WriteEvent(4' message);
Duplicate Code,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,RunBatchSplit,The method contains a code clone-set at the following line numbers (starting from the method definition): ((36' 68)' (73' 105))
Missing Default,Microsoft.Azure.Toolkit.Replication,ReplicatedTableEtwLogger,C:\repos\Azure_rtable\library\ReplicatedTableEtwLogger.cs,LogMessage,The following switch statement is missing a default case: switch (eventLevel)                  {                      case EventLevel.Error:                          ReplicatedTableEtwLogger.eventSource.Error(string.Format(format' args));                          break;                        case EventLevel.Warning:                          ReplicatedTableEtwLogger.eventSource.Warning(string.Format(format' args));                          break;                        case EventLevel.Informational:                          ReplicatedTableEtwLogger.eventSource.Informational(string.Format(format' args));                          break;                        case EventLevel.Verbose:                          ReplicatedTableEtwLogger.eventSource.Verbose(string.Format(format' args));                          break;                        // ...                  }
Missing Default,Microsoft.Azure.Toolkit.Replication,ReplicatedTableEventListener,C:\repos\Azure_rtable\library\ReplicatedTableEventListener.cs,GetEventTypeFromEventLevel,The following switch statement is missing a default case: switch (eventLevel)              {                  case EventLevel.Error:                      return TraceEventType.Error;                    case EventLevel.Warning:                      return TraceEventType.Warning;                    case EventLevel.Informational:                      return TraceEventType.Information;              }
Missing Default,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,Execute,The following switch statement is missing a default case: switch (opTypeValue)                  {                      /// <summary>                      /// Represents a retrieve operation.                      /// </summary>                      case TableOperationType.Retrieve:                          result = Retrieve(operation' requestOptions' operationContext);                          break;                        /// <summary>                      /// Represents an insert or replace operation.                      /// </summary>                      case TableOperationType.InsertOrReplace:                          result = InsertOrReplace(operation' requestOptions' operationContext);                          break;                        /// <summary>                      /// Represents an insert operation.                      /// </summary>                      case TableOperationType.Insert:                          result = Insert(operation' null' requestOptions' operationContext);                          break;                        /// <summary>                      /// Represents a delete operation.                      /// </summary>                      case TableOperationType.Delete:                          // If there is a write view' then overwrite the currentView with the write view                          result = Delete(operation' requestOptions' operationContext);                          break;                        /// <summary>                      /// Represents a replace operation.                      /// </summary>                      case TableOperationType.Replace:                          // If there is a write view' then overwrite the currentView with the write view                          result = Replace(operation' null' requestOptions' operationContext);                          break;                        /// <summary>                      /// Represents a merge operation.                      /// </summary>                      case TableOperationType.Merge:                          // If there is a write view' then overwrite the currentView with the write view                          result = Merge(operation' null' requestOptions' operationContext);                          break;                        /// <summary>                      /// Represents an insert or merge operation.                      /// </summary>                      case TableOperationType.InsertOrMerge:                          // If there is a write view' then overwrite the currentView with the write view                          result = InsertOrMerge(operation' requestOptions' operationContext);                          break;                    }
Missing Default,Microsoft.Azure.Toolkit.Replication,ReplicatedTable,C:\repos\Azure_rtable\library\ReplicatedTable.cs,GetTableOperation,The following switch statement is missing a default case: switch (tableOperationType)              {                  case TableOperationType.Insert:                      return "Insert";                  case TableOperationType.Delete:                      return "Delete";                  case TableOperationType.Replace:                      return "Replace";                  case TableOperationType.Merge:                      return "Merge";                  case TableOperationType.InsertOrReplace:                      return "InsertOrReplace";                  case TableOperationType.InsertOrMerge:                      return "InsertOrMerge";                  case TableOperationType.Retrieve:                      return "Retrieve";              }
