Implementation smell,Namespace,Class,File,Method,Description
Complex Method,S22.Imap,Bodystructure,C:\repos\smiley22_S22.Imap\Bodystructure\Bodystructure.cs,SkipParenthesizedExpression,Cyclomatic complexity of the method is 8
Complex Method,S22.Imap,MailMessageExtension,C:\repos\smiley22_S22.Imap\MailMessage.cs,BuildHeader,Cyclomatic complexity of the method is 11
Complex Method,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Imap\MessageBuilder.cs,SetAddressFields,Cyclomatic complexity of the method is 13
Complex Method,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Imap\MessageBuilder.cs,ParseMIMEParts,Cyclomatic complexity of the method is 10
Long Parameter List,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,ImapClient,The method has 7 parameters. Parameters: hostname' port' username' password' method' ssl' validate
Long Parameter List,S22.Imap,MailboxInfo,C:\repos\smiley22_S22.Imap\MailboxInfo.cs,MailboxInfo,The method has 7 parameters. Parameters: Name' Flags' Messages' Unread' NextUID' UsedStorage' FreeStorage
Long Parameter List,S22.Imap.Auth.Sasl.Mechanisms,SaslDigestMd5,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\SaslDigestMd5.cs,ComputeDigestResponseValue,The method has 5 parameters. Parameters: challenge' cnonce' digestUri' username' password
Long Parameter List,S22.Imap.Auth.Sasl.Mechanisms.Srp,Helper,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Srp\Helper.cs,ComputeSharedKey,The method has 9 parameters. Parameters: salt' username' password' clientPublicKey' serverPublicKey' clientPrivateKey' generator' safePrimeModulus' hashAlgorithm
Long Parameter List,S22.Imap.Auth.Sasl.Mechanisms.Srp,Helper,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Srp\Helper.cs,ComputeClientProof,The method has 10 parameters. Parameters: safePrimeModulus' generator' username' salt' clientPublicKey' serverPublicKey' sharedKey' authId' options' hashAlgorithm
Long Parameter List,S22.Imap.Auth.Sasl.Mechanisms.Srp,Helper,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Srp\Helper.cs,ComputeServerProof,The method has 8 parameters. Parameters: clientPublicKey' clientProof' sharedKey' authId' options' sid' ttl' hashAlgorithm
Long Parameter List,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Round1Operation,The method has 6 parameters. Parameters: a' b' c' d' xk' s
Long Parameter List,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Round2Operation,The method has 6 parameters. Parameters: a' b' c' d' xk' s
Long Parameter List,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Round3Operation,The method has 6 parameters. Parameters: a' b' c' d' xk' s
Long Parameter List,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,ComputeNtlmv2Response,The method has 6 parameters. Parameters: target' username' password' targetInformation' challenge' clientNonce
Long Parameter List,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,ComputeLMv2Response,The method has 5 parameters. Parameters: target' username' password' challenge' clientNonce
Long Parameter List,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Type3Message,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Type3Message.cs,Type3Message,The method has 7 parameters. Parameters: username' password' challenge' workstation' ntlmv2' targetName' targetInformation
Long Parameter List,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Type3Message,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Type3Message.cs,Type3Message,The method has 8 parameters. Parameters: username' password' challenge' useUnicode' workstation' ntlmv2' targetName' targetInformation
Complex Conditional,S22.Imap,MailMessageExtension,C:\repos\smiley22_S22.Imap\MailMessage.cs,QEncode,The conditional expression  "c < 32 || c == '=' || c == '_' || c == '?' || c > 126"  is complex.
Complex Conditional,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Imap\MessageBuilder.cs,StripComments,The conditional expression  "!inQuotes && !escape && c == ')' && depth > 0"  is complex.
Complex Conditional,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Imap\MessageBuilder.cs,AddBodypart,The conditional expression  "part.Disposition.Type == ContentDispositionType.Attachment ||  				(part.Disposition.Type == ContentDispositionType.Unknown &&  				preferAlternative == false && hasName)"  is complex.
Empty Catch Block,S22.Imap,Bodystructure,C:\repos\smiley22_S22.Imap\Bodystructure\Bodystructure.cs,ParseBodypart,The method has an empty catch block.
Empty Catch Block,S22.Imap,Reader,C:\repos\smiley22_S22.Imap\Bodystructure\Reader.cs,Peek,The method has an empty catch block.
Empty Catch Block,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,AuthAuto,The method has an empty catch block.
Empty Catch Block,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,ListMailboxes,The method has an empty catch block.
Empty Catch Block,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,Search,The method has an empty catch block.
Empty Catch Block,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,IdleLoop,The method has an empty catch block.
Empty Catch Block,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,EventDispatcher,The method has an empty catch block.
Empty Catch Block,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Imap\MessageBuilder.cs,FromHeader,The method has an empty catch block.
Empty Catch Block,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Imap\MessageBuilder.cs,ParseMIMEField,The method has an empty catch block.
Empty Catch Block,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Imap\MessageBuilder.cs,ParseAddressList,The method has an empty catch block.
Empty Catch Block,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Imap\MessageBuilder.cs,CreateAttachment,The method has an empty catch block.
Empty Catch Block,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Imap\MessageBuilder.cs,CreateAlternateView,The method has an empty catch block.
Magic Number,S22.Imap,Bodystructure,C:\repos\smiley22_S22.Imap\Bodystructure\Bodystructure.cs,SkipParenthesizedExpression,The following statement contains a magic number: char[] last = new char[3];
Magic Number,S22.Imap,Bodystructure,C:\repos\smiley22_S22.Imap\Bodystructure\Bodystructure.cs,SkipParenthesizedExpression,The following statement contains a magic number: while ((c = (char)reader.Read()) != '(') {  				last[0] = last[1];  				last[1] = last[2];  				last[2] = c;  				if ((new string(last)) == "NIL")  					return;  			}
Magic Number,S22.Imap,Bodystructure,C:\repos\smiley22_S22.Imap\Bodystructure\Bodystructure.cs,SkipParenthesizedExpression,The following statement contains a magic number: while ((c = (char)reader.Read()) != '(') {  				last[0] = last[1];  				last[1] = last[2];  				last[2] = c;  				if ((new string(last)) == "NIL")  					return;  			}
Magic Number,S22.Imap,Reader,C:\repos\smiley22_S22.Imap\Bodystructure\Reader.cs,ReadWord,The following statement contains a magic number: char[] last = new char[3];
Magic Number,S22.Imap,Reader,C:\repos\smiley22_S22.Imap\Bodystructure\Reader.cs,ReadWord,The following statement contains a magic number: while ((c = (char)Read()) != '"') {  				last[0] = last[1];  				last[1] = last[2];  				last[2] = c;  				if ((new string(last)) == "NIL")  					return "";  			}
Magic Number,S22.Imap,Reader,C:\repos\smiley22_S22.Imap\Bodystructure\Reader.cs,ReadWord,The following statement contains a magic number: while ((c = (char)Read()) != '"') {  				last[0] = last[1];  				last[1] = last[2];  				last[2] = c;  				if ((new string(last)) == "NIL")  					return "";  			}
Magic Number,S22.Imap,Reader,C:\repos\smiley22_S22.Imap\Bodystructure\Reader.cs,ReadList,The following statement contains a magic number: char[] last = new char[3];
Magic Number,S22.Imap,Reader,C:\repos\smiley22_S22.Imap\Bodystructure\Reader.cs,ReadList,The following statement contains a magic number: while ((c = (char)Read()) != '(') {  				last[0] = last[1];  				last[1] = last[2];  				last[2] = c;  				if ((new string(last)) == "NIL")  					return Dict;  			}
Magic Number,S22.Imap,Reader,C:\repos\smiley22_S22.Imap\Bodystructure\Reader.cs,ReadList,The following statement contains a magic number: while ((c = (char)Read()) != '(') {  				last[0] = last[1];  				last[1] = last[2];  				last[2] = c;  				if ((new string(last)) == "NIL")  					return Dict;  			}
Magic Number,S22.Imap,Reader,C:\repos\smiley22_S22.Imap\Bodystructure\Reader.cs,ReadList,The following statement contains a magic number: foreach (Match m in matches)  				Dict.Add(m.Groups[1].Value' m.Groups[2].Value);
Magic Number,S22.Imap,Reader,C:\repos\smiley22_S22.Imap\Bodystructure\Reader.cs,ReadDisposition,The following statement contains a magic number: char[] last = new char[3];
Magic Number,S22.Imap,Reader,C:\repos\smiley22_S22.Imap\Bodystructure\Reader.cs,ReadDisposition,The following statement contains a magic number: while ((c = (char)Read()) != '(') {  				last[0] = last[1];  				last[1] = last[2];  				last[2] = c;  				if ((new string(last)) == "NIL")  					return Disp;  			}
Magic Number,S22.Imap,Reader,C:\repos\smiley22_S22.Imap\Bodystructure\Reader.cs,ReadDisposition,The following statement contains a magic number: while ((c = (char)Read()) != '(') {  				last[0] = last[1];  				last[1] = last[2];  				last[2] = c;  				if ((new string(last)) == "NIL")  					return Disp;  			}
Magic Number,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,Login,The following statement contains a magic number: if (response.StartsWith("* CAPABILITY")) {  				capabilities = response.Substring(13).Trim().Split(' ')  					.Select(s => s.ToUpperInvariant()).ToArray();  				response = GetResponse();  			}
Magic Number,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,GetResponse,The following statement contains a magic number: const int Newline = 10' CarriageReturn = 13;
Magic Number,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,GetResponse,The following statement contains a magic number: const int Newline = 10' CarriageReturn = 13;
Magic Number,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,GetData,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,Capabilities,The following statement contains a magic number: lock (sequenceLock) {  				if(Authed)  					PauseIdling();  				string tag = GetTag();  				string command = tag + "CAPABILITY";  				string response = SendCommandGetResponse(command);  				while (response.StartsWith("*")) {  					// The server is required to issue an untagged capability response.  					if (response.StartsWith("* CAPABILITY ")) {  						capabilities = response.Substring(13).Trim().Split(' ')  							.Select(s => s.ToUpperInvariant()).ToArray();  					}  					response = GetResponse();  				}  				if(Authed)  					ResumeIdling();  				if (!IsResponseOK(response' tag))  					throw new BadServerResponseException(response);  				return capabilities;  			}
Magic Number,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,ListMailboxes,The following statement contains a magic number: lock (sequenceLock) {  				PauseIdling();  				List<string> mailboxes = new List<string>();  				string tag = GetTag();  				string response = SendCommandGetResponse(tag + "LIST \"\" \"*\"");  				while (response.StartsWith("*")) {  					Match m = Regex.Match(response' "\\* LIST \\((.*)\\)\\s+\"([^\"]+)\"\\s+(.+)");  					if (m.Success) {  						string[] attr = m.Groups[1].Value.Split(' ');  						bool add = true;  						foreach (string a in attr) {  							// Only list mailboxes that can actually be selected.  							if (a.ToLower() == @"\noselect")  								add = false;  						}  						// Names _should_ be enclosed in double-quotes but not all servers follow through with  						// this' so we don't enforce it in the above regex.  						string name = Regex.Replace(m.Groups[3].Value' "^\"(.+)\"$"' "$1");  						try {  							name = Util.UTF7Decode(name);  						} catch {  							// Include the unaltered string in the result if UTF-7 decoding failed for any reason.  						}  						if (add)  							mailboxes.Add(name);  					}  					response = GetResponse();  				}  				ResumeIdling();  				if (!IsResponseOK(response' tag))  					throw new BadServerResponseException(response);  				return mailboxes;  			}
Magic Number,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,StartIdling,The following statement contains a magic number: noopTimer.Interval = 1000 * 60 * 10;
Magic Number,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,StartIdling,The following statement contains a magic number: noopTimer.Interval = 1000 * 60 * 10;
Magic Number,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,StartIdling,The following statement contains a magic number: noopTimer.Interval = 1000 * 60 * 10;
Magic Number,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,IdleLoop,The following statement contains a magic number: while (true) {  				try {  					string response = GetResponse();  					// A request was made to stop idling so quit the thread.  					if (response.Contains("OK IDLE"' StringComparison.InvariantCultureIgnoreCase))  						return;  					// Let the dispatcher thread take care of the IDLE notification so we can go back to  					// receiving responses.  					idleEvents.Enqueue(response);  				} catch (IOException e) {  					// Closing _Stream or the underlying _Connection instance will cause a  					// WSACancelBlockingCall exception on a blocking socket. This is not an error so just let  					// it pass.  					if (e.InnerException is SocketException) {  						// WSAEINTR = 10004  						if (((SocketException)e.InnerException).ErrorCode == 10004)  							return;  					}  					// If the IO exception was raised because of an underlying ThreadAbortException' we can  					// ignore it.  					if (e.InnerException is ThreadAbortException)  						return;  					// Otherwise shutdown and raise the IdleError event to let the user know something  					// went wrong.  					idleThread = null;  					idling = false;  					noopTimer.Stop();  					try {  						IdleError.Raise(this' new IdleErrorEventArgs(e' this));  					} catch {  					}  					return;  				}  			}
Magic Number,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,EventDispatcher,The following statement contains a magic number: while (true) {  				string response = idleEvents.Dequeue();  				Match m = Regex.Match(response' @"\*\s+(\d+)\s+(\w+)");  				if (!m.Success)  					continue;  				try {  					uint numberOfMessages = Convert.ToUInt32(m.Groups[1].Value)'  						uid = GetHighestUID();  					switch (m.Groups[2].Value.ToUpper()) {  						case "EXISTS":  							if (lastUid != uid) {  								newMessageEvent.Raise(this'  									new IdleMessageEventArgs(numberOfMessages' uid' this));  							}  							break;  						case "EXPUNGE":  							messageDeleteEvent.Raise(  								this' new IdleMessageEventArgs(numberOfMessages' uid' this));  							break;  					}  					lastUid = uid;  				} catch {  					// Fall through.  				}  			}
Magic Number,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,GetQuota,The following statement contains a magic number: lock (sequenceLock) {  				PauseIdling();  				if (mailbox == null)  					mailbox = DefaultMailbox;  				List<MailboxQuota> quotas = new List<MailboxQuota>();  				string tag = GetTag();  				string response = SendCommandGetResponse(tag + "GETQUOTAROOT " +  					Util.UTF7Encode(mailbox).QuoteString());  				while (response.StartsWith("*")) {  					Match m = Regex.Match(response' "\\* QUOTA \"(\\w*)\" \\((\\w+)\\s+(\\d+)\\s+(\\d+)\\)");  					if (m.Success) {  						try {  							MailboxQuota quota = new MailboxQuota(m.Groups[2].Value'  								UInt32.Parse(m.Groups[3].Value)'  								UInt32.Parse(m.Groups[4].Value));  							quotas.Add(quota);  						} catch {  							throw new BadServerResponseException(response);  						}  					}  					response = GetResponse();  				}  				ResumeIdling();  				if (!IsResponseOK(response' tag))  					throw new BadServerResponseException(response);  				return quotas;  			}
Magic Number,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,GetQuota,The following statement contains a magic number: lock (sequenceLock) {  				PauseIdling();  				if (mailbox == null)  					mailbox = DefaultMailbox;  				List<MailboxQuota> quotas = new List<MailboxQuota>();  				string tag = GetTag();  				string response = SendCommandGetResponse(tag + "GETQUOTAROOT " +  					Util.UTF7Encode(mailbox).QuoteString());  				while (response.StartsWith("*")) {  					Match m = Regex.Match(response' "\\* QUOTA \"(\\w*)\" \\((\\w+)\\s+(\\d+)\\s+(\\d+)\\)");  					if (m.Success) {  						try {  							MailboxQuota quota = new MailboxQuota(m.Groups[2].Value'  								UInt32.Parse(m.Groups[3].Value)'  								UInt32.Parse(m.Groups[4].Value));  							quotas.Add(quota);  						} catch {  							throw new BadServerResponseException(response);  						}  					}  					response = GetResponse();  				}  				ResumeIdling();  				if (!IsResponseOK(response' tag))  					throw new BadServerResponseException(response);  				return quotas;  			}
Magic Number,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,GetQuota,The following statement contains a magic number: lock (sequenceLock) {  				PauseIdling();  				if (mailbox == null)  					mailbox = DefaultMailbox;  				List<MailboxQuota> quotas = new List<MailboxQuota>();  				string tag = GetTag();  				string response = SendCommandGetResponse(tag + "GETQUOTAROOT " +  					Util.UTF7Encode(mailbox).QuoteString());  				while (response.StartsWith("*")) {  					Match m = Regex.Match(response' "\\* QUOTA \"(\\w*)\" \\((\\w+)\\s+(\\d+)\\s+(\\d+)\\)");  					if (m.Success) {  						try {  							MailboxQuota quota = new MailboxQuota(m.Groups[2].Value'  								UInt32.Parse(m.Groups[3].Value)'  								UInt32.Parse(m.Groups[4].Value));  							quotas.Add(quota);  						} catch {  							throw new BadServerResponseException(response);  						}  					}  					response = GetResponse();  				}  				ResumeIdling();  				if (!IsResponseOK(response' tag))  					throw new BadServerResponseException(response);  				return quotas;  			}
Magic Number,S22.Imap,MailboxQuota,C:\repos\smiley22_S22.Imap\MailboxQuota.cs,MailboxQuota,The following statement contains a magic number: this.Usage = Convert.ToUInt64(Usage) * 1024;
Magic Number,S22.Imap,MailboxQuota,C:\repos\smiley22_S22.Imap\MailboxQuota.cs,MailboxQuota,The following statement contains a magic number: this.Limit = Convert.ToUInt64(Limit) * 1024;
Magic Number,S22.Imap,MailMessageExtension,C:\repos\smiley22_S22.Imap\MailMessage.cs,QEncode,The following statement contains a magic number: foreach (char c in chars) {  				if (c < 32 || c == '=' || c == '_' || c == '?' || c > 126)  					builder.Append(string.Format("={0:X2}"' (int)c));  				else if (c == ' ')  					builder.Append('_');  				else  					builder.Append(c);  			}
Magic Number,S22.Imap,MailMessageExtension,C:\repos\smiley22_S22.Imap\MailMessage.cs,QEncode,The following statement contains a magic number: foreach (char c in chars) {  				if (c < 32 || c == '=' || c == '_' || c == '?' || c > 126)  					builder.Append(string.Format("={0:X2}"' (int)c));  				else if (c == ' ')  					builder.Append('_');  				else  					builder.Append(c);  			}
Magic Number,S22.Imap,MailMessageExtension,C:\repos\smiley22_S22.Imap\MailMessage.cs,AddBody,The following statement contains a magic number: char[] line = new char[76];
Magic Number,S22.Imap,MailMessageExtension,C:\repos\smiley22_S22.Imap\MailMessage.cs,AddAttachment,The following statement contains a magic number: using (MemoryStream memstream = new MemoryStream()) {  				int bytesRead;  				byte[] buffer = new byte[4096];  				while ((bytesRead =  					view.ContentStream.Read(buffer' 0' buffer.Length)) > 0) {  					memstream.Write(buffer' 0' bytesRead);  				}  				string str = Convert.ToBase64String(memstream.ToArray());  				StringReader reader = new StringReader(str);  				char[] line = new char[76];  				int read;  				while ((read = reader.Read(line' 0' line.Length)) > 0)  					builder.AppendLine(new string(line' 0' read));  			}
Magic Number,S22.Imap,MailMessageExtension,C:\repos\smiley22_S22.Imap\MailMessage.cs,AddAttachment,The following statement contains a magic number: using (MemoryStream memstream = new MemoryStream()) {  				int bytesRead;  				byte[] buffer = new byte[4096];  				while ((bytesRead =  					view.ContentStream.Read(buffer' 0' buffer.Length)) > 0) {  					memstream.Write(buffer' 0' bytesRead);  				}  				string str = Convert.ToBase64String(memstream.ToArray());  				StringReader reader = new StringReader(str);  				char[] line = new char[76];  				int read;  				while ((read = reader.Read(line' 0' line.Length)) > 0)  					builder.AppendLine(new string(line' 0' read));  			}
Magic Number,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Imap\MessageBuilder.cs,ParseMIMEField,The following statement contains a magic number: try {  				// This accounts for MIME Parameter Value Extensions (RFC2231).  				MatchCollection matches = Regex.Matches(field'  					@"([\w\-]+)(?:\*\d{1'3})?(\*?)?\s*=\s*([^;]+)");  				foreach (Match m in matches) {  					string pname = m.Groups[1].Value.Trim()' pval = m.Groups[3].Value.Trim('"');  					coll[pname] = coll[pname] + pval;  					if (m.Groups[2].Value == "*")  						fixup.Add(pname);  				}  				foreach (var pname in fixup) {  					try {  						coll[pname] = Util.Rfc2231Decode(coll[pname]);  					} catch (FormatException) {  						// If decoding fails' we should at least return the un-altered value.  					}  				}  				Match mvalue = Regex.Match(field' @"^\s*([^;]+)");  				coll.Add("value"' mvalue.Success ? mvalue.Groups[1].Value.Trim() : "");  			} catch {  				// We don't want this to blow up on the user with weird mails.  				coll.Add("value"' String.Empty);  			}
Magic Number,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Imap\MessageBuilder.cs,ParseMIMEField,The following statement contains a magic number: try {  				// This accounts for MIME Parameter Value Extensions (RFC2231).  				MatchCollection matches = Regex.Matches(field'  					@"([\w\-]+)(?:\*\d{1'3})?(\*?)?\s*=\s*([^;]+)");  				foreach (Match m in matches) {  					string pname = m.Groups[1].Value.Trim()' pval = m.Groups[3].Value.Trim('"');  					coll[pname] = coll[pname] + pval;  					if (m.Groups[2].Value == "*")  						fixup.Add(pname);  				}  				foreach (var pname in fixup) {  					try {  						coll[pname] = Util.Rfc2231Decode(coll[pname]);  					} catch (FormatException) {  						// If decoding fails' we should at least return the un-altered value.  					}  				}  				Match mvalue = Regex.Match(field' @"^\s*([^;]+)");  				coll.Add("value"' mvalue.Success ? mvalue.Groups[1].Value.Trim() : "");  			} catch {  				// We don't want this to blow up on the user with weird mails.  				coll.Add("value"' String.Empty);  			}
Magic Number,S22.Imap,MessageBuilder,C:\repos\smiley22_S22.Imap\MessageBuilder.cs,BodypartFromMIME,The following statement contains a magic number: if (m.Success) {  				p.Type = ContentTypeMap.fromString(m.Groups[1].Value);  				p.Subtype = m.Groups[2].Value;  			}
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Imap\Util.cs,IsASCII,The following statement contains a magic number: return s.All(c => c < 127);
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Imap\Util.cs,ReadUInt16,The following statement contains a magic number: ret |= (reader.ReadByte() << 8);
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Imap\Util.cs,DecodeWord,The following statement contains a magic number: string type = m.Groups[2].Value.ToUpper();
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Imap\Util.cs,DecodeWord,The following statement contains a magic number: string text = m.Groups[3].Value;
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Imap\Util.cs,QDecode,The following statement contains a magic number: try {  				using (MemoryStream m = new MemoryStream()) {  					for (int i = 0; i < value.Length; i++) {  						if (value[i] == '=') {  							string hex = value.Substring(i + 1' 2);  							m.WriteByte(Convert.ToByte(hex' 16));  							i = i + 2;  						} else if (value[i] == '_') {  							m.WriteByte(Convert.ToByte(' '));  						} else {  							m.WriteByte(Convert.ToByte(value[i]));  						}  					}  					return encoding.GetString(m.ToArray());  				}  			} catch {  				throw new FormatException("value is not a valid Q-encoded string.");  			}
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Imap\Util.cs,QDecode,The following statement contains a magic number: try {  				using (MemoryStream m = new MemoryStream()) {  					for (int i = 0; i < value.Length; i++) {  						if (value[i] == '=') {  							string hex = value.Substring(i + 1' 2);  							m.WriteByte(Convert.ToByte(hex' 16));  							i = i + 2;  						} else if (value[i] == '_') {  							m.WriteByte(Convert.ToByte(' '));  						} else {  							m.WriteByte(Convert.ToByte(value[i]));  						}  					}  					return encoding.GetString(m.ToArray());  				}  			} catch {  				throw new FormatException("value is not a valid Q-encoded string.");  			}
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Imap\Util.cs,QDecode,The following statement contains a magic number: try {  				using (MemoryStream m = new MemoryStream()) {  					for (int i = 0; i < value.Length; i++) {  						if (value[i] == '=') {  							string hex = value.Substring(i + 1' 2);  							m.WriteByte(Convert.ToByte(hex' 16));  							i = i + 2;  						} else if (value[i] == '_') {  							m.WriteByte(Convert.ToByte(' '));  						} else {  							m.WriteByte(Convert.ToByte(value[i]));  						}  					}  					return encoding.GetString(m.ToArray());  				}  			} catch {  				throw new FormatException("value is not a valid Q-encoded string.");  			}
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Imap\Util.cs,QPDecode,The following statement contains a magic number: try {  				using (MemoryStream m = new MemoryStream()) {  					for (int i = 0; i < value.Length; i++) {  						if (value[i] == '=') {  							string hex = value.Substring(i + 1' 2);  							// Deal with soft line breaks.  							if(hex != "\r\n")  								m.WriteByte(Convert.ToByte(hex' 16));  							i = i + 2;  						} else {  							m.WriteByte(Convert.ToByte(value[i]));  						}  					}  					return encoding.GetString(m.ToArray());  				}  			} catch {  				throw new FormatException("The value is not a valid quoted-printable encoded string.");  			}
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Imap\Util.cs,QPDecode,The following statement contains a magic number: try {  				using (MemoryStream m = new MemoryStream()) {  					for (int i = 0; i < value.Length; i++) {  						if (value[i] == '=') {  							string hex = value.Substring(i + 1' 2);  							// Deal with soft line breaks.  							if(hex != "\r\n")  								m.WriteByte(Convert.ToByte(hex' 16));  							i = i + 2;  						} else {  							m.WriteByte(Convert.ToByte(value[i]));  						}  					}  					return encoding.GetString(m.ToArray());  				}  			} catch {  				throw new FormatException("The value is not a valid quoted-printable encoded string.");  			}
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Imap\Util.cs,QPDecode,The following statement contains a magic number: try {  				using (MemoryStream m = new MemoryStream()) {  					for (int i = 0; i < value.Length; i++) {  						if (value[i] == '=') {  							string hex = value.Substring(i + 1' 2);  							// Deal with soft line breaks.  							if(hex != "\r\n")  								m.WriteByte(Convert.ToByte(hex' 16));  							i = i + 2;  						} else {  							m.WriteByte(Convert.ToByte(value[i]));  						}  					}  					return encoding.GetString(m.ToArray());  				}  			} catch {  				throw new FormatException("The value is not a valid quoted-printable encoded string.");  			}
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Imap\Util.cs,Rfc2231Decode,The following statement contains a magic number: string charset = m.Groups[1].Value' text = m.Groups[2].Value;
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Imap\Util.cs,Rfc2231Decode,The following statement contains a magic number: try {  				Encoding enc = Encoding.GetEncoding(charset);  				using (MemoryStream ms = new MemoryStream()) {  					for (int i = 0; i < text.Length; i++) {  						if (text[i] == '%') {  							string hex = text.Substring(i + 1' 2);  							ms.WriteByte(Convert.ToByte(hex' 16));  							i = i + 2;  						} else  							ms.WriteByte(Convert.ToByte(text[i]));  					}  					return enc.GetString(ms.ToArray());  				}  			} catch {  				throw new FormatException("The value is not a valid RFC2231-encoded string.");  			}
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Imap\Util.cs,Rfc2231Decode,The following statement contains a magic number: try {  				Encoding enc = Encoding.GetEncoding(charset);  				using (MemoryStream ms = new MemoryStream()) {  					for (int i = 0; i < text.Length; i++) {  						if (text[i] == '%') {  							string hex = text.Substring(i + 1' 2);  							ms.WriteByte(Convert.ToByte(hex' 16));  							i = i + 2;  						} else  							ms.WriteByte(Convert.ToByte(text[i]));  					}  					return enc.GetString(ms.ToArray());  				}  			} catch {  				throw new FormatException("The value is not a valid RFC2231-encoded string.");  			}
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Imap\Util.cs,Rfc2231Decode,The following statement contains a magic number: try {  				Encoding enc = Encoding.GetEncoding(charset);  				using (MemoryStream ms = new MemoryStream()) {  					for (int i = 0; i < text.Length; i++) {  						if (text[i] == '%') {  							string hex = text.Substring(i + 1' 2);  							ms.WriteByte(Convert.ToByte(hex' 16));  							i = i + 2;  						} else  							ms.WriteByte(Convert.ToByte(text[i]));  					}  					return enc.GetString(ms.ToArray());  				}  			} catch {  				throw new FormatException("The value is not a valid RFC2231-encoded string.");  			}
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Imap\Util.cs,UTF7Decode,The following statement contains a magic number: while (reader.Peek() != -1) {  				char c = (char)reader.Read();  				if (c == '&' && reader.Peek() != '-') {  					// The character sequence needs to be decoded.  					StringBuilder sequence = new StringBuilder();  					while (reader.Peek() != -1) {  						if ((c = (char)reader.Read()) == '-')  							break;  						sequence.Append(c);  					}  					string encoded = sequence.ToString().Replace('''' '/');  					int pad = encoded.Length % 4;  					if (pad > 0)  						encoded = encoded.PadRight(encoded.Length + (4 - pad)' '=');  					try {  						byte[] buffer = Convert.FromBase64String(encoded);  						builder.Append(Encoding.BigEndianUnicode.GetString(buffer));  					} catch (Exception e) {  						throw new FormatException(  							"The input string is not in the correct Format."' e);  					}  				} else {  					if (c == '&' && reader.Peek() == '-')  						reader.Read();  					builder.Append(c);  				}  			}
Magic Number,S22.Imap,Util,C:\repos\smiley22_S22.Imap\Util.cs,UTF7Decode,The following statement contains a magic number: while (reader.Peek() != -1) {  				char c = (char)reader.Read();  				if (c == '&' && reader.Peek() != '-') {  					// The character sequence needs to be decoded.  					StringBuilder sequence = new StringBuilder();  					while (reader.Peek() != -1) {  						if ((c = (char)reader.Read()) == '-')  							break;  						sequence.Append(c);  					}  					string encoded = sequence.ToString().Replace('''' '/');  					int pad = encoded.Length % 4;  					if (pad > 0)  						encoded = encoded.PadRight(encoded.Length + (4 - pad)' '=');  					try {  						byte[] buffer = Convert.FromBase64String(encoded);  						builder.Append(Encoding.BigEndianUnicode.GetString(buffer));  					} catch (Exception e) {  						throw new FormatException(  							"The input string is not in the correct Format."' e);  					}  				} else {  					if (c == '&' && reader.Peek() == '-')  						reader.Read();  					builder.Append(c);  				}  			}
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: if ((position + 4) >= buffer.Length)  				Resize();
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[4] { 3' 2' 1' 0 } :  				new int[4] { 0' 1' 2' 3 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[4] { 3' 2' 1' 0 } :  				new int[4] { 0' 1' 2' 3 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[4] { 3' 2' 1' 0 } :  				new int[4] { 0' 1' 2' 3 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[4] { 3' 2' 1' 0 } :  				new int[4] { 0' 1' 2' 3 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[4] { 3' 2' 1' 0 } :  				new int[4] { 0' 1' 2' 3 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[4] { 3' 2' 1' 0 } :  				new int[4] { 0' 1' 2' 3 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: for (int i = 0; i < 4; i++)  				buffer[position++] = (byte) ((value >> (o[i] * 8)) & 0xFF);
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: for (int i = 0; i < 4; i++)  				buffer[position++] = (byte) ((value >> (o[i] * 8)) & 0xFF);
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: if ((position + 2) >= buffer.Length)  				Resize();
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[2] { 1' 0 } :  				new int[2] { 0' 1 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[2] { 1' 0 } :  				new int[2] { 0' 1 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: for (int i = 0; i < 2; i++)  				buffer[position++] = (byte) ((value >> (o[i] * 8)) & 0xFF);
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: for (int i = 0; i < 2; i++)  				buffer[position++] = (byte) ((value >> (o[i] * 8)) & 0xFF);
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: if ((position + 2) >= buffer.Length)  				Resize();
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[2] { 1' 0 } :  				new int[2] { 0' 1 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[2] { 1' 0 } :  				new int[2] { 0' 1 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: for (int i = 0; i < 2; i++)  				buffer[position++] = (byte) ((value >> (o[i] * 8)) & 0xFF);
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: for (int i = 0; i < 2; i++)  				buffer[position++] = (byte) ((value >> (o[i] * 8)) & 0xFF);
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: if ((position + 4) >= buffer.Length)  				Resize();
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[4] { 3' 2' 1' 0 } :  				new int[4] { 0' 1' 2' 3 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[4] { 3' 2' 1' 0 } :  				new int[4] { 0' 1' 2' 3 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[4] { 3' 2' 1' 0 } :  				new int[4] { 0' 1' 2' 3 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[4] { 3' 2' 1' 0 } :  				new int[4] { 0' 1' 2' 3 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[4] { 3' 2' 1' 0 } :  				new int[4] { 0' 1' 2' 3 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[4] { 3' 2' 1' 0 } :  				new int[4] { 0' 1' 2' 3 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: for (int i = 0; i < 4; i++)  				buffer[position++] = (byte) ((value >> (o[i] * 8)) & 0xFF);
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: for (int i = 0; i < 4; i++)  				buffer[position++] = (byte) ((value >> (o[i] * 8)) & 0xFF);
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: if ((position + 8) >= buffer.Length)  				Resize();
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[8] { 7' 6' 5' 4' 3' 2' 1' 0 } :  				new int[8] { 0' 1' 2' 3' 4' 5' 6' 7 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[8] { 7' 6' 5' 4' 3' 2' 1' 0 } :  				new int[8] { 0' 1' 2' 3' 4' 5' 6' 7 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[8] { 7' 6' 5' 4' 3' 2' 1' 0 } :  				new int[8] { 0' 1' 2' 3' 4' 5' 6' 7 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[8] { 7' 6' 5' 4' 3' 2' 1' 0 } :  				new int[8] { 0' 1' 2' 3' 4' 5' 6' 7 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[8] { 7' 6' 5' 4' 3' 2' 1' 0 } :  				new int[8] { 0' 1' 2' 3' 4' 5' 6' 7 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[8] { 7' 6' 5' 4' 3' 2' 1' 0 } :  				new int[8] { 0' 1' 2' 3' 4' 5' 6' 7 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[8] { 7' 6' 5' 4' 3' 2' 1' 0 } :  				new int[8] { 0' 1' 2' 3' 4' 5' 6' 7 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[8] { 7' 6' 5' 4' 3' 2' 1' 0 } :  				new int[8] { 0' 1' 2' 3' 4' 5' 6' 7 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[8] { 7' 6' 5' 4' 3' 2' 1' 0 } :  				new int[8] { 0' 1' 2' 3' 4' 5' 6' 7 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[8] { 7' 6' 5' 4' 3' 2' 1' 0 } :  				new int[8] { 0' 1' 2' 3' 4' 5' 6' 7 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[8] { 7' 6' 5' 4' 3' 2' 1' 0 } :  				new int[8] { 0' 1' 2' 3' 4' 5' 6' 7 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[8] { 7' 6' 5' 4' 3' 2' 1' 0 } :  				new int[8] { 0' 1' 2' 3' 4' 5' 6' 7 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[8] { 7' 6' 5' 4' 3' 2' 1' 0 } :  				new int[8] { 0' 1' 2' 3' 4' 5' 6' 7 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: int[] o = bigEndian ? new int[8] { 7' 6' 5' 4' 3' 2' 1' 0 } :  				new int[8] { 0' 1' 2' 3' 4' 5' 6' 7 };
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: for (int i = 0; i < 8; i++)  				buffer[position++] = (byte) ((value >> (o[i] * 8)) & 0xFF);
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Append,The following statement contains a magic number: for (int i = 0; i < 8; i++)  				buffer[position++] = (byte) ((value >> (o[i] * 8)) & 0xFF);
Magic Number,S22.Imap.Auth,ByteBuilder,C:\repos\smiley22_S22.Imap\Auth\ByteBuilder.cs,Clear,The following statement contains a magic number: buffer = new byte[1024];
Magic Number,S22.Imap.Auth,FilterStream,C:\repos\smiley22_S22.Imap\Auth\FilterStream.cs,ReadHandshake,The following statement contains a magic number: int read = Math.Min(count' 5 - handshakeData.Length);
Magic Number,S22.Imap.Auth,FilterStream,C:\repos\smiley22_S22.Imap\Auth\FilterStream.cs,ReadHandshake,The following statement contains a magic number: if (handshakeData.Length == 5) {  				// We're now expecting the payload data.  				state = FilterStreamState.ReadingPayload;    				handshake = Handshake.Deserialize(handshakeData.ToArray());  				handshakeData.Clear();  				// Append rest of buffer to payloadData.  				payloadData.Append(buffer' offset + read' count - read);  				return true;  			}
Magic Number,S22.Imap.Auth,FilterStream,C:\repos\smiley22_S22.Imap\Auth\FilterStream.cs,ReadLine,The following statement contains a magic number: const int Newline = 10' CarriageReturn = 13;
Magic Number,S22.Imap.Auth,FilterStream,C:\repos\smiley22_S22.Imap\Auth\FilterStream.cs,ReadLine,The following statement contains a magic number: const int Newline = 10' CarriageReturn = 13;
Magic Number,S22.Imap.Auth,FilterStream,C:\repos\smiley22_S22.Imap\Auth\FilterStream.cs,ReadLiteral,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,S22.Imap.Auth,Handshake,C:\repos\smiley22_S22.Imap\Auth\Handshake.cs,Deserialize,The following statement contains a magic number: if (hs.MessageId == HandshakeType.HandshakeError && hs.PayloadSize != 8) {  				throw new SerializationException("Unexpected payload size. Expected " +  					"8' but was: " + hs.PayloadSize);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms,SaslScramSha1,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\SaslScramSha1.cs,ComputeResponse,The following statement contains a magic number: if (Step == 2)  				Completed = true;
Magic Number,S22.Imap.Auth.Sasl.Mechanisms,SaslScramSha1,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\SaslScramSha1.cs,VerifyServerSignature,The following statement contains a magic number: byte[] serverSignature = Convert.FromBase64String(s.Substring(2));
Magic Number,S22.Imap.Auth.Sasl.Mechanisms,SaslScramSha1,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\SaslScramSha1.cs,Hi,The following statement contains a magic number: try {  				// Generate 20 key bytes' which is the size of the hash result of SHA-1.  				return db.GetBytes(20);  			} finally {  #if !NET35  				if(db != null)  					db.Dispose();  #endif  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms,SaslScramSha1,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\SaslScramSha1.cs,GenerateCnonce,The following statement contains a magic number: return Guid.NewGuid().ToString("N").Substring(0' 16);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms,SaslSrp,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\SaslSrp.cs,ComputeResponse,The following statement contains a magic number: if (Step == 2)  				Completed = true;
Magic Number,S22.Imap.Auth.Sasl.Mechanisms,SaslDigestMd5,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\SaslDigestMd5.cs,ParseDigestChallenge,The following statement contains a magic number: foreach (string p in parts) {  				string[] kv = p.Split(new char[] { '=' }' 2);  				if (kv.Length == 2)  					coll.Add(kv[0]' kv[1].Trim('"'));  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms,SaslDigestMd5,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\SaslDigestMd5.cs,ParseDigestChallenge,The following statement contains a magic number: foreach (string p in parts) {  				string[] kv = p.Split(new char[] { '=' }' 2);  				if (kv.Length == 2)  					coll.Add(kv[0]' kv[1].Trim('"'));  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms,SaslDigestMd5,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\SaslDigestMd5.cs,GenerateCnonce,The following statement contains a magic number: return Guid.NewGuid().ToString("N").Substring(0' 16);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Srp,BinaryReaderExtensions,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Srp\Extensions.cs,ReadUInt32,The following statement contains a magic number: ret |= (reader.ReadByte() << 24);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Srp,BinaryReaderExtensions,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Srp\Extensions.cs,ReadUInt32,The following statement contains a magic number: ret |= (reader.ReadByte() << 16);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Srp,BinaryReaderExtensions,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Srp\Extensions.cs,ReadUInt32,The following statement contains a magic number: ret |= (reader.ReadByte() <<  8);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Srp,BinaryReaderExtensions,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Srp\Extensions.cs,ReadUInt16,The following statement contains a magic number: ret |= (reader.ReadByte() << 8);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Srp,Helper,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Srp\Helper.cs,IsValidGenerator,The following statement contains a magic number: return BigInteger.Compare(new BigInteger(2)' g.Value) == 0;
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Srp,Helper,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Srp\Helper.cs,GenerateClientPrivateKey,The following statement contains a magic number: using (var rng = new RNGCryptoServiceProvider()) {  				byte[] data = new byte[16];  				rng.GetBytes(data);    				return new Mpi(data);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Srp,Helper,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Srp\Helper.cs,ComputeSharedKey,The following statement contains a magic number: BigInteger _base = BigInteger.Subtract(serverPublicKey.Value'  				BigInteger.Multiply(new BigInteger(3)'  				BigInteger.ModPow(generator.Value' _x.Value' safePrimeModulus.Value)) %  				safePrimeModulus.Value);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Srp,Helper,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Srp\Helper.cs,ComputeSharedKey,The following statement contains a magic number: BigInteger gx = BigInteger.ModPow(generator.Value' _x.Value' safePrimeModulus.Value)'  				gx3 = BigInteger.Multiply(new BigInteger(3)' gx) % safePrimeModulus.Value;
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,MD4,The following statement contains a magic number: _x = new uint[16];
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,ProcessMessage,The following statement contains a magic number: foreach (byte b in bytes) {  				int c = _bytesProcessed & 63;  				int i = c >> 2;  				int s = (c & 3) << 3;    				_x[i] = (_x[i] & ~((uint) 255 << s)) | ((uint) b << s);    				if (c == 63) {  					Process16WordBlock();  				}    				_bytesProcessed++;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,ProcessMessage,The following statement contains a magic number: foreach (byte b in bytes) {  				int c = _bytesProcessed & 63;  				int i = c >> 2;  				int s = (c & 3) << 3;    				_x[i] = (_x[i] & ~((uint) 255 << s)) | ((uint) b << s);    				if (c == 63) {  					Process16WordBlock();  				}    				_bytesProcessed++;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,ProcessMessage,The following statement contains a magic number: foreach (byte b in bytes) {  				int c = _bytesProcessed & 63;  				int i = c >> 2;  				int s = (c & 3) << 3;    				_x[i] = (_x[i] & ~((uint) 255 << s)) | ((uint) b << s);    				if (c == 63) {  					Process16WordBlock();  				}    				_bytesProcessed++;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,ProcessMessage,The following statement contains a magic number: foreach (byte b in bytes) {  				int c = _bytesProcessed & 63;  				int i = c >> 2;  				int s = (c & 3) << 3;    				_x[i] = (_x[i] & ~((uint) 255 << s)) | ((uint) b << s);    				if (c == 63) {  					Process16WordBlock();  				}    				_bytesProcessed++;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,ProcessMessage,The following statement contains a magic number: foreach (byte b in bytes) {  				int c = _bytesProcessed & 63;  				int i = c >> 2;  				int s = (c & 3) << 3;    				_x[i] = (_x[i] & ~((uint) 255 << s)) | ((uint) b << s);    				if (c == 63) {  					Process16WordBlock();  				}    				_bytesProcessed++;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,ProcessMessage,The following statement contains a magic number: foreach (byte b in bytes) {  				int c = _bytesProcessed & 63;  				int i = c >> 2;  				int s = (c & 3) << 3;    				_x[i] = (_x[i] & ~((uint) 255 << s)) | ((uint) b << s);    				if (c == 63) {  					Process16WordBlock();  				}    				_bytesProcessed++;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Bytes,The following statement contains a magic number: yield return (byte) (word & 255);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Bytes,The following statement contains a magic number: yield return (byte) ((word >> 8) & 255);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Bytes,The following statement contains a magic number: yield return (byte) ((word >> 8) & 255);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Bytes,The following statement contains a magic number: yield return (byte) ((word >> 16) & 255);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Bytes,The following statement contains a magic number: yield return (byte) ((word >> 16) & 255);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Bytes,The following statement contains a magic number: yield return (byte) ((word >> 24) & 255);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Bytes,The following statement contains a magic number: yield return (byte) ((word >> 24) & 255);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Padding,The following statement contains a magic number: return Repeat(128' 1)  				 .Concat(Repeat(0' ((_bytesProcessed + 8) & 0x7fffffc0) + 55 - _bytesProcessed))  				 .Concat(Bytes((uint) _bytesProcessed << 3))  				 .Concat(Repeat(0' 4));
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Padding,The following statement contains a magic number: return Repeat(128' 1)  				 .Concat(Repeat(0' ((_bytesProcessed + 8) & 0x7fffffc0) + 55 - _bytesProcessed))  				 .Concat(Bytes((uint) _bytesProcessed << 3))  				 .Concat(Repeat(0' 4));
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Padding,The following statement contains a magic number: return Repeat(128' 1)  				 .Concat(Repeat(0' ((_bytesProcessed + 8) & 0x7fffffc0) + 55 - _bytesProcessed))  				 .Concat(Bytes((uint) _bytesProcessed << 3))  				 .Concat(Repeat(0' 4));
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Padding,The following statement contains a magic number: return Repeat(128' 1)  				 .Concat(Repeat(0' ((_bytesProcessed + 8) & 0x7fffffc0) + 55 - _bytesProcessed))  				 .Concat(Bytes((uint) _bytesProcessed << 3))  				 .Concat(Repeat(0' 4));
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Padding,The following statement contains a magic number: return Repeat(128' 1)  				 .Concat(Repeat(0' ((_bytesProcessed + 8) & 0x7fffffc0) + 55 - _bytesProcessed))  				 .Concat(Bytes((uint) _bytesProcessed << 3))  				 .Concat(Repeat(0' 4));
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 4' 8' 12 }) {  				aa = Round1Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round1Operation(dd' aa' bb' cc' _x[k + 1]' 7);  				cc = Round1Operation(cc' dd' aa' bb' _x[k + 2]' 11);  				bb = Round1Operation(bb' cc' dd' aa' _x[k + 3]' 19);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 4' 8' 12 }) {  				aa = Round1Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round1Operation(dd' aa' bb' cc' _x[k + 1]' 7);  				cc = Round1Operation(cc' dd' aa' bb' _x[k + 2]' 11);  				bb = Round1Operation(bb' cc' dd' aa' _x[k + 3]' 19);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 4' 8' 12 }) {  				aa = Round1Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round1Operation(dd' aa' bb' cc' _x[k + 1]' 7);  				cc = Round1Operation(cc' dd' aa' bb' _x[k + 2]' 11);  				bb = Round1Operation(bb' cc' dd' aa' _x[k + 3]' 19);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 4' 8' 12 }) {  				aa = Round1Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round1Operation(dd' aa' bb' cc' _x[k + 1]' 7);  				cc = Round1Operation(cc' dd' aa' bb' _x[k + 2]' 11);  				bb = Round1Operation(bb' cc' dd' aa' _x[k + 3]' 19);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 4' 8' 12 }) {  				aa = Round1Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round1Operation(dd' aa' bb' cc' _x[k + 1]' 7);  				cc = Round1Operation(cc' dd' aa' bb' _x[k + 2]' 11);  				bb = Round1Operation(bb' cc' dd' aa' _x[k + 3]' 19);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 4' 8' 12 }) {  				aa = Round1Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round1Operation(dd' aa' bb' cc' _x[k + 1]' 7);  				cc = Round1Operation(cc' dd' aa' bb' _x[k + 2]' 11);  				bb = Round1Operation(bb' cc' dd' aa' _x[k + 3]' 19);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 4' 8' 12 }) {  				aa = Round1Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round1Operation(dd' aa' bb' cc' _x[k + 1]' 7);  				cc = Round1Operation(cc' dd' aa' bb' _x[k + 2]' 11);  				bb = Round1Operation(bb' cc' dd' aa' _x[k + 3]' 19);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 4' 8' 12 }) {  				aa = Round1Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round1Operation(dd' aa' bb' cc' _x[k + 1]' 7);  				cc = Round1Operation(cc' dd' aa' bb' _x[k + 2]' 11);  				bb = Round1Operation(bb' cc' dd' aa' _x[k + 3]' 19);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 4' 8' 12 }) {  				aa = Round1Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round1Operation(dd' aa' bb' cc' _x[k + 1]' 7);  				cc = Round1Operation(cc' dd' aa' bb' _x[k + 2]' 11);  				bb = Round1Operation(bb' cc' dd' aa' _x[k + 3]' 19);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 1' 2' 3 }) {  				aa = Round2Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round2Operation(dd' aa' bb' cc' _x[k + 4]' 5);  				cc = Round2Operation(cc' dd' aa' bb' _x[k + 8]' 9);  				bb = Round2Operation(bb' cc' dd' aa' _x[k + 12]' 13);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 1' 2' 3 }) {  				aa = Round2Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round2Operation(dd' aa' bb' cc' _x[k + 4]' 5);  				cc = Round2Operation(cc' dd' aa' bb' _x[k + 8]' 9);  				bb = Round2Operation(bb' cc' dd' aa' _x[k + 12]' 13);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 1' 2' 3 }) {  				aa = Round2Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round2Operation(dd' aa' bb' cc' _x[k + 4]' 5);  				cc = Round2Operation(cc' dd' aa' bb' _x[k + 8]' 9);  				bb = Round2Operation(bb' cc' dd' aa' _x[k + 12]' 13);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 1' 2' 3 }) {  				aa = Round2Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round2Operation(dd' aa' bb' cc' _x[k + 4]' 5);  				cc = Round2Operation(cc' dd' aa' bb' _x[k + 8]' 9);  				bb = Round2Operation(bb' cc' dd' aa' _x[k + 12]' 13);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 1' 2' 3 }) {  				aa = Round2Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round2Operation(dd' aa' bb' cc' _x[k + 4]' 5);  				cc = Round2Operation(cc' dd' aa' bb' _x[k + 8]' 9);  				bb = Round2Operation(bb' cc' dd' aa' _x[k + 12]' 13);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 1' 2' 3 }) {  				aa = Round2Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round2Operation(dd' aa' bb' cc' _x[k + 4]' 5);  				cc = Round2Operation(cc' dd' aa' bb' _x[k + 8]' 9);  				bb = Round2Operation(bb' cc' dd' aa' _x[k + 12]' 13);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 1' 2' 3 }) {  				aa = Round2Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round2Operation(dd' aa' bb' cc' _x[k + 4]' 5);  				cc = Round2Operation(cc' dd' aa' bb' _x[k + 8]' 9);  				bb = Round2Operation(bb' cc' dd' aa' _x[k + 12]' 13);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 1' 2' 3 }) {  				aa = Round2Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round2Operation(dd' aa' bb' cc' _x[k + 4]' 5);  				cc = Round2Operation(cc' dd' aa' bb' _x[k + 8]' 9);  				bb = Round2Operation(bb' cc' dd' aa' _x[k + 12]' 13);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 1' 2' 3 }) {  				aa = Round2Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round2Operation(dd' aa' bb' cc' _x[k + 4]' 5);  				cc = Round2Operation(cc' dd' aa' bb' _x[k + 8]' 9);  				bb = Round2Operation(bb' cc' dd' aa' _x[k + 12]' 13);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 2' 1' 3 }) {  				aa = Round3Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round3Operation(dd' aa' bb' cc' _x[k + 8]' 9);  				cc = Round3Operation(cc' dd' aa' bb' _x[k + 4]' 11);  				bb = Round3Operation(bb' cc' dd' aa' _x[k + 12]' 15);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 2' 1' 3 }) {  				aa = Round3Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round3Operation(dd' aa' bb' cc' _x[k + 8]' 9);  				cc = Round3Operation(cc' dd' aa' bb' _x[k + 4]' 11);  				bb = Round3Operation(bb' cc' dd' aa' _x[k + 12]' 15);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 2' 1' 3 }) {  				aa = Round3Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round3Operation(dd' aa' bb' cc' _x[k + 8]' 9);  				cc = Round3Operation(cc' dd' aa' bb' _x[k + 4]' 11);  				bb = Round3Operation(bb' cc' dd' aa' _x[k + 12]' 15);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 2' 1' 3 }) {  				aa = Round3Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round3Operation(dd' aa' bb' cc' _x[k + 8]' 9);  				cc = Round3Operation(cc' dd' aa' bb' _x[k + 4]' 11);  				bb = Round3Operation(bb' cc' dd' aa' _x[k + 12]' 15);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 2' 1' 3 }) {  				aa = Round3Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round3Operation(dd' aa' bb' cc' _x[k + 8]' 9);  				cc = Round3Operation(cc' dd' aa' bb' _x[k + 4]' 11);  				bb = Round3Operation(bb' cc' dd' aa' _x[k + 12]' 15);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 2' 1' 3 }) {  				aa = Round3Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round3Operation(dd' aa' bb' cc' _x[k + 8]' 9);  				cc = Round3Operation(cc' dd' aa' bb' _x[k + 4]' 11);  				bb = Round3Operation(bb' cc' dd' aa' _x[k + 12]' 15);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 2' 1' 3 }) {  				aa = Round3Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round3Operation(dd' aa' bb' cc' _x[k + 8]' 9);  				cc = Round3Operation(cc' dd' aa' bb' _x[k + 4]' 11);  				bb = Round3Operation(bb' cc' dd' aa' _x[k + 12]' 15);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 2' 1' 3 }) {  				aa = Round3Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round3Operation(dd' aa' bb' cc' _x[k + 8]' 9);  				cc = Round3Operation(cc' dd' aa' bb' _x[k + 4]' 11);  				bb = Round3Operation(bb' cc' dd' aa' _x[k + 12]' 15);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,Process16WordBlock,The following statement contains a magic number: foreach (int k in new[] { 0' 2' 1' 3 }) {  				aa = Round3Operation(aa' bb' cc' dd' _x[k]' 3);  				dd = Round3Operation(dd' aa' bb' cc' _x[k + 8]' 9);  				cc = Round3Operation(cc' dd' aa' bb' _x[k + 4]' 11);  				bb = Round3Operation(bb' cc' dd' aa' _x[k + 12]' 15);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,MD4,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\MD4.cs,ROL,The following statement contains a magic number: return (value << numberOfBits) | (value >> (32 - numberOfBits));
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,LMHash,The following statement contains a magic number: byte[] oemPassword =  				Encoding.ASCII.GetBytes(password.ToUpperInvariant())'  				magic = new byte[] { 0x4b' 0x47' 0x53' 0x21' 0x40' 0x23' 0x24' 0x25 }'  				// This is the pre-encrypted magic value with a null DES key.  				nullEncMagic = { 0xAA' 0xD3' 0xB4' 0x35' 0xB5' 0x14' 0x04' 0xEE }'  				keyBytes = new byte[14]' lmHash = new byte[16];
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,LMHash,The following statement contains a magic number: byte[] oemPassword =  				Encoding.ASCII.GetBytes(password.ToUpperInvariant())'  				magic = new byte[] { 0x4b' 0x47' 0x53' 0x21' 0x40' 0x23' 0x24' 0x25 }'  				// This is the pre-encrypted magic value with a null DES key.  				nullEncMagic = { 0xAA' 0xD3' 0xB4' 0x35' 0xB5' 0x14' 0x04' 0xEE }'  				keyBytes = new byte[14]' lmHash = new byte[16];
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,LMHash,The following statement contains a magic number: int length = Math.Min(oemPassword.Length' 14);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,LMHash,The following statement contains a magic number: byte[] lowKey = CreateDESKey(keyBytes' 0)' highKey =  				CreateDESKey(keyBytes' 7);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,LMHash,The following statement contains a magic number: using (DES des = DES.Create("DES")) {  				byte[] output = new byte[8];  				des.Mode = CipherMode.ECB;  				// Note: In .NET DES cannot accept a weak key. This can happen for  				// an empty password or if the password is shorter than 8 characters.  				if (password.Length < 1) {  					Buffer.BlockCopy(nullEncMagic' 0' lmHash' 0' 8);  				} else {  					des.Key = lowKey;  					using (var encryptor = des.CreateEncryptor()) {  						encryptor.TransformBlock(magic' 0' magic.Length' lmHash' 0);  					}  				}  				if (password.Length < 8) {  					Buffer.BlockCopy(nullEncMagic' 0' lmHash' 8' 8);  				} else {  					des.Key = highKey;  					using (var encryptor = des.CreateEncryptor()) {  						encryptor.TransformBlock(magic' 0' magic.Length' lmHash' 8);  					}  				}  				return lmHash;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,LMHash,The following statement contains a magic number: using (DES des = DES.Create("DES")) {  				byte[] output = new byte[8];  				des.Mode = CipherMode.ECB;  				// Note: In .NET DES cannot accept a weak key. This can happen for  				// an empty password or if the password is shorter than 8 characters.  				if (password.Length < 1) {  					Buffer.BlockCopy(nullEncMagic' 0' lmHash' 0' 8);  				} else {  					des.Key = lowKey;  					using (var encryptor = des.CreateEncryptor()) {  						encryptor.TransformBlock(magic' 0' magic.Length' lmHash' 0);  					}  				}  				if (password.Length < 8) {  					Buffer.BlockCopy(nullEncMagic' 0' lmHash' 8' 8);  				} else {  					des.Key = highKey;  					using (var encryptor = des.CreateEncryptor()) {  						encryptor.TransformBlock(magic' 0' magic.Length' lmHash' 8);  					}  				}  				return lmHash;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,LMHash,The following statement contains a magic number: using (DES des = DES.Create("DES")) {  				byte[] output = new byte[8];  				des.Mode = CipherMode.ECB;  				// Note: In .NET DES cannot accept a weak key. This can happen for  				// an empty password or if the password is shorter than 8 characters.  				if (password.Length < 1) {  					Buffer.BlockCopy(nullEncMagic' 0' lmHash' 0' 8);  				} else {  					des.Key = lowKey;  					using (var encryptor = des.CreateEncryptor()) {  						encryptor.TransformBlock(magic' 0' magic.Length' lmHash' 0);  					}  				}  				if (password.Length < 8) {  					Buffer.BlockCopy(nullEncMagic' 0' lmHash' 8' 8);  				} else {  					des.Key = highKey;  					using (var encryptor = des.CreateEncryptor()) {  						encryptor.TransformBlock(magic' 0' magic.Length' lmHash' 8);  					}  				}  				return lmHash;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,LMHash,The following statement contains a magic number: using (DES des = DES.Create("DES")) {  				byte[] output = new byte[8];  				des.Mode = CipherMode.ECB;  				// Note: In .NET DES cannot accept a weak key. This can happen for  				// an empty password or if the password is shorter than 8 characters.  				if (password.Length < 1) {  					Buffer.BlockCopy(nullEncMagic' 0' lmHash' 0' 8);  				} else {  					des.Key = lowKey;  					using (var encryptor = des.CreateEncryptor()) {  						encryptor.TransformBlock(magic' 0' magic.Length' lmHash' 0);  					}  				}  				if (password.Length < 8) {  					Buffer.BlockCopy(nullEncMagic' 0' lmHash' 8' 8);  				} else {  					des.Key = highKey;  					using (var encryptor = des.CreateEncryptor()) {  						encryptor.TransformBlock(magic' 0' magic.Length' lmHash' 8);  					}  				}  				return lmHash;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,LMHash,The following statement contains a magic number: using (DES des = DES.Create("DES")) {  				byte[] output = new byte[8];  				des.Mode = CipherMode.ECB;  				// Note: In .NET DES cannot accept a weak key. This can happen for  				// an empty password or if the password is shorter than 8 characters.  				if (password.Length < 1) {  					Buffer.BlockCopy(nullEncMagic' 0' lmHash' 0' 8);  				} else {  					des.Key = lowKey;  					using (var encryptor = des.CreateEncryptor()) {  						encryptor.TransformBlock(magic' 0' magic.Length' lmHash' 0);  					}  				}  				if (password.Length < 8) {  					Buffer.BlockCopy(nullEncMagic' 0' lmHash' 8' 8);  				} else {  					des.Key = highKey;  					using (var encryptor = des.CreateEncryptor()) {  						encryptor.TransformBlock(magic' 0' magic.Length' lmHash' 8);  					}  				}  				return lmHash;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,LMHash,The following statement contains a magic number: using (DES des = DES.Create("DES")) {  				byte[] output = new byte[8];  				des.Mode = CipherMode.ECB;  				// Note: In .NET DES cannot accept a weak key. This can happen for  				// an empty password or if the password is shorter than 8 characters.  				if (password.Length < 1) {  					Buffer.BlockCopy(nullEncMagic' 0' lmHash' 0' 8);  				} else {  					des.Key = lowKey;  					using (var encryptor = des.CreateEncryptor()) {  						encryptor.TransformBlock(magic' 0' magic.Length' lmHash' 0);  					}  				}  				if (password.Length < 8) {  					Buffer.BlockCopy(nullEncMagic' 0' lmHash' 8' 8);  				} else {  					des.Key = highKey;  					using (var encryptor = des.CreateEncryptor()) {  						encryptor.TransformBlock(magic' 0' magic.Length' lmHash' 8);  					}  				}  				return lmHash;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: byte[] keyBytes = new byte[7];
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: Array.Copy(bytes' offset' keyBytes' 0' 7);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: byte[] material = new byte[8];
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[1] = (byte) (keyBytes[0] << 7 | (keyBytes[1] & 0xff) >> 1);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[2] = (byte) (keyBytes[1] << 6 | (keyBytes[2] & 0xff) >> 2);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[2] = (byte) (keyBytes[1] << 6 | (keyBytes[2] & 0xff) >> 2);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[2] = (byte) (keyBytes[1] << 6 | (keyBytes[2] & 0xff) >> 2);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[2] = (byte) (keyBytes[1] << 6 | (keyBytes[2] & 0xff) >> 2);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[3] = (byte) (keyBytes[2] << 5 | (keyBytes[3] & 0xff) >> 3);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[3] = (byte) (keyBytes[2] << 5 | (keyBytes[3] & 0xff) >> 3);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[3] = (byte) (keyBytes[2] << 5 | (keyBytes[3] & 0xff) >> 3);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[3] = (byte) (keyBytes[2] << 5 | (keyBytes[3] & 0xff) >> 3);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[3] = (byte) (keyBytes[2] << 5 | (keyBytes[3] & 0xff) >> 3);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[4] = (byte) (keyBytes[3] << 4 | (keyBytes[4] & 0xff) >> 4);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[4] = (byte) (keyBytes[3] << 4 | (keyBytes[4] & 0xff) >> 4);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[4] = (byte) (keyBytes[3] << 4 | (keyBytes[4] & 0xff) >> 4);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[4] = (byte) (keyBytes[3] << 4 | (keyBytes[4] & 0xff) >> 4);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[4] = (byte) (keyBytes[3] << 4 | (keyBytes[4] & 0xff) >> 4);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[5] = (byte) (keyBytes[4] << 3 | (keyBytes[5] & 0xff) >> 5);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[5] = (byte) (keyBytes[4] << 3 | (keyBytes[5] & 0xff) >> 5);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[5] = (byte) (keyBytes[4] << 3 | (keyBytes[5] & 0xff) >> 5);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[5] = (byte) (keyBytes[4] << 3 | (keyBytes[5] & 0xff) >> 5);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[5] = (byte) (keyBytes[4] << 3 | (keyBytes[5] & 0xff) >> 5);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[6] = (byte) (keyBytes[5] << 2 | (keyBytes[6] & 0xff) >> 6);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[6] = (byte) (keyBytes[5] << 2 | (keyBytes[6] & 0xff) >> 6);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[6] = (byte) (keyBytes[5] << 2 | (keyBytes[6] & 0xff) >> 6);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[6] = (byte) (keyBytes[5] << 2 | (keyBytes[6] & 0xff) >> 6);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[6] = (byte) (keyBytes[5] << 2 | (keyBytes[6] & 0xff) >> 6);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[7] = (byte) (keyBytes[6] << 1);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,CreateDESKey,The following statement contains a magic number: material[7] = (byte) (keyBytes[6] << 1);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,OddParity,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  				byte b = bytes[i];  				bool needsParity = (((b >> 7) ^ (b >> 6) ^ (b >> 5) ^  					(b >> 4) ^ (b >> 3) ^ (b >> 2) ^  					(b >> 1)) & 0x01) == 0;  				if (needsParity)  					bytes[i] |= (byte) 0x01;  				else  					bytes[i] &= (byte) 0xFE;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,OddParity,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  				byte b = bytes[i];  				bool needsParity = (((b >> 7) ^ (b >> 6) ^ (b >> 5) ^  					(b >> 4) ^ (b >> 3) ^ (b >> 2) ^  					(b >> 1)) & 0x01) == 0;  				if (needsParity)  					bytes[i] |= (byte) 0x01;  				else  					bytes[i] &= (byte) 0xFE;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,OddParity,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  				byte b = bytes[i];  				bool needsParity = (((b >> 7) ^ (b >> 6) ^ (b >> 5) ^  					(b >> 4) ^ (b >> 3) ^ (b >> 2) ^  					(b >> 1)) & 0x01) == 0;  				if (needsParity)  					bytes[i] |= (byte) 0x01;  				else  					bytes[i] &= (byte) 0xFE;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,OddParity,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  				byte b = bytes[i];  				bool needsParity = (((b >> 7) ^ (b >> 6) ^ (b >> 5) ^  					(b >> 4) ^ (b >> 3) ^ (b >> 2) ^  					(b >> 1)) & 0x01) == 0;  				if (needsParity)  					bytes[i] |= (byte) 0x01;  				else  					bytes[i] &= (byte) 0xFE;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,OddParity,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  				byte b = bytes[i];  				bool needsParity = (((b >> 7) ^ (b >> 6) ^ (b >> 5) ^  					(b >> 4) ^ (b >> 3) ^ (b >> 2) ^  					(b >> 1)) & 0x01) == 0;  				if (needsParity)  					bytes[i] |= (byte) 0x01;  				else  					bytes[i] &= (byte) 0xFE;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,OddParity,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++) {  				byte b = bytes[i];  				bool needsParity = (((b >> 7) ^ (b >> 6) ^ (b >> 5) ^  					(b >> 4) ^ (b >> 3) ^ (b >> 2) ^  					(b >> 1)) & 0x01) == 0;  				if (needsParity)  					bytes[i] |= (byte) 0x01;  				else  					bytes[i] &= (byte) 0xFE;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,LMResponse,The following statement contains a magic number: byte[] keyBytes = new byte[21]' lmResponse = new byte[24];
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,LMResponse,The following statement contains a magic number: byte[] keyBytes = new byte[21]' lmResponse = new byte[24];
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,LMResponse,The following statement contains a magic number: Array.Copy(hash' 0' keyBytes' 0' 16);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,LMResponse,The following statement contains a magic number: byte[] lowKey = CreateDESKey(keyBytes' 0)' middleKey =  				CreateDESKey(keyBytes' 7)' highKey =  				CreateDESKey(keyBytes' 14);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,LMResponse,The following statement contains a magic number: byte[] lowKey = CreateDESKey(keyBytes' 0)' middleKey =  				CreateDESKey(keyBytes' 7)' highKey =  				CreateDESKey(keyBytes' 14);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,LMResponse,The following statement contains a magic number: using (DES des = DES.Create("DES")) {  				des.Mode = CipherMode.ECB;  				des.Key = lowKey;  				using (var encryptor = des.CreateEncryptor()) {  					encryptor.TransformBlock(challenge' 0' challenge.Length'  						lmResponse' 0);  				}  				des.Key = middleKey;  				using (var encryptor = des.CreateEncryptor()) {  					encryptor.TransformBlock(challenge' 0' challenge.Length'  						lmResponse' 8);  				}  				des.Key = highKey;  				using (var encryptor = des.CreateEncryptor()) {  					encryptor.TransformBlock(challenge' 0' challenge.Length'  						lmResponse' 16);  				}  				return lmResponse;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Responses,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Responses.cs,LMResponse,The following statement contains a magic number: using (DES des = DES.Create("DES")) {  				des.Mode = CipherMode.ECB;  				des.Key = lowKey;  				using (var encryptor = des.CreateEncryptor()) {  					encryptor.TransformBlock(challenge' 0' challenge.Length'  						lmResponse' 0);  				}  				des.Key = middleKey;  				using (var encryptor = des.CreateEncryptor()) {  					encryptor.TransformBlock(challenge' 0' challenge.Length'  						lmResponse' 8);  				}  				des.Key = highKey;  				using (var encryptor = des.CreateEncryptor()) {  					encryptor.TransformBlock(challenge' 0' challenge.Length'  						lmResponse' 16);  				}  				return lmResponse;  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Type1Message,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Type1Message.cs,Type1Message,The following statement contains a magic number: OSVersion = new OSVersion(6' 1' 7601);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Type1Message,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Type1Message.cs,Type1Message,The following statement contains a magic number: OSVersion = new OSVersion(6' 1' 7601);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Type2Message,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Type2Message.cs,Deserialize,The following statement contains a magic number: try {  				Type2Message t2 = new Type2Message();  				using (var ms = new MemoryStream(buffer)) {  					using (var r = new BinaryReader(ms)) {  						if (r.ReadASCIIString(8) != signature)  							throw new InvalidDataException("Invalid signature.");  						if (r.ReadInt32() != (int) type)  							throw new InvalidDataException("Unexpected message type.");  						int targetLength = r.ReadInt16()' targetSpace =  							r.ReadInt16()' targetOffset = r.ReadInt32();  						t2.Flags = (Flags) r.ReadInt32();  						t2.Challenge = r.ReadBytes(8);  						// Figure out' which of the several versions of Type 2 we're  						// dealing with.  						t2.Version = GetType2Version(targetOffset);  						if (t2.Version > Type2Version.Version1) {  							t2.Context = r.ReadInt64();  							// Read the target information security buffer  							int informationLength = r.ReadInt16()' informationSpace =  								r.ReadInt16()' informationOffset = r.ReadInt32();  							t2.RawTargetInformation = new byte[informationLength];  							Array.Copy(buffer' informationOffset'  								t2.RawTargetInformation' 0' informationLength);  							// Version 3 has an additional OS version structure.  							if (t2.Version > Type2Version.Version2)  								t2.OSVersion = ReadOSVersion(r);  						}  						t2.TargetName = GetTargetName(r.ReadBytes(targetLength)'  							(t2.Flags & Flags.NegotiateUnicode) == Flags.NegotiateUnicode);  						if (t2.Version > Type2Version.Version1) {  							t2.TargetInformation = ReadTargetInformation(r);  						}  					}  				}  				return t2;  			} catch (Exception e) {  				throw new SerializationException("NTLM Type 2 message could not be " +  					"deserialized."' e);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Type2Message,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Type2Message.cs,Deserialize,The following statement contains a magic number: try {  				Type2Message t2 = new Type2Message();  				using (var ms = new MemoryStream(buffer)) {  					using (var r = new BinaryReader(ms)) {  						if (r.ReadASCIIString(8) != signature)  							throw new InvalidDataException("Invalid signature.");  						if (r.ReadInt32() != (int) type)  							throw new InvalidDataException("Unexpected message type.");  						int targetLength = r.ReadInt16()' targetSpace =  							r.ReadInt16()' targetOffset = r.ReadInt32();  						t2.Flags = (Flags) r.ReadInt32();  						t2.Challenge = r.ReadBytes(8);  						// Figure out' which of the several versions of Type 2 we're  						// dealing with.  						t2.Version = GetType2Version(targetOffset);  						if (t2.Version > Type2Version.Version1) {  							t2.Context = r.ReadInt64();  							// Read the target information security buffer  							int informationLength = r.ReadInt16()' informationSpace =  								r.ReadInt16()' informationOffset = r.ReadInt32();  							t2.RawTargetInformation = new byte[informationLength];  							Array.Copy(buffer' informationOffset'  								t2.RawTargetInformation' 0' informationLength);  							// Version 3 has an additional OS version structure.  							if (t2.Version > Type2Version.Version2)  								t2.OSVersion = ReadOSVersion(r);  						}  						t2.TargetName = GetTargetName(r.ReadBytes(targetLength)'  							(t2.Flags & Flags.NegotiateUnicode) == Flags.NegotiateUnicode);  						if (t2.Version > Type2Version.Version1) {  							t2.TargetInformation = ReadTargetInformation(r);  						}  					}  				}  				return t2;  			} catch (Exception e) {  				throw new SerializationException("NTLM Type 2 message could not be " +  					"deserialized."' e);  			}
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Type2Message,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Type2Message.cs,GetType2Version,The following statement contains a magic number: var dict = new Dictionary<int' Type2Version>() {  				{ 32' Type2Version.Version1 }'  				{ 48' Type2Version.Version2 }'  				{ 56' Type2Version.Version3 }  			};
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Type2Message,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Type2Message.cs,GetType2Version,The following statement contains a magic number: var dict = new Dictionary<int' Type2Version>() {  				{ 32' Type2Version.Version1 }'  				{ 48' Type2Version.Version2 }'  				{ 56' Type2Version.Version3 }  			};
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Type2Message,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Type2Message.cs,GetType2Version,The following statement contains a magic number: var dict = new Dictionary<int' Type2Version>() {  				{ 32' Type2Version.Version1 }'  				{ 48' Type2Version.Version2 }'  				{ 56' Type2Version.Version3 }  			};
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Type3Message,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Type3Message.cs,Type3Message,The following statement contains a magic number: OSVersion = new OSVersion(6' 1' 7601);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Type3Message,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Type3Message.cs,Type3Message,The following statement contains a magic number: OSVersion = new OSVersion(6' 1' 7601);
Magic Number,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Type3Message,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Type3Message.cs,GetCNonce,The following statement contains a magic number: byte[] b = new byte[8];
Missing Default,S22.Imap,ImapClient,C:\repos\smiley22_S22.Imap\ImapClient.cs,EventDispatcher,The following switch statement is missing a default case: switch (m.Groups[2].Value.ToUpper()) {  						case "EXISTS":  							if (lastUid != uid) {  								newMessageEvent.Raise(this'  									new IdleMessageEventArgs(numberOfMessages' uid' this));  							}  							break;  						case "EXPUNGE":  							messageDeleteEvent.Raise(  								this' new IdleMessageEventArgs(numberOfMessages' uid' this));  							break;  					}
Missing Default,S22.Imap.Auth.Sasl.Mechanisms.Ntlm,Type2Message,C:\repos\smiley22_S22.Imap\Auth\Sasl\Mechanisms\Ntlm\Type2Message.cs,ReadTargetInformation,The following switch statement is missing a default case: switch (_type) {  					case Type2InformationType.ServerName:  						info.ServerName = content;  						break;  					case Type2InformationType.DomainName:  						info.DomainName = content;  						break;  					case Type2InformationType.DnsHostname:  						info.DnsHostname = content;  						break;  					case Type2InformationType.DnsDomainName:  						info.DnsDomainName = content;  						break;  				}
