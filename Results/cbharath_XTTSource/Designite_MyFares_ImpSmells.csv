Implementation smell,Namespace,Class,File,Method,Description
Long Method,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The method has 267 lines of code.
Complex Method,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,Cyclomatic complexity of the method is 28
Long Identifier,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the parameter originDestinationInformationList is 32.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "	if (rq.FlightSearchDetails.AirTravelType.Trim ().ToUpper () == "CIRCLE" || rq.FlightSearchDetails.AirTravelType.Trim ().ToUpper () == "OPENJAW") { " is 146.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "	OriginDestinationInformation[] originDestinationInformationList = new OriginDestinationInformation[originDestinationCount]; " is 123.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "	if (rq.FlightSearchDetails.AirTravelType.Trim ().ToUpper () == "CIRCLE" || rq.FlightSearchDetails.AirTravelType.Trim ().ToUpper () == "OPENJAW") { " is 146.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "			airItinerary.ItineraryID = airItinerary.SecquenceNumber + "_" + searchRS.PricedItineraries [i].AirItineraryPricingInfo.FareSourceCode; " is 134.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "			for (int fareindex = 0; fareindex < searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns.Length; fareindex++) { " is 132.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "				if (searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerTypeQuantity.Code == PassengerType.ADT) { " is 140.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "				if (searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerTypeQuantity.Code == PassengerType.CHD) { " is 140.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "				if (searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerTypeQuantity.Code == PassengerType.INF) { " is 140.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "				fare.PassengerQuantity = searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerTypeQuantity.Quantity.ToString (); " is 154.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "				//    Amount = searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.Amount.ToString("#.##")' " is 147.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "				//    Currency = searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.CurrencyCode " is 137.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					Amount = ((Convert.ToDouble (searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerFare.EquivFare.Amount) - 5) * ROE).ToString ("#.##")' " is 177.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "				//searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.CurrencyCode " is 122.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "				Tax[] taxes2 = searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerFare.Taxes; " is 121.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "				//taxes.Currency = searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.CurrencyCode; " is 140.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "				// searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.CurrencyCode; " is 124.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "			if (rq.FlightSearchDetails.AirTravelType.Trim ().ToUpper () == "ONEWAY" || rq.FlightSearchDetails.AirTravelType.Trim ().ToUpper () == "RETURN") { " is 145.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "				List<XTraTech.Entities.API.Search.FlightSegment> FlightSements = new List<XTraTech.Entities.API.Search.FlightSegment> (); " is 121.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "				for (int oriSegments = 0; oriSegments < searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments.Length; oriSegments++) { " is 139.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.JourneyDuration = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].JourneyDuration.ToString (); " is 140.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.FlightCode = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].OperatingAirline.Code; " is 129.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.FlightNumber = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].OperatingAirline.FlightNumber; " is 139.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.Origin = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].DepartureAirportLocationCode; " is 132.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.DepartureDateTime = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].DepartureDateTime; " is 132.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.MarketingAirline = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].MarketingAirlineCode; " is 134.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.OperatingAirline = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].OperatingAirline.Code; " is 135.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.Destination = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].ArrivalAirportLocationCode; " is 135.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.ArrivalDateime = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].ArrivalDateTime; " is 127.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.CabinClass = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].CabinClassCode; " is 122.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.BookingClass = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].ResBookDesigCode; " is 126.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					if (searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].OperatingAirline != null) { " is 120.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "						ileg.EquipmentType = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].OperatingAirline.Equipment; " is 137.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "				List<XTraTech.Entities.API.Search.FlightSegment> FlightSements = new List<XTraTech.Entities.API.Search.FlightSegment> (); " is 121.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "				for (int oriSegments = 0; oriSegments < searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments.Length; oriSegments++) { " is 139.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.JourneyDuration = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].JourneyDuration.ToString (); " is 140.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.FlightCode = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].OperatingAirline.Code; " is 129.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.FlightNumber = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].OperatingAirline.FlightNumber; " is 139.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.Origin = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].DepartureAirportLocationCode; " is 132.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.DepartureDateTime = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].DepartureDateTime; " is 132.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.MarketingAirline = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].MarketingAirlineCode; " is 134.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.OperatingAirline = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].OperatingAirline.Code; " is 135.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.Destination = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].ArrivalAirportLocationCode; " is 135.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.ArrivalDateime = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].ArrivalDateTime; " is 127.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.CabinClass = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].CabinClassCode; " is 122.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					ileg.BookingClass = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].ResBookDesigCode; " is 126.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					if (searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].OperatingAirline != null) { " is 120.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "						ileg.EquipmentType = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].OperatingAirline.Equipment; " is 137.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "			if (rq.FlightSearchDetails.AirTravelType.Trim ().ToUpper () == "CIRCLE" || rq.FlightSearchDetails.AirTravelType.Trim ().ToUpper () == "OPENJAW") { " is 146.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					List<XTraTech.Entities.API.Search.FlightSegment> FlightSements = new List<XTraTech.Entities.API.Search.FlightSegment> (); " is 121.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "					for (int oriSegments = 0; oriSegments < searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments.Length; oriSegments++) { " is 139.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "						ileg.JourneyDuration = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].JourneyDuration.ToString (); " is 140.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "						ileg.FlightCode = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].OperatingAirline.Code; " is 129.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "						ileg.FlightNumber = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].OperatingAirline.FlightNumber; " is 139.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "						ileg.Origin = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].DepartureAirportLocationCode; " is 132.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "						ileg.DepartureDateTime = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].DepartureDateTime; " is 132.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "						ileg.MarketingAirline = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].MarketingAirlineCode; " is 134.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "						ileg.OperatingAirline = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].OperatingAirline.Code; " is 135.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "						ileg.Destination = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].ArrivalAirportLocationCode; " is 135.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "						ileg.ArrivalDateime = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].ArrivalDateTime; " is 127.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "						ileg.CabinClass = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].CabinClassCode; " is 122.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "						ileg.BookingClass = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].ResBookDesigCode; " is 126.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "						if (searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].OperatingAirline != null) { " is 120.
Long Statement,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The length of the statement  "							ileg.EquipmentType = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].OperatingAirline.Equipment; " is 137.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,CreateSessionAsync,The length of the statement  "		this.CreateSessionOperationCompleted = new System.Threading.SendOrPostCallback (this.OnCreateSessionOperationCompleted); " is 120.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnCreateSessionOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnCreateSessionOperationCompleted,The length of the statement  "		this.CreateSessionCompleted (this' new CreateSessionCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 155.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnEndSessionOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnEndSessionOperationCompleted,The length of the statement  "		this.EndSessionCompleted (this' new EndSessionCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 149.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,AirLowFareSearchAsync,The length of the statement  "		this.AirLowFareSearchOperationCompleted = new System.Threading.SendOrPostCallback (this.OnAirLowFareSearchOperationCompleted); " is 126.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnAirLowFareSearchOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnAirLowFareSearchOperationCompleted,The length of the statement  "		this.AirLowFareSearchCompleted (this' new AirLowFareSearchCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 161.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,AirRevalidateAsync,The length of the statement  "		this.AirRevalidateOperationCompleted = new System.Threading.SendOrPostCallback (this.OnAirRevalidateOperationCompleted); " is 120.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnAirRevalidateOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnAirRevalidateOperationCompleted,The length of the statement  "		this.AirRevalidateCompleted (this' new AirRevalidateCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 155.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnBookFlightOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnBookFlightOperationCompleted,The length of the statement  "		this.BookFlightCompleted (this' new BookFlightCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 149.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnFareRulesOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnFareRulesOperationCompleted,The length of the statement  "		this.FareRulesCompleted (this' new FareRulesCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 147.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,CancelBookingAsync,The length of the statement  "		this.CancelBookingOperationCompleted = new System.Threading.SendOrPostCallback (this.OnCancelBookingOperationCompleted); " is 120.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnCancelBookingOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnCancelBookingOperationCompleted,The length of the statement  "		this.CancelBookingCompleted (this' new CancelBookingCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 155.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnTicketOrderOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnTicketOrderOperationCompleted,The length of the statement  "		this.TicketOrderCompleted (this' new TicketOrderCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 151.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnTripDetailsOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnTripDetailsOperationCompleted,The length of the statement  "		this.TripDetailsCompleted (this' new TripDetailsCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 151.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,AddBookingNotesAsync,The length of the statement  "		this.AddBookingNotesOperationCompleted = new System.Threading.SendOrPostCallback (this.OnAddBookingNotesOperationCompleted); " is 124.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnAddBookingNotesOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnAddBookingNotesOperationCompleted,The length of the statement  "		this.AddBookingNotesCompleted (this' new AddBookingNotesCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 159.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,MessageQueuesAsync,The length of the statement  "		this.MessageQueuesOperationCompleted = new System.Threading.SendOrPostCallback (this.OnMessageQueuesOperationCompleted); " is 120.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnMessageQueuesOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnMessageQueuesOperationCompleted,The length of the statement  "		this.MessageQueuesCompleted (this' new MessageQueuesCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 155.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,RemoveMessageQueuesAsync,The length of the statement  "		this.RemoveMessageQueuesOperationCompleted = new System.Threading.SendOrPostCallback (this.OnRemoveMessageQueuesOperationCompleted); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnRemoveMessageQueuesOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnRemoveMessageQueuesOperationCompleted,The length of the statement  "		this.RemoveMessageQueuesCompleted (this' new RemoveMessageQueuesCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 167.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnAirSeatMapOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnAirSeatMapOperationCompleted,The length of the statement  "		this.AirSeatMapCompleted (this' new AirSeatMapCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 149.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,AirSeatReserveAsync,The length of the statement  "		this.AirSeatReserveOperationCompleted = new System.Threading.SendOrPostCallback (this.OnAirSeatReserveOperationCompleted); " is 122.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnAirSeatReserveOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnAirSeatReserveOperationCompleted,The length of the statement  "		this.AirSeatReserveCompleted (this' new AirSeatReserveCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 157.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,AirBookingDataAsync,The length of the statement  "		this.AirBookingDataOperationCompleted = new System.Threading.SendOrPostCallback (this.OnAirBookingDataOperationCompleted); " is 122.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnAirBookingDataOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnAirBookingDataOperationCompleted,The length of the statement  "		this.AirBookingDataCompleted (this' new AirBookingDataCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 157.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,MultiAirRevalidateAsync,The length of the statement  "		this.MultiAirRevalidateOperationCompleted = new System.Threading.SendOrPostCallback (this.OnMultiAirRevalidateOperationCompleted); " is 130.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnMultiAirRevalidateOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnMultiAirRevalidateOperationCompleted,The length of the statement  "		this.MultiAirRevalidateCompleted (this' new MultiAirRevalidateCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 165.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,MultiAirBookFlightAsync,The length of the statement  "		this.MultiAirBookFlightOperationCompleted = new System.Threading.SendOrPostCallback (this.OnMultiAirBookFlightOperationCompleted); " is 130.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnMultiAirBookFlightOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnMultiAirBookFlightOperationCompleted,The length of the statement  "		this.MultiAirBookFlightCompleted (this' new MultiAirBookFlightCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 165.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,IntelliFareSearchAsync,The length of the statement  "		this.IntelliFareSearchOperationCompleted = new System.Threading.SendOrPostCallback (this.OnIntelliFareSearchOperationCompleted); " is 128.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnIntelliFareSearchOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnIntelliFareSearchOperationCompleted,The length of the statement  "		this.IntelliFareSearchCompleted (this' new IntelliFareSearchCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 163.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,IntelliBestBuyAsync,The length of the statement  "		this.IntelliBestBuyOperationCompleted = new System.Threading.SendOrPostCallback (this.OnIntelliBestBuyOperationCompleted); " is 122.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnIntelliBestBuyOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnIntelliBestBuyOperationCompleted,The length of the statement  "		this.IntelliBestBuyCompleted (this' new IntelliBestBuyCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 157.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnAirQuoteOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,MyFares,OnePoint,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\OnePoint.cs,OnAirQuoteOperationCompleted,The length of the statement  "		this.AirQuoteCompleted (this' new AirQuoteCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 145.
Magic Number,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The following statement contains a magic number: if (infantCount != null) {  	passengerTypeQuantityList [2] = new PassengerTypeQuantity {  		Code = PassengerType.INF'  		CodeSpecified = true'  		Quantity = Convert.ToInt32 (infantCount.Quantity)'  		QuantitySpecified = true  	};  }  
Magic Number,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The following statement contains a magic number: passengerTypeQuantityList [2] = new PassengerTypeQuantity {  	Code = PassengerType.INF'  	CodeSpecified = true'  	Quantity = Convert.ToInt32 (infantCount.Quantity)'  	QuantitySpecified = true  };  
Magic Number,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The following statement contains a magic number: if (rq.FlightSearchDetails.AirTravelType.Trim ().ToUpper () == "RETURN") {  	originDestinationCount = 2;  }  
Magic Number,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The following statement contains a magic number: originDestinationCount = 2;  
Magic Number,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The following statement contains a magic number: if (searchRS != null) {  	for (int i = 0; i < searchRS.PricedItineraries.Length; i++) {  		AirItinerary airItinerary = new AirItinerary ();  		airItinerary.SecquenceNumber = (i + 1).ToString ();  		airItinerary.ItineraryID = airItinerary.SecquenceNumber + "_" + searchRS.PricedItineraries [i].AirItineraryPricingInfo.FareSourceCode;  		FareDetails fareDetails = new FareDetails ();  		fareDetails.FareType = searchRS.PricedItineraries [i].AirItineraryPricingInfo.FareType.ToString ();  		List<XTraTech.Entities.API.Search.Fare> fares = new List<XTraTech.Entities.API.Search.Fare> ();  		for (int fareindex = 0; fareindex < searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns.Length; fareindex++) {  			XTraTech.Entities.API.Search.Fare fare = new XTraTech.Entities.API.Search.Fare ();  			if (searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerTypeQuantity.Code == PassengerType.ADT) {  				fare.PassengerType = "ADT";  			}  			if (searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerTypeQuantity.Code == PassengerType.CHD) {  				fare.PassengerType = "CHD";  			}  			if (searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerTypeQuantity.Code == PassengerType.INF) {  				fare.PassengerType = "INF";  			}  			fare.PassengerQuantity = searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerTypeQuantity.Quantity.ToString ();  			//fare.SinglePassangerBaseFare = new Money  			//{  			//    Amount = searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.Amount.ToString("#.##")'  			//    Currency = searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.CurrencyCode  			//};  			//Temp changes for demo  			int ROE = 1;  			fare.SinglePassangerBaseFare = new Money {  				Amount = ((Convert.ToDouble (searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerFare.EquivFare.Amount) - 5) * ROE).ToString ("#.##")'  				Currency = "USD"  			//searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.CurrencyCode  			};  			Money taxes = new Money ();  			decimal totaltax = 0m;  			Tax[] taxes2 = searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerFare.Taxes;  			for (int k = 0; k < taxes2.Length; k++) {  				Tax item = taxes2 [k];  				totaltax += Convert.ToDecimal (item.Amount);  			}  			//taxes.Amount = totaltax.ToString("#.##");  			//taxes.Currency = searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.CurrencyCode;  			//Temp changes for demo.  			taxes.Amount = (Convert.ToDouble (totaltax) * ROE).ToString ("#.##");  			taxes.Currency = "USD";  			// searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.CurrencyCode;  			fare.SinglePassangerTax = taxes;  			fares.Add (fare);  		}  		fareDetails.Fares = fares;  		airItinerary.FareDetails = fareDetails;  		List<FlightDetail> flightDetails = new List<FlightDetail> ();  		if (rq.FlightSearchDetails.AirTravelType.Trim ().ToUpper () == "ONEWAY" || rq.FlightSearchDetails.AirTravelType.Trim ().ToUpper () == "RETURN") {  			FlightDetail flightDetailOnward = new FlightDetail ();  			flightDetailOnward.JourneyType = "Onward";  			List<XTraTech.Entities.API.Search.FlightSegment> FlightSements = new List<XTraTech.Entities.API.Search.FlightSegment> ();  			for (int oriSegments = 0; oriSegments < searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments.Length; oriSegments++) {  				XTraTech.Entities.API.Search.FlightSegment ileg = new XTraTech.Entities.API.Search.FlightSegment ();  				ileg.JourneyDuration = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].JourneyDuration.ToString ();  				ileg.FlightCode = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].OperatingAirline.Code;  				ileg.FlightNumber = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].OperatingAirline.FlightNumber;  				ileg.Origin = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].DepartureAirportLocationCode;  				ileg.DepartureDateTime = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].DepartureDateTime;  				ileg.MarketingAirline = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].MarketingAirlineCode;  				ileg.OperatingAirline = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].OperatingAirline.Code;  				ileg.Destination = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].ArrivalAirportLocationCode;  				ileg.ArrivalDateime = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].ArrivalDateTime;  				ileg.CabinClass = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].CabinClassCode;  				ileg.BookingClass = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].ResBookDesigCode;  				if (searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].OperatingAirline != null) {  					ileg.EquipmentType = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].OperatingAirline.Equipment;  				}  				FlightSements.Add (ileg);  			}  			flightDetailOnward.FlightSements = FlightSements;  			flightDetails.Add (flightDetailOnward);  		}  		if (rq.FlightSearchDetails.AirTravelType.Trim ().ToUpper () == "RETURN") {  			FlightDetail flightDetailRestination = new FlightDetail ();  			flightDetailRestination.JourneyType = "Return";  			List<XTraTech.Entities.API.Search.FlightSegment> FlightSements = new List<XTraTech.Entities.API.Search.FlightSegment> ();  			for (int oriSegments = 0; oriSegments < searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments.Length; oriSegments++) {  				XTraTech.Entities.API.Search.FlightSegment ileg = new XTraTech.Entities.API.Search.FlightSegment ();  				ileg.JourneyDuration = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].JourneyDuration.ToString ();  				ileg.FlightCode = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].OperatingAirline.Code;  				ileg.FlightNumber = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].OperatingAirline.FlightNumber;  				ileg.Origin = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].DepartureAirportLocationCode;  				ileg.DepartureDateTime = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].DepartureDateTime;  				ileg.MarketingAirline = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].MarketingAirlineCode;  				ileg.OperatingAirline = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].OperatingAirline.Code;  				ileg.Destination = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].ArrivalAirportLocationCode;  				ileg.ArrivalDateime = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].ArrivalDateTime;  				ileg.CabinClass = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].CabinClassCode;  				ileg.BookingClass = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].ResBookDesigCode;  				if (searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].OperatingAirline != null) {  					ileg.EquipmentType = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].OperatingAirline.Equipment;  				}  				FlightSements.Add (ileg);  			}  			flightDetailRestination.FlightSements = FlightSements;  			flightDetails.Add (flightDetailRestination);  		}  		if (rq.FlightSearchDetails.AirTravelType.Trim ().ToUpper () == "CIRCLE" || rq.FlightSearchDetails.AirTravelType.Trim ().ToUpper () == "OPENJAW") {  			for (int j = 0; j < searchRS.PricedItineraries [i].OriginDestinationOptions.Length; j++) {  				FlightDetail flightDetailMultidestination = new FlightDetail ();  				flightDetailMultidestination.JourneyType = "Multidestination";  				List<XTraTech.Entities.API.Search.FlightSegment> FlightSements = new List<XTraTech.Entities.API.Search.FlightSegment> ();  				for (int oriSegments = 0; oriSegments < searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments.Length; oriSegments++) {  					XTraTech.Entities.API.Search.FlightSegment ileg = new XTraTech.Entities.API.Search.FlightSegment ();  					ileg.JourneyDuration = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].JourneyDuration.ToString ();  					ileg.FlightCode = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].OperatingAirline.Code;  					ileg.FlightNumber = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].OperatingAirline.FlightNumber;  					ileg.Origin = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].DepartureAirportLocationCode;  					ileg.DepartureDateTime = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].DepartureDateTime;  					ileg.MarketingAirline = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].MarketingAirlineCode;  					ileg.OperatingAirline = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].OperatingAirline.Code;  					ileg.Destination = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].ArrivalAirportLocationCode;  					ileg.ArrivalDateime = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].ArrivalDateTime;  					ileg.CabinClass = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].CabinClassCode;  					ileg.BookingClass = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].ResBookDesigCode;  					if (searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].OperatingAirline != null) {  						ileg.EquipmentType = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].OperatingAirline.Equipment;  					}  					FlightSements.Add (ileg);  				}  				flightDetailMultidestination.FlightSements = FlightSements;  				flightDetails.Add (flightDetailMultidestination);  			}  		}  		airItinerary.FlightDetails = flightDetails;  		itineraries.Add (airItinerary);  	}  }  
Magic Number,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The following statement contains a magic number: for (int i = 0; i < searchRS.PricedItineraries.Length; i++) {  	AirItinerary airItinerary = new AirItinerary ();  	airItinerary.SecquenceNumber = (i + 1).ToString ();  	airItinerary.ItineraryID = airItinerary.SecquenceNumber + "_" + searchRS.PricedItineraries [i].AirItineraryPricingInfo.FareSourceCode;  	FareDetails fareDetails = new FareDetails ();  	fareDetails.FareType = searchRS.PricedItineraries [i].AirItineraryPricingInfo.FareType.ToString ();  	List<XTraTech.Entities.API.Search.Fare> fares = new List<XTraTech.Entities.API.Search.Fare> ();  	for (int fareindex = 0; fareindex < searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns.Length; fareindex++) {  		XTraTech.Entities.API.Search.Fare fare = new XTraTech.Entities.API.Search.Fare ();  		if (searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerTypeQuantity.Code == PassengerType.ADT) {  			fare.PassengerType = "ADT";  		}  		if (searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerTypeQuantity.Code == PassengerType.CHD) {  			fare.PassengerType = "CHD";  		}  		if (searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerTypeQuantity.Code == PassengerType.INF) {  			fare.PassengerType = "INF";  		}  		fare.PassengerQuantity = searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerTypeQuantity.Quantity.ToString ();  		//fare.SinglePassangerBaseFare = new Money  		//{  		//    Amount = searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.Amount.ToString("#.##")'  		//    Currency = searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.CurrencyCode  		//};  		//Temp changes for demo  		int ROE = 1;  		fare.SinglePassangerBaseFare = new Money {  			Amount = ((Convert.ToDouble (searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerFare.EquivFare.Amount) - 5) * ROE).ToString ("#.##")'  			Currency = "USD"  		//searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.CurrencyCode  		};  		Money taxes = new Money ();  		decimal totaltax = 0m;  		Tax[] taxes2 = searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerFare.Taxes;  		for (int k = 0; k < taxes2.Length; k++) {  			Tax item = taxes2 [k];  			totaltax += Convert.ToDecimal (item.Amount);  		}  		//taxes.Amount = totaltax.ToString("#.##");  		//taxes.Currency = searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.CurrencyCode;  		//Temp changes for demo.  		taxes.Amount = (Convert.ToDouble (totaltax) * ROE).ToString ("#.##");  		taxes.Currency = "USD";  		// searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.CurrencyCode;  		fare.SinglePassangerTax = taxes;  		fares.Add (fare);  	}  	fareDetails.Fares = fares;  	airItinerary.FareDetails = fareDetails;  	List<FlightDetail> flightDetails = new List<FlightDetail> ();  	if (rq.FlightSearchDetails.AirTravelType.Trim ().ToUpper () == "ONEWAY" || rq.FlightSearchDetails.AirTravelType.Trim ().ToUpper () == "RETURN") {  		FlightDetail flightDetailOnward = new FlightDetail ();  		flightDetailOnward.JourneyType = "Onward";  		List<XTraTech.Entities.API.Search.FlightSegment> FlightSements = new List<XTraTech.Entities.API.Search.FlightSegment> ();  		for (int oriSegments = 0; oriSegments < searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments.Length; oriSegments++) {  			XTraTech.Entities.API.Search.FlightSegment ileg = new XTraTech.Entities.API.Search.FlightSegment ();  			ileg.JourneyDuration = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].JourneyDuration.ToString ();  			ileg.FlightCode = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].OperatingAirline.Code;  			ileg.FlightNumber = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].OperatingAirline.FlightNumber;  			ileg.Origin = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].DepartureAirportLocationCode;  			ileg.DepartureDateTime = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].DepartureDateTime;  			ileg.MarketingAirline = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].MarketingAirlineCode;  			ileg.OperatingAirline = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].OperatingAirline.Code;  			ileg.Destination = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].ArrivalAirportLocationCode;  			ileg.ArrivalDateime = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].ArrivalDateTime;  			ileg.CabinClass = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].CabinClassCode;  			ileg.BookingClass = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].ResBookDesigCode;  			if (searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].OperatingAirline != null) {  				ileg.EquipmentType = searchRS.PricedItineraries [i].OriginDestinationOptions [0].FlightSegments [oriSegments].OperatingAirline.Equipment;  			}  			FlightSements.Add (ileg);  		}  		flightDetailOnward.FlightSements = FlightSements;  		flightDetails.Add (flightDetailOnward);  	}  	if (rq.FlightSearchDetails.AirTravelType.Trim ().ToUpper () == "RETURN") {  		FlightDetail flightDetailRestination = new FlightDetail ();  		flightDetailRestination.JourneyType = "Return";  		List<XTraTech.Entities.API.Search.FlightSegment> FlightSements = new List<XTraTech.Entities.API.Search.FlightSegment> ();  		for (int oriSegments = 0; oriSegments < searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments.Length; oriSegments++) {  			XTraTech.Entities.API.Search.FlightSegment ileg = new XTraTech.Entities.API.Search.FlightSegment ();  			ileg.JourneyDuration = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].JourneyDuration.ToString ();  			ileg.FlightCode = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].OperatingAirline.Code;  			ileg.FlightNumber = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].OperatingAirline.FlightNumber;  			ileg.Origin = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].DepartureAirportLocationCode;  			ileg.DepartureDateTime = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].DepartureDateTime;  			ileg.MarketingAirline = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].MarketingAirlineCode;  			ileg.OperatingAirline = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].OperatingAirline.Code;  			ileg.Destination = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].ArrivalAirportLocationCode;  			ileg.ArrivalDateime = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].ArrivalDateTime;  			ileg.CabinClass = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].CabinClassCode;  			ileg.BookingClass = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].ResBookDesigCode;  			if (searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].OperatingAirline != null) {  				ileg.EquipmentType = searchRS.PricedItineraries [i].OriginDestinationOptions [1].FlightSegments [oriSegments].OperatingAirline.Equipment;  			}  			FlightSements.Add (ileg);  		}  		flightDetailRestination.FlightSements = FlightSements;  		flightDetails.Add (flightDetailRestination);  	}  	if (rq.FlightSearchDetails.AirTravelType.Trim ().ToUpper () == "CIRCLE" || rq.FlightSearchDetails.AirTravelType.Trim ().ToUpper () == "OPENJAW") {  		for (int j = 0; j < searchRS.PricedItineraries [i].OriginDestinationOptions.Length; j++) {  			FlightDetail flightDetailMultidestination = new FlightDetail ();  			flightDetailMultidestination.JourneyType = "Multidestination";  			List<XTraTech.Entities.API.Search.FlightSegment> FlightSements = new List<XTraTech.Entities.API.Search.FlightSegment> ();  			for (int oriSegments = 0; oriSegments < searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments.Length; oriSegments++) {  				XTraTech.Entities.API.Search.FlightSegment ileg = new XTraTech.Entities.API.Search.FlightSegment ();  				ileg.JourneyDuration = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].JourneyDuration.ToString ();  				ileg.FlightCode = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].OperatingAirline.Code;  				ileg.FlightNumber = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].OperatingAirline.FlightNumber;  				ileg.Origin = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].DepartureAirportLocationCode;  				ileg.DepartureDateTime = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].DepartureDateTime;  				ileg.MarketingAirline = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].MarketingAirlineCode;  				ileg.OperatingAirline = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].OperatingAirline.Code;  				ileg.Destination = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].ArrivalAirportLocationCode;  				ileg.ArrivalDateime = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].ArrivalDateTime;  				ileg.CabinClass = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].CabinClassCode;  				ileg.BookingClass = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].ResBookDesigCode;  				if (searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].OperatingAirline != null) {  					ileg.EquipmentType = searchRS.PricedItineraries [i].OriginDestinationOptions [j].FlightSegments [oriSegments].OperatingAirline.Equipment;  				}  				FlightSements.Add (ileg);  			}  			flightDetailMultidestination.FlightSements = FlightSements;  			flightDetails.Add (flightDetailMultidestination);  		}  	}  	airItinerary.FlightDetails = flightDetails;  	itineraries.Add (airItinerary);  }  
Magic Number,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The following statement contains a magic number: for (int fareindex = 0; fareindex < searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns.Length; fareindex++) {  	XTraTech.Entities.API.Search.Fare fare = new XTraTech.Entities.API.Search.Fare ();  	if (searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerTypeQuantity.Code == PassengerType.ADT) {  		fare.PassengerType = "ADT";  	}  	if (searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerTypeQuantity.Code == PassengerType.CHD) {  		fare.PassengerType = "CHD";  	}  	if (searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerTypeQuantity.Code == PassengerType.INF) {  		fare.PassengerType = "INF";  	}  	fare.PassengerQuantity = searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerTypeQuantity.Quantity.ToString ();  	//fare.SinglePassangerBaseFare = new Money  	//{  	//    Amount = searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.Amount.ToString("#.##")'  	//    Currency = searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.CurrencyCode  	//};  	//Temp changes for demo  	int ROE = 1;  	fare.SinglePassangerBaseFare = new Money {  		Amount = ((Convert.ToDouble (searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerFare.EquivFare.Amount) - 5) * ROE).ToString ("#.##")'  		Currency = "USD"  	//searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.CurrencyCode  	};  	Money taxes = new Money ();  	decimal totaltax = 0m;  	Tax[] taxes2 = searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerFare.Taxes;  	for (int k = 0; k < taxes2.Length; k++) {  		Tax item = taxes2 [k];  		totaltax += Convert.ToDecimal (item.Amount);  	}  	//taxes.Amount = totaltax.ToString("#.##");  	//taxes.Currency = searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.CurrencyCode;  	//Temp changes for demo.  	taxes.Amount = (Convert.ToDouble (totaltax) * ROE).ToString ("#.##");  	taxes.Currency = "USD";  	// searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.CurrencyCode;  	fare.SinglePassangerTax = taxes;  	fares.Add (fare);  }  
Magic Number,MyFares,MyFaresSearch,C:\repos\cbharath_XTTSource\XTraTech\Suppliers\MyFares\MyFaresSearch.cs,Search,The following statement contains a magic number: fare.SinglePassangerBaseFare = new Money {  	Amount = ((Convert.ToDouble (searchRS.PricedItineraries [i].AirItineraryPricingInfo.PTC_FareBreakdowns [fareindex].PassengerFare.EquivFare.Amount) - 5) * ROE).ToString ("#.##")'  	Currency = "USD"  //searchRS.PricedItineraries[i].AirItineraryPricingInfo.PTC_FareBreakdowns[fareindex].PassengerFare.EquivFare.CurrencyCode  };  
