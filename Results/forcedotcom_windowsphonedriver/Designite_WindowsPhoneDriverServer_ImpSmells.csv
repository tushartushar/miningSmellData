Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,SetOption,Cyclomatic complexity of the method is 41
Complex Method,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,GetOSVersion,Cyclomatic complexity of the method is 17
Complex Method,WindowsPhoneDriverServer,Program,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Program.cs,Main,Cyclomatic complexity of the method is 10
Complex Method,WindowsPhoneDriverServer,Program,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Program.cs,ReserveUrl,Cyclomatic complexity of the method is 11
Long Parameter List,WindowsPhoneDriverServer.Internal,NativeMethods,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Internal\NativeMethods.cs,HttpQueryServiceConfiguration,The method has 8 parameters.
Long Parameter List,WindowsPhoneDriverServer.Internal,NativeMethods,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Internal\NativeMethods.cs,HttpSetServiceConfiguration,The method has 5 parameters.
Long Parameter List,WindowsPhoneDriverServer.Internal,NativeMethods,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Internal\NativeMethods.cs,HttpDeleteServiceConfiguration,The method has 5 parameters.
Long Statement,WindowsPhoneDriverServer,HttpApi,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\HttpApi.cs,GetReservedUrlList,The length of the statement  "			retVal = NativeMethods.HttpQueryServiceConfiguration (IntPtr.Zero' HttpServiceConfigId.HttpServiceConfigUrlAclInfo' inputConfigInfo' Marshal.SizeOf (inputConfigInfoSet)' outputConfigInfoBuffer' returnLength' out returnLength' IntPtr.Zero); " is 239.
Long Statement,WindowsPhoneDriverServer,HttpApi,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\HttpApi.cs,GetReservedUrlList,The length of the statement  "				retVal = NativeMethods.HttpQueryServiceConfiguration (IntPtr.Zero' HttpServiceConfigId.HttpServiceConfigUrlAclInfo' inputConfigInfo' Marshal.SizeOf (inputConfigInfoSet)' outputConfigInfoBuffer' returnLength' out returnLength' IntPtr.Zero); " is 239.
Long Statement,WindowsPhoneDriverServer,HttpApi,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\HttpApi.cs,GetReservedUrlList,The length of the statement  "				outputConfigInfo = (HttpServiceConfigUrlAclSet)Marshal.PtrToStructure (outputConfigInfoBuffer' typeof(HttpServiceConfigUrlAclSet)); " is 131.
Long Statement,WindowsPhoneDriverServer,HttpApi,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\HttpApi.cs,AddReservation,The length of the statement  "		retVal = NativeMethods.HttpSetServiceConfiguration (IntPtr.Zero' HttpServiceConfigId.HttpServiceConfigUrlAclInfo' inputConfigInfoBuffer' Marshal.SizeOf (inputConfigInfoSet)' IntPtr.Zero); " is 187.
Long Statement,WindowsPhoneDriverServer,HttpApi,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\HttpApi.cs,AddReservation,The length of the statement  "			retVal = NativeMethods.HttpDeleteServiceConfiguration (IntPtr.Zero' HttpServiceConfigId.HttpServiceConfigUrlAclInfo' inputConfigInfoBuffer' Marshal.SizeOf (inputConfigInfoSet)' IntPtr.Zero); " is 190.
Long Statement,WindowsPhoneDriverServer,HttpApi,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\HttpApi.cs,AddReservation,The length of the statement  "				retVal = NativeMethods.HttpSetServiceConfiguration (IntPtr.Zero' HttpServiceConfigId.HttpServiceConfigUrlAclInfo' inputConfigInfoBuffer' Marshal.SizeOf (inputConfigInfoSet)' IntPtr.Zero); " is 187.
Long Statement,WindowsPhoneDriverServer,HttpApi,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\HttpApi.cs,GetSecurityDescriptor,The length of the statement  "	CommonSecurityDescriptor securityDescriptor = new CommonSecurityDescriptor (false' false' ControlFlags.GroupDefaulted | ControlFlags.OwnerDefaulted | ControlFlags.DiscretionaryAclPresent' null' null' null' dacl); " is 212.
Long Statement,WindowsPhoneDriverServer,HttpApi,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\HttpApi.cs,GetDacl,The length of the statement  "	dacl.AddAccess (AccessControlType.Allow' securityIdentifiers' GenericExecute' InheritanceFlags.None' PropagationFlags.None); " is 124.
Long Statement,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,GetOSVersion,The length of the statement  "		this.operatingSystemVersion = string.Format (CultureInfo.InvariantCulture' "{0} ({1}.{2}.{3}) {4}"' operatingSystemDescription' versionInfo.dwMajorVersion' versionInfo.dwMinorVersion' versionInfo.dwBuildNumber' architecture.ToString ().ToLowerInvariant ()); " is 257.
Long Statement,WindowsPhoneDriverServer,Program,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Program.cs,Main,The length of the statement  "			httpServer = new RemoteServer (commandLineOptions.Port' commandLineOptions.UrlPath' commandLineOptions.DeviceName' commandLineOptions.DeviceControllerKind' logger); " is 164.
Long Statement,WindowsPhoneDriverServer,Program,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Program.cs,Main,The length of the statement  "				logger.Log (string.Format (CultureInfo.InvariantCulture' "Server started. RemoteWebDriver instances connect to {0}"' httpServer.ListenerPrefix)' LogLevel.Info); " is 160.
Long Statement,WindowsPhoneDriverServer,Program,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Program.cs,Main,The length of the statement  "				logger.Log (string.Format (CultureInfo.InvariantCulture' "Server could not be started. Reported error: {0}"' ex.Message)' LogLevel.Error); " is 138.
Long Statement,WindowsPhoneDriverServer,Program,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Program.cs,CheckForUrlReservation,The length of the statement  "			logger.Log (string.Format (CultureInfo.InvariantCulture' "URL reservation for '{0}' does not exist. Reserving URL."' httpServer.ListenerPrefix)); " is 145.
Magic Number,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,Options,The following statement contains a magic number: foreach (string arg in commandLineArguments) {  	string[] argumentValues = arg.Split (new string[] {  		":"'  		"="  	}' 2' StringSplitOptions.None);  	string argName = argumentValues [0];  	string argValue = "ignored";  	if (argumentValues.Length > 1) {  		argValue = argumentValues [1];  	}  	this.SetOption (argName' argValue);  }  
Magic Number,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,GetOSVersion,The following statement contains a magic number: if (Environment.OSVersion.Platform == PlatformID.Win32NT) {  	string operatingSystemDescription = string.Empty;  	NativeMethods.OSVersionInfoEx versionInfo = new NativeMethods.OSVersionInfoEx ();  	versionInfo.dwOSVersionInfoSize = Marshal.SizeOf (versionInfo);  	NativeMethods.GetVersionEx (ref versionInfo);  	NativeMethods.SystemInfo sysInfo = new NativeMethods.SystemInfo ();  	NativeMethods.GetSystemInfo (out sysInfo);  	NativeMethods.VersionNT versionType = (NativeMethods.VersionNT)versionInfo.wProductType;  	NativeMethods.ProcessorArchitecture architecture = (NativeMethods.ProcessorArchitecture)sysInfo.processorArchitecture;  	if (versionInfo.dwMajorVersion == 5) {  		if (versionInfo.dwMinorVersion == 1) {  			operatingSystemDescription = "Windows XP";  		}  		else if (versionInfo.dwMinorVersion == 2) {  			int isServerR2 = NativeMethods.GetSystemMetrics ((int)NativeMethods.SystemMetrics.ServerR2);  			if (versionType == NativeMethods.VersionNT.Workstation && architecture == NativeMethods.ProcessorArchitecture.AMD64) {  				operatingSystemDescription = "Windows XP x64 Edition";  			}  			else if (versionType != NativeMethods.VersionNT.Workstation && isServerR2 == 0) {  				operatingSystemDescription = "Windows Server 2003";  			}  			else if (versionType == NativeMethods.VersionNT.Workstation && isServerR2 != 0) {  				operatingSystemDescription = "Windows Server 2003 R2";  			}  		}  		else {  			operatingSystemDescription = "Windows 2000";  		}  	}  	else if (versionInfo.dwMajorVersion == 6) {  		if (versionInfo.dwMinorVersion == 0) {  			if (versionType == NativeMethods.VersionNT.Workstation) {  				operatingSystemDescription = "Windows Vista";  			}  			else {  				operatingSystemDescription = "Windows Server 2008";  			}  		}  		else if (versionInfo.dwMinorVersion == 1) {  			if (versionType == NativeMethods.VersionNT.Workstation) {  				operatingSystemDescription = "Windows 7";  			}  			else {  				operatingSystemDescription = "Windows Server 2008 R2";  			}  		}  		else if (versionInfo.dwMinorVersion == 2) {  			if (versionType == NativeMethods.VersionNT.Workstation) {  				operatingSystemDescription = "Windows 8";  			}  			else {  				operatingSystemDescription = "Windows Server 2012";  			}  		}  		else {  			if (versionType == NativeMethods.VersionNT.Workstation) {  				operatingSystemDescription = "Windows 8.1";  			}  			else {  				operatingSystemDescription = "Windows Server 2012 R2";  			}  		}  	}  	else {  		operatingSystemDescription = "Unsupported Windows NT version";  	}  	if (Environment.OSVersion.ServicePack.Length > 0) {  		operatingSystemDescription += " " + Environment.OSVersion.ServicePack;  	}  	this.operatingSystemVersion = string.Format (CultureInfo.InvariantCulture' "{0} ({1}.{2}.{3}) {4}"' operatingSystemDescription' versionInfo.dwMajorVersion' versionInfo.dwMinorVersion' versionInfo.dwBuildNumber' architecture.ToString ().ToLowerInvariant ());  }  
Magic Number,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,GetOSVersion,The following statement contains a magic number: if (Environment.OSVersion.Platform == PlatformID.Win32NT) {  	string operatingSystemDescription = string.Empty;  	NativeMethods.OSVersionInfoEx versionInfo = new NativeMethods.OSVersionInfoEx ();  	versionInfo.dwOSVersionInfoSize = Marshal.SizeOf (versionInfo);  	NativeMethods.GetVersionEx (ref versionInfo);  	NativeMethods.SystemInfo sysInfo = new NativeMethods.SystemInfo ();  	NativeMethods.GetSystemInfo (out sysInfo);  	NativeMethods.VersionNT versionType = (NativeMethods.VersionNT)versionInfo.wProductType;  	NativeMethods.ProcessorArchitecture architecture = (NativeMethods.ProcessorArchitecture)sysInfo.processorArchitecture;  	if (versionInfo.dwMajorVersion == 5) {  		if (versionInfo.dwMinorVersion == 1) {  			operatingSystemDescription = "Windows XP";  		}  		else if (versionInfo.dwMinorVersion == 2) {  			int isServerR2 = NativeMethods.GetSystemMetrics ((int)NativeMethods.SystemMetrics.ServerR2);  			if (versionType == NativeMethods.VersionNT.Workstation && architecture == NativeMethods.ProcessorArchitecture.AMD64) {  				operatingSystemDescription = "Windows XP x64 Edition";  			}  			else if (versionType != NativeMethods.VersionNT.Workstation && isServerR2 == 0) {  				operatingSystemDescription = "Windows Server 2003";  			}  			else if (versionType == NativeMethods.VersionNT.Workstation && isServerR2 != 0) {  				operatingSystemDescription = "Windows Server 2003 R2";  			}  		}  		else {  			operatingSystemDescription = "Windows 2000";  		}  	}  	else if (versionInfo.dwMajorVersion == 6) {  		if (versionInfo.dwMinorVersion == 0) {  			if (versionType == NativeMethods.VersionNT.Workstation) {  				operatingSystemDescription = "Windows Vista";  			}  			else {  				operatingSystemDescription = "Windows Server 2008";  			}  		}  		else if (versionInfo.dwMinorVersion == 1) {  			if (versionType == NativeMethods.VersionNT.Workstation) {  				operatingSystemDescription = "Windows 7";  			}  			else {  				operatingSystemDescription = "Windows Server 2008 R2";  			}  		}  		else if (versionInfo.dwMinorVersion == 2) {  			if (versionType == NativeMethods.VersionNT.Workstation) {  				operatingSystemDescription = "Windows 8";  			}  			else {  				operatingSystemDescription = "Windows Server 2012";  			}  		}  		else {  			if (versionType == NativeMethods.VersionNT.Workstation) {  				operatingSystemDescription = "Windows 8.1";  			}  			else {  				operatingSystemDescription = "Windows Server 2012 R2";  			}  		}  	}  	else {  		operatingSystemDescription = "Unsupported Windows NT version";  	}  	if (Environment.OSVersion.ServicePack.Length > 0) {  		operatingSystemDescription += " " + Environment.OSVersion.ServicePack;  	}  	this.operatingSystemVersion = string.Format (CultureInfo.InvariantCulture' "{0} ({1}.{2}.{3}) {4}"' operatingSystemDescription' versionInfo.dwMajorVersion' versionInfo.dwMinorVersion' versionInfo.dwBuildNumber' architecture.ToString ().ToLowerInvariant ());  }  
Magic Number,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,GetOSVersion,The following statement contains a magic number: if (Environment.OSVersion.Platform == PlatformID.Win32NT) {  	string operatingSystemDescription = string.Empty;  	NativeMethods.OSVersionInfoEx versionInfo = new NativeMethods.OSVersionInfoEx ();  	versionInfo.dwOSVersionInfoSize = Marshal.SizeOf (versionInfo);  	NativeMethods.GetVersionEx (ref versionInfo);  	NativeMethods.SystemInfo sysInfo = new NativeMethods.SystemInfo ();  	NativeMethods.GetSystemInfo (out sysInfo);  	NativeMethods.VersionNT versionType = (NativeMethods.VersionNT)versionInfo.wProductType;  	NativeMethods.ProcessorArchitecture architecture = (NativeMethods.ProcessorArchitecture)sysInfo.processorArchitecture;  	if (versionInfo.dwMajorVersion == 5) {  		if (versionInfo.dwMinorVersion == 1) {  			operatingSystemDescription = "Windows XP";  		}  		else if (versionInfo.dwMinorVersion == 2) {  			int isServerR2 = NativeMethods.GetSystemMetrics ((int)NativeMethods.SystemMetrics.ServerR2);  			if (versionType == NativeMethods.VersionNT.Workstation && architecture == NativeMethods.ProcessorArchitecture.AMD64) {  				operatingSystemDescription = "Windows XP x64 Edition";  			}  			else if (versionType != NativeMethods.VersionNT.Workstation && isServerR2 == 0) {  				operatingSystemDescription = "Windows Server 2003";  			}  			else if (versionType == NativeMethods.VersionNT.Workstation && isServerR2 != 0) {  				operatingSystemDescription = "Windows Server 2003 R2";  			}  		}  		else {  			operatingSystemDescription = "Windows 2000";  		}  	}  	else if (versionInfo.dwMajorVersion == 6) {  		if (versionInfo.dwMinorVersion == 0) {  			if (versionType == NativeMethods.VersionNT.Workstation) {  				operatingSystemDescription = "Windows Vista";  			}  			else {  				operatingSystemDescription = "Windows Server 2008";  			}  		}  		else if (versionInfo.dwMinorVersion == 1) {  			if (versionType == NativeMethods.VersionNT.Workstation) {  				operatingSystemDescription = "Windows 7";  			}  			else {  				operatingSystemDescription = "Windows Server 2008 R2";  			}  		}  		else if (versionInfo.dwMinorVersion == 2) {  			if (versionType == NativeMethods.VersionNT.Workstation) {  				operatingSystemDescription = "Windows 8";  			}  			else {  				operatingSystemDescription = "Windows Server 2012";  			}  		}  		else {  			if (versionType == NativeMethods.VersionNT.Workstation) {  				operatingSystemDescription = "Windows 8.1";  			}  			else {  				operatingSystemDescription = "Windows Server 2012 R2";  			}  		}  	}  	else {  		operatingSystemDescription = "Unsupported Windows NT version";  	}  	if (Environment.OSVersion.ServicePack.Length > 0) {  		operatingSystemDescription += " " + Environment.OSVersion.ServicePack;  	}  	this.operatingSystemVersion = string.Format (CultureInfo.InvariantCulture' "{0} ({1}.{2}.{3}) {4}"' operatingSystemDescription' versionInfo.dwMajorVersion' versionInfo.dwMinorVersion' versionInfo.dwBuildNumber' architecture.ToString ().ToLowerInvariant ());  }  
Magic Number,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,GetOSVersion,The following statement contains a magic number: if (Environment.OSVersion.Platform == PlatformID.Win32NT) {  	string operatingSystemDescription = string.Empty;  	NativeMethods.OSVersionInfoEx versionInfo = new NativeMethods.OSVersionInfoEx ();  	versionInfo.dwOSVersionInfoSize = Marshal.SizeOf (versionInfo);  	NativeMethods.GetVersionEx (ref versionInfo);  	NativeMethods.SystemInfo sysInfo = new NativeMethods.SystemInfo ();  	NativeMethods.GetSystemInfo (out sysInfo);  	NativeMethods.VersionNT versionType = (NativeMethods.VersionNT)versionInfo.wProductType;  	NativeMethods.ProcessorArchitecture architecture = (NativeMethods.ProcessorArchitecture)sysInfo.processorArchitecture;  	if (versionInfo.dwMajorVersion == 5) {  		if (versionInfo.dwMinorVersion == 1) {  			operatingSystemDescription = "Windows XP";  		}  		else if (versionInfo.dwMinorVersion == 2) {  			int isServerR2 = NativeMethods.GetSystemMetrics ((int)NativeMethods.SystemMetrics.ServerR2);  			if (versionType == NativeMethods.VersionNT.Workstation && architecture == NativeMethods.ProcessorArchitecture.AMD64) {  				operatingSystemDescription = "Windows XP x64 Edition";  			}  			else if (versionType != NativeMethods.VersionNT.Workstation && isServerR2 == 0) {  				operatingSystemDescription = "Windows Server 2003";  			}  			else if (versionType == NativeMethods.VersionNT.Workstation && isServerR2 != 0) {  				operatingSystemDescription = "Windows Server 2003 R2";  			}  		}  		else {  			operatingSystemDescription = "Windows 2000";  		}  	}  	else if (versionInfo.dwMajorVersion == 6) {  		if (versionInfo.dwMinorVersion == 0) {  			if (versionType == NativeMethods.VersionNT.Workstation) {  				operatingSystemDescription = "Windows Vista";  			}  			else {  				operatingSystemDescription = "Windows Server 2008";  			}  		}  		else if (versionInfo.dwMinorVersion == 1) {  			if (versionType == NativeMethods.VersionNT.Workstation) {  				operatingSystemDescription = "Windows 7";  			}  			else {  				operatingSystemDescription = "Windows Server 2008 R2";  			}  		}  		else if (versionInfo.dwMinorVersion == 2) {  			if (versionType == NativeMethods.VersionNT.Workstation) {  				operatingSystemDescription = "Windows 8";  			}  			else {  				operatingSystemDescription = "Windows Server 2012";  			}  		}  		else {  			if (versionType == NativeMethods.VersionNT.Workstation) {  				operatingSystemDescription = "Windows 8.1";  			}  			else {  				operatingSystemDescription = "Windows Server 2012 R2";  			}  		}  	}  	else {  		operatingSystemDescription = "Unsupported Windows NT version";  	}  	if (Environment.OSVersion.ServicePack.Length > 0) {  		operatingSystemDescription += " " + Environment.OSVersion.ServicePack;  	}  	this.operatingSystemVersion = string.Format (CultureInfo.InvariantCulture' "{0} ({1}.{2}.{3}) {4}"' operatingSystemDescription' versionInfo.dwMajorVersion' versionInfo.dwMinorVersion' versionInfo.dwBuildNumber' architecture.ToString ().ToLowerInvariant ());  }  
Magic Number,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,GetOSVersion,The following statement contains a magic number: if (versionInfo.dwMajorVersion == 5) {  	if (versionInfo.dwMinorVersion == 1) {  		operatingSystemDescription = "Windows XP";  	}  	else if (versionInfo.dwMinorVersion == 2) {  		int isServerR2 = NativeMethods.GetSystemMetrics ((int)NativeMethods.SystemMetrics.ServerR2);  		if (versionType == NativeMethods.VersionNT.Workstation && architecture == NativeMethods.ProcessorArchitecture.AMD64) {  			operatingSystemDescription = "Windows XP x64 Edition";  		}  		else if (versionType != NativeMethods.VersionNT.Workstation && isServerR2 == 0) {  			operatingSystemDescription = "Windows Server 2003";  		}  		else if (versionType == NativeMethods.VersionNT.Workstation && isServerR2 != 0) {  			operatingSystemDescription = "Windows Server 2003 R2";  		}  	}  	else {  		operatingSystemDescription = "Windows 2000";  	}  }  else if (versionInfo.dwMajorVersion == 6) {  	if (versionInfo.dwMinorVersion == 0) {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows Vista";  		}  		else {  			operatingSystemDescription = "Windows Server 2008";  		}  	}  	else if (versionInfo.dwMinorVersion == 1) {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows 7";  		}  		else {  			operatingSystemDescription = "Windows Server 2008 R2";  		}  	}  	else if (versionInfo.dwMinorVersion == 2) {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows 8";  		}  		else {  			operatingSystemDescription = "Windows Server 2012";  		}  	}  	else {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows 8.1";  		}  		else {  			operatingSystemDescription = "Windows Server 2012 R2";  		}  	}  }  else {  	operatingSystemDescription = "Unsupported Windows NT version";  }  
Magic Number,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,GetOSVersion,The following statement contains a magic number: if (versionInfo.dwMajorVersion == 5) {  	if (versionInfo.dwMinorVersion == 1) {  		operatingSystemDescription = "Windows XP";  	}  	else if (versionInfo.dwMinorVersion == 2) {  		int isServerR2 = NativeMethods.GetSystemMetrics ((int)NativeMethods.SystemMetrics.ServerR2);  		if (versionType == NativeMethods.VersionNT.Workstation && architecture == NativeMethods.ProcessorArchitecture.AMD64) {  			operatingSystemDescription = "Windows XP x64 Edition";  		}  		else if (versionType != NativeMethods.VersionNT.Workstation && isServerR2 == 0) {  			operatingSystemDescription = "Windows Server 2003";  		}  		else if (versionType == NativeMethods.VersionNT.Workstation && isServerR2 != 0) {  			operatingSystemDescription = "Windows Server 2003 R2";  		}  	}  	else {  		operatingSystemDescription = "Windows 2000";  	}  }  else if (versionInfo.dwMajorVersion == 6) {  	if (versionInfo.dwMinorVersion == 0) {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows Vista";  		}  		else {  			operatingSystemDescription = "Windows Server 2008";  		}  	}  	else if (versionInfo.dwMinorVersion == 1) {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows 7";  		}  		else {  			operatingSystemDescription = "Windows Server 2008 R2";  		}  	}  	else if (versionInfo.dwMinorVersion == 2) {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows 8";  		}  		else {  			operatingSystemDescription = "Windows Server 2012";  		}  	}  	else {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows 8.1";  		}  		else {  			operatingSystemDescription = "Windows Server 2012 R2";  		}  	}  }  else {  	operatingSystemDescription = "Unsupported Windows NT version";  }  
Magic Number,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,GetOSVersion,The following statement contains a magic number: if (versionInfo.dwMajorVersion == 5) {  	if (versionInfo.dwMinorVersion == 1) {  		operatingSystemDescription = "Windows XP";  	}  	else if (versionInfo.dwMinorVersion == 2) {  		int isServerR2 = NativeMethods.GetSystemMetrics ((int)NativeMethods.SystemMetrics.ServerR2);  		if (versionType == NativeMethods.VersionNT.Workstation && architecture == NativeMethods.ProcessorArchitecture.AMD64) {  			operatingSystemDescription = "Windows XP x64 Edition";  		}  		else if (versionType != NativeMethods.VersionNT.Workstation && isServerR2 == 0) {  			operatingSystemDescription = "Windows Server 2003";  		}  		else if (versionType == NativeMethods.VersionNT.Workstation && isServerR2 != 0) {  			operatingSystemDescription = "Windows Server 2003 R2";  		}  	}  	else {  		operatingSystemDescription = "Windows 2000";  	}  }  else if (versionInfo.dwMajorVersion == 6) {  	if (versionInfo.dwMinorVersion == 0) {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows Vista";  		}  		else {  			operatingSystemDescription = "Windows Server 2008";  		}  	}  	else if (versionInfo.dwMinorVersion == 1) {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows 7";  		}  		else {  			operatingSystemDescription = "Windows Server 2008 R2";  		}  	}  	else if (versionInfo.dwMinorVersion == 2) {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows 8";  		}  		else {  			operatingSystemDescription = "Windows Server 2012";  		}  	}  	else {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows 8.1";  		}  		else {  			operatingSystemDescription = "Windows Server 2012 R2";  		}  	}  }  else {  	operatingSystemDescription = "Unsupported Windows NT version";  }  
Magic Number,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,GetOSVersion,The following statement contains a magic number: if (versionInfo.dwMajorVersion == 5) {  	if (versionInfo.dwMinorVersion == 1) {  		operatingSystemDescription = "Windows XP";  	}  	else if (versionInfo.dwMinorVersion == 2) {  		int isServerR2 = NativeMethods.GetSystemMetrics ((int)NativeMethods.SystemMetrics.ServerR2);  		if (versionType == NativeMethods.VersionNT.Workstation && architecture == NativeMethods.ProcessorArchitecture.AMD64) {  			operatingSystemDescription = "Windows XP x64 Edition";  		}  		else if (versionType != NativeMethods.VersionNT.Workstation && isServerR2 == 0) {  			operatingSystemDescription = "Windows Server 2003";  		}  		else if (versionType == NativeMethods.VersionNT.Workstation && isServerR2 != 0) {  			operatingSystemDescription = "Windows Server 2003 R2";  		}  	}  	else {  		operatingSystemDescription = "Windows 2000";  	}  }  else if (versionInfo.dwMajorVersion == 6) {  	if (versionInfo.dwMinorVersion == 0) {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows Vista";  		}  		else {  			operatingSystemDescription = "Windows Server 2008";  		}  	}  	else if (versionInfo.dwMinorVersion == 1) {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows 7";  		}  		else {  			operatingSystemDescription = "Windows Server 2008 R2";  		}  	}  	else if (versionInfo.dwMinorVersion == 2) {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows 8";  		}  		else {  			operatingSystemDescription = "Windows Server 2012";  		}  	}  	else {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows 8.1";  		}  		else {  			operatingSystemDescription = "Windows Server 2012 R2";  		}  	}  }  else {  	operatingSystemDescription = "Unsupported Windows NT version";  }  
Magic Number,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,GetOSVersion,The following statement contains a magic number: if (versionInfo.dwMinorVersion == 1) {  	operatingSystemDescription = "Windows XP";  }  else if (versionInfo.dwMinorVersion == 2) {  	int isServerR2 = NativeMethods.GetSystemMetrics ((int)NativeMethods.SystemMetrics.ServerR2);  	if (versionType == NativeMethods.VersionNT.Workstation && architecture == NativeMethods.ProcessorArchitecture.AMD64) {  		operatingSystemDescription = "Windows XP x64 Edition";  	}  	else if (versionType != NativeMethods.VersionNT.Workstation && isServerR2 == 0) {  		operatingSystemDescription = "Windows Server 2003";  	}  	else if (versionType == NativeMethods.VersionNT.Workstation && isServerR2 != 0) {  		operatingSystemDescription = "Windows Server 2003 R2";  	}  }  else {  	operatingSystemDescription = "Windows 2000";  }  
Magic Number,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,GetOSVersion,The following statement contains a magic number: if (versionInfo.dwMinorVersion == 2) {  	int isServerR2 = NativeMethods.GetSystemMetrics ((int)NativeMethods.SystemMetrics.ServerR2);  	if (versionType == NativeMethods.VersionNT.Workstation && architecture == NativeMethods.ProcessorArchitecture.AMD64) {  		operatingSystemDescription = "Windows XP x64 Edition";  	}  	else if (versionType != NativeMethods.VersionNT.Workstation && isServerR2 == 0) {  		operatingSystemDescription = "Windows Server 2003";  	}  	else if (versionType == NativeMethods.VersionNT.Workstation && isServerR2 != 0) {  		operatingSystemDescription = "Windows Server 2003 R2";  	}  }  else {  	operatingSystemDescription = "Windows 2000";  }  
Magic Number,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,GetOSVersion,The following statement contains a magic number: if (versionInfo.dwMajorVersion == 6) {  	if (versionInfo.dwMinorVersion == 0) {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows Vista";  		}  		else {  			operatingSystemDescription = "Windows Server 2008";  		}  	}  	else if (versionInfo.dwMinorVersion == 1) {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows 7";  		}  		else {  			operatingSystemDescription = "Windows Server 2008 R2";  		}  	}  	else if (versionInfo.dwMinorVersion == 2) {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows 8";  		}  		else {  			operatingSystemDescription = "Windows Server 2012";  		}  	}  	else {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows 8.1";  		}  		else {  			operatingSystemDescription = "Windows Server 2012 R2";  		}  	}  }  else {  	operatingSystemDescription = "Unsupported Windows NT version";  }  
Magic Number,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,GetOSVersion,The following statement contains a magic number: if (versionInfo.dwMajorVersion == 6) {  	if (versionInfo.dwMinorVersion == 0) {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows Vista";  		}  		else {  			operatingSystemDescription = "Windows Server 2008";  		}  	}  	else if (versionInfo.dwMinorVersion == 1) {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows 7";  		}  		else {  			operatingSystemDescription = "Windows Server 2008 R2";  		}  	}  	else if (versionInfo.dwMinorVersion == 2) {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows 8";  		}  		else {  			operatingSystemDescription = "Windows Server 2012";  		}  	}  	else {  		if (versionType == NativeMethods.VersionNT.Workstation) {  			operatingSystemDescription = "Windows 8.1";  		}  		else {  			operatingSystemDescription = "Windows Server 2012 R2";  		}  	}  }  else {  	operatingSystemDescription = "Unsupported Windows NT version";  }  
Magic Number,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,GetOSVersion,The following statement contains a magic number: if (versionInfo.dwMinorVersion == 0) {  	if (versionType == NativeMethods.VersionNT.Workstation) {  		operatingSystemDescription = "Windows Vista";  	}  	else {  		operatingSystemDescription = "Windows Server 2008";  	}  }  else if (versionInfo.dwMinorVersion == 1) {  	if (versionType == NativeMethods.VersionNT.Workstation) {  		operatingSystemDescription = "Windows 7";  	}  	else {  		operatingSystemDescription = "Windows Server 2008 R2";  	}  }  else if (versionInfo.dwMinorVersion == 2) {  	if (versionType == NativeMethods.VersionNT.Workstation) {  		operatingSystemDescription = "Windows 8";  	}  	else {  		operatingSystemDescription = "Windows Server 2012";  	}  }  else {  	if (versionType == NativeMethods.VersionNT.Workstation) {  		operatingSystemDescription = "Windows 8.1";  	}  	else {  		operatingSystemDescription = "Windows Server 2012 R2";  	}  }  
Magic Number,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,GetOSVersion,The following statement contains a magic number: if (versionInfo.dwMinorVersion == 1) {  	if (versionType == NativeMethods.VersionNT.Workstation) {  		operatingSystemDescription = "Windows 7";  	}  	else {  		operatingSystemDescription = "Windows Server 2008 R2";  	}  }  else if (versionInfo.dwMinorVersion == 2) {  	if (versionType == NativeMethods.VersionNT.Workstation) {  		operatingSystemDescription = "Windows 8";  	}  	else {  		operatingSystemDescription = "Windows Server 2012";  	}  }  else {  	if (versionType == NativeMethods.VersionNT.Workstation) {  		operatingSystemDescription = "Windows 8.1";  	}  	else {  		operatingSystemDescription = "Windows Server 2012 R2";  	}  }  
Magic Number,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,GetOSVersion,The following statement contains a magic number: if (versionInfo.dwMinorVersion == 2) {  	if (versionType == NativeMethods.VersionNT.Workstation) {  		operatingSystemDescription = "Windows 8";  	}  	else {  		operatingSystemDescription = "Windows Server 2012";  	}  }  else {  	if (versionType == NativeMethods.VersionNT.Workstation) {  		operatingSystemDescription = "Windows 8.1";  	}  	else {  		operatingSystemDescription = "Windows Server 2012 R2";  	}  }  
Magic Number,WindowsPhoneDriverServer,Program,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Program.cs,Main,The following statement contains a magic number: if (commandLineOptions.ReserveUrl) {  	bool urlReserved = ReserveUrl (commandLineOptions.UrlToReserve' true);  	if (!urlReserved) {  		Environment.ExitCode = 1;  	}  }  else {  	LogVersionDetails (commandLineOptions);  	userName = commandLineOptions.UserName;  	password = commandLineOptions.Password;  	ignoreRemoteShutdown = commandLineOptions.IgnoreRemoteShutdown;  	if (string.IsNullOrEmpty (commandLineOptions.DeviceName)) {  		httpServer = new RemoteServer (commandLineOptions.Port' commandLineOptions.UrlPath' logger);  	}  	else {  		httpServer = new RemoteServer (commandLineOptions.Port' commandLineOptions.UrlPath' commandLineOptions.DeviceName' commandLineOptions.DeviceControllerKind' logger);  	}  	httpServer.ShutdownRequested += new EventHandler (OnRemoteServerShutdownRequested);  	bool urlReservationExists = CheckForUrlReservation (commandLineOptions);  	if (urlReservationExists) {  		if (!string.IsNullOrEmpty (commandLineOptions.HubLocation)) {  			RegisterWithHub (commandLineOptions.HubLocation);  		}  		try {  			httpServer.StartListening ();  			logger.Log (string.Format (CultureInfo.InvariantCulture' "Server started. RemoteWebDriver instances connect to {0}"' httpServer.ListenerPrefix)' LogLevel.Info);  			Console.CancelKeyPress += new ConsoleCancelEventHandler (Console_CancelKeyPress);  		}  		catch (WindowsPhoneDriverException ex) {  			logger.Log (string.Format (CultureInfo.InvariantCulture' "Server could not be started. Reported error: {0}"' ex.Message)' LogLevel.Error);  			continueRunning = false;  		}  		while (continueRunning) {  			System.Threading.Thread.Sleep (100);  		}  	}  }  
Magic Number,WindowsPhoneDriverServer,Program,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Program.cs,Main,The following statement contains a magic number: if (urlReservationExists) {  	if (!string.IsNullOrEmpty (commandLineOptions.HubLocation)) {  		RegisterWithHub (commandLineOptions.HubLocation);  	}  	try {  		httpServer.StartListening ();  		logger.Log (string.Format (CultureInfo.InvariantCulture' "Server started. RemoteWebDriver instances connect to {0}"' httpServer.ListenerPrefix)' LogLevel.Info);  		Console.CancelKeyPress += new ConsoleCancelEventHandler (Console_CancelKeyPress);  	}  	catch (WindowsPhoneDriverException ex) {  		logger.Log (string.Format (CultureInfo.InvariantCulture' "Server could not be started. Reported error: {0}"' ex.Message)' LogLevel.Error);  		continueRunning = false;  	}  	while (continueRunning) {  		System.Threading.Thread.Sleep (100);  	}  }  
Magic Number,WindowsPhoneDriverServer,Program,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Program.cs,Main,The following statement contains a magic number: while (continueRunning) {  	System.Threading.Thread.Sleep (100);  }  
Magic Number,WindowsPhoneDriverServer,Program,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Program.cs,Main,The following statement contains a magic number: System.Threading.Thread.Sleep (100);  
Magic Number,WindowsPhoneDriverServer,Program,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Program.cs,ReserveUrl,The following statement contains a magic number: if (!isAdmin) {  	using (Process reserverProcess = new Process ()) {  		ProcessStartInfo reserveInfo = new ProcessStartInfo ();  		string fileName = Assembly.GetExecutingAssembly ().Location;  		reserveInfo.WorkingDirectory = Environment.CurrentDirectory;  		reserveInfo.FileName = fileName;  		reserveInfo.Arguments = string.Format (CultureInfo.InvariantCulture' "/reserve:{0}"' reservePath);  		if (Environment.OSVersion.Version.Major >= 6) {  			logger.Log ("Current user is not an administrator. Requesting elevation.");  			reserveInfo.Verb = "runas";  			reserveInfo.ErrorDialog = true;  			reserveInfo.WindowStyle = ProcessWindowStyle.Hidden;  		}  		else {  			logger.Log ("Current user is not an administrator. Attempting login.");  			reserveInfo.UseShellExecute = false;  			reserveInfo.CreateNoWindow = true;  			reserveInfo.UserName = userName;  			using (SecureString securePassword = new SecureString ()) {  				foreach (char passwordChar in password.ToCharArray ()) {  					securePassword.AppendChar (passwordChar);  				}  				reserveInfo.Password = securePassword;  			}  		}  		reserverProcess.StartInfo = reserveInfo;  		try {  			reserverProcess.Start ();  			reserverProcess.WaitForExit ();  			if (reserverProcess.ExitCode != 0) {  				urlReserved = false;  			}  		}  		catch (Win32Exception ex) {  			logger.Log ("Error reserving URL: " + ex.Message' LogLevel.Error);  			urlReserved = false;  		}  	}  }  else {  	try {  		HttpApi.AddReservation (reservePath' "BUILTIN\\Users");  	}  	catch (Win32Exception) {  		urlReserved = false;  	}  }  
Magic Number,WindowsPhoneDriverServer,Program,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Program.cs,ReserveUrl,The following statement contains a magic number: using (Process reserverProcess = new Process ()) {  	ProcessStartInfo reserveInfo = new ProcessStartInfo ();  	string fileName = Assembly.GetExecutingAssembly ().Location;  	reserveInfo.WorkingDirectory = Environment.CurrentDirectory;  	reserveInfo.FileName = fileName;  	reserveInfo.Arguments = string.Format (CultureInfo.InvariantCulture' "/reserve:{0}"' reservePath);  	if (Environment.OSVersion.Version.Major >= 6) {  		logger.Log ("Current user is not an administrator. Requesting elevation.");  		reserveInfo.Verb = "runas";  		reserveInfo.ErrorDialog = true;  		reserveInfo.WindowStyle = ProcessWindowStyle.Hidden;  	}  	else {  		logger.Log ("Current user is not an administrator. Attempting login.");  		reserveInfo.UseShellExecute = false;  		reserveInfo.CreateNoWindow = true;  		reserveInfo.UserName = userName;  		using (SecureString securePassword = new SecureString ()) {  			foreach (char passwordChar in password.ToCharArray ()) {  				securePassword.AppendChar (passwordChar);  			}  			reserveInfo.Password = securePassword;  		}  	}  	reserverProcess.StartInfo = reserveInfo;  	try {  		reserverProcess.Start ();  		reserverProcess.WaitForExit ();  		if (reserverProcess.ExitCode != 0) {  			urlReserved = false;  		}  	}  	catch (Win32Exception ex) {  		logger.Log ("Error reserving URL: " + ex.Message' LogLevel.Error);  		urlReserved = false;  	}  }  
Magic Number,WindowsPhoneDriverServer,Program,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Program.cs,ReserveUrl,The following statement contains a magic number: if (Environment.OSVersion.Version.Major >= 6) {  	logger.Log ("Current user is not an administrator. Requesting elevation.");  	reserveInfo.Verb = "runas";  	reserveInfo.ErrorDialog = true;  	reserveInfo.WindowStyle = ProcessWindowStyle.Hidden;  }  else {  	logger.Log ("Current user is not an administrator. Attempting login.");  	reserveInfo.UseShellExecute = false;  	reserveInfo.CreateNoWindow = true;  	reserveInfo.UserName = userName;  	using (SecureString securePassword = new SecureString ()) {  		foreach (char passwordChar in password.ToCharArray ()) {  			securePassword.AppendChar (passwordChar);  		}  		reserveInfo.Password = securePassword;  	}  }  
Missing Default,WindowsPhoneDriverServer,Options,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriverServer\Options.cs,SetOption,The following switch statement is missing a default case: switch (argumentName) {  case PortCommandLineOption:  	this.port = int.Parse (value' CultureInfo.InvariantCulture);  	break;  case UserNameCommandLineOption:  	this.userName = value;  	break;  case PasswordCommandLineOption:  	this.password = value;  	break;  case ReserveUrlCommandLineOption:  	this.reserveUrl = true;  	this.urlToReserve = value;  	break;  case RemoteShutdownCommandLineOption:  	this.ignoreRemoteShutdown = value.ToUpperInvariant () == "IGNORE";  	break;  case HubCommandLineOption:  	this.hubLocation = value;  	break;  case UrlPathCommandLineOption:  	this.urlPath = value;  	break;  case LogLevelCommandLineOption:  	LogLevel level = LogLevel.Info;  	if (Enum.TryParse<LogLevel> (value' true' out level)) {  		this.logLevel = level;  	}  	break;  case UseDeviceCommandLineOption:  	this.controllerKind = ControllerKind.Device;  	break;  case DeviceNameCommandLineOption:  	this.deviceName = value;  	break;  case HelpCommandLineOption:  case HelpShortcutCommandLineOption:  	this.helpRequested = true;  	break;  case VersionCommandLineOption:  case VersionShortcutCommandLineOption:  	this.versionRequested = true;  	break;  }  
