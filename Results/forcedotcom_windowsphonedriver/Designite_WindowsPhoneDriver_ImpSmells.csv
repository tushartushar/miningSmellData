Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WindowsPhoneDriver,ApplicationArchiveInfo,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\ApplicationArchiveInfo.cs,InsertFileIntoApplicationArchive,Cyclomatic complexity of the method is 8
Complex Method,WindowsPhoneDriver,ApplicationArchiveInfo,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\ApplicationArchiveInfo.cs,ExtractFileFromApplicationArchive,Cyclomatic complexity of the method is 8
Complex Method,WindowsPhoneDriver,RemoteServer,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\RemoteServer.cs,FindDispatcherTable,Cyclomatic complexity of the method is 9
Complex Method,WindowsPhoneDriver,WindowsPhoneCommandExecutor,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\WindowsPhoneCommandExecutor.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,WindowsPhoneDriver,WindowsPhoneCommandExecutor,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\WindowsPhoneCommandExecutor.cs,SendMessage,Cyclomatic complexity of the method is 10
Long Parameter List,WindowsPhoneDriver,RemoteServer,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\RemoteServer.cs,RemoteServer,The method has 5 parameters.
Long Parameter List,WindowsPhoneDriver,RemoteServer,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\RemoteServer.cs,RemoteServer,The method has 5 parameters.
Long Statement,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,Start,The length of the statement  "		throw new WindowsPhoneDriverException (string.Format (CultureInfo.InvariantCulture' "Found no matching devices for name '{0}'"' this.deviceName)); " is 146.
Long Statement,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,Start,The length of the statement  "			this.SendStatusUpdate ("WARNING! Exception encountered when connecting to device. HRESULT: {0:X}' message: {1}"' ex.HResult' ex.Message); " is 137.
Long Statement,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,Start,The length of the statement  "				this.browserApplication = device.InstallApplication (applicationId' applicationId' "WindowsPhoneDriverBrowser"' iconPath' xapPath); " is 131.
Long Statement,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,GetLocalIPAddress,The length of the statement  "	NetworkInterface foundInterface = NetworkInterface.GetAllNetworkInterfaces ().FirstOrDefault (i => i.NetworkInterfaceType == NetworkInterfaceType.Ethernet && !i.Name.ToUpperInvariant ().Contains ("SWITCH")); " is 207.
Long Statement,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,GetLocalIPAddress,The length of the statement  "		UnicastIPAddressInformation addressInfo = foundInterface.GetIPProperties ().UnicastAddresses.FirstOrDefault (a => a.Address.AddressFamily == AddressFamily.InterNetwork); " is 169.
Long Statement,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,FindDevice,The length of the statement  "	Platform platform = platforms.FirstOrDefault (p => p.Name.StartsWith ("Windows Phone "' StringComparison.OrdinalIgnoreCase)); " is 125.
Long Statement,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,FindDevice,The length of the statement  "	this.SendStatusUpdate ("Searching for {1} device with name '{0}'."' this.deviceName' this.kind == ControllerKind.Emulator ? "emulated" : "physical"); " is 149.
Long Statement,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,FindDevice,The length of the statement  "	Device device = devices.FirstOrDefault (d => d.Name == this.deviceName && d.IsEmulator () == (this.kind == ControllerKind.Emulator)); " is 133.
Long Statement,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,FindDevice,The length of the statement  "		this.SendStatusUpdate ("No device found with name exactly matching '{0}'; looking for device with name contains '{0}'."' this.deviceName); " is 138.
Long Statement,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,FindDevice,The length of the statement  "		device = devices.FirstOrDefault (d => d.Name.Contains (this.deviceName) && d.IsEmulator () == (this.kind == ControllerKind.Emulator)); " is 134.
Long Statement,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,FindDevice,The length of the statement  "		errorBuilder.AppendFormat ("No {1} device found for name matching or containing '{0}'. Found devices:"' this.deviceName' this.kind == ControllerKind.Emulator ? "emulated" : "physical"); " is 185.
Long Statement,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,FindDevice,The length of the statement  "			errorBuilder.AppendFormat ("    {0} ({1} device)"' currentDevice.Name' currentDevice.IsEmulator () ? "emulated" : "physical"); " is 126.
Long Statement,WindowsPhoneDriver,Logger,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\Logger.cs,FormatLogMessage,The length of the statement  "	string formattedMessage = string.Format (CultureInfo.InvariantCulture' "{0} {1} - {2}"' logTime' level.ToString ().ToUpperInvariant ()' message); " is 145.
Long Statement,WindowsPhoneDriver,RemoteServer,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\RemoteServer.cs,StartListening,The length of the statement  "			this.serverLogger.Log (string.Format (CultureInfo.InvariantCulture' "Another application is already listening on port {0}"' this.listenerPort)' LogLevel.Error); " is 160.
Long Statement,WindowsPhoneDriver,RemoteServer,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\RemoteServer.cs,StartListening,The length of the statement  "			this.serverLogger.Log (string.Format (CultureInfo.InvariantCulture' "An unexpected error with error code {0} occurred."' ex.ErrorCode)' LogLevel.Error); " is 152.
Long Statement,WindowsPhoneDriver,RemoteServer,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\RemoteServer.cs,DispatchRequest,The length of the statement  "		string relativeUrl = match.RequestUri.AbsoluteUri.Substring (match.RequestUri.AbsoluteUri.IndexOf (this.listenerPath' StringComparison.OrdinalIgnoreCase) + this.listenerPath.Length - 1); " is 186.
Long Statement,WindowsPhoneDriver,WindowsPhoneCommandExecutor,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\WindowsPhoneCommandExecutor.cs,Execute,The length of the statement  "	string serializedCommand = "{\"name\":\"" + commandToExecute.Name + "\"'\"parameters\":" + commandToExecute.ParametersAsJsonString + "}"; " is 137.
Empty Catch Block,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,StopSession,The method has an empty catch block.
Magic Number,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,Start,The following statement contains a magic number: if (device == null) {  	throw new WindowsPhoneDriverException (string.Format (CultureInfo.InvariantCulture' "Found no matching devices for name '{0}'"' this.deviceName));  }  else {  	this.SendStatusUpdate ("Connecting to device {0}."' device.Name);  	string assemblyDirectory = Path.GetDirectoryName (this.GetType ().Assembly.Location);  	string xapPath = GetPackagePath (assemblyDirectory);  	ApplicationArchiveInfo appInfo = ApplicationArchiveInfo.ReadApplicationInfo (xapPath);  	Guid applicationId = appInfo.ApplicationId.Value;  	string iconPath = appInfo.ExtractIconFile ();  	bool isConnectedToDevice = false;  	try {  		device.Connect ();  		isConnectedToDevice = device.IsConnected ();  	}  	catch (SmartDeviceException ex) {  		this.SendStatusUpdate ("WARNING! Exception encountered when connecting to device. HRESULT: {0:X}' message: {1}"' ex.HResult' ex.Message);  		System.Threading.Thread.Sleep (500);  	}  	if (!isConnectedToDevice) {  		// TODO: Create connection mitigation routine.  		this.SendStatusUpdate ("WARNING! Was unable to connect to device!");  	}  	else {  		if (!device.IsApplicationInstalled (applicationId)) {  			this.SendStatusUpdate ("Installing application {0}."' xapPath);  			this.browserApplication = device.InstallApplication (applicationId' applicationId' "WindowsPhoneDriverBrowser"' iconPath' xapPath);  		}  		else {  			this.SendStatusUpdate ("Application already installed.");  			this.browserApplication = device.GetApplication (applicationId);  		}  	}  	File.Delete (iconPath);  }  
Magic Number,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,Start,The following statement contains a magic number: try {  	device.Connect ();  	isConnectedToDevice = device.IsConnected ();  }  catch (SmartDeviceException ex) {  	this.SendStatusUpdate ("WARNING! Exception encountered when connecting to device. HRESULT: {0:X}' message: {1}"' ex.HResult' ex.Message);  	System.Threading.Thread.Sleep (500);  }  
Magic Number,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,Start,The following statement contains a magic number: System.Threading.Thread.Sleep (500);  
Magic Number,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,StartSession,The following statement contains a magic number: this.displayScale = int.Parse (parts [2]' CultureInfo.InvariantCulture);  
Magic Number,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,RetrieveNetworkInfoFile,The following statement contains a magic number: while (string.IsNullOrEmpty (remoteFileName) && retryCount < 4) {  	// Need sleep here to allow application to launch.  	System.Threading.Thread.Sleep (1000);  	storage = this.browserApplication.GetIsolatedStore (null);  	List<RemoteFileInfo> files = storage.GetDirectoryListing (string.Empty);  	DateTime findTimeout = DateTime.Now.Add (TimeSpan.FromSeconds (15));  	while (DateTime.Now < findTimeout) {  		foreach (RemoteFileInfo info in files) {  			if (info.Name.Contains ("networkInfo.txt")) {  				remoteFileName = info.Name;  				break;  			}  		}  		if (!string.IsNullOrEmpty (remoteFileName)) {  			break;  		}  		System.Threading.Thread.Sleep (500);  		storage = this.browserApplication.GetIsolatedStore (null);  		files = storage.GetDirectoryListing (string.Empty);  	}  	retryCount++;  }  
Magic Number,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,RetrieveNetworkInfoFile,The following statement contains a magic number: while (string.IsNullOrEmpty (remoteFileName) && retryCount < 4) {  	// Need sleep here to allow application to launch.  	System.Threading.Thread.Sleep (1000);  	storage = this.browserApplication.GetIsolatedStore (null);  	List<RemoteFileInfo> files = storage.GetDirectoryListing (string.Empty);  	DateTime findTimeout = DateTime.Now.Add (TimeSpan.FromSeconds (15));  	while (DateTime.Now < findTimeout) {  		foreach (RemoteFileInfo info in files) {  			if (info.Name.Contains ("networkInfo.txt")) {  				remoteFileName = info.Name;  				break;  			}  		}  		if (!string.IsNullOrEmpty (remoteFileName)) {  			break;  		}  		System.Threading.Thread.Sleep (500);  		storage = this.browserApplication.GetIsolatedStore (null);  		files = storage.GetDirectoryListing (string.Empty);  	}  	retryCount++;  }  
Magic Number,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,RetrieveNetworkInfoFile,The following statement contains a magic number: while (string.IsNullOrEmpty (remoteFileName) && retryCount < 4) {  	// Need sleep here to allow application to launch.  	System.Threading.Thread.Sleep (1000);  	storage = this.browserApplication.GetIsolatedStore (null);  	List<RemoteFileInfo> files = storage.GetDirectoryListing (string.Empty);  	DateTime findTimeout = DateTime.Now.Add (TimeSpan.FromSeconds (15));  	while (DateTime.Now < findTimeout) {  		foreach (RemoteFileInfo info in files) {  			if (info.Name.Contains ("networkInfo.txt")) {  				remoteFileName = info.Name;  				break;  			}  		}  		if (!string.IsNullOrEmpty (remoteFileName)) {  			break;  		}  		System.Threading.Thread.Sleep (500);  		storage = this.browserApplication.GetIsolatedStore (null);  		files = storage.GetDirectoryListing (string.Empty);  	}  	retryCount++;  }  
Magic Number,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,RetrieveNetworkInfoFile,The following statement contains a magic number: while (string.IsNullOrEmpty (remoteFileName) && retryCount < 4) {  	// Need sleep here to allow application to launch.  	System.Threading.Thread.Sleep (1000);  	storage = this.browserApplication.GetIsolatedStore (null);  	List<RemoteFileInfo> files = storage.GetDirectoryListing (string.Empty);  	DateTime findTimeout = DateTime.Now.Add (TimeSpan.FromSeconds (15));  	while (DateTime.Now < findTimeout) {  		foreach (RemoteFileInfo info in files) {  			if (info.Name.Contains ("networkInfo.txt")) {  				remoteFileName = info.Name;  				break;  			}  		}  		if (!string.IsNullOrEmpty (remoteFileName)) {  			break;  		}  		System.Threading.Thread.Sleep (500);  		storage = this.browserApplication.GetIsolatedStore (null);  		files = storage.GetDirectoryListing (string.Empty);  	}  	retryCount++;  }  
Magic Number,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,RetrieveNetworkInfoFile,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,RetrieveNetworkInfoFile,The following statement contains a magic number: while (DateTime.Now < findTimeout) {  	foreach (RemoteFileInfo info in files) {  		if (info.Name.Contains ("networkInfo.txt")) {  			remoteFileName = info.Name;  			break;  		}  	}  	if (!string.IsNullOrEmpty (remoteFileName)) {  		break;  	}  	System.Threading.Thread.Sleep (500);  	storage = this.browserApplication.GetIsolatedStore (null);  	files = storage.GetDirectoryListing (string.Empty);  }  
Magic Number,WindowsPhoneDriver,DeviceController,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\DeviceController.cs,RetrieveNetworkInfoFile,The following statement contains a magic number: System.Threading.Thread.Sleep (500);  
Magic Number,WindowsPhoneDriver,WindowsPhoneCommandExecutor,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\WindowsPhoneCommandExecutor.cs,SendMessage,The following statement contains a magic number: using (Socket socket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  	socket.Connect (address' int.Parse (port' CultureInfo.InvariantCulture));  	using (NetworkStream sendStream = new NetworkStream (socket' false)) {  		int length = Encoding.UTF8.GetByteCount (message);  		string datagram = string.Format (CultureInfo.InvariantCulture' "{0}:{1}"' length' message);  		this.log.Log (string.Format (CultureInfo.InvariantCulture' ">>> {0}"' datagram));  		sendStream.Write (Encoding.UTF8.GetBytes (datagram)' 0' Encoding.UTF8.GetByteCount (datagram));  	}  	using (NetworkStream receiveStream = new NetworkStream (socket' false)) {  		DateTime initialReadTimeout = DateTime.Now.AddSeconds (15);  		int byteValue = receiveStream.ReadByte ();  		while (byteValue == 0 && DateTime.Now < initialReadTimeout) {  			System.Threading.Thread.Sleep (50);  			this.log.Log ("Waiting for data to be available");  			byteValue = receiveStream.ReadByte ();  		}  		StringBuilder dataLengthBuilder = new StringBuilder ();  		char currentChar = Convert.ToChar (byteValue);  		while (currentChar != ':') {  			dataLengthBuilder.Append (currentChar);  			byteValue = receiveStream.ReadByte ();  			currentChar = Convert.ToChar (byteValue);  		}  		int dataLength = int.Parse (dataLengthBuilder.ToString ()' CultureInfo.InvariantCulture);  		this.log.Log (string.Format (CultureInfo.InvariantCulture' "Waiting to receive {0} bytes"' dataLength));  		byte[] buffer = new byte[dataLength];  		int received = 0;  		while (received < dataLength) {  			received += receiveStream.Read (buffer' received' dataLength - received);  		}  		receivedMessage = Encoding.UTF8.GetString (buffer' 0' received);  		this.log.Log (string.Format (CultureInfo.InvariantCulture' "<<< {0}"' receivedMessage));  	}  }  
Magic Number,WindowsPhoneDriver,WindowsPhoneCommandExecutor,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\WindowsPhoneCommandExecutor.cs,SendMessage,The following statement contains a magic number: using (Socket socket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  	socket.Connect (address' int.Parse (port' CultureInfo.InvariantCulture));  	using (NetworkStream sendStream = new NetworkStream (socket' false)) {  		int length = Encoding.UTF8.GetByteCount (message);  		string datagram = string.Format (CultureInfo.InvariantCulture' "{0}:{1}"' length' message);  		this.log.Log (string.Format (CultureInfo.InvariantCulture' ">>> {0}"' datagram));  		sendStream.Write (Encoding.UTF8.GetBytes (datagram)' 0' Encoding.UTF8.GetByteCount (datagram));  	}  	using (NetworkStream receiveStream = new NetworkStream (socket' false)) {  		DateTime initialReadTimeout = DateTime.Now.AddSeconds (15);  		int byteValue = receiveStream.ReadByte ();  		while (byteValue == 0 && DateTime.Now < initialReadTimeout) {  			System.Threading.Thread.Sleep (50);  			this.log.Log ("Waiting for data to be available");  			byteValue = receiveStream.ReadByte ();  		}  		StringBuilder dataLengthBuilder = new StringBuilder ();  		char currentChar = Convert.ToChar (byteValue);  		while (currentChar != ':') {  			dataLengthBuilder.Append (currentChar);  			byteValue = receiveStream.ReadByte ();  			currentChar = Convert.ToChar (byteValue);  		}  		int dataLength = int.Parse (dataLengthBuilder.ToString ()' CultureInfo.InvariantCulture);  		this.log.Log (string.Format (CultureInfo.InvariantCulture' "Waiting to receive {0} bytes"' dataLength));  		byte[] buffer = new byte[dataLength];  		int received = 0;  		while (received < dataLength) {  			received += receiveStream.Read (buffer' received' dataLength - received);  		}  		receivedMessage = Encoding.UTF8.GetString (buffer' 0' received);  		this.log.Log (string.Format (CultureInfo.InvariantCulture' "<<< {0}"' receivedMessage));  	}  }  
Magic Number,WindowsPhoneDriver,WindowsPhoneCommandExecutor,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\WindowsPhoneCommandExecutor.cs,SendMessage,The following statement contains a magic number: using (NetworkStream receiveStream = new NetworkStream (socket' false)) {  	DateTime initialReadTimeout = DateTime.Now.AddSeconds (15);  	int byteValue = receiveStream.ReadByte ();  	while (byteValue == 0 && DateTime.Now < initialReadTimeout) {  		System.Threading.Thread.Sleep (50);  		this.log.Log ("Waiting for data to be available");  		byteValue = receiveStream.ReadByte ();  	}  	StringBuilder dataLengthBuilder = new StringBuilder ();  	char currentChar = Convert.ToChar (byteValue);  	while (currentChar != ':') {  		dataLengthBuilder.Append (currentChar);  		byteValue = receiveStream.ReadByte ();  		currentChar = Convert.ToChar (byteValue);  	}  	int dataLength = int.Parse (dataLengthBuilder.ToString ()' CultureInfo.InvariantCulture);  	this.log.Log (string.Format (CultureInfo.InvariantCulture' "Waiting to receive {0} bytes"' dataLength));  	byte[] buffer = new byte[dataLength];  	int received = 0;  	while (received < dataLength) {  		received += receiveStream.Read (buffer' received' dataLength - received);  	}  	receivedMessage = Encoding.UTF8.GetString (buffer' 0' received);  	this.log.Log (string.Format (CultureInfo.InvariantCulture' "<<< {0}"' receivedMessage));  }  
Magic Number,WindowsPhoneDriver,WindowsPhoneCommandExecutor,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\WindowsPhoneCommandExecutor.cs,SendMessage,The following statement contains a magic number: using (NetworkStream receiveStream = new NetworkStream (socket' false)) {  	DateTime initialReadTimeout = DateTime.Now.AddSeconds (15);  	int byteValue = receiveStream.ReadByte ();  	while (byteValue == 0 && DateTime.Now < initialReadTimeout) {  		System.Threading.Thread.Sleep (50);  		this.log.Log ("Waiting for data to be available");  		byteValue = receiveStream.ReadByte ();  	}  	StringBuilder dataLengthBuilder = new StringBuilder ();  	char currentChar = Convert.ToChar (byteValue);  	while (currentChar != ':') {  		dataLengthBuilder.Append (currentChar);  		byteValue = receiveStream.ReadByte ();  		currentChar = Convert.ToChar (byteValue);  	}  	int dataLength = int.Parse (dataLengthBuilder.ToString ()' CultureInfo.InvariantCulture);  	this.log.Log (string.Format (CultureInfo.InvariantCulture' "Waiting to receive {0} bytes"' dataLength));  	byte[] buffer = new byte[dataLength];  	int received = 0;  	while (received < dataLength) {  		received += receiveStream.Read (buffer' received' dataLength - received);  	}  	receivedMessage = Encoding.UTF8.GetString (buffer' 0' received);  	this.log.Log (string.Format (CultureInfo.InvariantCulture' "<<< {0}"' receivedMessage));  }  
Magic Number,WindowsPhoneDriver,WindowsPhoneCommandExecutor,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\WindowsPhoneCommandExecutor.cs,SendMessage,The following statement contains a magic number: while (byteValue == 0 && DateTime.Now < initialReadTimeout) {  	System.Threading.Thread.Sleep (50);  	this.log.Log ("Waiting for data to be available");  	byteValue = receiveStream.ReadByte ();  }  
Magic Number,WindowsPhoneDriver,WindowsPhoneCommandExecutor,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\WindowsPhoneCommandExecutor.cs,SendMessage,The following statement contains a magic number: System.Threading.Thread.Sleep (50);  
Missing Default,WindowsPhoneDriver,RemoteServer,C:\repos\forcedotcom_windowsphonedriver\src\WindowsPhoneDriver\RemoteServer.cs,FindDispatcherTable,The following switch statement is missing a default case: switch (httpMethod) {  case CommandInfo.GetCommand:  	tableToReturn = this.getDispatcherTable;  	break;  case CommandInfo.PostCommand:  	tableToReturn = this.postDispatcherTable;  	break;  case CommandInfo.DeleteCommand:  	tableToReturn = this.deleteDispatcherTable;  	break;  }  
