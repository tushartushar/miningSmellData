Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Scenario.KeyBinding.Input,MultiKeyGesture,C:\repos\Caliburn-Micro_Caliburn.Micro\samples\scenarios\Scenario.KeyBinding\Input\MultiKeyGesture.cs,Matches,Cyclomatic complexity of the method is 9
Long Statement,Scenario.KeyBinding.Input,MultiKeyGesture,C:\repos\Caliburn-Micro_Caliburn.Micro\samples\scenarios\Scenario.KeyBinding\Input\MultiKeyGesture.cs,IsModifierKey,The length of the statement  "            return key == Key.LeftCtrl || key == Key.RightCtrl || key == Key.LeftShift || key == Key.RightShift || key == Key.LeftAlt || key == Key.RightAlt || key == Key.LWin || key == Key.RWin; " is 183.
Long Statement,Scenario.KeyBinding.Input,MultiKeyGesture,C:\repos\Caliburn-Micro_Caliburn.Micro\samples\scenarios\Scenario.KeyBinding\Input\MultiKeyGesture.cs,Matches,The length of the statement  "                System.Diagnostics.Debug.WriteLine("Maximum delay has elapsed"' "[" + MultiKeyGestureConverter.Default.ConvertToString(this) + "]"); " is 132.
Long Statement,Scenario.KeyBinding.Input,MultiKeyGesture,C:\repos\Caliburn-Micro_Caliburn.Micro\samples\scenarios\Scenario.KeyBinding\Input\MultiKeyGesture.cs,Matches,The length of the statement  "                System.Diagnostics.Debug.WriteLine("Incorrect modifier " + args.KeyboardDevice.Modifiers + "' expecting " + currentSequence.Modifiers' "[" + MultiKeyGestureConverter.Default.ConvertToString(this) + "]"); " is 203.
Long Statement,Scenario.KeyBinding.Input,MultiKeyGesture,C:\repos\Caliburn-Micro_Caliburn.Micro\samples\scenarios\Scenario.KeyBinding\Input\MultiKeyGesture.cs,Matches,The length of the statement  "                System.Diagnostics.Debug.WriteLine("Incorrect key " + key + "' expecting " + currentKey' "[" + MultiKeyGestureConverter.Default.ConvertToString(this) + "]"); " is 157.
Long Statement,Scenario.KeyBinding.Input,MultiKeyGesture,C:\repos\Caliburn-Micro_Caliburn.Micro\samples\scenarios\Scenario.KeyBinding\Input\MultiKeyGesture.cs,Matches,The length of the statement  "                System.Diagnostics.Debug.WriteLine("Waiting for " + (m_KeySequences.Length - m_CurrentSequenceIndex) + " sequences"' "[" + MultiKeyGestureConverter.Default.ConvertToString(this) + "]"); " is 185.
Long Statement,Scenario.KeyBinding.Input,MultiKeyGesture,C:\repos\Caliburn-Micro_Caliburn.Micro\samples\scenarios\Scenario.KeyBinding\Input\MultiKeyGesture.cs,Matches,The length of the statement  "            System.Diagnostics.Debug.WriteLine("Gesture completed " + MultiKeyGestureConverter.Default.ConvertToString(this)' "[" + MultiKeyGestureConverter.Default.ConvertToString(this) + "]"); " is 182.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\Caliburn-Micro_Caliburn.Micro\samples\scenarios\Scenario.KeyBinding\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Missing Default,Scenario.KeyBinding,Bootstrapper,C:\repos\Caliburn-Micro_Caliburn.Micro\samples\scenarios\Scenario.KeyBinding\Bootstrapper.cs,Configure,The following switch statement is missing a default case: switch (splits[0])                  {                      case "Key":                          var key = (Key)Enum.Parse(typeof(Key)' splits[1]' true);                          return new KeyTrigger { Key = key };                        case "Gesture":                          var mkg = (MultiKeyGesture)(new MultiKeyGestureConverter()).ConvertFrom(splits[1]);                          return new KeyTrigger { Modifiers = mkg.KeySequences[0].Modifiers' Key = mkg.KeySequences[0].Keys[0] };                  }
Missing Default,Scenario.KeyBinding.Input,KeyTrigger,C:\repos\Caliburn-Micro_Caliburn.Micro\samples\scenarios\Scenario.KeyBinding\Input\KeyTrigger.cs,GetActualModifiers,The following switch statement is missing a default case: switch (key)              {                  case Key.LeftCtrl:                  case Key.RightCtrl:                      modifiers |= ModifierKeys.Control;                      return modifiers;                    case Key.LeftAlt:                  case Key.RightAlt:                      modifiers |= ModifierKeys.Alt;                      return modifiers;                    case Key.LeftShift:                  case Key.RightShift:                      modifiers |= ModifierKeys.Shift;                      break;              }
