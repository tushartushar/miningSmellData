Implementation smell,Namespace,Class,File,Method,Description
Complex Method,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeDecoder,Cyclomatic complexity of the method is 10
Complex Method,KwBarcode,KwQRCodeWriter,C:\repos\hermanliang_BCTest\KwBarcode\KwQRCodeWriter.cs,textToQRImage,Cyclomatic complexity of the method is 17
Long Statement,KwBarcode,KwQRCodeReader,C:\repos\hermanliang_BCTest\KwBarcode\KwQRCodeReader.cs,preProcessImage,The length of the statement  "	image = new Bitmap (image' new Size ((int)((double)image.Width / minLen * 256)' (int)((double)image.Height / minLen * 256))); " is 125.
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,setBarcodes,The following statement contains a magic number: if (barcodeString.Length % 10 != 0 || barcodeString.Length == 0)  	return false;  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: for (int i = 0; i < bit.Length; i++) {  	if (!validValue (values [i]' bit [i]))  		goto Exit;  	singleBlockSum += bit [i];  	sum += values [i];  	if (singleBlockSum > 32) {  		int dev = singleBlockSum - 32;  		int last = bit [i] - dev;  		singleBlock.Add (last);  		format.Add (singleBlock.ToArray ());  		long mask = (long)Math.Pow (2' last) - 1;  		code = code | (values [i] & mask) << (singleBlockSum - bit [i]);  		barcodes.Add (code.ToString ("0000000000"));  		code = 0;  		code = code | (values [i] >> last);  		singleBlock.Clear ();  		singleBlock.Add (dev);  		singleBlockSum = dev;  	}  	else if (singleBlockSum == 32) {  		code = code | (values [i] << (singleBlockSum - bit [i]));  		singleBlock.Add (bit [i]);  		format.Add (singleBlock.ToArray ());  		singleBlock.Clear ();  		singleBlock.Add (0);  		singleBlockSum = 0;  		barcodes.Add (code.ToString ("0000000000"));  		code = 0;  	}  	else {  		code = code | (values [i] << (singleBlockSum - bit [i]));  		singleBlock.Add (bit [i]);  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: for (int i = 0; i < bit.Length; i++) {  	if (!validValue (values [i]' bit [i]))  		goto Exit;  	singleBlockSum += bit [i];  	sum += values [i];  	if (singleBlockSum > 32) {  		int dev = singleBlockSum - 32;  		int last = bit [i] - dev;  		singleBlock.Add (last);  		format.Add (singleBlock.ToArray ());  		long mask = (long)Math.Pow (2' last) - 1;  		code = code | (values [i] & mask) << (singleBlockSum - bit [i]);  		barcodes.Add (code.ToString ("0000000000"));  		code = 0;  		code = code | (values [i] >> last);  		singleBlock.Clear ();  		singleBlock.Add (dev);  		singleBlockSum = dev;  	}  	else if (singleBlockSum == 32) {  		code = code | (values [i] << (singleBlockSum - bit [i]));  		singleBlock.Add (bit [i]);  		format.Add (singleBlock.ToArray ());  		singleBlock.Clear ();  		singleBlock.Add (0);  		singleBlockSum = 0;  		barcodes.Add (code.ToString ("0000000000"));  		code = 0;  	}  	else {  		code = code | (values [i] << (singleBlockSum - bit [i]));  		singleBlock.Add (bit [i]);  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: for (int i = 0; i < bit.Length; i++) {  	if (!validValue (values [i]' bit [i]))  		goto Exit;  	singleBlockSum += bit [i];  	sum += values [i];  	if (singleBlockSum > 32) {  		int dev = singleBlockSum - 32;  		int last = bit [i] - dev;  		singleBlock.Add (last);  		format.Add (singleBlock.ToArray ());  		long mask = (long)Math.Pow (2' last) - 1;  		code = code | (values [i] & mask) << (singleBlockSum - bit [i]);  		barcodes.Add (code.ToString ("0000000000"));  		code = 0;  		code = code | (values [i] >> last);  		singleBlock.Clear ();  		singleBlock.Add (dev);  		singleBlockSum = dev;  	}  	else if (singleBlockSum == 32) {  		code = code | (values [i] << (singleBlockSum - bit [i]));  		singleBlock.Add (bit [i]);  		format.Add (singleBlock.ToArray ());  		singleBlock.Clear ();  		singleBlock.Add (0);  		singleBlockSum = 0;  		barcodes.Add (code.ToString ("0000000000"));  		code = 0;  	}  	else {  		code = code | (values [i] << (singleBlockSum - bit [i]));  		singleBlock.Add (bit [i]);  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: for (int i = 0; i < bit.Length; i++) {  	if (!validValue (values [i]' bit [i]))  		goto Exit;  	singleBlockSum += bit [i];  	sum += values [i];  	if (singleBlockSum > 32) {  		int dev = singleBlockSum - 32;  		int last = bit [i] - dev;  		singleBlock.Add (last);  		format.Add (singleBlock.ToArray ());  		long mask = (long)Math.Pow (2' last) - 1;  		code = code | (values [i] & mask) << (singleBlockSum - bit [i]);  		barcodes.Add (code.ToString ("0000000000"));  		code = 0;  		code = code | (values [i] >> last);  		singleBlock.Clear ();  		singleBlock.Add (dev);  		singleBlockSum = dev;  	}  	else if (singleBlockSum == 32) {  		code = code | (values [i] << (singleBlockSum - bit [i]));  		singleBlock.Add (bit [i]);  		format.Add (singleBlock.ToArray ());  		singleBlock.Clear ();  		singleBlock.Add (0);  		singleBlockSum = 0;  		barcodes.Add (code.ToString ("0000000000"));  		code = 0;  	}  	else {  		code = code | (values [i] << (singleBlockSum - bit [i]));  		singleBlock.Add (bit [i]);  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: if (singleBlockSum > 32) {  	int dev = singleBlockSum - 32;  	int last = bit [i] - dev;  	singleBlock.Add (last);  	format.Add (singleBlock.ToArray ());  	long mask = (long)Math.Pow (2' last) - 1;  	code = code | (values [i] & mask) << (singleBlockSum - bit [i]);  	barcodes.Add (code.ToString ("0000000000"));  	code = 0;  	code = code | (values [i] >> last);  	singleBlock.Clear ();  	singleBlock.Add (dev);  	singleBlockSum = dev;  }  else if (singleBlockSum == 32) {  	code = code | (values [i] << (singleBlockSum - bit [i]));  	singleBlock.Add (bit [i]);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  	singleBlock.Add (0);  	singleBlockSum = 0;  	barcodes.Add (code.ToString ("0000000000"));  	code = 0;  }  else {  	code = code | (values [i] << (singleBlockSum - bit [i]));  	singleBlock.Add (bit [i]);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: if (singleBlockSum > 32) {  	int dev = singleBlockSum - 32;  	int last = bit [i] - dev;  	singleBlock.Add (last);  	format.Add (singleBlock.ToArray ());  	long mask = (long)Math.Pow (2' last) - 1;  	code = code | (values [i] & mask) << (singleBlockSum - bit [i]);  	barcodes.Add (code.ToString ("0000000000"));  	code = 0;  	code = code | (values [i] >> last);  	singleBlock.Clear ();  	singleBlock.Add (dev);  	singleBlockSum = dev;  }  else if (singleBlockSum == 32) {  	code = code | (values [i] << (singleBlockSum - bit [i]));  	singleBlock.Add (bit [i]);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  	singleBlock.Add (0);  	singleBlockSum = 0;  	barcodes.Add (code.ToString ("0000000000"));  	code = 0;  }  else {  	code = code | (values [i] << (singleBlockSum - bit [i]));  	singleBlock.Add (bit [i]);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: if (singleBlockSum > 32) {  	int dev = singleBlockSum - 32;  	int last = bit [i] - dev;  	singleBlock.Add (last);  	format.Add (singleBlock.ToArray ());  	long mask = (long)Math.Pow (2' last) - 1;  	code = code | (values [i] & mask) << (singleBlockSum - bit [i]);  	barcodes.Add (code.ToString ("0000000000"));  	code = 0;  	code = code | (values [i] >> last);  	singleBlock.Clear ();  	singleBlock.Add (dev);  	singleBlockSum = dev;  }  else if (singleBlockSum == 32) {  	code = code | (values [i] << (singleBlockSum - bit [i]));  	singleBlock.Add (bit [i]);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  	singleBlock.Add (0);  	singleBlockSum = 0;  	barcodes.Add (code.ToString ("0000000000"));  	code = 0;  }  else {  	code = code | (values [i] << (singleBlockSum - bit [i]));  	singleBlock.Add (bit [i]);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: if (singleBlockSum > 32) {  	int dev = singleBlockSum - 32;  	int last = bit [i] - dev;  	singleBlock.Add (last);  	format.Add (singleBlock.ToArray ());  	long mask = (long)Math.Pow (2' last) - 1;  	code = code | (values [i] & mask) << (singleBlockSum - bit [i]);  	barcodes.Add (code.ToString ("0000000000"));  	code = 0;  	code = code | (values [i] >> last);  	singleBlock.Clear ();  	singleBlock.Add (dev);  	singleBlockSum = dev;  }  else if (singleBlockSum == 32) {  	code = code | (values [i] << (singleBlockSum - bit [i]));  	singleBlock.Add (bit [i]);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  	singleBlock.Add (0);  	singleBlockSum = 0;  	barcodes.Add (code.ToString ("0000000000"));  	code = 0;  }  else {  	code = code | (values [i] << (singleBlockSum - bit [i]));  	singleBlock.Add (bit [i]);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: if (singleBlockSum == 32) {  	code = code | (values [i] << (singleBlockSum - bit [i]));  	singleBlock.Add (bit [i]);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  	singleBlock.Add (0);  	singleBlockSum = 0;  	barcodes.Add (code.ToString ("0000000000"));  	code = 0;  }  else {  	code = code | (values [i] << (singleBlockSum - bit [i]));  	singleBlock.Add (bit [i]);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: singleBlockSum += 8;  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: if (singleBlockSum > 32) {  	int dev = singleBlockSum - 32;  	int last = 8 - dev;  	singleBlock.Add (last);  	long mask = (long)Math.Pow (2' last) - 1;  	code = code | ((long)checksum & mask) << (singleBlockSum - 8);  	barcodes.Add (code.ToString ("0000000000"));  	format.Add (singleBlock.ToArray ());  	code = 0;  	singleBlock.Clear ();  	singleBlock.Add (dev);  	code = code | ((long)checksum >> last);  	format.Add (singleBlock.ToArray ());  	barcodes.Add (code.ToString ("0000000000"));  }  else {  	singleBlock.Add (8);  	format.Add (singleBlock.ToArray ());  	code = code | ((long)checksum << (singleBlockSum - 8));  	barcodes.Add (code.ToString ("0000000000"));  	singleBlock.Clear ();  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: if (singleBlockSum > 32) {  	int dev = singleBlockSum - 32;  	int last = 8 - dev;  	singleBlock.Add (last);  	long mask = (long)Math.Pow (2' last) - 1;  	code = code | ((long)checksum & mask) << (singleBlockSum - 8);  	barcodes.Add (code.ToString ("0000000000"));  	format.Add (singleBlock.ToArray ());  	code = 0;  	singleBlock.Clear ();  	singleBlock.Add (dev);  	code = code | ((long)checksum >> last);  	format.Add (singleBlock.ToArray ());  	barcodes.Add (code.ToString ("0000000000"));  }  else {  	singleBlock.Add (8);  	format.Add (singleBlock.ToArray ());  	code = code | ((long)checksum << (singleBlockSum - 8));  	barcodes.Add (code.ToString ("0000000000"));  	singleBlock.Clear ();  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: if (singleBlockSum > 32) {  	int dev = singleBlockSum - 32;  	int last = 8 - dev;  	singleBlock.Add (last);  	long mask = (long)Math.Pow (2' last) - 1;  	code = code | ((long)checksum & mask) << (singleBlockSum - 8);  	barcodes.Add (code.ToString ("0000000000"));  	format.Add (singleBlock.ToArray ());  	code = 0;  	singleBlock.Clear ();  	singleBlock.Add (dev);  	code = code | ((long)checksum >> last);  	format.Add (singleBlock.ToArray ());  	barcodes.Add (code.ToString ("0000000000"));  }  else {  	singleBlock.Add (8);  	format.Add (singleBlock.ToArray ());  	code = code | ((long)checksum << (singleBlockSum - 8));  	barcodes.Add (code.ToString ("0000000000"));  	singleBlock.Clear ();  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: if (singleBlockSum > 32) {  	int dev = singleBlockSum - 32;  	int last = 8 - dev;  	singleBlock.Add (last);  	long mask = (long)Math.Pow (2' last) - 1;  	code = code | ((long)checksum & mask) << (singleBlockSum - 8);  	barcodes.Add (code.ToString ("0000000000"));  	format.Add (singleBlock.ToArray ());  	code = 0;  	singleBlock.Clear ();  	singleBlock.Add (dev);  	code = code | ((long)checksum >> last);  	format.Add (singleBlock.ToArray ());  	barcodes.Add (code.ToString ("0000000000"));  }  else {  	singleBlock.Add (8);  	format.Add (singleBlock.ToArray ());  	code = code | ((long)checksum << (singleBlockSum - 8));  	barcodes.Add (code.ToString ("0000000000"));  	singleBlock.Clear ();  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: if (singleBlockSum > 32) {  	int dev = singleBlockSum - 32;  	int last = 8 - dev;  	singleBlock.Add (last);  	long mask = (long)Math.Pow (2' last) - 1;  	code = code | ((long)checksum & mask) << (singleBlockSum - 8);  	barcodes.Add (code.ToString ("0000000000"));  	format.Add (singleBlock.ToArray ());  	code = 0;  	singleBlock.Clear ();  	singleBlock.Add (dev);  	code = code | ((long)checksum >> last);  	format.Add (singleBlock.ToArray ());  	barcodes.Add (code.ToString ("0000000000"));  }  else {  	singleBlock.Add (8);  	format.Add (singleBlock.ToArray ());  	code = code | ((long)checksum << (singleBlockSum - 8));  	barcodes.Add (code.ToString ("0000000000"));  	singleBlock.Clear ();  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: if (singleBlockSum > 32) {  	int dev = singleBlockSum - 32;  	int last = 8 - dev;  	singleBlock.Add (last);  	long mask = (long)Math.Pow (2' last) - 1;  	code = code | ((long)checksum & mask) << (singleBlockSum - 8);  	barcodes.Add (code.ToString ("0000000000"));  	format.Add (singleBlock.ToArray ());  	code = 0;  	singleBlock.Clear ();  	singleBlock.Add (dev);  	code = code | ((long)checksum >> last);  	format.Add (singleBlock.ToArray ());  	barcodes.Add (code.ToString ("0000000000"));  }  else {  	singleBlock.Add (8);  	format.Add (singleBlock.ToArray ());  	code = code | ((long)checksum << (singleBlockSum - 8));  	barcodes.Add (code.ToString ("0000000000"));  	singleBlock.Clear ();  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: if (singleBlockSum > 32) {  	int dev = singleBlockSum - 32;  	int last = 8 - dev;  	singleBlock.Add (last);  	long mask = (long)Math.Pow (2' last) - 1;  	code = code | ((long)checksum & mask) << (singleBlockSum - 8);  	barcodes.Add (code.ToString ("0000000000"));  	format.Add (singleBlock.ToArray ());  	code = 0;  	singleBlock.Clear ();  	singleBlock.Add (dev);  	code = code | ((long)checksum >> last);  	format.Add (singleBlock.ToArray ());  	barcodes.Add (code.ToString ("0000000000"));  }  else {  	singleBlock.Add (8);  	format.Add (singleBlock.ToArray ());  	code = code | ((long)checksum << (singleBlockSum - 8));  	barcodes.Add (code.ToString ("0000000000"));  	singleBlock.Clear ();  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: code = code | ((long)checksum & mask) << (singleBlockSum - 8);  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: singleBlock.Add (8);  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeEncoder,The following statement contains a magic number: code = code | ((long)checksum << (singleBlockSum - 8));  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeDecoder,The following statement contains a magic number: for (i = 0; i < barcodes.Count; i++) {  	string barcode = barcodes [i];  	if (!long.TryParse (barcode' out code))  		goto Exit;  	int[] size = format [i];  	for (j = 0; j < size.Length; j++) {  		int bit = size [j];  		mask = (long)Math.Pow (2' bit) - 1;  		singleBlockSum += bit;  		if (singleBlockSum != 32) {  			if (i != 0 && j == 0) {  				long tempV = (code >> (singleBlockSum - bit) & mask);  				value = value | (tempV << last);  				v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  				f1.Add (bit + last);  				sum += value;  			}  			else {  				value = (int)((code >> (singleBlockSum - bit)) & mask);  				v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  				f1.Add (bit);  				sum += value;  			}  		}  		else if (singleBlockSum == 32) {  			value = (code >> (singleBlockSum - bit) & mask);  			last = bit;  			singleBlockSum = 0;  			if (i == barcodes.Count - 1 && j == size.Length - 1) {  				v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  				f1.Add (bit);  				sum += value;  			}  		}  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeDecoder,The following statement contains a magic number: for (i = 0; i < barcodes.Count; i++) {  	string barcode = barcodes [i];  	if (!long.TryParse (barcode' out code))  		goto Exit;  	int[] size = format [i];  	for (j = 0; j < size.Length; j++) {  		int bit = size [j];  		mask = (long)Math.Pow (2' bit) - 1;  		singleBlockSum += bit;  		if (singleBlockSum != 32) {  			if (i != 0 && j == 0) {  				long tempV = (code >> (singleBlockSum - bit) & mask);  				value = value | (tempV << last);  				v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  				f1.Add (bit + last);  				sum += value;  			}  			else {  				value = (int)((code >> (singleBlockSum - bit)) & mask);  				v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  				f1.Add (bit);  				sum += value;  			}  		}  		else if (singleBlockSum == 32) {  			value = (code >> (singleBlockSum - bit) & mask);  			last = bit;  			singleBlockSum = 0;  			if (i == barcodes.Count - 1 && j == size.Length - 1) {  				v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  				f1.Add (bit);  				sum += value;  			}  		}  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeDecoder,The following statement contains a magic number: for (i = 0; i < barcodes.Count; i++) {  	string barcode = barcodes [i];  	if (!long.TryParse (barcode' out code))  		goto Exit;  	int[] size = format [i];  	for (j = 0; j < size.Length; j++) {  		int bit = size [j];  		mask = (long)Math.Pow (2' bit) - 1;  		singleBlockSum += bit;  		if (singleBlockSum != 32) {  			if (i != 0 && j == 0) {  				long tempV = (code >> (singleBlockSum - bit) & mask);  				value = value | (tempV << last);  				v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  				f1.Add (bit + last);  				sum += value;  			}  			else {  				value = (int)((code >> (singleBlockSum - bit)) & mask);  				v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  				f1.Add (bit);  				sum += value;  			}  		}  		else if (singleBlockSum == 32) {  			value = (code >> (singleBlockSum - bit) & mask);  			last = bit;  			singleBlockSum = 0;  			if (i == barcodes.Count - 1 && j == size.Length - 1) {  				v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  				f1.Add (bit);  				sum += value;  			}  		}  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeDecoder,The following statement contains a magic number: for (j = 0; j < size.Length; j++) {  	int bit = size [j];  	mask = (long)Math.Pow (2' bit) - 1;  	singleBlockSum += bit;  	if (singleBlockSum != 32) {  		if (i != 0 && j == 0) {  			long tempV = (code >> (singleBlockSum - bit) & mask);  			value = value | (tempV << last);  			v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  			f1.Add (bit + last);  			sum += value;  		}  		else {  			value = (int)((code >> (singleBlockSum - bit)) & mask);  			v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  			f1.Add (bit);  			sum += value;  		}  	}  	else if (singleBlockSum == 32) {  		value = (code >> (singleBlockSum - bit) & mask);  		last = bit;  		singleBlockSum = 0;  		if (i == barcodes.Count - 1 && j == size.Length - 1) {  			v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  			f1.Add (bit);  			sum += value;  		}  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeDecoder,The following statement contains a magic number: for (j = 0; j < size.Length; j++) {  	int bit = size [j];  	mask = (long)Math.Pow (2' bit) - 1;  	singleBlockSum += bit;  	if (singleBlockSum != 32) {  		if (i != 0 && j == 0) {  			long tempV = (code >> (singleBlockSum - bit) & mask);  			value = value | (tempV << last);  			v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  			f1.Add (bit + last);  			sum += value;  		}  		else {  			value = (int)((code >> (singleBlockSum - bit)) & mask);  			v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  			f1.Add (bit);  			sum += value;  		}  	}  	else if (singleBlockSum == 32) {  		value = (code >> (singleBlockSum - bit) & mask);  		last = bit;  		singleBlockSum = 0;  		if (i == barcodes.Count - 1 && j == size.Length - 1) {  			v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  			f1.Add (bit);  			sum += value;  		}  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeDecoder,The following statement contains a magic number: for (j = 0; j < size.Length; j++) {  	int bit = size [j];  	mask = (long)Math.Pow (2' bit) - 1;  	singleBlockSum += bit;  	if (singleBlockSum != 32) {  		if (i != 0 && j == 0) {  			long tempV = (code >> (singleBlockSum - bit) & mask);  			value = value | (tempV << last);  			v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  			f1.Add (bit + last);  			sum += value;  		}  		else {  			value = (int)((code >> (singleBlockSum - bit)) & mask);  			v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  			f1.Add (bit);  			sum += value;  		}  	}  	else if (singleBlockSum == 32) {  		value = (code >> (singleBlockSum - bit) & mask);  		last = bit;  		singleBlockSum = 0;  		if (i == barcodes.Count - 1 && j == size.Length - 1) {  			v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  			f1.Add (bit);  			sum += value;  		}  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeDecoder,The following statement contains a magic number: mask = (long)Math.Pow (2' bit) - 1;  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeDecoder,The following statement contains a magic number: if (singleBlockSum != 32) {  	if (i != 0 && j == 0) {  		long tempV = (code >> (singleBlockSum - bit) & mask);  		value = value | (tempV << last);  		v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  		f1.Add (bit + last);  		sum += value;  	}  	else {  		value = (int)((code >> (singleBlockSum - bit)) & mask);  		v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  		f1.Add (bit);  		sum += value;  	}  }  else if (singleBlockSum == 32) {  	value = (code >> (singleBlockSum - bit) & mask);  	last = bit;  	singleBlockSum = 0;  	if (i == barcodes.Count - 1 && j == size.Length - 1) {  		v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  		f1.Add (bit);  		sum += value;  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeDecoder,The following statement contains a magic number: if (singleBlockSum != 32) {  	if (i != 0 && j == 0) {  		long tempV = (code >> (singleBlockSum - bit) & mask);  		value = value | (tempV << last);  		v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  		f1.Add (bit + last);  		sum += value;  	}  	else {  		value = (int)((code >> (singleBlockSum - bit)) & mask);  		v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  		f1.Add (bit);  		sum += value;  	}  }  else if (singleBlockSum == 32) {  	value = (code >> (singleBlockSum - bit) & mask);  	last = bit;  	singleBlockSum = 0;  	if (i == barcodes.Count - 1 && j == size.Length - 1) {  		v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  		f1.Add (bit);  		sum += value;  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeDecoder,The following statement contains a magic number: if (singleBlockSum == 32) {  	value = (code >> (singleBlockSum - bit) & mask);  	last = bit;  	singleBlockSum = 0;  	if (i == barcodes.Count - 1 && j == size.Length - 1) {  		v1.Add (BitConverter.ToInt32 (BitConverter.GetBytes (value)' 0));  		f1.Add (bit);  		sum += value;  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,BarcodeDecoder,The following statement contains a magic number: if (sum % 256 != checksum)  	goto Exit;  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,getFormatData,The following statement contains a magic number: for (int i = 0; i < bit.Length; i++) {  	singleBlockSum += bit [i];  	if (singleBlockSum > 32) {  		int dev = singleBlockSum - 32;  		int last = bit [i] - dev;  		singleBlock.Add (last);  		format.Add (singleBlock.ToArray ());  		singleBlock.Clear ();  		singleBlock.Add (dev);  		singleBlockSum = dev;  	}  	else if (singleBlockSum == 32) {  		singleBlock.Add (bit [i]);  		format.Add (singleBlock.ToArray ());  		singleBlock.Clear ();  		singleBlock.Add (0);  		singleBlockSum = 0;  	}  	else {  		singleBlock.Add (bit [i]);  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,getFormatData,The following statement contains a magic number: for (int i = 0; i < bit.Length; i++) {  	singleBlockSum += bit [i];  	if (singleBlockSum > 32) {  		int dev = singleBlockSum - 32;  		int last = bit [i] - dev;  		singleBlock.Add (last);  		format.Add (singleBlock.ToArray ());  		singleBlock.Clear ();  		singleBlock.Add (dev);  		singleBlockSum = dev;  	}  	else if (singleBlockSum == 32) {  		singleBlock.Add (bit [i]);  		format.Add (singleBlock.ToArray ());  		singleBlock.Clear ();  		singleBlock.Add (0);  		singleBlockSum = 0;  	}  	else {  		singleBlock.Add (bit [i]);  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,getFormatData,The following statement contains a magic number: for (int i = 0; i < bit.Length; i++) {  	singleBlockSum += bit [i];  	if (singleBlockSum > 32) {  		int dev = singleBlockSum - 32;  		int last = bit [i] - dev;  		singleBlock.Add (last);  		format.Add (singleBlock.ToArray ());  		singleBlock.Clear ();  		singleBlock.Add (dev);  		singleBlockSum = dev;  	}  	else if (singleBlockSum == 32) {  		singleBlock.Add (bit [i]);  		format.Add (singleBlock.ToArray ());  		singleBlock.Clear ();  		singleBlock.Add (0);  		singleBlockSum = 0;  	}  	else {  		singleBlock.Add (bit [i]);  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,getFormatData,The following statement contains a magic number: if (singleBlockSum > 32) {  	int dev = singleBlockSum - 32;  	int last = bit [i] - dev;  	singleBlock.Add (last);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  	singleBlock.Add (dev);  	singleBlockSum = dev;  }  else if (singleBlockSum == 32) {  	singleBlock.Add (bit [i]);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  	singleBlock.Add (0);  	singleBlockSum = 0;  }  else {  	singleBlock.Add (bit [i]);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,getFormatData,The following statement contains a magic number: if (singleBlockSum > 32) {  	int dev = singleBlockSum - 32;  	int last = bit [i] - dev;  	singleBlock.Add (last);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  	singleBlock.Add (dev);  	singleBlockSum = dev;  }  else if (singleBlockSum == 32) {  	singleBlock.Add (bit [i]);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  	singleBlock.Add (0);  	singleBlockSum = 0;  }  else {  	singleBlock.Add (bit [i]);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,getFormatData,The following statement contains a magic number: if (singleBlockSum > 32) {  	int dev = singleBlockSum - 32;  	int last = bit [i] - dev;  	singleBlock.Add (last);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  	singleBlock.Add (dev);  	singleBlockSum = dev;  }  else if (singleBlockSum == 32) {  	singleBlock.Add (bit [i]);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  	singleBlock.Add (0);  	singleBlockSum = 0;  }  else {  	singleBlock.Add (bit [i]);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,getFormatData,The following statement contains a magic number: if (singleBlockSum == 32) {  	singleBlock.Add (bit [i]);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  	singleBlock.Add (0);  	singleBlockSum = 0;  }  else {  	singleBlock.Add (bit [i]);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,getFormatData,The following statement contains a magic number: singleBlockSum += 8;  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,getFormatData,The following statement contains a magic number: if (singleBlockSum > 32) {  	int dev = singleBlockSum - 32;  	int last = 8 - dev;  	singleBlock.Add (last);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  	singleBlock.Add (dev);  	format.Add (singleBlock.ToArray ());  }  else {  	singleBlock.Add (8);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,getFormatData,The following statement contains a magic number: if (singleBlockSum > 32) {  	int dev = singleBlockSum - 32;  	int last = 8 - dev;  	singleBlock.Add (last);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  	singleBlock.Add (dev);  	format.Add (singleBlock.ToArray ());  }  else {  	singleBlock.Add (8);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,getFormatData,The following statement contains a magic number: if (singleBlockSum > 32) {  	int dev = singleBlockSum - 32;  	int last = 8 - dev;  	singleBlock.Add (last);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  	singleBlock.Add (dev);  	format.Add (singleBlock.ToArray ());  }  else {  	singleBlock.Add (8);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,getFormatData,The following statement contains a magic number: if (singleBlockSum > 32) {  	int dev = singleBlockSum - 32;  	int last = 8 - dev;  	singleBlock.Add (last);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  	singleBlock.Add (dev);  	format.Add (singleBlock.ToArray ());  }  else {  	singleBlock.Add (8);  	format.Add (singleBlock.ToArray ());  	singleBlock.Clear ();  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,getFormatData,The following statement contains a magic number: singleBlock.Add (8);  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,getBarcodeLists,The following statement contains a magic number: if (barcodes.Length % 10 != 0 || barcodes.Length == 0)  	throw new Exception ("Barcode length error!");  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,getBarcodeLists,The following statement contains a magic number: for (int i = 0; i < barcodes.Length / 10; i++) {  	oBarcodes.Add (barcodes.Substring (i * 10' 10));  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,getBarcodeLists,The following statement contains a magic number: for (int i = 0; i < barcodes.Length / 10; i++) {  	oBarcodes.Add (barcodes.Substring (i * 10' 10));  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,getBarcodeLists,The following statement contains a magic number: for (int i = 0; i < barcodes.Length / 10; i++) {  	oBarcodes.Add (barcodes.Substring (i * 10' 10));  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,getBarcodeLists,The following statement contains a magic number: oBarcodes.Add (barcodes.Substring (i * 10' 10));  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,getBarcodeLists,The following statement contains a magic number: oBarcodes.Add (barcodes.Substring (i * 10' 10));  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,validValue,The following statement contains a magic number: if (value > Math.Pow (2' bit) - 1) {  	return false;  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,TextToLong,The following statement contains a magic number: if (text.Length > 4) {  	text = text.Substring (0' 4);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,TextToLong,The following statement contains a magic number: if (text.Length > 4) {  	text = text.Substring (0' 4);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,TextToLong,The following statement contains a magic number: text = text.Substring (0' 4);  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,TextToLong,The following statement contains a magic number: for (int j = 0; j < text.Length; j++) {  	if (table.TryGetValue (text [j]' out textIdx)) {  		ret = ret | ((long)textIdx << j * 6);  	}  	else {  		ret = ret | (0L << j * 6);  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,TextToLong,The following statement contains a magic number: for (int j = 0; j < text.Length; j++) {  	if (table.TryGetValue (text [j]' out textIdx)) {  		ret = ret | ((long)textIdx << j * 6);  	}  	else {  		ret = ret | (0L << j * 6);  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,TextToLong,The following statement contains a magic number: if (table.TryGetValue (text [j]' out textIdx)) {  	ret = ret | ((long)textIdx << j * 6);  }  else {  	ret = ret | (0L << j * 6);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,TextToLong,The following statement contains a magic number: if (table.TryGetValue (text [j]' out textIdx)) {  	ret = ret | ((long)textIdx << j * 6);  }  else {  	ret = ret | (0L << j * 6);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,TextToLong,The following statement contains a magic number: ret = ret | ((long)textIdx << j * 6);  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,TextToLong,The following statement contains a magic number: ret = ret | (0L << j * 6);  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,IntToText,The following statement contains a magic number: for (int j = 0; j < 4; j++) {  	int idx = (value >> 6 * j) & mask;  	word += numberText [idx];  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,IntToText,The following statement contains a magic number: for (int j = 0; j < 4; j++) {  	int idx = (value >> 6 * j) & mask;  	word += numberText [idx];  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text256ToLong,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (i >= maxIndex) {  		ret = ret | (32L << i * 8);  	}  	else {  		ret = ret | ((long)textBytes [i] << i * 8);  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text256ToLong,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (i >= maxIndex) {  		ret = ret | (32L << i * 8);  	}  	else {  		ret = ret | ((long)textBytes [i] << i * 8);  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text256ToLong,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (i >= maxIndex) {  		ret = ret | (32L << i * 8);  	}  	else {  		ret = ret | ((long)textBytes [i] << i * 8);  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text256ToLong,The following statement contains a magic number: if (i >= maxIndex) {  	ret = ret | (32L << i * 8);  }  else {  	ret = ret | ((long)textBytes [i] << i * 8);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text256ToLong,The following statement contains a magic number: if (i >= maxIndex) {  	ret = ret | (32L << i * 8);  }  else {  	ret = ret | ((long)textBytes [i] << i * 8);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text256ToLong,The following statement contains a magic number: ret = ret | (32L << i * 8);  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text256ToLong,The following statement contains a magic number: ret = ret | ((long)textBytes [i] << i * 8);  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text128ToLong,The following statement contains a magic number: if (text.Length > 4) {  	text = text.Substring (0' 4);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text128ToLong,The following statement contains a magic number: if (text.Length > 4) {  	text = text.Substring (0' 4);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text128ToLong,The following statement contains a magic number: text = text.Substring (0' 4);  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text128ToLong,The following statement contains a magic number: if (codes.Length > 4) {  	return 32;  	// space  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text128ToLong,The following statement contains a magic number: if (codes.Length > 4) {  	return 32;  	// space  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text128ToLong,The following statement contains a magic number: return 32;  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text128ToLong,The following statement contains a magic number: for (int i = 0; i < codes.Length; i++) {  	if (codes [i] < 128) {  		ret = ret | ((long)codes [i] << i * 7);  	}  	else {  		ret = ret | (0L << i * 7);  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text128ToLong,The following statement contains a magic number: for (int i = 0; i < codes.Length; i++) {  	if (codes [i] < 128) {  		ret = ret | ((long)codes [i] << i * 7);  	}  	else {  		ret = ret | (0L << i * 7);  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text128ToLong,The following statement contains a magic number: for (int i = 0; i < codes.Length; i++) {  	if (codes [i] < 128) {  		ret = ret | ((long)codes [i] << i * 7);  	}  	else {  		ret = ret | (0L << i * 7);  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text128ToLong,The following statement contains a magic number: if (codes [i] < 128) {  	ret = ret | ((long)codes [i] << i * 7);  }  else {  	ret = ret | (0L << i * 7);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text128ToLong,The following statement contains a magic number: if (codes [i] < 128) {  	ret = ret | ((long)codes [i] << i * 7);  }  else {  	ret = ret | (0L << i * 7);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text128ToLong,The following statement contains a magic number: if (codes [i] < 128) {  	ret = ret | ((long)codes [i] << i * 7);  }  else {  	ret = ret | (0L << i * 7);  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text128ToLong,The following statement contains a magic number: ret = ret | ((long)codes [i] << i * 7);  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,Text128ToLong,The following statement contains a magic number: ret = ret | (0L << i * 7);  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,IntToText128,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	byte idx = (byte)((value >> 7 * i) & mask);  	if (idx != 0) {  		word += encoder.GetString (new byte[] {  			idx  		});  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,IntToText128,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	byte idx = (byte)((value >> 7 * i) & mask);  	if (idx != 0) {  		word += encoder.GetString (new byte[] {  			idx  		});  	}  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,EncodeFloat16,The following statement contains a magic number: while (value != Math.Round (value)) {  	if (value * 10 >= 4095)  		break;  	value *= 10;  	cnt++;  	if (cnt == 15)  		break;  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,EncodeFloat16,The following statement contains a magic number: while (value != Math.Round (value)) {  	if (value * 10 >= 4095)  		break;  	value *= 10;  	cnt++;  	if (cnt == 15)  		break;  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,EncodeFloat16,The following statement contains a magic number: while (value != Math.Round (value)) {  	if (value * 10 >= 4095)  		break;  	value *= 10;  	cnt++;  	if (cnt == 15)  		break;  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,EncodeFloat16,The following statement contains a magic number: while (value != Math.Round (value)) {  	if (value * 10 >= 4095)  		break;  	value *= 10;  	cnt++;  	if (cnt == 15)  		break;  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,EncodeFloat16,The following statement contains a magic number: if (value * 10 >= 4095)  	break;  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,EncodeFloat16,The following statement contains a magic number: if (value * 10 >= 4095)  	break;  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,EncodeFloat16,The following statement contains a magic number: value *= 10;  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,EncodeFloat16,The following statement contains a magic number: if (cnt == 15)  	break;  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,EncodeFloat16,The following statement contains a magic number: return (ushort)((cnt << 12) + (int)Math.Round (value));  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,DecodeFloat16,The following statement contains a magic number: while (cnt > 0) {  	result /= 10;  	//result /= 8;  	cnt--;  }  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,DecodeFloat16,The following statement contains a magic number: result /= 10;  
Magic Number,KwBarcode,BarcodeCore,C:\repos\hermanliang_BCTest\KwBarcode\BarcodeCore.cs,bytes2Uint16,The following statement contains a magic number: retValue = retValue | (dataBytes [startIndex] & 0xff) | ((dataBytes [startIndex + 1] << 8) & 0xff00);  
Magic Number,KwBarcode,KwQRCodeReader,C:\repos\hermanliang_BCTest\KwBarcode\KwQRCodeReader.cs,ProcessQRReader,The following statement contains a magic number: try {  	result = reader.decode (bbitmap);  }  catch (ReaderException rex) {  	Console.WriteLine (rex.Message);  	if (counter == 0) {  		image = paddingImage (image' 20);  		counter = 1;  		return ProcessQRReader (image);  	}  	else {  		counter = 0;  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,KwBarcode,KwQRCodeReader,C:\repos\hermanliang_BCTest\KwBarcode\KwQRCodeReader.cs,ProcessQRReader,The following statement contains a magic number: if (counter == 0) {  	image = paddingImage (image' 20);  	counter = 1;  	return ProcessQRReader (image);  }  else {  	counter = 0;  }  
Magic Number,KwBarcode,KwQRCodeReader,C:\repos\hermanliang_BCTest\KwBarcode\KwQRCodeReader.cs,ProcessQRReader,The following statement contains a magic number: image = paddingImage (image' 20);  
Magic Number,KwBarcode,KwQRCodeReader,C:\repos\hermanliang_BCTest\KwBarcode\KwQRCodeReader.cs,preProcessImage,The following statement contains a magic number: image = new Bitmap (image' new Size ((int)((double)image.Width / minLen * 256)' (int)((double)image.Height / minLen * 256)));  
Magic Number,KwBarcode,KwQRCodeReader,C:\repos\hermanliang_BCTest\KwBarcode\KwQRCodeReader.cs,preProcessImage,The following statement contains a magic number: image = new Bitmap (image' new Size ((int)((double)image.Width / minLen * 256)' (int)((double)image.Height / minLen * 256)));  
