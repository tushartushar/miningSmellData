Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherTargetData,Cyclomatic complexity of the method is 8
Complex Method,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,Cyclomatic complexity of the method is 30
Complex Method,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,setLabelDefault,Cyclomatic complexity of the method is 16
Complex Conditional,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherTargetData,The conditional expression  "mLb < 0 || mLb > 255 || mTb < 0 || mTb > 255"  is complex.
Complex Conditional,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherTargetData,The conditional expression  "mTw < 0 || mTw > 255 || mTh < 0 || mTh > 255 || mTi < 0 || mTi > 255"  is complex.
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,NuClover,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++)  	bits [i] = 32;  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,NuClover,The following statement contains a magic number: bits [i] = 32;  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,drawTargetZoneOnImage,The following statement contains a magic number: if (gatherTargetData ()) {  	Rectangle[] rect = getTargetRect ();  	Graphics g1 = Graphics.FromImage (retImage);  	Pen p = new Pen (Color.Red);  	p.Width = 2;  	g1.DrawRectangles (p' rect);  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,drawTargetZoneOnImage,The following statement contains a magic number: p.Width = 2;  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherInfoData,The following statement contains a magic number: try {  	mCco = int.Parse (TxCco.Text);  	mTco = int.Parse (TxTco.Text);  	mTn = TxTn.Text;  	mTCoC = float.Parse (TxTcoC.Text);  	for (int i = 0; i < fRLUs.Length; i++) {  		fRLUs [i] = 0;  		fConcs [i] = 0;  		try {  			fRLUs [i] = float.Parse (RLUs [i].Text);  			fConcs [i] = float.Parse (Concs [i].Text);  			if (fRLUs [i] < 0 || fRLUs [i] > 1000)  				throw new Exception ();  			if (fConcs [i] < 0 || fConcs [i] > 1000)  				throw new Exception ();  		}  		catch (Exception ex) {  			throw ex;  		}  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  	errScanning (0);  	return false;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherInfoData,The following statement contains a magic number: try {  	mCco = int.Parse (TxCco.Text);  	mTco = int.Parse (TxTco.Text);  	mTn = TxTn.Text;  	mTCoC = float.Parse (TxTcoC.Text);  	for (int i = 0; i < fRLUs.Length; i++) {  		fRLUs [i] = 0;  		fConcs [i] = 0;  		try {  			fRLUs [i] = float.Parse (RLUs [i].Text);  			fConcs [i] = float.Parse (Concs [i].Text);  			if (fRLUs [i] < 0 || fRLUs [i] > 1000)  				throw new Exception ();  			if (fConcs [i] < 0 || fConcs [i] > 1000)  				throw new Exception ();  		}  		catch (Exception ex) {  			throw ex;  		}  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  	errScanning (0);  	return false;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherInfoData,The following statement contains a magic number: for (int i = 0; i < fRLUs.Length; i++) {  	fRLUs [i] = 0;  	fConcs [i] = 0;  	try {  		fRLUs [i] = float.Parse (RLUs [i].Text);  		fConcs [i] = float.Parse (Concs [i].Text);  		if (fRLUs [i] < 0 || fRLUs [i] > 1000)  			throw new Exception ();  		if (fConcs [i] < 0 || fConcs [i] > 1000)  			throw new Exception ();  	}  	catch (Exception ex) {  		throw ex;  	}  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherInfoData,The following statement contains a magic number: for (int i = 0; i < fRLUs.Length; i++) {  	fRLUs [i] = 0;  	fConcs [i] = 0;  	try {  		fRLUs [i] = float.Parse (RLUs [i].Text);  		fConcs [i] = float.Parse (Concs [i].Text);  		if (fRLUs [i] < 0 || fRLUs [i] > 1000)  			throw new Exception ();  		if (fConcs [i] < 0 || fConcs [i] > 1000)  			throw new Exception ();  	}  	catch (Exception ex) {  		throw ex;  	}  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherInfoData,The following statement contains a magic number: try {  	fRLUs [i] = float.Parse (RLUs [i].Text);  	fConcs [i] = float.Parse (Concs [i].Text);  	if (fRLUs [i] < 0 || fRLUs [i] > 1000)  		throw new Exception ();  	if (fConcs [i] < 0 || fConcs [i] > 1000)  		throw new Exception ();  }  catch (Exception ex) {  	throw ex;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherInfoData,The following statement contains a magic number: try {  	fRLUs [i] = float.Parse (RLUs [i].Text);  	fConcs [i] = float.Parse (Concs [i].Text);  	if (fRLUs [i] < 0 || fRLUs [i] > 1000)  		throw new Exception ();  	if (fConcs [i] < 0 || fConcs [i] > 1000)  		throw new Exception ();  }  catch (Exception ex) {  	throw ex;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherInfoData,The following statement contains a magic number: if (fRLUs [i] < 0 || fRLUs [i] > 1000)  	throw new Exception ();  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherInfoData,The following statement contains a magic number: if (fConcs [i] < 0 || fConcs [i] > 1000)  	throw new Exception ();  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherTargetData,The following statement contains a magic number: try {  	mLb = int.Parse (TxLb.Text);  	mRb = int.Parse (TxRb.Text);  	mTb = int.Parse (TxTb.Text);  	mTw = int.Parse (TxTw.Text);  	mTh = int.Parse (TxTh.Text);  	mTi = int.Parse (TxTi.Text);  	mRows = int.Parse (TxRows.Text);  	mLines = int.Parse (TxLines.Text);  	if (mLb < 0 || mLb > 255 || mTb < 0 || mTb > 255)  		throw new Exception ("mLb' mTb < 100");  	if (mRb < 0 || mRb > 255)  		throw new Exception ();  	if (mTw < 0 || mTw > 255 || mTh < 0 || mTh > 255 || mTi < 0 || mTi > 255)  		throw new Exception ("Target bound error");  	if (mRows < 1 || mLines < 2 || mLines > 6)  		throw new Exception ();  	for (int i = 0; i < ItemPanels.Length; i++) {  		if (i < mRows * (mLines - 1))  			ItemPanels [i].Visible = true;  		else  			ItemPanels [i].Visible = false;  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  	errScanning (1);  	return false;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherTargetData,The following statement contains a magic number: try {  	mLb = int.Parse (TxLb.Text);  	mRb = int.Parse (TxRb.Text);  	mTb = int.Parse (TxTb.Text);  	mTw = int.Parse (TxTw.Text);  	mTh = int.Parse (TxTh.Text);  	mTi = int.Parse (TxTi.Text);  	mRows = int.Parse (TxRows.Text);  	mLines = int.Parse (TxLines.Text);  	if (mLb < 0 || mLb > 255 || mTb < 0 || mTb > 255)  		throw new Exception ("mLb' mTb < 100");  	if (mRb < 0 || mRb > 255)  		throw new Exception ();  	if (mTw < 0 || mTw > 255 || mTh < 0 || mTh > 255 || mTi < 0 || mTi > 255)  		throw new Exception ("Target bound error");  	if (mRows < 1 || mLines < 2 || mLines > 6)  		throw new Exception ();  	for (int i = 0; i < ItemPanels.Length; i++) {  		if (i < mRows * (mLines - 1))  			ItemPanels [i].Visible = true;  		else  			ItemPanels [i].Visible = false;  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  	errScanning (1);  	return false;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherTargetData,The following statement contains a magic number: try {  	mLb = int.Parse (TxLb.Text);  	mRb = int.Parse (TxRb.Text);  	mTb = int.Parse (TxTb.Text);  	mTw = int.Parse (TxTw.Text);  	mTh = int.Parse (TxTh.Text);  	mTi = int.Parse (TxTi.Text);  	mRows = int.Parse (TxRows.Text);  	mLines = int.Parse (TxLines.Text);  	if (mLb < 0 || mLb > 255 || mTb < 0 || mTb > 255)  		throw new Exception ("mLb' mTb < 100");  	if (mRb < 0 || mRb > 255)  		throw new Exception ();  	if (mTw < 0 || mTw > 255 || mTh < 0 || mTh > 255 || mTi < 0 || mTi > 255)  		throw new Exception ("Target bound error");  	if (mRows < 1 || mLines < 2 || mLines > 6)  		throw new Exception ();  	for (int i = 0; i < ItemPanels.Length; i++) {  		if (i < mRows * (mLines - 1))  			ItemPanels [i].Visible = true;  		else  			ItemPanels [i].Visible = false;  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  	errScanning (1);  	return false;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherTargetData,The following statement contains a magic number: try {  	mLb = int.Parse (TxLb.Text);  	mRb = int.Parse (TxRb.Text);  	mTb = int.Parse (TxTb.Text);  	mTw = int.Parse (TxTw.Text);  	mTh = int.Parse (TxTh.Text);  	mTi = int.Parse (TxTi.Text);  	mRows = int.Parse (TxRows.Text);  	mLines = int.Parse (TxLines.Text);  	if (mLb < 0 || mLb > 255 || mTb < 0 || mTb > 255)  		throw new Exception ("mLb' mTb < 100");  	if (mRb < 0 || mRb > 255)  		throw new Exception ();  	if (mTw < 0 || mTw > 255 || mTh < 0 || mTh > 255 || mTi < 0 || mTi > 255)  		throw new Exception ("Target bound error");  	if (mRows < 1 || mLines < 2 || mLines > 6)  		throw new Exception ();  	for (int i = 0; i < ItemPanels.Length; i++) {  		if (i < mRows * (mLines - 1))  			ItemPanels [i].Visible = true;  		else  			ItemPanels [i].Visible = false;  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  	errScanning (1);  	return false;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherTargetData,The following statement contains a magic number: try {  	mLb = int.Parse (TxLb.Text);  	mRb = int.Parse (TxRb.Text);  	mTb = int.Parse (TxTb.Text);  	mTw = int.Parse (TxTw.Text);  	mTh = int.Parse (TxTh.Text);  	mTi = int.Parse (TxTi.Text);  	mRows = int.Parse (TxRows.Text);  	mLines = int.Parse (TxLines.Text);  	if (mLb < 0 || mLb > 255 || mTb < 0 || mTb > 255)  		throw new Exception ("mLb' mTb < 100");  	if (mRb < 0 || mRb > 255)  		throw new Exception ();  	if (mTw < 0 || mTw > 255 || mTh < 0 || mTh > 255 || mTi < 0 || mTi > 255)  		throw new Exception ("Target bound error");  	if (mRows < 1 || mLines < 2 || mLines > 6)  		throw new Exception ();  	for (int i = 0; i < ItemPanels.Length; i++) {  		if (i < mRows * (mLines - 1))  			ItemPanels [i].Visible = true;  		else  			ItemPanels [i].Visible = false;  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  	errScanning (1);  	return false;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherTargetData,The following statement contains a magic number: try {  	mLb = int.Parse (TxLb.Text);  	mRb = int.Parse (TxRb.Text);  	mTb = int.Parse (TxTb.Text);  	mTw = int.Parse (TxTw.Text);  	mTh = int.Parse (TxTh.Text);  	mTi = int.Parse (TxTi.Text);  	mRows = int.Parse (TxRows.Text);  	mLines = int.Parse (TxLines.Text);  	if (mLb < 0 || mLb > 255 || mTb < 0 || mTb > 255)  		throw new Exception ("mLb' mTb < 100");  	if (mRb < 0 || mRb > 255)  		throw new Exception ();  	if (mTw < 0 || mTw > 255 || mTh < 0 || mTh > 255 || mTi < 0 || mTi > 255)  		throw new Exception ("Target bound error");  	if (mRows < 1 || mLines < 2 || mLines > 6)  		throw new Exception ();  	for (int i = 0; i < ItemPanels.Length; i++) {  		if (i < mRows * (mLines - 1))  			ItemPanels [i].Visible = true;  		else  			ItemPanels [i].Visible = false;  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  	errScanning (1);  	return false;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherTargetData,The following statement contains a magic number: try {  	mLb = int.Parse (TxLb.Text);  	mRb = int.Parse (TxRb.Text);  	mTb = int.Parse (TxTb.Text);  	mTw = int.Parse (TxTw.Text);  	mTh = int.Parse (TxTh.Text);  	mTi = int.Parse (TxTi.Text);  	mRows = int.Parse (TxRows.Text);  	mLines = int.Parse (TxLines.Text);  	if (mLb < 0 || mLb > 255 || mTb < 0 || mTb > 255)  		throw new Exception ("mLb' mTb < 100");  	if (mRb < 0 || mRb > 255)  		throw new Exception ();  	if (mTw < 0 || mTw > 255 || mTh < 0 || mTh > 255 || mTi < 0 || mTi > 255)  		throw new Exception ("Target bound error");  	if (mRows < 1 || mLines < 2 || mLines > 6)  		throw new Exception ();  	for (int i = 0; i < ItemPanels.Length; i++) {  		if (i < mRows * (mLines - 1))  			ItemPanels [i].Visible = true;  		else  			ItemPanels [i].Visible = false;  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  	errScanning (1);  	return false;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherTargetData,The following statement contains a magic number: try {  	mLb = int.Parse (TxLb.Text);  	mRb = int.Parse (TxRb.Text);  	mTb = int.Parse (TxTb.Text);  	mTw = int.Parse (TxTw.Text);  	mTh = int.Parse (TxTh.Text);  	mTi = int.Parse (TxTi.Text);  	mRows = int.Parse (TxRows.Text);  	mLines = int.Parse (TxLines.Text);  	if (mLb < 0 || mLb > 255 || mTb < 0 || mTb > 255)  		throw new Exception ("mLb' mTb < 100");  	if (mRb < 0 || mRb > 255)  		throw new Exception ();  	if (mTw < 0 || mTw > 255 || mTh < 0 || mTh > 255 || mTi < 0 || mTi > 255)  		throw new Exception ("Target bound error");  	if (mRows < 1 || mLines < 2 || mLines > 6)  		throw new Exception ();  	for (int i = 0; i < ItemPanels.Length; i++) {  		if (i < mRows * (mLines - 1))  			ItemPanels [i].Visible = true;  		else  			ItemPanels [i].Visible = false;  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  	errScanning (1);  	return false;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherTargetData,The following statement contains a magic number: if (mLb < 0 || mLb > 255 || mTb < 0 || mTb > 255)  	throw new Exception ("mLb' mTb < 100");  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherTargetData,The following statement contains a magic number: if (mLb < 0 || mLb > 255 || mTb < 0 || mTb > 255)  	throw new Exception ("mLb' mTb < 100");  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherTargetData,The following statement contains a magic number: if (mRb < 0 || mRb > 255)  	throw new Exception ();  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherTargetData,The following statement contains a magic number: if (mTw < 0 || mTw > 255 || mTh < 0 || mTh > 255 || mTi < 0 || mTi > 255)  	throw new Exception ("Target bound error");  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherTargetData,The following statement contains a magic number: if (mTw < 0 || mTw > 255 || mTh < 0 || mTh > 255 || mTi < 0 || mTi > 255)  	throw new Exception ("Target bound error");  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherTargetData,The following statement contains a magic number: if (mTw < 0 || mTw > 255 || mTh < 0 || mTh > 255 || mTi < 0 || mTi > 255)  	throw new Exception ("Target bound error");  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherTargetData,The following statement contains a magic number: if (mRows < 1 || mLines < 2 || mLines > 6)  	throw new Exception ();  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,gatherTargetData,The following statement contains a magic number: if (mRows < 1 || mLines < 2 || mLines > 6)  	throw new Exception ();  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: dataBytes [3] = (byte)lTBandAppear;  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	data [i + 1] = BarcodeCore.Text256ToLong (prodID [i]);  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	data [i + 6] = BarcodeCore.Text256ToLong (prodLot [i]);  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	data [i + 6] = BarcodeCore.Text256ToLong (prodLot [i]);  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: data [i + 6] = BarcodeCore.Text256ToLong (prodLot [i]);  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: dataBytes = new byte[4];  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: dataBytes [2] = expYear [0];  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: dataBytes [3] = expYear [1];  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: data [9] = dataBytes2Long (dataBytes);  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: dataBytes = new byte[4];  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: dataBytes [2] = (byte)mTw;  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: dataBytes [3] = (byte)mTh;  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: data [10] = dataBytes2Long (dataBytes);  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: dataBytes = new byte[4];  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: dataBytes [2] = (byte)mTi;  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: dataBytes [3] = (byte)mCco;  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: data [11] = dataBytes2Long (dataBytes);  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: dataBytes = new byte[4];  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: dataBytes [2] = (byte)mTco;  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: data [12] = dataBytes2Long (dataBytes);  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: data [13] = BarcodeCore.FloatToLong (mTCoC);  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: data [14] = BarcodeCore.Text256ToLong (mTn);  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: for (int i = 0; i < fRLUs.Length; i++) {  	dataBytes = new byte[4];  	byte[] tmpRLU = BarcodeCore.float16ToBytes (fRLUs [i]);  	byte[] tmpConc = BarcodeCore.float16ToBytes (fConcs [i]);  	dataBytes [0] = tmpRLU [0];  	dataBytes [1] = tmpRLU [1];  	dataBytes [2] = tmpConc [0];  	dataBytes [3] = tmpConc [1];  	data [i + 15] = dataBytes2Long (dataBytes);  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: for (int i = 0; i < fRLUs.Length; i++) {  	dataBytes = new byte[4];  	byte[] tmpRLU = BarcodeCore.float16ToBytes (fRLUs [i]);  	byte[] tmpConc = BarcodeCore.float16ToBytes (fConcs [i]);  	dataBytes [0] = tmpRLU [0];  	dataBytes [1] = tmpRLU [1];  	dataBytes [2] = tmpConc [0];  	dataBytes [3] = tmpConc [1];  	data [i + 15] = dataBytes2Long (dataBytes);  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: for (int i = 0; i < fRLUs.Length; i++) {  	dataBytes = new byte[4];  	byte[] tmpRLU = BarcodeCore.float16ToBytes (fRLUs [i]);  	byte[] tmpConc = BarcodeCore.float16ToBytes (fConcs [i]);  	dataBytes [0] = tmpRLU [0];  	dataBytes [1] = tmpRLU [1];  	dataBytes [2] = tmpConc [0];  	dataBytes [3] = tmpConc [1];  	data [i + 15] = dataBytes2Long (dataBytes);  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: for (int i = 0; i < fRLUs.Length; i++) {  	dataBytes = new byte[4];  	byte[] tmpRLU = BarcodeCore.float16ToBytes (fRLUs [i]);  	byte[] tmpConc = BarcodeCore.float16ToBytes (fConcs [i]);  	dataBytes [0] = tmpRLU [0];  	dataBytes [1] = tmpRLU [1];  	dataBytes [2] = tmpConc [0];  	dataBytes [3] = tmpConc [1];  	data [i + 15] = dataBytes2Long (dataBytes);  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: dataBytes = new byte[4];  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: dataBytes [2] = tmpConc [0];  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: dataBytes [3] = tmpConc [1];  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,convertAllDataToLong,The following statement contains a magic number: data [i + 15] = dataBytes2Long (dataBytes);  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: switch (type) {  case 0:  	try {  		mCco = int.Parse (TxCco.Text);  	}  	catch {  		LbCco.ForeColor = Color.Red;  	}  	try {  		mTco = int.Parse (TxTco.Text);  	}  	catch {  		LbTco.ForeColor = Color.Red;  	}  	try {  		mTn = TxTn.Text;  	}  	catch {  		LbTn.ForeColor = Color.Red;  	}  	for (int i = 0; i < fRLUs.Length; i++) {  		try {  			fRLUs [i] = float.Parse (RLUs [i].Text);  			fConcs [i] = float.Parse (Concs [i].Text);  			if (fRLUs [i] < 0 || fRLUs [i] > 1000)  				throw new Exception ();  			if (fConcs [i] < 0 || fConcs [i] > 1000)  				throw new Exception ();  		}  		catch {  			ItemFlowPanels [0].BackColor = Color.Red;  		}  	}  	break;  case 1:  	try {  		mLb = int.Parse (TxLb.Text);  		if (mLb < 0 || mLb > 255)  			throw new Exception ();  	}  	catch {  		LbLb.ForeColor = Color.Red;  	}  	try {  		mTb = int.Parse (TxTb.Text);  		if (mTb < 0 || mTb > 255)  			throw new Exception ();  	}  	catch {  		LbTb.ForeColor = Color.Red;  	}  	try {  		mTw = int.Parse (TxTw.Text);  		if (mTw < 0 || mTw > 255)  			throw new Exception ();  	}  	catch {  		LbTw.ForeColor = Color.Red;  	}  	try {  		mTh = int.Parse (TxTh.Text);  		if (mTh < 0 || mTh > 255)  			throw new Exception ();  	}  	catch {  		LbTh.ForeColor = Color.Red;  	}  	try {  		mTi = int.Parse (TxTi.Text);  		if (mTi < 0 || mTi > 255)  			throw new Exception ();  	}  	catch {  		LbTi.ForeColor = Color.Red;  	}  	break;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: switch (type) {  case 0:  	try {  		mCco = int.Parse (TxCco.Text);  	}  	catch {  		LbCco.ForeColor = Color.Red;  	}  	try {  		mTco = int.Parse (TxTco.Text);  	}  	catch {  		LbTco.ForeColor = Color.Red;  	}  	try {  		mTn = TxTn.Text;  	}  	catch {  		LbTn.ForeColor = Color.Red;  	}  	for (int i = 0; i < fRLUs.Length; i++) {  		try {  			fRLUs [i] = float.Parse (RLUs [i].Text);  			fConcs [i] = float.Parse (Concs [i].Text);  			if (fRLUs [i] < 0 || fRLUs [i] > 1000)  				throw new Exception ();  			if (fConcs [i] < 0 || fConcs [i] > 1000)  				throw new Exception ();  		}  		catch {  			ItemFlowPanels [0].BackColor = Color.Red;  		}  	}  	break;  case 1:  	try {  		mLb = int.Parse (TxLb.Text);  		if (mLb < 0 || mLb > 255)  			throw new Exception ();  	}  	catch {  		LbLb.ForeColor = Color.Red;  	}  	try {  		mTb = int.Parse (TxTb.Text);  		if (mTb < 0 || mTb > 255)  			throw new Exception ();  	}  	catch {  		LbTb.ForeColor = Color.Red;  	}  	try {  		mTw = int.Parse (TxTw.Text);  		if (mTw < 0 || mTw > 255)  			throw new Exception ();  	}  	catch {  		LbTw.ForeColor = Color.Red;  	}  	try {  		mTh = int.Parse (TxTh.Text);  		if (mTh < 0 || mTh > 255)  			throw new Exception ();  	}  	catch {  		LbTh.ForeColor = Color.Red;  	}  	try {  		mTi = int.Parse (TxTi.Text);  		if (mTi < 0 || mTi > 255)  			throw new Exception ();  	}  	catch {  		LbTi.ForeColor = Color.Red;  	}  	break;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: switch (type) {  case 0:  	try {  		mCco = int.Parse (TxCco.Text);  	}  	catch {  		LbCco.ForeColor = Color.Red;  	}  	try {  		mTco = int.Parse (TxTco.Text);  	}  	catch {  		LbTco.ForeColor = Color.Red;  	}  	try {  		mTn = TxTn.Text;  	}  	catch {  		LbTn.ForeColor = Color.Red;  	}  	for (int i = 0; i < fRLUs.Length; i++) {  		try {  			fRLUs [i] = float.Parse (RLUs [i].Text);  			fConcs [i] = float.Parse (Concs [i].Text);  			if (fRLUs [i] < 0 || fRLUs [i] > 1000)  				throw new Exception ();  			if (fConcs [i] < 0 || fConcs [i] > 1000)  				throw new Exception ();  		}  		catch {  			ItemFlowPanels [0].BackColor = Color.Red;  		}  	}  	break;  case 1:  	try {  		mLb = int.Parse (TxLb.Text);  		if (mLb < 0 || mLb > 255)  			throw new Exception ();  	}  	catch {  		LbLb.ForeColor = Color.Red;  	}  	try {  		mTb = int.Parse (TxTb.Text);  		if (mTb < 0 || mTb > 255)  			throw new Exception ();  	}  	catch {  		LbTb.ForeColor = Color.Red;  	}  	try {  		mTw = int.Parse (TxTw.Text);  		if (mTw < 0 || mTw > 255)  			throw new Exception ();  	}  	catch {  		LbTw.ForeColor = Color.Red;  	}  	try {  		mTh = int.Parse (TxTh.Text);  		if (mTh < 0 || mTh > 255)  			throw new Exception ();  	}  	catch {  		LbTh.ForeColor = Color.Red;  	}  	try {  		mTi = int.Parse (TxTi.Text);  		if (mTi < 0 || mTi > 255)  			throw new Exception ();  	}  	catch {  		LbTi.ForeColor = Color.Red;  	}  	break;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: switch (type) {  case 0:  	try {  		mCco = int.Parse (TxCco.Text);  	}  	catch {  		LbCco.ForeColor = Color.Red;  	}  	try {  		mTco = int.Parse (TxTco.Text);  	}  	catch {  		LbTco.ForeColor = Color.Red;  	}  	try {  		mTn = TxTn.Text;  	}  	catch {  		LbTn.ForeColor = Color.Red;  	}  	for (int i = 0; i < fRLUs.Length; i++) {  		try {  			fRLUs [i] = float.Parse (RLUs [i].Text);  			fConcs [i] = float.Parse (Concs [i].Text);  			if (fRLUs [i] < 0 || fRLUs [i] > 1000)  				throw new Exception ();  			if (fConcs [i] < 0 || fConcs [i] > 1000)  				throw new Exception ();  		}  		catch {  			ItemFlowPanels [0].BackColor = Color.Red;  		}  	}  	break;  case 1:  	try {  		mLb = int.Parse (TxLb.Text);  		if (mLb < 0 || mLb > 255)  			throw new Exception ();  	}  	catch {  		LbLb.ForeColor = Color.Red;  	}  	try {  		mTb = int.Parse (TxTb.Text);  		if (mTb < 0 || mTb > 255)  			throw new Exception ();  	}  	catch {  		LbTb.ForeColor = Color.Red;  	}  	try {  		mTw = int.Parse (TxTw.Text);  		if (mTw < 0 || mTw > 255)  			throw new Exception ();  	}  	catch {  		LbTw.ForeColor = Color.Red;  	}  	try {  		mTh = int.Parse (TxTh.Text);  		if (mTh < 0 || mTh > 255)  			throw new Exception ();  	}  	catch {  		LbTh.ForeColor = Color.Red;  	}  	try {  		mTi = int.Parse (TxTi.Text);  		if (mTi < 0 || mTi > 255)  			throw new Exception ();  	}  	catch {  		LbTi.ForeColor = Color.Red;  	}  	break;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: switch (type) {  case 0:  	try {  		mCco = int.Parse (TxCco.Text);  	}  	catch {  		LbCco.ForeColor = Color.Red;  	}  	try {  		mTco = int.Parse (TxTco.Text);  	}  	catch {  		LbTco.ForeColor = Color.Red;  	}  	try {  		mTn = TxTn.Text;  	}  	catch {  		LbTn.ForeColor = Color.Red;  	}  	for (int i = 0; i < fRLUs.Length; i++) {  		try {  			fRLUs [i] = float.Parse (RLUs [i].Text);  			fConcs [i] = float.Parse (Concs [i].Text);  			if (fRLUs [i] < 0 || fRLUs [i] > 1000)  				throw new Exception ();  			if (fConcs [i] < 0 || fConcs [i] > 1000)  				throw new Exception ();  		}  		catch {  			ItemFlowPanels [0].BackColor = Color.Red;  		}  	}  	break;  case 1:  	try {  		mLb = int.Parse (TxLb.Text);  		if (mLb < 0 || mLb > 255)  			throw new Exception ();  	}  	catch {  		LbLb.ForeColor = Color.Red;  	}  	try {  		mTb = int.Parse (TxTb.Text);  		if (mTb < 0 || mTb > 255)  			throw new Exception ();  	}  	catch {  		LbTb.ForeColor = Color.Red;  	}  	try {  		mTw = int.Parse (TxTw.Text);  		if (mTw < 0 || mTw > 255)  			throw new Exception ();  	}  	catch {  		LbTw.ForeColor = Color.Red;  	}  	try {  		mTh = int.Parse (TxTh.Text);  		if (mTh < 0 || mTh > 255)  			throw new Exception ();  	}  	catch {  		LbTh.ForeColor = Color.Red;  	}  	try {  		mTi = int.Parse (TxTi.Text);  		if (mTi < 0 || mTi > 255)  			throw new Exception ();  	}  	catch {  		LbTi.ForeColor = Color.Red;  	}  	break;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: switch (type) {  case 0:  	try {  		mCco = int.Parse (TxCco.Text);  	}  	catch {  		LbCco.ForeColor = Color.Red;  	}  	try {  		mTco = int.Parse (TxTco.Text);  	}  	catch {  		LbTco.ForeColor = Color.Red;  	}  	try {  		mTn = TxTn.Text;  	}  	catch {  		LbTn.ForeColor = Color.Red;  	}  	for (int i = 0; i < fRLUs.Length; i++) {  		try {  			fRLUs [i] = float.Parse (RLUs [i].Text);  			fConcs [i] = float.Parse (Concs [i].Text);  			if (fRLUs [i] < 0 || fRLUs [i] > 1000)  				throw new Exception ();  			if (fConcs [i] < 0 || fConcs [i] > 1000)  				throw new Exception ();  		}  		catch {  			ItemFlowPanels [0].BackColor = Color.Red;  		}  	}  	break;  case 1:  	try {  		mLb = int.Parse (TxLb.Text);  		if (mLb < 0 || mLb > 255)  			throw new Exception ();  	}  	catch {  		LbLb.ForeColor = Color.Red;  	}  	try {  		mTb = int.Parse (TxTb.Text);  		if (mTb < 0 || mTb > 255)  			throw new Exception ();  	}  	catch {  		LbTb.ForeColor = Color.Red;  	}  	try {  		mTw = int.Parse (TxTw.Text);  		if (mTw < 0 || mTw > 255)  			throw new Exception ();  	}  	catch {  		LbTw.ForeColor = Color.Red;  	}  	try {  		mTh = int.Parse (TxTh.Text);  		if (mTh < 0 || mTh > 255)  			throw new Exception ();  	}  	catch {  		LbTh.ForeColor = Color.Red;  	}  	try {  		mTi = int.Parse (TxTi.Text);  		if (mTi < 0 || mTi > 255)  			throw new Exception ();  	}  	catch {  		LbTi.ForeColor = Color.Red;  	}  	break;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: switch (type) {  case 0:  	try {  		mCco = int.Parse (TxCco.Text);  	}  	catch {  		LbCco.ForeColor = Color.Red;  	}  	try {  		mTco = int.Parse (TxTco.Text);  	}  	catch {  		LbTco.ForeColor = Color.Red;  	}  	try {  		mTn = TxTn.Text;  	}  	catch {  		LbTn.ForeColor = Color.Red;  	}  	for (int i = 0; i < fRLUs.Length; i++) {  		try {  			fRLUs [i] = float.Parse (RLUs [i].Text);  			fConcs [i] = float.Parse (Concs [i].Text);  			if (fRLUs [i] < 0 || fRLUs [i] > 1000)  				throw new Exception ();  			if (fConcs [i] < 0 || fConcs [i] > 1000)  				throw new Exception ();  		}  		catch {  			ItemFlowPanels [0].BackColor = Color.Red;  		}  	}  	break;  case 1:  	try {  		mLb = int.Parse (TxLb.Text);  		if (mLb < 0 || mLb > 255)  			throw new Exception ();  	}  	catch {  		LbLb.ForeColor = Color.Red;  	}  	try {  		mTb = int.Parse (TxTb.Text);  		if (mTb < 0 || mTb > 255)  			throw new Exception ();  	}  	catch {  		LbTb.ForeColor = Color.Red;  	}  	try {  		mTw = int.Parse (TxTw.Text);  		if (mTw < 0 || mTw > 255)  			throw new Exception ();  	}  	catch {  		LbTw.ForeColor = Color.Red;  	}  	try {  		mTh = int.Parse (TxTh.Text);  		if (mTh < 0 || mTh > 255)  			throw new Exception ();  	}  	catch {  		LbTh.ForeColor = Color.Red;  	}  	try {  		mTi = int.Parse (TxTi.Text);  		if (mTi < 0 || mTi > 255)  			throw new Exception ();  	}  	catch {  		LbTi.ForeColor = Color.Red;  	}  	break;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: for (int i = 0; i < fRLUs.Length; i++) {  	try {  		fRLUs [i] = float.Parse (RLUs [i].Text);  		fConcs [i] = float.Parse (Concs [i].Text);  		if (fRLUs [i] < 0 || fRLUs [i] > 1000)  			throw new Exception ();  		if (fConcs [i] < 0 || fConcs [i] > 1000)  			throw new Exception ();  	}  	catch {  		ItemFlowPanels [0].BackColor = Color.Red;  	}  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: for (int i = 0; i < fRLUs.Length; i++) {  	try {  		fRLUs [i] = float.Parse (RLUs [i].Text);  		fConcs [i] = float.Parse (Concs [i].Text);  		if (fRLUs [i] < 0 || fRLUs [i] > 1000)  			throw new Exception ();  		if (fConcs [i] < 0 || fConcs [i] > 1000)  			throw new Exception ();  	}  	catch {  		ItemFlowPanels [0].BackColor = Color.Red;  	}  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: try {  	fRLUs [i] = float.Parse (RLUs [i].Text);  	fConcs [i] = float.Parse (Concs [i].Text);  	if (fRLUs [i] < 0 || fRLUs [i] > 1000)  		throw new Exception ();  	if (fConcs [i] < 0 || fConcs [i] > 1000)  		throw new Exception ();  }  catch {  	ItemFlowPanels [0].BackColor = Color.Red;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: try {  	fRLUs [i] = float.Parse (RLUs [i].Text);  	fConcs [i] = float.Parse (Concs [i].Text);  	if (fRLUs [i] < 0 || fRLUs [i] > 1000)  		throw new Exception ();  	if (fConcs [i] < 0 || fConcs [i] > 1000)  		throw new Exception ();  }  catch {  	ItemFlowPanels [0].BackColor = Color.Red;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: if (fRLUs [i] < 0 || fRLUs [i] > 1000)  	throw new Exception ();  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: if (fConcs [i] < 0 || fConcs [i] > 1000)  	throw new Exception ();  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: try {  	mLb = int.Parse (TxLb.Text);  	if (mLb < 0 || mLb > 255)  		throw new Exception ();  }  catch {  	LbLb.ForeColor = Color.Red;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: if (mLb < 0 || mLb > 255)  	throw new Exception ();  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: try {  	mTb = int.Parse (TxTb.Text);  	if (mTb < 0 || mTb > 255)  		throw new Exception ();  }  catch {  	LbTb.ForeColor = Color.Red;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: if (mTb < 0 || mTb > 255)  	throw new Exception ();  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: try {  	mTw = int.Parse (TxTw.Text);  	if (mTw < 0 || mTw > 255)  		throw new Exception ();  }  catch {  	LbTw.ForeColor = Color.Red;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: if (mTw < 0 || mTw > 255)  	throw new Exception ();  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: try {  	mTh = int.Parse (TxTh.Text);  	if (mTh < 0 || mTh > 255)  		throw new Exception ();  }  catch {  	LbTh.ForeColor = Color.Red;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: if (mTh < 0 || mTh > 255)  	throw new Exception ();  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: try {  	mTi = int.Parse (TxTi.Text);  	if (mTi < 0 || mTi > 255)  		throw new Exception ();  }  catch {  	LbTi.ForeColor = Color.Red;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following statement contains a magic number: if (mTi < 0 || mTi > 255)  	throw new Exception ();  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,setLabelDefault,The following statement contains a magic number: switch (type) {  case 0:  	LbCco.ForeColor = Color.Black;  	LbTco.ForeColor = Color.Black;  	LbTn.ForeColor = Color.Black;  	if (ItemPanels != null) {  		for (int i = 0; i < ItemPanels.Length; i++) {  			if (i % 2 == 0)  				ItemFlowPanels [i].BackColor = Color.LightGray;  			else  				ItemFlowPanels [i].BackColor = Color.WhiteSmoke;  		}  	}  	break;  case 1:  	LbLb.ForeColor = Color.Black;  	LbTb.ForeColor = Color.Black;  	LbTw.ForeColor = Color.Black;  	LbTh.ForeColor = Color.Black;  	LbTi.ForeColor = Color.Black;  	break;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,setLabelDefault,The following statement contains a magic number: if (ItemPanels != null) {  	for (int i = 0; i < ItemPanels.Length; i++) {  		if (i % 2 == 0)  			ItemFlowPanels [i].BackColor = Color.LightGray;  		else  			ItemFlowPanels [i].BackColor = Color.WhiteSmoke;  	}  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,setLabelDefault,The following statement contains a magic number: for (int i = 0; i < ItemPanels.Length; i++) {  	if (i % 2 == 0)  		ItemFlowPanels [i].BackColor = Color.LightGray;  	else  		ItemFlowPanels [i].BackColor = Color.WhiteSmoke;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,setLabelDefault,The following statement contains a magic number: if (i % 2 == 0)  	ItemFlowPanels [i].BackColor = Color.LightGray;  else  	ItemFlowPanels [i].BackColor = Color.WhiteSmoke;  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (gatherAllData ()) {  	convertAllDataToLong ();  	List<string> barcodes = BarcodeCore.BarcodeEncoder (bits' data);  	string BC = "";  	if (barcodes != null) {  		byte[] bcBytes = new byte[barcodes.Count * 4];  		for (int i = 0; i < barcodes.Count; i++) {  			BC += barcodes [i];  			long code = long.Parse (barcodes [i]);  			byte[] codeBytes = BitConverter.GetBytes (code);  			bcBytes [i * 4] = codeBytes [0];  			bcBytes [i * 4 + 1] = codeBytes [1];  			bcBytes [i * 4 + 2] = codeBytes [2];  			bcBytes [i * 4 + 3] = codeBytes [3];  		}  		mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  		#if DEBUG  		int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  		byte[] dataBytes;  		// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  		dataBytes = int2DataBytes (retData [0]);  		int dVersion = dataBytes [0];  		int dConcUnit = dataBytes [1];  		//int dRLUConcPts = dataBytes[2];  		int dTband = dataBytes [3];  		// 1 - 5: Product ID  		string dProdID = "";  		for (int i = 1; i < 6; i++) {  			dProdID += BarcodeCore.IntToText256 (retData [i]);  		}  		// 6 - 8: Product Lot  		string dProdLot = "";  		for (int i = 6; i < 9; i++) {  			dProdLot += BarcodeCore.IntToText256 (retData [i]);  		}  		// 9: Expiration Date  		dataBytes = int2DataBytes (retData [9]);  		int dDay = dataBytes [0];  		int dMonth = dataBytes [1];  		int dYear = BitConverter.ToUInt16 (dataBytes' 2);  		// 10: [Left Bound' Top Bound' Target Width' Target Height]  		dataBytes = int2DataBytes (retData [10]);  		int dLb = dataBytes [0];  		int dTb = dataBytes [1];  		int dTw = dataBytes [2];  		int dTh = dataBytes [3];  		// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  		dataBytes = int2DataBytes (retData [11]);  		int dRb = dataBytes [0];  		int dTCTi = dataBytes [1];  		int dTTTi = dataBytes [2];  		int dCco = dataBytes [3];  		// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  		dataBytes = int2DataBytes (retData [12]);  		int dRows = dataBytes [0];  		int dLines = dataBytes [1];  		int dTco = dataBytes [2];  		// 13: T1 Cutoff Concentration  		float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  		// 14: T1 Name  		string dTName = BarcodeCore.IntToText256 (retData [14]);  		// 15 - 19: T1 RLU-Concentration Pairs x 4  		double[] dRLU = new double[5];  		double[] dConc = new double[5];  		for (int i = 0; i < 5; i++) {  			dataBytes = int2DataBytes (retData [15 + i]);  			dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  			dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  			Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  		}  		Console.WriteLine ("Check Complete!");  		#endif  	}  	else {  		mQRCodeImage = null;  	}  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: if (barcodes != null) {  	byte[] bcBytes = new byte[barcodes.Count * 4];  	for (int i = 0; i < barcodes.Count; i++) {  		BC += barcodes [i];  		long code = long.Parse (barcodes [i]);  		byte[] codeBytes = BitConverter.GetBytes (code);  		bcBytes [i * 4] = codeBytes [0];  		bcBytes [i * 4 + 1] = codeBytes [1];  		bcBytes [i * 4 + 2] = codeBytes [2];  		bcBytes [i * 4 + 3] = codeBytes [3];  	}  	mQRCodeImage = KwQRCodeWriter.textToQRImage (BC' QR_CORRECT_LEV.L);  	#if DEBUG  	int[] retData = BarcodeCore.BarcodeDecoder (BC' bits);  	byte[] dataBytes;  	// 0: [Version' Concentration Unit' RLU-Conc Points' T Band Appears]  	dataBytes = int2DataBytes (retData [0]);  	int dVersion = dataBytes [0];  	int dConcUnit = dataBytes [1];  	//int dRLUConcPts = dataBytes[2];  	int dTband = dataBytes [3];  	// 1 - 5: Product ID  	string dProdID = "";  	for (int i = 1; i < 6; i++) {  		dProdID += BarcodeCore.IntToText256 (retData [i]);  	}  	// 6 - 8: Product Lot  	string dProdLot = "";  	for (int i = 6; i < 9; i++) {  		dProdLot += BarcodeCore.IntToText256 (retData [i]);  	}  	// 9: Expiration Date  	dataBytes = int2DataBytes (retData [9]);  	int dDay = dataBytes [0];  	int dMonth = dataBytes [1];  	int dYear = BitConverter.ToUInt16 (dataBytes' 2);  	// 10: [Left Bound' Top Bound' Target Width' Target Height]  	dataBytes = int2DataBytes (retData [10]);  	int dLb = dataBytes [0];  	int dTb = dataBytes [1];  	int dTw = dataBytes [2];  	int dTh = dataBytes [3];  	// 11: [Right Bound' Target C-T Interval' Target T-T Interval' Invalid Threshold (C Cutoff)]  	dataBytes = int2DataBytes (retData [11]);  	int dRb = dataBytes [0];  	int dTCTi = dataBytes [1];  	int dTTTi = dataBytes [2];  	int dCco = dataBytes [3];  	// 12: [Rows' Lines' T1 Cutoff RLU' T2 Cutoff RLU]  	dataBytes = int2DataBytes (retData [12]);  	int dRows = dataBytes [0];  	int dLines = dataBytes [1];  	int dTco = dataBytes [2];  	// 13: T1 Cutoff Concentration  	float dTcoConc = BarcodeCore.IntToFloat (retData [13]);  	// 14: T1 Name  	string dTName = BarcodeCore.IntToText256 (retData [14]);  	// 15 - 19: T1 RLU-Concentration Pairs x 4  	double[] dRLU = new double[5];  	double[] dConc = new double[5];  	for (int i = 0; i < 5; i++) {  		dataBytes = int2DataBytes (retData [15 + i]);  		dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  		dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  		Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  	}  	Console.WriteLine ("Check Complete!");  	#endif  }  else {  	mQRCodeImage = null;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: for (int i = 0; i < barcodes.Count; i++) {  	BC += barcodes [i];  	long code = long.Parse (barcodes [i]);  	byte[] codeBytes = BitConverter.GetBytes (code);  	bcBytes [i * 4] = codeBytes [0];  	bcBytes [i * 4 + 1] = codeBytes [1];  	bcBytes [i * 4 + 2] = codeBytes [2];  	bcBytes [i * 4 + 3] = codeBytes [3];  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: for (int i = 0; i < barcodes.Count; i++) {  	BC += barcodes [i];  	long code = long.Parse (barcodes [i]);  	byte[] codeBytes = BitConverter.GetBytes (code);  	bcBytes [i * 4] = codeBytes [0];  	bcBytes [i * 4 + 1] = codeBytes [1];  	bcBytes [i * 4 + 2] = codeBytes [2];  	bcBytes [i * 4 + 3] = codeBytes [3];  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: for (int i = 0; i < barcodes.Count; i++) {  	BC += barcodes [i];  	long code = long.Parse (barcodes [i]);  	byte[] codeBytes = BitConverter.GetBytes (code);  	bcBytes [i * 4] = codeBytes [0];  	bcBytes [i * 4 + 1] = codeBytes [1];  	bcBytes [i * 4 + 2] = codeBytes [2];  	bcBytes [i * 4 + 3] = codeBytes [3];  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: for (int i = 0; i < barcodes.Count; i++) {  	BC += barcodes [i];  	long code = long.Parse (barcodes [i]);  	byte[] codeBytes = BitConverter.GetBytes (code);  	bcBytes [i * 4] = codeBytes [0];  	bcBytes [i * 4 + 1] = codeBytes [1];  	bcBytes [i * 4 + 2] = codeBytes [2];  	bcBytes [i * 4 + 3] = codeBytes [3];  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: for (int i = 0; i < barcodes.Count; i++) {  	BC += barcodes [i];  	long code = long.Parse (barcodes [i]);  	byte[] codeBytes = BitConverter.GetBytes (code);  	bcBytes [i * 4] = codeBytes [0];  	bcBytes [i * 4 + 1] = codeBytes [1];  	bcBytes [i * 4 + 2] = codeBytes [2];  	bcBytes [i * 4 + 3] = codeBytes [3];  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: for (int i = 0; i < barcodes.Count; i++) {  	BC += barcodes [i];  	long code = long.Parse (barcodes [i]);  	byte[] codeBytes = BitConverter.GetBytes (code);  	bcBytes [i * 4] = codeBytes [0];  	bcBytes [i * 4 + 1] = codeBytes [1];  	bcBytes [i * 4 + 2] = codeBytes [2];  	bcBytes [i * 4 + 3] = codeBytes [3];  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: for (int i = 0; i < barcodes.Count; i++) {  	BC += barcodes [i];  	long code = long.Parse (barcodes [i]);  	byte[] codeBytes = BitConverter.GetBytes (code);  	bcBytes [i * 4] = codeBytes [0];  	bcBytes [i * 4 + 1] = codeBytes [1];  	bcBytes [i * 4 + 2] = codeBytes [2];  	bcBytes [i * 4 + 3] = codeBytes [3];  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: for (int i = 0; i < barcodes.Count; i++) {  	BC += barcodes [i];  	long code = long.Parse (barcodes [i]);  	byte[] codeBytes = BitConverter.GetBytes (code);  	bcBytes [i * 4] = codeBytes [0];  	bcBytes [i * 4 + 1] = codeBytes [1];  	bcBytes [i * 4 + 2] = codeBytes [2];  	bcBytes [i * 4 + 3] = codeBytes [3];  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: bcBytes [i * 4] = codeBytes [0];  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: bcBytes [i * 4 + 1] = codeBytes [1];  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: bcBytes [i * 4 + 2] = codeBytes [2];  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: bcBytes [i * 4 + 2] = codeBytes [2];  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: bcBytes [i * 4 + 2] = codeBytes [2];  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: bcBytes [i * 4 + 3] = codeBytes [3];  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: bcBytes [i * 4 + 3] = codeBytes [3];  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: bcBytes [i * 4 + 3] = codeBytes [3];  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: for (int i = 1; i < 6; i++) {  	dProdID += BarcodeCore.IntToText256 (retData [i]);  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: for (int i = 6; i < 9; i++) {  	dProdLot += BarcodeCore.IntToText256 (retData [i]);  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: for (int i = 6; i < 9; i++) {  	dProdLot += BarcodeCore.IntToText256 (retData [i]);  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: dataBytes = int2DataBytes (retData [9]);  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: dataBytes = int2DataBytes (retData [10]);  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: dataBytes = int2DataBytes (retData [11]);  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: dataBytes = int2DataBytes (retData [12]);  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	dataBytes = int2DataBytes (retData [15 + i]);  	dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  	dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  	Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	dataBytes = int2DataBytes (retData [15 + i]);  	dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  	dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  	Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	dataBytes = int2DataBytes (retData [15 + i]);  	dRLU [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 0));  	dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  	Console.WriteLine (dRLU [i].ToString () + "\t" + dConc [i].ToString ());  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: dataBytes = int2DataBytes (retData [15 + i]);  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,generateBarcodeImage,The following statement contains a magic number: dConc [i] = BarcodeCore.DecodeFloat16 (BitConverter.ToUInt16 (dataBytes' 2));  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,dataBytes2Long,The following statement contains a magic number: if (dataBytes.Length < 4) {  	byte[] tmpArray = new byte[4];  	for (int i = 0; i < dataBytes.Length; i++)  		tmpArray [i] = dataBytes [i];  	dataBytes = tmpArray;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,dataBytes2Long,The following statement contains a magic number: if (dataBytes.Length < 4) {  	byte[] tmpArray = new byte[4];  	for (int i = 0; i < dataBytes.Length; i++)  		tmpArray [i] = dataBytes [i];  	dataBytes = tmpArray;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,splitString4char,The following statement contains a magic number: for (int i = 0; i < blocks; i++) {  	retValue [i] = "";  	try {  		if (text.Length > 4) {  			retValue [i] = text.Substring (0' 4);  			text = text.Substring (4);  		}  		else if (text.Length == 0) {  			continue;  		}  		else {  			retValue [i] = text;  			text = "";  		}  	}  	catch {  		continue;  	}  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,splitString4char,The following statement contains a magic number: for (int i = 0; i < blocks; i++) {  	retValue [i] = "";  	try {  		if (text.Length > 4) {  			retValue [i] = text.Substring (0' 4);  			text = text.Substring (4);  		}  		else if (text.Length == 0) {  			continue;  		}  		else {  			retValue [i] = text;  			text = "";  		}  	}  	catch {  		continue;  	}  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,splitString4char,The following statement contains a magic number: for (int i = 0; i < blocks; i++) {  	retValue [i] = "";  	try {  		if (text.Length > 4) {  			retValue [i] = text.Substring (0' 4);  			text = text.Substring (4);  		}  		else if (text.Length == 0) {  			continue;  		}  		else {  			retValue [i] = text;  			text = "";  		}  	}  	catch {  		continue;  	}  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,splitString4char,The following statement contains a magic number: try {  	if (text.Length > 4) {  		retValue [i] = text.Substring (0' 4);  		text = text.Substring (4);  	}  	else if (text.Length == 0) {  		continue;  	}  	else {  		retValue [i] = text;  		text = "";  	}  }  catch {  	continue;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,splitString4char,The following statement contains a magic number: try {  	if (text.Length > 4) {  		retValue [i] = text.Substring (0' 4);  		text = text.Substring (4);  	}  	else if (text.Length == 0) {  		continue;  	}  	else {  		retValue [i] = text;  		text = "";  	}  }  catch {  	continue;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,splitString4char,The following statement contains a magic number: try {  	if (text.Length > 4) {  		retValue [i] = text.Substring (0' 4);  		text = text.Substring (4);  	}  	else if (text.Length == 0) {  		continue;  	}  	else {  		retValue [i] = text;  		text = "";  	}  }  catch {  	continue;  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,splitString4char,The following statement contains a magic number: if (text.Length > 4) {  	retValue [i] = text.Substring (0' 4);  	text = text.Substring (4);  }  else if (text.Length == 0) {  	continue;  }  else {  	retValue [i] = text;  	text = "";  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,splitString4char,The following statement contains a magic number: if (text.Length > 4) {  	retValue [i] = text.Substring (0' 4);  	text = text.Substring (4);  }  else if (text.Length == 0) {  	continue;  }  else {  	retValue [i] = text;  	text = "";  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,splitString4char,The following statement contains a magic number: if (text.Length > 4) {  	retValue [i] = text.Substring (0' 4);  	text = text.Substring (4);  }  else if (text.Length == 0) {  	continue;  }  else {  	retValue [i] = text;  	text = "";  }  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,splitString4char,The following statement contains a magic number: retValue [i] = text.Substring (0' 4);  
Magic Number,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,splitString4char,The following statement contains a magic number: text = text.Substring (4);  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: if (casPrefix.Substring (0' 1).Equals ("C")) {  	int clientIndex = Convert.ToInt32 (casHexArr [1]' 16);  	double chipWidth = (double)Convert.ToInt32 (casHexArr [2]' 16) + double.Parse (casHexArr [3]) / 10.0;  	double chipHeight = (double)Convert.ToInt32 (casHexArr [4]' 16) + double.Parse (casHexArr [5]) / 10.0;  	double stdWidth = (double)Convert.ToInt32 (casHexArr [6]' 16) / 10.0;  	double cLinePos = (double)Convert.ToInt32 (casHexArr [7]' 16) / 10.0;  	double tcSpace = (double)Convert.ToInt32 (casHexArr [8]' 16) / 10.0;  	double wholeRange = (double)Convert.ToInt32 (casHexArr [9]' 16) + double.Parse (casHexArr [10]) / 10.0;  	int value = Convert.ToInt32 (casHexArr [11]' 16);  	int type = value / 100;  	int moveDir = (value - type * 100) / 10;  	int sampleNo = value % 10;  	int invalid = Convert.ToInt32 (casHexArr [12]' 16);  	double moveX = (double)Convert.ToInt32 (casHexArr [13]' 16) / 10.0;  	double moveY = (double)Convert.ToInt32 (casHexArr [14]' 16) / 10.0;  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: lotMsg = lotMsg.Substring (fieldValue.Length + 2);  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: lotMsg = lotMsg.Substring (fieldValue.Length + 2);  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: lotMsg = lotMsg.Substring (fieldValue.Length + 4);  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: v1 = Convert.ToInt32 (lotHexArr [1]' 16);  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: v1 = Convert.ToInt32 (lotHexArr [2]' 16);  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: v1 = Convert.ToInt32 (lotHexArr [2]' 16);  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int i = 0; i < items; i++) {  	int idx1 = (i + i * expNo) * 4 + 3;  	byte[] nameByte = hex2byteArr (getArrRange (lotHexArr' idx1' 4));  	itemNames [i] = (encoder.GetString (nameByte)).Replace ("\0"' "");  	for (int j = 0; j < expNo; j++) {  		int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  		int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  		int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  		multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  		int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  		int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  		int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  		multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  		RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  		RLU [i' j] *= Math.Pow (10' multi1);  		Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  		Conc [i' j] *= Math.Pow (10' multi2);  	}  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: for (int j = 0; j < expNo; j++) {  	int tempV1 = int.Parse (lotHexArr [j * 4 + idx1 + 4]);  	int tempV2 = int.Parse (lotHexArr [j * 4 + idx1 + 5].Substring (0' 1));  	int multi1 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 5]' 16) & 0x0F;  	multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  	int tempV3 = int.Parse (lotHexArr [j * 4 + idx1 + 6]);  	int tempV4 = int.Parse (lotHexArr [j * 4 + idx1 + 7].Substring (0' 1));  	int multi2 = Convert.ToInt32 (lotHexArr [j * 4 + idx1 + 7]' 16) & 0x0F;  	multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  	RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  	RLU [i' j] *= Math.Pow (10' multi1);  	Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  	Conc [i' j] *= Math.Pow (10' multi2);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: multi1 = multi1 > 9 ? (-1) * multi1 + 9 : multi1;  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: multi2 = multi2 > 9 ? (-1) * multi2 + 9 : multi2;  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: RLU [i' j] = (double)tempV1 / 10.0 + (double)tempV2 / 100.0;  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: RLU [i' j] *= Math.Pow (10' multi1);  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: Conc [i' j] = (double)tempV3 / 10.0 + (double)tempV4 / 100.0;  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,NuCloverDecoder_Load,The following statement contains a magic number: Conc [i' j] *= Math.Pow (10' multi2);  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,getHexArray,The following statement contains a magic number: if (hexText.Equals (""))  	return hexArray.ToArray ();  else {  	hexArray.Add (hexText.Substring (0' 2));  	return getHexArray (hexText.Substring (2)' hexArray);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,getHexArray,The following statement contains a magic number: if (hexText.Equals (""))  	return hexArray.ToArray ();  else {  	hexArray.Add (hexText.Substring (0' 2));  	return getHexArray (hexText.Substring (2)' hexArray);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,getHexArray,The following statement contains a magic number: hexArray.Add (hexText.Substring (0' 2));  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,getHexArray,The following statement contains a magic number: return getHexArray (hexText.Substring (2)' hexArray);  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,hex2byteArr,The following statement contains a magic number: for (int i = 0; i < hexArr.Length; i++) {  	retArr [i] = (byte)Convert.ToInt32 (hexArr [i]' 16);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,hex2byteArr,The following statement contains a magic number: retArr [i] = (byte)Convert.ToInt32 (hexArr [i]' 16);  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,getFieldText,The following statement contains a magic number: if (hexString.Equals ("") || hexString.Substring (0' divider.Length).Equals (divider)) {  	return "";  }  else {  	return hexString.Substring (0' 2) + getFieldText (hexString.Substring (2)' divider);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,getFieldText,The following statement contains a magic number: if (hexString.Equals ("") || hexString.Substring (0' divider.Length).Equals (divider)) {  	return "";  }  else {  	return hexString.Substring (0' 2) + getFieldText (hexString.Substring (2)' divider);  }  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,getFieldText,The following statement contains a magic number: return hexString.Substring (0' 2) + getFieldText (hexString.Substring (2)' divider);  
Magic Number,NuCloverBarcode,NuCloverDecoder,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuCloverDecoder.cs,getFieldText,The following statement contains a magic number: return hexString.Substring (0' 2) + getFieldText (hexString.Substring (2)' divider);  
Missing Default,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,errScanning,The following switch statement is missing a default case: switch (type) {  case 0:  	try {  		mCco = int.Parse (TxCco.Text);  	}  	catch {  		LbCco.ForeColor = Color.Red;  	}  	try {  		mTco = int.Parse (TxTco.Text);  	}  	catch {  		LbTco.ForeColor = Color.Red;  	}  	try {  		mTn = TxTn.Text;  	}  	catch {  		LbTn.ForeColor = Color.Red;  	}  	for (int i = 0; i < fRLUs.Length; i++) {  		try {  			fRLUs [i] = float.Parse (RLUs [i].Text);  			fConcs [i] = float.Parse (Concs [i].Text);  			if (fRLUs [i] < 0 || fRLUs [i] > 1000)  				throw new Exception ();  			if (fConcs [i] < 0 || fConcs [i] > 1000)  				throw new Exception ();  		}  		catch {  			ItemFlowPanels [0].BackColor = Color.Red;  		}  	}  	break;  case 1:  	try {  		mLb = int.Parse (TxLb.Text);  		if (mLb < 0 || mLb > 255)  			throw new Exception ();  	}  	catch {  		LbLb.ForeColor = Color.Red;  	}  	try {  		mTb = int.Parse (TxTb.Text);  		if (mTb < 0 || mTb > 255)  			throw new Exception ();  	}  	catch {  		LbTb.ForeColor = Color.Red;  	}  	try {  		mTw = int.Parse (TxTw.Text);  		if (mTw < 0 || mTw > 255)  			throw new Exception ();  	}  	catch {  		LbTw.ForeColor = Color.Red;  	}  	try {  		mTh = int.Parse (TxTh.Text);  		if (mTh < 0 || mTh > 255)  			throw new Exception ();  	}  	catch {  		LbTh.ForeColor = Color.Red;  	}  	try {  		mTi = int.Parse (TxTi.Text);  		if (mTi < 0 || mTi > 255)  			throw new Exception ();  	}  	catch {  		LbTi.ForeColor = Color.Red;  	}  	break;  }  
Missing Default,NuCloverBarcode,NuClover,C:\repos\hermanliang_BCTest\NuCloverBarcode\NuClover.cs,setLabelDefault,The following switch statement is missing a default case: switch (type) {  case 0:  	LbCco.ForeColor = Color.Black;  	LbTco.ForeColor = Color.Black;  	LbTn.ForeColor = Color.Black;  	if (ItemPanels != null) {  		for (int i = 0; i < ItemPanels.Length; i++) {  			if (i % 2 == 0)  				ItemFlowPanels [i].BackColor = Color.LightGray;  			else  				ItemFlowPanels [i].BackColor = Color.WhiteSmoke;  		}  	}  	break;  case 1:  	LbLb.ForeColor = Color.Black;  	LbTb.ForeColor = Color.Black;  	LbTw.ForeColor = Color.Black;  	LbTh.ForeColor = Color.Black;  	LbTi.ForeColor = Color.Black;  	break;  }  
