Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnGen_Click,Cyclomatic complexity of the method is 36
Complex Method,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnSave_Click,Cyclomatic complexity of the method is 9
Complex Method,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,Cyclomatic complexity of the method is 14
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnGen_Click,The following statement contains a magic number: for (int i = 0; i < dataGridView1.RowCount - 1; i++) {  	//DataGridViewComboBoxCell vcbc = (DataGridViewComboBoxCell)dataGridView1[1' i];  	//int index = vcbc.Items.IndexOf(vcbc.Value);  	string text' value;  	try {  		text = dataGridView1 [1' i].Value.ToString ();  		value = dataGridView1 [2' i].Value.ToString ();  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		txInfo.Text = null;  		return;  	}  	long v = 0;  	int index;  	if (!sizeTable.TryGetValue (text' out index)) {  		goto Exit;  	}  	else {  		size.Add (index);  		switch (index) {  		case 24:  			data.Add (BarcodeCore.TextToLong (value));  			break;  		case 28:  			data.Add (BarcodeCore.Text128ToLong (value));  			break;  		case 32:  			float f1;  			if (!float.TryParse (value' out f1)) {  				goto Exit;  			}  			data.Add (BarcodeCore.FloatToLong (f1));  			break;  		default:  			ushort ushortV;  			if (UInt16.TryParse (value' out ushortV)) {  				v = (long)ushortV;  				data.Add (v);  			}  			else {  				goto Exit;  			}  			break;  		}  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnGen_Click,The following statement contains a magic number: for (int i = 0; i < dataGridView1.RowCount - 1; i++) {  	//DataGridViewComboBoxCell vcbc = (DataGridViewComboBoxCell)dataGridView1[1' i];  	//int index = vcbc.Items.IndexOf(vcbc.Value);  	string text' value;  	try {  		text = dataGridView1 [1' i].Value.ToString ();  		value = dataGridView1 [2' i].Value.ToString ();  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		txInfo.Text = null;  		return;  	}  	long v = 0;  	int index;  	if (!sizeTable.TryGetValue (text' out index)) {  		goto Exit;  	}  	else {  		size.Add (index);  		switch (index) {  		case 24:  			data.Add (BarcodeCore.TextToLong (value));  			break;  		case 28:  			data.Add (BarcodeCore.Text128ToLong (value));  			break;  		case 32:  			float f1;  			if (!float.TryParse (value' out f1)) {  				goto Exit;  			}  			data.Add (BarcodeCore.FloatToLong (f1));  			break;  		default:  			ushort ushortV;  			if (UInt16.TryParse (value' out ushortV)) {  				v = (long)ushortV;  				data.Add (v);  			}  			else {  				goto Exit;  			}  			break;  		}  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnGen_Click,The following statement contains a magic number: for (int i = 0; i < dataGridView1.RowCount - 1; i++) {  	//DataGridViewComboBoxCell vcbc = (DataGridViewComboBoxCell)dataGridView1[1' i];  	//int index = vcbc.Items.IndexOf(vcbc.Value);  	string text' value;  	try {  		text = dataGridView1 [1' i].Value.ToString ();  		value = dataGridView1 [2' i].Value.ToString ();  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		txInfo.Text = null;  		return;  	}  	long v = 0;  	int index;  	if (!sizeTable.TryGetValue (text' out index)) {  		goto Exit;  	}  	else {  		size.Add (index);  		switch (index) {  		case 24:  			data.Add (BarcodeCore.TextToLong (value));  			break;  		case 28:  			data.Add (BarcodeCore.Text128ToLong (value));  			break;  		case 32:  			float f1;  			if (!float.TryParse (value' out f1)) {  				goto Exit;  			}  			data.Add (BarcodeCore.FloatToLong (f1));  			break;  		default:  			ushort ushortV;  			if (UInt16.TryParse (value' out ushortV)) {  				v = (long)ushortV;  				data.Add (v);  			}  			else {  				goto Exit;  			}  			break;  		}  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnGen_Click,The following statement contains a magic number: for (int i = 0; i < dataGridView1.RowCount - 1; i++) {  	//DataGridViewComboBoxCell vcbc = (DataGridViewComboBoxCell)dataGridView1[1' i];  	//int index = vcbc.Items.IndexOf(vcbc.Value);  	string text' value;  	try {  		text = dataGridView1 [1' i].Value.ToString ();  		value = dataGridView1 [2' i].Value.ToString ();  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		txInfo.Text = null;  		return;  	}  	long v = 0;  	int index;  	if (!sizeTable.TryGetValue (text' out index)) {  		goto Exit;  	}  	else {  		size.Add (index);  		switch (index) {  		case 24:  			data.Add (BarcodeCore.TextToLong (value));  			break;  		case 28:  			data.Add (BarcodeCore.Text128ToLong (value));  			break;  		case 32:  			float f1;  			if (!float.TryParse (value' out f1)) {  				goto Exit;  			}  			data.Add (BarcodeCore.FloatToLong (f1));  			break;  		default:  			ushort ushortV;  			if (UInt16.TryParse (value' out ushortV)) {  				v = (long)ushortV;  				data.Add (v);  			}  			else {  				goto Exit;  			}  			break;  		}  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnGen_Click,The following statement contains a magic number: try {  	text = dataGridView1 [1' i].Value.ToString ();  	value = dataGridView1 [2' i].Value.ToString ();  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  	txInfo.Text = null;  	return;  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnGen_Click,The following statement contains a magic number: value = dataGridView1 [2' i].Value.ToString ();  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnGen_Click,The following statement contains a magic number: if (!sizeTable.TryGetValue (text' out index)) {  	goto Exit;  }  else {  	size.Add (index);  	switch (index) {  	case 24:  		data.Add (BarcodeCore.TextToLong (value));  		break;  	case 28:  		data.Add (BarcodeCore.Text128ToLong (value));  		break;  	case 32:  		float f1;  		if (!float.TryParse (value' out f1)) {  			goto Exit;  		}  		data.Add (BarcodeCore.FloatToLong (f1));  		break;  	default:  		ushort ushortV;  		if (UInt16.TryParse (value' out ushortV)) {  			v = (long)ushortV;  			data.Add (v);  		}  		else {  			goto Exit;  		}  		break;  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnGen_Click,The following statement contains a magic number: if (!sizeTable.TryGetValue (text' out index)) {  	goto Exit;  }  else {  	size.Add (index);  	switch (index) {  	case 24:  		data.Add (BarcodeCore.TextToLong (value));  		break;  	case 28:  		data.Add (BarcodeCore.Text128ToLong (value));  		break;  	case 32:  		float f1;  		if (!float.TryParse (value' out f1)) {  			goto Exit;  		}  		data.Add (BarcodeCore.FloatToLong (f1));  		break;  	default:  		ushort ushortV;  		if (UInt16.TryParse (value' out ushortV)) {  			v = (long)ushortV;  			data.Add (v);  		}  		else {  			goto Exit;  		}  		break;  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnGen_Click,The following statement contains a magic number: if (!sizeTable.TryGetValue (text' out index)) {  	goto Exit;  }  else {  	size.Add (index);  	switch (index) {  	case 24:  		data.Add (BarcodeCore.TextToLong (value));  		break;  	case 28:  		data.Add (BarcodeCore.Text128ToLong (value));  		break;  	case 32:  		float f1;  		if (!float.TryParse (value' out f1)) {  			goto Exit;  		}  		data.Add (BarcodeCore.FloatToLong (f1));  		break;  	default:  		ushort ushortV;  		if (UInt16.TryParse (value' out ushortV)) {  			v = (long)ushortV;  			data.Add (v);  		}  		else {  			goto Exit;  		}  		break;  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnGen_Click,The following statement contains a magic number: switch (index) {  case 24:  	data.Add (BarcodeCore.TextToLong (value));  	break;  case 28:  	data.Add (BarcodeCore.Text128ToLong (value));  	break;  case 32:  	float f1;  	if (!float.TryParse (value' out f1)) {  		goto Exit;  	}  	data.Add (BarcodeCore.FloatToLong (f1));  	break;  default:  	ushort ushortV;  	if (UInt16.TryParse (value' out ushortV)) {  		v = (long)ushortV;  		data.Add (v);  	}  	else {  		goto Exit;  	}  	break;  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnGen_Click,The following statement contains a magic number: switch (index) {  case 24:  	data.Add (BarcodeCore.TextToLong (value));  	break;  case 28:  	data.Add (BarcodeCore.Text128ToLong (value));  	break;  case 32:  	float f1;  	if (!float.TryParse (value' out f1)) {  		goto Exit;  	}  	data.Add (BarcodeCore.FloatToLong (f1));  	break;  default:  	ushort ushortV;  	if (UInt16.TryParse (value' out ushortV)) {  		v = (long)ushortV;  		data.Add (v);  	}  	else {  		goto Exit;  	}  	break;  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnGen_Click,The following statement contains a magic number: switch (index) {  case 24:  	data.Add (BarcodeCore.TextToLong (value));  	break;  case 28:  	data.Add (BarcodeCore.Text128ToLong (value));  	break;  case 32:  	float f1;  	if (!float.TryParse (value' out f1)) {  		goto Exit;  	}  	data.Add (BarcodeCore.FloatToLong (f1));  	break;  default:  	ushort ushortV;  	if (UInt16.TryParse (value' out ushortV)) {  		v = (long)ushortV;  		data.Add (v);  	}  	else {  		goto Exit;  	}  	break;  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnGen_Click,The following statement contains a magic number: for (int i = 0; i < deValues.Length; i++) {  	switch (deFormat [i]) {  	case 24:  		decodeValue += BarcodeCore.IntToText (deValues [i]) + "\r\n";  		break;  	case 28:  		decodeValue += BarcodeCore.IntToText128 (deValues [i]) + "\r\n";  		break;  	case 32:  		decodeValue += BarcodeCore.IntToFloat (deValues [i]).ToString () + "\r\n";  		break;  	default:  		decodeValue += deValues [i].ToString () + "\r\n";  		break;  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnGen_Click,The following statement contains a magic number: for (int i = 0; i < deValues.Length; i++) {  	switch (deFormat [i]) {  	case 24:  		decodeValue += BarcodeCore.IntToText (deValues [i]) + "\r\n";  		break;  	case 28:  		decodeValue += BarcodeCore.IntToText128 (deValues [i]) + "\r\n";  		break;  	case 32:  		decodeValue += BarcodeCore.IntToFloat (deValues [i]).ToString () + "\r\n";  		break;  	default:  		decodeValue += deValues [i].ToString () + "\r\n";  		break;  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnGen_Click,The following statement contains a magic number: for (int i = 0; i < deValues.Length; i++) {  	switch (deFormat [i]) {  	case 24:  		decodeValue += BarcodeCore.IntToText (deValues [i]) + "\r\n";  		break;  	case 28:  		decodeValue += BarcodeCore.IntToText128 (deValues [i]) + "\r\n";  		break;  	case 32:  		decodeValue += BarcodeCore.IntToFloat (deValues [i]).ToString () + "\r\n";  		break;  	default:  		decodeValue += deValues [i].ToString () + "\r\n";  		break;  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnGen_Click,The following statement contains a magic number: switch (deFormat [i]) {  case 24:  	decodeValue += BarcodeCore.IntToText (deValues [i]) + "\r\n";  	break;  case 28:  	decodeValue += BarcodeCore.IntToText128 (deValues [i]) + "\r\n";  	break;  case 32:  	decodeValue += BarcodeCore.IntToFloat (deValues [i]).ToString () + "\r\n";  	break;  default:  	decodeValue += deValues [i].ToString () + "\r\n";  	break;  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnGen_Click,The following statement contains a magic number: switch (deFormat [i]) {  case 24:  	decodeValue += BarcodeCore.IntToText (deValues [i]) + "\r\n";  	break;  case 28:  	decodeValue += BarcodeCore.IntToText128 (deValues [i]) + "\r\n";  	break;  case 32:  	decodeValue += BarcodeCore.IntToFloat (deValues [i]).ToString () + "\r\n";  	break;  default:  	decodeValue += deValues [i].ToString () + "\r\n";  	break;  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnGen_Click,The following statement contains a magic number: switch (deFormat [i]) {  case 24:  	decodeValue += BarcodeCore.IntToText (deValues [i]) + "\r\n";  	break;  case 28:  	decodeValue += BarcodeCore.IntToText128 (deValues [i]) + "\r\n";  	break;  case 32:  	decodeValue += BarcodeCore.IntToFloat (deValues [i]).ToString () + "\r\n";  	break;  default:  	decodeValue += deValues [i].ToString () + "\r\n";  	break;  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnLoad_Click,The following statement contains a magic number: if (openFileDialog1.ShowDialog () == DialogResult.OK) {  	using (StreamReader sr = new StreamReader (openFileDialog1.FileName' Encoding.UTF8)) {  		DataGridViewRowCollection rows = dataGridView1.Rows;  		rows.Clear ();  		while (!sr.EndOfStream) {  			string text = sr.ReadLine ();  			string[] format = text.Split ('\t');  			if (format.Length != 2)  				break;  			rows.Add (new object[] {  				format [0]'  				format [1]  			});  		}  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnLoad_Click,The following statement contains a magic number: using (StreamReader sr = new StreamReader (openFileDialog1.FileName' Encoding.UTF8)) {  	DataGridViewRowCollection rows = dataGridView1.Rows;  	rows.Clear ();  	while (!sr.EndOfStream) {  		string text = sr.ReadLine ();  		string[] format = text.Split ('\t');  		if (format.Length != 2)  			break;  		rows.Add (new object[] {  			format [0]'  			format [1]  		});  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnLoad_Click,The following statement contains a magic number: while (!sr.EndOfStream) {  	string text = sr.ReadLine ();  	string[] format = text.Split ('\t');  	if (format.Length != 2)  		break;  	rows.Add (new object[] {  		format [0]'  		format [1]  	});  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnLoad_Click,The following statement contains a magic number: if (format.Length != 2)  	break;  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: if (barcodes.Length % 10 != 0) {  	MessageBox.Show ("Error");  	return;  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: for (int i = 0; i < barcodes.Length / 10; i++) {  	bc.Add (barcodes.Substring (i * 10' 10));  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: for (int i = 0; i < barcodes.Length / 10; i++) {  	bc.Add (barcodes.Substring (i * 10' 10));  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: for (int i = 0; i < barcodes.Length / 10; i++) {  	bc.Add (barcodes.Substring (i * 10' 10));  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: bc.Add (barcodes.Substring (i * 10' 10));  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: bc.Add (barcodes.Substring (i * 10' 10));  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: if (openFileDialog1.ShowDialog () == DialogResult.OK) {  	using (StreamReader sr = new StreamReader (openFileDialog1.FileName' Encoding.UTF8)) {  		List<int> singleBlock = new List<int> ();  		List<int[]> dataFormat = new List<int[]> ();  		while (!sr.EndOfStream) {  			string text = sr.ReadLine ();  			string[] format = text.Split (new char[] {  				'\t'  			}' StringSplitOptions.RemoveEmptyEntries);  			foreach (string bit in format) {  				singleBlock.Add (int.Parse (bit));  			}  			dataFormat.Add (singleBlock.ToArray ());  			singleBlock.Clear ();  		}  		int[] deValues' deFormat;  		BarcodeCore.BarcodeDecoder (bc' dataFormat' out deValues' out deFormat);  		if (deValues == null) {  			MessageBox.Show ("Error");  			return;  		}  		string decodeValue = "Barcodes:\r\n";  		foreach (string barcode in bc) {  			decodeValue += barcode + "\r\n";  		}  		decodeValue += "\r\nDecode Data:\r\n";  		for (int i = 0; i < deValues.Length; i++) {  			if (deFormat [i] == 24) {  				string word = "";  				int mask = 0x3F;  				for (int j = 0; j < 4; j++) {  					int idx = (deValues [i] >> 6 * j) & mask;  					word += BarcodeCore.numberText [idx];  				}  				decodeValue += word + "\r\n";  			}  			else if (deFormat [i] == 32) {  				byte[] iByte = BitConverter.GetBytes (deValues [i]);  				float f2 = BitConverter.ToSingle (iByte' 0);  				decodeValue += f2.ToString () + "\r\n";  			}  			else {  				decodeValue += deValues [i].ToString () + "\r\n";  			}  		}  		txInfo.Text = decodeValue;  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: if (openFileDialog1.ShowDialog () == DialogResult.OK) {  	using (StreamReader sr = new StreamReader (openFileDialog1.FileName' Encoding.UTF8)) {  		List<int> singleBlock = new List<int> ();  		List<int[]> dataFormat = new List<int[]> ();  		while (!sr.EndOfStream) {  			string text = sr.ReadLine ();  			string[] format = text.Split (new char[] {  				'\t'  			}' StringSplitOptions.RemoveEmptyEntries);  			foreach (string bit in format) {  				singleBlock.Add (int.Parse (bit));  			}  			dataFormat.Add (singleBlock.ToArray ());  			singleBlock.Clear ();  		}  		int[] deValues' deFormat;  		BarcodeCore.BarcodeDecoder (bc' dataFormat' out deValues' out deFormat);  		if (deValues == null) {  			MessageBox.Show ("Error");  			return;  		}  		string decodeValue = "Barcodes:\r\n";  		foreach (string barcode in bc) {  			decodeValue += barcode + "\r\n";  		}  		decodeValue += "\r\nDecode Data:\r\n";  		for (int i = 0; i < deValues.Length; i++) {  			if (deFormat [i] == 24) {  				string word = "";  				int mask = 0x3F;  				for (int j = 0; j < 4; j++) {  					int idx = (deValues [i] >> 6 * j) & mask;  					word += BarcodeCore.numberText [idx];  				}  				decodeValue += word + "\r\n";  			}  			else if (deFormat [i] == 32) {  				byte[] iByte = BitConverter.GetBytes (deValues [i]);  				float f2 = BitConverter.ToSingle (iByte' 0);  				decodeValue += f2.ToString () + "\r\n";  			}  			else {  				decodeValue += deValues [i].ToString () + "\r\n";  			}  		}  		txInfo.Text = decodeValue;  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: if (openFileDialog1.ShowDialog () == DialogResult.OK) {  	using (StreamReader sr = new StreamReader (openFileDialog1.FileName' Encoding.UTF8)) {  		List<int> singleBlock = new List<int> ();  		List<int[]> dataFormat = new List<int[]> ();  		while (!sr.EndOfStream) {  			string text = sr.ReadLine ();  			string[] format = text.Split (new char[] {  				'\t'  			}' StringSplitOptions.RemoveEmptyEntries);  			foreach (string bit in format) {  				singleBlock.Add (int.Parse (bit));  			}  			dataFormat.Add (singleBlock.ToArray ());  			singleBlock.Clear ();  		}  		int[] deValues' deFormat;  		BarcodeCore.BarcodeDecoder (bc' dataFormat' out deValues' out deFormat);  		if (deValues == null) {  			MessageBox.Show ("Error");  			return;  		}  		string decodeValue = "Barcodes:\r\n";  		foreach (string barcode in bc) {  			decodeValue += barcode + "\r\n";  		}  		decodeValue += "\r\nDecode Data:\r\n";  		for (int i = 0; i < deValues.Length; i++) {  			if (deFormat [i] == 24) {  				string word = "";  				int mask = 0x3F;  				for (int j = 0; j < 4; j++) {  					int idx = (deValues [i] >> 6 * j) & mask;  					word += BarcodeCore.numberText [idx];  				}  				decodeValue += word + "\r\n";  			}  			else if (deFormat [i] == 32) {  				byte[] iByte = BitConverter.GetBytes (deValues [i]);  				float f2 = BitConverter.ToSingle (iByte' 0);  				decodeValue += f2.ToString () + "\r\n";  			}  			else {  				decodeValue += deValues [i].ToString () + "\r\n";  			}  		}  		txInfo.Text = decodeValue;  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: if (openFileDialog1.ShowDialog () == DialogResult.OK) {  	using (StreamReader sr = new StreamReader (openFileDialog1.FileName' Encoding.UTF8)) {  		List<int> singleBlock = new List<int> ();  		List<int[]> dataFormat = new List<int[]> ();  		while (!sr.EndOfStream) {  			string text = sr.ReadLine ();  			string[] format = text.Split (new char[] {  				'\t'  			}' StringSplitOptions.RemoveEmptyEntries);  			foreach (string bit in format) {  				singleBlock.Add (int.Parse (bit));  			}  			dataFormat.Add (singleBlock.ToArray ());  			singleBlock.Clear ();  		}  		int[] deValues' deFormat;  		BarcodeCore.BarcodeDecoder (bc' dataFormat' out deValues' out deFormat);  		if (deValues == null) {  			MessageBox.Show ("Error");  			return;  		}  		string decodeValue = "Barcodes:\r\n";  		foreach (string barcode in bc) {  			decodeValue += barcode + "\r\n";  		}  		decodeValue += "\r\nDecode Data:\r\n";  		for (int i = 0; i < deValues.Length; i++) {  			if (deFormat [i] == 24) {  				string word = "";  				int mask = 0x3F;  				for (int j = 0; j < 4; j++) {  					int idx = (deValues [i] >> 6 * j) & mask;  					word += BarcodeCore.numberText [idx];  				}  				decodeValue += word + "\r\n";  			}  			else if (deFormat [i] == 32) {  				byte[] iByte = BitConverter.GetBytes (deValues [i]);  				float f2 = BitConverter.ToSingle (iByte' 0);  				decodeValue += f2.ToString () + "\r\n";  			}  			else {  				decodeValue += deValues [i].ToString () + "\r\n";  			}  		}  		txInfo.Text = decodeValue;  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: using (StreamReader sr = new StreamReader (openFileDialog1.FileName' Encoding.UTF8)) {  	List<int> singleBlock = new List<int> ();  	List<int[]> dataFormat = new List<int[]> ();  	while (!sr.EndOfStream) {  		string text = sr.ReadLine ();  		string[] format = text.Split (new char[] {  			'\t'  		}' StringSplitOptions.RemoveEmptyEntries);  		foreach (string bit in format) {  			singleBlock.Add (int.Parse (bit));  		}  		dataFormat.Add (singleBlock.ToArray ());  		singleBlock.Clear ();  	}  	int[] deValues' deFormat;  	BarcodeCore.BarcodeDecoder (bc' dataFormat' out deValues' out deFormat);  	if (deValues == null) {  		MessageBox.Show ("Error");  		return;  	}  	string decodeValue = "Barcodes:\r\n";  	foreach (string barcode in bc) {  		decodeValue += barcode + "\r\n";  	}  	decodeValue += "\r\nDecode Data:\r\n";  	for (int i = 0; i < deValues.Length; i++) {  		if (deFormat [i] == 24) {  			string word = "";  			int mask = 0x3F;  			for (int j = 0; j < 4; j++) {  				int idx = (deValues [i] >> 6 * j) & mask;  				word += BarcodeCore.numberText [idx];  			}  			decodeValue += word + "\r\n";  		}  		else if (deFormat [i] == 32) {  			byte[] iByte = BitConverter.GetBytes (deValues [i]);  			float f2 = BitConverter.ToSingle (iByte' 0);  			decodeValue += f2.ToString () + "\r\n";  		}  		else {  			decodeValue += deValues [i].ToString () + "\r\n";  		}  	}  	txInfo.Text = decodeValue;  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: using (StreamReader sr = new StreamReader (openFileDialog1.FileName' Encoding.UTF8)) {  	List<int> singleBlock = new List<int> ();  	List<int[]> dataFormat = new List<int[]> ();  	while (!sr.EndOfStream) {  		string text = sr.ReadLine ();  		string[] format = text.Split (new char[] {  			'\t'  		}' StringSplitOptions.RemoveEmptyEntries);  		foreach (string bit in format) {  			singleBlock.Add (int.Parse (bit));  		}  		dataFormat.Add (singleBlock.ToArray ());  		singleBlock.Clear ();  	}  	int[] deValues' deFormat;  	BarcodeCore.BarcodeDecoder (bc' dataFormat' out deValues' out deFormat);  	if (deValues == null) {  		MessageBox.Show ("Error");  		return;  	}  	string decodeValue = "Barcodes:\r\n";  	foreach (string barcode in bc) {  		decodeValue += barcode + "\r\n";  	}  	decodeValue += "\r\nDecode Data:\r\n";  	for (int i = 0; i < deValues.Length; i++) {  		if (deFormat [i] == 24) {  			string word = "";  			int mask = 0x3F;  			for (int j = 0; j < 4; j++) {  				int idx = (deValues [i] >> 6 * j) & mask;  				word += BarcodeCore.numberText [idx];  			}  			decodeValue += word + "\r\n";  		}  		else if (deFormat [i] == 32) {  			byte[] iByte = BitConverter.GetBytes (deValues [i]);  			float f2 = BitConverter.ToSingle (iByte' 0);  			decodeValue += f2.ToString () + "\r\n";  		}  		else {  			decodeValue += deValues [i].ToString () + "\r\n";  		}  	}  	txInfo.Text = decodeValue;  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: using (StreamReader sr = new StreamReader (openFileDialog1.FileName' Encoding.UTF8)) {  	List<int> singleBlock = new List<int> ();  	List<int[]> dataFormat = new List<int[]> ();  	while (!sr.EndOfStream) {  		string text = sr.ReadLine ();  		string[] format = text.Split (new char[] {  			'\t'  		}' StringSplitOptions.RemoveEmptyEntries);  		foreach (string bit in format) {  			singleBlock.Add (int.Parse (bit));  		}  		dataFormat.Add (singleBlock.ToArray ());  		singleBlock.Clear ();  	}  	int[] deValues' deFormat;  	BarcodeCore.BarcodeDecoder (bc' dataFormat' out deValues' out deFormat);  	if (deValues == null) {  		MessageBox.Show ("Error");  		return;  	}  	string decodeValue = "Barcodes:\r\n";  	foreach (string barcode in bc) {  		decodeValue += barcode + "\r\n";  	}  	decodeValue += "\r\nDecode Data:\r\n";  	for (int i = 0; i < deValues.Length; i++) {  		if (deFormat [i] == 24) {  			string word = "";  			int mask = 0x3F;  			for (int j = 0; j < 4; j++) {  				int idx = (deValues [i] >> 6 * j) & mask;  				word += BarcodeCore.numberText [idx];  			}  			decodeValue += word + "\r\n";  		}  		else if (deFormat [i] == 32) {  			byte[] iByte = BitConverter.GetBytes (deValues [i]);  			float f2 = BitConverter.ToSingle (iByte' 0);  			decodeValue += f2.ToString () + "\r\n";  		}  		else {  			decodeValue += deValues [i].ToString () + "\r\n";  		}  	}  	txInfo.Text = decodeValue;  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: using (StreamReader sr = new StreamReader (openFileDialog1.FileName' Encoding.UTF8)) {  	List<int> singleBlock = new List<int> ();  	List<int[]> dataFormat = new List<int[]> ();  	while (!sr.EndOfStream) {  		string text = sr.ReadLine ();  		string[] format = text.Split (new char[] {  			'\t'  		}' StringSplitOptions.RemoveEmptyEntries);  		foreach (string bit in format) {  			singleBlock.Add (int.Parse (bit));  		}  		dataFormat.Add (singleBlock.ToArray ());  		singleBlock.Clear ();  	}  	int[] deValues' deFormat;  	BarcodeCore.BarcodeDecoder (bc' dataFormat' out deValues' out deFormat);  	if (deValues == null) {  		MessageBox.Show ("Error");  		return;  	}  	string decodeValue = "Barcodes:\r\n";  	foreach (string barcode in bc) {  		decodeValue += barcode + "\r\n";  	}  	decodeValue += "\r\nDecode Data:\r\n";  	for (int i = 0; i < deValues.Length; i++) {  		if (deFormat [i] == 24) {  			string word = "";  			int mask = 0x3F;  			for (int j = 0; j < 4; j++) {  				int idx = (deValues [i] >> 6 * j) & mask;  				word += BarcodeCore.numberText [idx];  			}  			decodeValue += word + "\r\n";  		}  		else if (deFormat [i] == 32) {  			byte[] iByte = BitConverter.GetBytes (deValues [i]);  			float f2 = BitConverter.ToSingle (iByte' 0);  			decodeValue += f2.ToString () + "\r\n";  		}  		else {  			decodeValue += deValues [i].ToString () + "\r\n";  		}  	}  	txInfo.Text = decodeValue;  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: for (int i = 0; i < deValues.Length; i++) {  	if (deFormat [i] == 24) {  		string word = "";  		int mask = 0x3F;  		for (int j = 0; j < 4; j++) {  			int idx = (deValues [i] >> 6 * j) & mask;  			word += BarcodeCore.numberText [idx];  		}  		decodeValue += word + "\r\n";  	}  	else if (deFormat [i] == 32) {  		byte[] iByte = BitConverter.GetBytes (deValues [i]);  		float f2 = BitConverter.ToSingle (iByte' 0);  		decodeValue += f2.ToString () + "\r\n";  	}  	else {  		decodeValue += deValues [i].ToString () + "\r\n";  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: for (int i = 0; i < deValues.Length; i++) {  	if (deFormat [i] == 24) {  		string word = "";  		int mask = 0x3F;  		for (int j = 0; j < 4; j++) {  			int idx = (deValues [i] >> 6 * j) & mask;  			word += BarcodeCore.numberText [idx];  		}  		decodeValue += word + "\r\n";  	}  	else if (deFormat [i] == 32) {  		byte[] iByte = BitConverter.GetBytes (deValues [i]);  		float f2 = BitConverter.ToSingle (iByte' 0);  		decodeValue += f2.ToString () + "\r\n";  	}  	else {  		decodeValue += deValues [i].ToString () + "\r\n";  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: for (int i = 0; i < deValues.Length; i++) {  	if (deFormat [i] == 24) {  		string word = "";  		int mask = 0x3F;  		for (int j = 0; j < 4; j++) {  			int idx = (deValues [i] >> 6 * j) & mask;  			word += BarcodeCore.numberText [idx];  		}  		decodeValue += word + "\r\n";  	}  	else if (deFormat [i] == 32) {  		byte[] iByte = BitConverter.GetBytes (deValues [i]);  		float f2 = BitConverter.ToSingle (iByte' 0);  		decodeValue += f2.ToString () + "\r\n";  	}  	else {  		decodeValue += deValues [i].ToString () + "\r\n";  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: for (int i = 0; i < deValues.Length; i++) {  	if (deFormat [i] == 24) {  		string word = "";  		int mask = 0x3F;  		for (int j = 0; j < 4; j++) {  			int idx = (deValues [i] >> 6 * j) & mask;  			word += BarcodeCore.numberText [idx];  		}  		decodeValue += word + "\r\n";  	}  	else if (deFormat [i] == 32) {  		byte[] iByte = BitConverter.GetBytes (deValues [i]);  		float f2 = BitConverter.ToSingle (iByte' 0);  		decodeValue += f2.ToString () + "\r\n";  	}  	else {  		decodeValue += deValues [i].ToString () + "\r\n";  	}  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: if (deFormat [i] == 24) {  	string word = "";  	int mask = 0x3F;  	for (int j = 0; j < 4; j++) {  		int idx = (deValues [i] >> 6 * j) & mask;  		word += BarcodeCore.numberText [idx];  	}  	decodeValue += word + "\r\n";  }  else if (deFormat [i] == 32) {  	byte[] iByte = BitConverter.GetBytes (deValues [i]);  	float f2 = BitConverter.ToSingle (iByte' 0);  	decodeValue += f2.ToString () + "\r\n";  }  else {  	decodeValue += deValues [i].ToString () + "\r\n";  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: if (deFormat [i] == 24) {  	string word = "";  	int mask = 0x3F;  	for (int j = 0; j < 4; j++) {  		int idx = (deValues [i] >> 6 * j) & mask;  		word += BarcodeCore.numberText [idx];  	}  	decodeValue += word + "\r\n";  }  else if (deFormat [i] == 32) {  	byte[] iByte = BitConverter.GetBytes (deValues [i]);  	float f2 = BitConverter.ToSingle (iByte' 0);  	decodeValue += f2.ToString () + "\r\n";  }  else {  	decodeValue += deValues [i].ToString () + "\r\n";  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: if (deFormat [i] == 24) {  	string word = "";  	int mask = 0x3F;  	for (int j = 0; j < 4; j++) {  		int idx = (deValues [i] >> 6 * j) & mask;  		word += BarcodeCore.numberText [idx];  	}  	decodeValue += word + "\r\n";  }  else if (deFormat [i] == 32) {  	byte[] iByte = BitConverter.GetBytes (deValues [i]);  	float f2 = BitConverter.ToSingle (iByte' 0);  	decodeValue += f2.ToString () + "\r\n";  }  else {  	decodeValue += deValues [i].ToString () + "\r\n";  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: if (deFormat [i] == 24) {  	string word = "";  	int mask = 0x3F;  	for (int j = 0; j < 4; j++) {  		int idx = (deValues [i] >> 6 * j) & mask;  		word += BarcodeCore.numberText [idx];  	}  	decodeValue += word + "\r\n";  }  else if (deFormat [i] == 32) {  	byte[] iByte = BitConverter.GetBytes (deValues [i]);  	float f2 = BitConverter.ToSingle (iByte' 0);  	decodeValue += f2.ToString () + "\r\n";  }  else {  	decodeValue += deValues [i].ToString () + "\r\n";  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: for (int j = 0; j < 4; j++) {  	int idx = (deValues [i] >> 6 * j) & mask;  	word += BarcodeCore.numberText [idx];  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: for (int j = 0; j < 4; j++) {  	int idx = (deValues [i] >> 6 * j) & mask;  	word += BarcodeCore.numberText [idx];  }  
Magic Number,BarcodeGenerator,Form1,C:\repos\hermanliang_BCTest\BarcodeGenerator\Form1.cs,btnDecode_Click,The following statement contains a magic number: if (deFormat [i] == 32) {  	byte[] iByte = BitConverter.GetBytes (deValues [i]);  	float f2 = BitConverter.ToSingle (iByte' 0);  	decodeValue += f2.ToString () + "\r\n";  }  else {  	decodeValue += deValues [i].ToString () + "\r\n";  }  
