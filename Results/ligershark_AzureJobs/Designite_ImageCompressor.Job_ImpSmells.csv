Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ImageCompressor.Job,ImageCompressor,C:\repos\ligershark_AzureJobs\ImageCompressor.Job\ImageCompressor.cs,GetArguments,The length of the statement  "                    return string.Format(CultureInfo.CurrentCulture' "/c jpegtran -copy none -optimize -progressive -outfile \"{1}\" \"{0}\""' sourceFile' targetFile); " is 147.
Long Statement,ImageCompressor.Job,ImageCompressor,C:\repos\ligershark_AzureJobs\ImageCompressor.Job\ImageCompressor.cs,GetArguments,The length of the statement  "                    return string.Format(CultureInfo.CurrentCulture' "/c gifsicle -O3 --batch --colors=256 \"{0}\" --output=\"{1}\""' sourceFile' targetFile); " is 138.
Long Statement,ImageCompressor.Job,ImageCompressorManager,C:\repos\ligershark_AzureJobs\ImageCompressor.Job\ImageCompressorManager.cs,WriteToLog,The length of the statement  "                    var logItem = new LogItem { FileName = BuildRelativeFilePath(e.OriginalFileName)' OriginalSizeBytes = e.OriginalFileSize' NewSizeBytes = e.ResultFileSize }; " is 156.
Long Statement,ImageCompressor.Job,Program,C:\repos\ligershark_AzureJobs\ImageCompressor.Job\Program.cs,StartAsAzureJob,The length of the statement  "                cmdLineOptions.ItemsToProcessDirectory = Environment.GetEnvironmentVariable("AZURE_IMAGE_OPTIMIZER_PATH") ?? @"D:\home\site\wwwroot\"; " is 134.
Long Statement,ImageCompressor.Job,Program,C:\repos\ligershark_AzureJobs\ImageCompressor.Job\Program.cs,StartAsAzureJob,The length of the statement  "                cmdLineOptions.OptimizerCacheFile = Path.Combine(cmdLineOptions.ItemsToProcessDirectory' @"app_data\ImageOptimizerHashTable.xml"); " is 130.
Long Statement,ImageCompressor.Job,Program,C:\repos\ligershark_AzureJobs\ImageCompressor.Job\Program.cs,StartAsAzureJob,The length of the statement  "                //cmdLineOptions.ItemsToProcessDirectory = @"C:\Users\madsk\Documents\GitHub\AzureJobs\Azurejobs.Web\ImageOptimization\img"; " is 124.
Empty Catch Block,ImageCompressor.Job,ImageCompressor,C:\repos\ligershark_AzureJobs\ImageCompressor.Job\ImageCompressor.cs,RunProcess,The method has an empty catch block.
Empty Catch Block,ImageCompressor.Job,ImageCompressor,C:\repos\ligershark_AzureJobs\ImageCompressor.Job\ImageCompressor.cs,HandleResult,The method has an empty catch block.
Empty Catch Block,ImageCompressor.Job,ImageCompressorManager,C:\repos\ligershark_AzureJobs\ImageCompressor.Job\ImageCompressorManager.cs,ProcessQueue,The method has an empty catch block.
Magic Number,ImageCompressor.Job,ImageCompressor,C:\repos\ligershark_AzureJobs\ImageCompressor.Job\ImageCompressor.cs,RunProcess,The following statement contains a magic number: try {                  using (var process = Process.Start(start)) {                      process.WaitForExit(7000);                      var result = new CompressionResult(sourceFile' targetFile);                      HandleResult(result);                  }              }              catch { }
Magic Number,ImageCompressor.Job,Program,C:\repos\ligershark_AzureJobs\ImageCompressor.Job\Program.cs,StartAsAzureJob,The following statement contains a magic number: try {                  cmdLineOptions = new CommandLineOptions();                  cmdLineOptions.ItemsToProcessDirectory = Environment.GetEnvironmentVariable("AZURE_IMAGE_OPTIMIZER_PATH") ?? @"D:\home\site\wwwroot\";                  cmdLineOptions.FileExtensionsToCompress = new string[] { "*.png"' "*.jpg"' "*.jpeg"' "*.gif" };                  cmdLineOptions.OptimizerCacheFile = Path.Combine(cmdLineOptions.ItemsToProcessDirectory' @"app_data\ImageOptimizerHashTable.xml");                  //cmdLineOptions.ItemsToProcessDirectory = @"C:\Users\madsk\Documents\GitHub\AzureJobs\Azurejobs.Web\ImageOptimization\img";                    var imgCompressorMgr = new ImageCompressorManager(cmdLineOptions);                  imgCompressorMgr.Run();                    Timer timer = new Timer((o) => imgCompressorMgr.ProcessQueue());                  timer.Change(1000' 5000);                    while (true) {                      Thread.Sleep(2000);                  }              }              catch (Exception ex) {                  System.Diagnostics.Trace.TraceError(ex.ToString());                  throw ex;              }
Magic Number,ImageCompressor.Job,Program,C:\repos\ligershark_AzureJobs\ImageCompressor.Job\Program.cs,StartAsAzureJob,The following statement contains a magic number: try {                  cmdLineOptions = new CommandLineOptions();                  cmdLineOptions.ItemsToProcessDirectory = Environment.GetEnvironmentVariable("AZURE_IMAGE_OPTIMIZER_PATH") ?? @"D:\home\site\wwwroot\";                  cmdLineOptions.FileExtensionsToCompress = new string[] { "*.png"' "*.jpg"' "*.jpeg"' "*.gif" };                  cmdLineOptions.OptimizerCacheFile = Path.Combine(cmdLineOptions.ItemsToProcessDirectory' @"app_data\ImageOptimizerHashTable.xml");                  //cmdLineOptions.ItemsToProcessDirectory = @"C:\Users\madsk\Documents\GitHub\AzureJobs\Azurejobs.Web\ImageOptimization\img";                    var imgCompressorMgr = new ImageCompressorManager(cmdLineOptions);                  imgCompressorMgr.Run();                    Timer timer = new Timer((o) => imgCompressorMgr.ProcessQueue());                  timer.Change(1000' 5000);                    while (true) {                      Thread.Sleep(2000);                  }              }              catch (Exception ex) {                  System.Diagnostics.Trace.TraceError(ex.ToString());                  throw ex;              }
Magic Number,ImageCompressor.Job,Program,C:\repos\ligershark_AzureJobs\ImageCompressor.Job\Program.cs,StartAsAzureJob,The following statement contains a magic number: try {                  cmdLineOptions = new CommandLineOptions();                  cmdLineOptions.ItemsToProcessDirectory = Environment.GetEnvironmentVariable("AZURE_IMAGE_OPTIMIZER_PATH") ?? @"D:\home\site\wwwroot\";                  cmdLineOptions.FileExtensionsToCompress = new string[] { "*.png"' "*.jpg"' "*.jpeg"' "*.gif" };                  cmdLineOptions.OptimizerCacheFile = Path.Combine(cmdLineOptions.ItemsToProcessDirectory' @"app_data\ImageOptimizerHashTable.xml");                  //cmdLineOptions.ItemsToProcessDirectory = @"C:\Users\madsk\Documents\GitHub\AzureJobs\Azurejobs.Web\ImageOptimization\img";                    var imgCompressorMgr = new ImageCompressorManager(cmdLineOptions);                  imgCompressorMgr.Run();                    Timer timer = new Timer((o) => imgCompressorMgr.ProcessQueue());                  timer.Change(1000' 5000);                    while (true) {                      Thread.Sleep(2000);                  }              }              catch (Exception ex) {                  System.Diagnostics.Trace.TraceError(ex.ToString());                  throw ex;              }
Magic Number,ImageCompressor.Job,Program,C:\repos\ligershark_AzureJobs\ImageCompressor.Job\Program.cs,RunCompressor,The following statement contains a magic number: if (cmdLineOptions.StartListener) {                  Console.WriteLine("Press Enter to quit at any time.");                  do {                      while (Console.KeyAvailable) {                          System.Threading.Thread.Sleep(1000);                          imgCompressorMgr.ProcessQueue();                      }                  } while (Console.ReadKey(true).Key != ConsoleKey.Enter);              }
Missing Default,ImageCompressor.Job,ImageCompressor,C:\repos\ligershark_AzureJobs\ImageCompressor.Job\ImageCompressor.cs,GetArguments,The following switch statement is missing a default case: switch (ext) {                  case ".png":                      return string.Format(CultureInfo.CurrentCulture' "/c png.cmd \"{0}\" \"{1}\""' sourceFile' targetFile);                    case ".jpg":                  case ".jpeg":                      return string.Format(CultureInfo.CurrentCulture' "/c jpegtran -copy none -optimize -progressive -outfile \"{1}\" \"{0}\""' sourceFile' targetFile);                    case ".gif":                      return string.Format(CultureInfo.CurrentCulture' "/c gifsicle -O3 --batch --colors=256 \"{0}\" --output=\"{1}\""' sourceFile' targetFile);              }
