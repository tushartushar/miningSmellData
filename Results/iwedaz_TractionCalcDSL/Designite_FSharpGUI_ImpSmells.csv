Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,BuildAutocompleteMenu,Cyclomatic complexity of the method is 9
Complex Method,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,ReBuildObjectExplorer,Cyclomatic complexity of the method is 12
Complex Method,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,tsFiles_TabStripItemClosing,Cyclomatic complexity of the method is 8
Complex Method,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,dslTemplateList_MouseDoubleClick,Cyclomatic complexity of the method is 44
Complex Method,FSharpGUI,InvisibleCharsRenderer,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,Draw,Cyclomatic complexity of the method is 8
Long Statement,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,ReBuildObjectExplorer,The length of the statement  "		Regex regex = new Regex (@"^(?<range>[\w\s]+\b(module|type|let|member|interface)\s+[\w<>\.'\s]+)|^\s*(public|private|internal|protected)[^\n]+(\n?\s*{|;)?"' RegexOptions.Multiline); " is 181.
Long Statement,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,tsFiles_TabStripItemClosing,The length of the statement  "		switch (MessageBox.Show ("Do you want save " + e.Item.Title + " ?"' "Save"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Information)) { " is 137.
Long Statement,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,tmUpdateInterface_Tick,The length of the statement  "			cutToolStripButton.Enabled = cutToolStripMenuItem.Enabled = copyToolStripButton.Enabled = copyToolStripMenuItem.Enabled = !tb.Selection.IsEmpty; " is 144.
Long Statement,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,tmUpdateInterface_Tick,The length of the statement  "			cutToolStripButton.Enabled = cutToolStripMenuItem.Enabled = copyToolStripButton.Enabled = copyToolStripMenuItem.Enabled = false; " is 128.
Long Statement,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,gotoButton_DropDownOpening,The length of the statement  "			var item = gotoButton.DropDownItems.Add (bookmark.Name + " [" + Path.GetFileNameWithoutExtension (tab.Tag as string) + "]"); " is 124.
Long Statement,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,runScriptButton_Click,The length of the statement  "		if (MessageBox.Show ("Перед запуском файл необходимо сохранить. Продолжить?"' "Сохранение файла"' MessageBoxButtons.YesNo) == DialogResult.Yes) " is 143.
Magic Number,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,CreateTab,The following statement contains a magic number: try {  	var tb = new FastColoredTextBox ();  	tb.Font = new Font ("Consolas"' 9.75f);  	tb.ContextMenuStrip = cmMain;  	tb.Dock = DockStyle.Fill;  	tb.BorderStyle = BorderStyle.Fixed3D;  	//tb.VirtualSpace = true;  	tb.LeftPadding = 17;  	tb.Language = Language.FSharp;  	tb.AddStyle (sameWordsStyle);  	//same words style  	var tab = new FATabStripItem (fileName != null ? Path.GetFileName (fileName) : "[new]"' tb);  	tab.Tag = fileName;  	if (fileName != null)  		tb.OpenFile (fileName' System.Text.Encoding.UTF8);  	else  		tb.Text = @"//Если данный файл не будет исполняться //и его предполагается использовать как шаблон //для хранения описанного вагона' локомотива и т.д.' //то необходимо удалить блок заключённый в ###### //################################################## #load ""DSLLocalRU.fsx""  open TractionCalc.MeasurementUnit open TractionCalc.Consts open TractionCalc.DSLDeclaration open TractionCalc.DSLLocalRU //##################################################  //Для загрузки шаблона из этого файла //необходимо написать //#load ""ПУТЬ/К/ФАЙЛУ/ИМЯ_ФАЙЛА_С_РАСШИРЕНИЕМ"" //в исполняемом файле в той строке' //где должен находиться объект  //Рекомендуется хранить только один описанный объект //на один файл шаблона   ";  	tb.Tag = new TbInfo ();  	tsFiles.AddTab (tab);  	tsFiles.SelectedItem = tab;  	tb.Focus ();  	tb.DelayedTextChangedInterval = 1000;  	tb.DelayedEventsInterval = 500;  	tb.TextChangedDelayed += new EventHandler<TextChangedEventArgs> (tb_TextChangedDelayed);  	tb.SelectionChangedDelayed += new EventHandler (tb_SelectionChangedDelayed);  	tb.KeyDown += new KeyEventHandler (tb_KeyDown);  	tb.MouseMove += new MouseEventHandler (tb_MouseMove);  	tb.ChangedLineColor = changedLineColor;  	if (btHighlightCurrentLine.Checked)  		tb.CurrentLineColor = currentLineColor;  	tb.ShowFoldingLines = btShowFoldingLines.Checked;  	tb.HighlightingRangeType = HighlightingRangeType.VisibleRange;  	//create autocomplete popup menu  	AutocompleteMenu popupMenu = new AutocompleteMenu (tb);  	popupMenu.Items.ImageList = ilAutocomplete;  	popupMenu.Opening += new EventHandler<CancelEventArgs> (popupMenu_Opening);  	BuildAutocompleteMenu (popupMenu);  	(tb.Tag as TbInfo).popupMenu = popupMenu;  }  catch (Exception ex) {  	if (MessageBox.Show (ex.Message' "Error"' MessageBoxButtons.RetryCancel' MessageBoxIcon.Error) == DialogResult.Retry)  		CreateTab (fileName);  }  
Magic Number,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,CreateTab,The following statement contains a magic number: try {  	var tb = new FastColoredTextBox ();  	tb.Font = new Font ("Consolas"' 9.75f);  	tb.ContextMenuStrip = cmMain;  	tb.Dock = DockStyle.Fill;  	tb.BorderStyle = BorderStyle.Fixed3D;  	//tb.VirtualSpace = true;  	tb.LeftPadding = 17;  	tb.Language = Language.FSharp;  	tb.AddStyle (sameWordsStyle);  	//same words style  	var tab = new FATabStripItem (fileName != null ? Path.GetFileName (fileName) : "[new]"' tb);  	tab.Tag = fileName;  	if (fileName != null)  		tb.OpenFile (fileName' System.Text.Encoding.UTF8);  	else  		tb.Text = @"//Если данный файл не будет исполняться //и его предполагается использовать как шаблон //для хранения описанного вагона' локомотива и т.д.' //то необходимо удалить блок заключённый в ###### //################################################## #load ""DSLLocalRU.fsx""  open TractionCalc.MeasurementUnit open TractionCalc.Consts open TractionCalc.DSLDeclaration open TractionCalc.DSLLocalRU //##################################################  //Для загрузки шаблона из этого файла //необходимо написать //#load ""ПУТЬ/К/ФАЙЛУ/ИМЯ_ФАЙЛА_С_РАСШИРЕНИЕМ"" //в исполняемом файле в той строке' //где должен находиться объект  //Рекомендуется хранить только один описанный объект //на один файл шаблона   ";  	tb.Tag = new TbInfo ();  	tsFiles.AddTab (tab);  	tsFiles.SelectedItem = tab;  	tb.Focus ();  	tb.DelayedTextChangedInterval = 1000;  	tb.DelayedEventsInterval = 500;  	tb.TextChangedDelayed += new EventHandler<TextChangedEventArgs> (tb_TextChangedDelayed);  	tb.SelectionChangedDelayed += new EventHandler (tb_SelectionChangedDelayed);  	tb.KeyDown += new KeyEventHandler (tb_KeyDown);  	tb.MouseMove += new MouseEventHandler (tb_MouseMove);  	tb.ChangedLineColor = changedLineColor;  	if (btHighlightCurrentLine.Checked)  		tb.CurrentLineColor = currentLineColor;  	tb.ShowFoldingLines = btShowFoldingLines.Checked;  	tb.HighlightingRangeType = HighlightingRangeType.VisibleRange;  	//create autocomplete popup menu  	AutocompleteMenu popupMenu = new AutocompleteMenu (tb);  	popupMenu.Items.ImageList = ilAutocomplete;  	popupMenu.Opening += new EventHandler<CancelEventArgs> (popupMenu_Opening);  	BuildAutocompleteMenu (popupMenu);  	(tb.Tag as TbInfo).popupMenu = popupMenu;  }  catch (Exception ex) {  	if (MessageBox.Show (ex.Message' "Error"' MessageBoxButtons.RetryCancel' MessageBoxIcon.Error) == DialogResult.Retry)  		CreateTab (fileName);  }  
Magic Number,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,CreateTab,The following statement contains a magic number: try {  	var tb = new FastColoredTextBox ();  	tb.Font = new Font ("Consolas"' 9.75f);  	tb.ContextMenuStrip = cmMain;  	tb.Dock = DockStyle.Fill;  	tb.BorderStyle = BorderStyle.Fixed3D;  	//tb.VirtualSpace = true;  	tb.LeftPadding = 17;  	tb.Language = Language.FSharp;  	tb.AddStyle (sameWordsStyle);  	//same words style  	var tab = new FATabStripItem (fileName != null ? Path.GetFileName (fileName) : "[new]"' tb);  	tab.Tag = fileName;  	if (fileName != null)  		tb.OpenFile (fileName' System.Text.Encoding.UTF8);  	else  		tb.Text = @"//Если данный файл не будет исполняться //и его предполагается использовать как шаблон //для хранения описанного вагона' локомотива и т.д.' //то необходимо удалить блок заключённый в ###### //################################################## #load ""DSLLocalRU.fsx""  open TractionCalc.MeasurementUnit open TractionCalc.Consts open TractionCalc.DSLDeclaration open TractionCalc.DSLLocalRU //##################################################  //Для загрузки шаблона из этого файла //необходимо написать //#load ""ПУТЬ/К/ФАЙЛУ/ИМЯ_ФАЙЛА_С_РАСШИРЕНИЕМ"" //в исполняемом файле в той строке' //где должен находиться объект  //Рекомендуется хранить только один описанный объект //на один файл шаблона   ";  	tb.Tag = new TbInfo ();  	tsFiles.AddTab (tab);  	tsFiles.SelectedItem = tab;  	tb.Focus ();  	tb.DelayedTextChangedInterval = 1000;  	tb.DelayedEventsInterval = 500;  	tb.TextChangedDelayed += new EventHandler<TextChangedEventArgs> (tb_TextChangedDelayed);  	tb.SelectionChangedDelayed += new EventHandler (tb_SelectionChangedDelayed);  	tb.KeyDown += new KeyEventHandler (tb_KeyDown);  	tb.MouseMove += new MouseEventHandler (tb_MouseMove);  	tb.ChangedLineColor = changedLineColor;  	if (btHighlightCurrentLine.Checked)  		tb.CurrentLineColor = currentLineColor;  	tb.ShowFoldingLines = btShowFoldingLines.Checked;  	tb.HighlightingRangeType = HighlightingRangeType.VisibleRange;  	//create autocomplete popup menu  	AutocompleteMenu popupMenu = new AutocompleteMenu (tb);  	popupMenu.Items.ImageList = ilAutocomplete;  	popupMenu.Opening += new EventHandler<CancelEventArgs> (popupMenu_Opening);  	BuildAutocompleteMenu (popupMenu);  	(tb.Tag as TbInfo).popupMenu = popupMenu;  }  catch (Exception ex) {  	if (MessageBox.Show (ex.Message' "Error"' MessageBoxButtons.RetryCancel' MessageBoxIcon.Error) == DialogResult.Retry)  		CreateTab (fileName);  }  
Magic Number,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,CreateTab,The following statement contains a magic number: tb.LeftPadding = 17;  
Magic Number,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,CreateTab,The following statement contains a magic number: tb.DelayedTextChangedInterval = 1000;  
Magic Number,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,CreateTab,The following statement contains a magic number: tb.DelayedEventsInterval = 500;  
Magic Number,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,BuildAutocompleteMenu,The following statement contains a magic number: foreach (var item in methods)  	items.Add (new MethodAutocompleteItem (item) {  		ImageIndex = 2  	});  
Magic Number,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,BuildAutocompleteMenu,The following statement contains a magic number: items.Add (new MethodAutocompleteItem (item) {  	ImageIndex = 2  });  
Magic Number,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,ReBuildObjectExplorer,The following statement contains a magic number: try {  	List<ExplorerItem> list = new List<ExplorerItem> ();  	int lastClassIndex = -1;  	//find classes' methods and properties  	Regex regex = new Regex (@"^(?<range>[\w\s]+\b(module|type|let|member|interface)\s+[\w<>\.'\s]+)|^\s*(public|private|internal|protected)[^\n]+(\n?\s*{|;)?"' RegexOptions.Multiline);  	foreach (Match r in regex.Matches (text))  		try {  			string s = r.Value;  			int i = s.IndexOfAny (new char[] {  				'=''  				'{''  				';'  			});  			if (i >= 0)  				s = s.Substring (0' i);  			s = s.Trim ();  			var item = new ExplorerItem () {  				title = s'  				position = r.Index  			};  			if (Regex.IsMatch (item.title' @"\b(module|type|let|member|interface)\b")) {  				item.title = item.title.Substring (item.title.LastIndexOf (' ')).Trim ();  				if (item.title.Contains ("this."))  					item.title = item.title.Split (new[] {  						'.'  					}) [1];  				item.type = ExplorerItemType.Class;  				list.Sort (lastClassIndex + 1' list.Count - (lastClassIndex + 1)' new ExplorerItemComparer ());  				lastClassIndex = list.Count;  			}  			else if (item.title.Contains (" event ")) {  				int ii = item.title.LastIndexOf (' ');  				item.title = item.title.Substring (ii).Trim ();  				item.type = ExplorerItemType.Event;  			}  			else if (item.title.Contains ("(")) {  				var parts = item.title.Split ('(');  				item.title = parts [0].Substring (parts [0].LastIndexOf (' ')).Trim () + "(" + parts [1];  				item.type = ExplorerItemType.Method;  			}  			else if (item.title.EndsWith ("]")) {  				var parts = item.title.Split ('[');  				if (parts.Length < 2)  					continue;  				item.title = parts [0].Substring (parts [0].LastIndexOf (' ')).Trim () + "[" + parts [1];  				item.type = ExplorerItemType.Method;  			}  			else {  				int ii = item.title.LastIndexOf (' ');  				item.title = item.title.Substring (ii).Trim ();  				item.type = ExplorerItemType.Property;  			}  			list.Add (item);  		}  		catch {  			;  		}  	list.Sort (lastClassIndex + 1' list.Count - (lastClassIndex + 1)' new ExplorerItemComparer ());  	BeginInvoke (new Action (() =>  {  		explorerList = list;  		dgvObjectExplorer.RowCount = explorerList.Count;  		dgvObjectExplorer.Invalidate ();  	}));  }  catch {  	;  }  
Magic Number,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,ReBuildObjectExplorer,The following statement contains a magic number: foreach (Match r in regex.Matches (text))  	try {  		string s = r.Value;  		int i = s.IndexOfAny (new char[] {  			'=''  			'{''  			';'  		});  		if (i >= 0)  			s = s.Substring (0' i);  		s = s.Trim ();  		var item = new ExplorerItem () {  			title = s'  			position = r.Index  		};  		if (Regex.IsMatch (item.title' @"\b(module|type|let|member|interface)\b")) {  			item.title = item.title.Substring (item.title.LastIndexOf (' ')).Trim ();  			if (item.title.Contains ("this."))  				item.title = item.title.Split (new[] {  					'.'  				}) [1];  			item.type = ExplorerItemType.Class;  			list.Sort (lastClassIndex + 1' list.Count - (lastClassIndex + 1)' new ExplorerItemComparer ());  			lastClassIndex = list.Count;  		}  		else if (item.title.Contains (" event ")) {  			int ii = item.title.LastIndexOf (' ');  			item.title = item.title.Substring (ii).Trim ();  			item.type = ExplorerItemType.Event;  		}  		else if (item.title.Contains ("(")) {  			var parts = item.title.Split ('(');  			item.title = parts [0].Substring (parts [0].LastIndexOf (' ')).Trim () + "(" + parts [1];  			item.type = ExplorerItemType.Method;  		}  		else if (item.title.EndsWith ("]")) {  			var parts = item.title.Split ('[');  			if (parts.Length < 2)  				continue;  			item.title = parts [0].Substring (parts [0].LastIndexOf (' ')).Trim () + "[" + parts [1];  			item.type = ExplorerItemType.Method;  		}  		else {  			int ii = item.title.LastIndexOf (' ');  			item.title = item.title.Substring (ii).Trim ();  			item.type = ExplorerItemType.Property;  		}  		list.Add (item);  	}  	catch {  		;  	}  
Magic Number,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,ReBuildObjectExplorer,The following statement contains a magic number: try {  	string s = r.Value;  	int i = s.IndexOfAny (new char[] {  		'=''  		'{''  		';'  	});  	if (i >= 0)  		s = s.Substring (0' i);  	s = s.Trim ();  	var item = new ExplorerItem () {  		title = s'  		position = r.Index  	};  	if (Regex.IsMatch (item.title' @"\b(module|type|let|member|interface)\b")) {  		item.title = item.title.Substring (item.title.LastIndexOf (' ')).Trim ();  		if (item.title.Contains ("this."))  			item.title = item.title.Split (new[] {  				'.'  			}) [1];  		item.type = ExplorerItemType.Class;  		list.Sort (lastClassIndex + 1' list.Count - (lastClassIndex + 1)' new ExplorerItemComparer ());  		lastClassIndex = list.Count;  	}  	else if (item.title.Contains (" event ")) {  		int ii = item.title.LastIndexOf (' ');  		item.title = item.title.Substring (ii).Trim ();  		item.type = ExplorerItemType.Event;  	}  	else if (item.title.Contains ("(")) {  		var parts = item.title.Split ('(');  		item.title = parts [0].Substring (parts [0].LastIndexOf (' ')).Trim () + "(" + parts [1];  		item.type = ExplorerItemType.Method;  	}  	else if (item.title.EndsWith ("]")) {  		var parts = item.title.Split ('[');  		if (parts.Length < 2)  			continue;  		item.title = parts [0].Substring (parts [0].LastIndexOf (' ')).Trim () + "[" + parts [1];  		item.type = ExplorerItemType.Method;  	}  	else {  		int ii = item.title.LastIndexOf (' ');  		item.title = item.title.Substring (ii).Trim ();  		item.type = ExplorerItemType.Property;  	}  	list.Add (item);  }  catch {  	;  }  
Magic Number,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,ReBuildObjectExplorer,The following statement contains a magic number: if (Regex.IsMatch (item.title' @"\b(module|type|let|member|interface)\b")) {  	item.title = item.title.Substring (item.title.LastIndexOf (' ')).Trim ();  	if (item.title.Contains ("this."))  		item.title = item.title.Split (new[] {  			'.'  		}) [1];  	item.type = ExplorerItemType.Class;  	list.Sort (lastClassIndex + 1' list.Count - (lastClassIndex + 1)' new ExplorerItemComparer ());  	lastClassIndex = list.Count;  }  else if (item.title.Contains (" event ")) {  	int ii = item.title.LastIndexOf (' ');  	item.title = item.title.Substring (ii).Trim ();  	item.type = ExplorerItemType.Event;  }  else if (item.title.Contains ("(")) {  	var parts = item.title.Split ('(');  	item.title = parts [0].Substring (parts [0].LastIndexOf (' ')).Trim () + "(" + parts [1];  	item.type = ExplorerItemType.Method;  }  else if (item.title.EndsWith ("]")) {  	var parts = item.title.Split ('[');  	if (parts.Length < 2)  		continue;  	item.title = parts [0].Substring (parts [0].LastIndexOf (' ')).Trim () + "[" + parts [1];  	item.type = ExplorerItemType.Method;  }  else {  	int ii = item.title.LastIndexOf (' ');  	item.title = item.title.Substring (ii).Trim ();  	item.type = ExplorerItemType.Property;  }  
Magic Number,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,ReBuildObjectExplorer,The following statement contains a magic number: if (item.title.Contains (" event ")) {  	int ii = item.title.LastIndexOf (' ');  	item.title = item.title.Substring (ii).Trim ();  	item.type = ExplorerItemType.Event;  }  else if (item.title.Contains ("(")) {  	var parts = item.title.Split ('(');  	item.title = parts [0].Substring (parts [0].LastIndexOf (' ')).Trim () + "(" + parts [1];  	item.type = ExplorerItemType.Method;  }  else if (item.title.EndsWith ("]")) {  	var parts = item.title.Split ('[');  	if (parts.Length < 2)  		continue;  	item.title = parts [0].Substring (parts [0].LastIndexOf (' ')).Trim () + "[" + parts [1];  	item.type = ExplorerItemType.Method;  }  else {  	int ii = item.title.LastIndexOf (' ');  	item.title = item.title.Substring (ii).Trim ();  	item.type = ExplorerItemType.Property;  }  
Magic Number,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,ReBuildObjectExplorer,The following statement contains a magic number: if (item.title.Contains ("(")) {  	var parts = item.title.Split ('(');  	item.title = parts [0].Substring (parts [0].LastIndexOf (' ')).Trim () + "(" + parts [1];  	item.type = ExplorerItemType.Method;  }  else if (item.title.EndsWith ("]")) {  	var parts = item.title.Split ('[');  	if (parts.Length < 2)  		continue;  	item.title = parts [0].Substring (parts [0].LastIndexOf (' ')).Trim () + "[" + parts [1];  	item.type = ExplorerItemType.Method;  }  else {  	int ii = item.title.LastIndexOf (' ');  	item.title = item.title.Substring (ii).Trim ();  	item.type = ExplorerItemType.Property;  }  
Magic Number,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,ReBuildObjectExplorer,The following statement contains a magic number: if (item.title.EndsWith ("]")) {  	var parts = item.title.Split ('[');  	if (parts.Length < 2)  		continue;  	item.title = parts [0].Substring (parts [0].LastIndexOf (' ')).Trim () + "[" + parts [1];  	item.type = ExplorerItemType.Method;  }  else {  	int ii = item.title.LastIndexOf (' ');  	item.title = item.title.Substring (ii).Trim ();  	item.type = ExplorerItemType.Property;  }  
Magic Number,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,ReBuildObjectExplorer,The following statement contains a magic number: if (parts.Length < 2)  	continue;  
Magic Number,FSharpGUI,InvisibleCharsRenderer,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,Draw,The following statement contains a magic number: using (Brush brush = new SolidBrush (pen.Color))  	foreach (var place in range) {  		switch (tb [place].c) {  		case ' ':  			var point = tb.PlaceToPoint (place);  			point.Offset (tb.CharWidth / 2' tb.CharHeight / 2);  			gr.DrawLine (pen' point.X' point.Y' point.X + 1' point.Y);  			break;  		}  		if (tb [place.iLine].Count - 1 == place.iChar) {  			var point = tb.PlaceToPoint (place);  			point.Offset (tb.CharWidth' 0);  			gr.DrawString ("¶"' tb.Font' brush' point);  		}  	}  
Magic Number,FSharpGUI,InvisibleCharsRenderer,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,Draw,The following statement contains a magic number: using (Brush brush = new SolidBrush (pen.Color))  	foreach (var place in range) {  		switch (tb [place].c) {  		case ' ':  			var point = tb.PlaceToPoint (place);  			point.Offset (tb.CharWidth / 2' tb.CharHeight / 2);  			gr.DrawLine (pen' point.X' point.Y' point.X + 1' point.Y);  			break;  		}  		if (tb [place.iLine].Count - 1 == place.iChar) {  			var point = tb.PlaceToPoint (place);  			point.Offset (tb.CharWidth' 0);  			gr.DrawString ("¶"' tb.Font' brush' point);  		}  	}  
Magic Number,FSharpGUI,InvisibleCharsRenderer,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,Draw,The following statement contains a magic number: foreach (var place in range) {  	switch (tb [place].c) {  	case ' ':  		var point = tb.PlaceToPoint (place);  		point.Offset (tb.CharWidth / 2' tb.CharHeight / 2);  		gr.DrawLine (pen' point.X' point.Y' point.X + 1' point.Y);  		break;  	}  	if (tb [place.iLine].Count - 1 == place.iChar) {  		var point = tb.PlaceToPoint (place);  		point.Offset (tb.CharWidth' 0);  		gr.DrawString ("¶"' tb.Font' brush' point);  	}  }  
Magic Number,FSharpGUI,InvisibleCharsRenderer,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,Draw,The following statement contains a magic number: foreach (var place in range) {  	switch (tb [place].c) {  	case ' ':  		var point = tb.PlaceToPoint (place);  		point.Offset (tb.CharWidth / 2' tb.CharHeight / 2);  		gr.DrawLine (pen' point.X' point.Y' point.X + 1' point.Y);  		break;  	}  	if (tb [place.iLine].Count - 1 == place.iChar) {  		var point = tb.PlaceToPoint (place);  		point.Offset (tb.CharWidth' 0);  		gr.DrawString ("¶"' tb.Font' brush' point);  	}  }  
Magic Number,FSharpGUI,InvisibleCharsRenderer,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,Draw,The following statement contains a magic number: switch (tb [place].c) {  case ' ':  	var point = tb.PlaceToPoint (place);  	point.Offset (tb.CharWidth / 2' tb.CharHeight / 2);  	gr.DrawLine (pen' point.X' point.Y' point.X + 1' point.Y);  	break;  }  
Magic Number,FSharpGUI,InvisibleCharsRenderer,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,Draw,The following statement contains a magic number: switch (tb [place].c) {  case ' ':  	var point = tb.PlaceToPoint (place);  	point.Offset (tb.CharWidth / 2' tb.CharHeight / 2);  	gr.DrawLine (pen' point.X' point.Y' point.X + 1' point.Y);  	break;  }  
Magic Number,FSharpGUI,InvisibleCharsRenderer,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,Draw,The following statement contains a magic number: point.Offset (tb.CharWidth / 2' tb.CharHeight / 2);  
Magic Number,FSharpGUI,InvisibleCharsRenderer,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,Draw,The following statement contains a magic number: point.Offset (tb.CharWidth / 2' tb.CharHeight / 2);  
Magic Number,FSharpGUI,FSharpInterctive,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpInterctive.cs,Run,The following statement contains a magic number: foreach (var item in _scriptLines) {  	StringBuilder strBuilder = new StringBuilder (item);  	//for(int i = 0 ; i < strBuilder.Length ; i++)  	//{  	//	if(rusLowLetter.Contains(strBuilder [i].ToString()))  	//		strBuilder [i] = Char.ToUpper(strBuilder [i]);  	//}  	Encoding destinationDecoder1 = System.Console.OutputEncoding;  	Encoding destinationDecoder2 = System.Console.InputEncoding;  	Encoding destinationDecoder3 = Encoding.Default;  	Encoding destinationDecoder4 = Encoding.UTF7;  	Encoding destinationDecoder5 = Encoding.UTF8;  	Encoding destinationDecoder6 = Encoding.UTF32;  	Encoding destinationDecoder7 = Encoding.Unicode;  	Encoding destinationDecoder8 = Encoding.GetEncoding (866);  	Encoding destinationDecoder9 = Encoding.GetEncoding (1251);  	Encoding destinationDecoder10 = _proc.StandardInput.Encoding;  	byte[] bStr = Encoding.UTF8.GetBytes (strBuilder.ToString ());  	byte[] dstBytes1 = Encoding.Convert (Encoding.UTF8' destinationDecoder1' bStr);  	byte[] dstBytes2 = Encoding.Convert (Encoding.UTF8' destinationDecoder2' bStr);  	byte[] dstBytes3 = Encoding.Convert (Encoding.UTF8' destinationDecoder3' bStr);  	byte[] dstBytes4 = Encoding.Convert (Encoding.UTF8' destinationDecoder4' bStr);  	byte[] dstBytes5 = Encoding.Convert (Encoding.UTF8' destinationDecoder5' bStr);  	byte[] dstBytes6 = Encoding.Convert (Encoding.UTF8' destinationDecoder6' bStr);  	byte[] dstBytes7 = Encoding.Convert (Encoding.UTF8' destinationDecoder7' bStr);  	byte[] dstBytes8 = Encoding.Convert (Encoding.UTF8' destinationDecoder8' bStr);  	byte[] dstBytes9 = Encoding.Convert (Encoding.UTF8' destinationDecoder9' bStr);  	string str1 = destinationDecoder1.GetString (bStr);  	string str2 = destinationDecoder2.GetString (bStr);  	string str3 = destinationDecoder3.GetString (bStr);  	string str4 = destinationDecoder4.GetString (bStr);  	string str5 = destinationDecoder5.GetString (bStr);  	string str6 = destinationDecoder6.GetString (bStr);  	string str7 = destinationDecoder7.GetString (bStr);  	string str8 = destinationDecoder8.GetString (bStr);  	string str9 = destinationDecoder9.GetString (bStr);  	if (item.Contains ("поезд")) {  		int i = 0;  		i++;  	}  	//_proc.StandardInput.WriteLine(strBuilder.ToString());  	_proc.StandardInput.WriteLine (str8);  	//_proc.StandardInput.WriteLine(item);  }  
Magic Number,FSharpGUI,FSharpInterctive,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpInterctive.cs,Run,The following statement contains a magic number: foreach (var item in _scriptLines) {  	StringBuilder strBuilder = new StringBuilder (item);  	//for(int i = 0 ; i < strBuilder.Length ; i++)  	//{  	//	if(rusLowLetter.Contains(strBuilder [i].ToString()))  	//		strBuilder [i] = Char.ToUpper(strBuilder [i]);  	//}  	Encoding destinationDecoder1 = System.Console.OutputEncoding;  	Encoding destinationDecoder2 = System.Console.InputEncoding;  	Encoding destinationDecoder3 = Encoding.Default;  	Encoding destinationDecoder4 = Encoding.UTF7;  	Encoding destinationDecoder5 = Encoding.UTF8;  	Encoding destinationDecoder6 = Encoding.UTF32;  	Encoding destinationDecoder7 = Encoding.Unicode;  	Encoding destinationDecoder8 = Encoding.GetEncoding (866);  	Encoding destinationDecoder9 = Encoding.GetEncoding (1251);  	Encoding destinationDecoder10 = _proc.StandardInput.Encoding;  	byte[] bStr = Encoding.UTF8.GetBytes (strBuilder.ToString ());  	byte[] dstBytes1 = Encoding.Convert (Encoding.UTF8' destinationDecoder1' bStr);  	byte[] dstBytes2 = Encoding.Convert (Encoding.UTF8' destinationDecoder2' bStr);  	byte[] dstBytes3 = Encoding.Convert (Encoding.UTF8' destinationDecoder3' bStr);  	byte[] dstBytes4 = Encoding.Convert (Encoding.UTF8' destinationDecoder4' bStr);  	byte[] dstBytes5 = Encoding.Convert (Encoding.UTF8' destinationDecoder5' bStr);  	byte[] dstBytes6 = Encoding.Convert (Encoding.UTF8' destinationDecoder6' bStr);  	byte[] dstBytes7 = Encoding.Convert (Encoding.UTF8' destinationDecoder7' bStr);  	byte[] dstBytes8 = Encoding.Convert (Encoding.UTF8' destinationDecoder8' bStr);  	byte[] dstBytes9 = Encoding.Convert (Encoding.UTF8' destinationDecoder9' bStr);  	string str1 = destinationDecoder1.GetString (bStr);  	string str2 = destinationDecoder2.GetString (bStr);  	string str3 = destinationDecoder3.GetString (bStr);  	string str4 = destinationDecoder4.GetString (bStr);  	string str5 = destinationDecoder5.GetString (bStr);  	string str6 = destinationDecoder6.GetString (bStr);  	string str7 = destinationDecoder7.GetString (bStr);  	string str8 = destinationDecoder8.GetString (bStr);  	string str9 = destinationDecoder9.GetString (bStr);  	if (item.Contains ("поезд")) {  		int i = 0;  		i++;  	}  	//_proc.StandardInput.WriteLine(strBuilder.ToString());  	_proc.StandardInput.WriteLine (str8);  	//_proc.StandardInput.WriteLine(item);  }  
Magic Number,FSharpGUI,FSharpInterctive,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpInterctive.cs,AppendText,The following statement contains a magic number: if (InvokeRequired)  	this.BeginInvoke ((MethodInvoker)delegate {  		AppendText (consoleOutputText);  	});  else {  	//Encoding destinationDecoder = Encoding.Default;  	//Encoding destinationDecoder = Encoding.UTF8;  	//Encoding destinationDecoder = Encoding.Unicode;  	//Encoding destinationDecoder = Encoding.GetEncoding(866);  	//Encoding destinationDecoder = System.Console.InputEncoding;  	Encoding sourceDecoder = System.Console.OutputEncoding;  	byte[] bStr = sourceDecoder.GetBytes (consoleOutputText);  	string str1 = Encoding.UTF8.GetString (bStr);  	string str2 = Encoding.ASCII.GetString (bStr);  	string str3 = Encoding.BigEndianUnicode.GetString (bStr);  	string str4 = Encoding.Default.GetString (bStr);  	string str5 = Encoding.Unicode.GetString (bStr);  	string str6 = Encoding.UTF32.GetString (bStr);  	string str7 = Encoding.UTF7.GetString (bStr);  	string str8 = Encoding.GetEncoding (1251).GetString (bStr);  	string str9 = System.Console.InputEncoding.GetString (bStr);  	string str10 = System.Console.OutputEncoding.GetString (bStr);  	string decodedStr = Encoding.GetEncoding (866).GetString (bStr);  	if (decodedStr.Contains ("задача5")) {  		int i = 0;  		i++;  	}  	if (decodedStr.Contains ("яюхчф")) {  		int i = 0;  		i++;  	}  	fastColoredTextBox1.AppendText (decodedStr + Environment.NewLine);  }  
Magic Number,FSharpGUI,FSharpInterctive,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpInterctive.cs,AppendText,The following statement contains a magic number: if (InvokeRequired)  	this.BeginInvoke ((MethodInvoker)delegate {  		AppendText (consoleOutputText);  	});  else {  	//Encoding destinationDecoder = Encoding.Default;  	//Encoding destinationDecoder = Encoding.UTF8;  	//Encoding destinationDecoder = Encoding.Unicode;  	//Encoding destinationDecoder = Encoding.GetEncoding(866);  	//Encoding destinationDecoder = System.Console.InputEncoding;  	Encoding sourceDecoder = System.Console.OutputEncoding;  	byte[] bStr = sourceDecoder.GetBytes (consoleOutputText);  	string str1 = Encoding.UTF8.GetString (bStr);  	string str2 = Encoding.ASCII.GetString (bStr);  	string str3 = Encoding.BigEndianUnicode.GetString (bStr);  	string str4 = Encoding.Default.GetString (bStr);  	string str5 = Encoding.Unicode.GetString (bStr);  	string str6 = Encoding.UTF32.GetString (bStr);  	string str7 = Encoding.UTF7.GetString (bStr);  	string str8 = Encoding.GetEncoding (1251).GetString (bStr);  	string str9 = System.Console.InputEncoding.GetString (bStr);  	string str10 = System.Console.OutputEncoding.GetString (bStr);  	string decodedStr = Encoding.GetEncoding (866).GetString (bStr);  	if (decodedStr.Contains ("задача5")) {  		int i = 0;  		i++;  	}  	if (decodedStr.Contains ("яюхчф")) {  		int i = 0;  		i++;  	}  	fastColoredTextBox1.AppendText (decodedStr + Environment.NewLine);  }  
Missing Default,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,tsFiles_TabStripItemClosing,The following switch statement is missing a default case: switch (MessageBox.Show ("Do you want save " + e.Item.Title + " ?"' "Save"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Information)) {  case DialogResult.Yes:  	if (!Save (e.Item))  		e.Cancel = true;  	break;  case DialogResult.Cancel:  	e.Cancel = true;  	break;  }  
Missing Default,FSharpGUI,FSharpGUI,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,dgvObjectExplorer_CellValueNeeded,The following switch statement is missing a default case: switch (item.type) {  case ExplorerItemType.Class:  	e.Value = Properties.Resources.class_libraries;  	return;  case ExplorerItemType.Method:  	e.Value = Properties.Resources.box;  	return;  case ExplorerItemType.Event:  	e.Value = Properties.Resources.lightning;  	return;  case ExplorerItemType.Property:  	e.Value = Properties.Resources.property;  	return;  }  
Missing Default,FSharpGUI,InvisibleCharsRenderer,C:\repos\iwedaz_TractionCalcDSL\FSharpGUI\FSharpGUI.cs,Draw,The following switch statement is missing a default case: switch (tb [place].c) {  case ' ':  	var point = tb.PlaceToPoint (place);  	point.Offset (tb.CharWidth / 2' tb.CharHeight / 2);  	gr.DrawLine (pen' point.X' point.Y' point.X + 1' point.Y);  	break;  }  
